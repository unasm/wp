-- phpMyAdmin SQL Dump
-- version 3.3.8.1
-- http://www.phpmyadmin.net
--
-- 主机: w.rdc.sae.sina.com.cn:3307
-- 生成日期: 2015 年 07 月 17 日 14:32
-- 服务器版本: 5.5.27
-- PHP 版本: 5.3.3

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- 数据库: `app_unasm`
--

-- --------------------------------------------------------

--
-- 表的结构 `wp_commentmeta`
--

CREATE TABLE IF NOT EXISTS `wp_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=160 ;

--
-- 转存表中的数据 `wp_commentmeta`
--

INSERT INTO `wp_commentmeta` (`meta_id`, `comment_id`, `meta_key`, `meta_value`) VALUES
(88, 53, 'akismet_delayed_moderation_email', '1'),
(87, 53, 'akismet_as_submitted', 'a:13:{s:14:"comment_author";s:3:"yun";s:20:"comment_author_email";s:13:"yunfei@qq.com";s:18:"comment_author_url";s:26:"http://www.yun.356688.com/";s:15:"comment_content";s:36:"学习学习，研究研究，呵呵";s:12:"comment_type";s:0:"";s:7:"user_ID";i:0;s:7:"user_id";i:0;s:7:"user_ip";s:12:"112.246.4.97";s:10:"user_agent";s:116:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0";s:4:"blog";s:24:"http://unasm.sinaapp.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:31:"http://unasm.sinaapp.com/?p=354";}'),
(86, 53, 'akismet_history', 'a:4:{s:4:"time";d:1436001593.157867908477783203125;s:7:"message";s:99:"Akismet was unable to check this comment (response: invalid), will automatically retry again later.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}'),
(85, 53, 'akismet_error', '1436001593'),
(99, 52, 'akismet_history', 'a:4:{s:4:"time";d:1436769137.1994578838348388671875;s:7:"message";s:41:"unasm changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"unasm";}'),
(98, 53, '_wp_trash_meta_time', '1436769137'),
(97, 53, '_wp_trash_meta_status', '0'),
(96, 53, 'akismet_history', 'a:4:{s:4:"time";d:1436769137.1592540740966796875;s:7:"message";s:41:"unasm changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"unasm";}'),
(95, 54, '_wp_trash_meta_time', '1436769137'),
(94, 54, '_wp_trash_meta_status', '0'),
(93, 54, 'akismet_history', 'a:4:{s:4:"time";d:1436769137.1188170909881591796875;s:7:"message";s:41:"unasm changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"unasm";}'),
(92, 54, 'akismet_delayed_moderation_email', '1'),
(91, 54, 'akismet_as_submitted', 'a:13:{s:14:"comment_author";s:8:"yameimei";s:20:"comment_author_email";s:16:"805679970@qq.com";s:18:"comment_author_url";s:31:"http://www.yameimei.356688.com/";s:15:"comment_content";s:21:"拜读一下，哈哈";s:12:"comment_type";s:0:"";s:7:"user_ID";i:0;s:7:"user_id";i:0;s:7:"user_ip";s:15:"112.252.208.143";s:10:"user_agent";s:116:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0";s:4:"blog";s:24:"http://unasm.sinaapp.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:31:"http://unasm.sinaapp.com/?p=363";}'),
(90, 54, 'akismet_history', 'a:4:{s:4:"time";d:1436696491.811173915863037109375;s:7:"message";s:99:"Akismet was unable to check this comment (response: invalid), will automatically retry again later.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}'),
(89, 54, 'akismet_error', '1436696491'),
(100, 52, '_wp_trash_meta_status', '0'),
(101, 52, '_wp_trash_meta_time', '1436769137'),
(102, 51, 'akismet_history', 'a:4:{s:4:"time";d:1436769137.23888111114501953125;s:7:"message";s:41:"unasm changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"unasm";}'),
(103, 51, '_wp_trash_meta_status', '0'),
(104, 51, '_wp_trash_meta_time', '1436769137'),
(105, 50, 'akismet_history', 'a:4:{s:4:"time";d:1436769137.2783019542694091796875;s:7:"message";s:41:"unasm changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"unasm";}'),
(106, 50, '_wp_trash_meta_status', '0'),
(107, 50, '_wp_trash_meta_time', '1436769137'),
(108, 49, 'akismet_history', 'a:4:{s:4:"time";d:1436769137.316358089447021484375;s:7:"message";s:41:"unasm changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"unasm";}'),
(109, 49, '_wp_trash_meta_status', '0'),
(110, 49, '_wp_trash_meta_time', '1436769137'),
(111, 48, 'akismet_history', 'a:4:{s:4:"time";d:1436769137.3555281162261962890625;s:7:"message";s:41:"unasm changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"unasm";}'),
(112, 48, '_wp_trash_meta_status', '0'),
(113, 48, '_wp_trash_meta_time', '1436769137'),
(114, 47, 'akismet_history', 'a:4:{s:4:"time";d:1436769137.400167942047119140625;s:7:"message";s:41:"unasm changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"unasm";}'),
(115, 47, '_wp_trash_meta_status', '0'),
(116, 47, '_wp_trash_meta_time', '1436769137'),
(117, 46, 'akismet_history', 'a:4:{s:4:"time";d:1436769137.451795101165771484375;s:7:"message";s:41:"unasm changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"unasm";}'),
(118, 46, '_wp_trash_meta_status', '0'),
(119, 46, '_wp_trash_meta_time', '1436769137'),
(120, 45, 'akismet_history', 'a:4:{s:4:"time";d:1436769137.4906270503997802734375;s:7:"message";s:41:"unasm changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"unasm";}'),
(121, 45, '_wp_trash_meta_status', '0'),
(122, 45, '_wp_trash_meta_time', '1436769137'),
(123, 44, 'akismet_history', 'a:4:{s:4:"time";d:1436769137.527182102203369140625;s:7:"message";s:41:"unasm changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"unasm";}'),
(124, 44, '_wp_trash_meta_status', '0'),
(125, 44, '_wp_trash_meta_time', '1436769137'),
(126, 43, 'akismet_history', 'a:4:{s:4:"time";d:1436769137.566082000732421875;s:7:"message";s:41:"unasm changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"unasm";}'),
(127, 43, '_wp_trash_meta_status', '0'),
(128, 43, '_wp_trash_meta_time', '1436769137'),
(129, 55, 'akismet_error', '1436784276'),
(130, 55, 'akismet_history', 'a:4:{s:4:"time";d:1436784276.722693920135498046875;s:7:"message";s:99:"Akismet was unable to check this comment (response: invalid), will automatically retry again later.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}'),
(131, 55, 'akismet_as_submitted', 'a:13:{s:14:"comment_author";s:16:"Carolynn Dececco";s:20:"comment_author_email";s:21:"brady_dexter@yahoo.de";s:18:"comment_author_url";s:76:"http://dluxeinternacional.com/?option=com_k2&view=itemlist&task=user&id=4235";s:15:"comment_content";s:213:"You will just ought to fill in the simple demand form online and get endorsement of Australian Payday Loan Laws within hours Carolynn Dececco \r\nusually, your past credit problems are not that much of your concern.";s:12:"comment_type";s:0:"";s:7:"user_ID";i:0;s:7:"user_id";i:0;s:7:"user_ip";s:12:"188.214.8.55";s:10:"user_agent";s:108:"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36";s:4:"blog";s:24:"http://unasm.sinaapp.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:30:"http://unasm.sinaapp.com/?p=81";}'),
(132, 55, 'akismet_delayed_moderation_email', '1'),
(133, 56, 'akismet_error', '1436820076'),
(134, 56, 'akismet_history', 'a:4:{s:4:"time";d:1436820076.877552032470703125;s:7:"message";s:92:"Akismet was unable to check this comment (response: ), will automatically retry again later.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}'),
(135, 56, 'akismet_as_submitted', 'a:13:{s:14:"comment_author";s:14:"Karisa Thorson";s:20:"comment_author_email";s:19:"hayleyshang@live.de";s:18:"comment_author_url";s:70:"http://alfatest.com.au/?option=com_k2&view=itemlist&task=user&id=40203";s:15:"comment_content";s:207:"Italian loans to business fall further in July Karisa Thorson with \r\ncountless online lenders to pick from, it is really \r\na very exhaustive exercise to appear through each and every lender for the internet.";s:12:"comment_type";s:0:"";s:7:"user_ID";i:0;s:7:"user_id";i:0;s:7:"user_ip";s:14:"78.129.131.125";s:10:"user_agent";s:108:"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36";s:4:"blog";s:24:"http://unasm.sinaapp.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:31:"http://unasm.sinaapp.com/?p=115";}'),
(136, 56, 'akismet_delayed_moderation_email', '1'),
(138, 57, 'akismet_error', '1436966055'),
(139, 57, 'akismet_history', 'a:4:{s:4:"time";d:1436966055.3134639263153076171875;s:7:"message";s:99:"Akismet was unable to check this comment (response: invalid), will automatically retry again later.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}'),
(140, 57, 'akismet_as_submitted', 'a:13:{s:14:"comment_author";s:18:"ray ban sunglasses";s:20:"comment_author_email";s:19:"apccsplsa@gmail.com";s:18:"comment_author_url";s:28:"http://www.sunglasses-hut.cc";s:15:"comment_content";s:438:"<a href="http://www.official-mkoutlet.cc/" title="michael kors outlet"><strong>michael kors outlet</strong></a>  \r\n  <a href="http://www.coach-factory-outlet.xyz/" title="coach factory outlet"><strong>coach factory outlet</strong></a>  \r\n  <a href="http://www.cheap-oakleys.org/" title="cheap oakleys"><strong>cheap oakleys</strong></a>  \r\n  <a href="http://rayban-sunglasses.joanhedman.com" title="ray bans"><strong>ray bans</strong></a>";s:12:"comment_type";s:0:"";s:7:"user_ID";i:0;s:7:"user_id";i:0;s:7:"user_ip";s:15:"112.111.185.161";s:10:"user_agent";s:50:"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)";s:4:"blog";s:24:"http://unasm.sinaapp.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:30:"http://unasm.sinaapp.com/?p=39";}'),
(141, 57, 'akismet_delayed_moderation_email', '1'),
(142, 58, 'akismet_error', '1437011173'),
(143, 58, 'akismet_history', 'a:4:{s:4:"time";d:1437011173.344892024993896484375;s:7:"message";s:99:"Akismet was unable to check this comment (response: invalid), will automatically retry again later.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}'),
(144, 58, 'akismet_as_submitted', 'a:13:{s:14:"comment_author";s:12:"博客群发";s:20:"comment_author_email";s:15:"14022301@qq.com";s:18:"comment_author_url";s:27:"http://www.5555.356688.com/";s:15:"comment_content";s:214:"群发两万评论，只需二十元钱。\r\n\r\n独立博客，一博一条，无重复，提供详细群发记录。\r\n\r\nhttp://www.5555.356688.com/?Action=Register\r\n\r\n升级VIP后联系群发，非我下线无效。";s:12:"comment_type";s:0:"";s:7:"user_ID";i:0;s:7:"user_id";i:0;s:7:"user_ip";s:14:"112.252.212.51";s:10:"user_agent";s:116:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0";s:4:"blog";s:24:"http://unasm.sinaapp.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:31:"http://unasm.sinaapp.com/?p=389";}'),
(145, 58, 'akismet_delayed_moderation_email', '1'),
(147, 58, 'akismet_history', 'a:4:{s:4:"time";d:1437054411.8383190631866455078125;s:7:"message";s:41:"unasm changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"unasm";}'),
(148, 58, '_wp_trash_meta_status', '0'),
(149, 58, '_wp_trash_meta_time', '1437054411'),
(150, 57, 'akismet_history', 'a:4:{s:4:"time";d:1437054411.877687931060791015625;s:7:"message";s:41:"unasm changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"unasm";}'),
(151, 57, '_wp_trash_meta_status', '0'),
(152, 57, '_wp_trash_meta_time', '1437054411'),
(153, 56, 'akismet_history', 'a:4:{s:4:"time";d:1437054411.91730403900146484375;s:7:"message";s:41:"unasm changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"unasm";}'),
(154, 56, '_wp_trash_meta_status', '0'),
(155, 56, '_wp_trash_meta_time', '1437054411'),
(156, 55, 'akismet_history', 'a:4:{s:4:"time";d:1437054427.133174896240234375;s:7:"message";s:41:"unasm changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"unasm";}'),
(157, 55, '_wp_trash_meta_status', '0'),
(158, 55, '_wp_trash_meta_time', '1437054427');

-- --------------------------------------------------------

--
-- 表的结构 `wp_comments`
--

CREATE TABLE IF NOT EXISTS `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` tinytext NOT NULL,
  `comment_author_email` varchar(100) NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) NOT NULL DEFAULT '',
  `comment_type` varchar(20) NOT NULL DEFAULT '',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`),
  KEY `comment_author_email` (`comment_author_email`(10))
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=59 ;

--
-- 转存表中的数据 `wp_comments`
--

INSERT INTO `wp_comments` (`comment_ID`, `comment_post_ID`, `comment_author`, `comment_author_email`, `comment_author_url`, `comment_author_IP`, `comment_date`, `comment_date_gmt`, `comment_content`, `comment_karma`, `comment_approved`, `comment_agent`, `comment_type`, `comment_parent`, `user_id`) VALUES
(55, 81, 'Carolynn Dececco', 'brady_dexter@yahoo.de', 'http://dluxeinternacional.com/?option=com_k2&amp;view=itemlist&amp;task=user&amp;id=4235', '188.214.8.55', '2015-07-13 10:44:36', '2015-07-13 10:44:36', 'You will just ought to fill in the simple demand form online and get endorsement of Australian Payday Loan Laws within hours Carolynn Dececco \r\nusually, your past credit problems are not that much of your concern.', 0, 'trash', 'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36', '', 0, 0),
(51, 315, 'liuhuan0212', '2030580226@qq.com', 'http://www.liuhuan0212.356688.com/', '218.57.46.118', '2015-06-25 03:08:06', '2015-06-25 03:08:06', '雁过留声，人过留评', 0, 'trash', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0', '', 0, 0),
(52, 243, 'dualiatus', 'eliizabethnyoung95@gmail.com', 'http://auto-traffic-avalanche.com/download.html', '134.249.49.104', '2015-06-25 11:39:41', '2015-06-25 11:39:41', 'What if there was a way to get thousands of visitors a day to your unasm.sinaapp.com website and make $144,000 in one month \r\nwith: \r\n \r\n* No prior experience \r\n* No SEO or tech experience \r\n* No selling or cold calling \r\n* No substantial investments in advertising or marketing \r\n \r\nSounds crazy, but it''s true, and here''s proof: \r\n \r\nhttp://auto-traffic-avalanche.com/download.html \r\n \r\nI don''t know how long this system  is going to be up, but you \r\nowe it to yourself to check it out... \r\n \r\nhttp://auto-traffic-avalanche.com/download.html \r\n \r\nIt will just take a minute, and it could change your life \r\nfor the better! \r\n \r\nhttp://auto-traffic-avalanche.com/download.html \r\n \r\nBest Regards, \r\nYour old friend Elizabeth', 0, 'trash', 'Mozilla/5.0 (Windows NT 6.1; rv:37.0) Gecko/20100101 Firefox/37.0', '', 0, 0),
(53, 354, 'yun', 'yunfei@qq.com', 'http://www.yun.356688.com/', '112.246.4.97', '2015-07-04 09:19:53', '2015-07-04 09:19:53', '学习学习，研究研究，呵呵', 0, 'trash', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0', '', 0, 0),
(56, 115, 'Karisa Thorson', 'hayleyshang@live.de', 'http://alfatest.com.au/?option=com_k2&amp;view=itemlist&amp;task=user&amp;id=40203', '78.129.131.125', '2015-07-13 20:41:16', '2015-07-13 20:41:16', 'Italian loans to business fall further in July Karisa Thorson with \r\ncountless online lenders to pick from, it is really \r\na very exhaustive exercise to appear through each and every lender for the internet.', 0, 'trash', 'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36', '', 0, 0),
(57, 39, 'ray ban sunglasses', 'apccsplsa@gmail.com', 'http://www.sunglasses-hut.cc', '112.111.185.161', '2015-07-15 13:14:15', '2015-07-15 13:14:15', '<a href="http://www.official-mkoutlet.cc/" title="michael kors outlet" rel="nofollow"><strong>michael kors outlet</strong></a>  \r\n  <a href="http://www.coach-factory-outlet.xyz/" title="coach factory outlet" rel="nofollow"><strong>coach factory outlet</strong></a>  \r\n  <a href="http://www.cheap-oakleys.org/" title="cheap oakleys" rel="nofollow"><strong>cheap oakleys</strong></a>  \r\n  <a href="http://rayban-sunglasses.joanhedman.com" title="ray bans" rel="nofollow"><strong>ray bans</strong></a>', 0, 'trash', 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)', '', 0, 0),
(58, 389, '博客群发', '14022301@qq.com', 'http://www.5555.356688.com/', '112.252.212.51', '2015-07-16 01:46:13', '2015-07-16 01:46:13', '群发两万评论，只需二十元钱。\r\n\r\n独立博客，一博一条，无重复，提供详细群发记录。\r\n\r\nhttp://www.5555.356688.com/?Action=Register\r\n\r\n升级VIP后联系群发，非我下线无效。', 0, 'trash', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0', '', 0, 0),
(54, 363, 'yameimei', '805679970@qq.com', 'http://www.yameimei.356688.com/', '112.252.208.143', '2015-07-12 10:21:31', '2015-07-12 10:21:31', '拜读一下，哈哈', 0, 'trash', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0', '', 0, 0),
(43, 106, 'Laptop Computers In Los Angeles', 'valentinafarquharson@zoho.com', 'http://www.toshiba.com', '142.136.185.96', '2015-06-10 13:31:00', '2015-06-10 13:31:00', 'For hottest information you have to pay a quick visit \r\ninternet and on world-wide-web I found this site as a finest site for hottest \r\nupdates.', 0, 'trash', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36', '', 0, 0),
(44, 1, 'Laptop Computers In Los Angeles', 'maziestjohn@gmail.com', 'http://www.toshiba.com', '142.136.185.96', '2015-06-10 13:34:15', '2015-06-10 13:34:15', 'Hi friends, how is the whole thing, and what you want \r\nto say regarding this article, in my view its really amazing in favor of me.', 0, 'trash', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36', '', 0, 0),
(45, 106, 'Laptop Computers In Los Angeles', 'sherrishirk@gmail.com', 'http://www.toshiba.com', '142.136.185.96', '2015-06-10 18:25:04', '2015-06-10 18:25:04', 'Hi, after reading this awesome piece of writing i am also glad to share my knowledge \r\nhere with friends.', 0, 'trash', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36', '', 0, 0),
(46, 121, 'Laptop Computers In Los Angeles', 'suzanneconover@web.de', 'http://www.toshiba.com', '142.136.185.96', '2015-06-10 18:47:55', '2015-06-10 18:47:55', 'We are a group of volunteers and opening a new scheme in our community.\r\nYour website offered us with valuable info to work on. You have done \r\na formidable job and our whole community will be grateful to you.', 0, 'trash', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36', '', 0, 0),
(47, 303, 'qq18673262', '18673262@qq.com', 'http://www.qq18673262.9489988.com/', '112.246.13.174', '2015-06-14 02:36:07', '2015-06-14 02:36:07', '不知怎么就进来了，先看看', 0, 'trash', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0', '', 0, 0),
(48, 106, 'Brittny', 'shanepicot@gmail.com', 'http://bgnw.ru/?option=com_k2&amp;view=itemlist&amp;task=user&amp;id=141969', '75.49.15.214', '2015-06-15 05:42:39', '2015-06-15 05:42:39', 'I for all time emailed this web site post page to all my contacts, for the reason that if like to read it then my links \r\nwill too.', 0, 'trash', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36', '', 0, 0),
(49, 312, 'ice10086', '2802639120@qq.com', 'http://www.ice10086.94zhuan.com/', '112.246.13.174', '2015-06-17 07:38:25', '2015-06-17 07:38:25', '我就是随便看看', 0, 'trash', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0', '', 0, 0),
(50, 264, 'Filter Cloth', 'cwzutzocv@gmail.com', 'http://www.hbfiltercloth.com/', '123.182.152.47', '2015-06-19 03:13:24', '2015-06-19 03:13:24', 'The company founded in 1985, has total assets of RMB1.52 billion, occupies a total area of 800,000 square meters, and employs 3,000 staff members, including 98 senior engineers and technicians and 319 mid-level engineers and technicians.', 0, 'trash', 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; .NET CLR 2.0.50727 ; .NET CLR 4.0.30319)', '', 0, 0);

-- --------------------------------------------------------

--
-- 表的结构 `wp_links`
--

CREATE TABLE IF NOT EXISTS `wp_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) NOT NULL DEFAULT '',
  `link_name` varchar(255) NOT NULL DEFAULT '',
  `link_image` varchar(255) NOT NULL DEFAULT '',
  `link_target` varchar(25) NOT NULL DEFAULT '',
  `link_description` varchar(255) NOT NULL DEFAULT '',
  `link_visible` varchar(20) NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) NOT NULL DEFAULT '',
  `link_notes` mediumtext NOT NULL,
  `link_rss` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

--
-- 转存表中的数据 `wp_links`
--


-- --------------------------------------------------------

--
-- 表的结构 `wp_options`
--

CREATE TABLE IF NOT EXISTS `wp_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(64) NOT NULL DEFAULT '',
  `option_value` longtext NOT NULL,
  `autoload` varchar(20) NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=5232 ;

--
-- 转存表中的数据 `wp_options`
--

INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(1, 'siteurl', 'http://unasm.com', 'yes'),
(2, 'home', 'http://unasm.com', 'yes'),
(3, 'blogname', 'Winter is coming', 'yes'),
(4, 'blogdescription', 'Valar Morghulis', 'yes'),
(5, 'users_can_register', '0', 'yes'),
(6, 'admin_email', 'unasm@sina.cn', 'yes'),
(7, 'start_of_week', '1', 'yes'),
(8, 'use_balanceTags', '0', 'yes'),
(9, 'use_smilies', '1', 'yes'),
(10, 'require_name_email', '1', 'yes'),
(11, 'comments_notify', '1', 'yes'),
(12, 'posts_per_rss', '10', 'yes'),
(13, 'rss_use_excerpt', '0', 'yes'),
(14, 'mailserver_url', 'mail.example.com', 'yes'),
(15, 'mailserver_login', 'login@example.com', 'yes'),
(16, 'mailserver_pass', 'password', 'yes'),
(17, 'mailserver_port', '110', 'yes'),
(18, 'default_category', '1', 'yes'),
(19, 'default_comment_status', 'open', 'yes'),
(20, 'default_ping_status', 'open', 'yes'),
(21, 'default_pingback_flag', '1', 'yes'),
(22, 'posts_per_page', '10', 'yes'),
(23, 'date_format', 'F j, Y', 'yes'),
(24, 'time_format', 'g:i a', 'yes'),
(25, 'links_updated_date_format', 'F j, Y g:i a', 'yes'),
(26, 'comment_moderation', '0', 'yes'),
(27, 'moderation_notify', '1', 'yes'),
(28, 'permalink_structure', '/%postname%', 'yes'),
(29, 'gzipcompression', '0', 'yes'),
(30, 'hack_file', '0', 'yes'),
(31, 'blog_charset', 'UTF-8', 'yes'),
(32, 'moderation_keys', '', 'no'),
(33, 'active_plugins', 'a:2:{i:0;s:19:"akismet/akismet.php";i:1;s:39:"syntaxhighlighter/syntaxhighlighter.php";}', 'yes'),
(34, 'category_base', '', 'yes'),
(35, 'ping_sites', 'http://rpc.pingomatic.com/', 'yes'),
(36, 'advanced_edit', '0', 'yes'),
(37, 'comment_max_links', '2', 'yes'),
(38, 'gmt_offset', '0', 'yes'),
(39, 'default_email_category', '1', 'yes'),
(40, 'recently_edited', '', 'no'),
(41, 'template', 'mh-magazine-lite', 'yes'),
(42, 'stylesheet', 'mh-magazine-lite', 'yes'),
(43, 'comment_whitelist', '1', 'yes'),
(44, 'blacklist_keys', '', 'no'),
(45, 'comment_registration', '0', 'yes'),
(46, 'html_type', 'text/html', 'yes'),
(47, 'use_trackback', '0', 'yes'),
(48, 'default_role', 'subscriber', 'yes'),
(49, 'db_version', '29630', 'yes'),
(50, 'uploads_use_yearmonth_folders', '1', 'yes'),
(51, 'upload_path', '', 'yes'),
(52, 'blog_public', '1', 'yes'),
(53, 'default_link_category', '2', 'yes'),
(54, 'show_on_front', 'posts', 'yes'),
(55, 'tag_base', '', 'yes'),
(56, 'show_avatars', '1', 'yes'),
(57, 'avatar_rating', 'G', 'yes'),
(58, 'upload_url_path', '', 'yes'),
(59, 'thumbnail_size_w', '150', 'yes'),
(60, 'thumbnail_size_h', '150', 'yes'),
(61, 'thumbnail_crop', '1', 'yes'),
(62, 'medium_size_w', '300', 'yes'),
(63, 'medium_size_h', '300', 'yes'),
(64, 'avatar_default', 'mystery', 'yes'),
(65, 'large_size_w', '1024', 'yes'),
(66, 'large_size_h', '1024', 'yes'),
(67, 'image_default_link_type', 'file', 'yes'),
(68, 'image_default_size', '', 'yes'),
(69, 'image_default_align', '', 'yes'),
(70, 'close_comments_for_old_posts', '0', 'yes'),
(71, 'close_comments_days_old', '14', 'yes'),
(72, 'thread_comments', '1', 'yes'),
(73, 'thread_comments_depth', '5', 'yes'),
(74, 'page_comments', '0', 'yes'),
(75, 'comments_per_page', '50', 'yes'),
(76, 'default_comments_page', 'newest', 'yes'),
(77, 'comment_order', 'asc', 'yes'),
(78, 'sticky_posts', 'a:0:{}', 'yes'),
(79, 'widget_categories', 'a:4:{i:2;a:4:{s:5:"title";s:10:"categories";s:5:"count";i:1;s:12:"hierarchical";i:1;s:8:"dropdown";i:0;}s:12:"_multiwidget";i:1;i:4;a:0:{}i:6;a:0:{}}', 'yes'),
(80, 'widget_text', 'a:2:{i:1;a:0:{}s:12:"_multiwidget";i:1;}', 'yes'),
(81, 'widget_rss', 'a:2:{i:1;a:0:{}s:12:"_multiwidget";i:1;}', 'yes'),
(82, 'uninstall_plugins', 'a:0:{}', 'no'),
(83, 'timezone_string', '', 'yes'),
(84, 'page_for_posts', '0', 'yes'),
(85, 'page_on_front', '0', 'yes'),
(86, 'default_post_format', '0', 'yes'),
(87, 'link_manager_enabled', '0', 'yes'),
(88, 'initial_db_version', '29630', 'yes'),
(89, 'wp_user_roles', 'a:5:{s:13:"administrator";a:2:{s:4:"name";s:13:"Administrator";s:12:"capabilities";a:62:{s:13:"switch_themes";b:1;s:11:"edit_themes";b:1;s:16:"activate_plugins";b:1;s:12:"edit_plugins";b:1;s:10:"edit_users";b:1;s:10:"edit_files";b:1;s:14:"manage_options";b:1;s:17:"moderate_comments";b:1;s:17:"manage_categories";b:1;s:12:"manage_links";b:1;s:12:"upload_files";b:1;s:6:"import";b:1;s:15:"unfiltered_html";b:1;s:10:"edit_posts";b:1;s:17:"edit_others_posts";b:1;s:20:"edit_published_posts";b:1;s:13:"publish_posts";b:1;s:10:"edit_pages";b:1;s:4:"read";b:1;s:8:"level_10";b:1;s:7:"level_9";b:1;s:7:"level_8";b:1;s:7:"level_7";b:1;s:7:"level_6";b:1;s:7:"level_5";b:1;s:7:"level_4";b:1;s:7:"level_3";b:1;s:7:"level_2";b:1;s:7:"level_1";b:1;s:7:"level_0";b:1;s:17:"edit_others_pages";b:1;s:20:"edit_published_pages";b:1;s:13:"publish_pages";b:1;s:12:"delete_pages";b:1;s:19:"delete_others_pages";b:1;s:22:"delete_published_pages";b:1;s:12:"delete_posts";b:1;s:19:"delete_others_posts";b:1;s:22:"delete_published_posts";b:1;s:20:"delete_private_posts";b:1;s:18:"edit_private_posts";b:1;s:18:"read_private_posts";b:1;s:20:"delete_private_pages";b:1;s:18:"edit_private_pages";b:1;s:18:"read_private_pages";b:1;s:12:"delete_users";b:1;s:12:"create_users";b:1;s:17:"unfiltered_upload";b:1;s:14:"edit_dashboard";b:1;s:14:"update_plugins";b:1;s:14:"delete_plugins";b:1;s:15:"install_plugins";b:1;s:13:"update_themes";b:1;s:14:"install_themes";b:1;s:11:"update_core";b:1;s:10:"list_users";b:1;s:12:"remove_users";b:1;s:9:"add_users";b:1;s:13:"promote_users";b:1;s:18:"edit_theme_options";b:1;s:13:"delete_themes";b:1;s:6:"export";b:1;}}s:6:"editor";a:2:{s:4:"name";s:6:"Editor";s:12:"capabilities";a:34:{s:17:"moderate_comments";b:1;s:17:"manage_categories";b:1;s:12:"manage_links";b:1;s:12:"upload_files";b:1;s:15:"unfiltered_html";b:1;s:10:"edit_posts";b:1;s:17:"edit_others_posts";b:1;s:20:"edit_published_posts";b:1;s:13:"publish_posts";b:1;s:10:"edit_pages";b:1;s:4:"read";b:1;s:7:"level_7";b:1;s:7:"level_6";b:1;s:7:"level_5";b:1;s:7:"level_4";b:1;s:7:"level_3";b:1;s:7:"level_2";b:1;s:7:"level_1";b:1;s:7:"level_0";b:1;s:17:"edit_others_pages";b:1;s:20:"edit_published_pages";b:1;s:13:"publish_pages";b:1;s:12:"delete_pages";b:1;s:19:"delete_others_pages";b:1;s:22:"delete_published_pages";b:1;s:12:"delete_posts";b:1;s:19:"delete_others_posts";b:1;s:22:"delete_published_posts";b:1;s:20:"delete_private_posts";b:1;s:18:"edit_private_posts";b:1;s:18:"read_private_posts";b:1;s:20:"delete_private_pages";b:1;s:18:"edit_private_pages";b:1;s:18:"read_private_pages";b:1;}}s:6:"author";a:2:{s:4:"name";s:6:"Author";s:12:"capabilities";a:10:{s:12:"upload_files";b:1;s:10:"edit_posts";b:1;s:20:"edit_published_posts";b:1;s:13:"publish_posts";b:1;s:4:"read";b:1;s:7:"level_2";b:1;s:7:"level_1";b:1;s:7:"level_0";b:1;s:12:"delete_posts";b:1;s:22:"delete_published_posts";b:1;}}s:11:"contributor";a:2:{s:4:"name";s:11:"Contributor";s:12:"capabilities";a:5:{s:10:"edit_posts";b:1;s:4:"read";b:1;s:7:"level_1";b:1;s:7:"level_0";b:1;s:12:"delete_posts";b:1;}}s:10:"subscriber";a:2:{s:4:"name";s:10:"Subscriber";s:12:"capabilities";a:2:{s:4:"read";b:1;s:7:"level_0";b:1;}}}', 'yes'),
(90, 'widget_search', 'a:2:{i:2;a:1:{s:5:"title";s:0:"";}s:12:"_multiwidget";i:1;}', 'yes'),
(91, 'widget_recent-posts', 'a:2:{i:2;a:2:{s:5:"title";s:0:"";s:6:"number";i:5;}s:12:"_multiwidget";i:1;}', 'yes'),
(92, 'widget_recent-comments', 'a:2:{i:2;a:2:{s:5:"title";s:0:"";s:6:"number";i:5;}s:12:"_multiwidget";i:1;}', 'yes'),
(93, 'widget_archives', 'a:2:{i:2;a:3:{s:5:"title";s:0:"";s:5:"count";i:0;s:8:"dropdown";i:0;}s:12:"_multiwidget";i:1;}', 'yes'),
(94, 'widget_meta', 'a:2:{i:2;a:1:{s:5:"title";s:0:"";}s:12:"_multiwidget";i:1;}', 'yes'),
(95, 'sidebars_widgets', 'a:14:{s:19:"wp_inactive_widgets";a:1:{i:0;s:12:"categories-4";}s:7:"sidebar";a:6:{i:0;s:8:"search-2";i:1;s:12:"categories-2";i:2;s:14:"recent-posts-2";i:3;s:17:"recent-comments-2";i:4;s:6:"meta-2";i:5;s:10:"archives-2";}s:6:"home-1";a:0:{}s:6:"home-2";a:0:{}s:6:"home-3";a:0:{}s:6:"home-4";a:0:{}s:6:"home-5";a:0:{}s:7:"posts-1";a:0:{}s:7:"posts-2";a:0:{}s:8:"footer-1";a:0:{}s:8:"footer-2";a:0:{}s:8:"footer-3";a:0:{}s:8:"footer-4";a:0:{}s:13:"array_version";i:3;}', 'yes'),
(96, 'cron', 'a:7:{i:1437113546;a:1:{s:29:"akismet_schedule_cron_recheck";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:2:{s:8:"schedule";b:0;s:4:"args";a:0:{}}}}i:1437117180;a:1:{s:20:"wp_maybe_auto_update";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:10:"twicedaily";s:4:"args";a:0:{}s:8:"interval";i:43200;}}}i:1437124793;a:1:{s:24:"akismet_scheduled_delete";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:5:"daily";s:4:"args";a:0:{}s:8:"interval";i:86400;}}}i:1437149799;a:3:{s:16:"wp_version_check";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:10:"twicedaily";s:4:"args";a:0:{}s:8:"interval";i:43200;}}s:17:"wp_update_plugins";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:10:"twicedaily";s:4:"args";a:0:{}s:8:"interval";i:43200;}}s:16:"wp_update_themes";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:10:"twicedaily";s:4:"args";a:0:{}s:8:"interval";i:43200;}}}i:1437149905;a:1:{s:19:"wp_scheduled_delete";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:5:"daily";s:4:"args";a:0:{}s:8:"interval";i:86400;}}}i:1437150049;a:1:{s:30:"wp_scheduled_auto_draft_delete";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:5:"daily";s:4:"args";a:0:{}s:8:"interval";i:86400;}}}s:7:"version";i:2;}', 'yes'),
(5184, '_transient_timeout_plugin_slugs', '1437199692', 'no'),
(5185, '_transient_plugin_slugs', 'a:3:{i:0;s:19:"akismet/akismet.php";i:1;s:9:"hello.php";i:2;s:39:"syntaxhighlighter/syntaxhighlighter.php";}', 'no'),
(98, '_site_transient_update_core', 'O:8:"stdClass":4:{s:7:"updates";a:1:{i:0;O:8:"stdClass":10:{s:8:"response";s:7:"upgrade";s:8:"download";s:56:"http://downloads.wordpress.org/release/wordpress-4.1.zip";s:6:"locale";s:5:"en_US";s:8:"packages";O:8:"stdClass":5:{s:4:"full";s:56:"http://downloads.wordpress.org/release/wordpress-4.1.zip";s:10:"no_content";s:67:"http://downloads.wordpress.org/release/wordpress-4.1-no-content.zip";s:11:"new_bundled";s:68:"http://downloads.wordpress.org/release/wordpress-4.1-new-bundled.zip";s:7:"partial";b:0;s:8:"rollback";b:0;}s:7:"current";s:3:"4.1";s:7:"version";s:3:"4.1";s:11:"php_version";s:5:"5.2.4";s:13:"mysql_version";s:3:"5.0";s:11:"new_bundled";s:3:"4.1";s:15:"partial_version";s:0:"";}}s:12:"last_checked";i:1437106668;s:15:"version_checked";s:3:"4.0";s:12:"translations";a:0:{}}', 'yes'),
(99, '_transient_random_seed', '980010b14ce0ea9e353c159d4d81e008', 'yes'),
(104, '_site_transient_timeout_browser_911c38ec5b2406f6449b2faaa5df8ef4', '1412093811', 'yes'),
(105, '_site_transient_browser_911c38ec5b2406f6449b2faaa5df8ef4', 'a:9:{s:8:"platform";s:5:"Linux";s:4:"name";s:6:"Chrome";s:7:"version";s:12:"37.0.2062.94";s:10:"update_url";s:28:"http://www.google.com/chrome";s:7:"img_src";s:49:"http://s.wordpress.org/images/browsers/chrome.png";s:11:"img_src_ssl";s:48:"https://wordpress.org/images/browsers/chrome.png";s:15:"current_version";s:2:"18";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(5224, '_site_transient_timeout_theme_roots', '1437114982', 'yes'),
(5225, '_site_transient_theme_roots', 'a:5:{s:10:"iconic-one";s:7:"/themes";s:16:"mh-magazine-lite";s:7:"/themes";s:14:"twentyfourteen";s:7:"/themes";s:14:"twentythirteen";s:7:"/themes";s:12:"twentytwelve";s:7:"/themes";}', 'yes'),
(5206, '_transient_timeout_feed_mod_867bd5c64f85878d03a060509cd2f92c', '1437145366', 'no'),
(106, 'can_compress_scripts', '1', 'yes'),
(4840, '_site_transient_update_plugins', 'O:8:"stdClass":5:{s:12:"last_checked";i:1437113289;s:7:"checked";a:3:{s:19:"akismet/akismet.php";s:5:"3.0.2";s:9:"hello.php";s:3:"1.6";s:39:"syntaxhighlighter/syntaxhighlighter.php";s:6:"3.1.11";}s:8:"response";a:2:{s:19:"akismet/akismet.php";O:8:"stdClass":6:{s:2:"id";s:2:"15";s:4:"slug";s:7:"akismet";s:6:"plugin";s:19:"akismet/akismet.php";s:11:"new_version";s:5:"3.1.3";s:3:"url";s:38:"https://wordpress.org/plugins/akismet/";s:7:"package";s:55:"http://downloads.wordpress.org/plugin/akismet.3.1.3.zip";}s:39:"syntaxhighlighter/syntaxhighlighter.php";O:8:"stdClass":6:{s:2:"id";s:3:"933";s:4:"slug";s:17:"syntaxhighlighter";s:6:"plugin";s:39:"syntaxhighlighter/syntaxhighlighter.php";s:11:"new_version";s:6:"3.1.12";s:3:"url";s:48:"https://wordpress.org/plugins/syntaxhighlighter/";s:7:"package";s:59:"http://downloads.wordpress.org/plugin/syntaxhighlighter.zip";}}s:12:"translations";a:0:{}s:9:"no_update";a:1:{s:9:"hello.php";O:8:"stdClass":6:{s:2:"id";s:4:"3564";s:4:"slug";s:11:"hello-dolly";s:6:"plugin";s:9:"hello.php";s:11:"new_version";s:3:"1.6";s:3:"url";s:42:"https://wordpress.org/plugins/hello-dolly/";s:7:"package";s:57:"http://downloads.wordpress.org/plugin/hello-dolly.1.6.zip";}}}', 'yes'),
(4867, 'akismet_spam_count', '6', 'yes'),
(2942, '_site_transient_update_themes', 'O:8:"stdClass":4:{s:12:"last_checked";i:1437113188;s:7:"checked";a:5:{s:10:"iconic-one";s:5:"1.4.3";s:16:"mh-magazine-lite";s:5:"1.6.2";s:14:"twentyfourteen";s:3:"1.2";s:14:"twentythirteen";s:3:"1.3";s:12:"twentytwelve";s:3:"1.5";}s:8:"response";a:5:{s:10:"iconic-one";a:4:{s:5:"theme";s:10:"iconic-one";s:11:"new_version";s:5:"1.4.5";s:3:"url";s:40:"https://wordpress.org/themes/iconic-one/";s:7:"package";s:57:"http://downloads.wordpress.org/theme/iconic-one.1.4.5.zip";}s:16:"mh-magazine-lite";a:4:{s:5:"theme";s:16:"mh-magazine-lite";s:11:"new_version";s:5:"1.8.5";s:3:"url";s:46:"https://wordpress.org/themes/mh-magazine-lite/";s:7:"package";s:63:"http://downloads.wordpress.org/theme/mh-magazine-lite.1.8.5.zip";}s:14:"twentyfourteen";a:4:{s:5:"theme";s:14:"twentyfourteen";s:11:"new_version";s:3:"1.4";s:3:"url";s:44:"https://wordpress.org/themes/twentyfourteen/";s:7:"package";s:59:"http://downloads.wordpress.org/theme/twentyfourteen.1.4.zip";}s:14:"twentythirteen";a:4:{s:5:"theme";s:14:"twentythirteen";s:11:"new_version";s:3:"1.5";s:3:"url";s:44:"https://wordpress.org/themes/twentythirteen/";s:7:"package";s:59:"http://downloads.wordpress.org/theme/twentythirteen.1.5.zip";}s:12:"twentytwelve";a:4:{s:5:"theme";s:12:"twentytwelve";s:11:"new_version";s:3:"1.7";s:3:"url";s:42:"https://wordpress.org/themes/twentytwelve/";s:7:"package";s:57:"http://downloads.wordpress.org/theme/twentytwelve.1.7.zip";}}s:12:"translations";a:0:{}}', 'yes'),
(5104, '_site_transient_timeout_browser_f42b31ad79324a39a3686c9e84dca78f', '1437457999', 'yes'),
(5105, '_site_transient_browser_f42b31ad79324a39a3686c9e84dca78f', 'a:9:{s:8:"platform";s:9:"Macintosh";s:4:"name";s:6:"Chrome";s:7:"version";s:13:"38.0.2125.122";s:10:"update_url";s:28:"http://www.google.com/chrome";s:7:"img_src";s:49:"http://s.wordpress.org/images/browsers/chrome.png";s:11:"img_src_ssl";s:48:"https://wordpress.org/images/browsers/chrome.png";s:15:"current_version";s:2:"18";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(2427, '_site_transient_timeout_browser_323693d9a6629ad0cbf835542deece21', '1423540473', 'yes'),
(2428, '_site_transient_browser_323693d9a6629ad0cbf835542deece21', 'a:9:{s:8:"platform";s:7:"Windows";s:4:"name";s:6:"Chrome";s:7:"version";s:12:"40.0.2214.93";s:10:"update_url";s:28:"http://www.google.com/chrome";s:7:"img_src";s:49:"http://s.wordpress.org/images/browsers/chrome.png";s:11:"img_src_ssl";s:48:"https://wordpress.org/images/browsers/chrome.png";s:15:"current_version";s:2:"18";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(5228, 'rewrite_rules', 'a:68:{s:47:"category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$";s:52:"index.php?category_name=$matches[1]&feed=$matches[2]";s:42:"category/(.+?)/(feed|rdf|rss|rss2|atom)/?$";s:52:"index.php?category_name=$matches[1]&feed=$matches[2]";s:35:"category/(.+?)/page/?([0-9]{1,})/?$";s:53:"index.php?category_name=$matches[1]&paged=$matches[2]";s:17:"category/(.+?)/?$";s:35:"index.php?category_name=$matches[1]";s:44:"tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:42:"index.php?tag=$matches[1]&feed=$matches[2]";s:39:"tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:42:"index.php?tag=$matches[1]&feed=$matches[2]";s:32:"tag/([^/]+)/page/?([0-9]{1,})/?$";s:43:"index.php?tag=$matches[1]&paged=$matches[2]";s:14:"tag/([^/]+)/?$";s:25:"index.php?tag=$matches[1]";s:45:"type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:50:"index.php?post_format=$matches[1]&feed=$matches[2]";s:40:"type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:50:"index.php?post_format=$matches[1]&feed=$matches[2]";s:33:"type/([^/]+)/page/?([0-9]{1,})/?$";s:51:"index.php?post_format=$matches[1]&paged=$matches[2]";s:15:"type/([^/]+)/?$";s:33:"index.php?post_format=$matches[1]";s:12:"robots\\.txt$";s:18:"index.php?robots=1";s:48:".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$";s:18:"index.php?feed=old";s:20:".*wp-app\\.php(/.*)?$";s:19:"index.php?error=403";s:18:".*wp-register.php$";s:23:"index.php?register=true";s:32:"feed/(feed|rdf|rss|rss2|atom)/?$";s:27:"index.php?&feed=$matches[1]";s:27:"(feed|rdf|rss|rss2|atom)/?$";s:27:"index.php?&feed=$matches[1]";s:20:"page/?([0-9]{1,})/?$";s:28:"index.php?&paged=$matches[1]";s:41:"comments/feed/(feed|rdf|rss|rss2|atom)/?$";s:42:"index.php?&feed=$matches[1]&withcomments=1";s:36:"comments/(feed|rdf|rss|rss2|atom)/?$";s:42:"index.php?&feed=$matches[1]&withcomments=1";s:44:"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:40:"index.php?s=$matches[1]&feed=$matches[2]";s:39:"search/(.+)/(feed|rdf|rss|rss2|atom)/?$";s:40:"index.php?s=$matches[1]&feed=$matches[2]";s:32:"search/(.+)/page/?([0-9]{1,})/?$";s:41:"index.php?s=$matches[1]&paged=$matches[2]";s:14:"search/(.+)/?$";s:23:"index.php?s=$matches[1]";s:47:"author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:50:"index.php?author_name=$matches[1]&feed=$matches[2]";s:42:"author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:50:"index.php?author_name=$matches[1]&feed=$matches[2]";s:35:"author/([^/]+)/page/?([0-9]{1,})/?$";s:51:"index.php?author_name=$matches[1]&paged=$matches[2]";s:17:"author/([^/]+)/?$";s:33:"index.php?author_name=$matches[1]";s:69:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$";s:80:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]";s:64:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$";s:80:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]";s:57:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$";s:81:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]";s:39:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$";s:63:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]";s:56:"([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$";s:64:"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]";s:51:"([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$";s:64:"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]";s:44:"([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$";s:65:"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]";s:26:"([0-9]{4})/([0-9]{1,2})/?$";s:47:"index.php?year=$matches[1]&monthnum=$matches[2]";s:43:"([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$";s:43:"index.php?year=$matches[1]&feed=$matches[2]";s:38:"([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$";s:43:"index.php?year=$matches[1]&feed=$matches[2]";s:31:"([0-9]{4})/page/?([0-9]{1,})/?$";s:44:"index.php?year=$matches[1]&paged=$matches[2]";s:13:"([0-9]{4})/?$";s:26:"index.php?year=$matches[1]";s:27:".?.+?/attachment/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:37:".?.+?/attachment/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:57:".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:52:".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:52:".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";s:20:"(.?.+?)/trackback/?$";s:35:"index.php?pagename=$matches[1]&tb=1";s:40:"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$";s:47:"index.php?pagename=$matches[1]&feed=$matches[2]";s:35:"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$";s:47:"index.php?pagename=$matches[1]&feed=$matches[2]";s:28:"(.?.+?)/page/?([0-9]{1,})/?$";s:48:"index.php?pagename=$matches[1]&paged=$matches[2]";s:35:"(.?.+?)/comment-page-([0-9]{1,})/?$";s:48:"index.php?pagename=$matches[1]&cpage=$matches[2]";s:20:"(.?.+?)(/[0-9]+)?/?$";s:47:"index.php?pagename=$matches[1]&page=$matches[2]";s:27:"[^/]+/attachment/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:37:"[^/]+/attachment/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:57:"[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:52:"[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:52:"[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";s:20:"([^/]+)/trackback/?$";s:31:"index.php?name=$matches[1]&tb=1";s:40:"([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:43:"index.php?name=$matches[1]&feed=$matches[2]";s:35:"([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:43:"index.php?name=$matches[1]&feed=$matches[2]";s:28:"([^/]+)/page/?([0-9]{1,})/?$";s:44:"index.php?name=$matches[1]&paged=$matches[2]";s:35:"([^/]+)/comment-page-([0-9]{1,})/?$";s:44:"index.php?name=$matches[1]&cpage=$matches[2]";s:20:"([^/]+)(/[0-9]+)?/?$";s:43:"index.php?name=$matches[1]&page=$matches[2]";s:16:"[^/]+/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:26:"[^/]+/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:46:"[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:41:"[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:41:"[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";}', 'yes'),
(2401, '_site_transient_timeout_browser_f226bac4ec3ff5d4470bb3265085b823', '1423449454', 'yes'),
(2402, '_site_transient_browser_f226bac4ec3ff5d4470bb3265085b823', 'a:9:{s:8:"platform";s:9:"Macintosh";s:4:"name";s:6:"Chrome";s:7:"version";s:13:"38.0.2125.122";s:10:"update_url";s:28:"http://www.google.com/chrome";s:7:"img_src";s:49:"http://s.wordpress.org/images/browsers/chrome.png";s:11:"img_src_ssl";s:48:"https://wordpress.org/images/browsers/chrome.png";s:15:"current_version";s:2:"18";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(5229, '_transient_timeout_settings_errors', '1437113347', 'no'),
(5230, '_transient_settings_errors', 'a:1:{i:0;a:4:{s:7:"setting";s:7:"general";s:4:"code";s:16:"settings_updated";s:7:"message";s:15:"Settings saved.";s:4:"type";s:7:"updated";}}', 'no'),
(5231, '_transient_doing_cron', '1437114670.3764829635620117187500', 'yes'),
(1421, '_site_transient_timeout_browser_bd68ee072619cc501ea72a8a85d99394', '1418808219', 'yes'),
(1422, '_site_transient_browser_bd68ee072619cc501ea72a8a85d99394', 'a:9:{s:8:"platform";s:7:"Windows";s:4:"name";s:6:"Chrome";s:7:"version";s:12:"39.0.2171.71";s:10:"update_url";s:28:"http://www.google.com/chrome";s:7:"img_src";s:49:"http://s.wordpress.org/images/browsers/chrome.png";s:11:"img_src_ssl";s:48:"https://wordpress.org/images/browsers/chrome.png";s:15:"current_version";s:2:"18";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(1612, '_site_transient_timeout_browser_55b6eafc563f3dc443484bb0b8cea5cd', '1419615971', 'yes'),
(1613, '_site_transient_browser_55b6eafc563f3dc443484bb0b8cea5cd', 'a:9:{s:8:"platform";s:5:"Linux";s:4:"name";s:6:"Chrome";s:7:"version";s:12:"39.0.2171.65";s:10:"update_url";s:28:"http://www.google.com/chrome";s:7:"img_src";s:49:"http://s.wordpress.org/images/browsers/chrome.png";s:11:"img_src_ssl";s:48:"https://wordpress.org/images/browsers/chrome.png";s:15:"current_version";s:2:"18";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(1079, '_site_transient_timeout_browser_ffe987f151e76f045b0ef6f83affd047', '1416988671', 'yes'),
(1080, '_site_transient_browser_ffe987f151e76f045b0ef6f83affd047', 'a:9:{s:8:"platform";s:7:"Windows";s:4:"name";s:6:"Chrome";s:7:"version";s:13:"38.0.2125.111";s:10:"update_url";s:28:"http://www.google.com/chrome";s:7:"img_src";s:49:"http://s.wordpress.org/images/browsers/chrome.png";s:11:"img_src_ssl";s:48:"https://wordpress.org/images/browsers/chrome.png";s:15:"current_version";s:2:"18";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(1154, '_site_transient_timeout_browser_6641d7bd411ba5c9be9196d65cfa91cf', '1417405016', 'yes'),
(1155, '_site_transient_browser_6641d7bd411ba5c9be9196d65cfa91cf', 'a:9:{s:8:"platform";s:7:"Windows";s:4:"name";s:6:"Chrome";s:7:"version";s:12:"39.0.2171.65";s:10:"update_url";s:28:"http://www.google.com/chrome";s:7:"img_src";s:49:"http://s.wordpress.org/images/browsers/chrome.png";s:11:"img_src_ssl";s:48:"https://wordpress.org/images/browsers/chrome.png";s:15:"current_version";s:2:"18";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(4948, '_site_transient_timeout_browser_dfee61178f8ecdf6fc9c62608f01c2e5', '1437046465', 'yes'),
(4949, '_site_transient_browser_dfee61178f8ecdf6fc9c62608f01c2e5', 'a:9:{s:8:"platform";s:9:"Macintosh";s:4:"name";s:6:"Chrome";s:7:"version";s:13:"38.0.2125.122";s:10:"update_url";s:28:"http://www.google.com/chrome";s:7:"img_src";s:49:"http://s.wordpress.org/images/browsers/chrome.png";s:11:"img_src_ssl";s:48:"https://wordpress.org/images/browsers/chrome.png";s:15:"current_version";s:2:"18";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(4805, '_site_transient_timeout_browser_43d1522b603688bda36781305c878d46', '1436425733', 'yes'),
(4806, '_site_transient_browser_43d1522b603688bda36781305c878d46', 'a:9:{s:8:"platform";s:9:"Macintosh";s:4:"name";s:7:"Firefox";s:7:"version";s:4:"38.0";s:10:"update_url";s:23:"http://www.firefox.com/";s:7:"img_src";s:50:"http://s.wordpress.org/images/browsers/firefox.png";s:11:"img_src_ssl";s:49:"https://wordpress.org/images/browsers/firefox.png";s:15:"current_version";s:2:"16";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(544, '_site_transient_timeout_browser_ee2391300fef479023f7633884798e79', '1414395841', 'yes'),
(545, '_site_transient_browser_ee2391300fef479023f7633884798e79', 'a:9:{s:8:"platform";s:7:"Windows";s:4:"name";s:6:"Chrome";s:7:"version";s:13:"37.0.2062.124";s:10:"update_url";s:28:"http://www.google.com/chrome";s:7:"img_src";s:49:"http://s.wordpress.org/images/browsers/chrome.png";s:11:"img_src_ssl";s:48:"https://wordpress.org/images/browsers/chrome.png";s:15:"current_version";s:2:"18";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(1549, 'recently_activated', 'a:0:{}', 'yes'),
(162, 'theme_mods_twentythirteen', 'a:3:{i:0;b:0;s:16:"header_textcolor";s:6:"220e10";s:16:"sidebars_widgets";a:2:{s:4:"time";i:1411616184;s:4:"data";a:3:{s:19:"wp_inactive_widgets";a:0:{}s:9:"sidebar-1";a:7:{i:0;s:8:"search-2";i:1;s:14:"recent-posts-2";i:2;s:17:"recent-comments-2";i:3;s:10:"archives-2";i:4;s:12:"categories-2";i:5;s:6:"meta-2";i:6;s:12:"categories-4";}s:9:"sidebar-2";a:0:{}}}}', 'yes'),
(163, 'widget_pages', 'a:2:{i:1;a:0:{}s:12:"_multiwidget";i:1;}', 'yes'),
(164, 'widget_calendar', 'a:2:{i:1;a:0:{}s:12:"_multiwidget";i:1;}', 'yes'),
(165, 'widget_tag_cloud', 'a:2:{i:1;a:0:{}s:12:"_multiwidget";i:1;}', 'yes'),
(174, 'theme_mods_iconic-one', 'a:15:{i:0;b:0;s:16:"background_color";s:6:"e8e8e8";s:16:"background_image";s:0:"";s:17:"background_repeat";s:6:"repeat";s:21:"background_position_x";s:4:"left";s:21:"background_attachment";s:6:"scroll";s:13:"themonic_logo";s:0:"";s:13:"textarea_copy";s:14:"Copyright 2013";s:17:"custom_text_right";s:17:"Custom Text Right";s:26:"iconic_one_social_activate";s:0:"";s:11:"twitter_url";s:19:"http://twitter.com/";s:12:"facebook_url";s:20:"http://facebook.com/";s:8:"plus_url";s:23:"http://plus.google.com/";s:7:"rss_url";s:21:"http://wordpress.org/";s:16:"sidebars_widgets";a:2:{s:4:"time";i:1412497132;s:4:"data";a:2:{s:19:"wp_inactive_widgets";a:1:{i:0;s:12:"categories-4";}s:16:"themonic-sidebar";a:6:{i:0;s:8:"search-2";i:1;s:14:"recent-posts-2";i:2;s:17:"recent-comments-2";i:3;s:10:"archives-2";i:4;s:12:"categories-2";i:5;s:6:"meta-2";}}}}', 'yes'),
(166, 'widget_nav_menu', 'a:2:{i:1;a:0:{}s:12:"_multiwidget";i:1;}', 'yes'),
(172, 'theme_mods_twentyfourteen', 'a:1:{s:16:"sidebars_widgets";a:2:{s:4:"time";i:1411647886;s:4:"data";a:4:{s:19:"wp_inactive_widgets";a:1:{i:0;s:12:"categories-4";}s:9:"sidebar-1";a:6:{i:0;s:8:"search-2";i:1;s:14:"recent-posts-2";i:2;s:17:"recent-comments-2";i:3;s:10:"archives-2";i:4;s:12:"categories-2";i:5;s:6:"meta-2";}s:9:"sidebar-2";a:0:{}s:9:"sidebar-3";a:0:{}}}}', 'yes'),
(173, 'theme_mods_mh-magazine-lite', 'a:6:{i:0;b:0;s:16:"background_color";s:0:"";s:16:"background_image";s:0:"";s:17:"background_repeat";s:6:"repeat";s:21:"background_position_x";s:4:"left";s:21:"background_attachment";s:6:"scroll";}', 'yes'),
(5204, '_transient_timeout_feed_867bd5c64f85878d03a060509cd2f92c', '1437145366', 'no');
INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(5205, '_transient_feed_867bd5c64f85878d03a060509cd2f92c', 'a:4:{s:5:"child";a:1:{s:0:"";a:1:{s:3:"rss";a:1:{i:0;a:6:{s:4:"data";s:3:"\n\n\n";s:7:"attribs";a:1:{s:0:"";a:1:{s:7:"version";s:3:"2.0";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:1:{s:7:"channel";a:1:{i:0;a:6:{s:4:"data";s:61:"\n	\n	\n	\n	\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:16:"WordPress Planet";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:28:"http://planet.wordpress.org/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"language";a:1:{i:0;a:5:{s:4:"data";s:2:"en";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:47:"WordPress Planet - http://planet.wordpress.org/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"item";a:50:{i:0;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:71:"WPTavern: WordPress 4.3 Beta 3 Adds Site Icon Feature to the Customizer";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46676";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:81:"http://wptavern.com/wordpress-4-3-beta-3-adds-site-icon-feature-to-the-customizer";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:4288:"<p>WordPress 4.3 <a href="https://wordpress.org/news/2015/07/wordpress-4-3-beta-3/" target="_blank">beta 3</a> was released this week right on <a href="https://make.wordpress.org/core/version-4-3-project-schedule/" target="_blank">schedule</a>, and beta 4 is expected to arrive next Wednesday. This release includes more than <a href="https://core.trac.wordpress.org/log?action=stop_on_copy&mode=stop_on_copy&rev=33286&stop_rev=33141&limit=150" target="_blank">140 fixes and improvements</a> since last week&#8217;s beta.</p>\n<p>One of the most important changes you&#8217;ll notice is that the <a href="http://wptavern.com/wordpress-4-3-adds-new-site-icons-feature-and-a-text-editor-to-press-this" target="_blank">Site Icon feature</a> is now available in the customizer in addition to its spot under <strong>General > Settings</strong>. The new panel is called Site Identity and it includes the site title, tagline, and the icon upload controls.</p>\n<p><a href="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/site-identity-new-customizer-panel.jpg"><img src="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/site-identity-new-customizer-panel.jpg?resize=1025%2C690" alt="site-identity-new-customizer-panel" class="aligncenter size-full wp-image-46773" /></a></p>\n<p>&#8220;The feature is now complete and requires lots of testing,&#8221; WordPress 4.3 release lead Konstantin Obenland said in the announcement. &#8220;Please help us ensure the site icon feature works well in both Settings and the Customizer.&#8221;</p>\n<p>Mark Jaquith&#8217;s work to improve passwords has also been added to the installation process so that administrators will be prompted to select a strong password when setting up a new site. This screenshot from Ryan Boren&#8217;s most recent &#8220;<a href="https://make.wordpress.org/core/2015/07/15/today-in-the-nightly-site-icons-in-the-customizer-editor-patterns-more-accessible-comment-bubbles-row-toggle-focus-styling/" target="_blank">Today in the Nightly</a>&#8221; update shows the password strength meter&#8217;s feedback added to the UI.</p>\n<a href="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/passwords-ui-on-install-screen-1024x740.png"><img src="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/passwords-ui-on-install-screen-1024x740.png?resize=1024%2C740" alt="photo credit: Ryan Boren" class="size-full wp-image-46779" /></a>photo credit: <a href="https://make.wordpress.org/core/2015/07/15/today-in-the-nightly-site-icons-in-the-customizer-editor-patterns-more-accessible-comment-bubbles-row-toggle-focus-styling/passwords-ui-on-install-screen/">Ryan Boren</a>\n<p>Boren also highlighted the value of the new Markdown-esque patterns recognized in the post editor and their convenience for mobile users. Instead of trying to format HTML on a tiny screen, users will be able to take advantage of the new shortcuts which require fewer keystrokes.</p>\n<p>&#8220;Create bulleted lists, ordered lists, and blockquotes using markdown like patterns,&#8221; he said. &#8220;I find this particularly handy on phones when the editor toolbar is offscreen.&#8221;</p>\n<a href="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/editor-patterns-keyboard-shortcuts-list.jpg"><img src="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/editor-patterns-keyboard-shortcuts-list.jpg?resize=1025%2C541" alt="photo credit: Ryan Boren" class="size-full wp-image-46785" /></a>photo credit: <a href="https://make.wordpress.org/core/2015/07/15/today-in-the-nightly-site-icons-in-the-customizer-editor-patterns-more-accessible-comment-bubbles-row-toggle-focus-styling/">Ryan Boren</a>\n<p>Beta 3 also improves the accessibility of comments and media list tables with a better design for comment bubbles and focus styling for row toggles. Obenland welcomes feedback on the accessibility improvements from those who are using WordPress with screen readers.</p>\n<p>With 140 changes in beta 3, a new round of testing is in order. You can help by installing the <a href="https://wordpress.org/plugins/wordpress-beta-tester/" target="_blank">WordPress Beta Tester</a> plugin on a development site and reporting any bugs you find in the recent improvements. The official WordPress 4.3 release is now just four weeks away.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 16 Jul 2015 22:01:04 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:1;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:59:"WPTavern: WPWeekly Episode 199 – Preview of WordPress 4.3";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:44:"http://wptavern.com?p=46746&preview_id=46746";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:65:"http://wptavern.com/wpweekly-episode-199-preview-of-wordpress-4-3";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:2747:"<p>In this episode of WordPress Weekly, <a href="http://marcuscouch.com/">Marcus Couch</a> and I preview WordPress 4.3. We discuss what WordPress.tv should do with old videos now that the site is six years old. There&#8217;s a conference this weekend devoted to the Genesis Framework and we let you know how you can watch it for free.</p>\n<p>Theme translations and language packs are on their way to the WordPress theme directory. Last but not least, we congratulate Topher DeRosia on reaching his funding goals to attend WordCamp Pune, India.</p>\n<h2>Stories Discussed:</h2>\n<p><a href="https://wordpress.org/news/2015/07/wordpress-4-3-beta-3/">WordPress 4.3 Beta 3</a><br />\n<a href="http://www.wpbeginner.com/news/whats-coming-in-wordpress-4-3-features-and-screenshots">What’s Coming in WordPress 4.3</a><br />\n<a href="https://make.wordpress.org/tv/2015/07/03/ui-for-outdated-content/">UI For Outdated Content on WordPress.tv</a><br />\n<a href="http://wptavern.com/theme-translations-and-language-packs-are-coming-to-wordpress-org">Theme Translations and Language Packs are Coming to WordPress.org</a><br />\n<a href="http://wptavern.com/the-first-24hr-conference-devoted-to-the-genesis-framework-set-for-july-19-20">The First 24hr Conference Devoted to the Genesis Framework Set for July 18-20</a><br />\n<a href="http://wptavern.com/topher-derosia-launches-gofundme-campaign-to-attend-wordcamp-pune-india">Topher DeRosia Launches GoFundMe Campaign to Attend WordCamp Pune, India</a></p>\n<h2>Plugins Picked By Marcus:</h2>\n<p><a href="https://wordpress.org/plugins/background-image-cropper/">Background Image Cropper</a> is a WordPress core feature-plugin that adds cropping to background images for parity with header images.</p>\n<p><a href="https://wordpress.org/plugins/frontier-restrict-media/">Frontier Restrict Media</a> will restrict users so they can only access their own media files from the media library.</p>\n<p><a href="https://wordpress.org/plugins/image-hover-effects/">Image Hover Effects</a> allows users to add 40+ hover effects to images with captions.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, July 22nd 9:30 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href="https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738" target="_blank">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href="http://www.wptavern.com/feed/podcast" target="_blank">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href="http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr" target="_blank">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #199:</strong><br />\n</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 16 Jul 2015 19:02:22 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Jeff Chandler";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:2;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:78:"WPTavern: How to Give Back to the WordPress Foundation when Shopping on Amazon";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46683";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:88:"http://wptavern.com/how-to-give-back-to-the-wordpress-foundation-when-shopping-on-amazon";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:5051:"<p>Consumer disappointment ran high yesterday when Amazon Prime Day <a href="https://twitter.com/hashtag/PrimeDayFail?src=hash" target="_blank">failed</a> to deliver on its ambitious claim to have &#8220;more deals than Black Friday.&#8221; Prime customers were surprised to find modest deals on knee braces, shoe horns, and pet grooming kits instead of steep discounts on shiny electronics.</p>\n<blockquote class="twitter-tweet" width="550"><p lang="en" dir="ltr">A Diane Keaton T Shirt,  with a 5 pack of brass knuckles AND ham?!?! DREAMS CAN COME TRUE <a href="https://twitter.com/hashtag/PrimeDayFail?src=hash">#PrimeDayFail</a> <a href="http://t.co/hE1X6lhGb5">pic.twitter.com/hE1X6lhGb5</a></p>\n<p>&mdash; Roy Buckingham (@shave_my_lemon) <a href="https://twitter.com/shave_my_lemon/status/621462914533232640">July 15, 2015</a></p></blockquote>\n<p></p>\n<p>The world was optimistic that if any company could create a consumer holiday out of thin air, Amazon would be the one to do it. Despite Prime Day&#8217;s humor-inspiring failure, consumer obsession with the online retail giant isn&#8217;t likely to wane anytime soon. In fact, the company reported that its &#8220;&#8216;<a href="http://phx.corporate-ir.net/phoenix.zhtml?c=176060&p=irol-newsArticle&ID=2068090" target="_blank">Prime Day&#8217; peak order rates surpassed that of 2014’s Black Friday</a>&#8221; early in the day.</p>\n<p>If you&#8217;re a die hard Amazon shopper, you&#8217;ll probably continue on as if Prime Day never happened. Here&#8217;s how you can do something good for WordPress while you&#8217;re at it:</p>\n<p>The <a href="http://smile.amazon.com/" target="_blank">AmazonSmile Foundation</a> enables shoppers to support their favorite charitable organizations when making purchases, at no extra cost. If you select a charity, AmazonSmile will automatically donate 0.5% of the purchase price from your eligible purchases. The <a href="http://wordpressfoundation.org/" target="_blank">WordPress Foundation</a> is among the nearly one million organizations that you can support.</p>\n<p><a href="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/amazon-wordpress-foundation.jpg"><img src="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/amazon-wordpress-foundation.jpg?resize=1025%2C479" alt="amazon-wordpress-foundation" class="aligncenter size-full wp-image-46731" /></a></p>\n<p>To sign up, simply visit <a href="http://smile.amazon.com/" target="_blank">Smile.Amazon.com</a> and select the WordPress Foundation. You&#8217;ll be presented with options that will help you navigate to Smile.Amazon.com more conveniently the next time you shop. If you have already selected a charity and want to change it, you can visit your account settings to search and select a new organization.</p>\n<p><a href="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/amazon-smile-change-charity.jpg"><img src="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/amazon-smile-change-charity.jpg?resize=877%2C492" alt="amazon-smile-change-charity" class="aligncenter size-full wp-image-46735" /></a></p>\n<h3>What does the WordPress Foundation do?</h3>\n<p>Before you opt to support the <a href="http://wordpressfoundation.org/" target="_blank">WordPress Foundation</a>, it&#8217;s important to know what it&#8217;s all about. The 501(c)3 non-profit organization was established &#8220;to further the mission of the WordPress open source project: to democratize publishing through Open Source, GPL software.&#8221; Matt Mullenweg created the charity to ensure that future generations will have access to WordPress as the project&#8217;s leadership and contributor base continue to evolve. It also exists to protect the WordPress and WordCamp trademarks and logos.</p>\n<p>A large portion of donations to the foundation go towards subsidizing WordCamp expenses, including video production of presentations for WordCamp.tv. The foundation also <a href="http://wptavern.com/wordpress-foundation-to-foot-the-bill-for-meetup-com-organizer-dues" target="_blank">covers Meetup.com organizer dues</a> for those who run WordPress meetups. At the beginning of this year, the foundation <a href="http://wptavern.com/the-wordpress-foundation-creates-a-traveling-scholarship-in-memory-of-kim-parsell" target="_blank">created a new traveling scholarship for women attending WordCamp US</a>, in memory of Kim Parsell, a prolific WordPress contributor who passed away this year.</p>\n<p>When you support the WordPress Foundation, you are supporting a variety of community initiatives that help ensure the future of WordPress for years to come. Rose Goldman, who helps manage the foundation, recently set the organization up on AmazonSmile. So far, she said the donations from Amazon represent just a trickle of the budget, but that&#8217;s probably due to lack of awareness of AmazonSmile. If you haven&#8217;t yet selected a charity for automatic donations from <a href="http://smile.amazon.com/" target="_blank">AmazonSmile</a>, the WordPress Foundation is a worthy cause.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 16 Jul 2015 18:52:07 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:3;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:54:"WPTavern: What Should WordPress.tv Do with Old Videos?";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46713";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:63:"http://wptavern.com/what-should-wordpress-tv-do-with-old-videos";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:4208:"<a href="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/WordPressTVFeaturedImage.png"><img class="size-full wp-image-46739" src="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/WordPressTVFeaturedImage.png?resize=666%2C254" alt="WordPress TV Featured Image" /></a>photo credit: <a href="http://www.flickr.com/photos/30719244@N06/8648634062">tvs</a> &#8211; <a href="https://creativecommons.org/licenses/by-sa/2.0/">(license)</a>\n<p><a href="http://wordpress.tv/">WordPress.tv</a> launched in <a href="https://wordpress.org/news/2009/01/wordpresstv/">January of 2009</a> and since then has become one of the largest repositories of information dedicated to WordPress. To put that in perspective, WordPress 2.8 and 2.9 were released the same year.</p>\n<p>However, with more than six years of content available, the team has run into a problem. On July 3rd, Brash Rebel, who helps manage WordPress.tv, <a href="https://make.wordpress.org/tv/2015/07/03/ui-for-outdated-content/">asked</a> if there should be a user interface for outdated content.</p>\n<blockquote><p>A reality we are now facing is the fact that the software we know and love has evolved and changed considerably over this time period, thus rendering much of the early content on this site no longer applicable to users of more current releases of WordPress. In <a href="https://wordpress.slack.com/archives/wptv/p1435856572000421">today’s TV team Slack meeting</a> the question was raised about how to properly address outdated, deprecated, no-longer-accurate content.</p></blockquote>\n<p>The first question considered is whether to keep or delete old content, specifically, videos in the <a href="http://wordpress.tv/category/how-to/">How To</a> category. Since so many people watch older tutorial style videos, the team decided that removing the content permanently from the site is not the best course of action. The other question considered is whether older presentations on specific subjects should be deleted.</p>\n<p>For example, the following two sessions are about the same subject but four years apart. The content in the 2015 video is more likely to match the Google Analytics experience of today.</p>\n<ol>\n<li><a href="http://wordpress.tv/2013/03/16/melinda-samson-workshop-google-analytics-101/">Melinda Samson: Google Analytics 101 Workshop (2011)</a></li>\n<li><a href="http://wordpress.tv/2015/05/16/david-bird-google-analytics-and-wordpress-for-beginners-2/">David Bird: Google Analytics and WordPress for Beginners (May, 2015)</a></li>\n</ol>\n<p>The team also discussed a variety of ideas on how to display information to viewers that they&#8217;re watching outdated content. These included, text prompts, information bars, links, and determining the best method to indicate videos don&#8217;t reflect the current WordPress experience.</p>\n<p>Rebel says the goal isn&#8217;t to strictly deal with the issue today, but also set a precedence for the future. As more WordCamps occur across the globe and more <a href="https://make.wordpress.org/tv/2015/06/16/do-you-screencast-or-make-video-tutorials-of-how-to-use-wordpress-wordpress-tv-wants-you/">screencasts</a> show up on WordPress.tv, the team needs to figure out a balance between displaying old content and making the most out of fresh content.</p>\n<h2>Mimic the Plugin Directory</h2>\n<p>I&#8217;m happy that the team won&#8217;t delete old videos. As someone who writes about WordPress everyday, the videos on WordPress.tv contain a wealth of knowledge. It would be a shame to see so much information deleted.</p>\n<p>I think the best and easiest solution is to mimic the WordPress plugin directory in how it deals with plugins that haven&#8217;t been updated in two years or more. A prominent message displays on the page telling the viewer that the content they&#8217;re watching is outdated. It could be taken a step further by showing the viewer a list of related videos that are more recent.</p>\n<p>I encourage you to<a href="https://make.wordpress.org/tv/2015/07/03/ui-for-outdated-content/"> read the blog post</a> and the associated comments as they contain some good ideas. What do you think should be done with old content on WordPress.tv?</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 16 Jul 2015 18:12:42 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Jeff Chandler";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:4;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:14:"Matt: TSA Jazz";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:21:"http://ma.tt/?p=45236";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:30:"http://ma.tt/2015/07/tsa-jazz/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:769:"<p>At an airport in Frankfort airport security asked famous jazz saxophonist <a href="http://www.joshuaredman.com/">Joshua Redman</a> to prove it was a real instrument.</p>\n<blockquote class="twitter-tweet" width="550"><p lang="en" dir="ltr">[airport security, FRA]&#10;*sax flagged*&#10;“Pls play”&#10;“Seriously?”&#10;“Yes”&#10;*i play Ornithology*&#10;*midway thru 1st chorus*&#10;“Enuf u’re clear pls stop”</p>\n<p>&mdash; Joshua Redman (@Joshua_Redman) <a href="https://twitter.com/Joshua_Redman/status/619144413369909248">July 9, 2015</a></p></blockquote>\n<p></p>\n<p>Hilarious! I can&#8217;t find any recordings of Joshua playing that classic bebop song, but here&#8217;s a Charlie Parker recording:</p>\n<p><span class="embed-youtube"></span></p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 16 Jul 2015 15:12:00 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:4:"Matt";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:5;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:80:"WPTavern: Explore the WordPress REST API with the New Interactive Console Plugin";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46685";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:90:"http://wptavern.com/explore-the-wordpress-rest-api-with-the-new-interactive-console-plugin";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:3697:"<p><a href="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/04/wp-rest-api.jpg"><img src="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/04/wp-rest-api.jpg?resize=1025%2C469" alt="wp-rest-api" class="aligncenter size-full wp-image-43000" /></a></p>\n<p>WordPress REST API project lead <a href="https://twitter.com/rmccue" target="_blank">Ryan McCue</a>, in cooperation with <a href="https://twitter.com/AutomatticEng" target="_blank">Automattic&#8217;s Engineering team</a>, released a <a href="https://wordpress.org/plugins/rest-api-console/" target="_blank">REST API Console</a> plugin on WordPress.org today. It&#8217;s a basic console that fits right into the WordPress admin and allows you to explore the API, make small changes, and find out what your site is exposing.</p>\n<p>&#8220;This is a forked version of the WP.com console that myself and members of the Apollo team at Automattic worked on,&#8221; McCue told the Tavern. The console was converted in approximately four casual days, and McCue credits <a href="http://viewsource.beaucollins.com/" target="_blank">Beau Collins</a> for this, as he originally wrote the majority of the console for developers working on WordPress.com.</p>\n<p>&#8220;It&#8217;s pretty useful for exploring the API as a learning tool, but also for developers who are extending the API to get a sense of how their stuff fits in,&#8221; he said.</p>\n<p>The REST API Console plugin requires the <a href="https://wordpress.org/plugin/rest-api/" target="_blank">WP REST API plugin</a> version 2.0 or later. You can find this on the <a href="https://github.com/WP-API/WP-API" target="_blank">GitHub project page</a> and version 2 should be up on WordPress.org within the next day or two. Once you have both plugins installed, the console is visible in the admin under <strong>Tools > Rest API Console</strong>.</p>\n<p><a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/wp-rest-api-console-demo.jpg"><img src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/wp-rest-api-console-demo.jpg?resize=829%2C236" alt="wp-rest-api-console-demo" class="aligncenter size-full wp-image-46693" /></a></p>\n<p>You can actually make changes to your site using the console, so it&#8217;s advisable to install it on a local site and play with it there. While the GET requests can&#8217;t change anything, the other types can edit or delete posts (which would end up in your trash).</p>\n<p>The plugin can only connect to the local site you&#8217;re currently on and cannot access remote WordPress sites. McCue recommends using something like <a href="https://www.getpostman.com/" target="_blank">Postman</a> or <a href="http://luckymarmot.com/paw" target="_blank">Paw</a> if you want to play around with remote sites.</p>\n<p>In the future, he hopes to add more features and improve the plugin&#8217;s parameter documentation.</p>\n<p>&#8220;The older WordPress.com console had the ability to click through to links, so I&#8217;d like to re-add that at some point,&#8221; he said. &#8220;The parameter documentation and tooling hasn&#8217;t been fleshed out yet, but the plan is to do it eventually &#8211; we&#8217;re working on exposing more from the API itself, too.&#8221;</p>\n<p>If you want to tinker with the API but don&#8217;t have a local testing site handy, check out the live demo at <a href="http://demo.wp-api.org" target="_blank">demo.wp-api.org</a> where you can click around to explore. This will save you the trouble of installing the plugin, if you just want to try it out. Also, you can&#8217;t perform any destructive changes there. Version 2 of the WP REST API plugin should be available on WordPress.org within 24-48 hours.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 16 Jul 2015 00:31:45 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:6;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:106:"WPTavern: WordPress Theme Review Team Unanimously Approves Roadmap to Improve Directory and Review Process";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46551";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:116:"http://wptavern.com/wordpress-theme-review-team-unanimously-approves-roadmap-to-improve-directory-and-review-process";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:2613:"<p>The <a href="https://make.wordpress.org/themes/">Theme Review Team</a> has spent the last two months <a href="http://wptavern.com/wordpress-theme-review-team-seeks-feedback-on-the-review-process-themes-and-the-directory">collecting data from surveys</a> to discover common pain points people experience using the theme directory and going through the theme review process. The results of those surveys were used to <a href="https://make.wordpress.org/themes/2015/07/07/roadmap-for-phase-one/">create a roadmap</a> of areas to focus on.</p>\n<p>In yesterday&#8217;s meeting, the Theme Review Team voted and those in attendance <a href="https://wordpress.slack.com/archives/themereview/p1436896772000053">unanimously approved</a> the roadmap.</p>\n<a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/ThemeReviewTeamRoadmapVote.png"><img class="size-full wp-image-46668" src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/ThemeReviewTeamRoadmapVote.png?resize=471%2C560" alt="Phase One Roadmap Approved" /></a>Phase One Roadmap Approved\n<p>One of the key parts to the roadmap is creating groups with a scope of responsibilities. The groups include:</p>\n<ul>\n<li>Directory</li>\n<li>Documentation</li>\n<li>Tools</li>\n<li>Reviews and queues</li>\n<li>UX and research</li>\n</ul>\n<p>Each group needs a point person who acts as the communication bridge between the group and Theme Review Team. Tammie Lister explains what the point person&#8217;s role is within a group.</p>\n<blockquote><p>This person will report weekly what is going on during the chats. They will also post on the make.blog each week about what is going on in each group. This should ensure we keep up communication and make sure things get done.</p></blockquote>\n<p>They&#8217;re not necessarily in charge of getting things done but rather, act as a facilitator to make sure the group stays on track.</p>\n<p>One part of the roadmap that I&#8217;m interested in is the possibility of a report button added to the theme directory to allow users to report themes. If this happens, it will be interesting to see how it&#8217;s used or abused and whether it adds any additional work load to the theme reviewers.</p>\n<p>The roadmap looks solid and shows the team is focused on improving several aspects of the Theme Directory. This is a great opportunity for new contributors to get involved with the project. If you&#8217;re interested in joining any of the groups within the Theme Review Team, please visit the <strong>#themereview</strong> channel on <a href="https://make.wordpress.org/chat/">Slack</a> and let the team know.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Wed, 15 Jul 2015 21:10:12 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Jeff Chandler";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:7;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:72:"WPTavern: Proper Lite: A Free and Flexible WordPress Theme for Creatives";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46585";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:81:"http://wptavern.com/proper-lite-a-free-and-flexible-wordpress-theme-for-creatives";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:3530:"<p>Last November, ModernThemes <a href="http://wptavern.com/modernthemes-launches-site-dedicated-to-providing-free-wordpress-themes" target="_blank">officially launched its free WordPress themes site</a> and has been gradually adding to its <a href="https://wordpress.org/themes/author/modernthemesnet/" target="_blank">collection</a> hosted on WordPress.org. Founders Robbie Grabowski and Mike Driscoll launched the site with a commitment to produce themes that support the native customizer and keep plugin functionality separate while still being &#8220;plugin-friendly.&#8221;</p>\n<p><a href="https://modernthemes.net/wordpress-themes/proper-lite/" target="_blank">Proper Lite</a> is ModernThemes&#8217; latest release, created to be fully compatible with their new <a href="https://modernthemes.net/plugins/" target="_blank">library of free plugins</a> that add functionality like shortcodes, widgets, sidebars, services, testimonials, projects, etc.</p>\n<p>The theme features a fullscreen homepage hero section with multiple controls for customizing the background, text, and buttons.</p>\n<p><a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/properlite_mockups.png"><img src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/properlite_mockups.png?resize=1000%2C700" alt="properlite_mockups" class="aligncenter size-full wp-image-46645" /></a></p>\n<p>Proper Lite was designed with a modular homepage layout that supports three flexible widget areas where you can drop in portfolio items, blogs, testimonials, or any other content you choose. This is one of the reasons why ModernThemes calls it their most flexible free theme to date.</p>\n<p>In addition to the default template, Proper Lite includes Homepage, Full Width, and Left Sidebar templates. It also has specific styling for various content blocks added from the plugin library, as you can see in the <a href="https://modernthemes.net/demo/?theme=properlite" target="_blank">live demo</a>.</p>\n<p><a href="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/team-members.jpg"><img src="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/team-members.jpg?resize=926%2C897" alt="team-members" class="aligncenter size-full wp-image-46654" /></a></p>\n<p>Proper Lite has an amazing array of controls included in the customizer. Users can easily adjust Google Fonts, logos and icons, nearly every color used in the theme, social media icons, a footer call-to-action, the number of columns in the widget areas, and much more. The theme was not created with a set, inflexible design. Versatility is one of its key features.</p>\n<p><a href="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/proper-lite-customizer.png"><img src="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/proper-lite-customizer.png?resize=1025%2C426" alt="proper-lite-customizer" class="aligncenter size-full wp-image-46659" /></a></p>\n<p>Proper Lite, like other themes from ModernThemes, has extensive <a href="https://modernthemes.net/proper-lite-documentation/" target="_blank">documentation</a> available on the website for every section included in the theme. While this theme is heavily geared toward creatives with an emphasis on fullwidth images and portfolio content, it is also suitable for personal blogs, agencies, and creative businesses, thanks to the wide range of plugins available to extend it. <a href="https://modernthemes.net/wordpress-themes/proper-lite/" target="_blank">Download</a> it for free from the ModernThemes website.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Wed, 15 Jul 2015 18:42:20 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:8;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:15:"Matt: Sleep Dep";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:21:"http://ma.tt/?p=45247";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:31:"http://ma.tt/2015/07/sleep-dep/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:186:"<p><a href="http://www.theatlantic.com/health/archive/2013/12/how-sleep-deprivation-decays-the-mind-and-body/282395/">How Sleep Deprivation Decays the Mind and Body</a>. Crazy story.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Wed, 15 Jul 2015 04:46:01 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:4:"Matt";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:9;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:29:"Matt: Plato, Phaedrus, Google";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:21:"http://ma.tt/?p=45224";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:36:"http://ma.tt/2015/07/plato-phaedrus/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:822:"<blockquote><p>and now you, who are the father of letters, have been led by your affection to ascribe to them a power the opposite of that which they really possess. For this invention will produce forgetfulness in the minds of those who learn to use it, because they will not practice their memory. Their trust in writing, produced by external characters which are no part of themselves, will discourage the use of their own memory within them. You have invented an elixir not of memory, but of reminding; [&#8230;]</p></blockquote>\n<p><a href="http://www.perseus.tufts.edu/hopper/text?doc=Perseus%3Atext%3A1999.01.0174%3Atext%3DPhaedrus%3Asection%3D275a">A few thousand years ago Plato predicted how Google would make us less able to remember things</a>.</p>\n<p>Hat tip: <a href="http://chris.ink/">Chris Rudzki</a>.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Wed, 15 Jul 2015 04:24:00 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:4:"Matt";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:10;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:97:"WPTavern: BuddyBoss Expands Into LMS Market with Free BuddyPress Plugins for LearnDash and Sensei";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46573";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:107:"http://wptavern.com/buddyboss-expands-into-lms-market-with-free-buddypress-plugins-for-learndash-and-sensei";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:3139:"<p><a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/learndash.png"><img src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/learndash.png?resize=680%2C310" alt="learndash" class="aligncenter size-full wp-image-46576" /></a></p>\n<p>In May, <a href="http://www.buddyboss.com/" target="_blank">BuddyBoss</a> founder Michael Eisenwasser shared with Tavern readers the <a href="http://wptavern.com/inside-buddyboss-with-michael-eisenwasser" target="_blank">challenges of creating a profitable business</a> in what is still a relatively small marketplace for BuddyPress themes and plugins. Developers are building niche social networks every day, but BuddyPress&#8217; appeal as a platform hinges on the availability of compelling and reliable third-party add-ons.</p>\n<p>Over the past couple of months, BuddyBoss has branched out into serving the LMS market with free BuddyPress integration plugins for <a href="http://www.learndash.com/" target="_blank">LearnDash</a> and <a href="http://www.woothemes.com/products/sensei/" target="_blank">Sensei</a>, two of WordPress&#8217; most popular LMS solutions. Both <a href="https://wordpress.org/plugins/buddypress-learndash/" target="_blank">BuddyPress for LearnDash</a> and <a href="https://wordpress.org/plugins/sensei-buddypress/" target="_blank">BuddyPress for Sensei</a> were created to work with any theme, but are also guaranteed to work seamlessly with BuddyBoss&#8217; new Social Learner theme.</p>\n<p><a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/social-learner.png"><img src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/social-learner.png?resize=1000%2C573" alt="social-learner" class="aligncenter size-full wp-image-46620" /></a></p>\n<p>Both plugins have similar core feature sets that include the ability to create courses, lessons, quizzes, and tie it all in to BuddyPress activity, groups, and forums to create a social learning platform. Course managers can even introduce gamification into the learning process with open source <a href="http://badgeos.org/" target="_blank">BadgeOS</a> plugin integration.</p>\n<p>Social learning communities, like popular social goal or fitness tracking apps, bring a higher level of engagement by leveraging the people factor. An LMS powered by WordPress and BuddyPress provides students with the ability to connect to new friends, collaborate, send messages, earn badges &#8211; all activities that contribute to a higher level of motivation for learning and success.</p>\n<p>The idea is not new to BuddyPress, as the long-abandoned <a href="http://buddypress.coursewa.re/" target="_blank">BuddyPress Courseware</a> project brought a social aspect to e-learning nearly four years ago. However, it is difficult to maintain an LMS plugin that only works with BuddyPress, because it doesn&#8217;t have the benefit of contributions and testing from a larger community. BuddyBoss made a strategic move in building plugins that would bridge BuddyPress to extend existing LMS solutions that serve the larger WordPress market. Both newer alternatives are available for free on WordPress.org.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Tue, 14 Jul 2015 22:53:52 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:11;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:75:"WPTavern: Theme Translations and Language Packs are Coming to WordPress.org";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46589";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:85:"http://wptavern.com/theme-translations-and-language-packs-are-coming-to-wordpress-org";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:3610:"<a href="http://i2.wp.com/wptavern.com/wp-content/uploads/2014/08/globe.jpg"><img src="http://i2.wp.com/wptavern.com/wp-content/uploads/2014/08/globe.jpg?resize=1024%2C499" alt="photo credit: . Entrer dans le rêve - cc" class="size-full wp-image-29134" /></a>photo credit: <a href="https://www.flickr.com/photos/tranbina/4765484383/">. Entrer dans le rêve</a> &#8211; <a href="http://creativecommons.org/licenses/by-nc-sa/2.0/">cc</a>\n<p>WordPress.org will soon support translations and language packs for themes hosted in the official directory. In <a href="http://wptavern.com/highlights-of-matt-mullenwegs-qa-session-at-wordcamp-europe-2015" target="_blank">Matt Mullenweg&#8217;s Q&amp;A at WordCamp Europe 2015</a>, he emphasized the importance of having better language support for themes and plugins and identified this as a high priority for continued improvements to WordPress.org.</p>\n<p>Today the WordPress meta team <a href="https://make.wordpress.org/themes/2015/07/14/theme-translations-on-wordpress-org/" target="_blank">announced</a> that theme translations will soon be available on WordPress.org at <a href="http://translate.wordpress.org" target="_blank">translate.wordpress.org</a>. Within the next few days or weeks, all active themes (those updated within the last two years) will have their strings imported.</p>\n<p>&#8220;This will involve importing ~1500 themes, which, combined, have about 315,000 total strings,&#8221; Sam Sidler said in the announcement. &#8220;After duplicates, the number drops to only 80,000 unique strings.&#8221;</p>\n<h3>Language Packs Will Reduce Download Sizes for Themes</h3>\n<p>Sidler outlined several advantages for theme authors who opt to manage translations on WordPress.org, including the community&#8217;s large network of contributing translators who currently maintain 140 locales on <a href="http://translate.wordpress.org" target="_blank">translate.wordpress.org</a>.</p>\n<p>The most exciting change is that themes hosted on WordPress.org will soon be able to take advantage of language packs. Theme authors will have the option to remove translations from their zip file in favor of allowing WordPress.org to deliver the language packs, resulting in smaller download sizes.</p>\n<p>&#8220;Eventually, we also plan to give priority to localized themes in localized directories; e.g., someone searching the Romanian theme directory will see Romanian themes prioritized over English-only themes,&#8221; Sidler said.</p>\n<p>The more languages a theme can be translated into, the greater its prominence in WordPress&#8217; language-specific theme directories. This should provide WordPress.org theme authors with a strong motivation to <a href="https://make.wordpress.org/polyglots/handbook/rosetta/theme-plugin-directories/" target="_blank">work with the polyglots team</a> to get more translations. Theme authors can also request new translation editors to be added to polyglots, if they want to continue working with their own translators.</p>\n<p>Those who prefer to ship their own translations can continue to do so. Keeping the translation files in your zip package will essentially opt you out of language packs for those specific translations. If you need help adding support for translations and language packs, Sidler recommends Otto&#8217;s <a href="http://ottopress.com/2013/language-packs-101-prepwork/" target="_blank">Language Packs 101</a> tutorial in addition to the <a href="https://developer.wordpress.org/themes/functionality/internationalization/" target="_blank">Theme Developer Handbook section on Internationalization</a>.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Tue, 14 Jul 2015 20:22:12 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:12;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:87:"WPTavern: The First 24hr Conference Devoted to the Genesis Framework Set for July 18-20";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46565";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:97:"http://wptavern.com/the-first-24hr-conference-devoted-to-the-genesis-framework-set-for-july-19-20";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:1461:"<p><a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/GenesisCampFeaturedImage.png"><img class="aligncenter size-full wp-image-46579" src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/GenesisCampFeaturedImage.png?resize=880%2C275" alt="Genesis Camp Featured Image" /></a><a href="http://genesis.camp/">Genesis Camp</a> is the first 24 hour conference dedicated to the Genesis framework by <a href="http://www.studiopress.com/">Studiopress</a>. The event takes place on July 18-20 and is free to attend. Even though the event is dedicated to the Genesis framework, it&#8217;s not associated with Copyblogger Media or Studiopress.</p>\n<p>Organized by a community of Genesis users, the event features <a href="http://genesis.camp/sessions/">sessions</a> on development workflow, branding, collaboration, and more. Each session will include an area for viewers to chat and ask questions. Speakers include Chris Lema, Carrie Dils, Wes Linda, David Wang, Heather Porter, and more.</p>\n<p>Sessions will be recorded in case you can&#8217;t stay awake to watch all 24 hours of the event. Videos will be handled by <a href="http://www.google.com/+/learnmore/hangouts/">Google Hangouts</a> while <a href="https://www.crowdcast.io/">Crowd Cast</a> will be used to allow viewers to chat during sessions. To watch the event you&#8217;ll need to register on the <a href="https://www.crowdcast.io/e/genesiscamp1">Genesis Camp Crowd Cast site</a>.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Tue, 14 Jul 2015 17:43:43 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Jeff Chandler";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:13;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:77:"WPTavern: Candid Conversation with Tom McFarlin About the WordPress Community";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46549";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:87:"http://wptavern.com/candid-conversation-with-tom-mcfarlin-about-the-wordpress-community";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:1158:"<p>Earlier this month, Tom McFarlin <a href="https://tommcfarlin.com/the-wordpress-community-a-comedy-of-drama-ego-oligarchies-and-more/">published a great post</a> where he shares his perspective on the WordPress community. His post struck a nerve and instead of discussing it through comments, I invited him to a Google Hangout to have a candid conversation. Within the conversation, McFarlin and I discuss a number of topics, including:</p>\n<ul>\n<li>Community behaviour and discourse</li>\n<li>It&#8217;s not a WordPress problem</li>\n<li>Comment moderation strategies</li>\n<li>Subtweeting</li>\n<li>How, as men, do we show that a significant portion of us are color/ethnicity/whatever blind?</li>\n<li>Women in tech</li>\n</ul>\n<p>McFarlin is the father of two daughters which adds an interesting dynamic to the women in tech issue. I enjoyed the time I spent with him discussing topics we both feel are important. If you have any feedback concerning the content in this recording, please leave a comment.</p>\n<p>There&#8217;s also a transcript of the interview <a href="http://www.wptavern.com/wpweeklyaudio/TomMcFarlinTranscript.zip">available here</a>.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Tue, 14 Jul 2015 16:16:21 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Jeff Chandler";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:14;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:23:"Matt: Hacking Team Hack";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:21:"http://ma.tt/?p=45238";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:39:"http://ma.tt/2015/07/hacking-team-hack/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:966:"<p>I haven&#8217;t been following the Hacking Team story too closely. If you&#8217;re the same, here&#8217;s a quick catch-up: an Italian company that sold hacking tools, often to questionable governments, had all of their internal company data including emails, source code, everything released. <a href="http://www.engadget.com/2015/07/09/how-spyware-peddler-hacking-team-was-publicly-dismantled/">Engadget has the best summary I&#8217;ve seen so far of how they got hacked</a>, which was apparently done by a hacker vigilante who did something similar to another organization called the Gamma Group. <a href="https://firstlook.org/theintercept/2015/07/08/hacking-team-emails-exposed-death-squad-uk-spying/">The Intercept also has a good look at some of the more egregious behavior</a>. Bruce Schneier <a href="https://www.schneier.com/blog/archives/2015/07/organizational_.html">calls this new trend Organizational Doxxing and considers its ramifications</a>.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Tue, 14 Jul 2015 03:43:00 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:4:"Matt";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:15;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:82:"WPTavern: Topher DeRosia Launches GoFundMe Campaign to Attend WordCamp Pune, India";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46545";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:91:"http://wptavern.com/topher-derosia-launches-gofundme-campaign-to-attend-wordcamp-pune-india";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:2000:"<p>Topher DeRosia, founder of <a href="http://t.co/Q9hSlXsBKQ">HeroPress</a>, is <a href="http://www.gofundme.com/heropress-in-pune">asking for</a> $2,150 to attend <a href="https://pune.wordcamp.org/2015/">WordCamp Pune</a>, India. DeRosia was asked to speak about HeroPress by Saurabh Shukla, who is a<a href="http://heropress.com/essays/ill-keep-looking-for-a-cms-unless-i-find-wordpress/" target="_blank"> HeroPress contributor</a> and also the lead organizer of WordCamp Pune, India.</p>\n<p>In an effort to be transparent, DeRosia published how he will spend the money.</p>\n<ul>\n<li>$1400 for the plane ticket</li>\n<li>$300 for hotel</li>\n<li>$200 for food, cabs, Uber, etc</li>\n<li>$100 for emergencies</li>\n<li>$150 for GoFundMe&#8217;s fees</li>\n</ul>\n<p>If DeRosia has money left over from his trip, he plans to sponsor a WordCamp that&#8217;s having difficulty finding sponsors or donate it to the WordPress Foundation.</p>\n<p>Since launching the campaign a few days ago, he&#8217;s raised $1,000. Unlike most other campaigns, <a href="https://www.gofundme.com/heropress-in-pune/donate">donors can choose</a> the amount they want to give. Among the donors listed is Matt Mullenweg, who contributed $250. If you enjoy the time, work, and effort put into HeroPress, consider donating a few dollars.</p>\n<p><strong>Within 24 hours since this post was published, DeRosia surpassed his funding goal.</strong></p>\n<a href="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/WordCampPuneGoalMet.png"><img class="size-full wp-image-46569" src="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/WordCampPuneGoalMet.png?resize=976%2C649" alt="WordCamp Pune Goal Met" /></a>WordCamp Pune Goal Met\n<p>I asked DeRosia how it feels to meet is funding goal, &#8220;I&#8217;m super excited about this. Not just the fact that <em>other people</em> paid for a trip but that the HeroPress community feels this kind of thing is valuable enough to put money out for it. That means a lot.&#8221;</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 13 Jul 2015 23:11:42 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Jeff Chandler";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:16;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:58:"WPTavern: Embed Your Meerkat Stream on Your WordPress Site";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46325";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:68:"http://wptavern.com/embed-your-meerkat-stream-on-your-wordpress-site";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:4187:"<p><a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/meerkat.png"><img src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/meerkat.png?resize=655%2C300" alt="meerkat" class="aligncenter size-full wp-image-46518" /></a></p>\n<p>Just one day after <a href="https://meerkatapp.co/" target="_blank">Meerkat</a>, the popular video streaming service, <a href="http://techcrunch.com/2015/06/26/meerkat-outs-an-embeddable-player-hooks-discovery-channels-shark-week/#.qqszef:XITC" target="_blank">launched its embedded player</a>, a WordPress plugin was in the works to make it easy for publishers to take advantage of it. <a href="http://www.artiss.co.uk" target="_blank">David Artiss</a>, an English developer and author of several popular embedding <a href="https://profiles.wordpress.org/dartiss/#content-plugins" target="_blank">plugins</a>, is the first to bring Meerkat embedding to WordPress.</p>\n<p>The <a href="https://wordpress.org/plugins/meerkat/" target="_blank">Meerkat plugin</a> lets users embed their streams in WordPress content using a simple shortcode. The embedded player automatically does the following, according to Meerkat&#8217;s documentation:</p>\n<blockquote><p>It will show your live stream if you’re live. If you’re not live, if will show your next upcoming stream. If you have no upcoming streams, it will display stats from your last stream. If you have not streamed yet, it will show your profile.</p></blockquote>\n<p>All you need is the Meerkat username to use the shortcode in its simplest form:</p>\n<p><code>[meerkat username="meerkatapi"]</code></p>\n<p>It also includes optional parameters for customizing the username, player type, participation, cover image, muted defaults, and debug settings. These parameters essentially let you customize everything available in the <a href="http://widgets.meerkatapp.co/embed" target="_blank">Meerkat embed code generator</a>.</p>\n<p><a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/meerkat-customize-embedded-player.jpg"><img src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/meerkat-customize-embedded-player.jpg?resize=746%2C515" alt="meerkat-customize-embedded-player" class="aligncenter size-full wp-image-46532" /></a></p>\n<p>The shortcode can be embedded in posts or pages. Artiss plans to add a widget option soon, as the default player size seems to lend itself to display in a sidebar. I tested the plugin with WordPress 4.3 beta 2 and found that it works as advertised.</p>\n<p><a href="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/meerkat-wordpress-plugin-example.jpg"><img src="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/meerkat-wordpress-plugin-example.jpg?resize=778%2C635" alt="meerkat-wordpress-plugin-example" class="aligncenter size-full wp-image-46533" /></a></p>\n<p>At TechCrunch Disrupt in May 2015, Meerkat founder Ben Rubin reported that the service was <a href="http://www.businessinsider.com/meerkat-has-nearly-2-million-users-2015-5" target="_blank">approaching nearly two million users</a>. Chances are that plenty of those users also have WordPress sites where they can gain more exposure for their streams.</p>\n<p>Artiss wanted to make it easy for anyone to embed a stream. He isn&#8217;t a Meerkat user himself but found that its API was easy to work with for embedding content.</p>\n<p>&#8220;I didn&#8217;t write it for myself but I thought putting the newly released embed function in a simple-to-use plugin for WordPress users would be useful,&#8221; he said. &#8220;I just happened to be working on <a href="https://wordpress.org/plugins/zingtree-embed/" target="_blank">Zingtree Embed plugin</a> at the same time, so it was quite simple to clone that and modify it for a different embed type.&#8221;</p>\n<p>If you want your fans and followers to be able to find your Meerkat stream on the web, download the <a href="https://wordpress.org/plugins/meerkat/" target="_blank">Meerkat</a> embed plugin from the WordPress plugin directory. This will allow folks to join you live from your website, without having to use the app on their phones. The widget embed option should land in the next release.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 13 Jul 2015 19:47:17 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:17;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:95:"WPTavern: Envato Targeted by DDoS Attack, WordPress Theme Authors Report Major Decline in Sales";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46485";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:104:"http://wptavern.com/envato-targeted-by-ddos-attack-wordpress-theme-authors-report-major-decline-in-sales";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:6430:"<p><a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2014/09/envato.jpg"><img src="http://i0.wp.com/wptavern.com/wp-content/uploads/2014/09/envato.jpg?resize=697%2C314" alt="envato" class="aligncenter size-full wp-image-29973" /></a></p>\n<p>If you&#8217;ve attempted to access Themeforest or any other site on the <a href="http://www.envato.com/" target="_blank">Envato</a> network lately, you may have encountered some down time. The company <a href="http://inside.envato.com/denial-of-service-attacks-on-envato/" target="_blank">updated</a> customers and community members today, attributing the technical difficulties to a DDoS attack:</p>\n<blockquote><p>Since July 1, Envato has been the target of a sustained DDoS (distributed denial of service) attack. The attacker, whose motive and identity are unknown, has repeatedly flooded our servers with high levels of traffic, causing our services to be unavailable at various times.</p></blockquote>\n<p>The most recent outage happened over the weekend when Envato Market was down for three hours on Friday and one hour on Sunday. This is a significant chunk of time for a market that <a href="http://www.envato.com/2014" target="_blank">paid out $224 million dollars to its members in 2014</a>.</p>\n<p>The downtime has also impacted WordPress theme authors, who continue to dominate the Envato&#8217;s marketplace. According to Ben Chan, the company&#8217;s director of growth and revenue, 30 of the 31 sellers who make up the <a href="http://elite.envato.com/wall-of-fame/" target="_blank">Power Elite wall of fame</a> (selling $1 million+ worth of items) are WordPress product authors.</p>\n<p>The power of the WordPress economy on Envato is undeniable, but sales have taken a sharp decline in the past couple of months, even before the DDoS attack. According to PremiumWP, which cites reports from elite theme author Chris Robinson of Contempo and many others, <a href="http://www.premiumwp.com/themeforest-authors-report-50-70-drop-in-theme-sales/" target="_blank">sales have suddenly declined 50-70%</a>.</p>\n<p>&#8220;Sales have declined over 70% starting from May with each passing day getting worse,&#8221; Robinson said in the <a href="http://themeforest.net/forums/thread/envato-are-youre-not-telling-us-something/185158" target="_blank">members&#8217; forum</a>. &#8220;I’ve also spoken with other elite authors explaining the same thing. One example going from $1500/day to $700 &#8211; sure that’s still a great deal of money BUT what the hell is happening?</p>\n<p>&#8220;This isn’t just one or maybe twenty authors, it is marketplace wide affecting everyone. A marketplace wide decline in sales of this magnitude doesn’t just happen due to vacations, or other buyer factors. Going through the years of sales data (since 2008) this has never happened, I’ve personally gone from $2-3000/week to less than $700/week…that’s insane!&#8221;</p>\n<p>With new authors and products entering the market every day, the market share for established authors is slowly diminishing, but members are not convinced that this is the sole cause of the sharp drop in sales.</p>\n<p>FinalDestiny of TeoThemes, another author whose sales are declining, blames the <a href="http://wptavern.com/envato-continues-to-rake-in-the-cash-from-wordpress-themes-packaged-as-complete-website-solutions" target="_blank">one-size-fits-all theme products</a> for gobbling up a greater slice of the market share.</p>\n<p>&#8220;Everybody is tired of these huge, monster multipurpose themes having the same price as normal themes, and that’s pretty much killing the marketplaces. But Envato couldn’t care less, as long as they get their share,&#8221; he <a href="http://themeforest.net/forums/thread/envato-are-youre-not-telling-us-something/185158?page=1&message_id=1303716#1303716" target="_blank">said</a>.</p>\n<p>In another <a href="http://themeforest.net/forums/thread/whats-wrong-with-sales-on-tf-/181436" target="_blank">thread</a>, which ended up getting locked, there are 27 pages of comments from users speculating about why their sales have been dropping. Members cite seasonal buying fluctuations, piracy, Themeforest&#8217;s recent drop in Google search rankings, VAT and hidden price additions on checkout, and unfair pricing advantages for monster themes that claim to do everything, among other possible causes.</p>\n<p>In one thread, titled &#8220;<a href="http://themeforest.net/forums/thread/more-than-50-sales-drop-for-most-of-the-authors-does-tf-care-for-authors/182262" target="_blank">More than 50% sales drop for most of the authors. Does TF care for Authors?</a>&#8220;, an Envato community officer offered the following comment:</p>\n<blockquote><p>We don’t really give sales updates over the forums other than to say your sales can go up and down for a multitude of reasons. Try not to assume the sky is falling every time the USA has a long weekend :) We have fast and slow periods throughout the year same as any business, and your portfolio will no doubt have peaks and valleys as well.</p></blockquote>\n<p>This kind of generic reply has left theme authors scratching their heads, despite multiple threads in the forums popping up with concerns from those who are alarmed by the sudden drop. Many WordPress theme authors depend on Themeforest as their primary source of income. In one <a href="http://themeforest.net/forums/thread/more-than-50-sales-drop-for-most-of-the-authors-does-tf-care-for-authors/182262?page=3&message_id=1291143#1291143" target="_blank">reply</a>, the Aligator Studio seller sums up their concerns and frustration with the inability to convince Envato of the unusual circumstances that are affecting large numbers of sellers:</p>\n<blockquote><p>We are not talking about valleys and peaks, we’re talking about a general traffic and sales fall, from New Year until now, especially after April. We’re not talking about regular ups and downs (sometimes steeper, sometimes not), due to longer weekends, summer holidays, and general and the usual stuff happening here in the last couple of years.</p>\n<p>It’s not a sky falling – it’s inability to pay our bills, we’re not fanatics that foresee the end of the world.</p></blockquote>\n<p>Envato has yet to provide an official statement about the marketplace-wide decline in sales, apart from recognizing the network&#8217;s unavailability due to the recent DDoS attack.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 13 Jul 2015 16:42:22 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:18;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:50:"Matt: Neil Gaiman Speech at University of the Arts";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:21:"http://ma.tt/?p=45241";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:46:"http://ma.tt/2015/07/neil-gaiman-commencement/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:78:"<p>&#8220;Make good art.&#8221;</p>\n<p><span class="embed-youtube"></span></p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Sun, 12 Jul 2015 20:15:37 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:4:"Matt";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:19;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:23:"Matt: WordCamp Scranton";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:21:"http://ma.tt/?p=45234";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:39:"http://ma.tt/2015/07/wordcamp-scranton/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:800:"<p>As was just announced, I&#8217;m going to make a not-surprise appearance at WordCamp Scranton next Saturday. It&#8217;s their first year <a href="https://central.wordcamp.org/">doing a Wordcamp</a> and I was able to find some space in my schedule to swing by in between business meetings in New York and Philadelphia, so very much looking forward to meeting the Scranton community.</p>\n<blockquote class="twitter-tweet" width="550"><p lang="en" dir="ltr">Matt Mullenweg (<a href="https://twitter.com/photomatt">@photomatt</a>) will Host a Town Hall Q&amp;A at WordCamp Scranton! <a href="https://t.co/qmZSWYPQBS">https://t.co/qmZSWYPQBS</a></p>\n<p>&mdash; WordCamp Scranton (@WCScranton) <a href="https://twitter.com/WCScranton/status/619508207283625984">July 10, 2015</a></p></blockquote>\n<p></p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Sat, 11 Jul 2015 16:03:31 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:4:"Matt";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:20;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:74:"WPTavern: WPWeekly Episode 198 – Tackling Mental Health With Cory Miller";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:44:"http://wptavern.com?p=46473&preview_id=46473";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:80:"http://wptavern.com/wpweekly-episode-198-tackling-mental-health-with-cory-miller";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:2636:"<p>In this episode of WordPress Weekly, <a href="http://marcuscouch.com/">Marcus Couch</a> and I are joined by Cory Miller, <a href="https://ithemes.com/our-founder/">founder of iThemes</a>. Miller discusses his entrepreneurship journey and shares in detail, how he <a href="http://wordpress.tv/2015/07/02/cory-miller-entrepreneurship-and-my-mental-health/">maintains his mental health</a>.</p>\n<p>We learn that people battling mental health are not alone and that it&#8217;s ok to ask for help. Miller explains how seeing a counselor four times a year helps him maintain his mental health. We also discuss coping mechanisms that might work for those not interested in seeing a counselor.</p>\n<p>For more background on this episode, I highly encourage you to <a href="http://wordpress.tv/2015/07/02/cory-miller-entrepreneurship-and-my-mental-health/">watch his presentation</a> at WordCamp Denver 2015, on mental health. Also, check out <a href="http://www.slideshare.net/corymiller303/the-emotional-roller-coaster-of-entrepreneurship-how-i-cope-7-years-in">his slides on slideshare</a> that are filled with motivational messages.</p>\n<p>I apologize for the audio quality in this episode. Miller was in New Mexico on a spotty WiFi connection that seemed to get worse as the show went on.</p>\n<h2>Plugins Picked By Marcus:</h2>\n<p><a href="https://wordpress.org/plugins/save-import-image-from-url/">Save and Import Image from URL</a> replaces the built-in &#8216;Import from URL&#8217; media upload tab. It allows users to download an image from a remote URL and upload it to the WordPress media gallery.</p>\n<p class="shortdesc"><a href="https://wordpress.org/plugins/meerkat/">Meerkat</a> lets you embed your Meerkat stream on your site so your followers, friends, and fans can watch your stream anywhere.</p>\n<p><a href="https://wordpress.org/plugins/simple-job-board/">Simple Job Board</a> is an easy and lightweight plugin that adds a job board to your website.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, July 15th 9:30 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href="https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738" target="_blank">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href="http://www.wptavern.com/feed/podcast" target="_blank">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href="http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr" target="_blank">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #198:</strong><br />\n</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Fri, 10 Jul 2015 22:01:06 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Jeff Chandler";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:21;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:95:"WPTavern: SocialCrumbs: A Free WordPress Theme that Streams Social Activity Using IFTTT Recipes";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46448";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:104:"http://wptavern.com/socialcrumbs-a-free-wordpress-theme-that-streams-social-activity-using-ifttt-recipes";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:3949:"<p>With all of the content an average user generates across social media sites, it can be challenging to get a full view of all that activity. Let&#8217;s face it, your social media posts are scattered all over the web.</p>\n<p><a href="https://github.com/ademilter/socialcrumbs" target="_blank">SocialCrumbs</a> is a non-traditional, niche WordPress theme that aggregates all of your social media activity into one stream with the help of <a href="https://ifttt.com/" target="_blank">IFTTT</a> recipes. The theme was created by <a href="http://ademilter.com/" target="_blank">Adam Ilter</a>, a user interface designer and developer living in Istanbul. He designed a Pinterest-style display to output the social posts brought in by IFTTT. The masonry grid is responsive and colorful with posts featuring icons for each social network.</p>\n<p><a href="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/socialcrumbs-screenshot.jpg"><img src="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/socialcrumbs-screenshot.jpg?resize=1025%2C745" alt="socialcrumbs-screenshot" class="aligncenter size-full wp-image-46451" /></a></p>\n<p>You can view a live demo of SocialCrumbs at <a href="http://adem.social/" target="_blank">adem.social</a>.</p>\n<p>In order to use the theme, you need to sign up for IFTTT and set up recipes for all the social accounts you want to include in the stream. The theme&#8217;s readme.txt files includes a list of 19 <a href="https://github.com/ademilter/socialcrumbs#recipes" target="_blank">recipes</a> that Ilter has pre-configured, with a checklist of many more planned.</p>\n<p>Certain networks have multiple options. For example, you can choose to include Twitter tweets and/or favorites:</p>\n<ul>\n<li>twitter-tweet-write <a href="https://ifttt.com/recipes/189363" target="_blank">https://ifttt.com/recipes/189363</a></li>\n<li>twitter-tweet-favorite <a href="https://ifttt.com/recipes/189331" target="_blank">https://ifttt.com/recipes/189331</a></li>\n</ul>\n<p>It can take up to 15 minutes for the content to appear in your theme after posting to the social network, as most IFTTT recipes check for new trigger data at that interval.</p>\n<p>It&#8217;s important to note that this theme is hosted on GitHub, not officially supported, and is an example of a fun, experimental concept that relies on IFTTT. As such, it doesn&#8217;t includes a single post template but rather outputs as an index. SocialCrumbs is not yet capable of providing a comprehensive archive for social media posts, so it&#8217;s not a theme you would use if you intend to record all of your social activities for preservation.</p>\n<p>One might argue that this kind of functionality is better housed in a plugin. In that case you might want to take a look at the <a href="https://wordpress.org/plugins/social-streams/" target="_blank">Social Streams</a> or <a href="https://wordpress.org/plugins/wp-social-stream/" target="_blank">WP Social Stream</a> plugins on WordPress.org. WP Social Stream is based on <a href="https://github.com/christianv/jquery-lifestream" target="_blank">jQuery Lifestream</a>, as opposed to IFTTT. The methods of retrieving social posts vary from plugin to plugin, depending on how you want to fetch, display, and store that content.</p>\n<p>The most ideal use for the SocialCrumbs theme would be where you dedicate a subsite to its display, i.e. for showing social media posts surrounding an event or brand. If it was forked to include the ability to make the social media content searchable and sortable, SocialCrumbs would be even more useful beyond a simple visual display of activities.</p>\n<p>In its current state, the theme is a nice example of IFTTT and WordPress working together to create a configurable social stream that aggregates activity from multiple networks to a single page of your WordPress site. Check it out on <a href="https://github.com/ademilter/socialcrumbs" target="_blank">GitHub</a>.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Fri, 10 Jul 2015 18:31:54 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:22;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:22:"Matt: Paired Opposites";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:21:"http://ma.tt/?p=45232";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:38:"http://ma.tt/2015/07/paired-opposites/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:517:"<blockquote><p>I used to think that paired opposites were a given, that love was the opposite of hate, right the opposite of wrong. But now I think we sometimes buy into these concepts because it is so much easier to embrace absolutes than to suffer reality. I don&#8217;t think anything is the opposite of love. Reality is unforgivingly complex.</p>\n<p>&#8212; Anne Lamott</p></blockquote>\n<p>From her great book <a href="http://www.amazon.com/Bird-Some-Instructions-Writing-Life/dp/0385480016">Bird by Bird</a>.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Fri, 10 Jul 2015 14:58:39 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:4:"Matt";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:23;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:68:"WPTavern: Chris Pearson Loses Cybersquatting Case Against Automattic";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46365";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:77:"http://wptavern.com/automattic-wins-cybersquatting-case-against-chris-pearson";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:6258:"<p>First <a href="http://domainnamewire.com/2015/07/08/wordpress-wins-another-round-against-chris-pearson/">reported by Domain Name Wire</a>, Automattic has <a href="http://www.adrforum.com/domaindecisions/1613723.htm">won their <span class="_Tgc"> Uniform Domain-Name Dispute-Resolution Policy</span> (UDRP) case</a> against <a href="http://www.pearsonified.com/">Chris Pearson</a>. UDRP requests are<span class="_Tgc"> a process established by the Internet Corporation for Assigned Names and Numbers (ICANN) for the resolution of disputes regarding the registration of internet domain names. </span></p>\n<h2>Automattic Wins Thesis.com</h2>\n<p>According to <a href="http://www.adrforum.com/domaindecisions/1613723.htm">findings by the UDRP panel</a>, in late 2014, a third-party who owned <a href="http://themeshaper.com/">Thesis.com</a> approached Automattic and Pearson to see if they were interested in buying the domain. Automattic won the domain by bidding $100K.</p>\n<p>Soon after winning the domain, Pearson filed a UDRP request with ICANN seeking relief requesting that the domain name be transferred from Automattic to himself. In June 2015, a three-member panel was appointed to review the case.</p>\n<p>According to <a href="https://www.icann.org/resources/pages/rules-be-2012-02-25-en">rule number five</a> set forth by ICANN for the UDRP process, Respondents have 20 days to respond to the Provider. If a Respondent does not submit a response, in the absence of exceptional circumstances, the Panel decides the dispute based upon the complaint.</p>\n<p>In a controversial move, the Panel accepted and reviewed Automattic&#8217;s late response.</p>\n<blockquote><p>The Panel notes that Respondent failed to submit its response within the requisite time period, failing to comply with ICANN Rule #5.  In its discretion, the Panel considered Respondent’s arguments in the late filed Response in the interest of justice.</p></blockquote>\n<p>Pearson satisfied two of the three burdens imposed under the Policy in order for the Panel to order transfer of a domain name from the entity registering it. Pearson failed to provide evidence that showed Thesis.com redirects to Themeshaper.com. In its response to the Panel, Automattic admitted to using the domain in this way but it appears to have had no affect on the Panel&#8217;s decision.</p>\n<p>The Panel noted that if Complainant’s submissions are insufficient, it may request additional exhibits or information under Rule 12 but given the outcome, the Panel chose not to seek additional submissions.</p>\n<p>You can view the panel&#8217;s findings in <a href="http://www.adrforum.com/domaindecisions/1613723.htm">this public document.</a> The panel concluded that the Complainant (Pearson) failed to establish all three elements required under the ICANN Policy and that relief shall be denied.</p>\n<blockquote><p>A party must satisfy all three of the burdens imposed under the Policy in order for the Panel to order transfer of a domain name from the entity registering it. Here, Complainant failed to establish that Respondent registered and used the disputed domain name in bad faith.</p>\n<p><em>See Starwood Hotels &amp; Resorts Worldwide, Inc. v. Samjo CellTech.Ltd</em>, FA 406512 (Nat. Arb. Forum Mar. 9, 2005) (finding that the complainant failed to establish that respondent registered and used the disputed domain name in bad faith because mere assertions of bad faith are insufficient for a complainant to establish Policy ¶ 4(a)(iii)). Therefore, the Panel finds that Complainant failed to support its allegations under Policy ¶ 4(a)(iii) and finds for Respondent.</p></blockquote>\n<p>Therefore, Thesis.com is allowed to remain under Automattic&#8217;s ownership.</p>\n<h2>Automattic Strikes Back</h2>\n<p>On June 16th, Automattic struck back by <a href="http://ttabvue.uspto.gov/ttabvue/v?pno=92061714&pty=CAN&eno=1">filing a petition for cancellation</a> with the United States Patent and Trademark Office. In their petition, Automattic argues that the three trademarks owned by Pearson, DIYTHEMES, THESIS THEME, and THESIS, should be cancelled.</p>\n<a href="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/PetitionForCancellation.png"><img class="size-full wp-image-46431" src="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/PetitionForCancellation.png?resize=704%2C721" alt="Petition for Cancellation" /></a>Petition for Cancellation\n<p>When questioned about the Thesis.com domain and petition to cancel Perason&#8217;s trademarks, Automattic responded with the following statement:</p>\n<blockquote><p>Chris Pearson tried to seize a domain Automattic owns through the UDRP process. As part of defending ourselves we have dug into the trademarks that were being claimed by the aggressor, as that was the basis of his claim.</p>\n<p>We&#8217;re happy the panel ruled in our favor. We think Thesis.com is a cool, generic .com that could be used for a variety of things. Just because you have a small WordPress theme doesn&#8217;t mean you have a right to seize generic English word .com domains.</p></blockquote>\n<p>I&#8217;ve reached out to Pearson for comment but have yet to receive a response.</p>\n<h2>Automattic&#8217;s Interest in Thesis.com Remains Unexplained</h2>\n<p>There are a lot of unanswered questions that need to be answered. For instance, why did Automattic participate in the bidding process for Thesis.com when it has nothing to do with WordPress.com or associated services?</p>\n<p>The turbulent history between <a href="http://wordpress.tv/2010/07/15/mixergy-interview-pearson-mullenweg/">Matt Mullenweg and Pearson in 2010</a> nearly resulted in a lawsuit over GPLv2 compliance. The statement from Automattic fails to clarify why the company pursued Pearson again years later by bidding on a domain relevant to his business, apart from stating that it&#8217;s &#8220;a cool generic.com&#8221;. Going after Pearson&#8217;s trademarks in order to have them cancelled raises questions as to whether the move is motivated by retribution.</p>\n<p>We&#8217;ll keep a close eye on the <a href="http://ttabvue.uspto.gov/ttabvue/v?pno=92061714&pty=CAN&eno=1">trademark cancellation petition</a> and if there are any updates, we&#8217;ll let you know.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Fri, 10 Jul 2015 04:40:10 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Jeff Chandler";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:24;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:96:"WPTavern: PhpStorm 9 Introduces Partial PHP 7 Support, Inline Debugging, and Remote File Editing";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46327";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:104:"http://wptavern.com/phpstorm-9-introduces-partial-php-7-support-inline-debugging-and-remote-file-editing";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:3006:"<a href="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/introduce_parameter.png"><img src="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/introduce_parameter.png?resize=1025%2C513" alt="New in PhpStorm 9: Introduce parameter refactoring" class="size-full wp-image-46421" /></a>New in PhpStorm 9: <em>Introduce parameter</em> refactoring\n<p><a href="http://www.jetbrains.com/phpstorm/whatsnew/" target="_blank">PhpStorm 9</a> was released this week with a slew of improvements and new features for PHP and web developers. The popular IDE is used by more than 300,000 developers and its development team usually puts out one major release per year. <a href="http://wptavern.com/phpstorm-8-released-with-full-wordpress-support" target="_blank">Version 8</a> was released last September with official support for WordPress.</p>\n<p>Highlights of version 9 include:</p>\n<ul>\n<li>PHP Language &#038; Editing Experience: Includes <a href="http://blog.jetbrains.com/phpstorm/2015/05/postfix-code-completion-for-php-in-phpstorm-9-eap/" target="_blank">postfix code completion for PHP</a>, partial PHP 7 support, advanced code understanding, and other enhancements</li>\n<li>New Debugging Experience: <a href="http://blog.jetbrains.com/phpstorm/2015/03/inline-debugging-for-php-in-phpstorm-9-eap/" target="_blank">Inline debugger</a> for PHP and <a href="http://blog.jetbrains.com/phpstorm/2015/07/debugging-improvements-in-phpstorm-9/" target="_blank">debugging workflow enhancements</a></li>\n<li>Remote Development: <a href="http://blog.jetbrains.com/phpstorm/2015/04/remote-edit-in-phpstorm-9-eap/" target="_blank">Remote edit</a>, PHP Code Sniffer and Mess Detector via remote PHP interpreters</li>\n<li>Many improvements related to frameworks and tools</li>\n<li>A range of new and updated third-party plugins available in the <a href="https://plugins.jetbrains.com/phpStorm" target="_blank">PhpStorm plugin repository</a></li>\n</ul>\n<p>The new <a href="http://blog.jetbrains.com/phpstorm/2015/03/inline-debugging-for-php-in-phpstorm-9-eap/" target="_blank">inline debugging</a> feature is already a hit with WordPress developers. It lets you view variable values in the source code, next to their usages, without having to switch over to the Variables pane or Debug tool window.</p>\n<blockquote class="twitter-tweet" width="550"><p lang="en" dir="ltr">Pretty much in love with <a href="https://twitter.com/phpstorm">@phpstorm</a> 9''s inline debugging h/t <a href="https://twitter.com/jeremyfelt">@jeremyfelt</a></p>\n<p>&mdash; Zack Tollman (@tollmanz) <a href="https://twitter.com/tollmanz/status/618905116326805504">July 8, 2015</a></p></blockquote>\n<p></p>\n<p>Auto-recognition of <a href="https://youtrack.jetbrains.com/issue/WI-21339" target="_blank">common WordPress global variables</a> (global variable => classname) is also included in the latest release.</p>\n<p>Check out the version 9 tour video to see some of the new features in action:</p>\n<p><span class="embed-youtube"></span></p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 09 Jul 2015 22:33:08 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:25;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:58:"WPTavern: Edit WordPress Email Templates in the Customizer";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46394";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:68:"http://wptavern.com/edit-wordpress-email-templates-in-the-customizer";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:3806:"<p><a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/mailboxes.jpg"><img src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/02/mailboxes.jpg?resize=1024%2C496" alt="mailboxes" class="aligncenter size-full wp-image-39214" /></a></p>\n<p>Argentinian WordPress developer <a href="https://wp.timersys.com/" target="_blank">Damian Logghe</a> had never touched the <a href="https://codex.wordpress.org/Theme_Customization_API" target="_blank">Customizer API</a>, but with all the controversy swirling around it, he decided to jump in to see what all the fuss was about.</p>\n<p>&#8220;The customizer has been making a lot of noise lately, as we all know, bringing politics to WordPress, and by politics I mean people arguing but getting nowhere,&#8221; he said.</p>\n<p>&#8220;As a plugin developer I never coded with the customizer and I only used it as a front end user. But at the latest <a href="https://buenosaires.wordcamp.org/2015/" target="_blank">WordCamp Buenos Aires</a>, <a href="https://twitter.com/eliorivero" target="_blank">Elio Rivero</a> spoke about using the customizer in plugins, and I decided to give it a try instead of entering into debate. And you know what? I loved it!&#8221;</p>\n<p>Logghe was contracted to build a new WordPress site and was looking for an easy way to beautify WordPress&#8217; default emails. He thought that the customizer would be the best choice for the job. After a week of development, he created <a href="https://wordpress.org/plugins/email-templates/" target="_blank">Email Templates</a>, the first plugin to enhance WordPress email templates using the customizer.</p>\n<p>Email Templates can be accessed under the Appearance menu. The plugin creates customizer panels for editing the template, email header, footer, and settings. It even includes the ability to send a test email.</p>\n<p><a href="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/email-templates-panels.jpg"><img src="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/email-templates-panels.jpg?resize=1014%2C638" alt="email-templates-panels" class="aligncenter size-full wp-image-46399" /></a></p>\n<p>Adding a logo to the top of your email template is as easy as uploading an image. You can also customize the alignment, background color, and header text. The plugin includes panels for changing the &#8220;from name&#8221; and &#8220;from email&#8221;, footer text, and basic template styles.</p>\n<p><a href="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/email-templates-logo.jpg"><img src="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/email-templates-logo.jpg?resize=1025%2C643" alt="email-templates-logo" class="aligncenter size-full wp-image-46401" /></a></p>\n<p>After you finish your customizations, you can fire off a test email to see how the new template looks in your inbox. I tested the plugin and found that it works as advertised. Ordinarily, customizing WordPress&#8217; default email template is not something your average user would attempt to do. The <a href="https://wordpress.org/plugins/email-templates/" target="_blank">Email Templates</a> plugin makes this accessible to anyone.</p>\n<p>Building with the Customizer API has solidified Logghe&#8217;s belief in its potential for the future of WordPress. His example of live previewing email templates is a creative use of the API in the context of a plugin.</p>\n<p>&#8220;In my opinion, the customizer is the right choice for every design change,&#8221; he said. &#8220;The API is extremely easy to use and previewing changes on the fly makes it awesome for every end user.</p>\n<p>&#8220;It is just matter of time until the waters get calm and everyone migrates to it. In a year or so, editing your theme without the customizer is going to feel strange.&#8221;</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 09 Jul 2015 20:00:09 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:26;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:18:"Matt: 39 WordCamps";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:21:"http://ma.tt/?p=45228";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:34:"http://ma.tt/2015/07/39-wordcamps/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:220:"<p>There have been 39 WordCamps already so far this year, <a href="https://wordpress.org/news/2015/07/wordcamps-update/">here are a bunch more interesting stats about WordCamps including a list of upcoming ones.</a>.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 09 Jul 2015 15:50:00 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:4:"Matt";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:27;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:25:"Joseph: WordCamp SLC 2015";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:32:"https://josephscott.org/?p=13154";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:59:"https://josephscott.org/archives/2015/07/wordcamp-slc-2015/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:1045:"<p><a href="https://slc.wordcamp.org/2015/">WordCamp Salt Lake City 2015</a> is coming September 12 at Washington Square ( 451 South State Street ).  <a href="https://slc.wordcamp.org/2015/tickets/">Tickets</a> are already on sale, only <a href="https://slc.wordcamp.org/2015/tickets/">$18 each</a>.  The <a href="https://slc.wordcamp.org/2015/attendees/">attendees page</a> has a list of some of the people who have already signed up.</p>\n<p><a href="https://slc.wordcamp.org/2015/speakers/">Speakers</a> are being <a href="https://slc.wordcamp.org/2015/news/">announced on the news page</a>.  If you area interested in presenting fill out the <a href="https://slc.wordcamp.org/2015/07/01/call-for-speakers/">call for speakers form</a>.  We are also looking for <a href="https://slc.wordcamp.org/2015/07/01/call-for-volunteers/">volunteers</a> and <a href="https://slc.wordcamp.org/2015/07/01/call-for-sponsors/">sponsors</a>.</p>\n<div class="jetpack-video-wrapper"></div>\n<p>Come learn and hang out with the local Utah WordPress community.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 09 Jul 2015 14:48:58 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:12:"Joseph Scott";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:28;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:24:"Matt: Napoleon Champagne";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:21:"http://ma.tt/?p=45221";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:40:"http://ma.tt/2015/07/napoleon-champagne/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:130:"<blockquote><p>In victory you deserve champagne.</p>\n<p>In defeat you need it.</p>\n<p>&#8212; Napoleon Bonaparte</p></blockquote>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 09 Jul 2015 04:25:00 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:4:"Matt";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:29;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:74:"WPTavern: BuddySlack Plugin Sends BuddyPress Activities to a Slack Channel";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46203";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:84:"http://wptavern.com/buddyslack-plugin-sends-buddypress-activities-to-a-slack-channel";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:4041:"<p><a href="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/buddyslack.jpg"><img src="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/buddyslack.jpg?resize=656%2C300" alt="buddyslack" class="aligncenter size-full wp-image-46372" /></a></p>\n<p>Not long after the WordPress project adopted Slack as its primary form of communication, David Bisset started using it to help <a href="http://davidbisset.com/organizing-a-conference-with-slack/" target="_blank">organize WordCamp Miami 2015</a>. The application added real time communication for organizers, speakers, volunteers, sponsors, and the public. He found it to be a helpful addition to the WordCamp&#8217;s conference communication tools.</p>\n<p>As a new fan of the platform, Bisset decided to build an extension for those who want to use Slack with BuddyPress. <a href="https://wordpress.org/plugins/buddyslack/" target="_blank">BuddySlack</a> is his first plugin released on WordPress.org. The bare bones plugin will send a notice to Slack whenever an activity stream item is generated by any of the following core components:</p>\n<ul>\n<li>Members</li>\n<li>Profiles</li>\n<li>Activity</li>\n<li>Groups</li>\n</ul>\n<p>The plugin allows you send your selected stream of activity posts to a particular channel, private group, or as a direct message to a user on your Slack team. It also includes an optional Slack settings panel within BuddyPress user profiles, allowing them to opt out of having their activities sent to Slack.</p>\n<p>In order to use the BuddySlack plugin, you&#8217;ll need to set up an incoming webhook via Slack, which can then be entered into the plugin&#8217;s settings panel.</p>\n<p><a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/screenshot-1.png"><img src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/screenshot-1.png?resize=1025%2C736" alt="screenshot-1" class="aligncenter size-full wp-image-46379" /></a></p>\n<p>Bisset doesn&#8217;t plan on officially supporting the plugin but will add more features as time permits. He recognizes that it is currently somewhat limited, as it only supports sending activities for four default BuddyPress components. In the future, Bisset plans to expand it to support custom BP components as well as allow the user to customize the message sent to Slack.</p>\n<p>Ideally, the plugin would allow you to set certain trigger words so that you wouldn&#8217;t have to send the entire stream of activities from a selected component. Right now the best use for BuddySlack might be on a smaller social network that doesn&#8217;t have a constant stream of activities. For example, if the Groups component is used sparingly, sending group activity stream posts to a specific Slack channel could be useful. Being able to narrow it down to a specific group would be even better.</p>\n<p>The <a href="http://wptavern.com/wp-slack-plugin-sends-notifications-to-slack-based-on-events-triggered-in-wordpress" target="_blank">Slack plugin for WordPress</a> allows you to set up multiple integrations for sending notices to different channels. It also allows for sending test notifications and temporarily disabling notices. These might be a few handy features that could benefit <a href="https://wordpress.org/plugins/buddyslack/" target="_blank">BuddySlack</a>. Bisset is accepting pull requests if anyone wishes to <a href="https://github.com/dimensionmedia/buddyslack" target="_blank">contribute to the plugin on GitHub</a>.</p>\n<p>Slack integration via a plugin is also available for <a href="http://wptavern.com/bbpress-slack-integration-send-new-topics-and-replies-to-a-slack-channel" target="_blank">bbPress</a>, <a href="http://wordpress.org/plugins/slack-woocommerce" target="_blank">WooCommerce</a>, <a href="http://wordpress.org/plugins/slack-edd" target="_blank">Easy Digital Downloads</a>, <a href="http://wordpress.org/plugins/slack-contact-form-7" target="_blank">Contact Form 7</a>, and <a href="http://wordpress.org/plugins/slack-gravityforms" target="_blank">Gravity Forms</a>.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 09 Jul 2015 01:49:51 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:30;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:81:"WPTavern: Update Adobe Flash Immediately to Patch Critical Security Vulnerability";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46361";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:91:"http://wptavern.com/update-adobe-flash-immediately-to-patch-critical-security-vulnerability";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:2384:"<p>If you have Adobe Flash installed, you&#8217;ll want to make sure it&#8217;s updated to the <a href="https://get.adobe.com/flashplayer/">latest version</a> as it patches a <a href="https://helpx.adobe.com/security/products/flash-player/apsa15-03.html">critical security vulnerability</a>. According <a href="http://www.theregister.co.uk/2015/07/07/hacking_team_zero_days_flash_windows_kernel/">to The Register</a>, confidential source code was stolen from <a href="http://www.theverge.com/2015/7/6/8899861/hacking-team-hacked-security-leak">Hacking Team</a> and <a href="http://www.theregister.co.uk/2015/07/06/unified_cdm_static_password/">leaked online</a>.</p>\n<p>Within the leaked source code, software vulnerabilities used by Hacking Team to break into PCs was discovered. Source code for the vulnerabilities is out in the open which means you should update as soon as possible. You&#8217;re at risk if you use the following:</p>\n<table border="1" width="100%" cellspacing="0" cellpadding="1">\n<tbody>\n<tr>\n<td width="120">Adobe Flash Player Desktop Runtime</td>\n<td width="120">18.0.0.194 and earlier</td>\n<td width="120">Windows and Macintosh</td>\n</tr>\n<tr>\n<td>Adobe Flash Player Extended Support Release</td>\n<td>13.0.0.296 and earlier</td>\n<td>Windows and Macintosh</td>\n</tr>\n<tr>\n<td>Adobe Flash Player for Google Chrome</td>\n<td>18.0.0.194 and earlier</td>\n<td>Windows, Macintosh and Linux</td>\n</tr>\n<tr>\n<td>Adobe Flash Player for Internet Explorer 10 and Internet Explorer 11</td>\n<td>18.0.0.194 and earlier</td>\n<td>Windows 8.0 and 8.1</td>\n</tr>\n<tr>\n<td width="60">Adobe Flash Player</td>\n<td>11.2.202.468 and earlier</td>\n<td>Linux</td>\n</tr>\n<tr>\n<td>AIR Desktop Runtime</td>\n<td>18.0.0.144 and earlier</td>\n<td>Windows and Macintosh</td>\n</tr>\n<tr>\n<td>AIR SDK</td>\n<td>18.0.0.144 and earlier</td>\n<td>Windows, Macintosh, Android and iOS</td>\n</tr>\n<tr>\n<td>AIR SDK &amp; Compiler</td>\n<td>18.0.0.144 and earlier</td>\n<td>Windows, Macintosh, Android and iOS</td>\n</tr>\n</tbody>\n</table>\n<p>Visit Adobe&#8217;s <a href="https://get.adobe.com/flashplayer/">Flash Player download page</a> to determine which version you&#8217;re using and upgrade if necessary. In recent months, Adobe has fixed a <a href="https://helpx.adobe.com/security.html">series of security vulnerabilities</a> in Flash. At this point, it may be safer to uninstall Flash all together.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Wed, 08 Jul 2015 22:28:24 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Jeff Chandler";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:31;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:58:"WPTavern: Stack Exchange Blog Ditches WordPress for Jekyll";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46136";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:68:"http://wptavern.com/stack-exchange-blog-ditches-wordpress-for-jekyll";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:4747:"<p>Last week Stack Exchange <a href="http://blog.stackexchange.com/2015/07/the-new-stack-exchange-blog/" target="_blank">announced</a> its new blog, revamped to publish company news and engineering posts. The first post on the blog, written by Jon Chan, Stack Overflow&#8217;s developer evangelist, made no small amount of fanfare over <a href="http://blog.stackexchange.com/2015/07/how-we-built-our-blog/" target="_blank">migrating from WordPress to Jekyll</a>.</p>\n<p>Chan&#8217;s explanation of the team&#8217;s process cites a few curious reasons for their dissatisfaction with WordPress:</p>\n<blockquote><p>During the original proposal stage for the engineering blog, we also had a conversation about what engine we would use. At the time, all of our blogs were running WordPress&#8230;which we weren&#8217;t so happy about. It was very buggy, difficult to log in to, not very performant, and has caused our SRE team more than a few headaches. If we were really going to revamp the new company blog, it seemed like a lot of work to try and wrestle with our WordPress installation.</p></blockquote>\n<p>With a little bit of WordPress skill, these seem like easy complaints to resolve, especially given that Chan said the team was inspired by blogs like <a href="https://codeascraft.com/" target="_blank">Code as Craft</a> and <a href="http://oktrends.okcupid.com/" target="_blank">OkTrends</a>, both powered by WordPress. However, anti-WordPress sentiments continue to run high within the Stack Overflow community, which recently ranked the software as <a href="http://wptavern.com/stack-overflow-developer-survey-ranks-wordpress-as-the-3rd-most-dreaded-technology" target="_blank">the third most dreaded technology</a>.</p>\n<a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/get-rid-of-wp.png"><img src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/get-rid-of-wp.png?resize=800%2C528" alt="photo credit: StackExchange Blog" class="size-full wp-image-46331" /></a>photo credit: <a href="http://blog.stackexchange.com/2015/07/how-we-built-our-blog/">StackExchange Blog</a>\n<p>After a great deal of consideration, the Stack Exchange team opted to use a static engine, eventually landing on <a href="http://jekyllrb.com/" target="_blank">Jekyll</a>. Chan outlined the advantages they perceived in the move:</p>\n<ul>\n<li>Posts are in Markdown, something most of our company was familiar with</li>\n<li>Jekyll is just static site generation, so it&#8217;s much more performant</li>\n<li>Complete flexibility for front end work, no need to wrestle with templates</li>\n<li>Open source with a strong community, which we love</li>\n<li>Not WordPress or PHP</li>\n</ul>\n<p>Chan described the migration process, an endeavor that was fraught with obstacles. There is a <a href="http://wptavern.com/export-your-wordpress-blog-to-jekyll-with-one-click" target="_blank">Jekyll Exporter plugin</a> available to those who want to migrate their blogs over, but Stack Exchange opted to use the <a href="https://github.com/thomasf/exitwp" target="_blank">exitwp</a> tool to get them most of the way there.</p>\n<p>Since Jekyll doesn&#8217;t offer native support for comments, one of the biggest challenges in the migration was preserving that content and porting it into a new system. The Stack Exchange team decided to use <a href="https://disqus.com/" target="_blank">Disqus</a> for comments but were unable to properly migrate their existing comments and had to craft an alternative solution.</p>\n<p>&#8220;The worst part of this is how unsupported we were by the Disqus team,&#8221; Chan said. &#8220;We waited on the order of weeks for support responses and for over a month they went unresolved. Sending in official support tickets, emails, and posts on their Discuss forum went unnoticed.&#8221;</p>\n<p>Despite their unsatisfactory experience with Disqus and the fact that they have to sacrifice Stack Exchange login capabilities in order to use it, Chan said they will continue with it going forward.</p>\n<p>If you&#8217;re running a large, high profile blog on WordPress, it requires a certain level of expertise to customize themes and plugins and to ensure a high level of performance. It&#8217;s unclear whether or not the Stack Exchange team was lacking in expertise (based on some of the complaints cited) or simply unwilling to continue with WordPress after unsatisfactory experiences. No massive migration from one platform to another is ever going to be easy and bug-free, but Chan&#8217;s <a href="http://blog.stackexchange.com/2015/07/how-we-built-our-blog/" target="_blank">account</a> offers some valuable insight on how difficult it currently is to move from WordPress to Jekyll while preserving all of your content.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Wed, 08 Jul 2015 21:29:45 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:32;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:47:"WPTavern: HeroPress Ends Experiment With WPChat";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46345";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:57:"http://wptavern.com/heropress-ends-experiment-with-wpchat";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:2781:"<p>Since March of this year, <a href="http://heropress.com/">HeroPress</a> has published inspirational essays from people all over the world. Instead of allowing comments on the site itself, Topher DeRosia, founder of HeroPress, partnered with <a href="http://www.wpchat.com">WPChat</a> to host conversations for each essay. Unfortunately, many of the articles received little feedback.</p>\n<p>Starting this week, DeRosia is allowing contributing writers <a href="http://heropress.com/thoughts-on-comments/">to decide</a> whether they want comments enabled on their essay or not. &#8220;I made the decision to have no comments because I wanted the essays to stand alone, with one voice, that being the voice of the contributor.&#8221; DeRosia told the Tavern.</p>\n<p>Directing people to a third-party site is an odd way to generate a conversation around an article. DeRosia explains why he chose to host comments on WPChat, &#8220;I chose to attach WPChat to the project because it seemed like a good way for readers to express themselves without marring the surface of the essay itself.&#8221;</p>\n<a href="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/HeroPress3SurveyOnWPChat.png"><img class="size-full wp-image-46347" src="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/HeroPress3SurveyOnWPChat.png?resize=816%2C594" alt="Example of a Conversation on WPChat About a HeroPress Essay" /></a>Example of a Conversation on WPChat\n<p><em><a href="https://wpchat.com/t/isolated-and-intrigued-heropress-essay-3/796">Isolated and intrigued</a></em> as well as <em><a href="https://wpchat.com/t/finding-stability-in-wordpress/893">Finding stability in WordPress</a></em> are two examples where great conversations took place on WPChat. However, these conversations are few and far between. &#8220;That leads me to believe there could be more quality input out there and people are simply not interested in making an extra account to comment,&#8221; said DeRosia.</p>\n<p>Contributors who choose to enable comments don&#8217;t need to worry about moderation. DeRosia will heavily moderate comments with a zero tolerance policy for trolls. As for WPChat hosting future conversations, DeRosia says, &#8220;I like WPChat but in this case, I simply don&#8217;t think it&#8217;s the tool for the job.&#8221;</p>\n<p>Comments connect authors to readers and are an <a href="http://wptavern.com/why-comments-still-matter">important part of the internet</a>. Sometimes, the feedback is better than the post itself. However, requiring readers to register to a forum to comment on articles hosted on a different site is too high of a roadblock. The commenting process should be as smooth and simple as possible. Enabling comments on HeroPress is a step in the right direction.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Wed, 08 Jul 2015 20:29:18 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Jeff Chandler";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:33;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:23:"Matt: Customer Success?";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:21:"http://ma.tt/?p=45217";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:38:"http://ma.tt/2015/07/customer-success/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:225:"<p>&#8220;Customer support, when done well, is a career.&#8221; Automattic&#8217;s support lead Andrew Spittle on <a href="http://andrewspittle.com/2015/07/02/customer-success/">customer success vs customer support</a>. </p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Wed, 08 Jul 2015 03:00:00 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:4:"Matt";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:34;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:90:"WPTavern: BuiltWith Reports a 7% Increase in WordPress’ Usage from January – July 2015";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46287";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:92:"http://wptavern.com/builtwith-reports-a-7-increase-in-wordpress-usage-from-january-july-2015";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:4602:"<a href="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/chart.jpg"><img src="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/chart.jpg?resize=1025%2C511" alt="photo credit:  Luis Llerena" class="size-full wp-image-46313" /></a>photo credit:  <a href="https://stocksnap.io/photo/S3JE5YAMND">Luis Llerena</a>\n<p>BuiltWith, the popular service dedicated to monitoring internet technology trends and providing platform usage analytics, released its bi-annual <a href="http://blog.builtwith.com/2015/07/06/entire-internet-cms-usage-january-july-2015/" target="_blank">internet coverage report for CMS usage from January &#8211; July 2015</a>. The report shows that WordPress, which accounts for 48% of total CMS&#8217;s tracked, added 1.1 million domains since January.</p>\n<blockquote><p>WordPress has been found on an additional 1.1 million domains since January but only accounts for a 7% increase in customer base. Whereas Ghost was added to 2,184 domain home pages and accounts for a 17% increase in their customer base.</p></blockquote>\n<p>The title of the summary is &#8220;CMS Market Share Increases by Install Base,&#8221; but WordPress is the only CMS shown in the chart with an actual market share value assigned based on its place among tracked competitors.</p>\n<p><a href="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/builtwith-cms-marketshare-june-2015-report.png"><img src="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/builtwith-cms-marketshare-june-2015-report.png?resize=600%2C793" alt="builtwith-cms-marketshare-june-2015-report" class="aligncenter size-full wp-image-46289" /></a></p>\n<p>BuiltWith indexed 328,852,063 domains during this quarter. Instead of simply showing the increase by usage numbers, the summary focuses on the percentage increase in customer base for a more interesting comparison. When commenters noted that this is not, in fact, market share data, Ghost co-founder John O&#8217;Nolan replied, &#8220;Relative growth compared to existing size is pretty much the only sane measure.&#8221;</p>\n<blockquote class="twitter-tweet" width="550"><p lang="en" dir="ltr"><a href="https://twitter.com/JohnONolan">@JohnONolan</a> Strange perspective. Ghost added 17% or 2,184 domains. WordPress added 7% or 1,149,956. That''s only 535 times more sites ;)</p>\n<p>&mdash; Aigars Silkalns (@AigarsSilkalns) <a href="https://twitter.com/AigarsSilkalns/status/618368722613497856">July 7, 2015</a></p></blockquote>\n<p></p>\n<p>Oddly, the report did not share any figures for <a href="http://trends.builtwith.com/cms/Drupal" target="_blank">Drupal</a> or <a href="http://trends.builtwith.com/cms/Joomla!" target="_blank">Joomla</a>, which <a href="http://w3techs.com/technologies/overview/content_management/all" target="_blank">W3techs estimates as WordPress&#8217; closest CMS competitors</a> in terms of market share. BuiltWith&#8217;s summary appears to be limited to the fastest growing platforms based on percentage increase in customer base.</p>\n<p>The CMS report also included some interesting stats on the WordPress versions it detected on sites indexed. These numbers roughly correspond to the project&#8217;s <a href="https://wordpress.org/about/stats/" target="_blank">version usage stats</a>, although WordPress doesn&#8217;t publish numbers for versions older than 3.0. BuiltWith found that 1748 websites are still running on WordPress 2.1, released eight years ago. This number is down 259 sites since the beginning of the year.</p>\n<a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/wordpress-versions.png"><img src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/wordpress-versions.png?resize=600%2C545" alt="photo credit: BuiltWith" class="size-full wp-image-46308" /></a>photo credit: <a href="http://blog.builtwith.com/2015/07/06/entire-internet-cms-usage-january-july-2015/">BuiltWith</a>\n<p>According to Gary Brewer, founder of BuiltWith, &#8220;Wix and Squarespace’s main acquisition for existing websites that are using a CMS are from WordPress sites.&#8221; He also notes that WordPress continues to dominate without the help of celebrity advertisements. <a href="https://www.youtube.com/watch?v=mjhZ11vGl1Q" target="_blank">Wix&#8217;s ad with Heidi Klum</a> and <a href="https://www.youtube.com/watch?v=BKIlfLReHyo" target="_blank">Squarespace&#8217;s Jeff Bridges commercial</a>, which aired during the Super Bowl, are evidence of both companies&#8217; massive marketing budgets. WordPress.com, the world&#8217;s leading provider of free WordPress sites, has yet to explore that route.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Tue, 07 Jul 2015 23:05:39 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:35;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:73:"WPTavern: New Proposal on Trac to Remove Post Formats from WordPress Core";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=45949";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:83:"http://wptavern.com/new-proposal-on-trac-to-remove-post-formats-from-wordpress-core";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:4154:"<p><a href="http://codex.wordpress.org/Post_Formats">Post Formats</a> is a feature introduced in WordPress 3.1 that enables themes to visually differentiate between types of content. A<a href="http://wptavern.com/post-format-history-and-wordpress-3-6"> metabox with radio buttons</a> was added in WordPress 3.6 to expose the feature to users and allow them to easily select a format. Since WordPress 3.6 was released, there has been <a href="https://core.trac.wordpress.org/query?status=accepted&status=assigned&status=closed&status=new&status=reopened&status=reviewing&component=Post+Formats&order=priority">little effort</a> to improve the feature.</p>\n<p>Morten Rand-Hendriksen <a href="http://wptavern.com/wordpress-trainer-morten-rand-hendriksen-on-common-pain-points-roadblocks-and-advice-for-new-users">teaches WordPress</a> to thousands of people through <a href="http://www.lynda.com/WordPress-tutorials/WordPress-Essential-Training/154417-2.html">Lynda.com</a>. After spending time writing training materials for post formats, Hendriksen was reminded of how much post formats shouldn&#8217;t be in WordPress core.</p>\n<p>He&#8217;s created a <a href="https://core.trac.wordpress.org/ticket/32844">new ticket on trac</a> suggesting post formats be removed from WordPress and placed into a plugin similar to how the link manager and blogroll <a href="https://codex.wordpress.org/Links_Manager">were removed</a> in WordPress 3.5.</p>\n<blockquote><p>After the termination of Post Formats UI, it appears the feature has largely been left to pasture and implementation across themes is at best spotty and inconsistent. One example of this is how different Post Formats are treated in the default themes, culminating in the minimalist/absent inclusion in Twenty Fifteen.</p></blockquote>\n<p>Hendriksen lists six key arguments that come up when discussing the removal of post formats from WordPress:</p>\n<ul>\n<li>Feature support is inconsistent across themes causing users to wonder why the panel and options appear and disappear when themes are switched.</li>\n<li>When implemented, behavior is inconsistent between themes causing a perception of arbitrary or broken behavior in the eyes of the user.</li>\n<li>Specification for what exactly each post format does is vague and ambiguous giving theme developers too much room to come up with arbitrary and non-standard behaviors that cause user confusion when themes are switched.</li>\n<li>The use case for Post Formats seems to have gone away or have been supplanted for the larger goal of making modular, Snowfall-like post editing available.</li>\n<li>Post Formats behavior can be mimicked by theme developers through the use of Categories or other custom taxonomies.</li>\n</ul>\n<p>Applying the <a href="https://en.wikipedia.org/wiki/Pareto_principle#In_software">80/20 rule</a> to software development, Hendriksen believes post formats is in the 20% range or lower. He ends the ticket by proposing post formats be moved into a feature plugin.</p>\n<p>This would allow it to be improved concurrently with WordPress and open up opportunities to experiment with different implementations and ideas. Alternatively, it could be abandoned if no interest is shown to improve it.</p>\n<h2>Move Post Formats to a Plugin</h2>\n<p>My opinion of Post Formats hasn&#8217;t changed since the <a href="http://wptavern.com/why-arent-post-formats-in-wordpress-more-popular">last time I wrote about them</a>. They&#8217;re still unpredictable, I don&#8217;t see many sites using them, and they&#8217;re tough to explain to new users.</p>\n<p>Considering post formats dramatically impact the presentation of content, it&#8217;s strange that the core team has not continually improved the feature after 3.6. By now, they should be rock solid. Instead, it&#8217;s a feature with no obvious future.</p>\n<p>Although you can leave a comment on this post, the best place to leave feedback is in this <a href="https://core.trac.wordpress.org/ticket/32844">trac ticket</a>. It&#8217;s time WordPress core developers got involved with the conversation to let us know what they think about the future of post formats in WordPress.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Tue, 07 Jul 2015 18:00:26 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Jeff Chandler";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:36;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:87:"WPTavern: WordPress 4.3 Improves User Search and Turns Comments Off on Pages by Default";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46238";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:97:"http://wptavern.com/wordpress-4-3-improves-user-search-and-turns-comments-off-on-pages-by-default";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:4001:"<p><a href="http://wptavern.com/wordpress-4-3-beta-1-now-available-for-testing" target="_blank">WordPress 4.3 beta 1</a> was put into the hands of testers last week. Those who have been following 4.3 developments are already familiar with the major features headlining this release, ie. the new <a href="http://wptavern.com/wordpress-4-3-adds-new-site-icons-feature-and-a-text-editor-to-press-this" target="_blank">site icons</a>, <a href="http://wptavern.com/menu-customizer-officially-approved-for-merge-into-wordpress-4-3" target="_blank">menu management in the customizer</a>, and <a href="https://core.trac.wordpress.org/ticket/32589" target="_blank">more secure passwords</a>. However, there are also a couple lesser-known improvements that will have a positive impact on millions of WordPress users.</p>\n<h4>Improved User Search</h4>\n<p>Searching for users in the admin is about to get much easier, thanks to work on a <a href="https://core.trac.wordpress.org/ticket/27304" target="_blank">ticket</a> opened by John Blackbourn 16 months ago. He notes that &#8220;only the user_login (username) and user_nicename (sanitized username) fields are searched,&#8221; excluding the following more likely fields:</p>\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Nickname</li>\n<li>Display name</li>\n</ul>\n<p>This issue was especially problematic in large, multi-thousand member multisite installations where finding a user in the admin often meant knowing exactly what to query and then paging through results. WordPress 4.3 contributions from <a href="https://profiles.wordpress.org/mordauk" target="_blank">Pippin Williamson</a> and <a href="https://profiles.wordpress.org/wonderboymusic" target="_blank">Scott Taylor</a> make it possible to <a href="https://core.trac.wordpress.org/changeset/32980" target="_blank">search by the user&#8217;s email, URL, and display name</a>.</p>\n<h4>Comments Turned Off on Pages by Default</h4>\n<p><a href="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/comments-off-on-pages-by-default.jpg"><img src="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/comments-off-on-pages-by-default.jpg?resize=962%2C323" alt="comments-off-on-pages-by-default" class="aligncenter size-full wp-image-46275" /></a></p>\n<p>WordPress 4.3 will also bring a welcome change to turn off comments on pages by default. In the future when you create pages, you won&#8217;t have to remember to go into the discussion settings to disable comments. One might think this would be a simple little thing to change, but quite a bit of discussion has gone into crafting the best solution to the <a href="https://core.trac.wordpress.org/ticket/31168" target="_blank">ticket</a> opened five months ago.</p>\n<p>This change also applies to all custom post types. Mel Choyce outlined the new behavior in a <a href="https://make.wordpress.org/core/2015/07/06/comments-are-now-turned-off-on-pages-by-default/" target="_blank">post</a> on the make.wordpress.org/core blog:</p>\n<blockquote><p>Post registrations that don’t explicitly add support for comments will now default to comments being off on new posts of that type (before, they defaulted to on). Up until now, post type support for comments has only affected admin UI; a developer could omit comment support on registration but still allow comments to be posted. <strong>This is a change in behavior</strong>, and we will be closely monitoring its effects during beta. Moving to explicit support will allow core behavior to be more predictable and robust in the future, but we will always consider real-world usage.</p></blockquote>\n<p>The change also comes with a new function and a filter that you can use to restore the current behavior of comments to your post type, if necessary. More details and an example on how to use the filter are available on the make.wordpress.org/core announcement <a href="https://make.wordpress.org/core/2015/07/06/comments-are-now-turned-off-on-pages-by-default/" target="_blank">post</a>.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Tue, 07 Jul 2015 05:07:42 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:37;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:20:"Matt: Why We Encrypt";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:21:"http://ma.tt/?p=45215";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:36:"http://ma.tt/2015/07/why-we-encrypt/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:172:"<p>From one of the best blogs on the internet, <a href="https://www.schneier.com/blog/archives/2015/06/why_we_encrypt.html">Bruce Schnier writes on Why We Encrypt</a>.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Tue, 07 Jul 2015 04:46:00 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:4:"Matt";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:38;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:39:"Akismet: Akismet WordPress Plugin 3.1.3";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:31:"http://blog.akismet.com/?p=1854";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:59:"http://blog.akismet.com/2015/07/06/akismet-3-1-3-wordpress/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:1014:"<p>Version 3.1.3 of <a href="http://wordpress.org/plugins/akismet/">the Akismet plugin for WordPress</a> is now available.</p>\n<p>This update addresses an issue causing some users to see blank Akismet settings screens. After installing this update, the settings screen should either load successfully, or it will display an error message with instructions for fixing the problem.</p>\n<p>To upgrade, visit the Updates page of your WordPress dashboard and follow the instructions. If you need to download the plugin zip file directly, links to all versions are available in <a href="http://wordpress.org/plugins/akismet/">the WordPress plugins directory</a>.</p><br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/akismet.wordpress.com/1854/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/akismet.wordpress.com/1854/" /></a> <img alt="" border="0" src="http://pixel.wp.com/b.gif?host=blog.akismet.com&blog=116920&post=1854&subd=akismet&ref=&feed=1" width="1" height="1" />";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 06 Jul 2015 23:49:19 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:17:"Christopher Finke";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:39;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:76:"WPTavern: Jetpack 3.6 Adds the Ability to Manage Your Connections to Jetpack";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46227";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:86:"http://wptavern.com/jetpack-3-6-adds-the-ability-to-manage-your-connections-to-jetpack";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:3928:"<p>Jetpack 3.6 <a href="http://jetpack.me/2015/07/06/jetpack-3-6-updated-social-widgets-jetpack-cli-and-more/">is available</a> and has <a href="https://wordpress.org/plugins/jetpack/changelog/">several bug fixes and enhancements</a>. <a href="http://jetpack.me/support/jetpack-cli/">Jetpack CLI</a> which is a command line interface for Jetpack and extends off of <a href="http://wp-cli.org/" target="_blank">wp-cli</a> for WordPress, has undergone a number of improvements. There are a handful of new extra sidebar widgets, including Facebook Like Box, and Social Media Icons.</p>\n<p>Existing widgets such as Top Posts are more configurable. The Top Posts and Pages widget now allows you to show or hide different page types from the widget. For example, if you only want to show post and page results, check the boxes for Posts and Pages in the widget configuration area.</p>\n<p>The new Facebook Like box widget is streamlined and looks much better than its predecessor.</p>\n<a href="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/NewJetpackFacebookWidget.png"><img class="size-full wp-image-46248" src="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/NewJetpackFacebookWidget.png?resize=332%2C310" alt="New Jetpack Facebook Widget is Streamlined" /></a>New Jetpack Facebook Widget is Streamlined\n<p>There&#8217;s a social media icons widget that&#8217;s great for themes that don&#8217;t already have a built-in method of displaying social networking connections. Simply place it in the sidebar and apply your username to each service you use. On the Tavern test site, the icons were a little too small for my liking but I realize this is an issue with the theme we use.</p>\n<a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/SocialMediaIconsWidget.png"><img class="size-full wp-image-46249" src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/SocialMediaIconsWidget.png?resize=335%2C128" alt="Social Media Icons Widget" /></a>Social Media Icons Widget\n<p>Jetpack 3.6 also introduces a connection manager where users can manage a site’s <a href="http://jetpack.me/support/primary-user/">Primary User</a>, see any other connected users, and/or manage your connection to WordPress.com. The team says there are plans to add additional features to My Jetpack in future versions.</p>\n<a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/JetpackConnectionManager.png"><img class="size-full wp-image-46247" src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/JetpackConnectionManager.png?resize=1025%2C383" alt="Jetpack Connection Manager" /></a>Jetpack Connection Manager\n<p>In a sign of the times, <a href="http://www.stumbleupon.com/">StumbleUpon</a> is no longer an option in the sharing module. Email sharing now uses <a href="https://developers.google.com/recaptcha/intro">reCAPTCHA 2.0</a> to verify human behavior. Stats are more accurate as previewing posts and pages no longer count as pageviews.</p>\n<a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/AvailableSharingButtons.png"><img class="size-full wp-image-46229" src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/AvailableSharingButtons.png?resize=778%2C345" alt="StumbleUpon Sharing Button Retired from Jetpack" /></a>StumbleUpon Sharing Button Retired from Jetpack\n<p>Jetpack Carousel supports HTML 5 and the Slideshare shortcode is fixed. Deprecated card types for Twitter cards are removed and the Facebook share button now shows up for the Australian and Canadian locale.</p>\n<p>Upgrade to <a href="https://wordpress.org/plugins/jetpack/">Jetpack 3.6</a> to take advantage of the numerous bug fixes and enhancements. If you&#8217;d like to be the first to test new features and help Jetpack users experience fewer problems, consider participating in the <a href="http://wptavern.com/jetpack-relaunches-beta-testing-program">Jetpack Beta testing program</a>.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 06 Jul 2015 22:58:20 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Jeff Chandler";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:40;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:62:"WPTavern: Pressnomics 4 Set for March 3-4, 2016 in Phoenix, AZ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46236";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:70:"http://wptavern.com/pressnomics-4-set-for-march-3-4-2016-in-phoenix-az";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:2822:"<p>Pressnomics <a href="http://pressnomics.com/2015/07/announcing-dates-for-pressnomics-4/">has announced</a> that the 4th iteration of the event will take place on March 3-4, 2016 at Tempe Mission Palms Hotel, Phoenix, AZ. Started in 2012 by Joshua Strebel of <a title="http://page.ly" href="http://page.ly">Pagely,</a> Pressnomics is a conference dedicated to the business aspects of WordPress, whether it is software as a service, commercial themes and plugins, or development agencies.</p>\n<p><a href="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/Pressnomics4Dates.png"><img class="aligncenter size-full wp-image-46243" src="http://i1.wp.com/wptavern.com/wp-content/uploads/2015/07/Pressnomics4Dates.png?resize=655%2C240" alt="Date for Pressomics 4" /></a>When the event concluded last year, there was talk of it being moved to Europe for 2016. Despite the event taking place in the US in 2016, I asked Strebel if plans to host Pressnomics in Europe or even a branch of the conference are still on the table?</p>\n<blockquote><p>We are conversing with folks in Europe to try to make something happen in 2016, in addition to, Pressnomics 4 in Phoenix. Rather than ice everything until all details are final, we decided to swing and see if we can make both happen.</p></blockquote>\n<p>Tickets go on sale <strong>September 1st, 2015 at 10AM PST</strong>. Despite feedback from attendees that ticket prices should increase, event co-organizer Sally Strebel, says prices will remain roughly the same as last year.</p>\n<blockquote><p>I’ve been told by numerous people that we should increase the cost of tickets for this event and that they go to other conferences that cost more and return less value.</p>\n<p>Thank you for looking out for us and I truly value your opinion, however we have decided to keep costs essentially the same as last year because it’s not about the money. It’s about giving back. We look forward to growing our businesses together.</p></blockquote>\n<p>Companies immediately applied to be sponsors within minutes of receiving sponsorship information. Those companies include, GoDaddy, Envato, Sucuri, iThemes, Easy Digital Downloads, and more.</p>\n<p>I had the privilege <a href="http://wptavern.com/envato-stats-tips-for-getting-things-done-and-more-at-pressnomics-3">to attend Pressnomics 3</a> and it was by far one of the most unique WordPress conferences I&#8217;ve attended. Compared to WordCamps, the atmosphere is much different and you can tell speakers are more open and relaxed since sessions are not recorded.</p>\n<p>March is a great time of year to host a conference in Phoenix. If Pressnomics 3 is anything to go by, Pressnomics 4 will be amazing. If you have the opportunity to attend Pressnomics 4, I highly suggest doing so as it&#8217;s a memorable experience.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 06 Jul 2015 22:48:52 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Jeff Chandler";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:41;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:70:"WPTavern: PHP 4 Style Constructors Will Be Deprecated in WordPress 4.3";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46222";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:80:"http://wptavern.com/php-4-style-constructors-will-be-deprecated-in-wordpress-4-3";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:1730:"<p>PHP 4 style constructors are being deprecated in WordPress 4.3 to ease the transition to support PHP 7. According to Aaron Jorbin, on the <a href="https://make.wordpress.org/core/2015/07/02/deprecating-php4-style-constructors-in-wordpress-4-3/">Make WordPress Core blog post</a>, WordPress <a href="https://core.trac.wordpress.org/changeset/32990">r32990</a> introduces a change so that all classes use the PHP 5 style constructors, while still retaining the PHP 4 style constructors for backwards compatibility.</p>\n<p>A deprecated_constructor warning that follows the same rules as <a href="https://developer.wordpress.org/reference/functions/_deprecated_function/">deprecated_function</a> will also be displayed for WordPress classes that are not external libraries</p>\n<p><a href="http://chriscct7.com/">Chris Christoff</a>, who contributes to WordPress core, <a href="https://gist.github.com/chriscct7/d7d077afb01011b1839d">generated a list of plugins</a> on the WordPress plugin directory that have widgets calling <code>WP_Widget::WP_Widget()</code> and/or <code>parent::WP_Widget()</code> and/or <code>{object}-&gt;WP_Widget()</code>.</p>\n<p>The list includes more than 4,000 plugins and contains the author, title, and slug. Plugin authors should check the list to see if your plugin is listed. Even if it&#8217;s not, you&#8217;re still encouraged to make sure you&#8217;re not using a PHP 4 style constructor in your code.</p>\n<p>If you use any of the plugins listed, please create a support forum thread with a link to the <a href="https://make.wordpress.org/core/2015/07/02/deprecating-php4-style-constructors-in-wordpress-4-3/">Make WordPress Core blog post</a> and politely ask them to update their plugin.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 06 Jul 2015 21:11:55 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Jeff Chandler";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:42;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:82:"WPTavern: Highlights of Matt Mullenweg’s Q&amp;A Session at WordCamp Europe 2015";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46152";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:84:"http://wptavern.com/highlights-of-matt-mullenwegs-qa-session-at-wordcamp-europe-2015";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:5818:"<a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/mullenweg-wordcamp-europe.jpg"><img src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/mullenweg-wordcamp-europe.jpg?resize=1025%2C518" alt="Kari Leigh | Found Art Photography" class="size-full wp-image-46199" /></a>Kari Leigh | <a href="http://www.found-art-photography.com/" target="_blank">Found Art Photography</a>\n<p>The video of <a href="http://wordpress.tv/2015/07/04/matt-mullenweg-keynote-qanda-wordcamp-europe-2015/" target="_blank">Matt Mullenweg&#8217;s Q&amp;A session at WordCamp Europe</a> is now published on WordPress.tv. For those who were unable to attend, this session provides a glimpse into what WordPress&#8217; co-founder sees for the future of the software and the community.</p>\n<p>One of the most exciting parts of the video is where Mullenweg talks about the potential of WordPress.org to serve other languages and eventually expand avenues of core contribution to non-English speaking audiences.</p>\n<p>When asked what kind of contribution can be made to improve WordPress.org for Rosetta sites, themes, and plugins, Mullenweg replied:</p>\n<blockquote><p>Themes and plugins are undoubtedly the most important. To me, the next most important things are the Rosetta sites and having theme and plugin directories available on the Rosetta sites. There is actually a great example at <a href="https://ro.wordpress.org/" target="_blank">ro.wordpress.org</a>, which is the Romanian Rosetta site that shows both the potential and the problem:</p>\n<p>Now there are themes and plugins menu items there, which none of the Rosetta sites have had prior to this. But when you click on it you see mostly English in the plugin descriptions, even things like screenshots and tutorials.</p></blockquote>\n<p>He described these updates to WordPress.org as just a &#8220;hint of what could be amazing&#8221; one day. Mullenweg noted that despite Europe having 23+ recognized languages, attendees at the WordCamp were all speaking English. However, not all areas of the world are populated by people with bilingual capabilities.</p>\n<blockquote><p>I think it would be amazing to open up WordPress to have a first priority experience of the thousands of plugins and themes that are available for people who do not speak a word of English. Right now WordPress is just not accessible to that group. Luckily, over half the people in Europe are bilingual&#8230; In places where that&#8217;s a possibility, WordPress can still do well even though we don&#8217;t have a native experience in someone&#8217;s mother tongue.</p>\n<p>But English is only the third most popular language in the world and it&#8217;s not the fastest growing. There are huge audiences that I think would be an important part of the community. Someday I want it to be where, instead of things being translated from English to a different language, we&#8217;re getting core contributions translated from, say, Chinese or Hindi or Spanish, into English to be reviewed. We&#8217;re not looking to just how to translate plugins from English into other languages but vice versa. I think that will be when we&#8217;re successful.</p></blockquote>\n<p>In the same way that better language support opens up WordPress to a wider audience, Mullenweg believes that the customizer will open up the software for more non-technical users. During the Q&amp;A he shared his thoughts on the future of the customizer:</p>\n<blockquote><p>As we currently are working, the customizer is the way forward&#8230;It essentially removes the fear and disconnect between wp-admin and the front end of a site. It&#8217;s a bridge that gives people the confidence to make changes while seeing those changes in real time. The real time feedback and safety net of seeing that, and being able to undo and redo things, is incredibly empowering, particularly for non-technical users who don&#8217;t know how to dive into CSS or the code. I personally believe that the work on the customizer is some of the most important going on in the WordPress project right now.</p></blockquote>\n<p>In addition to building the feature in a way that is responsive to mobile devices, Mullenweg noted that the customizer currently falls short on desktop:</p>\n<blockquote><p>The customizer is, for lack of a better word, a narrow interface, because it needs to show your site in addition to the admin. I think we need to do a better job of making sure that interface scales up as well as down, meaning that if you do have the space or would like to make it fullscreen, that it is responsive, so that it enlarges into an interface that probably looks and works much like the current wp-admin interface for being a fullscreen experience for editing and modifying menus, widgets, colors, fonts, header images, site title, all the things that are key to the presentation of your site.</p></blockquote>\n<p>It is curious that the customizer is being pushed through to WordPress 4.3 without the ability to scale up gracefully. If the situation were reversed, where the feature was unfriendly to mobile users, it seems less likely that it would have been deemed ready for core. This illustrates the WordPress project&#8217;s strong emphasis on being positioned to attract mobile users.</p>\n<p>Mullenweg encouraged attendees to keep an eye on the customizer, because he believes it will do a much better job than Wix and Squarespace when it comes to providing a user-friendly way to customizer websites.</p>\n<p>The entirety of the 66-minute long Q&amp;A session is included in the video below. In addition to languages and the customizer, Mullenweg also answers questions about security, WordPress&#8217; minimum PHP version, the possibility of multilingual features in core, and the importance of building for mobile.</p>\n<p></p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 06 Jul 2015 16:39:07 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:43;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:61:"WPTavern: A Narrative of Using Composer in a WordPress Plugin";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46141";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:71:"http://wptavern.com/a-narrative-of-using-composer-in-a-wordpress-plugin";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:10900:"<p><a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/05/petersuhm.jpeg"><img src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/05/petersuhm.jpeg?resize=150%2C150" alt="petersuhm" class="alignright size-thumbnail wp-image-43613" /></a>This piece was contributed by guest author <a href="https://twitter.com/petersuhm" target="_blank">Peter Suhm</a>. Peter is a web developer from the Land of the Danes. He is the creator of <a href="https://wppusher.com/" target="_blank">WP Pusher</a> and a huge travel addict, bringing his work along with him as he goes.<br />\n&nbsp;</p>\n<hr />\n<p>The other day I posted <a href="http://blog.wppusher.com/a-warning-about-using-composer-with-wordpress/" target="_blank">a warning about using Composer in WordPress plugins</a> on the WP Pusher blog. This post got a lot of attention and I feel the need to clarify a few points that were not all clear to everyone. The article was also a bit heavy on the technical stuff, so in this post I will try to make my main point more clear by using a simple narrative to illustrate it.</p>\n<h3>A narrative</h3>\n<a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/boxes.jpg"><img src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/boxes.jpg?resize=1024%2C490" alt="photo credit: Doors Open Toronto 2008 - Toronto Archives - (license)" class="size-full wp-image-46150" /></a>photo credit: <a href="http://www.flickr.com/photos/25716750@N06/2527068003">Doors Open Toronto 2008 &#8211; Toronto Archives</a> &#8211; <a href="https://creativecommons.org/licenses/by/2.0/">(license)</a>\n<p>Let’s imagine for a while that you and I are both plugin authors. Both of us have a great idea for a plugin we wish to distribute via WordPress.org. We want to include a few premium features in our plugins that users of the free version can unlock by entering a license key.</p>\n<p>We need some code that can handle this process. Both of us realize that this problem have probably already been solved by someone else. None of us are fans of reinventing the wheel, so we head over to Packagist and type in “license manager”. It looks like our assumption was justified. Yoast already has a package that can handle this. We both decide to do a quick <code>composer require yoast/license-manager</code>. Easy peasy. Now we can move on to work on something that really matters- the core features of our respective plugins.</p>\n<p>Fast forward, ready to release your plugin, you realize something: Your user doesn’t necessarily have Composer handy when installing your plugin from WordPress.org, so how are they going to get the code for the license manager? This situation is a bit annoying, because the only solution you really see is to just commit the whole Composer generated <code>vendor</code> directory to your plugin and push it to WordPress.org. You know this is not how Composer is supposed to work, but whatever. You don’t really have other options.</p>\n<p>Meanwhile, I have come to the same conclusion with my plugin. Just include the license manager code and be done with it.</p>\n<p>Fast forward once more, both our plugins now live in the WordPress.org repository and once in a while, someone decides to upgrade to our premium versions. Everything seems to be fine and we are both grateful that we could just use the code that Yoast had generously open sourced, and didn’t have to reinvent the wheel.</p>\n<p>One day, you receive a strange e-mail. A customer is experiencing some really strange behavior when trying to unlock your premium features. It makes no sense to you, because no one else ever reported this. After hours of debugging, you finally ask your customer to deactivate everything else, except your plugin, and then: It works! Hmm. Your plugin seems to somehow be incompatible with another plugin. My plugin.</p>\n<p>You realize this after hours of going through source code of all the other plugins the customer had installed. When you realize that we both use the license manager, a bell rings. Could this really be it? If so, how come no <code>fatal errors: cannot redeclare class</code> was caused by PHP?</p>\n<p>A week earlier, I had bumped the required version of the license manager in my plugin to the latest version, which included some (fictional) breaking changes. After even more debugging and <code>var_dump()</code>’ing, you realize that my version of the license manager is also the version loaded by PHP in your plugin. You find that really strange because you specifically required another version of the license manager with Composer. You don’t really know what to do about this.</p>\n<p>Because there really isn’t much you can do about it.</p>\n<h3>What happened here?</h3>\n<p>Now that we have all seen the problem, let’s take a moment to go through what actually happened in the narrative. First of all, why didn&#8217;t PHP cause a fatal error when two classes obviously had the same name that both of us included the license manager?</p>\n<p>The reason for this is that we used an autoloader generated by Composer. This autoloader scans the diretory structure of our dependencies and adds every class to the autoloader. If a class has already been added, Composer will ignore it. Silently. I have written a small code example if you want to see it for yourself. <a href="https://github.com/petersuhm/Illustrating-WordPress-Dependency-Issue" target="_blank">It’s on GitHub</a>.</p>\n<p>Why was my version of the license manager included before yours?</p>\n<p>This happened because my plugin had a name that caused it to be loaded before yours. Maybe, in the future, we will all name our plugins “Aaaaaa My Plugin” in order to be loaded first!</p>\n<p>So to sum up, the main issue here is that we won’t know which version of our dependencies are available to us at which time. It simply depends on factors we can’t fully control as plugin developers.</p>\n<h3>Is this a Composer specific issue?</h3>\n<p>No. It really isn’t. WordPress doesn&#8217;t have a way of dealing with third party code in plugins or themes. Therein lies the problem. The reason why I’m talking about Composer is that it is gaining a lot of traction these days. If WordPress developers want to use Composer in plugins released via WordPress.org, this needs to be solved somehow. Otherwise, we will see true chaos when all plugins starts to be incompatible with each other because they use different versions. Welcome to debugging hell.</p>\n<h3>What can we do about this?</h3>\n<p>Someone who has been really concerned about this and has worked hard to find a potential solution is <a href="https://twitter.com/CoenJacobs" target="_blank">Coen Jacobs</a>. I decided to reach out to Coen and ask him if he thinks there is anything we can do about this.</p>\n<p><strong>Many developers are already including 3rd party code in their plugins. Is this really a problem?</strong></p>\n<p>Yes, this is already a problem in the plugins ecosystem. It will become even worse when more people figure out it&#8217;s a good idea to put common functionality in separate packages. These packages can then be bundled with multiple plugins and the issue will appear more and more. I&#8217;ve been speaking to a couple developers who have already been through debug hell trying to find out what&#8217;s causing this issue.</p>\n<p><strong>Moving forward, would you suggest developers stop including 3rd party code in their plugins?</strong></p>\n<p>I&#8217;m a bit torn on this subject. It makes no sense from a developers point of view to tell people to stop bundling shared packages in their plugins. On the other hand, everybody wants the best possible user experience for their users. It&#8217;s a tough decision to make for sure.</p>\n<p>At this point, I want to push WordPress related development forward. I want to share libraries and use libraries shared by others. Nobody should be reinventing the wheel over and over again. So I would take the risk of running into issues like this, solving the problems as they show up.</p>\n<p>This also means that I&#8217;ll be doing my damned best to find a long term solution for this issue. More people will start using Composer, more people will bundle libraries with their plugins. This problem will show up more often, so it&#8217;s time to fix it.</p>\n<p><strong>What can plugin developers do to prevent this problem?</strong></p>\n<p>There is a workaround that I have seen some people use already. It basically comes down to moving your dependency to the namespace of your plugin. Danny van Kooten <a href="https://github.com/ibericode/scroll-triggered-boxes/commit/9ceef204073e4049b82833e96c0202a5754fd230" target="_blank">did this for one of his plugins</a>. This is not ideal however. Every time he updates his dependencies, he has to go through all the files and change the namespaces again. Now this is not such a big task for a relatively small library like Pimple, but a massive undertaking for larger libraries.</p>\n<p>This can only be done with namespaces though, so you&#8217;ll have to make your plugin require PHP 5.3+ as well. I&#8217;m not gonna lie, I think every plugin should start doing that sooner or later, but it&#8217;s definitely something you need to consider when you decide to do this.</p>\n<p><strong>What would the ideal solution be, if there is any?</strong></p>\n<p>The ideal situation would be using some sort of dependency manager. There is of course Composer, the most used dependency manager. Composer is very hard, if not impossible, to use for the vast majority of the WordPress users. It&#8217;s a developer&#8217;s tool after all.</p>\n<p>WordPress should make this easier for its end users, while still enabling developers to utilize pretty much any package they want. On this thought, I have started putting together the <a href="https://github.com/coenjacobs/wordpress-composer-installer" target="_blank">WordPress Composer Installer</a> plugin, which does all the hard Composer work while people install plugins as they always have. As soon as I am been able to finish this up, I&#8217;ll integrate it properly into the whole plugin installer flow.</p>\n<p>Now maybe one day, this can be integrated in core WordPress. It has a long way to go, but the proof of concept already works.</p>\n<h3>Conclusion</h3>\n<p>If you have been reading this far, first of all: Thank you. Second of all, I hope you now see how this is something that will eventually become a problem. Our current situation is very frustrating, because we simply don&#8217;t have the tools we need. Still, I think it&#8217;s important that we keep talking about this and make sure that we all, as WordPress developers, understand the potential issues caused by conflicting third party dependencies in our code.</p>\n<p>Finally, I want to mention one more time that this is not a Composer issue. It&#8217;s a WordPress issue.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 06 Jul 2015 12:03:05 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:44;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:83:"WPTavern: Resonar: A Free WordPress Blog Theme Designed to Showcase Featured Images";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=45927";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:92:"http://wptavern.com/resonar-a-free-wordpress-blog-theme-designed-to-showcase-featured-images";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:2501:"<p><a href="https://wordpress.org/themes/resonar/" target="_blank">Resonar</a> is an elegant WordPress blog theme that was launched in mid-March on WordPress.com and is now available to self-hosted WordPress sites. This theme makes a big impact with its strong typography and fullscreen featured images.</p>\n<p><a href="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/resonar-screenshot.jpg"><img src="http://i2.wp.com/wptavern.com/wp-content/uploads/2015/07/resonar-screenshot.jpg?resize=660%2C495" alt="resonar-screenshot" class="aligncenter size-full wp-image-46158" /></a></p>\n<p>Resonar was designed by <a href="http://takashiirie.com/" target="_blank">Takashi Irie</a>, the same designer for the Twenty Fifteen and Twenty Fourteen default themes. Irie&#8217;s designs are also behind the popular <a href="http://wptavern.com/espied-a-free-wordpress-portfolio-theme-for-designers-and-photographers" target="_blank">Espied</a> and <a href="https://wordpress.org/themes/ryu/" target="_blank">Ryu</a> themes.</p>\n<p>The homepage for Resonar is created by assigning a sticky post with a large featured image (ideally 2000px wide and 1500px high). If you frequently change this sticky post, your site will always have a fresh focal point on the homepage.</p>\n<p>If you&#8217;re looking for a theme that highlights longform posts, Resonar fits the bill with its unique styling for blockquotes, pull quotes, overhanging images.</p>\n<p><a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/resonar-quotes.jpg"><img src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/resonar-quotes.jpg?resize=660%2C915" alt="resonar-quotes" class="aligncenter size-full wp-image-46167" /></a></p>\n<p>The centered blog layout keeps the focus on the content, but you don&#8217;t have to sacrifice widget areas to use the theme. Clicking on the ellipsis icon in the main menu will reveal a 576px-wide slide-out sidebar where you can drop in widgets and display a social links menu.</p>\n<p>As Resonar revolves around fullscreen featured images, you&#8217;ll need to be prepared to have a 2000px by 1500px image for each post in order to keep the theme looking its best. Check out the <a href="https://resonardemo.wordpress.com/" target="_blank">live demo</a> on WordPress.com to see Resonar in action. Self-hosted WordPress blog owners can <a href="https://wordpress.org/themes/resonar/" target="_blank">download the theme from WordPress.org</a> or install it via the admin themes browser.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 06 Jul 2015 04:41:50 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Sarah Gooding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:45;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:38:"Matt: Trevor Noah &amp; Jerry Seinfeld";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:21:"http://ma.tt/?p=45210";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:48:"http://ma.tt/2015/07/trevor-noah-jerry-seinfeld/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:425:"<p>&nbsp;</p>\n<p><a href="http://comediansincarsgettingcoffee.com/trevor-noah-thats-the-whole-point-of-apartheid-jerry">Trevor Noah, the new host of the Daily Show, was on Jerry Seinfeld&#8217;s Comedians in Cars Getting Coffee show</a>, and it was quite interesting. I really love this show, even when it&#8217;s slow you get some fun thoughts. I would embed the video but that doesn&#8217;t seem possible.</p>\n<p>&nbsp;</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 06 Jul 2015 03:24:00 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:4:"Matt";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:46;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:26:"Matt: Automattic Challenge";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:21:"http://ma.tt/?p=45213";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:42:"http://ma.tt/2015/07/automattic-challenge/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:313:"<p>&#8220;We have two interesting challenges for you – to write the shortest code possible and to write the fastest code possible.&#8221; One of the prizes is a conference ticket and three nights in a hotel. Check it out over at the <a href="http://automattic.paris/">Automattic React Europe Challenge</a>.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Sun, 05 Jul 2015 05:50:53 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:4:"Matt";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:47;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:20:"Matt: New VideoPress";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:21:"http://ma.tt/?p=45204";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:36:"http://ma.tt/2015/07/new-videopress/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:283:"<p><a href="https://en.blog.wordpress.com/2015/07/01/videopress-next/">We launched a shiny new version of VideoPress</a> that makes mobile better, is way faster, has a sleek UI, and is HTML5. This is targeted at WordPress.com users right now, but will expand for everyone soon.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Sat, 04 Jul 2015 05:56:00 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:4:"Matt";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:48;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:88:"WPTavern: Automattic Overhauls VideoPress and Open Sources Technologies Used to Build It";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://wptavern.com/?p=46073";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:98:"http://wptavern.com/automattic-overhauls-videopress-and-open-sources-technologies-used-to-build-it";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:2837:"<p><a href="http://videopress.com/">VideoPress</a>, Automattic&#8217;s video hosting service, has undergone a <a href="https://en.blog.wordpress.com/2015/07/01/videopress-next/">complete overhaul</a>. The video player is now responsive and adjusts well to mobile devices. Videos can be embedded anywhere and are easier to share, thanks to permalinks.</p>\n<p>There&#8217;s also a couple of neat options for sharing videos. Similar to YouTube, you can select a time stamp where the video will start playing. You can also loop and autoplay videos.</p>\n<a href="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/VideoPressSharingOptions.png"><img class="wp-image-46114 size-full" src="http://i0.wp.com/wptavern.com/wp-content/uploads/2015/07/VideoPressSharingOptions.png?resize=566%2C319" alt="VideoPress Sharing Options" /></a>VideoPress Sharing Options\n<p>One thing I noticed is that pasting a VideoPress permalink into the self hosted WordPress visual editor does not load the video. This is because WordPress does not have <a href="https://codex.wordpress.org/Embeds">oEmbed support</a> for VideoPress.</p>\n<p>To embed videos into posts, you need to copy the HTML embed code from the video and past it into the WordPress text editor. Pasting the code into the visual editor doesn&#8217;t work. Guillermo Rauch, who works on the VideoPress team at Automattic says they are <a href="https://en.blog.wordpress.com/2015/07/01/videopress-next/?c=221756#comment-221760">working on adding oEmbed support</a>.</p>\n<p>The new video player takes up little space and is unbranded. According to Rauch, the player’s skin and behavior is controlled by JavaScript, HTML and CSS. This opens the door for customizations by theme developers in the future. Thanks to major performance enhancements, pages with videos on them will load faster, even for those on slow internet connections. Here&#8217;s an example of a video using the new player.</p>\n<p></p>\n<p></p>\n<p>A feature that I think a lot of people will enjoy is real-time seek which lets you skim through videos and helps you start playing at a desired point. Last but not least, the libraries used to build the new video player have been open sourced, including <a href="https://github.com/automattic/jpeg-stream">jpeg-stream</a>, <a href="https://github.com/automattic/pixel-stack">pixel-stack</a>, and <a href="https://github.com/automattic/video-thumb-grid">video-thumb-grid</a>.</p>\n<p>If you&#8217;re interested in using VideoPress, you need a <a href="https://wordpress.com/plans/">Premium or Business</a> plan on WordPress.com. The premium plan is $99 per year and includes 13GB of space. Videos take up a lot of space and one has to wonder if it&#8217;s worth the cost or if YouTube is a better option. If you use VideoPress, let us know what you think of these improvements.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Fri, 03 Jul 2015 03:46:15 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Jeff Chandler";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:49;a:6:{s:4:"data";s:13:"\n	\n	\n	\n	\n	\n	\n";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:68:"Matt: Domain Anonymity and the Brilliance of Entertainment Lobbyists";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:21:"http://ma.tt/?p=45202";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:84:"http://ma.tt/2015/07/domain-anonymity-and-the-brilliance-of-entertainment-lobbyists/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:1747:"<blockquote><p>To rid the internet of piracy, entertainment companies are willing to greatly reduce privacy, at least where website registration is concerned.</p>\n<p>Where the entertainment industry views proxy registration as a pirate’s tool for obfuscation, privacy advocates see identity concealment as a feature that can enable free speech and freedom from harassment.</p></blockquote>\n<p>So there&#8217;s <a href="http://www.buzzfeed.com/hamzashaban/proposed-domain-name-rule-threatens-website-owner-anonymity">a new proposal to force any &#8220;commercial&#8221; website, which could cover pretty much anything, to have real WHOIS/contact info</a>. This is a terrible idea, and of course there are already ample and simple means to bypass proxy services being actually abused with a court order. But they want to go a step further, so potentially a parenting blogger with ads or affiliate links on their site would be forced to put their actual home address and phone number in a public directory anyone on the internet can access, or break the law. What could go wrong? <a href="https://www.eff.org/deeplinks/2015/06/changes-domain-name-rules-place-user-privacy-jeopardy">EFF has more about why this impacts user privacy</a>.</p>\n<p>I think the better question here, is <em>when has the entertainment industry <strong>ever</strong> proposed something good for consumers or the internet?</em> I&#8217;m not kidding, 100% serious: have they ever been right?</p>\n<p>It seems like a good approach for governing bodies like FCC, ICANN, or Congress to just blanket oppose or do the opposite of what MPAA or COA propose, and they&#8217;ll be on the right side of history and magically appear to be a very tech-savvy candidate or regulator.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 02 Jul 2015 22:30:00 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:4:"Matt";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}}}}}}}}}}s:4:"type";i:128;s:7:"headers";a:10:{s:6:"server";s:11:"nginx/1.4.1";s:4:"date";s:29:"Fri, 17 Jul 2015 03:02:41 GMT";s:12:"content-type";s:8:"text/xml";s:14:"content-length";s:6:"171594";s:10:"connection";s:5:"close";s:4:"vary";s:15:"Accept-Encoding";s:13:"last-modified";s:29:"Fri, 17 Jul 2015 02:45:14 GMT";s:15:"x-frame-options";s:10:"SAMEORIGIN";s:4:"x-nc";s:11:"HIT lax 250";s:13:"accept-ranges";s:5:"bytes";}s:5:"build";s:14:"20150331061234";}', 'no');
INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(117, '_transient_twentyfourteen_category_count', '1', 'yes'),
(121, 'current_theme', 'MH Magazine lite', 'yes'),
(122, 'theme_mods_twentytwelve', 'a:2:{i:0;b:0;s:16:"sidebars_widgets";a:2:{s:4:"time";i:1411615664;s:4:"data";a:4:{s:19:"wp_inactive_widgets";a:0:{}s:9:"sidebar-1";a:6:{i:0;s:8:"search-2";i:1;s:14:"recent-posts-2";i:2;s:17:"recent-comments-2";i:3;s:10:"archives-2";i:4;s:12:"categories-2";i:5;s:6:"meta-2";}s:9:"sidebar-2";a:0:{}s:9:"sidebar-3";a:0:{}}}}', 'yes'),
(123, 'theme_switched', '', 'yes'),
(4034, 'category_children', 'a:0:{}', 'yes'),
(1537, '_site_transient_timeout_browser_4e45a09aebcb119b166d6999669b59cf', '1419388237', 'yes'),
(1538, '_site_transient_browser_4e45a09aebcb119b166d6999669b59cf', 'a:9:{s:8:"platform";s:7:"Windows";s:4:"name";s:6:"Chrome";s:7:"version";s:12:"39.0.2171.95";s:10:"update_url";s:28:"http://www.google.com/chrome";s:7:"img_src";s:49:"http://s.wordpress.org/images/browsers/chrome.png";s:11:"img_src_ssl";s:48:"https://wordpress.org/images/browsers/chrome.png";s:15:"current_version";s:2:"18";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(135, '_site_transient_browser_00556b0801fc900830c4816319ef64ed', 'a:9:{s:8:"platform";s:7:"Windows";s:4:"name";s:6:"Chrome";s:7:"version";s:13:"37.0.2062.120";s:10:"update_url";s:28:"http://www.google.com/chrome";s:7:"img_src";s:49:"http://s.wordpress.org/images/browsers/chrome.png";s:11:"img_src_ssl";s:48:"https://wordpress.org/images/browsers/chrome.png";s:15:"current_version";s:2:"18";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(134, '_site_transient_timeout_browser_00556b0801fc900830c4816319ef64ed', '1412140710', 'yes'),
(290, '_site_transient_timeout_wporg_theme_feature_list', '1412507979', 'yes'),
(291, '_site_transient_wporg_theme_feature_list', 'a:4:{s:6:"Colors";a:15:{i:0;s:5:"black";i:1;s:4:"blue";i:2;s:5:"brown";i:3;s:4:"gray";i:4;s:5:"green";i:5;s:6:"orange";i:6;s:4:"pink";i:7;s:6:"purple";i:8;s:3:"red";i:9;s:6:"silver";i:10;s:3:"tan";i:11;s:5:"white";i:12;s:6:"yellow";i:13;s:4:"dark";i:14;s:5:"light";}s:6:"Layout";a:9:{i:0;s:12:"fixed-layout";i:1;s:12:"fluid-layout";i:2;s:17:"responsive-layout";i:3;s:10:"one-column";i:4;s:11:"two-columns";i:5;s:13:"three-columns";i:6;s:12:"four-columns";i:7;s:12:"left-sidebar";i:8;s:13:"right-sidebar";}s:8:"Features";a:20:{i:0;s:19:"accessibility-ready";i:1;s:8:"blavatar";i:2;s:10:"buddypress";i:3;s:17:"custom-background";i:4;s:13:"custom-colors";i:5;s:13:"custom-header";i:6;s:11:"custom-menu";i:7;s:12:"editor-style";i:8;s:21:"featured-image-header";i:9;s:15:"featured-images";i:10;s:15:"flexible-header";i:11;s:20:"front-page-post-form";i:12;s:19:"full-width-template";i:13;s:12:"microformats";i:14;s:12:"post-formats";i:15;s:20:"rtl-language-support";i:16;s:11:"sticky-post";i:17;s:13:"theme-options";i:18;s:17:"threaded-comments";i:19;s:17:"translation-ready";}s:7:"Subject";a:3:{i:0;s:7:"holiday";i:1;s:13:"photoblogging";i:2;s:8:"seasonal";}}', 'yes'),
(321, '_site_transient_timeout_browser_09bf974da0437925889a226ba456ba86', '1413424331', 'yes'),
(322, '_site_transient_browser_09bf974da0437925889a226ba456ba86', 'a:9:{s:8:"platform";s:7:"Windows";s:4:"name";s:6:"Chrome";s:7:"version";s:13:"37.0.2062.124";s:10:"update_url";s:28:"http://www.google.com/chrome";s:7:"img_src";s:49:"http://s.wordpress.org/images/browsers/chrome.png";s:11:"img_src_ssl";s:48:"https://wordpress.org/images/browsers/chrome.png";s:15:"current_version";s:2:"18";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(1742, '_site_transient_timeout_browser_e2dac078614f265d81556be3b4171923', '1420278716', 'yes'),
(1743, '_site_transient_browser_e2dac078614f265d81556be3b4171923', 'a:9:{s:8:"platform";s:9:"Macintosh";s:4:"name";s:6:"Chrome";s:7:"version";s:12:"39.0.2171.95";s:10:"update_url";s:28:"http://www.google.com/chrome";s:7:"img_src";s:49:"http://s.wordpress.org/images/browsers/chrome.png";s:11:"img_src_ssl";s:48:"https://wordpress.org/images/browsers/chrome.png";s:15:"current_version";s:2:"18";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(5216, 'WPLANG', '', 'yes'),
(552, 'widget_mh_affiliate', 'a:2:{i:1;a:0:{}s:12:"_multiwidget";i:1;}', 'yes'),
(553, 'widget_mh_custom_posts', 'a:2:{i:1;a:0:{}s:12:"_multiwidget";i:1;}', 'yes'),
(554, 'widget_mh_facebook', 'a:2:{i:1;a:0:{}s:12:"_multiwidget";i:1;}', 'yes'),
(555, 'widget_mh_slider_hp', 'a:2:{i:1;a:0:{}s:12:"_multiwidget";i:1;}', 'yes'),
(556, 'mh_options', 'a:11:{s:7:"full_bg";s:0:"";s:14:"no_prettyphoto";s:0:"";s:14:"excerpt_length";s:3:"125";s:12:"excerpt_more";s:5:"[...]";s:11:"sb_position";s:5:"right";s:10:"author_box";s:0:"";s:14:"comments_pages";s:0:"";s:8:"post_nav";s:0:"";s:13:"related_posts";s:0:"";s:10:"custom_css";s:0:"";s:13:"tracking_code";s:0:"";}', 'yes'),
(5207, '_transient_feed_mod_867bd5c64f85878d03a060509cd2f92c', '1437102166', 'no'),
(5208, '_transient_timeout_dash_4077549d03da2e451c8b5f002294ff51', '1437145372', 'no'),
(5209, '_transient_dash_4077549d03da2e451c8b5f002294ff51', '<div class="rss-widget"><p><strong>RSS Error</strong>: A feed could not be found at http://wordpress.org/news/feed/. A feed with an invalid mime type may fall victim to this error, or SimplePie was unable to auto-discover it.. Use force_feed() if you are certain this URL is a real feed.</p></div><div class="rss-widget"><ul><li><a class=''rsswidget'' href=''http://wptavern.com/wordpress-4-3-beta-3-adds-site-icon-feature-to-the-customizer''>WPTavern: WordPress 4.3 Beta 3 Adds Site Icon Feature to the Customizer</a></li><li><a class=''rsswidget'' href=''http://wptavern.com/wpweekly-episode-199-preview-of-wordpress-4-3''>WPTavern: WPWeekly Episode 199 – Preview of WordPress 4.3</a></li><li><a class=''rsswidget'' href=''http://wptavern.com/how-to-give-back-to-the-wordpress-foundation-when-shopping-on-amazon''>WPTavern: How to Give Back to the WordPress Foundation when Shopping on Amazon</a></li></ul></div><div class="rss-widget"><ul></ul></div>', 'no'),
(5214, '_site_transient_timeout_available_translations', '1437123556', 'yes'),
(5215, '_site_transient_available_translations', 'a:41:{s:2:"ar";a:8:{s:8:"language";s:2:"ar";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-04 15:44:04";s:12:"english_name";s:6:"Arabic";s:11:"native_name";s:14:"العربية";s:7:"package";s:58:"http://downloads.wordpress.org/translation/core/4.0/ar.zip";s:3:"iso";a:2:{i:1;s:2:"ar";i:2;s:3:"ara";}s:7:"strings";a:1:{s:8:"continue";s:16:"المتابعة";}}s:2:"az";a:8:{s:8:"language";s:2:"az";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-10-01 13:29:39";s:12:"english_name";s:11:"Azerbaijani";s:11:"native_name";s:16:"Azərbaycan dili";s:7:"package";s:58:"http://downloads.wordpress.org/translation/core/4.0/az.zip";s:3:"iso";a:2:{i:1;s:2:"az";i:2;s:3:"aze";}s:7:"strings";a:1:{s:8:"continue";s:5:"Davam";}}s:5:"bg_BG";a:8:{s:8:"language";s:5:"bg_BG";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-10-08 11:17:50";s:12:"english_name";s:9:"Bulgarian";s:11:"native_name";s:18:"Български";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/bg_BG.zip";s:3:"iso";a:2:{i:1;s:2:"bg";i:2;s:3:"bul";}s:7:"strings";a:1:{s:8:"continue";s:22:"Продължение";}}s:5:"bs_BA";a:8:{s:8:"language";s:5:"bs_BA";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-04 15:47:16";s:12:"english_name";s:7:"Bosnian";s:11:"native_name";s:8:"Bosanski";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/bs_BA.zip";s:3:"iso";a:2:{i:1;s:2:"bs";i:2;s:3:"bos";}s:7:"strings";a:1:{s:8:"continue";s:7:"Nastavi";}}s:2:"ca";a:8:{s:8:"language";s:2:"ca";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-10-19 13:59:46";s:12:"english_name";s:7:"Catalan";s:11:"native_name";s:7:"Català";s:7:"package";s:58:"http://downloads.wordpress.org/translation/core/4.0/ca.zip";s:3:"iso";a:2:{i:1;s:2:"ca";i:2;s:3:"cat";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continua";}}s:2:"cy";a:8:{s:8:"language";s:2:"cy";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-04 16:43:49";s:12:"english_name";s:5:"Welsh";s:11:"native_name";s:7:"Cymraeg";s:7:"package";s:58:"http://downloads.wordpress.org/translation/core/4.0/cy.zip";s:3:"iso";a:2:{i:1;s:2:"cy";i:2;s:3:"cym";}s:7:"strings";a:1:{s:8:"continue";s:6:"Parhau";}}s:5:"da_DK";a:8:{s:8:"language";s:5:"da_DK";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-10-22 11:59:16";s:12:"english_name";s:6:"Danish";s:11:"native_name";s:5:"Dansk";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/da_DK.zip";s:3:"iso";a:2:{i:1;s:2:"da";i:2;s:3:"dan";}s:7:"strings";a:1:{s:8:"continue";s:12:"Forts&#230;t";}}s:5:"de_DE";a:8:{s:8:"language";s:5:"de_DE";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-10-26 13:41:46";s:12:"english_name";s:6:"German";s:11:"native_name";s:7:"Deutsch";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/de_DE.zip";s:3:"iso";a:1:{i:1;s:2:"de";}s:7:"strings";a:1:{s:8:"continue";s:10:"Fortfahren";}}s:5:"en_AU";a:8:{s:8:"language";s:5:"en_AU";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-06 00:56:37";s:12:"english_name";s:19:"English (Australia)";s:11:"native_name";s:19:"English (Australia)";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/en_AU.zip";s:3:"iso";a:3:{i:1;s:2:"en";i:2;s:3:"eng";i:3;s:3:"eng";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continue";}}s:5:"en_GB";a:8:{s:8:"language";s:5:"en_GB";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-04 08:52:52";s:12:"english_name";s:12:"English (UK)";s:11:"native_name";s:12:"English (UK)";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/en_GB.zip";s:3:"iso";a:3:{i:1;s:2:"en";i:2;s:3:"eng";i:3;s:3:"eng";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continue";}}s:5:"en_CA";a:8:{s:8:"language";s:5:"en_CA";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-05 00:31:07";s:12:"english_name";s:16:"English (Canada)";s:11:"native_name";s:16:"English (Canada)";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/en_CA.zip";s:3:"iso";a:3:{i:1;s:2:"en";i:2;s:3:"eng";i:3;s:3:"eng";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continue";}}s:5:"es_CL";a:8:{s:8:"language";s:5:"es_CL";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-04 19:47:01";s:12:"english_name";s:15:"Spanish (Chile)";s:11:"native_name";s:17:"Español de Chile";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/es_CL.zip";s:3:"iso";a:2:{i:1;s:2:"es";i:2;s:3:"spa";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"es_PE";a:8:{s:8:"language";s:5:"es_PE";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-04 07:49:30";s:12:"english_name";s:14:"Spanish (Peru)";s:11:"native_name";s:17:"Español de Perú";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/es_PE.zip";s:3:"iso";a:2:{i:1;s:2:"es";i:2;s:3:"spa";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"es_ES";a:8:{s:8:"language";s:5:"es_ES";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-04 17:40:25";s:12:"english_name";s:15:"Spanish (Spain)";s:11:"native_name";s:8:"Español";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/es_ES.zip";s:3:"iso";a:1:{i:1;s:2:"es";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:2:"eu";a:8:{s:8:"language";s:2:"eu";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-05 06:55:23";s:12:"english_name";s:6:"Basque";s:11:"native_name";s:7:"Euskara";s:7:"package";s:58:"http://downloads.wordpress.org/translation/core/4.0/eu.zip";s:3:"iso";a:2:{i:1;s:2:"eu";i:2;s:3:"eus";}s:7:"strings";a:1:{s:8:"continue";s:8:"Jarraitu";}}s:5:"fa_IR";a:8:{s:8:"language";s:5:"fa_IR";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-05 15:58:20";s:12:"english_name";s:7:"Persian";s:11:"native_name";s:10:"فارسی";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/fa_IR.zip";s:3:"iso";a:2:{i:1;s:2:"fa";i:2;s:3:"fas";}s:7:"strings";a:1:{s:8:"continue";s:10:"ادامه";}}s:2:"fi";a:8:{s:8:"language";s:2:"fi";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-10-06 08:32:55";s:12:"english_name";s:7:"Finnish";s:11:"native_name";s:5:"Suomi";s:7:"package";s:58:"http://downloads.wordpress.org/translation/core/4.0/fi.zip";s:3:"iso";a:2:{i:1;s:2:"fi";i:2;s:3:"fin";}s:7:"strings";a:1:{s:8:"continue";s:5:"Jatka";}}s:5:"fr_FR";a:8:{s:8:"language";s:5:"fr_FR";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-10-04 17:49:48";s:12:"english_name";s:15:"French (France)";s:11:"native_name";s:9:"Français";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/fr_FR.zip";s:3:"iso";a:1:{i:1;s:2:"fr";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuer";}}s:2:"gd";a:8:{s:8:"language";s:2:"gd";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-05 17:37:43";s:12:"english_name";s:15:"Scottish Gaelic";s:11:"native_name";s:9:"Gàidhlig";s:7:"package";s:58:"http://downloads.wordpress.org/translation/core/4.0/gd.zip";s:3:"iso";a:3:{i:1;s:2:"gd";i:2;s:3:"gla";i:3;s:3:"gla";}s:7:"strings";a:1:{s:8:"continue";s:15:"Lean air adhart";}}s:5:"gl_ES";a:8:{s:8:"language";s:5:"gl_ES";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-04 01:18:12";s:12:"english_name";s:8:"Galician";s:11:"native_name";s:6:"Galego";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/gl_ES.zip";s:3:"iso";a:2:{i:1;s:2:"gl";i:2;s:3:"glg";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"he_IL";a:8:{s:8:"language";s:5:"he_IL";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-04 22:57:38";s:12:"english_name";s:6:"Hebrew";s:11:"native_name";s:16:"עִבְרִית";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/he_IL.zip";s:3:"iso";a:1:{i:1;s:2:"he";}s:7:"strings";a:1:{s:8:"continue";s:12:"להמשיך";}}s:2:"hr";a:8:{s:8:"language";s:2:"hr";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-20 14:09:34";s:12:"english_name";s:8:"Croatian";s:11:"native_name";s:8:"Hrvatski";s:7:"package";s:58:"http://downloads.wordpress.org/translation/core/4.0/hr.zip";s:3:"iso";a:2:{i:1;s:2:"hr";i:2;s:3:"hrv";}s:7:"strings";a:1:{s:8:"continue";s:7:"Nastavi";}}s:5:"hu_HU";a:8:{s:8:"language";s:5:"hu_HU";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-04 19:12:04";s:12:"english_name";s:9:"Hungarian";s:11:"native_name";s:6:"Magyar";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/hu_HU.zip";s:3:"iso";a:2:{i:1;s:2:"hu";i:2;s:3:"hun";}s:7:"strings";a:1:{s:8:"continue";s:7:"Tovább";}}s:5:"id_ID";a:8:{s:8:"language";s:5:"id_ID";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-04 11:26:19";s:12:"english_name";s:10:"Indonesian";s:11:"native_name";s:16:"Bahasa Indonesia";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/id_ID.zip";s:3:"iso";a:2:{i:1;s:2:"id";i:2;s:3:"ind";}s:7:"strings";a:1:{s:8:"continue";s:9:"Lanjutkan";}}s:5:"it_IT";a:8:{s:8:"language";s:5:"it_IT";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-10-02 08:24:03";s:12:"english_name";s:7:"Italian";s:11:"native_name";s:8:"Italiano";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/it_IT.zip";s:3:"iso";a:2:{i:1;s:2:"it";i:2;s:3:"ita";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continua";}}s:2:"ja";a:8:{s:8:"language";s:2:"ja";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-10-21 06:30:27";s:12:"english_name";s:8:"Japanese";s:11:"native_name";s:9:"日本語";s:7:"package";s:58:"http://downloads.wordpress.org/translation/core/4.0/ja.zip";s:3:"iso";a:1:{i:1;s:2:"ja";}s:7:"strings";a:1:{s:8:"continue";s:9:"続ける";}}s:5:"ko_KR";a:8:{s:8:"language";s:5:"ko_KR";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-04 07:54:33";s:12:"english_name";s:6:"Korean";s:11:"native_name";s:9:"한국어";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/ko_KR.zip";s:3:"iso";a:2:{i:1;s:2:"ko";i:2;s:3:"kor";}s:7:"strings";a:1:{s:8:"continue";s:6:"계속";}}s:5:"my_MM";a:8:{s:8:"language";s:5:"my_MM";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-06 08:41:35";s:12:"english_name";s:17:"Myanmar (Burmese)";s:11:"native_name";s:15:"ဗမာစာ";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/my_MM.zip";s:3:"iso";a:2:{i:1;s:2:"my";i:2;s:3:"mya";}s:7:"strings";a:1:{s:8:"continue";s:54:"ဆက်လက်လုပ်ေဆာင်ပါ။";}}s:5:"nb_NO";a:8:{s:8:"language";s:5:"nb_NO";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-04 20:51:26";s:12:"english_name";s:19:"Norwegian (Bokmål)";s:11:"native_name";s:13:"Norsk bokmål";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/nb_NO.zip";s:3:"iso";a:2:{i:1;s:2:"nb";i:2;s:3:"nob";}s:7:"strings";a:1:{s:8:"continue";s:8:"Fortsett";}}s:5:"nl_NL";a:8:{s:8:"language";s:5:"nl_NL";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-17 06:23:19";s:12:"english_name";s:5:"Dutch";s:11:"native_name";s:10:"Nederlands";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/nl_NL.zip";s:3:"iso";a:2:{i:1;s:2:"nl";i:2;s:3:"nld";}s:7:"strings";a:1:{s:8:"continue";s:8:"Doorgaan";}}s:5:"pl_PL";a:8:{s:8:"language";s:5:"pl_PL";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-10-03 17:44:34";s:12:"english_name";s:6:"Polish";s:11:"native_name";s:6:"Polski";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/pl_PL.zip";s:3:"iso";a:2:{i:1;s:2:"pl";i:2;s:3:"pol";}s:7:"strings";a:1:{s:8:"continue";s:9:"Kontynuuj";}}s:5:"pt_PT";a:8:{s:8:"language";s:5:"pt_PT";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-29 15:27:01";s:12:"english_name";s:21:"Portuguese (Portugal)";s:11:"native_name";s:10:"Português";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/pt_PT.zip";s:3:"iso";a:1:{i:1;s:2:"pt";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"pt_BR";a:8:{s:8:"language";s:5:"pt_BR";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-10-30 13:29:44";s:12:"english_name";s:19:"Portuguese (Brazil)";s:11:"native_name";s:20:"Português do Brasil";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/pt_BR.zip";s:3:"iso";a:2:{i:1;s:2:"pt";i:2;s:3:"por";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"ru_RU";a:8:{s:8:"language";s:5:"ru_RU";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-10-21 12:32:07";s:12:"english_name";s:7:"Russian";s:11:"native_name";s:14:"Русский";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/ru_RU.zip";s:3:"iso";a:2:{i:1;s:2:"ru";i:2;s:3:"rus";}s:7:"strings";a:1:{s:8:"continue";s:20:"Продолжить";}}s:5:"sk_SK";a:8:{s:8:"language";s:5:"sk_SK";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-20 13:05:09";s:12:"english_name";s:6:"Slovak";s:11:"native_name";s:11:"Slovenčina";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/sk_SK.zip";s:3:"iso";a:2:{i:1;s:2:"sk";i:2;s:3:"slk";}s:7:"strings";a:1:{s:8:"continue";s:12:"Pokračovať";}}s:5:"sr_RS";a:8:{s:8:"language";s:5:"sr_RS";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-04 15:37:38";s:12:"english_name";s:7:"Serbian";s:11:"native_name";s:23:"Српски језик";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/sr_RS.zip";s:3:"iso";a:2:{i:1;s:2:"sr";i:2;s:3:"srp";}s:7:"strings";a:1:{s:8:"continue";s:14:"Настави";}}s:5:"sv_SE";a:8:{s:8:"language";s:5:"sv_SE";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-10-11 20:39:56";s:12:"english_name";s:7:"Swedish";s:11:"native_name";s:7:"Svenska";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/sv_SE.zip";s:3:"iso";a:2:{i:1;s:2:"sv";i:2;s:3:"swe";}s:7:"strings";a:1:{s:8:"continue";s:9:"Fortsätt";}}s:2:"th";a:8:{s:8:"language";s:2:"th";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-10-09 03:43:17";s:12:"english_name";s:4:"Thai";s:11:"native_name";s:9:"ไทย";s:7:"package";s:58:"http://downloads.wordpress.org/translation/core/4.0/th.zip";s:3:"iso";a:2:{i:1;s:2:"th";i:2;s:3:"tha";}s:7:"strings";a:1:{s:8:"continue";s:15:"ต่อไป";}}s:5:"tr_TR";a:8:{s:8:"language";s:5:"tr_TR";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-05 17:57:59";s:12:"english_name";s:7:"Turkish";s:11:"native_name";s:8:"Türkçe";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/tr_TR.zip";s:3:"iso";a:2:{i:1;s:2:"tr";i:2;s:3:"tur";}s:7:"strings";a:1:{s:8:"continue";s:5:"Devam";}}s:5:"zh_CN";a:8:{s:8:"language";s:5:"zh_CN";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-05 00:41:46";s:12:"english_name";s:15:"Chinese (China)";s:11:"native_name";s:12:"简体中文";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/zh_CN.zip";s:3:"iso";a:2:{i:1;s:2:"zh";i:2;s:3:"zho";}s:7:"strings";a:1:{s:8:"continue";s:6:"继续";}}s:5:"zh_TW";a:8:{s:8:"language";s:5:"zh_TW";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-05 06:58:31";s:12:"english_name";s:16:"Chinese (Taiwan)";s:11:"native_name";s:12:"繁體中文";s:7:"package";s:61:"http://downloads.wordpress.org/translation/core/4.0/zh_TW.zip";s:3:"iso";a:2:{i:1;s:2:"zh";i:2;s:3:"zho";}s:7:"strings";a:1:{s:8:"continue";s:6:"繼續";}}}', 'yes'),
(2233, '_site_transient_timeout_browser_7926b9a496d31d06aab13b60974cb5e0', '1422497764', 'yes'),
(2234, '_site_transient_browser_7926b9a496d31d06aab13b60974cb5e0', 'a:9:{s:8:"platform";s:9:"Macintosh";s:4:"name";s:6:"Chrome";s:7:"version";s:13:"38.0.2125.122";s:10:"update_url";s:28:"http://www.google.com/chrome";s:7:"img_src";s:49:"http://s.wordpress.org/images/browsers/chrome.png";s:11:"img_src_ssl";s:48:"https://wordpress.org/images/browsers/chrome.png";s:15:"current_version";s:2:"18";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes');

-- --------------------------------------------------------

--
-- 表的结构 `wp_postmeta`
--

CREATE TABLE IF NOT EXISTS `wp_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1054 ;

--
-- 转存表中的数据 `wp_postmeta`
--

INSERT INTO `wp_postmeta` (`meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(1, 2, '_wp_page_template', 'default'),
(2, 4, '_edit_last', '1'),
(3, 4, '_edit_lock', '1411615838:1'),
(7, 8, '_edit_lock', '1415003096:1'),
(6, 8, '_edit_last', '1'),
(11, 10, '_edit_lock', '1422935782:1'),
(10, 10, '_edit_last', '1'),
(17, 14, '_edit_lock', '1413002151:1'),
(16, 14, '_edit_last', '1'),
(20, 2, '_edit_lock', '1411969030:1'),
(132, 74, '_edit_lock', '1415697253:1'),
(131, 74, '_edit_last', '1'),
(26, 19, '_edit_lock', '1412059731:1'),
(25, 19, '_edit_last', '1'),
(30, 22, '_edit_lock', '1413883587:1'),
(29, 22, '_edit_last', '1'),
(34, 24, '_edit_lock', '1412616381:1'),
(33, 24, '_edit_last', '1'),
(39, 26, '_edit_lock', '1412821902:1'),
(38, 26, '_edit_last', '1'),
(44, 28, '_edit_lock', '1412941385:1'),
(43, 28, '_edit_last', '1'),
(48, 28, '_oembed_c3346fde342ba16b5118e1aab73559e3', '{{unknown}}'),
(49, 28, '_oembed_49128c240f3149874abdd43b620d500d', '{{unknown}}'),
(50, 32, '_edit_last', '1'),
(51, 32, '_edit_lock', '1413002186:1'),
(137, 76, '_edit_lock', '1416384778:1'),
(136, 76, '_edit_last', '1'),
(57, 37, '_edit_last', '1'),
(58, 37, '_edit_lock', '1413131930:1'),
(63, 39, '_edit_lock', '1413343959:1'),
(62, 39, '_edit_last', '1'),
(68, 41, '_edit_lock', '1413373439:1'),
(67, 41, '_edit_last', '1'),
(69, 41, '_wp_page_template', 'default'),
(74, 50, '_edit_lock', '1413883494:1'),
(73, 50, '_edit_last', '1'),
(79, 52, '_edit_lock', '1413906546:1'),
(78, 52, '_edit_last', '1'),
(87, 55, '_edit_last', '1'),
(86, 55, '_oembed_07978f2cf69b83a3116ef3659bca4aef', '{{unknown}}'),
(93, 57, '_edit_lock', '1414153510:1'),
(92, 57, '_edit_last', '1'),
(91, 55, '_edit_lock', '1413952168:1'),
(98, 60, '_edit_lock', '1414655478:1'),
(97, 60, '_edit_last', '1'),
(103, 62, '_edit_lock', '1414750261:1'),
(102, 62, '_edit_last', '1'),
(108, 64, '_edit_lock', '1415007747:1'),
(107, 64, '_edit_last', '1'),
(116, 67, '_edit_lock', '1415025767:1'),
(121, 69, '_edit_lock', '1415071971:1'),
(115, 67, '_edit_last', '1'),
(120, 69, '_edit_last', '1'),
(126, 71, '_edit_lock', '1415091655:1'),
(125, 71, '_edit_last', '1'),
(127, 71, '_oembed_9b507cf71eb8f0a2d141e22095b3bec6', '{{unknown}}'),
(139, 80, '_edit_lock', '1416387693:1'),
(138, 80, '_edit_last', '1'),
(140, 81, '_edit_last', '1'),
(141, 81, '_edit_lock', '1416892705:1'),
(149, 85, '_edit_lock', '1416804336:1'),
(150, 85, '_oembed_8c713ec7113f88ee3dc9c62ac4c5a43e', '{{unknown}}'),
(148, 85, '_edit_last', '1'),
(151, 85, '_oembed_a9eaae8233d49604a7825c4584f1e686', '{{unknown}}'),
(155, 81, '_oembed_b0f16f193f3bbf6a663b9b559382bf36', '{{unknown}}'),
(156, 81, '_oembed_10c353a0730cab80504cf45461bdfd29', '{{unknown}}'),
(161, 90, '_edit_lock', '1417109714:1'),
(160, 90, '_edit_last', '1'),
(169, 93, '_edit_lock', '1418206464:1'),
(174, 96, '_edit_lock', '1418783751:1'),
(168, 93, '_edit_last', '1'),
(173, 96, '_edit_last', '1'),
(182, 101, '_edit_lock', '1418827066:1'),
(189, 105, '_edit_last', '1'),
(181, 101, '_edit_last', '1'),
(190, 105, '_edit_lock', '1418874590:1'),
(191, 106, '_edit_last', '1'),
(192, 106, '_edit_lock', '1418884131:1'),
(197, 110, '_edit_lock', '1419012428:1'),
(196, 110, '_edit_last', '1'),
(207, 115, '_edit_last', '1'),
(208, 115, '_edit_lock', '1419230951:1'),
(213, 119, '_edit_lock', '1421205950:1'),
(212, 119, '_edit_last', '1'),
(214, 119, '_oembed_44db9cafd851c304335571d4c3cc1205', '{{unknown}}'),
(215, 119, '_oembed_5fb5c14384f75ce4bbf5f2fd03b2bf99', '{{unknown}}'),
(216, 119, '_oembed_9fbc5a0b8d8be172b725854a8339016c', '{{unknown}}'),
(217, 119, '_oembed_4f6f3cf4e860285ff389691ea84d97a5', '{{unknown}}'),
(222, 121, '_edit_lock', '1419856375:1'),
(221, 121, '_edit_last', '1'),
(232, 123, '_edit_last', '1'),
(244, 127, '_edit_lock', '1420029030:1'),
(243, 127, '_edit_last', '1'),
(236, 123, '_edit_lock', '1419907037:1'),
(246, 130, '_edit_last', '1'),
(247, 130, '_edit_lock', '1420359994:1'),
(252, 132, '_edit_lock', '1420516434:1'),
(251, 132, '_edit_last', '1'),
(278, 142, '_edit_last', '1'),
(271, 10, '_oembed_77f37519b1ad7e944cd32b2384d4dcef', '{{unknown}}'),
(279, 142, '_edit_lock', '1421229454:1'),
(289, 146, '_edit_last', '1'),
(290, 146, '_edit_lock', '1426863368:1'),
(369, 175, '_edit_last', '1'),
(370, 175, '_edit_lock', '1429090125:1'),
(362, 173, '_edit_lock', '1425526362:1'),
(361, 173, '_edit_last', '1'),
(335, 161, '_edit_lock', '1422206165:1'),
(334, 161, '_edit_last', '1'),
(343, 164, '_edit_lock', '1422849507:1'),
(359, 170, '_edit_lock', '1423744193:1'),
(342, 164, '_edit_last', '1'),
(353, 168, '_edit_last', '1'),
(354, 168, '_edit_lock', '1423625303:1'),
(358, 170, '_edit_last', '1'),
(379, 177, '_edit_last', '1'),
(380, 177, '_edit_lock', '1425266853:1'),
(462, 207, '_edit_lock', '1426477438:1'),
(396, 186, '_edit_last', '1'),
(397, 186, '_edit_lock', '1425636237:1'),
(411, 189, '_edit_lock', '1426091657:1'),
(410, 189, '_edit_last', '1'),
(425, 195, '_edit_lock', '1427106037:1'),
(424, 195, '_edit_last', '1'),
(457, 205, '_edit_lock', '1429089720:1'),
(456, 205, '_edit_last', '1'),
(461, 207, '_edit_last', '1'),
(486, 216, '_edit_last', '1'),
(479, 213, '_edit_lock', '1426786131:1'),
(478, 213, '_edit_last', '1'),
(487, 216, '_edit_lock', '1432522598:1'),
(542, 235, '_edit_last', '1'),
(513, 225, '_edit_lock', '1427354592:1'),
(512, 225, '_edit_last', '1'),
(523, 228, '_edit_last', '1'),
(524, 228, '_edit_lock', '1427894681:1'),
(534, 231, '_edit_last', '1'),
(535, 231, '_edit_lock', '1428973946:1'),
(543, 235, '_edit_lock', '1428995871:1'),
(562, 243, '_edit_lock', '1430291196:1'),
(557, 240, '_edit_lock', '1429187502:1'),
(556, 240, '_edit_last', '1'),
(561, 243, '_edit_last', '1'),
(563, 243, '_oembed_64ed103a071257f997a3891d30da3bff', '{{unknown}}'),
(568, 245, '_edit_lock', '1430817747:1'),
(567, 245, '_edit_last', '1'),
(768, 312, '_oembed_1b252b4fe6665390a807a644a32556c1', '{{unknown}}'),
(764, 312, '_edit_lock', '1434511281:1'),
(763, 312, '_edit_last', '1'),
(582, 251, '_edit_last', '1'),
(583, 251, '_edit_lock', '1432259487:1'),
(584, 251, '_wp_page_template', 'default'),
(585, 253, '_edit_last', '1'),
(634, 266, '_edit_last', '1'),
(589, 253, '_edit_lock', '1432884129:1'),
(629, 264, '_edit_last', '1'),
(630, 264, '_edit_lock', '1436853243:1'),
(635, 266, '_edit_lock', '1436853138:1'),
(722, 296, '_edit_lock', '1432990655:1'),
(648, 272, '_edit_last', '1'),
(649, 272, '_edit_lock', '1432781723:1'),
(721, 296, '_edit_last', '1'),
(704, 288, '_edit_last', '1'),
(705, 288, '_edit_lock', '1432889388:1'),
(730, 298, '_edit_lock', '1436853116:1'),
(777, 318, '_edit_last', '1'),
(729, 298, '_edit_last', '1'),
(744, 303, '_edit_lock', '1436864605:1'),
(743, 303, '_edit_last', '1'),
(770, 315, '_edit_lock', '1435040720:1'),
(769, 315, '_edit_last', '1'),
(778, 318, '_edit_lock', '1435235282:1'),
(783, 320, '_edit_lock', '1435800895:1'),
(782, 320, '_edit_last', '1'),
(784, 320, '_oembed_cfd30367a41cbde9605133a5a4747b38', '{{unknown}}'),
(850, 335, '_syntaxhighlighter_encoded', '1'),
(827, 335, '_edit_last', '1'),
(828, 335, '_edit_lock', '1435825174:1'),
(885, 354, '_edit_lock', '1435907894:1'),
(884, 354, '_edit_last', '1'),
(886, 354, '_syntaxhighlighter_encoded', '1'),
(905, 363, '_edit_lock', '1437113035:1'),
(899, 361, '_edit_last', '1'),
(900, 361, '_edit_lock', '1437113096:1'),
(904, 363, '_edit_last', '1'),
(944, 363, '_oembed_0ec982dbacd7bf3d7f7fb774ba047b21', '{{unknown}}'),
(909, 363, '_syntaxhighlighter_encoded', '1'),
(943, 363, '_oembed_122d7c3b62810008ce2275a65972d11d', '{{unknown}}'),
(945, 363, '_oembed_779409b8d902162ff3a17c7cc1b81639', '{{unknown}}'),
(1020, 389, '_syntaxhighlighter_encoded', '1'),
(1018, 389, '_edit_last', '1'),
(1019, 389, '_edit_lock', '1437112930:1'),
(1030, 394, '_edit_last', '1'),
(1031, 394, '_edit_lock', '1437113019:1'),
(1047, 394, '_syntaxhighlighter_encoded', '1');

-- --------------------------------------------------------

--
-- 表的结构 `wp_posts`
--

CREATE TABLE IF NOT EXISTS `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext NOT NULL,
  `post_title` text NOT NULL,
  `post_excerpt` text NOT NULL,
  `post_status` varchar(20) NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) NOT NULL DEFAULT 'open',
  `post_password` varchar(20) NOT NULL DEFAULT '',
  `post_name` varchar(200) NOT NULL DEFAULT '',
  `to_ping` text NOT NULL,
  `pinged` text NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=401 ;

--
-- 转存表中的数据 `wp_posts`
--

INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1, 1, '2014-09-23 16:07:29', '2014-09-23 16:07:29', 'Welcome to WordPress. This is your first post. Edit or delete it, then start blogging!', 'Hello world!', '', 'publish', 'open', 'open', '', 'hello-world', '', '', '2014-09-23 16:07:29', '2014-09-23 16:07:29', '', 0, 'http://unasm.sinaapp.com/?p=1', 0, 'post', '', 0),
(2, 1, '2014-09-23 16:07:29', '2014-09-23 16:07:29', 'This is an example page. It''s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:\n\n<blockquote>Hi there! I''m a bike messenger by day, aspiring actor by night, and this is my blog. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin'' caught in the rain.)</blockquote>\n\n...or something like this:\n\n<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>\n\nAs a new WordPress user, you should go to <a href="http://unasm.sinaapp.com/wp-admin/">your dashboard</a> to delete this page and create new pages for your content. Have fun!', 'Sample Page', '', 'publish', 'open', 'open', '', 'sample-page', '', '', '2014-09-23 16:07:29', '2014-09-23 16:07:29', '', 0, 'http://unasm.sinaapp.com/?page_id=2', 0, 'page', '', 0),
(4, 1, '2014-09-23 16:34:07', '2014-09-23 16:34:07', '    一直以为redis可以完全取代mc,mc的hash完全可以由redis的hash取代，同时redis提供了list，string，set，zset这几种相当不错的数据结构，完全没有使用mc的必要，但是今天写了几个测试脚本之后，感觉mc的hash和redis的hash还是有很大不同的，\r\n    首先第一点，就是mc的hash value可以是数组，一个key对应的是一整个数组，而这一点，redis尚且做不到。不过mc这样有一个缺陷，就是如果脱离php，而使用python类似的其他的语言，会面临兼容性的问题，毕竟php本身的数组不是正规意义上的数组。\r\n    其次就是redis的骄傲，落地这一点，这是一个非常好的理念，但是具体实现的时候，却通过快照的方式来实现具体数据的备份，这点在数据很大的时候，就会面临一次快照时间太久，以至于影响了性能的问题，如果这样的话，落地的功能就是鸡肋了', 'redis缓存和memcache的简单对比', '', 'publish', 'open', 'open', '', 'redis%e7%bc%93%e5%ad%98%e5%92%8cmemcache%e7%9a%84%e7%ae%80%e5%8d%95%e5%af%b9%e6%af%94', '', '', '2014-09-23 16:34:07', '2014-09-23 16:34:07', '', 0, 'http://unasm.sinaapp.com/?p=4', 0, 'post', '', 0),
(5, 1, '2014-09-23 16:22:14', '2014-09-23 16:22:14', '<p style="text-align: left;">sdfsdfad 分sdfasdf</p>\r\n粉丝地方dfadf', 'redis缓存和memcache的简单对比', '', 'inherit', 'open', 'open', '', '4-revision-v1', '', '', '2014-09-23 16:22:14', '2014-09-23 16:22:14', '', 4, 'http://unasm.sinaapp.com/?p=5', 0, 'revision', '', 0),
(6, 1, '2014-09-23 16:34:07', '2014-09-23 16:34:07', '    一直以为redis可以完全取代mc,mc的hash完全可以由redis的hash取代，同时redis提供了list，string，set，zset这几种相当不错的数据结构，完全没有使用mc的必要，但是今天写了几个测试脚本之后，感觉mc的hash和redis的hash还是有很大不同的，\r\n    首先第一点，就是mc的hash value可以是数组，一个key对应的是一整个数组，而这一点，redis尚且做不到。不过mc这样有一个缺陷，就是如果脱离php，而使用python类似的其他的语言，会面临兼容性的问题，毕竟php本身的数组不是正规意义上的数组。\r\n    其次就是redis的骄傲，落地这一点，这是一个非常好的理念，但是具体实现的时候，却通过快照的方式来实现具体数据的备份，这点在数据很大的时候，就会面临一次快照时间太久，以至于影响了性能的问题，如果这样的话，落地的功能就是鸡肋了', 'redis缓存和memcache的简单对比', '', 'inherit', 'open', 'open', '', '4-revision-v1', '', '', '2014-09-23 16:34:07', '2014-09-23 16:34:07', '', 4, 'http://unasm.sinaapp.com/?p=6', 0, 'revision', '', 0),
(7, 1, '2014-09-23 16:36:09', '2014-09-23 16:36:09', '一直以为redis可以完全取代mc,mc的hash完全可以由redis的hash取代，同时redis提供了list，string，set，zset这几种相当不错的数据结构，完全没有使用mc的必要，但是今天写了几个测试脚本之后，感觉mc的hash和redis的hash还是有很大不同的，\n首先第一点，就是mc的hash value可以是数组，一个key对应的是一整个数组，而这一点，redis尚且做不到。不过mc这样有一个缺陷，就是如果脱离php，而使用python类似的其他的语言，会面临兼容性的问题，毕竟php本身的数组不是正规意义上的数组。\n其次就是redis的骄傲，落地这一点，这是一个非常好的理念，但是具体实现的时候，却通过快照的方式来实现具体数据的备份，这点在数据很大的时候，就会面临一次快照时间太久，以至于影响了性能的问题，如果这样的话，落地的功能就是鸡肋了', 'redis缓存和memcache的简单对比', '', 'inherit', 'open', 'open', '', '4-autosave-v1', '', '', '2014-09-23 16:36:09', '2014-09-23 16:36:09', '', 4, 'http://unasm.sinaapp.com/?p=7', 0, 'revision', '', 0),
(8, 1, '2014-09-25 03:24:11', '2014-09-25 03:24:11', '<code>\r\n$redis-&gt;set($key , "1");\r\n$redis-&gt;get(key);\r\n$redis-&gt;set($i , "hello,world");\r\n$redis-&gt;set($i + 1, "hello,world");\r\n$redis-&gt;set($i + 2, "hello,world");\r\n$redis-&gt;set($i + 3, "hello,world");\r\n</code>\r\n\r\n<code>\r\n$redis-&gt;-&gt;multi()-&gt;set($key , "1")\r\n-&gt;get($key)\r\n-&gt;set($i , "hello,world")\r\n-&gt;set($i + 1, "hello,world")\r\n-&gt;set($i + 2, "hello,world")\r\n-&gt;set($i + 3, "hello,world")\r\n-&gt;exec();\r\n</code>\r\n上面两种测试用例是可以达到相同目的的，都可以通过redis进行一些set，get操作，但是内部实现不同，第二种通过pipeline信道的方式传递信息，减少了命令连接传输的消耗，所以相对的效率高一些，具体效率高出来多少，测试一下。\r\n\r\n重复执行100的结果是 第一种548ms，第二种是419ms，大约高出20%的样子。\r\n\r\n重复执行10000的结果是 第一种54743ms，第二种是41221ms，依旧大约高出20%的样子。\r\n\r\n从上述的测试可以看到多个连续的redis请求的时候，可以通过multi_exec的方式来提高效率，每个命令的返回值会以数组的形式返回，每个命令在multi_exec结构中第几个位置，数组对应的下标就是几。', 'redis的multi_exec结构与独立事件之间的效率对比', '', 'publish', 'open', 'open', '', 'redis%e7%9a%84multi_exec%e7%bb%93%e6%9e%84%e4%b8%8e%e7%8b%ac%e7%ab%8b%e4%ba%8b%e4%bb%b6%e4%b9%8b%e9%97%b4%e7%9a%84%e6%95%88%e7%8e%87%e5%af%b9%e6%af%94', '', '', '2014-09-25 03:24:11', '2014-09-25 03:24:11', '', 0, 'http://unasm.sinaapp.com/?p=8', 0, 'post', '', 0),
(9, 1, '2014-09-25 03:24:11', '2014-09-25 03:24:11', '<code>\r\n$redis-&gt;set($key , "1");\r\n$redis-&gt;get(key);\r\n$redis-&gt;set($i , "hello,world");\r\n$redis-&gt;set($i + 1, "hello,world");\r\n$redis-&gt;set($i + 2, "hello,world");\r\n$redis-&gt;set($i + 3, "hello,world");\r\n</code>\r\n\r\n<code>\r\n$redis-&gt;-&gt;multi()-&gt;set($key , "1")\r\n-&gt;get($key)\r\n-&gt;set($i , "hello,world")\r\n-&gt;set($i + 1, "hello,world")\r\n-&gt;set($i + 2, "hello,world")\r\n-&gt;set($i + 3, "hello,world")\r\n-&gt;exec();\r\n</code>\r\n上面两种测试用例是可以达到相同目的的，都可以通过redis进行一些set，get操作，但是内部实现不同，第二种通过pipeline信道的方式传递信息，减少了命令连接传输的消耗，所以相对的效率高一些，具体效率高出来多少，测试一下。\r\n\r\n重复执行100的结果是 第一种548ms，第二种是419ms，大约高出20%的样子。\r\n\r\n重复执行10000的结果是 第一种54743ms，第二种是41221ms，依旧大约高出20%的样子。\r\n\r\n从上述的测试可以看到多个连续的redis请求的时候，可以通过multi_exec的方式来提高效率，每个命令的返回值会以数组的形式返回，每个命令在multi_exec结构中第几个位置，数组对应的下标就是几。', 'redis的multi_exec结构与独立事件之间的效率对比', '', 'inherit', 'open', 'open', '', '8-revision-v1', '', '', '2014-09-25 03:24:11', '2014-09-25 03:24:11', '', 8, 'http://unasm.sinaapp.com/?p=9', 0, 'revision', '', 0),
(10, 1, '2014-09-25 17:36:34', '2014-09-25 17:36:34', '这个是为活动系统设计的一套动态分表的策略，活动数据的特点是每个活动之间的数据彼此独立，单个活动的的数据不算很大，几乎没有活动数据可以占据单独的一个表，\r\n\r\n首先在缓存中建立一个列表，标记还可以插入数据的表的集合，而在集合之外的其他的表已经是历史数据，至少不会有新的活动是数据插入，具体实现方式如下：\r\n\r\n<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/%E6%A1%B6%E6%B1%A0%E7%9A%84%E8%AE%BE%E8%AE%A1.jpg" alt="" width="556" height="627" />\r\n\r\n最上面的是一个一个的表，真正插入数据的地方\r\n\r\nActor 指活动，首先从列表中得到所有桶的信息，所谓桶，就是还可以插入数据的表，\r\n\r\n桶信息包括两种：表的名字，和已经插入该表的活动列表。根据这些可以获得当前每个表的数据量，以及为正在添加的活动预留的空间。\r\n\r\n因为获取的数据量是根据确实添加了的数据，之前为其他的已经结束的活动多预留的空间在这里可以重复利用。\r\n\r\n剩余的空间不足以容纳一个新的活动的时候，就放弃这个表，\r\n\r\n同时每个表的活动数量也可以一定程度的反应写压力，虽然不是很精确，但是两者存在一定的关联，如果严格的区分写压力，可以根据joyList中过去一定时间内插入的数据量来比较精确的反应写压力，然后将插入数据量放到桶信息里面，作为判断的依据，从而达到每个表的读写压力不至于过大的目的。从所有的桶中选择最优的，作为新的活动的存储地址。\r\n\r\n这样有几个好处：\r\n\r\n第一：保证了每个活动一个表的基本原则。\r\n\r\n第二：在不出现很奇葩的情况时候，保证了每个表的数据量都在一个设置的常量上下，比如200w，不会因为每个活动数据太少造成空间浪费。\r\n\r\n第三：动态创建表，可以保证数据的长期运行\r\n\r\n第四：为真正分担读写压力预留了扩展空间。\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n<code>\r\nclass DataModel  \r\n{\r\n    //存储桶池状态的set key\r\n    const KEY = ''jiaminJoyTest'';\r\n    //每个桶里面放的最多的活动数，考虑写压力,-1 表示不理会\r\n    const MAXEACHBUCKET = 3;\r\n    //每个活动预估的数字,20w\r\n    const EACHJOYNUM = 200000;\r\n    //每个表里面存储数据最多的基准值,200w\r\n    const MAXTABNUM = 2000000;\r\n\r\n    /**\r\n     *  添加新的桶，或者把活动添加到一个指定桶里面\r\n     *\r\n     *  之所以把修改和添加放在一起，是为了方便维护bucket里面的结构一直\r\n     *  只能有select 触发\r\n     *  @param  array   $bucket \r\n     **/\r\n    protected static function  addBucket($jid , $state = array())\r\n    {\r\n        $redis = new myRedis();\r\n        if(empty($state)){\r\n           //这里加入日志，提示创建了表 \r\n            $state = array(\r\n                ''name'' => UdataModel::createTab() ,\r\n                ''joyNum'' => 1,\r\n                ''joyList'' => array($jid)\r\n            );\r\n        } else {\r\n            if($redis->sRem(self::KEY , json_encode($state))){\r\n                $state[''joyNum''] += 1;\r\n                array_push($state[''joyList''] , $jid);\r\n            } else {\r\n                Common::debug(''删除桶池失败'');\r\n                Message::showError(''删除更新桶失败'');\r\n            }\r\n\r\n        }\r\n        if($redis->sAdd(self::KEY , json_encode($state))){\r\n            return $state[''name''];\r\n        }\r\n        //这里报警,添加失败，丢失了桶\r\n        Common::debug(''添加桶信息进入set 失败'');\r\n        return false;\r\n    }\r\n    \r\n\r\n    /**\r\n     * 从桶池中选择当前可以插入的表\r\n     * 就是从目前的bucket 中找一个最优的，\r\n     * 然后插入，如果都不满足条件，创建一个新的，如果超出了最大的桶池数就报警，\r\n     * 同时，创建成功\r\n     *\r\n     **/\r\n    public static function select($jid)\r\n    {\r\n        //查找所有符合条件的，然后得到一个负载最小的\r\n        $redis = new myRedis();\r\n        $data = $redis->sMembers(self::KEY);\r\n        $target = array();\r\n        if(count($data) === 0){\r\n            self::testAdd();\r\n        }\r\n        foreach($data as $bucket){\r\n            Common::Debug(''bucket : '' . $bucket);\r\n            $state = json_decode($bucket , true) ;\r\n            // 桶里面已经存储的总量\r\n            $storedInTab = UdataModel::getNumByName($state[''name'']); \r\n            if($storedInTab === 0){\r\n                BaseModelCommon::debug("no data in ". $state[''name'']);\r\n            }\r\n\r\n            if($state[''joyNum''] !== count( $state[''joyList'']) ){\r\n                //发送报警邮件，严重错误\r\n            }\r\n            //目前在桶里面的活动已经填充了的数据\r\n            $activeData = UdataModel::getDataNum($state[''name''], $state[''joyList'']);\r\n            BaseModelCommon::Debug(''activeData : '' . $activeData) ;\r\n            //需要为桶里面的活动预留的空间,\r\n            //预估的每个活动的记录数 * 活动的数目 - 已经存储了的数据 = 接来下还要占据的记录数\r\n            $activeNeedSpace = self::EACHJOYNUM * $state[''joyNum''] - $activeData;\r\n            BaseModelCommon::Debug(''activeNeedSpace : '' . $activeNeedSpace) ;\r\n            //发送报警邮件，告知管理员,同时这个桶池不再添加活动,避免进一步增加上限\r\n            if($activeNeedSpace < 0){\r\n                continue;\r\n            }\r\n            // 剩余的空间为每个表的最大数据数 - (已经存储的数据 + 还将要存储的数据数）\r\n            $leave = self::MAXTABNUM - ($storedInTab + $activeNeedSpace);\r\n\r\n            BaseModelCommon::Debug(''leave : '' . $leave) ;\r\n            // 如果剩下的空间还有就插入，进入备用列表,200w已经很保守了，没有必要降到200w以下\r\n            if($leave > 0){\r\n                if(empty($target)){\r\n                    $target = $state;\r\n                } else {\r\n                    //就根据插入的活动数量来判断负载, 不是最科学的，但是也是有相当道理\r\n                    if($target[''joyNum''] > $state[''joyNum'']){\r\n                        $target = $state;\r\n                    }\r\n                }\r\n            }\r\n            Common::Debug(''target : '' . json_encode($target));\r\n        }\r\n        //return self::addBucket($jid , $target);\r\n    }\r\n\r\n    /**\r\n     *  测试添加addBucket\r\n     *  @return     array ()    添加的桶的信息，名字等等\r\n     **/\r\n    public static function testAdd()\r\n    {\r\n        $states = array(\r\n            //name : 表名\r\n            //joyNum : 已经插入的活动数目\r\n            //joyList : 该表里面 正在插入的joy id列表\r\n            array(''name'' => ''udata_1'', ''joyNum'' => 3, ''joyList'' => array( 3,2,4 )),\r\n            array(''name'' => ''udata_2'', ''joyNum'' => 0, ''joyList'' => array()),\r\n            array(''name'' => ''udata_3'', ''joyNum'' => 1, ''joyList'' => array(7)),\r\n        );\r\n        $redis = new myRedis;\r\n        if($redis->sCard(self::KEY) === 0){\r\n            //灌数据\r\n            foreach($states as $state){\r\n                $redis->sAdd(self::KEY , json_encode($state));\r\n            }\r\n        }\r\n        //echo self::addBucket();\r\n    }  \r\n    \r\n    /**\r\n     * 监测程序的运行\r\n     *\r\n     * 程序员应该实时知道自己程序的运行状况\r\n     * @return array\r\n     **/\r\n    public static function inspect()\r\n    {\r\n        //array(''name'' => ''udata_1'', ''joyNum'' => 2, ''joyList'' => array( 3,2,4 )),\r\n        $redis = new myRedis;\r\n        $data = $redis->sMembers(self::KEY);\r\n        header("Cache-Control:no-cache");\r\n        echo "<table style = ''text-align:center''>\r\n            <thead><tr>\r\n            <th>当前正在插入表 </th>\r\n            <th>表内项目数</th>\r\n            <th>表内数据量</th>\r\n            <th>详情</th>\r\n            </tr></thead>";\r\n        foreach($data as $state){\r\n            $bucket = json_decode($state , true);\r\n            echo "<tr style = ''border-bottom:2px''><td>{$bucket[''name'']}</td> <td>{$bucket[''joyNum'']}</td>";\r\n            echo "<td>" . UdataModel::getNumByName($bucket[''name'']) . "</td>"; \r\n            echo "<td><table>";\r\n            foreach($bucket[''joyList''] as $joy){\r\n                echo "<tr>joy id 为{$joy}数量" . UdataModel::getDataNum($bucket[''name''], $joy) . "<br/></tr>";\r\n            }\r\n            echo "</table></td></tr>";\r\n        }\r\n        echo "</table>";\r\n    }\r\n\r\n    /**\r\n     * 清除数据\r\n     * 开发的时候用\r\n     **/\r\n    public static function clear()\r\n    {\r\n        $redis = new myRedis();\r\n        $data = $redis->sMembers(self::KEY);\r\n        foreach($data as $state){\r\n            $redis->sRem(self::KEY, $state);\r\n        }\r\n        $data = $redis->sMembers(self::KEY);\r\n        if(!count($data)) {\r\n            echo "it is clear<br/>";\r\n        } else {\r\n            echo "no clear<br/>";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清除bucket\r\n     *\r\n     * 当表里的数据已经达到200w的时候，就把这个表对应的桶删除\r\n     * 定时脚本,定期清理过期的数据\r\n     **/\r\n    public static function delBucket()\r\n    {\r\n        $data = $redis->sMembers(self::KEY);\r\n        foreach($data as $bucket){\r\n            $state = json_decode($bucket , true) ;\r\n            //数据已经满了的话，就从桶池里面删除，不再插入数据\r\n            if(UdataModel::getNumByName($state[''name'']) >= self::MAXTABNUM){\r\n                $redis->sRem(self::KEY , $bucket)  ;\r\n            }\r\n        }\r\n    }\r\n\r\n    function __construct(){}\r\n}\r\n</code>', 'mysql 分表之桶池', '', 'publish', 'open', 'open', '', 'mysql-%e5%88%86%e8%a1%a8%e7%9a%84%e6%80%9d%e8%80%83', '', '', '2015-02-03 03:56:21', '2015-02-03 03:56:21', '', 0, 'http://unasm.sinaapp.com/?p=10', 0, 'post', '', 0),
(11, 1, '2014-09-25 17:36:34', '2014-09-25 17:36:34', '数据分表是一个大问题,尤其是在这个号称大数据的时代。只是具体怎么分表，一直是人讨论的问题。\r\n\r\n可以严格按照时间分，一个表，一个表的填充，满了，达到200w的级别之后，接着去下一个表。还有一个方案，就是预先估计好大概可能有的数据量，分好对应的N个表，然后按照一定的规则，将数据尽量均匀的散布在所有的表中。\r\n\r\n第一种的优点是数据按照一定的规则插入，将来在找数据的时候，是可以有一定规则的，比较轻松的可以找到对应的数据，方便后续的处理，缺点是写的压力集中在一台服务器上面的一个表上面，因为锁的原因，插入会比较慢，而且，刚刚插入的数据往往成为热数据，读的压力也会相应的集中在一个表上面，在面临高并发的时候，往往数据库扛不住这个压力而崩溃，有人说，可以拿redis或者是memcache来抵消这个压力，不能不说，这个也是一个办法，只是说，到底缓存可以多大程度的缓解这个压力有待商榷，其次，业务上也面临问题，刚刚用户输入的数据，需要在缓存轮番插入数据库之后，才可以从数据库中获得，对于用户来说，这个消除缓存等待时间到底可以接受与否，要根据业务来分析了，如果将缓存中的数据和数据库中的数据 合并，共同呈现给用户，这个时候又面临数据融合和主从同步的一致性以及编码的复杂度等问题。\r\n\r\n第二种是将数据，用户，访问的压力，平均的分散开来，每一张表上面都会有读和写，因为将压力分散开来，这个时候就不会面临写入和读取的性能问题，分布式解决，毫无压力。但是这样的缺点就是首先数据的分布是无序的，后续如果想从数据中得到信息，会是很麻烦的事情，其次，如果万一自己当初的猜想设计不对，那就面临着数据压力和修改底层的风险。\r\n\r\n我这里有一种方案，就是可以尽可能的优化这两种方案，算是两个方法的中和。\r\n\r\n就是设置一个桶池，标记正在进行插入操作的表，如果有新的数据，就寻找是否有空闲的桶没有事情，如果一旦有某个表满了，就需要将表的表池取出对应表，同时加入新的表。\r\n\r\n这样就也可以缓解写的压力，还可以使数据有一定规则，将来查找使用', 'mysql 分表的思考', '', 'inherit', 'open', 'open', '', '10-revision-v1', '', '', '2014-09-25 17:36:34', '2014-09-25 17:36:34', '', 10, 'http://unasm.sinaapp.com/?p=11', 0, 'revision', '', 0),
(12, 1, '2015-01-07 10:07:07', '2015-01-07 10:07:07', '这个是为活动系统设计的一套动态分表的策略，活动数据的特点是每个活动之间的数据彼此独立，单个活动的的数据不算很大，几乎没有活动数据可以占据单独的一个表，\n\n首先在缓存中建立一个列表，标记还可以插入数据的表的集合，而在集合之外的其他的表已经是历史数据，至少不会有新的活动是数据插入，具体实现方式如下：\n\n<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/%E6%A1%B6%E6%B1%A0%E7%9A%84%E8%AE%BE%E8%AE%A1.jpg" alt="" width="556" height="627" />\n\n最上面的是一个一个的表，真正插入数据的地方\n\nActor 指活动，首先从列表中得到所有桶的信息，所谓桶，就是还可以插入数据的表，\n\n桶信息包括两种：表的名字，和已经插入该表的活动列表。根据这些可以获得当前每个表的数据量，以及为正在添加的活动预留的空间。\n\n因为获取的数据量是根据确实添加了的数据，之前为其他的已经结束的活动多预留的空间在这里可以重复利用。\n\n剩余的空间不足以容纳一个新的活动的时候，就放弃这个表，\n\n同时每个表的活动数量也可以一定程度的反应写压力，虽然不是很精确，但是两者存在一定的关联，如果严格的区分写压力，可以根据joyList中过去一定时间内插入的数据量来比较精确的反应写压力，然后将插入数据量放到桶信息里面，这样pa，从而达到每个表的读写压力不至于过大的目的。从所有的桶中选择最优的，作为新的活动的存储地址。\n\n这样有几个好处：\n\n第一：保证了每个活动一个表的基本原则。\n\n第二：在不出现很奇葩的情况时候，保证了每个表的数据量都在一个设置的常量上下，比如200w，不会因为每个活动数据太少造成空间浪费。\n\n第三：动态创建表，可以保证数据的长期运行\n\n第四：为真正分担读写压力预留了扩展空间。', 'mysql 分表之桶池', '', 'inherit', 'open', 'open', '', '10-autosave-v1', '', '', '2015-01-07 10:07:07', '2015-01-07 10:07:07', '', 10, 'http://unasm.sinaapp.com/?p=12', 0, 'revision', '', 0),
(139, 1, '2015-01-07 10:07:26', '2015-01-07 10:07:26', '这个是为活动系统设计的一套动态分表的策略，活动数据的特点是每个活动之间的数据彼此独立，单个活动的的数据不算很大，几乎没有活动数据可以占据单独的一个表，\r\n\r\n首先在缓存中建立一个列表，标记还可以插入数据的表的集合，而在集合之外的其他的表已经是历史数据，至少不会有新的活动是数据插入，具体实现方式如下：\r\n\r\n<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/%E6%A1%B6%E6%B1%A0%E7%9A%84%E8%AE%BE%E8%AE%A1.jpg" alt="" width="556" height="627" />\r\n\r\n最上面的是一个一个的表，真正插入数据的地方\r\n\r\nActor 指活动，首先从列表中得到所有桶的信息，所谓桶，就是还可以插入数据的表，\r\n\r\n桶信息包括两种：表的名字，和已经插入该表的活动列表。根据这些可以获得当前每个表的数据量，以及为正在添加的活动预留的空间。\r\n\r\n因为获取的数据量是根据确实添加了的数据，之前为其他的已经结束的活动多预留的空间在这里可以重复利用。\r\n\r\n剩余的空间不足以容纳一个新的活动的时候，就放弃这个表，\r\n\r\n同时每个表的活动数量也可以一定程度的反应写压力，虽然不是很精确，但是两者存在一定的关联，如果严格的区分写压力，可以根据joyList中过去一定时间内插入的数据量来比较精确的反应写压力，然后将插入数据量放到桶信息里面，作为判断的依据，从而达到每个表的读写压力不至于过大的目的。从所有的桶中选择最优的，作为新的活动的存储地址。\r\n\r\n这样有几个好处：\r\n\r\n第一：保证了每个活动一个表的基本原则。\r\n\r\n第二：在不出现很奇葩的情况时候，保证了每个表的数据量都在一个设置的常量上下，比如200w，不会因为每个活动数据太少造成空间浪费。\r\n\r\n第三：动态创建表，可以保证数据的长期运行\r\n\r\n第四：为真正分担读写压力预留了扩展空间。', 'mysql 分表之桶池', '', 'inherit', 'open', 'open', '', '10-revision-v1', '', '', '2015-01-07 10:07:26', '2015-01-07 10:07:26', '', 10, 'http://unasm.sinaapp.com/?p=139', 0, 'revision', '', 0),
(138, 1, '2015-01-07 09:32:09', '2015-01-07 09:32:09', '这个是为活动系统设计的一套动态分表的策略，首先在缓存中建立一个列表，标记还可以插入数据的表的集合，而在集合之外的其他的表已经是历史数据，至少不会有新的活动是数据插入，具体实现方式如下：\r\n\r\n<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/%E6%A1%B6%E6%B1%A0%E7%9A%84%E8%AE%BE%E8%AE%A1.jpg" alt="" width="556" height="627" />\r\n\r\n最上面的是一个一个的表，真正插入数据的地方\r\n\r\nActor 指活动，首先从列表中得到所有桶的信息，所有还可以插入数据的表的集合以及对应的每个活动的id，从而可以获得当前每个表的数据量，以及正在添加活动的数据量，我们会为每个活动预留一定的空间，所以预留的空间不足以容纳一个新的活动的时候，就放弃这个表，因为检查数据是实时的，之前多预留的空间在这里可以重复利用。\r\n\r\n同时每个表的活动数量也可以一定程度的反应写压力，虽然不是很精确，但是两者存在一定的关联，如果严格的区分写压力，可以根据joyList中过去一定时间内插入的数据量来比较精确的反应写压力，从而达到每个表的读写压力不至于过大的目的。从所有的桶中选择最优的，作为新的活动的存储地址。\r\n\r\n这样有几个好处：\r\n\r\n第一：保证了每个活动一个表的基本原则。\r\n\r\n第二：在不出现很奇葩的情况时候，保证了每个表的数据量都在一个设置的常量上下，比如200w，不会因为每个活动数据太少造成空间浪费。\r\n\r\n第三：动态创建表，可以保证数据的长期运行\r\n\r\n第四：为真正分担读写压力预留了扩展空间。', 'mysql 分表之桶池', '', 'inherit', 'open', 'open', '', '10-revision-v1', '', '', '2015-01-07 09:32:09', '2015-01-07 09:32:09', '', 10, 'http://unasm.sinaapp.com/?p=138', 0, 'revision', '', 0),
(13, 1, '2014-09-26 03:09:24', '2014-09-26 03:09:24', '数据分表是一个大问题,尤其是在这个号称大数据的时代。只是具体怎么分表，一直是人讨论的问题。\r\n\r\n可以严格按照时间分，一个表，一个表的填充，满了，达到200w的级别之后，接着去下一个表。还有一个方案，就是预先估计好大概可能有的数据量，分好对应的N个表，然后按照一定的规则，将数据尽量均匀的散布在所有的表中。\r\n\r\n第一种的优点是数据按照一定的规则插入，将来在找数据的时候，是可以有一定规则的，比较轻松的可以找到对应的数据，方便后续的处理，缺点是写的压力集中在一台服务器上面的一个表上面，因为锁的原因，插入会比较慢，而且，刚刚插入的数据往往成为热数据，读的压力也会相应的集中在一个表上面，在面临高并发的时候，往往数据库扛不住这个压力而崩溃，有人说，可以拿redis或者是memcache来抵消这个压力，不能不说，这个也是一个办法，只是说，到底缓存可以多大程度的缓解这个压力有待商榷，其次，业务上也面临问题，刚刚用户输入的数据，需要在缓存轮番插入数据库之后，才可以从数据库中获得，对于用户来说，这个消除缓存等待时间到底可以接受与否也是问题，有一位朋友放弃github的静态博客的原因就是无法接受长达一天才可以生效的等待时间，要根据业务来分析了，如果将缓存中的数据和数据库中的数据 合并，共同呈现给用户，这个时候又面临数据融合和主从同步的一致性以及编码的复杂度等问题。\r\n\r\n第二种是将数据，用户，访问的压力，平均的分散开来，每一张表上面都会有读和写，因为将压力分散开来，这个时候就不会面临写入和读取的性能问题，分布式解决，毫无压力。但是这样的缺点就是首先数据的分布是无序的，后续如果想从数据中得到信息，会是很麻烦的事情，其次，如果万一自己当初的猜想设计不对，那就面临着数据压力和修改底层的风险。\r\n\r\n我这里有一种方案，就是可以尽可能的优化这两种方案，算是两个方法的中和。\r\n\r\n就是设置一个桶池，标记正在进行插入操作的表，就是说，目前有是个表正在插入数据，其他的表已经是历史数据，只是起到查询保存数据的作用，将要更新的数据按照一定的规则插入到桶池里面，比如取模，或者是根据业务尽量平均的划分数据到桶里面，如果某一个表已经达到了规定的数据量，则停止向里面写入进去，同时将表从桶池中剔除，加入一个新建的表。\r\n\r\n这样就也可以缓解写的压力，还可以使数据有一定规则，将来查找虽然不可以像单表查询那样高效，但是带来的时间增加也是有限的，比起上百千个表带来的查找效率是差数量级的，通过控制桶池的大小，可以控制写入压力，压力大的时候，就增大桶池，压力小的时候，就减小桶池，数据没有达到预期不会增加表的数量，数据超出了预期，也可以无限制增加表的数量，具有很强的扩展性，因为将写的压力平均的分散了，所以读写的效率也会高出来很多。\r\n\r\n具体效果如何，还需要检验。', 'mysql 分表的思考', '', 'inherit', 'open', 'open', '', '10-revision-v1', '', '', '2014-09-26 03:09:24', '2014-09-26 03:09:24', '', 10, 'http://unasm.sinaapp.com/?p=13', 0, 'revision', '', 0),
(14, 1, '2014-09-26 09:20:23', '2014-09-26 09:20:23', '简单的来说，黑名单就是把一堆的数字存起来，然后检查其中是否存在某一个数字，而这个查询可以做到nlogn级别的，一般来说现实中话虽如此，也许黑名单查询会面临着很多歌用户，都需要查询他们是否在黑名单中的情况，这个时候，依旧采用每次nlogn级别的算法，就会遇到性能问题。\r\n\r\n如果采用类似归并的算法，将全部的黑名单id取出来排序，然后全部的用户id取出来，两个数组各自排序，然后从前到后m+n的扫，判断用户id是否存在在黑名单里面。这样就可以将时间从m *nlog(n) 降到max(m+n , nlog(n) , mlog(m))。\r\n<code>\r\nfunction blackList()\r\n{\r\n//做一些初始化的工作\r\nif(!$this-&gt;redis-&gt;get(''flag'')){\r\n$this-&gt;redis-&gt;set("flag" , 1);\r\nfor($i = 0;$i &lt; self::$MAX;$i++){\r\n$tmp = rand(1,10000000);\r\n$this-&gt;redis-&gt;zAdd(self::$REDISKEY , $tmp , $tmp);\r\n}\r\n}\r\n$arr = array();\r\nfor($i = 0;$i &lt; self::$CASE ; $i++){\r\n$arr[] = rand(1,10000000);\r\n}\r\n$begin = microtime(true) * 10000;\r\n$this-&gt;origin($arr);\r\n$end = microtime(true) * 10000;\r\n$end = $end - $begin;\r\necho "一共用时{$end}&lt;br/&gt;";\r\n$begin = microtime(true) * 10000;\r\n$this-&gt;secd($arr);\r\n$end = microtime(true) * 10000 - $begin;\r\necho "一共用时{$end}&lt;br/&gt;";\r\n</code>\r\n\r\n这里是调用的地方的函数\r\n<code>\r\nprotected function origin(&amp;$arr)\r\n{\r\n//计数，是否存在zset中\r\n$cnt = 0;\r\nfor($i = 0, $len = count($arr);$i &lt; $len;$i++){\r\n$tmp = $this-&gt;redis-&gt;zScore(self::$REDISKEY , $arr[$i]);\r\nif(!empty($tmp)){\r\n$cnt++;\r\n}\r\n}\r\necho "一共有{$cnt}个数字在黑名单中&lt;br/&gt;";\r\n}\r\n</code>\r\n这里是通过第一种方法，即每次通过向redis查询是否存在对应的id的方法\r\n<code>\r\nprotected function secd(&amp;$arr)\r\n{\r\n$blacklist = $this-&gt;redis-&gt;zRange(self::$REDISKEY , 0 , -1);\r\n$alen = count($arr);\r\n$pointer = 0;\r\n$cnt = 0;\r\nsort($arr , SORT_NUMERIC);\r\nfor($i = 0 , $len = count($blacklist);$i &lt; $len;$i++){\r\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\r\nif($arr[$pointer] == $blacklist[$i]){\r\n$cnt ++;\r\n}\r\n$pointer ++;\r\n}\r\n}\r\necho "一共有{$cnt}个数字在黑名单中\r\n";\r\n}\r\n</code>\r\n这里是我提出的，将所有的id获取，然后通过m+n的方式获取。\r\n下面是最关键的环节，具体性能影响如何？\r\n当用户有10w个，黑名单长为1w的时候，第一种方法84587.099609375ms，第二种方法2603.099609375ms，性能优化大约是40倍\r\n因为可以进行这种大规模查询的人都是编辑，而非用户，所以2s的等待时间应该是可以接受的\r\n\r\n通过类似的思路，可以对hash和zset以及mc进行一个对比\r\n\r\n$blacklist = array();\r\nfor($i = 0;$i &lt; self::$MAX;$i++){\r\n$blacklist[] = $this-&gt;memcache-&gt;get(self::$mc_prefix . $i);\r\n}\r\n$alen = count($arr);\r\n$pointer = 0;\r\n$cnt = 0;\r\nsort($arr , SORT_NUMERIC);\r\nsort($blacklist , SORT_NUMERIC);\r\nfor($i = 0 , $len = count($blacklist);$i &lt; $len;$i++){\r\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\r\nif($arr[$pointer] == $blacklist[$i]){\r\n$cnt ++;\r\n}\r\n$pointer ++;\r\n}\r\n}\r\necho "一共有{$cnt}个数字在黑名单中&lt;br/&gt;";\r\n\r\n这里是通过mc存放uid的方式进行的，效率么19783.2421875要比第一种方法大约快4倍单式依旧比第二种方法慢10倍的样子。\r\n\r\nredis还有另外一种数据结构，就是hash，理论上来说是可以做到O(1)的插入和查找，对于这种kv结构来说最是合适，因此添加对hash的判断，依旧是第一种方法，第二种方法的测试.\r\n\r\npublic function redisHash($arr)\r\n{\r\n$len = count($arr);\r\n$cnt = 0;\r\nfor($i = 0;$i &lt; $len;$i++){\r\n//$this-&gt;redis = new BaseModelRedis(SINASRV_REDIS_HOST);\r\n$tmp = $this-&gt;redis-&gt;hGet(self::$redisHash , $arr[$i]);\r\n//if(!empty($tmp)){\r\nif($tmp){\r\n$cnt++;\r\n}\r\n}\r\necho "一共有{$cnt}个数字在黑名单中\\n";\r\n}\r\n\r\n这个时候测得的用时是86803ms\r\n\r\npublic function redisHashSort(&amp;$arr)\r\n{\r\n$begin = microtime(true) * 10000;\r\n$blacklist = $this-&gt;redis-&gt;hKeys(self::$redisHash);\r\n$middle = microtime(true) * 10000 - $begin;\r\n$len = count($blacklist);\r\n$alen = count($arr);\r\n$pointer = 0;\r\n$cnt = 0;\r\nsort($arr , SORT_NUMERIC);\r\nsort($blacklist , SORT_NUMERIC);\r\n\r\n$middle = microtime(true) * 10000 - $begin;\r\necho "排序之后的是时间是 : " . $middle . "ms的时间&lt;br/&gt;";\r\nfor($i = 0 ;$i &lt; $len;$i++){\r\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\r\nif($arr[$pointer] == $blacklist[$i]){\r\n$cnt ++;\r\n}\r\n$pointer ++;\r\n}\r\n}\r\necho "一共有{$cnt}个数字在黑名单中&lt;br/&gt;";\r\n$end = microtime(true) * 10000 - $begin;\r\necho "redis hashGetall 后sort一共用时{$end}&lt;br/&gt;&lt;br/&gt;";\r\n}\r\n\r\n首先读取所有的数据，然后再排序，得到的时间是3000ms，这个效率差异原因，主要是集中在了二次排序上面，zset去得的数据是不需要排序的，而hash是需要排序的\r\n\r\n如果正式的模拟单次用户查询，每次都需要连接的时候，20W的用户，10000的黑名单，需要耗费时间是250000ms，就算是减小一个数量级，时间大概是25000，线性的增加', '黑名单的设计与实现', '', 'publish', 'open', 'open', '', '%e9%bb%91%e5%90%8d%e5%8d%95%e7%9a%84%e8%ae%be%e8%ae%a1%e4%b8%8e%e5%ae%9e%e7%8e%b0', '', '', '2014-09-29 08:19:21', '2014-09-29 08:19:21', '', 0, 'http://unasm.sinaapp.com/?p=14', 0, 'post', '', 0),
(15, 1, '2014-09-26 09:20:23', '2014-09-26 09:20:23', '简单的来说，黑名单就是把一堆的数字存起来，然后检查其中是否存在某一个数字，而这个查询可以做到nlogn级别的，一般来说现实中话虽如此，也许黑名单查询会面临着很多歌用户，都需要查询他们是否在黑名单中的情况，这个时候，依旧采用每次nlogn级别的算法，就会遇到性能问题。\r\n\r\n如果采用类似归并的算法，将全部的黑名单id取出来排序，然后全部的用户id取出来，两个数组各自排序，然后从前到后m+n的扫，判断用户id是否存在在黑名单里面。这样就可以将时间从m *nlog(n) 降到max(m+n , nlog(n) , mlog(m))。\r\n<code>\r\nfunction blackList()\r\n{\r\n//做一些初始化的工作\r\nif(!$this-&gt;redis-&gt;get(''flag'')){\r\n$this-&gt;redis-&gt;set("flag" , 1);\r\nfor($i = 0;$i &lt; self::$MAX;$i++){\r\n$tmp = rand(1,10000000);\r\n$this-&gt;redis-&gt;zAdd(self::$REDISKEY , $tmp , $tmp);\r\n}\r\n}\r\n$arr = array();\r\nfor($i = 0;$i &lt; self::$CASE ; $i++){\r\n$arr[] = rand(1,10000000);\r\n}\r\n$begin = microtime(true) * 10000;\r\n$this-&gt;origin($arr);\r\n$end = microtime(true) * 10000;\r\n$end = $end - $begin;\r\necho "一共用时{$end}&lt;br/&gt;";\r\n$begin = microtime(true) * 10000;\r\n$this-&gt;secd($arr);\r\n$end = microtime(true) * 10000 - $begin;\r\necho "一共用时{$end}&lt;br/&gt;";\r\n</code>\r\n\r\n这里是调用的地方的函数\r\n<code>\r\nprotected function origin(&amp;$arr)\r\n{\r\n//计数，是否存在zset中\r\n$cnt = 0;\r\nfor($i = 0, $len = count($arr);$i &lt; $len;$i++){\r\n$tmp = $this-&gt;redis-&gt;zScore(self::$REDISKEY , $arr[$i]);\r\nif(!empty($tmp)){\r\n$cnt++;\r\n}\r\n}\r\necho "一共有{$cnt}个数字在黑名单中&lt;br/&gt;";\r\n}\r\n</code>\r\n这里是通过第一种方法，即每次通过向redis查询是否存在对应的id的方法\r\n<code>\r\nprotected function secd(&amp;$arr)\r\n{\r\n$blacklist = $this-&gt;redis-&gt;zRange(self::$REDISKEY , 0 , -1);\r\n$alen = count($arr);\r\n$pointer = 0;\r\n$cnt = 0;\r\nsort($arr , SORT_NUMERIC);\r\nfor($i = 0 , $len = count($blacklist);$i &lt; $len;$i++){\r\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\r\nif($arr[$pointer] == $blacklist[$i]){\r\n$cnt ++;\r\n}\r\n$pointer ++;\r\n}\r\n}\r\necho "一共有{$cnt}个数字在黑名单中\r\n";\r\n}\r\n</code>\r\n这里是我提出的，将所有的id获取，然后通过m+n的方式获取。\r\n下面是最关键的环节，具体性能影响如何？\r\n当用户有10w个，黑名单长为1w的时候，第一种方法84587.099609375ms，第二种方法2703.099609375ms，性能优化大约是40倍\r\n因为可以进行这种大规模查询的人都是编辑，而非用户，所以2s的等待时间应该是可以接受的', '黑名单的设计与实现', '', 'inherit', 'open', 'open', '', '14-revision-v1', '', '', '2014-09-26 09:20:23', '2014-09-26 09:20:23', '', 14, 'http://unasm.sinaapp.com/?p=15', 0, 'revision', '', 0),
(17, 1, '2014-09-29 08:18:19', '2014-09-29 08:18:19', '简单的来说，黑名单就是把一堆的数字存起来，然后检查其中是否存在某一个数字，而这个查询可以做到nlogn级别的，一般来说现实中话虽如此，也许黑名单查询会面临着很多歌用户，都需要查询他们是否在黑名单中的情况，这个时候，依旧采用每次nlogn级别的算法，就会遇到性能问题。\n\n如果采用类似归并的算法，将全部的黑名单id取出来排序，然后全部的用户id取出来，两个数组各自排序，然后从前到后m+n的扫，判断用户id是否存在在黑名单里面。这样就可以将时间从m *nlog(n) 降到max(m+n , nlog(n) , mlog(m))。\n<code>\nfunction blackList()\n{\n//做一些初始化的工作\nif(!$this-&gt;redis-&gt;get(''flag'')){\n$this-&gt;redis-&gt;set("flag" , 1);\nfor($i = 0;$i &lt; self::$MAX;$i++){\n$tmp = rand(1,10000000);\n$this-&gt;redis-&gt;zAdd(self::$REDISKEY , $tmp , $tmp);\n}\n}\n$arr = array();\nfor($i = 0;$i &lt; self::$CASE ; $i++){\n$arr[] = rand(1,10000000);\n}\n$begin = microtime(true) * 10000;\n$this-&gt;origin($arr);\n$end = microtime(true) * 10000;\n$end = $end - $begin;\necho "一共用时{$end}&lt;br/&gt;";\n$begin = microtime(true) * 10000;\n$this-&gt;secd($arr);\n$end = microtime(true) * 10000 - $begin;\necho "一共用时{$end}&lt;br/&gt;";\n</code>\n\n这里是调用的地方的函数\n<code>\nprotected function origin(&amp;$arr)\n{\n//计数，是否存在zset中\n$cnt = 0;\nfor($i = 0, $len = count($arr);$i &lt; $len;$i++){\n$tmp = $this-&gt;redis-&gt;zScore(self::$REDISKEY , $arr[$i]);\nif(!empty($tmp)){\n$cnt++;\n}\n}\necho "一共有{$cnt}个数字在黑名单中&lt;br/&gt;";\n}\n</code>\n这里是通过第一种方法，即每次通过向redis查询是否存在对应的id的方法\n<code>\nprotected function secd(&amp;$arr)\n{\n$blacklist = $this-&gt;redis-&gt;zRange(self::$REDISKEY , 0 , -1);\n$alen = count($arr);\n$pointer = 0;\n$cnt = 0;\nsort($arr , SORT_NUMERIC);\nfor($i = 0 , $len = count($blacklist);$i &lt; $len;$i++){\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\nif($arr[$pointer] == $blacklist[$i]){\n$cnt ++;\n}\n$pointer ++;\n}\n}\necho "一共有{$cnt}个数字在黑名单中\n";\n}\n</code>\n这里是我提出的，将所有的id获取，然后通过m+n的方式获取。\n下面是最关键的环节，具体性能影响如何？\n当用户有10w个，黑名单长为1w的时候，第一种方法84587.099609375ms，第二种方法2603.099609375ms，性能优化大约是40倍\n因为可以进行这种大规模查询的人都是编辑，而非用户，所以2s的等待时间应该是可以接受的\n\n通过类似的思路，可以对hash和zset以及mc进行一个对比\n\n$blacklist = array();\nfor($i = 0;$i &lt; self::$MAX;$i++){\n$blacklist[] = $this-&gt;memcache-&gt;get(self::$mc_prefix . $i);\n}\n$alen = count($arr);\n$pointer = 0;\n$cnt = 0;\nsort($arr , SORT_NUMERIC);\nsort($blacklist , SORT_NUMERIC);\nfor($i = 0 , $len = count($blacklist);$i &lt; $len;$i++){\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\nif($arr[$pointer] == $blacklist[$i]){\n$cnt ++;\n}\n$pointer ++;\n}\n}\necho "一共有{$cnt}个数字在黑名单中&lt;br/&gt;";\n\n这里是通过mc存放uid的方式进行的，效率么19783.2421875要比第一种方法大约快4倍单式依旧比第二种方法慢10倍的样子。\n\nredis还有另外一种数据结构，就是hash，理论上来说是可以做到O(1)的插入和查找，对于这种kv结构来说最是合适，因此添加对hash的判断，依旧是第一种方法，第二种方法的测试.\n\npublic function redisHash($arr)\n{\n$len = count($arr);\n$cnt = 0;\nfor($i = 0;$i &lt; $len;$i++){\n//$this-&gt;redis = new BaseModelRedis(SINASRV_REDIS_HOST);\n$tmp = $this-&gt;redis-&gt;hGet(self::$redisHash , $arr[$i]);\n//if(!empty($tmp)){\nif($tmp){\n$cnt++;\n}\n}\necho "一共有{$cnt}个数字在黑名单中\\n";\n}\n\n这个时候测得的用时是86803ms\n\npublic function redisHashSort(&amp;$arr)\n{\n$begin = microtime(true) * 10000;\n$blacklist = $this-&gt;redis-&gt;hKeys(self::$redisHash);\n$middle = microtime(true) * 10000 - $begin;\n$len = count($blacklist);\n$alen = count($arr);\n$pointer = 0;\n$cnt = 0;\nsort($arr , SORT_NUMERIC);\nsort($blacklist , SORT_NUMERIC);\n\n$middle = microtime(true) * 10000 - $begin;\necho "排序之后的是时间是 : " . $middle . "ms的时间&lt;br/&gt;";\nfor($i = 0 ;$i &lt; $len;$i++){\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\nif($arr[$pointer] == $blacklist[$i]){\n$cnt ++;\n}\n$pointer ++;\n}\n}\necho "一共有{$cnt}个数字在黑名单中&lt;br/&gt;";\n$end = microtime(true) * 10000 - $begin;\necho "redis hashGetall 后sort一共用时{$end}&lt;br/&gt;&lt;br/&gt;";\n}\n\n首先读取所有的数据，然后再排序，得到的时间是3000ms，这个效率差异原因，主要是集中在了二次排序上面，zset去得的数据是不需要排序的，而hash是需要排序的\n\n如果正式的模拟单次用户查询，每次都需要连接的时候，20W的用户，10000的黑名单，需要耗费时间是25000ms', '黑名单的设计与实现', '', 'inherit', 'open', 'open', '', '14-autosave-v1', '', '', '2014-09-29 08:18:19', '2014-09-29 08:18:19', '', 14, 'http://unasm.sinaapp.com/?p=17', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(18, 1, '2014-09-29 08:19:21', '2014-09-29 08:19:21', '简单的来说，黑名单就是把一堆的数字存起来，然后检查其中是否存在某一个数字，而这个查询可以做到nlogn级别的，一般来说现实中话虽如此，也许黑名单查询会面临着很多歌用户，都需要查询他们是否在黑名单中的情况，这个时候，依旧采用每次nlogn级别的算法，就会遇到性能问题。\r\n\r\n如果采用类似归并的算法，将全部的黑名单id取出来排序，然后全部的用户id取出来，两个数组各自排序，然后从前到后m+n的扫，判断用户id是否存在在黑名单里面。这样就可以将时间从m *nlog(n) 降到max(m+n , nlog(n) , mlog(m))。\r\n<code>\r\nfunction blackList()\r\n{\r\n//做一些初始化的工作\r\nif(!$this-&gt;redis-&gt;get(''flag'')){\r\n$this-&gt;redis-&gt;set("flag" , 1);\r\nfor($i = 0;$i &lt; self::$MAX;$i++){\r\n$tmp = rand(1,10000000);\r\n$this-&gt;redis-&gt;zAdd(self::$REDISKEY , $tmp , $tmp);\r\n}\r\n}\r\n$arr = array();\r\nfor($i = 0;$i &lt; self::$CASE ; $i++){\r\n$arr[] = rand(1,10000000);\r\n}\r\n$begin = microtime(true) * 10000;\r\n$this-&gt;origin($arr);\r\n$end = microtime(true) * 10000;\r\n$end = $end - $begin;\r\necho "一共用时{$end}&lt;br/&gt;";\r\n$begin = microtime(true) * 10000;\r\n$this-&gt;secd($arr);\r\n$end = microtime(true) * 10000 - $begin;\r\necho "一共用时{$end}&lt;br/&gt;";\r\n</code>\r\n\r\n这里是调用的地方的函数\r\n<code>\r\nprotected function origin(&amp;$arr)\r\n{\r\n//计数，是否存在zset中\r\n$cnt = 0;\r\nfor($i = 0, $len = count($arr);$i &lt; $len;$i++){\r\n$tmp = $this-&gt;redis-&gt;zScore(self::$REDISKEY , $arr[$i]);\r\nif(!empty($tmp)){\r\n$cnt++;\r\n}\r\n}\r\necho "一共有{$cnt}个数字在黑名单中&lt;br/&gt;";\r\n}\r\n</code>\r\n这里是通过第一种方法，即每次通过向redis查询是否存在对应的id的方法\r\n<code>\r\nprotected function secd(&amp;$arr)\r\n{\r\n$blacklist = $this-&gt;redis-&gt;zRange(self::$REDISKEY , 0 , -1);\r\n$alen = count($arr);\r\n$pointer = 0;\r\n$cnt = 0;\r\nsort($arr , SORT_NUMERIC);\r\nfor($i = 0 , $len = count($blacklist);$i &lt; $len;$i++){\r\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\r\nif($arr[$pointer] == $blacklist[$i]){\r\n$cnt ++;\r\n}\r\n$pointer ++;\r\n}\r\n}\r\necho "一共有{$cnt}个数字在黑名单中\r\n";\r\n}\r\n</code>\r\n这里是我提出的，将所有的id获取，然后通过m+n的方式获取。\r\n下面是最关键的环节，具体性能影响如何？\r\n当用户有10w个，黑名单长为1w的时候，第一种方法84587.099609375ms，第二种方法2603.099609375ms，性能优化大约是40倍\r\n因为可以进行这种大规模查询的人都是编辑，而非用户，所以2s的等待时间应该是可以接受的\r\n\r\n通过类似的思路，可以对hash和zset以及mc进行一个对比\r\n\r\n$blacklist = array();\r\nfor($i = 0;$i &lt; self::$MAX;$i++){\r\n$blacklist[] = $this-&gt;memcache-&gt;get(self::$mc_prefix . $i);\r\n}\r\n$alen = count($arr);\r\n$pointer = 0;\r\n$cnt = 0;\r\nsort($arr , SORT_NUMERIC);\r\nsort($blacklist , SORT_NUMERIC);\r\nfor($i = 0 , $len = count($blacklist);$i &lt; $len;$i++){\r\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\r\nif($arr[$pointer] == $blacklist[$i]){\r\n$cnt ++;\r\n}\r\n$pointer ++;\r\n}\r\n}\r\necho "一共有{$cnt}个数字在黑名单中&lt;br/&gt;";\r\n\r\n这里是通过mc存放uid的方式进行的，效率么19783.2421875要比第一种方法大约快4倍单式依旧比第二种方法慢10倍的样子。\r\n\r\nredis还有另外一种数据结构，就是hash，理论上来说是可以做到O(1)的插入和查找，对于这种kv结构来说最是合适，因此添加对hash的判断，依旧是第一种方法，第二种方法的测试.\r\n\r\npublic function redisHash($arr)\r\n{\r\n$len = count($arr);\r\n$cnt = 0;\r\nfor($i = 0;$i &lt; $len;$i++){\r\n//$this-&gt;redis = new BaseModelRedis(SINASRV_REDIS_HOST);\r\n$tmp = $this-&gt;redis-&gt;hGet(self::$redisHash , $arr[$i]);\r\n//if(!empty($tmp)){\r\nif($tmp){\r\n$cnt++;\r\n}\r\n}\r\necho "一共有{$cnt}个数字在黑名单中\\n";\r\n}\r\n\r\n这个时候测得的用时是86803ms\r\n\r\npublic function redisHashSort(&amp;$arr)\r\n{\r\n$begin = microtime(true) * 10000;\r\n$blacklist = $this-&gt;redis-&gt;hKeys(self::$redisHash);\r\n$middle = microtime(true) * 10000 - $begin;\r\n$len = count($blacklist);\r\n$alen = count($arr);\r\n$pointer = 0;\r\n$cnt = 0;\r\nsort($arr , SORT_NUMERIC);\r\nsort($blacklist , SORT_NUMERIC);\r\n\r\n$middle = microtime(true) * 10000 - $begin;\r\necho "排序之后的是时间是 : " . $middle . "ms的时间&lt;br/&gt;";\r\nfor($i = 0 ;$i &lt; $len;$i++){\r\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\r\nif($arr[$pointer] == $blacklist[$i]){\r\n$cnt ++;\r\n}\r\n$pointer ++;\r\n}\r\n}\r\necho "一共有{$cnt}个数字在黑名单中&lt;br/&gt;";\r\n$end = microtime(true) * 10000 - $begin;\r\necho "redis hashGetall 后sort一共用时{$end}&lt;br/&gt;&lt;br/&gt;";\r\n}\r\n\r\n首先读取所有的数据，然后再排序，得到的时间是3000ms，这个效率差异原因，主要是集中在了二次排序上面，zset去得的数据是不需要排序的，而hash是需要排序的\r\n\r\n如果正式的模拟单次用户查询，每次都需要连接的时候，20W的用户，10000的黑名单，需要耗费时间是250000ms，就算是减小一个数量级，时间大概是25000，线性的增加', '黑名单的设计与实现', '', 'inherit', 'open', 'open', '', '14-revision-v1', '', '', '2014-09-29 08:19:21', '2014-09-29 08:19:21', '', 14, 'http://unasm.sinaapp.com/?p=18', 0, 'revision', '', 0),
(19, 1, '2014-09-30 06:49:06', '2014-09-30 06:49:06', '使用zsh自动补全svn的时候的报错   _arguments:comparguments:208: invalid argument: ARG  ，这样在zsh下面使用svn是没有办法自动补全的，这就是很大程度上失去了zsh本来的优势，解决方法是在/usr/share/zsh/x.x.x/functions/_subversion  文件中修改33行和121行的arg/:arg: 替换成为(arg|ARG)/:arg: ，然后重新使用zsh就可以了，svn 的自动补全毫无压力了', 'zsh 无法自动补全svn的问题', '', 'publish', 'open', 'open', '', 'zsh-%e6%97%a0%e6%b3%95%e8%87%aa%e5%8a%a8%e8%a1%a5%e5%85%a8svn%e7%9a%84%e9%97%ae%e9%a2%98', '', '', '2014-09-30 06:49:06', '2014-09-30 06:49:06', '', 0, 'http://unasm.sinaapp.com/?p=19', 0, 'post', '', 0),
(20, 1, '2014-09-30 06:49:06', '2014-09-30 06:49:06', '使用zsh自动补全svn的时候的报错   _arguments:comparguments:208: invalid argument: ARG  ，这样在zsh下面使用svn是没有办法自动补全的，这就是很大程度上失去了zsh本来的优势，解决方法是在/usr/share/zsh/x.x.x/functions/_subversion  文件中修改33行和121行的arg/:arg: 替换成为(arg|ARG)/:arg: ，然后重新使用zsh就可以了，svn 的自动补全毫无压力了', 'zsh 无法自动补全svn的问题', '', 'inherit', 'open', 'open', '', '19-revision-v1', '', '', '2014-09-30 06:49:06', '2014-09-30 06:49:06', '', 19, 'http://unasm.sinaapp.com/?p=20', 0, 'revision', '', 0),
(22, 1, '2014-10-05 08:12:38', '2014-10-05 08:12:38', '好几天没有更新博客了，这样不行的，要养成习惯。\r\n\r\nredis的底层我还没有研究透彻，只能说研究 了一部分，本来打算看完了之后在写的，不过，为了养成习惯，也为了预防可能的惰性和迷失。\r\n\r\nredis 的字符串有点意思，对于运行在服务器上面的信息来说，弱类型很多时候是难免的，所以redis中处理字符的情况远远要大于处理int的情况，所以字符的操作必须优化，而众所周知，c的char[]可是不怎么强大的，有两个操作比较消耗资源，一个是append 字符的时候，一个是计算长度的时候，redis提出了一个叫做sds的东西，就是一个结构体，里面包含三个值,一个记录当前字符的长度length，一个是char数组中还剩下空闲的长度free，一个是字符存储地址，里面包含两种东西，一个是申请了，但是空闲的空间，由free标记，一个是已经存储了的字符长度，由length标记，这样，就可以将字符操作比较消耗资源的两个操作以比较小的代价给解决了。free标记的是空闲的内存，也就是说每次申请内存的时候，redis不会按照刚刚好来申请，而是根据一定的策略申请了多余的内存，这样的优点是以后再次需要内存的时候u，很大的可能性就是不会再次申请了，加快执行的效率，append的时候申请内存是按照用了的字符长度，length的二倍的大小申请的，如果已经使用的内存超过了1MB，那么以后每次申请的内存就是1MB，min（1MB,length），这样内存分配也有的放矢了，sds的使用遍布了redis的底层。\r\n\r\n第二个是ziplist 压缩列表，本来以为是很神奇的东西，结果发现跟我毕业设计差不多，简而言之，就是通过一系列精确到位的二进制定义保存字符串列表。开头zlbytes zltail zllen构成ziplist的头，zlbytes，zltail四个字节，zllen两个字节，这十个字节构成了ziplist的头，用来统计和查找表尾节点，zlbytes是表示ziplist目前占用的字节数，zltails到达表尾节点的偏移量，可以不用遍历整个ziplist的时候，找到表尾节点，zllen记录了ziplist的节点数。之后接着的位就是每个节点的具体内容，每个节点里头包括了pre_entry_length ,coding,length,content几个,pre_entype_length记录了前一个节点的长度，是为了方便调转到上一个节点,encoding表示在content里面记录的是整形还是char，什么类型的char，length记录了content的长度，类似于sds的length，最后就是保存内容的content。\r\n\r\n还有一个就是让人难以评判的结构，就是整数集和set，应用场景是元素全部是整数，且数量不是很多的时候（512个，可以通过配置修改）。简而言之，把int拆开使用，一共用来存储三种数据，int16,int32,int64 ，这样就节省了空间，一个int64就可以存储4个或者是2个数据了，添加数据的时候，按照有序数组来，需要O(n)的将插入位置之后的数据向后移动一个位置，因为总共的数量不会超过512个，所以是效率时间不会是太大的问题，当元素不再是整数的时候，或者是超过512的时候，存储结构就变成hash。', 'redis底层实现第一步', '', 'publish', 'open', 'open', '', 'redis%e5%ba%95%e5%b1%82%e5%ae%9e%e7%8e%b0%e7%ac%ac%e4%b8%80%e6%ad%a5', '', '', '2014-10-21 09:06:19', '2014-10-21 09:06:19', '', 0, 'http://unasm.sinaapp.com/?p=22', 0, 'post', '', 0),
(23, 1, '2014-10-05 08:12:38', '2014-10-05 08:12:38', '好几天没有更新博客了，这样不行的，要养成习惯。\r\n\r\nredis的底层我还没有研究透彻，只能说研究 了一部分，本来打算看完了之后在写的，不过，为了养成习惯，也为了预防可能的惰性和迷失。\r\n\r\nredis 的字符串有点意思，对于运行在服务器上面的信息来说，弱类型很多时候是难免的，所以redis中处理字符的情况远远要大于处理int的情况，所以字符的操作必须优化，而众所周知，c的char[]可是不怎么强大的，有两个操作比较消耗资源，一个是append 字符的时候，一个是计算长度的时候，redis提出了一个叫做sds的东西，就是一个结构体，里面包含三个值,一个记录当前字符的长度length，一个是char数组中还剩下空闲的长度free，一个是字符存储地址，里面包含两种东西，一个是申请了，但是空闲的空间，由free标记，一个是已经存储了的字符长度，由length标记，这样，就可以将字符操作比较消耗资源的两个操作以比较小的代价给解决了，而且因为append的时候申请内存是按照用了的字符长度的二倍申请的，这样内存分配也有的放矢了，sds的使用遍布了正则redis的底层。\r\n\r\n第二个是ziplist 压缩列表，本来以为是很神奇的东西，结果发现跟我毕业设计差不多，简而言之，就是通过一系列精确到位的二进制定义保存字符串列表。开头zlbytes zltail zllen构成ziplist的头，zlbytes，zltail四个字节，zllen两个字节，这十个字节构成了ziplist的头，用来统计和查找表尾节点，zlbytes是表示ziplist目前占用的字节数，zltails到达表尾节点的偏移量，可以不用遍历整个ziplist的时候，找到表尾节点，zllen记录了ziplist的节点数。之后接着的位就是每个节点的具体内容，每个节点里头包括了pre_entry_length ,coding,length,content几个,pre_entype_length记录了前一个节点的长度，是为了方便调转到上一个节点,encoding表示在content里面记录的是整形还是char，什么类型的char，length记录了content的长度，类似于sds的length，最后就是保存内容的content。\r\n\r\n还有一个就是让人难以评判的结构，就是整数集和，应用场景是元素全部是整数，且数量不是很多的时候。简而言之，就是把int型的每个字节8位看成一个单位，用来存放内容，比如一个int64,就可以拆分为8个数字的存储地，或者是四个数字的存储地，当这些数据集和中最大的那个小于8位数字，那就可以用一个int存储8个集合中元素，如果最大的那个元素是8-16位的，那就可以用一个int64存储四个元素，节省了空间，不过效率和应用场景有待商榷', 'redis底层实现第一步', '', 'inherit', 'open', 'open', '', '22-revision-v1', '', '', '2014-10-05 08:12:38', '2014-10-05 08:12:38', '', 22, 'http://unasm.sinaapp.com/?p=23', 0, 'revision', '', 0),
(24, 1, '2014-10-06 17:26:32', '2014-10-06 17:26:32', 'redis是会阻塞的，当一个list pop但是list却为空的时候，就会发生阻塞，redis会阻塞客户端，直到有新元素进入list，或者是超时，或者是断电重启等强制性的结束，这个时候才会解除数据库对应的key的阻塞。\r\n\r\n解除阻塞也很简单，就是redis 所有的阻塞的key都会在一个db[i]-&gt;block_keys这个数组中，i表示阻塞的数据库编号，block_keys存放被阻塞的key，然后再通过链表实现一个阻塞的客户端的列表，当新元素入list的时候，就会新建立一个ready_list，存放db编号和key，然后redis开始对ready_list 作一个事件列表，一个一个的将list key对应的阻塞了的客户端进行处理返回阻塞原语，直到列表为空，解除block_keys的阻塞状态，将ready_list表头元素出队列，然后处理ready_list中的下一个元素。', 'redis的阻塞机制', '', 'publish', 'open', 'open', '', 'redis%e7%9a%84%e9%98%bb%e5%a1%9e%e6%9c%ba%e5%88%b6', '', '', '2014-10-06 17:26:32', '2014-10-06 17:26:32', '', 0, 'http://unasm.sinaapp.com/?p=24', 0, 'post', '', 0),
(25, 1, '2014-10-06 17:26:32', '2014-10-06 17:26:32', 'redis是会阻塞的，当一个list pop但是list却为空的时候，就会发生阻塞，redis会阻塞客户端，直到有新元素进入list，或者是超时，或者是断电重启等强制性的结束，这个时候才会解除数据库对应的key的阻塞。\r\n\r\n解除阻塞也很简单，就是redis 所有的阻塞的key都会在一个db[i]-&gt;block_keys这个数组中，i表示阻塞的数据库编号，block_keys存放被阻塞的key，然后再通过链表实现一个阻塞的客户端的列表，当新元素入list的时候，就会新建立一个ready_list，存放db编号和key，然后redis开始对ready_list 作一个事件列表，一个一个的将list key对应的阻塞了的客户端进行处理返回阻塞原语，直到列表为空，解除block_keys的阻塞状态，将ready_list表头元素出队列，然后处理ready_list中的下一个元素。', 'redis的阻塞机制', '', 'inherit', 'open', 'open', '', '24-revision-v1', '', '', '2014-10-06 17:26:32', '2014-10-06 17:26:32', '', 24, 'http://unasm.sinaapp.com/?p=25', 0, 'revision', '', 0),
(26, 1, '2014-10-09 02:32:43', '2014-10-09 02:32:43', 'redis的事件分为两种，文本事件和时间事件，文本事件和更新文本有关，aof和rdb的数据保存和文本追加都会用到文本事件，对客户端的读和写也是通过文本事件来完成的。\r\n\r\n时间事件主要是通过链表的方式，通过在链表里面保存时间戳，然后定时扫描链表来完成一些特定的时间类型的工作，比如定期清理过期的键，更新内存的数据，或者是统计日志，等等吧', 'redis的事件机制', '', 'publish', 'open', 'open', '', 'redis%e7%9a%84%e4%ba%8b%e4%bb%b6%e6%9c%ba%e5%88%b6', '', '', '2014-10-09 02:32:43', '2014-10-09 02:32:43', '', 0, 'http://unasm.sinaapp.com/?p=26', 0, 'post', '', 0),
(27, 1, '2014-10-09 02:32:43', '2014-10-09 02:32:43', 'redis的事件分为两种，文本事件和时间事件，文本事件和更新文本有关，aof和rdb的数据保存和文本追加都会用到文本事件，对客户端的读和写也是通过文本事件来完成的。\r\n\r\n时间事件主要是通过链表的方式，通过在链表里面保存时间戳，然后定时扫描链表来完成一些特定的时间类型的工作，比如定期清理过期的键，更新内存的数据，或者是统计日志，等等吧', 'redis的事件机制', '', 'inherit', 'open', 'open', '', '26-revision-v1', '', '', '2014-10-09 02:32:43', '2014-10-09 02:32:43', '', 26, 'http://unasm.sinaapp.com/?p=27', 0, 'revision', '', 0),
(28, 1, '2014-10-09 13:30:46', '2014-10-09 13:30:46', '跳跃表，又名skiplist，是一种虽然不如红黑树，AVL树等自平衡树强大，却可以在查找，删除，增加达到（logn）^2的效率的一种表，并且可以O(n)的实现区间数据的范围查找获取，性能上不属于平衡树，编码却很更加简单，可以称得上是一种物美价廉的数据结构。我曾经手写一次红黑树，只是完成了插入，查找的功能，已经是160行代码量了，加上删除，估计要230左右的代码量吧。还是有点复杂的。\r\n\r\n常见的两种数据集合结构，一种是链表，一种是数组，前者在查找上的效率无法忍受，却在添加上很方便，后者可以做到随机查找，但是增删数据却是很麻烦，跳跃表可以理解为是链表的增强版，通过多个维度的有序链表实现查询上的优化，具体结构定义如下。\r\n\r\nclass SkipListNode{\r\n\r\nElement data;//用来存储数据\r\n\r\nSkipListNode forward[];//用来存储指针节点\r\n\r\nSkipListNode(Element d , int level)\r\n\r\n{\r\n\r\ndata = d;\r\n\r\nforward = new skipListNode[level+1];\r\n\r\n}\r\n\r\n}\r\n\r\nclass SkipList{\r\n\r\nint maxLevel;\r\n\r\nSkipListNode header;\r\n\r\nSkipListNode tail;\r\n\r\nSkipList(int maxLev)\r\n\r\n{\r\n\r\nmaxLevel = maxLev;\r\n\r\nheaer = new SkipListNode(null , maxLevel);\r\n\r\ntail = new SkipListNode(maxValue , maxLevel);\r\n\r\nfor(int i = 0; i &lt;= maxLevel;i++){\r\n\r\nheader.forward[i] = tail;\r\n\r\n}\r\n\r\n}\r\n\r\n}\r\n\r\n由以上可以看到，跳跃表是在header和tail之间构成一个区间，一个链表构成的区间，就像两堵墙 ， 这个链表是有序的，保证链表的最小的值都比header开头的大，最大的数组也不会超过maxValue，这样加上header,tail在一起，是一个完整的链表，而以后无论节点如何添加，都不会大于tail，都不会小于header，这点很重要。\r\n\r\n在上面的class中可以看到，  forward = new skipListNode[level+1]，forward指针纵向的构成一个结构体数组，而forward中每一个节点指向的结构体节点本身也有forward指向下一个结构体节点，这样就可以和header以及tail构成横向的链表，查找的时候，会在maxLevel开始查找，如果你把它理解成墙的话，就是在墙头开始查找，因为是从墙头，这个时候遍历的节点数目是统计意义上的(1/2)^Level * k (k是元素个数，level是所处的节点数)，在上层找到一个区间，然后进入下一层，根据在上一层的时候找到的已经缩小了的区间，在第二层的链表中，进一步缩小空间，一直进入到最后一层，唯一确定找到的节点。\r\n\r\n插入的方式很奇葩，也很让人意外，第一次遇到这种统计意义上的效率，理解上多少有点难以接受。根据上面的内容，找到具体要插入的位置，然后具体这个节点层级是多少，是通过摇色子来决定的，具体算法如下\r\n\r\nint generateRandomLevel(){\r\n\r\nint level = 0;\r\n\r\nwhile(newlevel &lt; maxLevel &amp;&amp; Math.random() &lt; 0.5) level++;\r\n\r\nreturn level;\r\n\r\n}\r\n\r\n这个就是那篇英文文档最后留下的如何确定新插入节点的算法，就是摇色子，当时不理解，想骂娘。其实是对的。从概率上来说，当前一共有k个节点，那么，最底层的链表长度就是k嘛，然后第一层链表长度，就应该是1/2 * k ，第二层长度就应该是(1/2)^2 *ｋ，而这个生成函数，可以再概率上保证每一层的链表的长度是对的，剩下的，就是要求这些链表的分布尽量的均匀离散，跳跃表没有保证掘对的离散平均，这点让我在个人揣测的时候百思不得其解到底如何做到绝对的离散，实际上，保证绝对的分布均匀是需要很大的代价的，需要向平衡树那样，跳跃表保证了统计意义上的均匀，因为统计意义上的个数毫无规律的分布在整个区间内，本身就是符合统计意义上离散的。\r\n\r\n&nbsp;\r\n\r\n==========================\r\n\r\n改天上图，整理\r\n\r\n=========================\r\n\r\n&nbsp;\r\n\r\n它的最底层，和我们大众所知的单向链表没有什么区别，第二层\r\n\r\n为了看这个skiplist，找了一篇10多页的英文文档啃，结果前5页没看懂说什么，后几页还不错，把查找讲的很透彻，插入却一句带过，fuck，顿时想骂娘，最后还是找人博客看明白怎么回事。算法太弱了，一怒之下将麻省的算法课全部下载下来，争取一两个月内啃完', 'redis之zset的底层结构-->跳跃表', '', 'publish', 'open', 'open', '', 'redis%e4%b9%8bzset%e7%9a%84%e5%ba%95%e5%b1%82%e7%bb%93%e6%9e%84-%e8%b7%b3%e8%b7%83%e8%a1%a8', '', '', '2014-10-09 13:30:46', '2014-10-09 13:30:46', '', 0, 'http://unasm.sinaapp.com/?p=28', 0, 'post', '', 0),
(29, 1, '2014-10-09 13:30:46', '2014-10-09 13:30:46', '跳跃表，又名skiplist，是一种虽然不如红黑树，AVL树等自平衡树强大，却可以在查找，删除，增加达到（logn）^2的效率的一种表，并且可以O(n)的实现区间数据的范围查找获取，性能上不属于平衡树，编码却很更加简单，可以称得上是一种物美价廉的数据结构。我曾经手写一次红黑树，只是完成了插入，查找的功能，已经是160行代码量了，加上删除，估计要230左右的代码量吧。还是有点复杂的。\r\n\r\n常见的两种数据集合结构，一种是链表，一种是数组，前者在查找上的效率无法忍受，却在添加上很方便，后者可以做到随机查找，但是增删数据却是很麻烦，跳跃表可以理解为是链表的增强版，通过多个维度的有序链表实现查询上的优化，具体结构定义如下。\r\n\r\nclass SkipListNode{\r\n\r\nElement data;//用来存储数据\r\n\r\nSkipListNode forward[];//用来存储指针节点\r\n\r\nSkipListNode(Element d , int level)\r\n\r\n{\r\n\r\ndata = d;\r\n\r\nforward = new skipListNode[level+1];\r\n\r\n}\r\n\r\n}\r\n\r\nclass SkipList{\r\n\r\nint maxLevel;\r\n\r\nSkipListNode header;\r\n\r\nSkipListNode tail;\r\n\r\nSkipList(int maxLev)\r\n\r\n{\r\n\r\nmaxLevel = maxLev;\r\n\r\nheaer = new SkipListNode(null , maxLevel);\r\n\r\ntail = new SkipListNode(maxValue , maxLevel);\r\n\r\nfor(int i = 0; i &lt;= maxLevel;i++){\r\n\r\nheader.forward[i] = tail;\r\n\r\n}\r\n\r\n}\r\n\r\n}\r\n\r\n由以上可以看到，跳跃表是在header和tail之间构成一个区间，一个链表构成的区间，就像两堵墙 ， 这个链表是有序的，保证链表的最小的值都比header开头的大，最大的数组也不会超过maxValue，这样加上header,tail在一起，是一个完整的链表，而以后无论节点如何添加，都不会大于tail，都不会小于header，这点很重要。\r\n\r\n在上面的class中可以看到，  forward = new skipListNode[level+1]，forward指针纵向的构成一个结构体数组，而forward中每一个节点指向的结构体节点本身也有forward指向下一个结构体节点，这样就可以和header以及tail构成横向的链表，查找的时候，会在maxLevel开始查找，如果你把它理解成墙的话，就是在墙头开始查找，因为是从墙头，这个时候遍历的节点数目是统计意义上的(1/2)^Level * k (k是元素个数，level是所处的节点数)，在上层找到一个区间，然后进入下一层，根据在上一层的时候找到的已经缩小了的区间，在第二层的链表中，进一步缩小空间，一直进入到最后一层，唯一确定找到的节点。\r\n\r\n插入的方式很奇葩，也很让人意外，第一次遇到这种统计意义上的效率，理解上多少有点难以接受。根据上面的内容，找到具体要插入的位置，然后具体这个节点层级是多少，是通过摇色子来决定的，具体算法如下\r\n\r\nint generateRandomLevel(){\r\n\r\nint level = 0;\r\n\r\nwhile(newlevel &lt; maxLevel &amp;&amp; Math.random() &lt; 0.5) level++;\r\n\r\nreturn level;\r\n\r\n}\r\n\r\n这个就是那篇英文文档最后留下的如何确定新插入节点的算法，就是摇色子，当时不理解，想骂娘。其实是对的。从概率上来说，当前一共有k个节点，那么，最底层的链表长度就是k嘛，然后第一层链表长度，就应该是1/2 * k ，第二层长度就应该是(1/2)^2 *ｋ，而这个生成函数，可以再概率上保证每一层的链表的长度是对的，剩下的，就是要求这些链表的分布尽量的均匀离散，跳跃表没有保证掘对的离散平均，这点让我在个人揣测的时候百思不得其解到底如何做到绝对的离散，实际上，保证绝对的分布均匀是需要很大的代价的，需要向平衡树那样，跳跃表保证了统计意义上的均匀，因为统计意义上的个数毫无规律的分布在整个区间内，本身就是符合统计意义上离散的。\r\n\r\n&nbsp;\r\n\r\n==========================\r\n\r\n改天上图，整理\r\n\r\n=========================\r\n\r\n&nbsp;\r\n\r\n它的最底层，和我们大众所知的单向链表没有什么区别，第二层\r\n\r\n为了看这个skiplist，找了一篇10多页的英文文档啃，结果前5页没看懂说什么，后几页还不错，把查找讲的很透彻，插入却一句带过，fuck，顿时想骂娘，最后还是找人博客看明白怎么回事。算法太弱了，一怒之下将麻省的算法课全部下载下来，争取一两个月内啃完', 'redis之zset的底层结构-->跳跃表', '', 'inherit', 'open', 'open', '', '28-revision-v1', '', '', '2014-10-09 13:30:46', '2014-10-09 13:30:46', '', 28, 'http://unasm.sinaapp.com/?p=29', 0, 'revision', '', 0),
(30, 1, '2014-10-10 11:16:59', '2014-10-10 11:16:59', '跳跃表，又名skiplist，是一种虽然不如红黑树，AVL树等自平衡树强大，却可以在查找，删除，增加达到（logn）^2的效率的一种表，并且可以O(n)的实现区间数据的范围查找获取，性能上不属于平衡树，编码却很更加简单，可以称得上是一种物美价廉的数据结构。我曾经手写一次红黑树，只是完成了插入，查找的功能，已经是160行代码量了，加上删除，估计要230左右的代码量吧。还是有点复杂的。\n\n常见的两种数据集合结构，一种是链表，一种是数组，前者在查找上的效率无法忍受，却在添加上很方便，后者可以做到随机查找，但是增删数据却是很麻烦，跳跃表可以理解为是链表的增强版，通过多个维度的有序链表实现查询上的优化，具体结构定义如下。\n\nclass SkipListNode{\n\nElement data;//用来存储数据\n\nSkipListNode forward[];//用来存储指针节点.\n\nSkipListNode(Element d , int level)\n\n{\n\ndata = d;\n\nforward = new skipListNode[level+1];\n\n}\n\n}\n\nclass SkipList{\n\nint maxLevel;\n\nSkipListNode header;\n\nSkipListNode tail;\n\nSkipList(int maxLev)\n\n{\n\nmaxLevel = maxLev;\n\nheaer = new SkipListNode(null , maxLevel);\n\ntail = new SkipListNode(maxValue , maxLevel);\n\nfor(int i = 0; i &lt;= maxLevel;i++){\n\nheader.forward[i] = tail;\n\n}\n\n}\n\n}\n\n由以上可以看到，跳跃表是在header和tail之间构成一个区间，一个链表构成的区间，就像两堵墙 ， 这个链表是有序的，保证链表的最小的值都比header开头的大，最大的数组也不会超过maxValue，这样加上header,tail在一起，是一个完整的链表，而以后无论节点如何添加，都不会大于tail，都不会小于header，这点很重要。<img class="alignnone" src="http://unasm-unasm.stor.sinaapp.com/sk.PNG" alt="skip list struct table" width="948" height="170" />\n\n在上面的class中可以看到，  forward = new skipListNode[level+1]，forward指针纵向的构成一个结构体数组，而forward中每一个节点指向的结构体节点本身也有forward指向下一个结构体节点，这样就可以和header以及tail构成横向的链表，查找的时候，会在maxLevel开始查找，如果你把它理解成墙的话，就是在墙头开始查找，因为是从墙头，这个时候遍历的节点数目是统计意义上的(1/2)^Level * k (k是元素个数，level是所处的节点数)，在上层找到一个区间，然后进入下一层，根据在上一层的时候找到的已经缩小了的区间，在第二层的链表中，进一步缩小空间，一直进入到最后一层，唯一确定找到的节点。\n\n插入的方式很奇葩，也很让人意外，第一次遇到这种统计意义上的效率，理解上多少有点难以接受。根据上面的内容，找到具体要插入的位置，然后具体这个节点层级是多少，是通过摇色子来决定的，具体算法如下\n\nint generateRandomLevel(){\n\nint level = 0;\n\nwhile(newlevel &lt; maxLevel &amp;&amp; Math.random() &lt; 0.5) level++;\n\nreturn level;\n\n}\n\n这个就是那篇英文文档最后留下的如何确定新插入节点的算法，就是摇色子，当时不理解，想骂娘。其实是对的。从概率上来说，当前一共有k个节点，那么，最底层的链表长度就是k嘛，然后第一层链表长度，就应该是1/2 * k ，第二层长度就应该是(1/2)^2 *ｋ，而这个生成函数，可以再概率上保证每一层的链表的长度是对的，剩下的，就是要求这些链表的分布尽量的均匀离散，跳跃表没有保证掘对的离散平均，这点让我在个人揣测的时候百思不得其解到底如何做到绝对的离散，实际上，保证绝对的分布均匀是需要很大的代价的，需要向平衡树那样，跳跃表保证了统计意义上的均匀，因为统计意义上的个数毫无规律的分布在整个区间内，本身就是符合统计意义上离散的。\n\n&nbsp;\n\n==========================\n\n&nbsp;\n\n=========================\n\n&nbsp;\n\n它的最底层，和我们大众所知的单向链表没有什么区别，第二层\n\n为了看这个skiplist，找了一篇10多页的英文文档啃，结果前5页没看懂说什么，后几页还不错，把查找讲的很透彻，插入却一句带过，fuck，顿时想骂娘，最后还是找人博客看明白怎么回事。算法太弱了，一怒之下将麻省的算法课全部下载下来，争取一两个月内啃完', 'redis之zset的底层结构-->跳跃表', '', 'inherit', 'open', 'open', '', '28-autosave-v1', '', '', '2014-10-10 11:16:59', '2014-10-10 11:16:59', '', 28, 'http://unasm.sinaapp.com/?p=30', 0, 'revision', '', 0),
(60, 1, '2014-10-30 07:53:39', '2014-10-30 07:53:39', '沟通是一个大问题，尤其是大家在一起创造一个全新的东西的时候，每当提出一些全新的理念和实现方案的时候，对方的理解，自己的描述，实现的可行性分析，各种方案的对比等等，总之，会是一件很麻烦的事情。\r\n\r\nso.脾气好是必须的，心平气和，不急不躁，不断理解具象别人说的内容，概念，场景，以及确认自己认知的正确，然后尽可能逻辑清晰的完整的，以平和的口吻来描述自己的理解，想法，担心等等，无论是描述，还是反驳，都最好带着场景来，太虚幻的东西都不好理解，具体的情形总是方便理解的。\r\n\r\n必要的工具总是很好的，比如xmind，axure，workbench，把自己的想法按照一种极其富有逻辑的概念，比如e-r图，虽然不是很直观，但是的确可以富有逻辑的描述数据库的设计，axure在演示交互的时候，尤其得天独厚的优势，最近我在设计e-r图的时候，觉得首先在workbench中设计好，然后在axure中添加备注解释，感觉不错，至少开始有人试图去解读了。', '关于项目开发中的沟通问题', '', 'publish', 'open', 'open', '', '%e5%85%b3%e4%ba%8e%e9%a1%b9%e7%9b%ae%e5%bc%80%e5%8f%91%e4%b8%ad%e7%9a%84%e6%b2%9f%e9%80%9a%e9%97%ae%e9%a2%98', '', '', '2014-10-30 07:53:39', '2014-10-30 07:53:39', '', 0, 'http://unasm.sinaapp.com/?p=60', 0, 'post', '', 0),
(32, 1, '2014-10-11 04:29:52', '2014-10-11 04:29:52', '连接mysql 遇到2002的错误，就是未连接的意思，问题是处在数据库上面了，可以通过mysql -u的命令行的方式连接数据库，也就是说，mysql本身是没有问题的，而问题是出在mysqld上面了，mysql的连接客户端。\r\n\r\n直接/etc/init.d/mysqld restart 报错说是/tmp/mysql.sock已经存在了，不行，删除/tmp/mysql.sock ，运行/etc/init.d/mysqld 也不行，一直卡死在了start上面，touch mysql.sock 也不行，有人说是mysql.sock默认应该放在/var/lib/mysql/mysql.sock ，放在mysql.sock中会找不到，于是修改my.cnf将socket修改成为/var/lib/mysql/mysql.sock 依旧是不行\r\n\r\n通过查看/etc/init.d/mysqld status 得到的结果是  mysqld dead but subsys locked  ，也就是说，mysqld 挂掉了，但是因为subsys已经锁上了，所以肯定无法重启，so      <span class="pln">rm </span><span class="pun">/</span><span class="kwd">var</span><span class="pun">/</span><span class="kwd">lock</span><span class="pun">/</span><span class="pln">subsys</span><span class="pun">/</span><span class="pln">mysqld   然后kill掉ps中的mysql进程 运行/etc/init.d/mysqld restart 不可以，kill掉ps中的mysq进程，运行/etc/init.d/mysql restart 然后发现就可以了</span>\r\n\r\n总的来说，这次的故障原因恐怕是mysqld因为意外退出运行了，因为mysql和mysqld是分别独立的，所以mysql还是在运行，只是说，因为没有了mysqld这个程序和mysql的中间层，所以报错说是no connect ，而mysql和mysqld的关系应该是mysql首先启动运行初始化环境，然后是mysql创建mysql.sock 然后mysqld启动，双方通过socket套字节通信，所以如果单独启动mysqld就会遇到mysql.sock已经存在的报错，kill掉 mysql的进程，让mysql也挂掉，然后重启mysql ，就是一切从头开始的意思，让mysql重新开始初始化欢迎，让他启动mysqld，创建他们约定的.sock文件，这样就可以又愉快的开始工作了。\r\n\r\n想解决问题，还是要理解他们的运行过程和机制啊。', '记一次 mysql 2002 error ', '', 'publish', 'open', 'open', '', '%e8%ae%b0%e4%b8%80%e6%ac%a1-mysql-2002-error', '', '', '2014-10-11 04:29:52', '2014-10-11 04:29:52', '', 0, 'http://unasm.sinaapp.com/?p=32', 0, 'post', '', 0),
(33, 1, '2014-10-11 04:29:52', '2014-10-11 04:29:52', '连接mysql 遇到2002的错误，就是未连接的意思，问题是处在数据库上面了，可以通过mysql -u的命令行的方式连接数据库，也就是说，mysql本身是没有问题的，而问题是出在mysqld上面了，mysql的连接客户端。\r\n\r\n直接/etc/init.d/mysqld restart 报错说是/tmp/mysql.sock已经存在了，不行，删除/tmp/mysql.sock ，运行/etc/init.d/mysqld 也不行，一直卡死在了start上面，touch mysql.sock 也不行，有人说是mysql.sock默认应该放在/var/lib/mysql/mysql.sock ，放在mysql.sock中会找不到，于是修改my.cnf将socket修改成为/var/lib/mysql/mysql.sock 依旧是不行\r\n\r\n通过查看/etc/init.d/mysqld status 得到的结果是  mysqld dead but subsys locked  ，也就是说，mysqld 挂掉了，但是因为subsys已经锁上了，所以肯定无法重启，so      <span class="pln">rm </span><span class="pun">/</span><span class="kwd">var</span><span class="pun">/</span><span class="kwd">lock</span><span class="pun">/</span><span class="pln">subsys</span><span class="pun">/</span><span class="pln">mysqld   然后kill掉ps中的mysql进程 运行/etc/init.d/mysqld restart 不可以，kill掉ps中的mysq进程，运行/etc/init.d/mysql restart 然后发现就可以了</span>\r\n\r\n总的来说，这次的故障原因恐怕是mysqld因为意外退出运行了，因为mysql和mysqld是分别独立的，所以mysql还是在运行，只是说，因为没有了mysqld这个程序和mysql的中间层，所以报错说是no connect ，而mysql和mysqld的关系应该是mysql首先启动运行初始化环境，然后是mysql创建mysql.sock 然后mysqld启动，双方通过socket套字节通信，所以如果单独启动mysqld就会遇到mysql.sock已经存在的报错，kill掉 mysql的进程，让mysql也挂掉，然后重启mysql ，就是一切从头开始的意思，让mysql重新开始初始化欢迎，让他启动mysqld，创建他们约定的.sock文件，这样就可以又愉快的开始工作了。\r\n\r\n想解决问题，还是要理解他们的运行过程和机制啊。', '记一次 mysql 2002 error ', '', 'inherit', 'open', 'open', '', '32-revision-v1', '', '', '2014-10-11 04:29:52', '2014-10-11 04:29:52', '', 32, 'http://unasm.sinaapp.com/?p=33', 0, 'revision', '', 0),
(74, 1, '2014-11-11 09:16:35', '2014-11-11 09:16:35', 'php 的 class_exists在执行的时候，会首先已经存在的对象里面进行查找，如果查找到的话，就停止，如果没有，会在autolaod中尝试着去加载新的对象，如果可以加载对应的对象，则include进来，如果没有对应对象加载，则返回FALSE', 'class_exists 的执行流程备忘', '', 'publish', 'open', 'open', '', 'class_exists-%e7%9a%84%e6%89%a7%e8%a1%8c%e6%b5%81%e7%a8%8b%e5%a4%87%e5%bf%98', '', '', '2014-11-11 09:16:35', '2014-11-11 09:16:35', '', 0, 'http://unasm.sinaapp.com/?p=74', 0, 'post', '', 0),
(37, 1, '2014-10-12 16:41:10', '2014-10-12 16:41:10', '很多时候用单例模式的时候，需要一个判断，比如instanceof instace  或者是if...有时候会给__construct 加上一个private的属性，通过静态的方式调用，\r\n\r\n但是有一种情况，就会让人很纠结，就是必须在__construct中将自己的实例化变量复制，但是却不能通过new的方式来赋值，比如A 对象 __construct中调用了一些函数，而这些函数中需要调用A对象的实例化对象，这个时候就会很纠结，比如今天我首先通过让子对象继承了父对象，然后在子函数的__construct中执行父函数的__construct然后子函数中调用了父函数的一些属性，这个时候因为__construct 没有完成，在父函数中new自身，然后判断是否已经实例化了的方式就行不同了，会陷入死循环，也不能__cosntruct 设置 private了，因为必须有构建函数的执行，这个时候有一种比较好的写法 $instance = &amp;$this;这个语句是可以用到__construct中的，而不会进入死循环，然后子对象和其他的函数，就可以引用$instance 变量了，这样就很完美的解决了单例 __construct 无法判断自身的问题', '单例模式指自我指向', '', 'publish', 'open', 'open', '', '%e5%8d%95%e4%be%8b%e6%a8%a1%e5%bc%8f%e6%8c%87%e8%87%aa%e6%88%91%e6%8c%87%e5%90%91', '', '', '2014-10-12 16:41:10', '2014-10-12 16:41:10', '', 0, 'http://unasm.sinaapp.com/?p=37', 0, 'post', '', 0),
(38, 1, '2014-10-12 16:41:10', '2014-10-12 16:41:10', '很多时候用单例模式的时候，需要一个判断，比如instanceof instace  或者是if...有时候会给__construct 加上一个private的属性，通过静态的方式调用，\r\n\r\n但是有一种情况，就会让人很纠结，就是必须在__construct中将自己的实例化变量复制，但是却不能通过new的方式来赋值，比如A 对象 __construct中调用了一些函数，而这些函数中需要调用A对象的实例化对象，这个时候就会很纠结，比如今天我首先通过让子对象继承了父对象，然后在子函数的__construct中执行父函数的__construct然后子函数中调用了父函数的一些属性，这个时候因为__construct 没有完成，在父函数中new自身，然后判断是否已经实例化了的方式就行不同了，会陷入死循环，也不能__cosntruct 设置 private了，因为必须有构建函数的执行，这个时候有一种比较好的写法 $instance = &amp;$this;这个语句是可以用到__construct中的，而不会进入死循环，然后子对象和其他的函数，就可以引用$instance 变量了，这样就很完美的解决了单例 __construct 无法判断自身的问题', '单例模式指自我指向', '', 'inherit', 'open', 'open', '', '37-revision-v1', '', '', '2014-10-12 16:41:10', '2014-10-12 16:41:10', '', 37, 'http://unasm.sinaapp.com/?p=38', 0, 'revision', '', 0),
(39, 1, '2014-10-15 03:34:59', '2014-10-15 03:34:59', '本篇是从从MYSQL性能调优与架构设计108页摘录的，因为觉得很重要，所以放到博客里面。\r\n\r\n说道Explain ,肯定很多读者之前都已经用过了 ，Mysql Query Optimizer 通过我们让它执行EXPLAIN命令来告诉我们它将使用一个怎么样的执行计划来优化我们的Query。所以，可以说，Explain是在优化Query时最直接有效的验证我们想法的工具。在本章前部分我就说过，一个好的SQL Performance Tuner在手动优化一个Query之前，头脑中就已经有了一个好的执行计划，后面的优化工作，只是为实现该执行计划而做出各种调整。\r\n\r\n在我们对某个Query优化过程中，需要不断的使用Explain来验证我们的各种调整是否有效。就像本书之前的很多实例都会通过Explain来验证和展示结果一样，所有的Query 优化都应该充分的利用他。\r\n\r\n我们先看一下在MySQL Explain功能中给我们展示的各种信息的解释：\r\n<ol>\r\n	<li>ID： Query Optimizer 所选定的执行计划中查询的序列号</li>\r\n	<li>Select_type： 所使用的查询类型，主要有这几种查询类型</li>\r\n</ol>\r\n<ul>\r\n	<li>DEPENDENT SUBQUERY :子查询中内层的第一个SELECT，依赖于外部查询的结果集；</li>\r\n	<li>DEPENDENT UNION : 子查询中的UNION，且为UNION中从第二个SELECT开始的后面所有的SLEECT ，同样依赖于外部查询的结果集合。</li>\r\n	<li>PRIMARY:子查询中的最外层查询，注意并不是主键查询</li>\r\n	<li>SIMPLE ：除了子查询或者是UNION之外的其他查询</li>\r\n	<li>SUBQUERY：子查询内层查询的第一个SELECT，结果并不一类与外部的查询结果集合；</li>\r\n	<li>UNCACHEABLE SUBQUERY：结果集无法缓存的子查询</li>\r\n	<li>UNION:UNION语句中第二个SELECT开始的后面所有的SELECT，第一个SELECT为PRIMARY。</li>\r\n	<li>UNION RESULT ：UNION中的合并结果。</li>\r\n</ul>\r\n<p style="padding-left: 30px;">3. Table： 显示这一步所访问的数据库表的名称</p>\r\n<p style="padding-left: 30px;">4.Type:告诉我们对表所使用的访问方式，主要包含如下集合中的类型</p>\r\n\r\n<ul>\r\n	<li>all: 全表扫描</li>\r\n	<li>const：读常量，且最多只有一条记录匹配，由于是常量，同时实际上只需要读取一次，（ps：通过主键读取一般会给这个）</li>\r\n	<li>eq_ref:最多只会有一条匹配的结果，一般是通过主键或者是唯一索引来访问</li>\r\n	<li>fulltext：（ps:没有）</li>\r\n	<li>index:全索引扫描</li>\r\n	<li>index_merge: 查询中同时使用两个索引，然后对索引结果进行merge之后再读取。</li>\r\n	<li>index_subquery: 子查询中的返回结果字段组合是一个索引（或索引组合）但不是主键或者是唯一索引</li>\r\n	<li>range：索引范围扫描</li>\r\n	<li>ref：Join 语句中被驱动表索引引用查询</li>\r\n	<li>ref_or_null: 与ref的唯一区别就是在使用索引之外再增加一个空值的查询</li>\r\n	<li>system： 系统表，表中只有一个一样数据</li>\r\n	<li>unique_subquery:子查询中的返回结果字段组合是主键或者是唯一约束</li>\r\n</ul>\r\n<p style="padding-left: 30px;">5. Possible_keys: 该查询可以利用的索引，如果没有任何索引可以使用，就是显示成null，这一项内容对优化的时候索引的调整非常重要</p>\r\n<p style="padding-left: 30px;">6. Key：MySQL Query Optimizer 从possible_keys中所选择使用的索引</p>\r\n<p style="padding-left: 30px;">7. Key_len:  被所选中使用的索引的索引键长度</p>\r\n<p style="padding-left: 30px;">8: Ref：列出通过常量，还是某个表的某个字段来过滤的</p>\r\n<p style="padding-left: 30px;">9：Rows: MySQL Query Optimizer 通过系统收集到的统计信息估算出来的结果集记录条数，</p>\r\n<p style="padding-left: 30px;">10：Extra：查询中每一步实现的额外细节信息，主要可能会是一下的内容</p>\r\n\r\n<ul>\r\n	<li>Distinct：查找distinct值，所以当mysql找到第一个匹配的结果之后，将停止该值的查询而转为后面其他值的查询</li>\r\n	<li>Full scan on NULL key:子查询中的一种优化方式，主要是遇到无法通过所以访问null值的时候使用。</li>\r\n	<li>Impossible Where noticed after reading const tables：MySQL Query Optimizer通过收集到的统计信息判断出不可能存在的结果</li>\r\n	<li>No tables：Query语句使用的From dual 或者不包含任何from字句</li>\r\n	<li>Not exists: 在某些做链接中的Mysql Query Optimizer 所通过改变原有的Query的组成而使用的办法，可以不犯减少数据访问的次数（ps：表示怀疑）</li>\r\n	<li>Range checked for each record:通过Mysql官方手册描述，当MySQL Query Optimizer 没有发现好的可以使用的索引的时候，如果发现如果来自前面的表的列值已知，可以部分所以可以使用,对前面的表的每个行进行组合，MySQL检查是否可以使用range，index_merge访问方法来索取行</li>\r\n	<li>Select tables optimized away ：当我们使用的某些聚合函数来访问存在索引的某个字段的时候，MySQL Query Optimizer 会通过索引而直接一次定位到所需的数据行完成整个查询。当然，前提是在Query中不能有GROUP BY操作。如使用min（）或者是max（）的时候</li>\r\n	<li>Using filesort ：当我们的Query中包含ORDER BY操作，而且无法利用索引完成排序操作的时候，MySQL Query Optimizer不得不选择相应的排序算法来实现。</li>\r\n	<li>Using index:所需要的数据只需要在Index即可获得而不需要到表中取数据。</li>\r\n	<li>Using index for group-by ：数据访问和Using index 一样，所需要的数据读取索引即可。而当Query中使用了GROUP BY或者是DISTINCT子句的时候，如果分组字段也索引中，Extra中的信息就会使using index for group-by</li>\r\n	<li>Using temporary： 当MYSQL在某些操作中必须使用临时表的时候，在Extra信息中就会出现Using temporary .主要常见于GROUP BY 和 ORDER BY等操作中。</li>\r\n	<li>Using where : 如果我们不是读取标的所有的数据，或者不仅仅是通过索引就可以获取所需要的数据，就会出现Using where 信息。</li>\r\n	<li>Using where with pushed condition： 这是一个仅仅在NDCluster存储引擎中才会出现的信息，而且还需要通过打开Condition Pushdown优化才可能被使用，控制参数为engine_condition_pushdown。</li>\r\n</ul>\r\n&nbsp;', 'explain的含义和使用', '', 'publish', 'open', 'open', '', 'explain%e7%9a%84%e5%90%ab%e4%b9%89%e5%92%8c%e4%bd%bf%e7%94%a8', '', '', '2014-10-15 03:34:59', '2014-10-15 03:34:59', '', 0, 'http://unasm.sinaapp.com/?p=39', 0, 'post', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(40, 1, '2014-10-15 03:34:59', '2014-10-15 03:34:59', '本篇是从从MYSQL性能调优与架构设计108页摘录的，因为觉得很重要，所以放到博客里面。\r\n\r\n说道Explain ,肯定很多读者之前都已经用过了 ，Mysql Query Optimizer 通过我们让它执行EXPLAIN命令来告诉我们它将使用一个怎么样的执行计划来优化我们的Query。所以，可以说，Explain是在优化Query时最直接有效的验证我们想法的工具。在本章前部分我就说过，一个好的SQL Performance Tuner在手动优化一个Query之前，头脑中就已经有了一个好的执行计划，后面的优化工作，只是为实现该执行计划而做出各种调整。\r\n\r\n在我们对某个Query优化过程中，需要不断的使用Explain来验证我们的各种调整是否有效。就像本书之前的很多实例都会通过Explain来验证和展示结果一样，所有的Query 优化都应该充分的利用他。\r\n\r\n我们先看一下在MySQL Explain功能中给我们展示的各种信息的解释：\r\n<ol>\r\n	<li>ID： Query Optimizer 所选定的执行计划中查询的序列号</li>\r\n	<li>Select_type： 所使用的查询类型，主要有这几种查询类型</li>\r\n</ol>\r\n<ul>\r\n	<li>DEPENDENT SUBQUERY :子查询中内层的第一个SELECT，依赖于外部查询的结果集；</li>\r\n	<li>DEPENDENT UNION : 子查询中的UNION，且为UNION中从第二个SELECT开始的后面所有的SLEECT ，同样依赖于外部查询的结果集合。</li>\r\n	<li>PRIMARY:子查询中的最外层查询，注意并不是主键查询</li>\r\n	<li>SIMPLE ：除了子查询或者是UNION之外的其他查询</li>\r\n	<li>SUBQUERY：子查询内层查询的第一个SELECT，结果并不一类与外部的查询结果集合；</li>\r\n	<li>UNCACHEABLE SUBQUERY：结果集无法缓存的子查询</li>\r\n	<li>UNION:UNION语句中第二个SELECT开始的后面所有的SELECT，第一个SELECT为PRIMARY。</li>\r\n	<li>UNION RESULT ：UNION中的合并结果。</li>\r\n</ul>\r\n<p style="padding-left: 30px;">3. Table： 显示这一步所访问的数据库表的名称</p>\r\n<p style="padding-left: 30px;">4.Type:告诉我们对表所使用的访问方式，主要包含如下集合中的类型</p>\r\n\r\n<ul>\r\n	<li>all: 全表扫描</li>\r\n	<li>const：读常量，且最多只有一条记录匹配，由于是常量，同时实际上只需要读取一次，（ps：通过主键读取一般会给这个）</li>\r\n	<li>eq_ref:最多只会有一条匹配的结果，一般是通过主键或者是唯一索引来访问</li>\r\n	<li>fulltext：（ps:没有）</li>\r\n	<li>index:全索引扫描</li>\r\n	<li>index_merge: 查询中同时使用两个索引，然后对索引结果进行merge之后再读取。</li>\r\n	<li>index_subquery: 子查询中的返回结果字段组合是一个索引（或索引组合）但不是主键或者是唯一索引</li>\r\n	<li>range：索引范围扫描</li>\r\n	<li>ref：Join 语句中被驱动表索引引用查询</li>\r\n	<li>ref_or_null: 与ref的唯一区别就是在使用索引之外再增加一个空值的查询</li>\r\n	<li>system： 系统表，表中只有一个一样数据</li>\r\n	<li>unique_subquery:子查询中的返回结果字段组合是主键或者是唯一约束</li>\r\n</ul>\r\n<p style="padding-left: 30px;">5. Possible_keys: 该查询可以利用的索引，如果没有任何索引可以使用，就是显示成null，这一项内容对优化的时候索引的调整非常重要</p>\r\n<p style="padding-left: 30px;">6. Key：MySQL Query Optimizer 从possible_keys中所选择使用的索引</p>\r\n<p style="padding-left: 30px;">7. Key_len:  被所选中使用的索引的索引键长度</p>\r\n<p style="padding-left: 30px;">8: Ref：列出通过常量，还是某个表的某个字段来过滤的</p>\r\n<p style="padding-left: 30px;">9：Rows: MySQL Query Optimizer 通过系统收集到的统计信息估算出来的结果集记录条数，</p>\r\n<p style="padding-left: 30px;">10：Extra：查询中每一步实现的额外细节信息，主要可能会是一下的内容</p>\r\n\r\n<ul>\r\n	<li>Distinct：查找distinct值，所以当mysql找到第一个匹配的结果之后，将停止该值的查询而转为后面其他值的查询</li>\r\n	<li>Full scan on NULL key:子查询中的一种优化方式，主要是遇到无法通过所以访问null值的时候使用。</li>\r\n	<li>Impossible Where noticed after reading const tables：MySQL Query Optimizer通过收集到的统计信息判断出不可能存在的结果</li>\r\n	<li>No tables：Query语句使用的From dual 或者不包含任何from字句</li>\r\n	<li>Not exists: 在某些做链接中的Mysql Query Optimizer 所通过改变原有的Query的组成而使用的办法，可以不犯减少数据访问的次数（ps：表示怀疑）</li>\r\n	<li>Range checked for each record:通过Mysql官方手册描述，当MySQL Query Optimizer 没有发现好的可以使用的索引的时候，如果发现如果来自前面的表的列值已知，可以部分所以可以使用,对前面的表的每个行进行组合，MySQL检查是否可以使用range，index_merge访问方法来索取行</li>\r\n	<li>Select tables optimized away ：当我们使用的某些聚合函数来访问存在索引的某个字段的时候，MySQL Query Optimizer 会通过索引而直接一次定位到所需的数据行完成整个查询。当然，前提是在Query中不能有GROUP BY操作。如使用min（）或者是max（）的时候</li>\r\n	<li>Using filesort ：当我们的Query中包含ORDER BY操作，而且无法利用索引完成排序操作的时候，MySQL Query Optimizer不得不选择相应的排序算法来实现。</li>\r\n	<li>Using index:所需要的数据只需要在Index即可获得而不需要到表中取数据。</li>\r\n	<li>Using index for group-by ：数据访问和Using index 一样，所需要的数据读取索引即可。而当Query中使用了GROUP BY或者是DISTINCT子句的时候，如果分组字段也索引中，Extra中的信息就会使using index for group-by</li>\r\n	<li>Using temporary： 当MYSQL在某些操作中必须使用临时表的时候，在Extra信息中就会出现Using temporary .主要常见于GROUP BY 和 ORDER BY等操作中。</li>\r\n	<li>Using where : 如果我们不是读取标的所有的数据，或者不仅仅是通过索引就可以获取所需要的数据，就会出现Using where 信息。</li>\r\n	<li>Using where with pushed condition： 这是一个仅仅在NDCluster存储引擎中才会出现的信息，而且还需要通过打开Condition Pushdown优化才可能被使用，控制参数为engine_condition_pushdown。</li>\r\n</ul>\r\n&nbsp;', 'explain的含义和使用', '', 'inherit', 'open', 'open', '', '39-revision-v1', '', '', '2014-10-15 03:34:59', '2014-10-15 03:34:59', '', 39, 'http://unasm.sinaapp.com/?p=40', 0, 'revision', '', 0),
(41, 1, '2014-10-15 11:42:01', '2014-10-15 11:42:01', '<p style="padding-left: 30px;">之所以取这个名字，我想是因为我想到了史瑜老师的缘故吧，但是为什么又想到了她呢？我想也许是因为太久不见的缘故吧，但是也可能是因为高三毕业之前，她给我写的留言吧。</p>\r\n\r\n<div style="padding-left: 30px;">我很喜欢她。我从小学到高中，11年的语文生涯中遇到过两个自己喜欢的语文老师，一个是初中，是李新建李老师，还有就是她了。</div>\r\n<div style="padding-left: 30px;">但是今天写这些东西却不是为了纪念，慢慢的，我渐渐的不再回想以前的人了，也不想再想起以前的时光，逝者逝矣，来日方长。我只是想为自己树立一块标志罢了。</div>\r\n<div>几天之前，我决定放弃自己投入了一年多时间研究的acm，原因有很多，缺钱，没有成就都是原因，whatever，it doesn''t matter。重要的是我现在投入到了一个新的事....中。</div>\r\n<div>回想过去，我想自从16岁之后，我走的就是自己选择的路。很多人干涉过，但是方向始终是自己的选择。在李志勇的博客中发现了一句自己觉得很可笑的话，大概就是说一些自己偶然的，无意识的决定影响了自己的人生。在我看来不过是说葡萄酸罢了。</div>\r\n<div style="padding-left: 30px;">acm ,电子设计都是自己的决定，放弃也是没有人干涉的，决定不再做一个好学生，抛弃学习也是自己的决定，虽有干涉，无怨无悔，亦不曾改变。</div>\r\n<div>现在决定投入到做网站中，也是我的决定，为什么，无所谓，这个不重要，重要的是我投入到了这项可以作为事业的事情中了，而且决定全力以赴。</div>\r\n<div>为什么没有去找一个游戏工作室？我想也许是因为亚奇的话吧，也或许是因为李欣明吧。还或许是因为自己不涉足网络游戏吧。还或者是因为那个太慢了吧。我需要钱。很需要钱。按照某某人的说法，我就是被钱绑架了，而且还无怨无悔。</div>\r\n<div> <wbr />  <wbr /> 啊，留下一条路等改日再走，但我知道路径绵绵无尽头，我恐怕难以再回返。</div>\r\n<div>啊，我放弃了acm，自己曾经多美好的憧憬。一年以来的专心无二的投入，到最后居然就是黯然的离开，无所谓服役，也就无所谓退役了。</div>\r\n<div style="padding-left: 30px;">我知道你是一个有思想的孩子，老师相信将来你一定会有所成就。</div>\r\n<div style="padding-left: 30px;">放弃思考就是放弃人生，接受思考，也是接受迷茫。有思想......</div>\r\n<div style="padding-left: 30px;">木有如此，人何以堪。</div>', '为了忘却的纪念', '', 'publish', 'open', 'open', '', '%e4%b8%ba%e4%ba%86%e5%bf%98%e5%8d%b4%e7%9a%84%e7%ba%aa%e5%bf%b5', '', '', '2014-10-15 11:42:01', '2014-10-15 11:42:01', '', 0, 'http://unasm.sinaapp.com/?page_id=41', 0, 'page', '', 0),
(42, 1, '2014-10-15 11:42:01', '2014-10-15 11:42:01', '<p style="padding-left: 30px;">之所以取这个名字，我想是因为我想到了史瑜老师的缘故吧，但是为什么又想到了她呢？我想也许是因为太久不见的缘故吧，但是也可能是因为高三毕业之前，她给我写的留言吧。</p>\r\n\r\n<div style="padding-left: 30px;">我很喜欢她。我从小学到高中，11年的语文生涯中遇到过两个自己喜欢的语文老师，一个是初中，是李新建李老师，还有就是她了。</div>\r\n<div style="padding-left: 30px;">但是今天写这些东西却不是为了纪念，慢慢的，我渐渐的不再回想以前的人了，也不想再想起以前的时光，逝者逝矣，来日方长。我只是想为自己树立一块标志罢了。</div>\r\n<div>几天之前，我决定放弃自己投入了一年多时间研究的acm，原因有很多，缺钱，没有成就都是原因，whatever，it doesn''t matter。重要的是我现在投入到了一个新的事....中。</div>\r\n<div>回想过去，我想自从16岁之后，我走的就是自己选择的路。很多人干涉过，但是方向始终是自己的选择。在李志勇的博客中发现了一句自己觉得很可笑的话，大概就是说一些自己偶然的，无意识的决定影响了自己的人生。在我看来不过是说葡萄酸罢了。</div>\r\n<div style="padding-left: 30px;">acm ,电子设计都是自己的决定，放弃也是没有人干涉的，决定不再做一个好学生，抛弃学习也是自己的决定，虽有干涉，无怨无悔，亦不曾改变。</div>\r\n<div>现在决定投入到做网站中，也是我的决定，为什么，无所谓，这个不重要，重要的是我投入到了这项可以作为事业的事情中了，而且决定全力以赴。</div>\r\n<div>为什么没有去找一个游戏工作室？我想也许是因为亚奇的话吧，也或许是因为李欣明吧。还或许是因为自己不涉足网络游戏吧。还或者是因为那个太慢了吧。我需要钱。很需要钱。按照某某人的说法，我就是被钱绑架了，而且还无怨无悔。</div>\r\n<div> <wbr />  <wbr /> 啊，留下一条路等改日再走，但我知道路径绵绵无尽头，我恐怕难以再回返。</div>\r\n<div>啊，我放弃了acm，自己曾经多美好的憧憬。一年以来的专心无二的投入，到最后居然就是黯然的离开，无所谓服役，也就无所谓退役了。</div>\r\n<div style="padding-left: 30px;">我知道你是一个有思想的孩子，老师相信将来你一定会有所成就。</div>\r\n<div style="padding-left: 30px;">放弃思考就是放弃人生，接受思考，也是接受迷茫。有思想......</div>\r\n<div style="padding-left: 30px;">木有如此，人何以堪。</div>', '为了忘却的纪念', '', 'inherit', 'open', 'open', '', '41-revision-v1', '', '', '2014-10-15 11:42:01', '2014-10-15 11:42:01', '', 41, 'http://unasm.sinaapp.com/?p=42', 0, 'revision', '', 0),
(76, 1, '2014-11-19 08:12:57', '0000-00-00 00:00:00', 'vim 通过命令:%s/"/''这么简单的命令，就可以将全文的所有的双引号替换成为单引号，如果只是想替换一部分而已，就在visual模式下选择对应的行，然后输入:%s/"/''替换即可', 'vim的替换功能', '', 'draft', 'open', 'open', '', '', '', '', '2014-11-19 08:12:57', '2014-11-19 08:12:57', '', 0, 'http://unasm.sinaapp.com/?p=76', 0, 'post', '', 0),
(48, 1, '2014-10-21 09:05:26', '2014-10-21 09:05:26', '好几天没有更新博客了，这样不行的，要养成习惯。\n\nredis的底层我还没有研究透彻，只能说研究 了一部分，本来打算看完了之后在写的，不过，为了养成习惯，也为了预防可能的惰性和迷失。\n\nredis 的字符串有点意思，对于运行在服务器上面的信息来说，弱类型很多时候是难免的，所以redis中处理字符的情况远远要大于处理int的情况，所以字符的操作必须优化，而众所周知，c的char[]可是不怎么强大的，有两个操作比较消耗资源，一个是append 字符的时候，一个是计算长度的时候，redis提出了一个叫做sds的东西，就是一个结构体，里面包含三个值,一个记录当前字符的长度length，一个是char数组中还剩下空闲的长度free，一个是字符存储地址，里面包含两种东西，一个是申请了，但是空闲的空间，由free标记，一个是已经存储了的字符长度，由length标记，这样，就可以将字符操作比较消耗资源的两个操作以比较小的代价给解决了。free标记的是空闲的内存，也就是说每次申请内存的时候，redis不会按照刚刚好来申请，而是根据一定的策略申请了多余的内存，这样的优点是以后再次需要内存的时候u，很大的可能性就是不会再次申请了，加快执行的效率，append的时候申请内存是按照用了的字符长度，length的二倍的大小申请的，如果已经使用的内存超过了1MB，那么以后每次申请的内存就是1MB，min（1MB,length），这样内存分配也有的放矢了，sds的使用遍布了redis的底层。\n\n第二个是ziplist 压缩列表，本来以为是很神奇的东西，结果发现跟我毕业设计差不多，简而言之，就是通过一系列精确到位的二进制定义保存字符串列表。开头zlbytes zltail zllen构成ziplist的头，zlbytes，zltail四个字节，zllen两个字节，这十个字节构成了ziplist的头，用来统计和查找表尾节点，zlbytes是表示ziplist目前占用的字节数，zltails到达表尾节点的偏移量，可以不用遍历整个ziplist的时候，找到表尾节点，zllen记录了ziplist的节点数。之后接着的位就是每个节点的具体内容，每个节点里头包括了pre_entry_length ,coding,length,content几个,pre_entype_length记录了前一个节点的长度，是为了方便调转到上一个节点,encoding表示在content里面记录的是整形还是char，什么类型的char，length记录了content的长度，类似于sds的length，最后就是保存内容的content。\n\n还有一个就是让人难以评判的结构，就是整数集和set，应用场景是元素全部是整数，且数量不是很多的时候（512个，可以通过配置修改）。简而言之，把int拆开使用，一共用来存储三种数据，int16,int32,int64 ，这样就节省了空间，一个int64就可以存储4个或者是2个数据了，添加数据的时候，按照有序数组来，需要O(n)的将插入位置之后的s因为总共的数量不会超过512个，所以是效率时间不会是太大的问题，因为', 'redis底层实现第一步', '', 'inherit', 'open', 'open', '', '22-autosave-v1', '', '', '2014-10-21 09:05:26', '2014-10-21 09:05:26', '', 22, 'http://unasm.sinaapp.com/?p=48', 0, 'revision', '', 0),
(49, 1, '2014-10-21 09:06:19', '2014-10-21 09:06:19', '好几天没有更新博客了，这样不行的，要养成习惯。\r\n\r\nredis的底层我还没有研究透彻，只能说研究 了一部分，本来打算看完了之后在写的，不过，为了养成习惯，也为了预防可能的惰性和迷失。\r\n\r\nredis 的字符串有点意思，对于运行在服务器上面的信息来说，弱类型很多时候是难免的，所以redis中处理字符的情况远远要大于处理int的情况，所以字符的操作必须优化，而众所周知，c的char[]可是不怎么强大的，有两个操作比较消耗资源，一个是append 字符的时候，一个是计算长度的时候，redis提出了一个叫做sds的东西，就是一个结构体，里面包含三个值,一个记录当前字符的长度length，一个是char数组中还剩下空闲的长度free，一个是字符存储地址，里面包含两种东西，一个是申请了，但是空闲的空间，由free标记，一个是已经存储了的字符长度，由length标记，这样，就可以将字符操作比较消耗资源的两个操作以比较小的代价给解决了。free标记的是空闲的内存，也就是说每次申请内存的时候，redis不会按照刚刚好来申请，而是根据一定的策略申请了多余的内存，这样的优点是以后再次需要内存的时候u，很大的可能性就是不会再次申请了，加快执行的效率，append的时候申请内存是按照用了的字符长度，length的二倍的大小申请的，如果已经使用的内存超过了1MB，那么以后每次申请的内存就是1MB，min（1MB,length），这样内存分配也有的放矢了，sds的使用遍布了redis的底层。\r\n\r\n第二个是ziplist 压缩列表，本来以为是很神奇的东西，结果发现跟我毕业设计差不多，简而言之，就是通过一系列精确到位的二进制定义保存字符串列表。开头zlbytes zltail zllen构成ziplist的头，zlbytes，zltail四个字节，zllen两个字节，这十个字节构成了ziplist的头，用来统计和查找表尾节点，zlbytes是表示ziplist目前占用的字节数，zltails到达表尾节点的偏移量，可以不用遍历整个ziplist的时候，找到表尾节点，zllen记录了ziplist的节点数。之后接着的位就是每个节点的具体内容，每个节点里头包括了pre_entry_length ,coding,length,content几个,pre_entype_length记录了前一个节点的长度，是为了方便调转到上一个节点,encoding表示在content里面记录的是整形还是char，什么类型的char，length记录了content的长度，类似于sds的length，最后就是保存内容的content。\r\n\r\n还有一个就是让人难以评判的结构，就是整数集和set，应用场景是元素全部是整数，且数量不是很多的时候（512个，可以通过配置修改）。简而言之，把int拆开使用，一共用来存储三种数据，int16,int32,int64 ，这样就节省了空间，一个int64就可以存储4个或者是2个数据了，添加数据的时候，按照有序数组来，需要O(n)的将插入位置之后的数据向后移动一个位置，因为总共的数量不会超过512个，所以是效率时间不会是太大的问题，当元素不再是整数的时候，或者是超过512的时候，存储结构就变成hash。', 'redis底层实现第一步', '', 'inherit', 'open', 'open', '', '22-revision-v1', '', '', '2014-10-21 09:06:19', '2014-10-21 09:06:19', '', 22, 'http://unasm.sinaapp.com/?p=49', 0, 'revision', '', 0),
(50, 1, '2014-10-21 09:27:01', '2014-10-21 09:27:01', '<div id="sina_keyword_ad_area2" class="articalContent   ">\r\n<div>找了好久，发现找不到这种vim内置函数的功能表，怒翻译之</div>\r\n<div></div>\r\n<div>nr2char() 获得一个字符的ASC2码值</div>\r\n<div>char2nr()  <wbr />获得字符的ASC1码值</div>\r\n<div>str2nr() 将字符串转化成数字;</div>\r\n<div>str2float 将字符转化成浮点数</div>\r\n<div>printf 根据%内容输出格式化的内容</div>\r\n<div>escape 去掉字符串中的转义\\</div>\r\n<div>shellesdcape 通过shell命令去除字符串</div>\r\n<div>fnameescape 通过vim命令去除字符串</div>\r\n<div>tr  <wbr />翻译字符</div>\r\n<div>strtrans 将字符串转成可输出的字符</div>\r\n<div>tolower</div>\r\n<div>toupper</div>\r\n<div>match 返回字符串中符合正则表达式的起始位置</div>\r\n<div>matchend 返回字符串中符合正则表达式的结束位置</div>\r\n<div>matchstr 检验字符串的格式</div>\r\n<div>matchlist 和matchstr差不多，返回字串</div>\r\n<div>stridx() 一个长字符串中一个短字符串的索引（位置？）</div>\r\n<div>strlen <wbr /></div>\r\n<div>sbustitute  <wbr />根据正则替换字符串</div>\r\n<div>submatch 获得substitude 中的匹配模式？（不理解）</div>\r\n<div>expand（） 添加字符串</div>\r\n<div>iconv 转码</div>\r\n<div>byteidx 应该是字节长度</div>\r\n<div>repeat 重复一个字符串多次</div>\r\n<div>eval</div>\r\n<div>列操作</div>\r\n<div>get 不报错的获得一项</div>\r\n<div>len 一个序列的列数</div>\r\n<div>empty 检查一个序列是否是空</div>\r\n<div>insert 向列中插入一项</div>\r\n<div>append 在结尾处添加一项</div>\r\n<div>add 向列中添加一项</div>\r\n<div>copy 制作一个影子copy数组</div>\r\n<div>deepcopy 拷贝全部数组</div>\r\n<div>filter 移除选定的项</div>\r\n<div>map 修改每一个列的项</div>\r\n<div>sort   排序</div>\r\n<div>reverse 翻转数组</div>\r\n<div>split 分割数组中的一个字符串</div>\r\n<div>join 将数组中的项和字符串合并</div>\r\n<div>range 返回一个数组的序列号</div>\r\n<div>string 将数组转化成字符串</div>\r\n<div>call 调用一个函数，以数组为参数</div>\r\n<div>index 一个数组的健值</div>\r\n<div>min <wbr /></div>\r\n<div>max</div>\r\n<div>count 计算一个值出现多少次</div>\r\n<div>repeat 重复一个数组多次</div>\r\n</div>\r\n<div id="share" class="shareUp"></div>', 'vim内置函数列表', '', 'publish', 'open', 'open', '', 'vim%e5%86%85%e7%bd%ae%e5%87%bd%e6%95%b0%e5%88%97%e8%a1%a8', '', '', '2014-10-21 09:27:01', '2014-10-21 09:27:01', '', 0, 'http://unasm.sinaapp.com/?p=50', 0, 'post', '', 0),
(51, 1, '2014-10-21 09:27:01', '2014-10-21 09:27:01', '<div id="sina_keyword_ad_area2" class="articalContent   ">\r\n<div>找了好久，发现找不到这种vim内置函数的功能表，怒翻译之</div>\r\n<div></div>\r\n<div>nr2char() 获得一个字符的ASC2码值</div>\r\n<div>char2nr()  <wbr />获得字符的ASC1码值</div>\r\n<div>str2nr() 将字符串转化成数字;</div>\r\n<div>str2float 将字符转化成浮点数</div>\r\n<div>printf 根据%内容输出格式化的内容</div>\r\n<div>escape 去掉字符串中的转义\\</div>\r\n<div>shellesdcape 通过shell命令去除字符串</div>\r\n<div>fnameescape 通过vim命令去除字符串</div>\r\n<div>tr  <wbr />翻译字符</div>\r\n<div>strtrans 将字符串转成可输出的字符</div>\r\n<div>tolower</div>\r\n<div>toupper</div>\r\n<div>match 返回字符串中符合正则表达式的起始位置</div>\r\n<div>matchend 返回字符串中符合正则表达式的结束位置</div>\r\n<div>matchstr 检验字符串的格式</div>\r\n<div>matchlist 和matchstr差不多，返回字串</div>\r\n<div>stridx() 一个长字符串中一个短字符串的索引（位置？）</div>\r\n<div>strlen <wbr /></div>\r\n<div>sbustitute  <wbr />根据正则替换字符串</div>\r\n<div>submatch 获得substitude 中的匹配模式？（不理解）</div>\r\n<div>expand（） 添加字符串</div>\r\n<div>iconv 转码</div>\r\n<div>byteidx 应该是字节长度</div>\r\n<div>repeat 重复一个字符串多次</div>\r\n<div>eval</div>\r\n<div>列操作</div>\r\n<div>get 不报错的获得一项</div>\r\n<div>len 一个序列的列数</div>\r\n<div>empty 检查一个序列是否是空</div>\r\n<div>insert 向列中插入一项</div>\r\n<div>append 在结尾处添加一项</div>\r\n<div>add 向列中添加一项</div>\r\n<div>copy 制作一个影子copy数组</div>\r\n<div>deepcopy 拷贝全部数组</div>\r\n<div>filter 移除选定的项</div>\r\n<div>map 修改每一个列的项</div>\r\n<div>sort   排序</div>\r\n<div>reverse 翻转数组</div>\r\n<div>split 分割数组中的一个字符串</div>\r\n<div>join 将数组中的项和字符串合并</div>\r\n<div>range 返回一个数组的序列号</div>\r\n<div>string 将数组转化成字符串</div>\r\n<div>call 调用一个函数，以数组为参数</div>\r\n<div>index 一个数组的健值</div>\r\n<div>min <wbr /></div>\r\n<div>max</div>\r\n<div>count 计算一个值出现多少次</div>\r\n<div>repeat 重复一个数组多次</div>\r\n</div>\r\n<div id="share" class="shareUp"></div>', 'vim内置函数列表', '', 'inherit', 'open', 'open', '', '50-revision-v1', '', '', '2014-10-21 09:27:01', '2014-10-21 09:27:01', '', 50, 'http://unasm.sinaapp.com/?p=51', 0, 'revision', '', 0),
(52, 1, '2014-10-21 15:32:27', '2014-10-21 15:32:27', 'php 的函数static 会影响函数的作用域，如果在class内部使用static修饰函数，那么$this-&gt;就不可以在static函数内部使用，因为static已经不在class内部作用域了，所以标志着属于函数内部属性的$this就无法使用了，static函数还是需要通过：：的方式访问比较好', 'php static的使用', '', 'publish', 'open', 'open', '', '52', '', '', '2014-10-21 15:51:23', '2014-10-21 15:51:23', '', 0, 'http://unasm.sinaapp.com/?p=52', 0, 'post', '', 0),
(53, 1, '2014-10-21 15:32:27', '2014-10-21 15:32:27', 'php 的函数static 会影响函数的作用域，如果在class内部使用static修饰函数，那么$this-&gt;就不可以在static函数内部使用，因为static已经不在class内部作用域了，所以标志着属于函数内部属性的$this就无法使用了，static函数还是需要通过：：的方式访问比较好', '', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-10-21 15:32:27', '2014-10-21 15:32:27', '', 52, 'http://unasm.sinaapp.com/?p=53', 0, 'revision', '', 0),
(54, 1, '2014-10-21 15:51:23', '2014-10-21 15:51:23', 'php 的函数static 会影响函数的作用域，如果在class内部使用static修饰函数，那么$this-&gt;就不可以在static函数内部使用，因为static已经不在class内部作用域了，所以标志着属于函数内部属性的$this就无法使用了，static函数还是需要通过：：的方式访问比较好', 'php static的使用', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-10-21 15:51:23', '2014-10-21 15:51:23', '', 52, 'http://unasm.sinaapp.com/?p=54', 0, 'revision', '', 0),
(55, 1, '2014-10-22 04:31:48', '2014-10-22 04:31:48', '<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/libevent.png" alt="" width="576" height="917" />', 'libevent代码结构', '', 'publish', 'open', 'open', '', 'libevent%e4%bb%a3%e7%a0%81%e7%bb%93%e6%9e%84', '', '', '2014-10-22 04:31:48', '2014-10-22 04:31:48', '', 0, 'http://unasm.sinaapp.com/?p=55', 0, 'post', '', 0),
(56, 1, '2014-10-22 04:31:48', '2014-10-22 04:31:48', '<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/libevent.png" alt="" width="576" height="917" />', 'libevent代码结构', '', 'inherit', 'open', 'open', '', '55-revision-v1', '', '', '2014-10-22 04:31:48', '2014-10-22 04:31:48', '', 55, 'http://unasm.sinaapp.com/?p=56', 0, 'revision', '', 0),
(57, 1, '2014-10-24 12:27:30', '2014-10-24 12:27:30', '<strong>指针允许以更简洁的方式引用大的数据结构，程序中的数据结构可以任意打，但是无论如何增长，数据结构总是位于计算机内存中，因此必然会有地址。利用指针，就可以使用地址作为一个完整的值的速记符。因为一个内存地址在内部表示为一个整数。当数据结构很大的时候，这种策略能够节约大量的内存空间。</strong>\r\n\r\n指针是程序的不同部分可以共享数据，如果将某一个数据值的地址从一个函数传递到另一个函数，两个函数，就可以使用同一个数据。\r\n\r\n利用指针，可以在程序执行过程中预留新的内存空间 ，在很多应用中，如果程序能够在运行的时候获得新的内存空间，并让指针指向这一个内存更加方便。\r\n\r\n指针可以用来记录数据项之间的关系，在高级程序设计应用中，指针被广泛的用于构造单个数据项之间的联系。比如通常可以在第一个数据的内部表示中包含指向下一个内存项的指针', '指针的意义', '', 'publish', 'open', 'open', '', '%e6%8c%87%e9%92%88%e7%9a%84%e6%84%8f%e4%b9%89', '', '', '2014-10-24 12:27:30', '2014-10-24 12:27:30', '', 0, 'http://unasm.sinaapp.com/?p=57', 0, 'post', '', 0),
(58, 1, '2014-10-24 12:27:30', '2014-10-24 12:27:30', '<strong>指针允许以更简洁的方式引用大的数据结构，程序中的数据结构可以任意打，但是无论如何增长，数据结构总是位于计算机内存中，因此必然会有地址。利用指针，就可以使用地址作为一个完整的值的速记符。因为一个内存地址在内部表示为一个整数。当数据结构很大的时候，这种策略能够节约大量的内存空间。</strong>\r\n\r\n指针是程序的不同部分可以共享数据，如果将某一个数据值的地址从一个函数传递到另一个函数，两个函数，就可以使用同一个数据。\r\n\r\n利用指针，可以在程序执行过程中预留新的内存空间 ，在很多应用中，如果程序能够在运行的时候获得新的内存空间，并让指针指向这一个内存更加方便。\r\n\r\n指针可以用来记录数据项之间的关系，在高级程序设计应用中，指针被广泛的用于构造单个数据项之间的联系。比如通常可以在第一个数据的内部表示中包含指向下一个内存项的指针', '指针的意义', '', 'inherit', 'open', 'open', '', '57-revision-v1', '', '', '2014-10-24 12:27:30', '2014-10-24 12:27:30', '', 57, 'http://unasm.sinaapp.com/?p=58', 0, 'revision', '', 0),
(61, 1, '2014-10-30 07:53:39', '2014-10-30 07:53:39', '沟通是一个大问题，尤其是大家在一起创造一个全新的东西的时候，每当提出一些全新的理念和实现方案的时候，对方的理解，自己的描述，实现的可行性分析，各种方案的对比等等，总之，会是一件很麻烦的事情。\r\n\r\nso.脾气好是必须的，心平气和，不急不躁，不断理解具象别人说的内容，概念，场景，以及确认自己认知的正确，然后尽可能逻辑清晰的完整的，以平和的口吻来描述自己的理解，想法，担心等等，无论是描述，还是反驳，都最好带着场景来，太虚幻的东西都不好理解，具体的情形总是方便理解的。\r\n\r\n必要的工具总是很好的，比如xmind，axure，workbench，把自己的想法按照一种极其富有逻辑的概念，比如e-r图，虽然不是很直观，但是的确可以富有逻辑的描述数据库的设计，axure在演示交互的时候，尤其得天独厚的优势，最近我在设计e-r图的时候，觉得首先在workbench中设计好，然后在axure中添加备注解释，感觉不错，至少开始有人试图去解读了。', '关于项目开发中的沟通问题', '', 'inherit', 'open', 'open', '', '60-revision-v1', '', '', '2014-10-30 07:53:39', '2014-10-30 07:53:39', '', 60, 'http://unasm.sinaapp.com/?p=61', 0, 'revision', '', 0),
(62, 1, '2014-10-31 10:08:34', '2014-10-31 10:08:34', '之所以回头去看C的内容，是因为自己学习php的过程中遇到了瓶颈，或者说是遇到了困难，以前翻阅php源码的时候，就感觉有问题，看的不太懂,很多c的内容搞不清楚，最近看libevent，这种感觉更加严重，于是去看看吧，翻阅一下c的基础，首选就是很久之前朋友推荐的《征服C指针》\r\n\r\n我没有找到完整版的，目前的版本只有73页，不过还是解答了我的一些疑惑的，比如函数指针的使用，int(*func)(double)这种声明的函数指针可以被函数赋值，然后以后可以通过这个指针调用这个函数，其实我想看void指针，一种函数指针的声明，可以被几种类型的函数根据判断条件赋值，这样的话，就可以执行不同的流程，这个用处比较大。\r\n\r\n关于结构体的内存的分配，其实一直都有两种方案，我挺好奇c是哪种方案的，一种是长度类型不确定通过特殊的控制字符找到对应的内容，一种是长度确定，宁可丢失一部分空间，也要保证内存是整块整块的，前者在很多时候会节省内存，后者会因为有规律的保存，可以加快索引的速度，c采用的是后者，果然效率优先，比如char ,double共存在一个结构体的时候，消耗的内存肯定不是1+8，而是4+8，因为要保证是4的倍数，加快速度。而结构体数据的命名，我想应该会像mysql的表那样，满足一个一对多的关系，一个表里面存储变量的名字，或许还有类型，其他的存储数据的地方保存了第一个表的地址，以后通过这个访问变量的名字和类型。\r\n\r\n还有重新复习了c函数指针的堆栈的概念', '征服C指针中解答的疑惑', '', 'publish', 'open', 'open', '', '%e5%be%81%e6%9c%8dc%e6%8c%87%e9%92%88%e4%b8%ad%e8%a7%a3%e7%ad%94%e7%9a%84%e7%96%91%e6%83%91', '', '', '2014-10-31 10:08:34', '2014-10-31 10:08:34', '', 0, 'http://unasm.sinaapp.com/?p=62', 0, 'post', '', 0),
(63, 1, '2014-10-31 10:08:34', '2014-10-31 10:08:34', '之所以回头去看C的内容，是因为自己学习php的过程中遇到了瓶颈，或者说是遇到了困难，以前翻阅php源码的时候，就感觉有问题，看的不太懂,很多c的内容搞不清楚，最近看libevent，这种感觉更加严重，于是去看看吧，翻阅一下c的基础，首选就是很久之前朋友推荐的《征服C指针》\r\n\r\n我没有找到完整版的，目前的版本只有73页，不过还是解答了我的一些疑惑的，比如函数指针的使用，int(*func)(double)这种声明的函数指针可以被函数赋值，然后以后可以通过这个指针调用这个函数，其实我想看void指针，一种函数指针的声明，可以被几种类型的函数根据判断条件赋值，这样的话，就可以执行不同的流程，这个用处比较大。\r\n\r\n关于结构体的内存的分配，其实一直都有两种方案，我挺好奇c是哪种方案的，一种是长度类型不确定通过特殊的控制字符找到对应的内容，一种是长度确定，宁可丢失一部分空间，也要保证内存是整块整块的，前者在很多时候会节省内存，后者会因为有规律的保存，可以加快索引的速度，c采用的是后者，果然效率优先，比如char ,double共存在一个结构体的时候，消耗的内存肯定不是1+8，而是4+8，因为要保证是4的倍数，加快速度。而结构体数据的命名，我想应该会像mysql的表那样，满足一个一对多的关系，一个表里面存储变量的名字，或许还有类型，其他的存储数据的地方保存了第一个表的地址，以后通过这个访问变量的名字和类型。\r\n\r\n还有重新复习了c函数指针的堆栈的概念', '征服C指针中解答的疑惑', '', 'inherit', 'open', 'open', '', '62-revision-v1', '', '', '2014-10-31 10:08:34', '2014-10-31 10:08:34', '', 62, 'http://unasm.sinaapp.com/?p=63', 0, 'revision', '', 0),
(64, 1, '2014-11-03 09:39:06', '2014-11-03 09:39:06', 'mysql 就像一个excel ，可以用来存储kv形式的数据，可以开几个字段，每个字段存储对应的数值，就像excel中的列一样。\r\n\r\n我们现在面临的一个问题，就是一个页面上有很多的数据，有些数据在这个页面有，下一个页面一样级别的页面没有，有些数据或许有很大可能性的根据之后情况的变化随机添加，基本上可以说是在变化中存在基础的不变情况。\r\n\r\n一般的来说，有三种方案。\r\n\r\n第一种，为所有可能的情况建立字段，每条数据一个字段，如果没有添加，就为空，如果出现了之前没有对应字段的数据，就修改mysql，添加新字段，添加新的表。这个的优点是加快了查找的速度，保证了每个页面，一条纪录，而且，逻辑结构简单，方便理解，代码层面也容易的很多，只是维护上的困难比较大一些，可能出现频频修改mysql表的情况，也许最后字段数目之多，已经达到了无法容忍的地步，存储空间的浪费，也是很大的问题，总之可扩展性和维护性是很大的问题。\r\n\r\n第二种就在可扩展性和可维护性上做的不错，简而言之，就是将所有的这些或许有，或许无的数据，以及将来添加的数据，通过序列化的方式保存在一个text中，将那些必须有的，通过创建对应的字段的方式保存，优点是无论添加多少类型的数据，都可以有对应的存储的地方，缺点是不能对应的查找，因为想获取对应的数据，必须将数据解析出来，然后才可以有对应的操作。\r\n\r\n第三种是在第二种基础上进行了一个升级，本来通过kv的形式序列化存储到text中的数据，目前就通过创建一个单独的表的方式，然后将kv的数据存储起来，value就提供一个text或者是varchar存储，保证所有的内容都可以保存到字段里面，如果以后查找的时候，可以通过key查找，也可以在不用解压数据的情况下，直接在sql中查找，满足了扩展性维护性的同时，避免了无法查找的问题，缺点是编码有些复杂，不过应该是目前看起来最好的方案', 'mysql存储变化数据的三种方案', '', 'publish', 'open', 'open', '', 'mysql%e5%ad%98%e5%82%a8%e6%95%b0%e6%8d%ae%e7%9a%84%e4%b8%89%e7%a7%8d%e6%96%b9%e5%bc%8f', '', '', '2014-11-03 09:44:50', '2014-11-03 09:44:50', '', 0, 'http://unasm.sinaapp.com/?p=64', 0, 'post', '', 0),
(65, 1, '2014-11-03 09:39:06', '2014-11-03 09:39:06', 'mysql 就像一个excel ，可以用来存储kv形式的数据，可以开几个字段，每个字段存储对应的数值，就像excel中的列一样。\r\n\r\n我们现在面临的一个问题，就是一个页面上有很多的数据，有些数据在这个页面有，下一个页面一样级别的页面没有，有些数据或许有很大可能性的根据之后情况的变化随机添加，基本上可以说是在变化中存在基础的不变情况。\r\n\r\n一般的来说，有三种方案。\r\n\r\n第一种，为所有可能的情况建立字段，每条数据一个字段，如果没有添加，就为空，如果出现了之前没有对应字段的数据，就修改mysql，添加新字段，添加新的表。这个的优点是加快了查找的速度，保证了每个页面，一条纪录，而且，逻辑结构简单，方便理解，代码层面也容易的很多，只是维护上的困难比较大一些，可能出现频频修改mysql表的情况，也许最后字段数目之多，已经达到了无法容忍的地步，存储空间的浪费，也是很大的问题，总之可扩展性和维护性是很大的问题。\r\n\r\n第二种就在可扩展性和可维护性上做的不错，简而言之，就是将所有的这些或许有，或许无的数据，以及将来添加的数据，通过序列化的方式保存在一个text中，将那些必须有的，通过创建对应的字段的方式保存，优点是无论添加多少类型的数据，都可以有对应的存储的地方，缺点是不能对应的查找，因为想获取对应的数据，必须将数据解析出来，然后才可以有对应的操作。\r\n\r\n第三种是在第二种基础上进行了一个升级，本来通过kv的形式序列化存储到text中的数据，目前就通过创建一个单独的表的方式，然后将kv的数据存储起来，value就提供一个text或者是varchar存储，保证所有的内容都可以保存到字段里面，如果以后查找的时候，可以通过key查找，也可以在不用解压数据的情况下，直接在sql中查找，满足了扩展性维护性的同时，避免了无法查找的问题，缺点是编码有些复杂，不过应该是目前看起来最好的方案', 'mysql存储数据的三种方式', '', 'inherit', 'open', 'open', '', '64-revision-v1', '', '', '2014-11-03 09:39:06', '2014-11-03 09:39:06', '', 64, 'http://unasm.sinaapp.com/?p=65', 0, 'revision', '', 0),
(66, 1, '2014-11-03 09:44:50', '2014-11-03 09:44:50', 'mysql 就像一个excel ，可以用来存储kv形式的数据，可以开几个字段，每个字段存储对应的数值，就像excel中的列一样。\r\n\r\n我们现在面临的一个问题，就是一个页面上有很多的数据，有些数据在这个页面有，下一个页面一样级别的页面没有，有些数据或许有很大可能性的根据之后情况的变化随机添加，基本上可以说是在变化中存在基础的不变情况。\r\n\r\n一般的来说，有三种方案。\r\n\r\n第一种，为所有可能的情况建立字段，每条数据一个字段，如果没有添加，就为空，如果出现了之前没有对应字段的数据，就修改mysql，添加新字段，添加新的表。这个的优点是加快了查找的速度，保证了每个页面，一条纪录，而且，逻辑结构简单，方便理解，代码层面也容易的很多，只是维护上的困难比较大一些，可能出现频频修改mysql表的情况，也许最后字段数目之多，已经达到了无法容忍的地步，存储空间的浪费，也是很大的问题，总之可扩展性和维护性是很大的问题。\r\n\r\n第二种就在可扩展性和可维护性上做的不错，简而言之，就是将所有的这些或许有，或许无的数据，以及将来添加的数据，通过序列化的方式保存在一个text中，将那些必须有的，通过创建对应的字段的方式保存，优点是无论添加多少类型的数据，都可以有对应的存储的地方，缺点是不能对应的查找，因为想获取对应的数据，必须将数据解析出来，然后才可以有对应的操作。\r\n\r\n第三种是在第二种基础上进行了一个升级，本来通过kv的形式序列化存储到text中的数据，目前就通过创建一个单独的表的方式，然后将kv的数据存储起来，value就提供一个text或者是varchar存储，保证所有的内容都可以保存到字段里面，如果以后查找的时候，可以通过key查找，也可以在不用解压数据的情况下，直接在sql中查找，满足了扩展性维护性的同时，避免了无法查找的问题，缺点是编码有些复杂，不过应该是目前看起来最好的方案', 'mysql存储变化数据的三种方案', '', 'inherit', 'open', 'open', '', '64-revision-v1', '', '', '2014-11-03 09:44:50', '2014-11-03 09:44:50', '', 64, 'http://unasm.sinaapp.com/?p=66', 0, 'revision', '', 0),
(67, 1, '2014-11-03 14:33:20', '2014-11-03 14:33:20', '如果将一段utf8的内容存储在mysql，就会遇到控制字符，然后就会发现自己想要保存的数据没有完全录入就停止了，所以这个时候，需要base64_encode一下，将内容转义', 'utf8存储的问题', '', 'publish', 'open', 'open', '', 'utf8%e5%ad%98%e5%82%a8%e7%9a%84%e9%97%ae%e9%a2%98', '', '', '2014-11-03 14:33:20', '2014-11-03 14:33:20', '', 0, 'http://unasm.sinaapp.com/?p=67', 0, 'post', '', 0),
(68, 1, '2014-11-03 14:33:20', '2014-11-03 14:33:20', '如果将一段utf8的内容存储在mysql，就会遇到控制字符，然后就会发现自己想要保存的数据没有完全录入就停止了，所以这个时候，需要base64_encode一下，将内容转义', 'utf8存储的问题', '', 'inherit', 'open', 'open', '', '67-revision-v1', '', '', '2014-11-03 14:33:20', '2014-11-03 14:33:20', '', 67, 'http://unasm.sinaapp.com/?p=68', 0, 'revision', '', 0),
(69, 1, '2014-11-04 03:32:26', '2014-11-04 03:32:26', '<strong>以下内容来自sina DBA建议</strong>\r\n<ol>\r\n	<li>表字符集选择UTF8（必须，ps：应该和内部环境有关系）</li>\r\n	<li>存储引擎使用innodb（强烈建议）</li>\r\n	<li>使用varbinary存储变长字符串（建议）</li>\r\n	<li>不在数据库中存储图片，文件等（强烈建议）</li>\r\n	<li>单张表的数据量控制在5000w一下（建议，ps：一般来说，我们会在500w以下的级别）</li>\r\n</ol>\r\n<h3>字符类的规范</h3>\r\n<ol>\r\n	<li>所有的字段均定义为not null（ps:出于存储空间的考虑）</li>\r\n	<li>使用unsigned 存储非负整数（必须）</li>\r\n	<li>使用timestamp存储时间（强烈建议）</li>\r\n	<li>使用varchar存储变长字符串（建议）</li>\r\n	<li>使用unsigned int存储ipv4的地址，而不是char（15）（必须）</li>\r\n	<li>使用tinyint来代替enum，set类型</li>\r\n	<li>少用并尽可能的拆分text，blob类型字符串(建议）</li>\r\n	<li>使用decimal存储精确浮点数（必须）</li>\r\n	<li>将字符串转为数字（建议）</li>\r\n	<li>尽可能的节省空间</li>\r\n</ol>\r\n<h3>索引的规范</h3>\r\n<ol>\r\n	<li>单个索引中的字段数不超过5个</li>\r\n	<li>单张表的索引数量不超过5个</li>\r\n	<li>字符串使用前缀索引，前缀长度不超过8个字符</li>\r\n	<li>对特殊字段，增加crc32或者md5的伪列并建立索引</li>\r\n	<li>区分度大的字段放在前面</li>\r\n	<li>核心的sql优先考虑非覆盖索引（建议）</li>\r\n	<li>避免冗余的索引</li>\r\n	<li>能不建立索引，尽量不建立索引（建议，平局数据密度和分布，查询更新的比例）</li>\r\n</ol>\r\n<h4>主键的索引</h4>\r\n<ol>\r\n	<li>不使用更新频繁的列</li>\r\n	<li>尽量不选择字符串列</li>\r\n	<li>不适用uuid md5 hash</li>\r\n	<li>默认使用非空的唯一键</li>\r\n	<li>建议选择自增或者是发号器</li>\r\n</ol>\r\n<h4>索引的禁忌</h4>\r\n<ol>\r\n	<li>不要在低基数列上建立索引，（ps：比如数据重复率15%以上）</li>\r\n	<li>不要再索引上进行数学运算和函数运算（必须）</li>\r\n	<li>尽量不要使用外键</li>\r\n	<li>不使用%前导的查询，例如like “%abc”（必须）</li>\r\n	<li>不在null列上加索引</li>\r\n	<li>不使用select　×（必须，减少ｃｐｕ和ｉｏ消耗网络带宽，无法使用覆盖索引，减少表结构带来的影响，ｓｅｌｅｃｔ／ｊｏｉｎ可能产生临时表，ｐｓ：不过在开发时期，可以使用这个，避免频繁更改）</li>\r\n	<li>不使用负向查询，例如 not in , != , not like(建议，无法使用索引，导致全表扫面，引起buffer pool利用率降低）</li>\r\n</ol>\r\n<h4>适用预编译语句</h4>\r\n<ol>\r\n	<li>一次解析，多次使用</li>\r\n	<li>只传递参数，比传递sql更有效率</li>\r\n	<li>可以避免sql注入</li>\r\n	<li>会导致索引失效</li>\r\n	<li>必须是最左前缀</li>\r\n	<li>不可能用到两个范围条件。</li>\r\n</ol>\r\n避免使用存储过程，触发器，函数等，降低业务的耦合度，避开bug\r\n\r\n避免使用大表的join，join消耗较多的内存，会产生临时表，mysql最擅长的是大表的主键/索引查询，不擅长数学运算\r\n\r\n尽量减少和数据库的交互次数\r\n\r\n合理的使用分页\r\n\r\nupate ，delete 语句不使用limit（必须）\r\n\r\n拒绝大的sql，拆分成小的sql ， 充分利用query cache，充分利用多核cpu\r\n\r\n同一个字段，将or 改成in，建议in小于500个，or的效率为O(n),in的效率为O（Log n）\r\n\r\n不同的字段，将or 改为union all', 'mysql 使用规范', '', 'publish', 'open', 'open', '', 'mysql-%e4%bd%bf%e7%94%a8%e8%a7%84%e8%8c%83', '', '', '2014-11-04 03:32:26', '2014-11-04 03:32:26', '', 0, 'http://unasm.sinaapp.com/?p=69', 0, 'post', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(70, 1, '2014-11-04 03:32:26', '2014-11-04 03:32:26', '<strong>以下内容来自sina DBA建议</strong>\r\n<ol>\r\n	<li>表字符集选择UTF8（必须，ps：应该和内部环境有关系）</li>\r\n	<li>存储引擎使用innodb（强烈建议）</li>\r\n	<li>使用varbinary存储变长字符串（建议）</li>\r\n	<li>不在数据库中存储图片，文件等（强烈建议）</li>\r\n	<li>单张表的数据量控制在5000w一下（建议，ps：一般来说，我们会在500w以下的级别）</li>\r\n</ol>\r\n<h3>字符类的规范</h3>\r\n<ol>\r\n	<li>所有的字段均定义为not null（ps:出于存储空间的考虑）</li>\r\n	<li>使用unsigned 存储非负整数（必须）</li>\r\n	<li>使用timestamp存储时间（强烈建议）</li>\r\n	<li>使用varchar存储变长字符串（建议）</li>\r\n	<li>使用unsigned int存储ipv4的地址，而不是char（15）（必须）</li>\r\n	<li>使用tinyint来代替enum，set类型</li>\r\n	<li>少用并尽可能的拆分text，blob类型字符串(建议）</li>\r\n	<li>使用decimal存储精确浮点数（必须）</li>\r\n	<li>将字符串转为数字（建议）</li>\r\n	<li>尽可能的节省空间</li>\r\n</ol>\r\n<h3>索引的规范</h3>\r\n<ol>\r\n	<li>单个索引中的字段数不超过5个</li>\r\n	<li>单张表的索引数量不超过5个</li>\r\n	<li>字符串使用前缀索引，前缀长度不超过8个字符</li>\r\n	<li>对特殊字段，增加crc32或者md5的伪列并建立索引</li>\r\n	<li>区分度大的字段放在前面</li>\r\n	<li>核心的sql优先考虑非覆盖索引（建议）</li>\r\n	<li>避免冗余的索引</li>\r\n	<li>能不建立索引，尽量不建立索引（建议，平局数据密度和分布，查询更新的比例）</li>\r\n</ol>\r\n<h4>主键的索引</h4>\r\n<ol>\r\n	<li>不使用更新频繁的列</li>\r\n	<li>尽量不选择字符串列</li>\r\n	<li>不适用uuid md5 hash</li>\r\n	<li>默认使用非空的唯一键</li>\r\n	<li>建议选择自增或者是发号器</li>\r\n</ol>\r\n<h4>索引的禁忌</h4>\r\n<ol>\r\n	<li>不要在低基数列上建立索引，（ps：比如数据重复率15%以上）</li>\r\n	<li>不要再索引上进行数学运算和函数运算（必须）</li>\r\n	<li>尽量不要使用外键</li>\r\n	<li>不使用%前导的查询，例如like “%abc”（必须）</li>\r\n	<li>不在null列上加索引</li>\r\n	<li>不使用select　×（必须，减少ｃｐｕ和ｉｏ消耗网络带宽，无法使用覆盖索引，减少表结构带来的影响，ｓｅｌｅｃｔ／ｊｏｉｎ可能产生临时表，ｐｓ：不过在开发时期，可以使用这个，避免频繁更改）</li>\r\n	<li>不使用负向查询，例如 not in , != , not like(建议，无法使用索引，导致全表扫面，引起buffer pool利用率降低）</li>\r\n</ol>\r\n<h4>适用预编译语句</h4>\r\n<ol>\r\n	<li>一次解析，多次使用</li>\r\n	<li>只传递参数，比传递sql更有效率</li>\r\n	<li>可以避免sql注入</li>\r\n	<li>会导致索引失效</li>\r\n	<li>必须是最左前缀</li>\r\n	<li>不可能用到两个范围条件。</li>\r\n</ol>\r\n避免使用存储过程，触发器，函数等，降低业务的耦合度，避开bug\r\n\r\n避免使用大表的join，join消耗较多的内存，会产生临时表，mysql最擅长的是大表的主键/索引查询，不擅长数学运算\r\n\r\n尽量减少和数据库的交互次数\r\n\r\n合理的使用分页\r\n\r\nupate ，delete 语句不使用limit（必须）\r\n\r\n拒绝大的sql，拆分成小的sql ， 充分利用query cache，充分利用多核cpu\r\n\r\n同一个字段，将or 改成in，建议in小于500个，or的效率为O(n),in的效率为O（Log n）\r\n\r\n不同的字段，将or 改为union all', 'mysql 使用规范', '', 'inherit', 'open', 'open', '', '69-revision-v1', '', '', '2014-11-04 03:32:26', '2014-11-04 03:32:26', '', 69, 'http://unasm.sinaapp.com/?p=70', 0, 'revision', '', 0),
(71, 1, '2014-11-04 09:00:59', '2014-11-04 09:00:59', '在前端的一个自定义的组件，在后台需要对应的支持，可以定义如下规范：\r\n\r\n这样就可以定义了一个前端的样式，交互的时候，后台对应的api等等，所有的验证，数据交互，显示文字等等，都可以在一个数组中搞定，以后有具体的页面样式，就可以直接写配置输入，而不是再手写一遍，\r\n\r\n突然感觉，自己以前的很多工作都是白白浪费了，做了很多无用功，这种表单，完全没有必要手写\r\n<p style="text-align: justify;">其实图片中的还是不够强大的，比如，我们可以定义键值为   blur =&gt; "userCheck"   约定前端在某一个input框blur的时候和后台的交互动作，change定义change的时候和后台的交互动作，样式有一套规定的组件，通过type来确定，通过这样实现组件化和规范化，尽可能的实现代码复用</p>\r\n\r\n\r\n[caption id="" align="alignnone" width="1256"]<img class="" src="https://api.sinas3.com/v1/SAE_unasm/unasm/QQ%E5%9B%BE%E7%89%8720141104162204.jpg" alt="" width="1256" height="828" /> 自定义表单[/caption]', '前端一个表单的', '', 'publish', 'open', 'open', '', '%e5%89%8d%e7%ab%af%e4%b8%80%e4%b8%aa%e8%a1%a8%e5%8d%95%e7%9a%84', '', '', '2014-11-04 09:00:59', '2014-11-04 09:00:59', '', 0, 'http://unasm.sinaapp.com/?p=71', 0, 'post', '', 0),
(72, 1, '2014-11-04 09:00:59', '2014-11-04 09:00:59', '在前端的一个自定义的组件，在后台需要对应的支持，可以定义如下规范：\r\n\r\n这样就可以定义了一个前端的样式，交互的时候，后台对应的api等等，所有的验证，数据交互，显示文字等等，都可以在一个数组中搞定，以后有具体的页面样式，就可以直接写配置输入，而不是再手写一遍，\r\n\r\n突然感觉，自己以前的很多工作都是白白浪费了，做了很多无用功，这种表单，完全没有必要手写\r\n<p style="text-align: justify;">其实图片中的还是不够强大的，比如，我们可以定义键值为   blur =&gt; "userCheck"   约定前端在某一个input框blur的时候和后台的交互动作，change定义change的时候和后台的交互动作，样式有一套规定的组件，通过type来确定，通过这样实现组件化和规范化，尽可能的实现代码复用</p>\r\n\r\n\r\n[caption id="" align="alignnone" width="1256"]<img class="" src="https://api.sinas3.com/v1/SAE_unasm/unasm/QQ%E5%9B%BE%E7%89%8720141104162204.jpg" alt="" width="1256" height="828" /> 自定义表单[/caption]', '前端一个表单的', '', 'inherit', 'open', 'open', '', '71-revision-v1', '', '', '2014-11-04 09:00:59', '2014-11-04 09:00:59', '', 71, 'http://unasm.sinaapp.com/?p=72', 0, 'revision', '', 0),
(75, 1, '2014-11-11 09:16:35', '2014-11-11 09:16:35', 'php 的 class_exists在执行的时候，会首先已经存在的对象里面进行查找，如果查找到的话，就停止，如果没有，会在autolaod中尝试着去加载新的对象，如果可以加载对应的对象，则include进来，如果没有对应对象加载，则返回FALSE', 'class_exists 的执行流程备忘', '', 'inherit', 'open', 'open', '', '74-revision-v1', '', '', '2014-11-11 09:16:35', '2014-11-11 09:16:35', '', 74, 'http://unasm.sinaapp.com/?p=75', 0, 'revision', '', 0),
(90, 1, '2014-11-27 17:30:32', '2014-11-27 17:30:32', '不同的网页，编码格式很可能不同，但是对应的数据库却只有一种，也就是存储的编码只有一种，怎么办呢？可以在不改变原来编码的情况下，base64之后，存储，然后将来需要的时候base64_decode了就可以了', '抓取网页时候的保存问题', '', 'publish', 'open', 'open', '', '%e6%8a%93%e5%8f%96%e7%bd%91%e9%a1%b5%e6%97%b6%e5%80%99%e7%9a%84%e4%bf%9d%e5%ad%98%e9%97%ae%e9%a2%98', '', '', '2014-11-27 17:30:48', '2014-11-27 17:30:48', '', 0, 'http://unasm.sinaapp.com/?p=90', 0, 'post', '', 0),
(79, 1, '2014-11-19 08:12:57', '2014-11-19 08:12:57', 'vim 通过命令:%s/"/''这么简单的命令，就可以将全文的所有的双引号替换成为单引号，如果只是想替换一部分而已，就在visual模式下选择对应的行，然后输入:%s/"/''替换即可', 'vim的替换功能', '', 'inherit', 'open', 'open', '', '76-revision-v1', '', '', '2014-11-19 08:12:57', '2014-11-19 08:12:57', '', 76, 'http://unasm.sinaapp.com/?p=79', 0, 'revision', '', 0),
(80, 1, '2014-11-19 09:01:33', '0000-00-00 00:00:00', '%s/"/''  %的意义是全文替换，在整个buffer内进行，如果不想全文，只是想选择范围内进行，可以去掉%', 'vim的替换功能', '', 'draft', 'open', 'open', '', '', '', '', '2014-11-19 09:01:33', '2014-11-19 09:01:33', '', 0, 'http://unasm.sinaapp.com/?p=80', 0, 'post', '', 0),
(81, 1, '2014-11-19 09:11:11', '2014-11-19 09:11:11', 'vim的替换功能是非常赞的，可以轻松的将全文或者是一段文字内的的特定的字符串替换成另外的字符串，而且是通过正则进行的，就给了替换非常强的扩展空间，不过，通常作为下意识就可以使用的功能来说，一定要非常简单，vim在这个做的非常好。\r\n<h3>1.选择模式下</h3>\r\n如下图 ，在选择模式下直接按：(冒号)会默认添加出来 <strong><code>''&lt;,''&gt;</code></strong>， 不太清楚什么意思，不过，不能去掉，它的功能是标注出选择的行范围，在这种情况下，不删除 <strong><code>''&lt;,''&gt;  </code></strong> 然后输入s/\\"/\\''就会将8行里面的“全部替换成单引号，注意，是8行全部，即使第一行的第一个双引号没有被选择，也会被替换，这个是要注意的\r\n\r\n如果删除了 <strong><code>''&lt;,''&gt;  </code></strong>结果是之后被选择的第一行内容被替换了，就是下面行里面的<code> "&lt;div class="row"&gt;</code>被替换，其他被选择的行没有任何影响，这要注意\r\n\r\n&nbsp;\r\n\r\n<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/vimchose.jpg" alt="" width="524" height="158" />\r\n<h3>2.全文替换</h3>\r\n如果是想全文，整个buffer内的替换，就可以:%s/"/'' 来完成，非常容易\r\n<h3>3.上下文替换</h3>\r\n首先要说的是，vim有一个非常好的插件，叫做numbers.vim ，可以标注出当前行，具体上下行的具体差距，然后配合number + j/k是非常好用的，具体演示效果如下<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/number.jpg" alt="" width="400" height="323" />\r\n\r\n可以看到，当前行是21行，具体templateObj有11行，在正常模式下（不确定当前什么模式，直接按esc就是normal模式了）11k就可以直接跳转到上面的第11行了，非常方便，\r\n\r\n如下命令 <code><strong>：21，+6s/\\"/\\''</strong></code> 可以实现，21行及其向下6行内的双引号替换成单引号，<code><strong>：21，6+s/\\"/\\''</strong></code> 则可以实现21行及其向上6行内的双引号替换成单引号，注意两者的差别，仅仅是一个+好的位置不同而已。\r\n\r\n还有一种方式，也可以实现上下文的引号替换，命令如下<code><strong> ：.,.+6s/\\"/\\'' </strong></code> 注意，这里有相对坐标的概念， 点号 .表示光标所在行.+6表示光标所在行的向下六行，同理.6+应该是表示光标所在行的向上六行，通过相对坐标实现双引号和单引号的替换', 'vim的:s替换功能', '', 'publish', 'open', 'open', '', 'vim%e7%9a%84s%e6%9b%bf%e6%8d%a2%e5%8a%9f%e8%83%bd', '', '', '2014-11-25 03:41:54', '2014-11-25 03:41:54', '', 0, 'http://unasm.sinaapp.com/?p=81', 0, 'post', '', 0),
(82, 1, '2014-11-19 09:01:33', '2014-11-19 09:01:33', '%s/"/''  %的意义是全文替换，在整个buffer内进行，如果不想全文，只是想选择范围内进行，可以去掉%', 'vim的替换功能', '', 'inherit', 'open', 'open', '', '80-revision-v1', '', '', '2014-11-19 09:01:33', '2014-11-19 09:01:33', '', 80, 'http://unasm.sinaapp.com/?p=82', 0, 'revision', '', 0),
(119, 1, '2014-12-27 10:39:27', '2014-12-27 10:39:27', '我有一个不是很好的习惯，就是太喜欢快捷键，更喜欢xfce而不是unity或者是win的原因，就是xfce的自定义快捷键更多，如今切换到Mac下，感觉有一些常用快捷键定义的不是很合理，网上却找不到修改快捷键的介绍，好像大家都不修改似的。\r\n\r\n下面介绍我摸索来的修改自定义快捷键的方式。\r\n\r\n第一部，打开系统偏好设置，然后点击键盘，选择快捷键\r\n\r\n<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/macshortfirst.png" alt="" width="1332" height="954" />\r\n\r\n&nbsp;\r\n\r\n下面是我之前已经定义的快捷键，估计很多人都已经猜到怎么做了，\r\n\r\n&nbsp;\r\n\r\n<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/macshortlast.png" alt="" width="1292" height="1134" />\r\n\r\n点击左下角的+号 弹出的页面里面，最上面选择快捷键控制的应用，如果想要控制的快捷键是全局的，就选择默认的全局的，如果不是就选择一个自己想控制的，然后在其他地方打开想控制的应用，比如，我下面演示的是如何修改终端的Zoom ,我首先打开了终端，然后在  控制栏 --&gt; Window 查看 ，发现系统控制缩放的窗口缩放的命令是Zoom ,目前对应的快捷键还没有，如果想修改的是tab页的切换，那对应的命令就是Show Next Tab 把这个命令写到第二个输入框里面，第三个输入框是输入想要的快捷键，比如我想要Command + Shift + Enter ，我同时按这三个键，就得到了想要的输入，注意，这个框不是一个字母一个字母输入的\r\n\r\n<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/choseName.png" alt="" width="850" height="564" />\r\n\r\n<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/Screen%20Shot%202014-12-27%20at%206.31.29%20PM.png" alt="" width="1306" height="1126" />\r\n\r\n然后点击添加，这样随便打开一个应用，同时按Command + Shift + Enter ，就可以看看效果了', 'Mac 修改  快捷键', '', 'publish', 'open', 'open', '', 'mac-%e4%bf%ae%e6%94%b9-%e5%bf%ab%e6%8d%b7%e9%94%ae', '', '', '2014-12-27 10:39:27', '2014-12-27 10:39:27', '', 0, 'http://unasm.sinaapp.com/?p=119', 0, 'post', '', 0),
(84, 1, '2014-11-19 09:11:11', '2014-11-19 09:11:11', 'vim的替换功能是非常赞的，可以轻松的将全文或者是一段文字内的的特定的字符串替换成另外的字符串，而且是通过正则进行的，就给了替换非常强的扩展空间，不过，通常作为下意识就可以使用的功能来说，一定要非常简单，vim在这个做的非常好。\r\n\r\n：s/"/'' 这四个字符，就可以完成选择区域内的双引号替换成单引号的功能，如果是想全文，整个buffer内的替换，就可以:%s/"/'' 来完成，非常容易', 'vim的:s替换功能', '', 'inherit', 'open', 'open', '', '81-revision-v1', '', '', '2014-11-19 09:11:11', '2014-11-19 09:11:11', '', 81, 'http://unasm.sinaapp.com/?p=84', 0, 'revision', '', 0),
(85, 1, '2014-11-24 04:47:53', '2014-11-24 04:47:53', 'vim里面在visual模式下，选择对应的文本，然后按下y是将选择的文本进行复制，之后可以在想要的地方p(paste)就可以将内容复制到指定的位置了，\r\n\r\nY在normal模式下，直接按Y，不用选择文本，就可以实现本行内容的复制，然后如果按p的话，就是直接整行内容的粘贴，\r\n\r\n最神奇的是这样，也是今天记录笔记的原因，在visual模式下，选择了几行，但是没有最上面一样没有在最开头，最后一行没有在最结尾，即visual模式下，没有全选择<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/biji.PNG" alt="" width="646" height="93" />\r\n\r\n这个时候，如果选择按Y，可以做到直接将四行代码直接全部复制下来', 'vim使用技巧之复制Y/y', '', 'publish', 'open', 'open', '', 'vim%e4%bd%bf%e7%94%a8%e6%8a%80%e5%b7%a7%e4%b9%8b%e5%a4%8d%e5%88%b6yy', '', '', '2014-11-24 04:47:53', '2014-11-24 04:47:53', '', 0, 'http://unasm.sinaapp.com/?p=85', 0, 'post', '', 0),
(86, 1, '2014-11-24 04:47:53', '2014-11-24 04:47:53', 'vim里面在visual模式下，选择对应的文本，然后按下y是将选择的文本进行复制，之后可以在想要的地方p(paste)就可以将内容复制到指定的位置了，\r\n\r\nY在normal模式下，直接按Y，不用选择文本，就可以实现本行内容的复制，然后如果按p的话，就是直接整行内容的粘贴，\r\n\r\n最神奇的是这样，也是今天记录笔记的原因，在visual模式下，选择了几行，但是没有最上面一样没有在最开头，最后一行没有在最结尾，即visual模式下，没有全选择<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/biji.PNG" alt="" width="646" height="93" />\r\n\r\n这个时候，如果选择按Y，可以做到直接将四行代码直接全部复制下来', 'vim使用技巧之复制Y/y', '', 'inherit', 'open', 'open', '', '85-revision-v1', '', '', '2014-11-24 04:47:53', '2014-11-24 04:47:53', '', 85, 'http://unasm.sinaapp.com/?p=86', 0, 'revision', '', 0),
(87, 1, '2014-11-25 03:41:27', '2014-11-25 03:41:27', 'vim的替换功能是非常赞的，可以轻松的将全文或者是一段文字内的的特定的字符串替换成另外的字符串，而且是通过正则进行的，就给了替换非常强的扩展空间，不过，通常作为下意识就可以使用的功能来说，一定要非常简单，vim在这个做的非常好。\n<h3>1.选择模式下</h3>\n如下图 ，在选择模式下直接按：(冒号)会默认添加出来 <strong><code>''&lt;,''&gt;</code></strong>， 不太清楚什么意思，不过，不能去掉，它的功能是标注出选择的行范围，在这种情况下，不删除 <strong><code>''&lt;,''&gt;  </code></strong> 然后输入s/\\"/\\''就会将8行里面的“全部替换成单引号，注意，是8行全部，即使第一行的第一个双引号没有被选择，也会被替换，这个是要注意的\n\n如果删除了 <strong><code>''&lt;,''&gt;  </code></strong>结果是之后被选择的第一行内容被替换了，就是下面行里面的<code> "&lt;div class="row"&gt;</code>被替换，其他被选择的行没有任何影响，这要注意\n\n&nbsp;\n\n<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/vimchose.jpg" alt="" width="524" height="158" />\n<h3>2.全文替换</h3>\n如果是想全文，整个buffer内的替换，就可以:%s/"/'' 来完成，非常容易\n<h3>3.上下文替换</h3>\n首先要说的是，vim有一个非常好的插件，叫做numbers.vim ，可以标注出当前行，具体上下行的具体差距，然后配合number + j/k是非常好用的，具体演示效果如下<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/number.jpg" alt="" width="400" height="323" />\n\n可以看到，当前行是21行，具体templateObj有11行，在正常模式下（不确定当前什么模式，直接按esc就是normal模式了）11k就可以直接跳转到上面的第11行了，非常方便，\n\n如下命令 <code><strong>：21，+6s/\\"/\\''</strong></code> 可以实现，21行及其向下6行内的双引号替换成单引号，<code><strong>：21，6+s/\\"/\\''</strong></code> 则可以实现21行及其向上6行内的双引号替换成单引号，注意两者的差别，仅仅是一个+好的位置不同而已。\n\n还有一种方式，也可以实现上下文的引号替换，命令如下<code><strong> ：.,.+6s/\\"/\\'' </strong></code>  注意，这里有相对坐标的概念， 点号 .表示光标所在行.+6表示光标所在行的向下六行，同理.6+应该是表示光标所在行的向上六行', 'vim的:s替换功能', '', 'inherit', 'open', 'open', '', '81-autosave-v1', '', '', '2014-11-25 03:41:27', '2014-11-25 03:41:27', '', 81, 'http://unasm.sinaapp.com/?p=87', 0, 'revision', '', 0),
(88, 1, '2014-11-25 03:41:54', '2014-11-25 03:41:54', 'vim的替换功能是非常赞的，可以轻松的将全文或者是一段文字内的的特定的字符串替换成另外的字符串，而且是通过正则进行的，就给了替换非常强的扩展空间，不过，通常作为下意识就可以使用的功能来说，一定要非常简单，vim在这个做的非常好。\r\n<h3>1.选择模式下</h3>\r\n如下图 ，在选择模式下直接按：(冒号)会默认添加出来 <strong><code>''&lt;,''&gt;</code></strong>， 不太清楚什么意思，不过，不能去掉，它的功能是标注出选择的行范围，在这种情况下，不删除 <strong><code>''&lt;,''&gt;  </code></strong> 然后输入s/\\"/\\''就会将8行里面的“全部替换成单引号，注意，是8行全部，即使第一行的第一个双引号没有被选择，也会被替换，这个是要注意的\r\n\r\n如果删除了 <strong><code>''&lt;,''&gt;  </code></strong>结果是之后被选择的第一行内容被替换了，就是下面行里面的<code> "&lt;div class="row"&gt;</code>被替换，其他被选择的行没有任何影响，这要注意\r\n\r\n&nbsp;\r\n\r\n<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/vimchose.jpg" alt="" width="524" height="158" />\r\n<h3>2.全文替换</h3>\r\n如果是想全文，整个buffer内的替换，就可以:%s/"/'' 来完成，非常容易\r\n<h3>3.上下文替换</h3>\r\n首先要说的是，vim有一个非常好的插件，叫做numbers.vim ，可以标注出当前行，具体上下行的具体差距，然后配合number + j/k是非常好用的，具体演示效果如下<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/number.jpg" alt="" width="400" height="323" />\r\n\r\n可以看到，当前行是21行，具体templateObj有11行，在正常模式下（不确定当前什么模式，直接按esc就是normal模式了）11k就可以直接跳转到上面的第11行了，非常方便，\r\n\r\n如下命令 <code><strong>：21，+6s/\\"/\\''</strong></code> 可以实现，21行及其向下6行内的双引号替换成单引号，<code><strong>：21，6+s/\\"/\\''</strong></code> 则可以实现21行及其向上6行内的双引号替换成单引号，注意两者的差别，仅仅是一个+好的位置不同而已。\r\n\r\n还有一种方式，也可以实现上下文的引号替换，命令如下<code><strong> ：.,.+6s/\\"/\\'' </strong></code> 注意，这里有相对坐标的概念， 点号 .表示光标所在行.+6表示光标所在行的向下六行，同理.6+应该是表示光标所在行的向上六行，通过相对坐标实现双引号和单引号的替换', 'vim的:s替换功能', '', 'inherit', 'open', 'open', '', '81-revision-v1', '', '', '2014-11-25 03:41:54', '2014-11-25 03:41:54', '', 81, 'http://unasm.sinaapp.com/?p=88', 0, 'revision', '', 0),
(91, 1, '2014-11-27 17:30:32', '2014-11-27 17:30:32', '不同的网页，编码格式很可能不同，但是对应的数据库却只有一种，也就是存储的编码只有一种，怎么办呢？可以在不改变原来编码的情况下，base64之后，存储，然后将来需要的时候base64_decode了就可以了', '抓取网页时候的保存问题', '', 'inherit', 'open', 'open', '', '90-revision-v1', '', '', '2014-11-27 17:30:32', '2014-11-27 17:30:32', '', 90, 'http://unasm.sinaapp.com/?p=91', 0, 'revision', '', 0),
(93, 1, '2014-12-10 10:11:30', '2014-12-10 10:11:30', '在网站设计中mvc是最流行的，但是在具体操作的时候，这个结构却是见仁见智的，v的划分是很清晰的，c和m的权限划分，却不是这么明确，从整个设计结构上来说，model是用来控制数据的，在最初的操作中，我是把model用来操作表，每个model class用来控制一个表，controller就像胶水一样，用来处理来自页面的接口，json的，xml的，页面的，ajax的，每个controller 对一个页面负责，不同页面之间的复用部分，放在lib里面，不同的controller里面调用library 来实现代码复用，好处是减少了层级，mvc三个级别+一个lib附属级别。\r\n\r\n但是遇到的问题是 lib 和 controller的职能划分问题，很多时候是写一段代码的时候，首先放在controller里面，然后发现其他的页面也需要这个功能，就把这段代码复制到了library里面，然后两处调用这个，这个还算好的，如果开发者不是同一个人的话，就会遇到两个人实现了相同的逻辑，然后谁也没有放到lib里面，或者是放在lib里面之后，放在什么地方的问题，重新命名一个文件，还是添加在某个类里面，这些都是值得思考和商榷的问题，约定里面模糊的地方。\r\n\r\n最新接触了一种新的理想，可以称之为mmvc，剥离了之前的lib附属级别，框架里面提供的工具lib保留，这个在使用框架的时候应该都清楚这些类的存在的，在自己添加的代码里面不再增加这些类，在mvc三层的基础上增加model类，编程modeldb + model + controller + view 四层级别，mdoeldb和我之前定义的每个model  class 控制操作一个表一样，controller被削弱，只是负责接收从页面外部发起的请求数据，然后检验这些数据，调用model 返回数据，\r\n\r\nmodeldb ，controller之间不能存在互叼，model之间可以，感觉是强制性的把lib的功能划分进入了mvc的层级里面，至于效果，拭目以待', '论mvc补充之mmvc', '', 'publish', 'open', 'open', '', '%e8%ae%bamvc%e8%a1%a5%e5%85%85%e4%b9%8bmmvc', '', '', '2014-12-10 10:11:30', '2014-12-10 10:11:30', '', 0, 'http://unasm.sinaapp.com/?p=93', 0, 'post', '', 0),
(94, 1, '2014-12-10 10:11:30', '2014-12-10 10:11:30', '在网站设计中mvc是最流行的，但是在具体操作的时候，这个结构却是见仁见智的，v的划分是很清晰的，c和m的权限划分，却不是这么明确，从整个设计结构上来说，model是用来控制数据的，在最初的操作中，我是把model用来操作表，每个model class用来控制一个表，controller就像胶水一样，用来处理来自页面的接口，json的，xml的，页面的，ajax的，每个controller 对一个页面负责，不同页面之间的复用部分，放在lib里面，不同的controller里面调用library 来实现代码复用，好处是减少了层级，mvc三个级别+一个lib附属级别。\r\n\r\n但是遇到的问题是 lib 和 controller的职能划分问题，很多时候是写一段代码的时候，首先放在controller里面，然后发现其他的页面也需要这个功能，就把这段代码复制到了library里面，然后两处调用这个，这个还算好的，如果开发者不是同一个人的话，就会遇到两个人实现了相同的逻辑，然后谁也没有放到lib里面，或者是放在lib里面之后，放在什么地方的问题，重新命名一个文件，还是添加在某个类里面，这些都是值得思考和商榷的问题，约定里面模糊的地方。\r\n\r\n最新接触了一种新的理想，可以称之为mmvc，剥离了之前的lib附属级别，框架里面提供的工具lib保留，这个在使用框架的时候应该都清楚这些类的存在的，在自己添加的代码里面不再增加这些类，在mvc三层的基础上增加model类，编程modeldb + model + controller + view 四层级别，mdoeldb和我之前定义的每个model  class 控制操作一个表一样，controller被削弱，只是负责接收从页面外部发起的请求数据，然后检验这些数据，调用model 返回数据，\r\n\r\nmodeldb ，controller之间不能存在互叼，model之间可以，感觉是强制性的把lib的功能划分进入了mvc的层级里面，至于效果，拭目以待', '论mvc补充之mmvc', '', 'inherit', 'open', 'open', '', '93-revision-v1', '', '', '2014-12-10 10:11:30', '2014-12-10 10:11:30', '', 93, 'http://unasm.sinaapp.com/?p=94', 0, 'revision', '', 0),
(96, 1, '2014-12-11 17:30:36', '2014-12-11 17:30:36', '并不是想做一个日历的空间，而是用js判断当前时间的星期，月份和日期，以及前后几天时间，月份，日期的功能，如果自己去手写，不断考虑30还是31天的话，会有点麻烦，虽然阳历的时间变化小一些，但是还是挺麻烦的，可以new Date的时候，指定特定时刻的时间戳，然后js的Date函数会自动监测出来那个时刻的日期，月份等等\r\n\r\n&nbsp;\r\n<pre>var myDate = new Date;\r\nvar tomorrow = new Date( myDate.valueOf() + 86400000 );\r\n</pre>\r\n这样就可以判断出来明天的时间，而不用再去模数字，判断今天的日期，星期等等\r\n\r\n<hr />\r\n\r\n&nbsp;\r\n\r\n上面有个地方不够优雅的，是 myDate 只是为tomorrow提供偏移量的基准的，没有其他的用处，单独用一个变量保存起来没有什么必要，所以可以考虑去掉，比如写成这样\r\n<pre>\r\n<code>\r\nvar tomorrow = new Date( new Date().valueOf() + 86400000 );\r\n</code>\r\n</pre>\r\n简单优雅了很多，节省了代码和内存\r\n&nbsp;', '关于js 实现日历的功能', '', 'publish', 'open', 'open', '', '%e5%85%b3%e4%ba%8ejs-%e5%ae%9e%e7%8e%b0%e6%97%a5%e5%8e%86%e7%9a%84%e5%8a%9f%e8%83%bd', '', '', '2014-12-17 02:37:12', '2014-12-17 02:37:12', '', 0, 'http://unasm.sinaapp.com/?p=96', 0, 'post', '', 0),
(97, 1, '2014-12-11 17:30:36', '2014-12-11 17:30:36', '并不是想做一个日历的空间，而是用js判断当前时间的星期，月份和日期，以及前后几天时间，月份，日期的功能，如果自己去手写，不断考虑30还是31天的话，会有点麻烦，虽然阳历的时间变化小一些，但是还是挺麻烦的，可以new Date的时候，指定特定时刻的时间戳，然后js的Date函数会自动监测出来那个时刻的日期，月份等等\r\n\r\n&nbsp;\r\n<pre>var myDate = new Date;\r\nvar tomorrow = new Date( myDate.valueOf() + 86400000 );\r\n</pre>\r\n这样就可以判断出来明天的时间，而不用再去模数字，判断今天的日期，星期等等', '关于js 实现日历的功能', '', 'inherit', 'open', 'open', '', '96-revision-v1', '', '', '2014-12-11 17:30:36', '2014-12-11 17:30:36', '', 96, 'http://unasm.sinaapp.com/?p=97', 0, 'revision', '', 0),
(98, 1, '2014-12-17 02:35:31', '2014-12-17 02:35:31', '并不是想做一个日历的空间，而是用js判断当前时间的星期，月份和日期，以及前后几天时间，月份，日期的功能，如果自己去手写，不断考虑30还是31天的话，会有点麻烦，虽然阳历的时间变化小一些，但是还是挺麻烦的，可以new Date的时候，指定特定时刻的时间戳，然后js的Date函数会自动监测出来那个时刻的日期，月份等等\n\n&nbsp;\n<pre>var myDate = new Date;\nvar tomorrow = new Date( myDate.valueOf() + 86400000 );\n</pre>\n这样就可以判断出来明天的时间，而不用再去模数字，判断今天的日期，星期等等\n\n<hr />\n\n&nbsp;\n\n上面有个地方不够优雅的，是 myDate 只是为tomorrow提供偏移量的基准的，没有其他的用处，单独用一个变量保存起来没有什么必要，所以可以考虑去掉，比如写成这样\n<pre>\n<code>\nvar tomorrow = new Date( myDate.valueOf() + 86400000 );\n</code>\n</pre>\n\n&nbsp;', '关于js 实现日历的功能', '', 'inherit', 'open', 'open', '', '96-autosave-v1', '', '', '2014-12-17 02:35:31', '2014-12-17 02:35:31', '', 96, 'http://unasm.sinaapp.com/?p=98', 0, 'revision', '', 0),
(99, 1, '2014-12-17 02:37:12', '2014-12-17 02:37:12', '并不是想做一个日历的空间，而是用js判断当前时间的星期，月份和日期，以及前后几天时间，月份，日期的功能，如果自己去手写，不断考虑30还是31天的话，会有点麻烦，虽然阳历的时间变化小一些，但是还是挺麻烦的，可以new Date的时候，指定特定时刻的时间戳，然后js的Date函数会自动监测出来那个时刻的日期，月份等等\r\n\r\n&nbsp;\r\n<pre>var myDate = new Date;\r\nvar tomorrow = new Date( myDate.valueOf() + 86400000 );\r\n</pre>\r\n这样就可以判断出来明天的时间，而不用再去模数字，判断今天的日期，星期等等\r\n\r\n<hr />\r\n\r\n&nbsp;\r\n\r\n上面有个地方不够优雅的，是 myDate 只是为tomorrow提供偏移量的基准的，没有其他的用处，单独用一个变量保存起来没有什么必要，所以可以考虑去掉，比如写成这样\r\n<pre>\r\n<code>\r\nvar tomorrow = new Date( new Date().valueOf() + 86400000 );\r\n</code>\r\n</pre>\r\n简单优雅了很多，节省了代码和内存\r\n&nbsp;', '关于js 实现日历的功能', '', 'inherit', 'open', 'open', '', '96-revision-v1', '', '', '2014-12-17 02:37:12', '2014-12-17 02:37:12', '', 96, 'http://unasm.sinaapp.com/?p=99', 0, 'revision', '', 0),
(101, 1, '2014-12-17 14:25:58', '2014-12-17 14:25:58', 'C语言里面，在函数内部使用指针的时候，必须要给指针指针在声明的时候，赋值，分配内存，不然编译器是不会给指针分配内存的，以后给指针赋值的时候，也会出错。比如\r\n<pre><code>\r\n#include <stdio.h>\r\n#include <malloc.h>\r\nint *find(int n) {\r\n     int *pt  = malloc(sizeof(int));\r\n	 *pt = n + n;\r\n	 return (pt);\r\n }\r\n\r\n int main(void)\r\n {\r\n     int *p ;\r\n     int m;\r\n     scanf("%d",&m);\r\n     p=find(m);\r\n	 printf("%d\\n"  , *p);\r\n     return 0;\r\n }\r\n </code></pre>\r\n在指针函数find里面，如果写成<code> int *pt； </code>这样就会出现问题，因为如果不初始化，编辑器是不会给 pt指针分配内存的，不过，main函数里面的 int *p; 即使不初始化也是可以的，不会出现没内存的情况，我想归根结底，在与系统处理find和main的时候，机制是不同的，main是静态函数，find却要放到栈里面', 'c的指针函数', '', 'publish', 'open', 'open', '', 'c%e7%9a%84%e6%8c%87%e9%92%88%e5%87%bd%e6%95%b0', '', '', '2014-12-17 14:40:00', '2014-12-17 14:40:00', '', 0, 'http://unasm.sinaapp.com/?p=101', 0, 'post', '', 0),
(103, 1, '2014-12-17 14:40:00', '2014-12-17 14:40:00', 'C语言里面，在函数内部使用指针的时候，必须要给指针指针在声明的时候，赋值，分配内存，不然编译器是不会给指针分配内存的，以后给指针赋值的时候，也会出错。比如\r\n<pre><code>\r\n#include <stdio.h>\r\n#include <malloc.h>\r\nint *find(int n) {\r\n     int *pt  = malloc(sizeof(int));\r\n	 *pt = n + n;\r\n	 return (pt);\r\n }\r\n\r\n int main(void)\r\n {\r\n     int *p ;\r\n     int m;\r\n     scanf("%d",&m);\r\n     p=find(m);\r\n	 printf("%d\\n"  , *p);\r\n     return 0;\r\n }\r\n </code></pre>\r\n在指针函数find里面，如果写成<code> int *pt； </code>这样就会出现问题，因为如果不初始化，编辑器是不会给 pt指针分配内存的，不过，main函数里面的 int *p; 即使不初始化也是可以的，不会出现没内存的情况，我想归根结底，在与系统处理find和main的时候，机制是不同的，main是静态函数，find却要放到栈里面', 'c的指针函数', '', 'inherit', 'open', 'open', '', '101-revision-v1', '', '', '2014-12-17 14:40:00', '2014-12-17 14:40:00', '', 101, 'http://unasm.sinaapp.com/?p=103', 0, 'revision', '', 0),
(102, 1, '2014-12-17 14:25:58', '2014-12-17 14:25:58', 'C语言里面，在函数内部使用指针的时候，必须要给指针指针在声明的时候，赋值，分配内存，不然编译器是不会给指针分配内存的，以后给指针赋值的时候，也会出错。比如\r\n<pre><code>\r\n#include <stdio.h>\r\n#include <malloc.h>\r\nint *find(int n) {\r\n     int *pt  = NULL;\r\n     //int *pt  = malloc(sizeof(int));\r\n	 *pt = n + n;\r\n	 return (pt);\r\n }\r\n\r\n int main(void)\r\n {\r\n     int *p ;\r\n     int m;\r\n     scanf("%d",&m);\r\n     p=find(m);\r\n	 printf("%d\\n"  , *p);\r\n     return 0;\r\n }\r\n </code></pre>\r\n在指针函数find里面，如果写成<code> int *pt； </code>这样就会出现问题，因为如果不初始化，编辑器是不会给 pt指针分配内存的，或者写成<code> int *pt = malloc(sizeof(int))</code> 这样也是可以的，不过，main函数里面的 int *p; 即使不初始化也是可以的，不会出现没内存的情况，我想归根结底，在与系统处理find和main的时候，机制是不同的，main是静态函数，find却要放到栈里面', 'c的指针函数', '', 'inherit', 'open', 'open', '', '101-revision-v1', '', '', '2014-12-17 14:25:58', '2014-12-17 14:25:58', '', 101, 'http://unasm.sinaapp.com/?p=102', 0, 'revision', '', 0),
(105, 1, '2014-12-18 03:49:50', '0000-00-00 00:00:00', '', 'linux 命令行值 grep 的使用', '', 'draft', 'open', 'open', '', '', '', '', '2014-12-18 03:49:50', '2014-12-18 03:49:50', '', 0, 'http://unasm.sinaapp.com/?p=105', 0, 'post', '', 0),
(106, 1, '2014-12-18 06:28:30', '2014-12-18 06:28:30', 'grep 是一个好东西，可以快速的从一堆文本里面找到自己想要的东西，比如我想找自己特定的内容，搜索特定的字符串，\r\ngrep transaction 就是搜索 transaction 这个单词，\r\ngrep -R ./* 就是在当前目录下面递归搜索 -R 表示递归搜索 ./* 表示当前目录下， 如果不加-R 就是表示在当前目录下，但是不递归，本目录下的文件夹里面的文本是不会匹配搜索的，\r\ngrep transaction -i  就表示不计较大小写，各种版本的 trAnsactIoN 都可以匹配搜索到\r\ngrep -v 表示不包含某个字符串的，这个一般配合信道使用，比如 grep TRANSACTION -i ./* | grep -v ''.svn'' 首先通过正常的匹配获取到大量的信息，然后从这些包含信息里面，剔除自己不想要的信息，不断定位缩小范畴，\r\ngrep -l  表示显示的只是匹配的文件名，而不是匹配的内容，正常情况下，会高亮出来匹配的文本和上下文的。', 'linux 命令行值 grep 的使用', '', 'publish', 'open', 'open', '', 'linux-%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%80%bc-grep-%e7%9a%84%e4%bd%bf%e7%94%a8', '', '', '2014-12-18 06:28:30', '2014-12-18 06:28:30', '', 0, 'http://unasm.sinaapp.com/?p=106', 0, 'post', '', 0),
(107, 1, '2014-12-18 06:28:30', '2014-12-18 06:28:30', 'grep 是一个好东西，可以快速的从一堆文本里面找到自己想要的东西，比如我想找自己特定的内容，搜索特定的字符串，\r\ngrep transaction 就是搜索 transaction 这个单词，\r\ngrep -R ./* 就是在当前目录下面递归搜索 -R 表示递归搜索 ./* 表示当前目录下， 如果不加-R 就是表示在当前目录下，但是不递归，本目录下的文件夹里面的文本是不会匹配搜索的，\r\ngrep transaction -i  就表示不计较大小写，各种版本的 trAnsactIoN 都可以匹配搜索到\r\ngrep -v 表示不包含某个字符串的，这个一般配合信道使用，比如 grep TRANSACTION -i ./* | grep -v ''.svn'' 首先通过正常的匹配获取到大量的信息，然后从这些包含信息里面，剔除自己不想要的信息，不断定位缩小范畴，\r\ngrep -l  表示显示的只是匹配的文件名，而不是匹配的内容，正常情况下，会高亮出来匹配的文本和上下文的。', 'linux 命令行值 grep 的使用', '', 'inherit', 'open', 'open', '', '106-revision-v1', '', '', '2014-12-18 06:28:30', '2014-12-18 06:28:30', '', 106, 'http://unasm.sinaapp.com/?p=107', 0, 'revision', '', 0),
(130, 1, '2015-01-04 08:28:54', '2015-01-04 08:28:54', '需要向mysql中灌入大量的数据，mysql的响应时间应该会很长，首先在代码中加入set_time_limit(0),延长时间，目测无效，之后再浏览器中输入url，\r\n\r\n得到响应结果为\r\n<pre><code>\r\nProxy Error\r\n\r\nThe proxy server received an invalid response from an upstream server.\r\nThe proxy server could not handle the request GET /.\r\n\r\nReason: Error reading from remote server\r\n</code>\r\n</pre>\r\n同时在mysql中检测插入状况，发现及时在给出Error 之后 依旧在执行插入，\r\n\r\n原因猜测有2：第一mysql本身有队列，php在插入队列之后就得到响应结果，所以在nginx报错，终止了php之后，mysql依旧在执行时间队列中的内容，蚕食这个可能性很小，\r\n\r\n第二个原因：nginx报错之后，并没有停止php的执行，只是断开了和客户端的连接', 'NGINX 灌入数据之现象', '', 'publish', 'open', 'open', '', 'nginx-%e7%81%8c%e5%85%a5%e6%95%b0%e6%8d%ae%e4%b9%8b%e7%8e%b0%e8%b1%a1', '', '', '2015-01-04 08:28:54', '2015-01-04 08:28:54', '', 0, 'http://unasm.sinaapp.com/?p=130', 0, 'post', '', 0),
(110, 1, '2014-12-19 17:56:36', '2014-12-19 17:56:36', '<pre><code>\r\n#include&lt;stdlib.h&gt; \r\n#include&lt;stdio.h&gt; \r\n#include&lt;unistd.h&gt; \r\n#include&lt;pthread.h&gt; \r\n// typedef 相当于宏，可以让定义的变量脱离平台的限制\r\n// 在typedef char* PCHAR 的时候 PCAHR pa,pb可以将pa,pb都定义成指针，也就是将 char * 变成了真正的数据类型\r\ntypedef struct ct_sum{ int sum;  \r\n	//声明一个互斥锁\r\n	pthread_mutex_t lock;  \r\n}ct_sum;  \r\nvoid * add1(void *cnt)  {       \r\n	//将互斥锁进行上锁\r\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	for(int i = 0; i &lt; 10; i++){ 		\r\n            printf("%d\\n" , i); 		\r\n            (*(ct_sum*)cnt).sum+=i;   	\r\n        }   	\r\n        //解除互斥锁 	\r\n        pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	pthread_exit(NULL);  \r\n	return 0;  \r\n}  \r\nvoid * add2(void *cnt){       \r\n	cnt = (ct_sum*)cnt;  \r\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	for(int i = 50; i &lt; 60; i++) {\r\n      		printf("%d\\n" , i);\r\n  		(*(ct_sum*)cnt).sum+=i;\r\n   	}\r\n   	pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	pthread_exit(NULL);  \r\n	return 0;  \r\n}  \r\n\r\n\r\nint main(void)  { \r\n	//声明两个线程\r\n	pthread_t ptid1,ptid2;  \r\n	ct_sum cnt;  \r\n	//对互斥锁进行初始化\r\n	pthread_mutex_init(&amp;(cnt.lock),NULL);  \r\n	cnt.sum=0;  \r\n\r\n	//绑定线程和对应的执行函数\r\n	pthread_create(&amp;ptid1,NULL,add1,&amp;cnt);  \r\n	pthread_create(&amp;ptid2,NULL,add2,&amp;cnt);  \r\n	//这里的执行顺序，通常在第一个和第二个之间，从来没有出现第三个执行的情况,为什么呢？\r\n	//如果放在create 之前，就永远是第一个执行，add1和add2的顺序不确定\r\n	//如果放在join之间，则出现在第二，第三个执行,从未第一个\r\n	//放在join之后，则永远出现在第三个执行，\r\n\r\n	pthread_join(ptid2,NULL);  \r\n	pthread_mutex_lock(&amp;(cnt.lock));  \r\n	printf("sum %d\\n",cnt.sum);  \r\n	pthread_mutex_unlock(&amp;(cnt.lock));  \r\n\r\n	//回收现成的资源\r\n	//用来等待一个线程的结束,当函数返回时，被等待线程的资源被收回\r\n	//代码中如果没有pthread_join主线程会很快结束从而使整个进程结束，从而使创建的线程没有机会开始执行就结束了。加入pthread_join后，主线程会一直等待直到等待的线程结束自己才结束，使创建的线程有机会执行。\r\n	pthread_join(ptid1,NULL);  \r\n\r\n	//销毁互斥锁\r\n	pthread_mutex_destroy(&amp;(cnt.lock));  \r\n	return 0;  \r\n}  \r\n</code>\r\n</pre>', '对一个多线程代码的解读', '', 'publish', 'open', 'open', '', '%e5%af%b9%e4%b8%80%e4%b8%aa%e5%a4%9a%e7%ba%bf%e7%a8%8b%e4%bb%a3%e7%a0%81%e7%9a%84%e8%a7%a3%e8%af%bb', '', '', '2014-12-19 18:07:39', '2014-12-19 18:07:39', '', 0, 'http://unasm.sinaapp.com/?p=110', 0, 'post', '', 0),
(111, 1, '2014-12-19 17:56:36', '2014-12-19 17:56:36', '<pre><code>\r\n#include  \r\n#include  \r\n#include  \r\n#include  \r\n// typedef 相当于宏，可以让定义的变量脱离平台的限制\r\n// 在typedef char* PCHAR 的时候 PCAHR pa,pb可以将pa,pb都定义成指针，也就是将 char * 变成了真正的数据类型\r\ntypedef struct ct_sum{ int sum;  \r\n	//声明一个互斥锁\r\n	pthread_mutex_t lock;  \r\n}ct_sum;  \r\nvoid * add1(void *cnt)  {       \r\n	//将互斥锁进行上锁\r\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	for(int i = 0; i &lt; 10; i++){ 		printf("%d\\n" , i); 		(*(ct_sum*)cnt).sum+=i;   	}   	//解除互斥锁 	pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	pthread_exit(NULL);  \r\n	return 0;  \r\n}  \r\nvoid * add2(void *cnt){       \r\n	cnt = (ct_sum*)cnt;  \r\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	for(int i = 50; i &lt; 60; i++) {     		printf("%d\\n" , i); 		(*(ct_sum*)cnt).sum+=i;   	}   	pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	pthread_exit(NULL);  \r\n	return 0;  \r\n}  \r\n\r\n\r\nint main(void)  { \r\n	//声明两个线程\r\n	pthread_t ptid1,ptid2;  \r\n	ct_sum cnt;  \r\n	//对互斥锁进行初始化\r\n	pthread_mutex_init(&amp;(cnt.lock),NULL);  \r\n	cnt.sum=0;  \r\n\r\n	//绑定线程和对应的执行函数\r\n	pthread_create(&amp;ptid1,NULL,add1,&amp;cnt);  \r\n	pthread_create(&amp;ptid2,NULL,add2,&amp;cnt);  \r\n	//这里的执行顺序，通常在第一个和第二个之间，从来没有出现第三个执行的情况,为什么呢？\r\n	//如果放在create 之前，就永远是第一个执行，add1和add2的顺序不确定\r\n	//如果放在join之间，则出现在第二，第三个执行,从未第一个\r\n	//放在join之后，则永远出现在第三个执行，\r\n\r\n	pthread_join(ptid2,NULL);  \r\n	pthread_mutex_lock(&amp;(cnt.lock));  \r\n	printf("sum %d\\n",cnt.sum);  \r\n	pthread_mutex_unlock(&amp;(cnt.lock));  \r\n\r\n	//回收现成的资源\r\n	//用来等待一个线程的结束,当函数返回时，被等待线程的资源被收回\r\n	//代码中如果没有pthread_join主线程会很快结束从而使整个进程结束，从而使创建的线程没有机会开始执行就结束了。加入pthread_join后，主线程会一直等待直到等待的线程结束自己才结束，使创建的线程有机会执行。\r\n	pthread_join(ptid1,NULL);  \r\n\r\n	//销毁互斥锁\r\n	pthread_mutex_destroy(&amp;(cnt.lock));  \r\n	return 0;  \r\n}  \r\n</code>\r\n</pre>', '对一个多线程代码的解读', '', 'inherit', 'open', 'open', '', '110-revision-v1', '', '', '2014-12-19 17:56:36', '2014-12-19 17:56:36', '', 110, 'http://unasm.sinaapp.com/?p=111', 0, 'revision', '', 0),
(112, 1, '2014-12-19 17:57:27', '2014-12-19 17:57:27', '<pre><code>\r\n#include&lt;stdlib.h&gt; \r\n#include&lt;stdio.h&gt; \r\n#include&lt;unistd.h&gt; \r\n#include&lt;pthread.h&gt; \r\n// typedef 相当于宏，可以让定义的变量脱离平台的限制\r\n// 在typedef char* PCHAR 的时候 PCAHR pa,pb可以将pa,pb都定义成指针，也就是将 char * 变成了真正的数据类型\r\ntypedef struct ct_sum{ int sum;  \r\n	//声明一个互斥锁\r\n	pthread_mutex_t lock;  \r\n}ct_sum;  \r\nvoid * add1(void *cnt)  {       \r\n	//将互斥锁进行上锁\r\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	for(int i = 0; i &lt; 10; i++){ 		printf("%d\\n" , i); 		(*(ct_sum*)cnt).sum+=i;   	}   	//解除互斥锁 	pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	pthread_exit(NULL);  \r\n	return 0;  \r\n}  \r\nvoid * add2(void *cnt){       \r\n	cnt = (ct_sum*)cnt;  \r\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	for(int i = 50; i &lt; 60; i++) {     		printf("%d\\n" , i); 		(*(ct_sum*)cnt).sum+=i;   	}   	pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	pthread_exit(NULL);  \r\n	return 0;  \r\n}  \r\n\r\n\r\nint main(void)  { \r\n	//声明两个线程\r\n	pthread_t ptid1,ptid2;  \r\n	ct_sum cnt;  \r\n	//对互斥锁进行初始化\r\n	pthread_mutex_init(&amp;(cnt.lock),NULL);  \r\n	cnt.sum=0;  \r\n\r\n	//绑定线程和对应的执行函数\r\n	pthread_create(&amp;ptid1,NULL,add1,&amp;cnt);  \r\n	pthread_create(&amp;ptid2,NULL,add2,&amp;cnt);  \r\n	//这里的执行顺序，通常在第一个和第二个之间，从来没有出现第三个执行的情况,为什么呢？\r\n	//如果放在create 之前，就永远是第一个执行，add1和add2的顺序不确定\r\n	//如果放在join之间，则出现在第二，第三个执行,从未第一个\r\n	//放在join之后，则永远出现在第三个执行，\r\n\r\n	pthread_join(ptid2,NULL);  \r\n	pthread_mutex_lock(&amp;(cnt.lock));  \r\n	printf("sum %d\\n",cnt.sum);  \r\n	pthread_mutex_unlock(&amp;(cnt.lock));  \r\n\r\n	//回收现成的资源\r\n	//用来等待一个线程的结束,当函数返回时，被等待线程的资源被收回\r\n	//代码中如果没有pthread_join主线程会很快结束从而使整个进程结束，从而使创建的线程没有机会开始执行就结束了。加入pthread_join后，主线程会一直等待直到等待的线程结束自己才结束，使创建的线程有机会执行。\r\n	pthread_join(ptid1,NULL);  \r\n\r\n	//销毁互斥锁\r\n	pthread_mutex_destroy(&amp;(cnt.lock));  \r\n	return 0;  \r\n}  \r\n</code>\r\n</pre>', '对一个多线程代码的解读', '', 'inherit', 'open', 'open', '', '110-revision-v1', '', '', '2014-12-19 17:57:27', '2014-12-19 17:57:27', '', 110, 'http://unasm.sinaapp.com/?p=112', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(113, 1, '2014-12-19 18:06:51', '2014-12-19 18:06:51', '<pre><code>\n#include&lt;stdlib.h&gt; \n#include&lt;stdio.h&gt; \n#include&lt;unistd.h&gt; \n#include&lt;pthread.h&gt; \n// typedef 相当于宏，可以让定义的变量脱离平台的限制\n// 在typedef char* PCHAR 的时候 PCAHR pa,pb可以将pa,pb都定义成指针，也就是将 char * 变成了真正的数据类型\ntypedef struct ct_sum{ int sum;  \n	//声明一个互斥锁\n	pthread_mutex_t lock;  \n}ct_sum;  \nvoid * add1(void *cnt)  {       \n	//将互斥锁进行上锁\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \n	for(int i = 0; i &lt; 10; i++){ 		\n            printf("%d\\n" , i); 		\n         (*(ct_sum*)cnt).sum+=i;   	\n     }   	//解除互斥锁 	pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \n	pthread_exit(NULL);  \n	return 0;  \n}  \nvoid * add2(void *cnt){       \n	cnt = (ct_sum*)cnt;  \n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \n	for(int i = 50; i &lt; 60; i++) {     		printf("%d\\n" , i); 		(*(ct_sum*)cnt).sum+=i;   	}   	pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \n	pthread_exit(NULL);  \n	return 0;  \n}  \n\n\nint main(void)  { \n	//声明两个线程\n	pthread_t ptid1,ptid2;  \n	ct_sum cnt;  \n	//对互斥锁进行初始化\n	pthread_mutex_init(&amp;(cnt.lock),NULL);  \n	cnt.sum=0;  \n\n	//绑定线程和对应的执行函数\n	pthread_create(&amp;ptid1,NULL,add1,&amp;cnt);  \n	pthread_create(&amp;ptid2,NULL,add2,&amp;cnt);  \n	//这里的执行顺序，通常在第一个和第二个之间，从来没有出现第三个执行的情况,为什么呢？\n	//如果放在create 之前，就永远是第一个执行，add1和add2的顺序不确定\n	//如果放在join之间，则出现在第二，第三个执行,从未第一个\n	//放在join之后，则永远出现在第三个执行，\n\n	pthread_join(ptid2,NULL);  \n	pthread_mutex_lock(&amp;(cnt.lock));  \n	printf("sum %d\\n",cnt.sum);  \n	pthread_mutex_unlock(&amp;(cnt.lock));  \n\n	//回收现成的资源\n	//用来等待一个线程的结束,当函数返回时，被等待线程的资源被收回\n	//代码中如果没有pthread_join主线程会很快结束从而使整个进程结束，从而使创建的线程没有机会开始执行就结束了。加入pthread_join后，主线程会一直等待直到等待的线程结束自己才结束，使创建的线程有机会执行。\n	pthread_join(ptid1,NULL);  \n\n	//销毁互斥锁\n	pthread_mutex_destroy(&amp;(cnt.lock));  \n	return 0;  \n}  \n</code>\n</pre>', '对一个多线程代码的解读', '', 'inherit', 'open', 'open', '', '110-autosave-v1', '', '', '2014-12-19 18:06:51', '2014-12-19 18:06:51', '', 110, 'http://unasm.sinaapp.com/?p=113', 0, 'revision', '', 0),
(114, 1, '2014-12-19 18:07:39', '2014-12-19 18:07:39', '<pre><code>\r\n#include&lt;stdlib.h&gt; \r\n#include&lt;stdio.h&gt; \r\n#include&lt;unistd.h&gt; \r\n#include&lt;pthread.h&gt; \r\n// typedef 相当于宏，可以让定义的变量脱离平台的限制\r\n// 在typedef char* PCHAR 的时候 PCAHR pa,pb可以将pa,pb都定义成指针，也就是将 char * 变成了真正的数据类型\r\ntypedef struct ct_sum{ int sum;  \r\n	//声明一个互斥锁\r\n	pthread_mutex_t lock;  \r\n}ct_sum;  \r\nvoid * add1(void *cnt)  {       \r\n	//将互斥锁进行上锁\r\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	for(int i = 0; i &lt; 10; i++){ 		\r\n            printf("%d\\n" , i); 		\r\n            (*(ct_sum*)cnt).sum+=i;   	\r\n        }   	\r\n        //解除互斥锁 	\r\n        pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	pthread_exit(NULL);  \r\n	return 0;  \r\n}  \r\nvoid * add2(void *cnt){       \r\n	cnt = (ct_sum*)cnt;  \r\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	for(int i = 50; i &lt; 60; i++) {\r\n      		printf("%d\\n" , i);\r\n  		(*(ct_sum*)cnt).sum+=i;\r\n   	}\r\n   	pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	pthread_exit(NULL);  \r\n	return 0;  \r\n}  \r\n\r\n\r\nint main(void)  { \r\n	//声明两个线程\r\n	pthread_t ptid1,ptid2;  \r\n	ct_sum cnt;  \r\n	//对互斥锁进行初始化\r\n	pthread_mutex_init(&amp;(cnt.lock),NULL);  \r\n	cnt.sum=0;  \r\n\r\n	//绑定线程和对应的执行函数\r\n	pthread_create(&amp;ptid1,NULL,add1,&amp;cnt);  \r\n	pthread_create(&amp;ptid2,NULL,add2,&amp;cnt);  \r\n	//这里的执行顺序，通常在第一个和第二个之间，从来没有出现第三个执行的情况,为什么呢？\r\n	//如果放在create 之前，就永远是第一个执行，add1和add2的顺序不确定\r\n	//如果放在join之间，则出现在第二，第三个执行,从未第一个\r\n	//放在join之后，则永远出现在第三个执行，\r\n\r\n	pthread_join(ptid2,NULL);  \r\n	pthread_mutex_lock(&amp;(cnt.lock));  \r\n	printf("sum %d\\n",cnt.sum);  \r\n	pthread_mutex_unlock(&amp;(cnt.lock));  \r\n\r\n	//回收现成的资源\r\n	//用来等待一个线程的结束,当函数返回时，被等待线程的资源被收回\r\n	//代码中如果没有pthread_join主线程会很快结束从而使整个进程结束，从而使创建的线程没有机会开始执行就结束了。加入pthread_join后，主线程会一直等待直到等待的线程结束自己才结束，使创建的线程有机会执行。\r\n	pthread_join(ptid1,NULL);  \r\n\r\n	//销毁互斥锁\r\n	pthread_mutex_destroy(&amp;(cnt.lock));  \r\n	return 0;  \r\n}  \r\n</code>\r\n</pre>', '对一个多线程代码的解读', '', 'inherit', 'open', 'open', '', '110-revision-v1', '', '', '2014-12-19 18:07:39', '2014-12-19 18:07:39', '', 110, 'http://unasm.sinaapp.com/?p=114', 0, 'revision', '', 0),
(115, 1, '2014-12-22 06:51:31', '2014-12-22 06:51:31', '以下内容摘录自《LINUX 高级程序设计（第二版）》\r\n\r\n首先，在编译的时候，需要在gcc参数中加入-g，才可以调试，假定生成的可执行文件为main\r\n<ul>\r\n	<li><code>gdb  main  开始调试，</code></li>\r\n	<li>命令l，你没有看错，就是一个l，表示显示程序源代码，这里应该是参考了ls命令吧</li>\r\n	<li>break  6,表示在第六行设置断点，这里最好和vim set ruler配置，轻松知道文件行数，</li>\r\n	<li>info break，查看断点信息，</li>\r\n	<li>p  i 表示输出i变量,p  print 的意思吧</li>\r\n	<li>next 继续执行到接下来的端点</li>\r\n	<li>finish 退出程序，并得到相应的报告</li>\r\n	<li>quit 退出程序</li>\r\n</ul>', 'gdb 使用', '', 'publish', 'open', 'open', '', 'gdb-%e4%bd%bf%e7%94%a8', '', '', '2014-12-22 06:51:31', '2014-12-22 06:51:31', '', 0, 'http://unasm.sinaapp.com/?p=115', 0, 'post', '', 0),
(116, 1, '2014-12-22 06:51:31', '2014-12-22 06:51:31', '以下内容摘录自《LINUX 高级程序设计（第二版）》\r\n\r\n首先，在编译的时候，需要在gcc参数中加入-g，才可以调试，假定生成的可执行文件为main\r\n<ul>\r\n	<li><code>gdb  main  开始调试，</code></li>\r\n	<li>命令l，你没有看错，就是一个l，表示显示程序源代码，这里应该是参考了ls命令吧</li>\r\n	<li>break  6,表示在第六行设置断点，这里最好和vim set ruler配置，轻松知道文件行数，</li>\r\n	<li>info break，查看断点信息，</li>\r\n	<li>p  i 表示输出i变量,p  print 的意思吧</li>\r\n	<li>next 继续执行到接下来的端点</li>\r\n	<li>finish 退出程序，并得到相应的报告</li>\r\n	<li>quit 退出程序</li>\r\n</ul>', 'gdb 使用', '', 'inherit', 'open', 'open', '', '115-revision-v1', '', '', '2014-12-22 06:51:31', '2014-12-22 06:51:31', '', 115, 'http://unasm.sinaapp.com/?p=116', 0, 'revision', '', 0),
(120, 1, '2014-12-27 10:39:27', '2014-12-27 10:39:27', '我有一个不是很好的习惯，就是太喜欢快捷键，更喜欢xfce而不是unity或者是win的原因，就是xfce的自定义快捷键更多，如今切换到Mac下，感觉有一些常用快捷键定义的不是很合理，网上却找不到修改快捷键的介绍，好像大家都不修改似的。\r\n\r\n下面介绍我摸索来的修改自定义快捷键的方式。\r\n\r\n第一部，打开系统偏好设置，然后点击键盘，选择快捷键\r\n\r\n<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/macshortfirst.png" alt="" width="1332" height="954" />\r\n\r\n&nbsp;\r\n\r\n下面是我之前已经定义的快捷键，估计很多人都已经猜到怎么做了，\r\n\r\n&nbsp;\r\n\r\n<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/macshortlast.png" alt="" width="1292" height="1134" />\r\n\r\n点击左下角的+号 弹出的页面里面，最上面选择快捷键控制的应用，如果想要控制的快捷键是全局的，就选择默认的全局的，如果不是就选择一个自己想控制的，然后在其他地方打开想控制的应用，比如，我下面演示的是如何修改终端的Zoom ,我首先打开了终端，然后在  控制栏 --&gt; Window 查看 ，发现系统控制缩放的窗口缩放的命令是Zoom ,目前对应的快捷键还没有，如果想修改的是tab页的切换，那对应的命令就是Show Next Tab 把这个命令写到第二个输入框里面，第三个输入框是输入想要的快捷键，比如我想要Command + Shift + Enter ，我同时按这三个键，就得到了想要的输入，注意，这个框不是一个字母一个字母输入的\r\n\r\n<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/choseName.png" alt="" width="850" height="564" />\r\n\r\n<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/Screen%20Shot%202014-12-27%20at%206.31.29%20PM.png" alt="" width="1306" height="1126" />\r\n\r\n然后点击添加，这样随便打开一个应用，同时按Command + Shift + Enter ，就可以看看效果了', 'Mac 修改  快捷键', '', 'inherit', 'open', 'open', '', '119-revision-v1', '', '', '2014-12-27 10:39:27', '2014-12-27 10:39:27', '', 119, 'http://unasm.sinaapp.com/?p=120', 0, 'revision', '', 0),
(121, 1, '2014-12-29 12:29:41', '2014-12-29 12:29:41', 'PHP 的 CLI模式下，可以帮我们在不修改源文件的情况下，测试一些代码，自己想要的结果，而且，命令行模式下权限更大一些\r\n\r\nphp -f 或者没有 ，直接加文件名，php引擎就会解析这个脚本，并得到对应的结果\r\n\r\nphp -r  ''''可以直接跟对应的语句，不过，我在测试的时候，发现必须外面是单引号，里面是双引号，否则解析会出问题，', 'PHP CLI', '', 'publish', 'open', 'open', '', 'php-cli', '', '', '2014-12-29 12:35:17', '2014-12-29 12:35:17', '', 0, 'http://unasm.sinaapp.com/?p=121', 0, 'post', '', 0),
(122, 1, '2014-12-29 12:29:41', '2014-12-29 12:29:41', 'PHP 的 CLI模式下，可以帮我们在不修改源文件的情况下，测试一些代码，自己想要的结果，而且，命令行模式下权限更大一些\r\n\r\nphp -f 或者没有 ，直接加文件名，php引擎就会解析这个脚本，并得到对应的结果\r\n\r\nphp -r  ''''可以直接跟对应的语句，不过，我在测试的时候，发现必须外面是单引号，里面是双引号，否则解析会出问题，', 'PHP CLI', '', 'inherit', 'open', 'open', '', '121-revision-v1', '', '', '2014-12-29 12:29:41', '2014-12-29 12:29:41', '', 121, 'http://unasm.sinaapp.com/?p=122', 0, 'revision', '', 0),
(123, 1, '2014-12-30 02:29:15', '2014-12-30 02:29:15', '&nbsp;\r\n<code>\r\n/*************************************************************************\r\n* memcache LRU 算法，摘录自《PHP核心技术与最佳实践》 362页\r\n* File Name : memcacheLru.c\r\n* Author : unasm\r\n* Mail : unasm@sina.cn\r\n* Last_Modified: 2014-12-30 10:08:48\r\n************************************************************************/\r\n\r\n//申请内存\r\nit = slabs_alloc(ntotal, id);\r\n\r\n//返回值为0，表示没有申请到\r\nif(it == 0){\r\nint tries = 50;\r\n...\r\n//清除没有被引用的数据\r\nfor(search = tail[id]; tries &gt; 0 &amp;&amp; search != NULL; tries-- , search = search-&gt;prev){\r\nif(search-&gt;refcount == 0){\r\n...\r\ndo_item_link(search);\r\nbreak;\r\n}\r\n}\r\n//再次申请内存，\r\nit = slabs_alloc(ntotal, id);\r\nif(it == 0){\r\ntries = 50;\r\n// 查找三个小时以内都没有被访问的数据，淘汰掉\r\nfor(search = tail[id]; tries &gt; 0 &amp;&amp; search != NULL; tries--, search = search-&gt;prev){\r\nif (search-&gt;refcount != 0 &amp;&amp; search-&gt;time + 10800 &lt; current_time) {\r\nsearch-&gt;refcount = 0;\r\ndo_item_link(search);\r\nbreak;\r\n}\r\n}\r\n//再次申请分配内存\r\nit = slabs_alloc(ntotal, id);\r\nif(it == 0){\r\nreturn NULL;\r\n}\r\n}\r\n}\r\n</code>', 'memcached LRU 算法淘汰数据', '', 'publish', 'open', 'open', '', 'memcached-lru-%e7%ae%97%e6%b3%95%e6%b7%98%e6%b1%b0%e6%95%b0%e6%8d%ae', '', '', '2014-12-30 02:30:40', '2014-12-30 02:30:40', '', 0, 'http://unasm.sinaapp.com/?p=123', 0, 'post', '', 0),
(124, 1, '2014-12-30 02:29:15', '2014-12-30 02:29:15', '/*************************************************************************\r\n* memcache LRU 算法，摘录自《PHP核心技术与最佳实践》 362页\r\n* File Name : memcacheLru.c\r\n* Author : unasm\r\n* Mail : unasm@sina.cn\r\n* Last_Modified: 2014-12-30 10:08:48\r\n************************************************************************/\r\n\r\n//申请内存\r\nit = slabs_alloc(ntotal, id);\r\n\r\n//返回值为0，表示没有申请到\r\nif(it == 0){\r\nint tries = 50;\r\n...\r\n//清除没有被引用的数据\r\nfor(search = tail[id]; tries &gt; 0 &amp;&amp; search != NULL; tries-- , search = search-&gt;prev){\r\nif(search-&gt;refcount == 0){\r\n...\r\ndo_item_link(search);\r\nbreak;\r\n}\r\n}\r\n//再次申请内存，\r\nit = slabs_alloc(ntotal, id);\r\nif(it == 0){\r\ntries = 50;\r\n// 查找三个小时以内都没有被访问的数据，淘汰掉\r\nfor(search = tail[id]; tries &gt; 0 &amp;&amp; search != NULL; tries--, search = search-&gt;prev){\r\nif (search-&gt;refcount != 0 &amp;&amp; search-&gt;time + 10800 &lt; current_time) {\r\nsearch-&gt;refcount = 0;\r\ndo_item_link(search);\r\nbreak;\r\n}\r\n}\r\n//再次申请分配内存\r\nit = slabs_alloc(ntotal, id);\r\nif(it == 0){\r\nreturn NULL;\r\n}\r\n}\r\n}', 'memcached LRU 算法淘汰数据', '', 'inherit', 'open', 'open', '', '123-revision-v1', '', '', '2014-12-30 02:29:15', '2014-12-30 02:29:15', '', 123, 'http://unasm.sinaapp.com/?p=124', 0, 'revision', '', 0),
(125, 1, '2014-12-30 02:29:53', '2014-12-30 02:29:53', '&lt;code&gt;\r\n\r\n/*************************************************************************\r\n* memcache LRU 算法，摘录自《PHP核心技术与最佳实践》 362页\r\n* File Name : memcacheLru.c\r\n* Author : unasm\r\n* Mail : unasm@sina.cn\r\n* Last_Modified: 2014-12-30 10:08:48\r\n************************************************************************/\r\n\r\n//申请内存\r\nit = slabs_alloc(ntotal, id);\r\n\r\n//返回值为0，表示没有申请到\r\nif(it == 0){\r\nint tries = 50;\r\n...\r\n//清除没有被引用的数据\r\nfor(search = tail[id]; tries &gt; 0 &amp;&amp; search != NULL; tries-- , search = search-&gt;prev){\r\nif(search-&gt;refcount == 0){\r\n...\r\ndo_item_link(search);\r\nbreak;\r\n}\r\n}\r\n//再次申请内存，\r\nit = slabs_alloc(ntotal, id);\r\nif(it == 0){\r\ntries = 50;\r\n// 查找三个小时以内都没有被访问的数据，淘汰掉\r\nfor(search = tail[id]; tries &gt; 0 &amp;&amp; search != NULL; tries--, search = search-&gt;prev){\r\nif (search-&gt;refcount != 0 &amp;&amp; search-&gt;time + 10800 &lt; current_time) {\r\nsearch-&gt;refcount = 0;\r\ndo_item_link(search);\r\nbreak;\r\n}\r\n}\r\n//再次申请分配内存\r\nit = slabs_alloc(ntotal, id);\r\nif(it == 0){\r\nreturn NULL;\r\n}\r\n}\r\n}\r\n\r\n&lt;/code&gt;', 'memcached LRU 算法淘汰数据', '', 'inherit', 'open', 'open', '', '123-revision-v1', '', '', '2014-12-30 02:29:53', '2014-12-30 02:29:53', '', 123, 'http://unasm.sinaapp.com/?p=125', 0, 'revision', '', 0),
(126, 1, '2014-12-30 02:30:40', '2014-12-30 02:30:40', '&nbsp;\r\n<code>\r\n/*************************************************************************\r\n* memcache LRU 算法，摘录自《PHP核心技术与最佳实践》 362页\r\n* File Name : memcacheLru.c\r\n* Author : unasm\r\n* Mail : unasm@sina.cn\r\n* Last_Modified: 2014-12-30 10:08:48\r\n************************************************************************/\r\n\r\n//申请内存\r\nit = slabs_alloc(ntotal, id);\r\n\r\n//返回值为0，表示没有申请到\r\nif(it == 0){\r\nint tries = 50;\r\n...\r\n//清除没有被引用的数据\r\nfor(search = tail[id]; tries &gt; 0 &amp;&amp; search != NULL; tries-- , search = search-&gt;prev){\r\nif(search-&gt;refcount == 0){\r\n...\r\ndo_item_link(search);\r\nbreak;\r\n}\r\n}\r\n//再次申请内存，\r\nit = slabs_alloc(ntotal, id);\r\nif(it == 0){\r\ntries = 50;\r\n// 查找三个小时以内都没有被访问的数据，淘汰掉\r\nfor(search = tail[id]; tries &gt; 0 &amp;&amp; search != NULL; tries--, search = search-&gt;prev){\r\nif (search-&gt;refcount != 0 &amp;&amp; search-&gt;time + 10800 &lt; current_time) {\r\nsearch-&gt;refcount = 0;\r\ndo_item_link(search);\r\nbreak;\r\n}\r\n}\r\n//再次申请分配内存\r\nit = slabs_alloc(ntotal, id);\r\nif(it == 0){\r\nreturn NULL;\r\n}\r\n}\r\n}\r\n</code>', 'memcached LRU 算法淘汰数据', '', 'inherit', 'open', 'open', '', '123-revision-v1', '', '', '2014-12-30 02:30:40', '2014-12-30 02:30:40', '', 123, 'http://unasm.sinaapp.com/?p=126', 0, 'revision', '', 0),
(127, 1, '2014-12-31 12:32:52', '0000-00-00 00:00:00', '2014 对我来说，是很重要的一年，从某种意义上来说，也是丰富多彩的一年。\r\n\r\n上半年刚刚开始的时候，自己在2013的后半年辛苦创建的队伍解散了，开始了找工作，过程略微曲折，几番变化，最终确定下了新浪，在搞定毕业设计之后，开始了大学最后的狂欢：毕业旅行。毕业后来到北京，开始进入社会，正式工作。在公司的工作总体来说是轻松的，抛开最初被闲置的两个月，其他时间是有事情做，但是一直不算紧张，组长经验丰富且平易近人，能学到不少东西。业余时间相比大学来说，丰富了不少，羽毛球水平得到长足的发展，简而言之，波折而丰富，且进步的一年。\r\n\r\n年初是辛酸且失望的，一番辛苦，最终化为须有，一个阳光明媚，负责技术的三个人，几番讨论，最终还是决定退出项目，原因有点复杂，', '2014的总结', '', 'draft', 'open', 'open', '', '', '', '', '2014-12-31 12:32:52', '2014-12-31 12:32:52', '', 0, 'http://unasm.sinaapp.com/?p=127', 0, 'post', '', 0),
(128, 1, '2014-12-31 12:32:52', '2014-12-31 12:32:52', '2014 对我来说，是很重要的一年，从某种意义上来说，也是丰富多彩的一年。\r\n\r\n上半年刚刚开始的时候，自己在2013的后半年辛苦创建的队伍解散了，开始了找工作，过程略微曲折，几番变化，最终确定下了新浪，在搞定毕业设计之后，开始了大学最后的狂欢：毕业旅行。毕业后来到北京，开始进入社会，正式工作。在公司的工作总体来说是轻松的，抛开最初被闲置的两个月，其他时间是有事情做，但是一直不算紧张，组长经验丰富且平易近人，能学到不少东西。业余时间相比大学来说，丰富了不少，羽毛球水平得到长足的发展，简而言之，波折而丰富，且进步的一年。\r\n\r\n年初是辛酸且失望的，一番辛苦，最终化为须有，一个阳光明媚，负责技术的三个人，几番讨论，最终还是决定退出项目，原因有点复杂，', '2014的总结', '', 'inherit', 'open', 'open', '', '127-revision-v1', '', '', '2014-12-31 12:32:52', '2014-12-31 12:32:52', '', 127, 'http://unasm.sinaapp.com/?p=128', 0, 'revision', '', 0),
(131, 1, '2015-01-04 08:28:54', '2015-01-04 08:28:54', '需要向mysql中灌入大量的数据，mysql的响应时间应该会很长，首先在代码中加入set_time_limit(0),延长时间，目测无效，之后再浏览器中输入url，\r\n\r\n得到响应结果为\r\n<pre><code>\r\nProxy Error\r\n\r\nThe proxy server received an invalid response from an upstream server.\r\nThe proxy server could not handle the request GET /.\r\n\r\nReason: Error reading from remote server\r\n</code>\r\n</pre>\r\n同时在mysql中检测插入状况，发现及时在给出Error 之后 依旧在执行插入，\r\n\r\n原因猜测有2：第一mysql本身有队列，php在插入队列之后就得到响应结果，所以在nginx报错，终止了php之后，mysql依旧在执行时间队列中的内容，蚕食这个可能性很小，\r\n\r\n第二个原因：nginx报错之后，并没有停止php的执行，只是断开了和客户端的连接', 'NGINX 灌入数据之现象', '', 'inherit', 'open', 'open', '', '130-revision-v1', '', '', '2015-01-04 08:28:54', '2015-01-04 08:28:54', '', 130, 'http://unasm.sinaapp.com/?p=131', 0, 'revision', '', 0),
(132, 1, '2015-01-06 03:29:53', '2015-01-06 03:29:53', '测试表的字段id为主键，max(id) 和count(*)的效果在不删除记录的情况下应该是一样的，一下是不同sql写法之间的效率对比\r\n<ol>\r\n	<li>\r\n<p class="p1"><span class="s1">select count(*) from udata_1;   </span></p>\r\n<code>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n</code>\r\n然后该sql语句得到\r\n<code>\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n</code>\r\n从这里可以看到 rows为115806 ，几乎将表遍历得到的数据</li>\r\n	<li>\r\n<p class="p1"><span class="s1">select count(id) from udata_1;</span></p>\r\n<code>\r\n+-----------+\r\n| count(id) |\r\n+-----------+\r\n| 115651 |\r\n+-----------+\r\n1 row in set (0.03 sec)\r\n</code>\r\nexplain select count(id) from udata_1\r\n<code>\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n</code>\r\n可见在效率上结果上并没有任何差异</li>\r\n	<li>\r\n<p class="p1"><span class="s1">explain<span class="Apple-converted-space">  </span>select max(id) from udata_1 where id &gt; 0; 因为id是从1开始自增的，所以和之前的sql应该没有任何差异</span></p>\r\n<code>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n1 row in set (0.05 sec)\r\n</code>\r\n结果上的确没有任何差异\r\n\r\nexplain select count(*) from udata_1 where id &gt; 0;\r\n<code>\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| 1 | SIMPLE | udata_1 | range | PRIMARY | PRIMARY | 4 | NULL | 57903 | Using where; Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n</code>\r\n这个结果有点意外，因为id是主键，应该是因为这个，从而可以判定之前的count(*)的时候，并没有根据主键来进行优化，而这里因为where 的原因，启动了主键查找，一定程度提供了效率。</li>\r\n	<li>\r\n<p class="p1"><span class="s1">select max(id) from udata_1;</span></p>\r\n<code>\r\n+---------+\r\n| max(id) |\r\n+---------+\r\n| 115651 |\r\n+---------+\r\n1 row in set (0.00 sec)\r\n</code>\r\n和count(*) 一样的结果，虽然只有10w+的测试数据，时间上还是可以看出优越的。\r\n\r\nexplain select max(id) from udata_1;\r\n<code>\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| 1 | SIMPLE | NULL | NULL | NULL | NULL | NULL | NULL | NULL | Select tables optimized away |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n</code>\r\n这个结果也有点意外，根据b+树的特点，以为需要logN级别的时间，而不是常量级别，也许是mysql针对max做了特定的优化</li>\r\n</ol>\r\n由以上对比可以看出，在count(*)和max 之间，效率上的差异是很明显的', 'mysql select max(id) 与 select count(*) 性能对比', '', 'publish', 'open', 'open', '', 'mysql-select-maxid-%e4%b8%8e-select-count-%e6%80%a7%e8%83%bd%e5%af%b9%e6%af%94', '', '', '2015-01-06 03:54:12', '2015-01-06 03:54:12', '', 0, 'http://unasm.sinaapp.com/?p=132', 0, 'post', '', 0),
(133, 1, '2015-01-06 03:29:53', '2015-01-06 03:29:53', '测试表的字段id为主键，max(id) 和count(*)的效果在不删除记录的情况下应该是一样的，一下是不同sql写法之间的效率对比\r\n<ol>\r\n	<li>\r\n<p class="p1"><span class="s1">select count(*) from udata_1;   </span></p>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n\r\n然后该sql语句得到\r\n\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n\r\n从这里可以看到 rows为115806 ，几乎将表遍历得到的数据</li>\r\n	<li>\r\n<p class="p1"><span class="s1">select count(id) from udata_1;</span></p>\r\n+-----------+\r\n| count(id) |\r\n+-----------+\r\n| 115651 |\r\n+-----------+\r\n1 row in set (0.03 sec)\r\n\r\nexplain select count(id) from udata_1\r\n\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n可见在效率上结果上并没有任何差异</li>\r\n	<li>\r\n<p class="p1"><span class="s1">explain<span class="Apple-converted-space">  </span>select max(id) from udata_1 where id &gt; 0; 因为id是从1开始自增的，所以和之前的sql应该没有任何差异</span></p>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n1 row in set (0.05 sec)\r\n结果上的确没有任何差异\r\n\r\nexplain select count(*) from udata_1 where id &gt; 0;\r\n\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| 1 | SIMPLE | udata_1 | range | PRIMARY | PRIMARY | 4 | NULL | 57903 | Using where; Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n\r\n这个结果有点意外，因为id是主键，应该是因为这个，从而可以判定之前的count(*)的时候，并没有根据主键来进行优化，而这里因为where 的原因，启动了主键查找，一定程度提供了效率。</li>\r\n	<li>\r\n<p class="p1"><span class="s1">select max(id) from udata_1;</span></p>\r\n+---------+\r\n| max(id) |\r\n+---------+\r\n| 115651 |\r\n+---------+\r\n1 row in set (0.00 sec)\r\n和count(*) 一样的结果，虽然只有10w+的测试数据，时间上还是可以看出优越的。\r\n\r\nexplain select max(id) from udata_1;\r\n\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| 1 | SIMPLE | NULL | NULL | NULL | NULL | NULL | NULL | NULL | Select tables optimized away |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n这个结果也有点意外，根据b+树的特点，以为需要logN级别的时间，而不是常量级别，也许是mysql针对max做了特定的优化</li>\r\n</ol>\r\n由以上对比可以看出，在count(*)和max 之间，效率上的差异是很明显的', 'mysql select max(id) 与 select count(*) 性能对比', '', 'inherit', 'open', 'open', '', '132-revision-v1', '', '', '2015-01-06 03:29:53', '2015-01-06 03:29:53', '', 132, 'http://unasm.sinaapp.com/?p=133', 0, 'revision', '', 0),
(134, 1, '2015-01-06 03:32:16', '2015-01-06 03:32:16', '测试表的字段id为主键，max(id) 和count(*)的效果在不删除记录的情况下应该是一样的，一下是不同sql写法之间的效率对比\r\n<ol>\r\n	<li>\r\n<p class="p1"><span class="s1">select count(*) from udata_1;   </span></p>\r\n<code>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n</code>\r\n然后该sql语句得到\r\n\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n\r\n从这里可以看到 rows为115806 ，几乎将表遍历得到的数据</li>\r\n	<li>\r\n<p class="p1"><span class="s1">select count(id) from udata_1;</span></p>\r\n+-----------+\r\n| count(id) |\r\n+-----------+\r\n| 115651 |\r\n+-----------+\r\n1 row in set (0.03 sec)\r\n\r\nexplain select count(id) from udata_1\r\n\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n可见在效率上结果上并没有任何差异</li>\r\n	<li>\r\n<p class="p1"><span class="s1">explain<span class="Apple-converted-space">  </span>select max(id) from udata_1 where id &gt; 0; 因为id是从1开始自增的，所以和之前的sql应该没有任何差异</span></p>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n1 row in set (0.05 sec)\r\n结果上的确没有任何差异\r\n\r\nexplain select count(*) from udata_1 where id &gt; 0;\r\n\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| 1 | SIMPLE | udata_1 | range | PRIMARY | PRIMARY | 4 | NULL | 57903 | Using where; Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n\r\n这个结果有点意外，因为id是主键，应该是因为这个，从而可以判定之前的count(*)的时候，并没有根据主键来进行优化，而这里因为where 的原因，启动了主键查找，一定程度提供了效率。</li>\r\n	<li>\r\n<p class="p1"><span class="s1">select max(id) from udata_1;</span></p>\r\n+---------+\r\n| max(id) |\r\n+---------+\r\n| 115651 |\r\n+---------+\r\n1 row in set (0.00 sec)\r\n和count(*) 一样的结果，虽然只有10w+的测试数据，时间上还是可以看出优越的。\r\n\r\nexplain select max(id) from udata_1;\r\n\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| 1 | SIMPLE | NULL | NULL | NULL | NULL | NULL | NULL | NULL | Select tables optimized away |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n这个结果也有点意外，根据b+树的特点，以为需要logN级别的时间，而不是常量级别，也许是mysql针对max做了特定的优化</li>\r\n</ol>\r\n由以上对比可以看出，在count(*)和max 之间，效率上的差异是很明显的', 'mysql select max(id) 与 select count(*) 性能对比', '', 'inherit', 'open', 'open', '', '132-revision-v1', '', '', '2015-01-06 03:32:16', '2015-01-06 03:32:16', '', 132, 'http://unasm.sinaapp.com/?p=134', 0, 'revision', '', 0),
(135, 1, '2015-01-06 03:41:44', '2015-01-06 03:41:44', '测试表的字段id为主键，max(id) 和count(*)的效果在不删除记录的情况下应该是一样的，一下是不同sql写法之间的效率对比\n<ol>\n	<li>\n<p class="p1"><span class="s1">select count(*) from udata_1;   </span></p>\n<code>\n+----------+\n| count(*) |\n+----------+\n| 115651 |\n+----------+\n</code>\n然后该sql语句得到\n<cod>\n\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\n\n</code>\n从这里可以看到 rows为115806 ，几乎将表遍历得到的数据</li>\n	<li>\n<p class="p1"><span class="s1">select count(id) from udata_1;</span></p>\n<code>\n+-----------+\n| count(id) |\n+-----------+\n| 115651 |\n+-----------+\n1 row in set (0.03 sec)\n</code>\nexplain select count(id) from udata_1\n<code>\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\n</code>\n可见在效率上结果上并没有任何差异</li>\n	<li>\n<p class="p1"><span class="s1">explain<span class="Apple-converted-space">  </span>select max(id) from udata_1 where id &gt; 0; 因为id是从1开始自增的，所以和之前的sql应该没有任何差异</span></p>\n+----------+\n| count(*) |\n+----------+\n| 115651 |\n+----------+\n1 row in set (0.05 sec)\n结果上的确没有任何差异\n\nexplain select count(*) from udata_1 where id &gt; 0;\n\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\n| 1 | SIMPLE | udata_1 | range | PRIMARY | PRIMARY | 4 | NULL | 57903 | Using where; Using index |\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\n\n这个结果有点意外，因为id是主键，应该是因为这个，从而可以判定之前的count(*)的时候，并没有根据主键来进行优化，而这里因为where 的原因，启动了主键查找，一定程度提供了效率。</li>\n	<li>\n<p class="p1"><span class="s1">select max(id) from udata_1;</span></p>\n+---------+\n| max(id) |\n+---------+\n| 115651 |\n+---------+\n1 row in set (0.00 sec)\n和count(*) 一样的结果，虽然只有10w+的测试数据，时间上还是可以看出优越的。\n\nexplain select max(id) from udata_1;\n\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\n| 1 | SIMPLE | NULL | NULL | NULL | NULL | NULL | NULL | NULL | Select tables optimized away |\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\n这个结果也有点意外，根据b+树的特点，以为需要logN级别的时间，而不是常量级别，也许是mysql针对max做了特定的优化</li>\n</ol>\n由以上对比可以看出，在count(*)和max 之间，效率上的差异是很明显的', 'mysql select max(id) 与 select count(*) 性能对比', '', 'inherit', 'open', 'open', '', '132-autosave-v1', '', '', '2015-01-06 03:41:44', '2015-01-06 03:41:44', '', 132, 'http://unasm.sinaapp.com/?p=135', 0, 'revision', '', 0),
(136, 1, '2015-01-06 03:43:06', '2015-01-06 03:43:06', '测试表的字段id为主键，max(id) 和count(*)的效果在不删除记录的情况下应该是一样的，一下是不同sql写法之间的效率对比\r\n<ol>\r\n	<li>\r\n<p class="p1"><span class="s1">select count(*) from udata_1;   </span></p>\r\n<code>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n</code>\r\n然后该sql语句得到\r\n<cod>\r\n\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n\r\n</code>\r\n从这里可以看到 rows为115806 ，几乎将表遍历得到的数据</li>\r\n	<li>\r\n<p class="p1"><span class="s1">select count(id) from udata_1;</span></p>\r\n<code>\r\n+-----------+\r\n| count(id) |\r\n+-----------+\r\n| 115651 |\r\n+-----------+\r\n1 row in set (0.03 sec)\r\n</code>\r\nexplain select count(id) from udata_1\r\n<code>\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n</code>\r\n可见在效率上结果上并没有任何差异</li>\r\n	<li>\r\n<p class="p1"><span class="s1">explain<span class="Apple-converted-space">  </span>select max(id) from udata_1 where id &gt; 0; 因为id是从1开始自增的，所以和之前的sql应该没有任何差异</span></p>\r\n<code>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n1 row in set (0.05 sec)\r\n</code>\r\n结果上的确没有任何差异\r\n\r\nexplain select count(*) from udata_1 where id &gt; 0;\r\n<code>\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| 1 | SIMPLE | udata_1 | range | PRIMARY | PRIMARY | 4 | NULL | 57903 | Using where; Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n</code>\r\n这个结果有点意外，因为id是主键，应该是因为这个，从而可以判定之前的count(*)的时候，并没有根据主键来进行优化，而这里因为where 的原因，启动了主键查找，一定程度提供了效率。</li>\r\n	<li>\r\n<p class="p1"><span class="s1">select max(id) from udata_1;</span></p>\r\n<code>\r\n+---------+\r\n| max(id) |\r\n+---------+\r\n| 115651 |\r\n+---------+\r\n1 row in set (0.00 sec)\r\n</code>\r\n和count(*) 一样的结果，虽然只有10w+的测试数据，时间上还是可以看出优越的。\r\n\r\nexplain select max(id) from udata_1;\r\n<code>\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| 1 | SIMPLE | NULL | NULL | NULL | NULL | NULL | NULL | NULL | Select tables optimized away |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n</code>\r\n这个结果也有点意外，根据b+树的特点，以为需要logN级别的时间，而不是常量级别，也许是mysql针对max做了特定的优化</li>\r\n</ol>\r\n由以上对比可以看出，在count(*)和max 之间，效率上的差异是很明显的', 'mysql select max(id) 与 select count(*) 性能对比', '', 'inherit', 'open', 'open', '', '132-revision-v1', '', '', '2015-01-06 03:43:06', '2015-01-06 03:43:06', '', 132, 'http://unasm.sinaapp.com/?p=136', 0, 'revision', '', 0),
(137, 1, '2015-01-06 03:45:34', '2015-01-06 03:45:34', '测试表的字段id为主键，max(id) 和count(*)的效果在不删除记录的情况下应该是一样的，一下是不同sql写法之间的效率对比\r\n<ol>\r\n	<li>\r\n<p class="p1"><span class="s1">select count(*) from udata_1;   </span></p>\r\n<code>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n</code>\r\n然后该sql语句得到\r\n<code>\r\n\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n\r\n</code>\r\n从这里可以看到 rows为115806 ，几乎将表遍历得到的数据</li>\r\n	<li>\r\n<p class="p1"><span class="s1">select count(id) from udata_1;</span></p>\r\n<code>\r\n+-----------+\r\n| count(id) |\r\n+-----------+\r\n| 115651 |\r\n+-----------+\r\n1 row in set (0.03 sec)\r\n</code>\r\nexplain select count(id) from udata_1\r\n<code>\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n</code>\r\n可见在效率上结果上并没有任何差异</li>\r\n	<li>\r\n<p class="p1"><span class="s1">explain<span class="Apple-converted-space">  </span>select max(id) from udata_1 where id &gt; 0; 因为id是从1开始自增的，所以和之前的sql应该没有任何差异</span></p>\r\n<code>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n1 row in set (0.05 sec)\r\n</code>\r\n结果上的确没有任何差异\r\n\r\nexplain select count(*) from udata_1 where id &gt; 0;\r\n<code>\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| 1 | SIMPLE | udata_1 | range | PRIMARY | PRIMARY | 4 | NULL | 57903 | Using where; Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n</code>\r\n这个结果有点意外，因为id是主键，应该是因为这个，从而可以判定之前的count(*)的时候，并没有根据主键来进行优化，而这里因为where 的原因，启动了主键查找，一定程度提供了效率。</li>\r\n	<li>\r\n<p class="p1"><span class="s1">select max(id) from udata_1;</span></p>\r\n<code>\r\n+---------+\r\n| max(id) |\r\n+---------+\r\n| 115651 |\r\n+---------+\r\n1 row in set (0.00 sec)\r\n</code>\r\n和count(*) 一样的结果，虽然只有10w+的测试数据，时间上还是可以看出优越的。\r\n\r\nexplain select max(id) from udata_1;\r\n<code>\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| 1 | SIMPLE | NULL | NULL | NULL | NULL | NULL | NULL | NULL | Select tables optimized away |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n</code>\r\n这个结果也有点意外，根据b+树的特点，以为需要logN级别的时间，而不是常量级别，也许是mysql针对max做了特定的优化</li>\r\n</ol>\r\n由以上对比可以看出，在count(*)和max 之间，效率上的差异是很明显的', 'mysql select max(id) 与 select count(*) 性能对比', '', 'inherit', 'open', 'open', '', '132-revision-v1', '', '', '2015-01-06 03:45:34', '2015-01-06 03:45:34', '', 132, 'http://unasm.sinaapp.com/?p=137', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(198, 1, '2015-03-23 10:09:43', '2015-03-23 10:09:43', '1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心\n\n2.检测编码的时候，mb_check_encoding基本是没有用的，检查不出当前的字符串编码格式\n<p class="p1"><span class="s1"><span class="Apple-converted-space">  </span></span><span class="s2">if</span> <span class="s3">(</span><span class="s4">3</span> <span class="s2">!==</span> <span class="s5">strlen</span><span class="s3">(</span><span class="s1">''</span><span class="s4">✓</span><span class="s1">''</span><span class="s3">))</span> <span class="s3">{</span><span class="s1"><span class="Apple-converted-space">                                                                                                                                            </span></span></p>\n<p class="p2"><span class="s8"><span class="Apple-converted-space">          </span></span><span class="s9"><span class="Apple-converted-space">  </span></span><span class="s8">throw</span> <span class="s11">new</span><span class="s9"> \\</span><span class="s12">DomainException</span><span class="s11">(</span><span class="s9">''</span><span class="s13">Bad encoding, length of unicode character ✓ should be 3. Ensure charset UTF-8 and check ini val  mbstring.func_autoload</span><span class="s9">''</span><span class="s11">)</span><span class="s9">; <span class="Apple-converted-space">         </span></span><span class="s13">    </span> <span class="s13"> </span></p>\n<p class="p2"><span class="s11">}</span><span class="s13">                                                                                                                                                                  </span></p>\n<p class="p2">这个方法不错，可以判断是不是utf-8编码</p>\n<p class="p2">3.php静态变量的问题。奇葩问题。</p>\n<p class="p2">   从mc中读取缓存，如果读取次数太多，也会出现效率问题，一个更加优化的办法是保存在静态变量里面，或者是变量里面，这样会得到更高的效率。</p>\n<p class="p2">这样做的前提条件是，数据量不能够过大，php的静态变量中不能保存太多的东西，最近遇到一个问题，</p>\n<p class="p2">一个数组，长度为9，存储在mc中的，每个变量的长度是一个长度48的数组，如下,其中只有四条是有用的，如果我将这个9 * 48</p>\n\n<pre>的数组存在静态变量里面，页面是无法显示出来的，如果将长度为48的数组替换成想要的长度为4的数组，就可以毫无压力的显示数据，由此可见静态变量无法保存这个9 * 48 的数组，不过有点奇怪的是，使用 memory_get_usage 测试，耗费内存是2.4mb，不再变化。\n\n&lt;!--------------------------------------------------------------------------&gt;\n实测证明，不是因为静态变量大，将此长度为48数组单独保存，for循环复制给一个静态变量，，发现在循环到1000，程序执行如常，因为担心引用造成的复用，\n每次循环中修改数组中的变量，形成数组脏数组，避免php的内部数据引用，结果依旧证明，不是因为静态变量造成的。</pre>\n<pre>4.</pre>', 'PHP 的坑', '', 'inherit', 'open', 'open', '', '195-autosave-v1', '', '', '2015-03-23 10:09:43', '2015-03-23 10:09:43', '', 195, 'http://unasm.sinaapp.com/?p=198', 0, 'revision', '', 0),
(142, 1, '2015-01-14 09:34:28', '2015-01-14 09:34:28', 'php 解析 json 的函数 json_decode 使用的时候会遇到的bug\r\n<code>$arr = array(\r\n12 =&gt; array("test"),\r\n11 =&gt; array("link"),\r\n);\r\n$arr = json_encode($arr);\r\n</code>\r\n这样解析的时候，如果使用json_decode($arr, true)将json还原成为一个数组的时候，<code> 12 =&gt; array(''test'')</code> 就会丢失，结果会变成<code>\r\narray(\r\n11 =&gt; array("link"),\r\n);</code>\r\n这个bug可以概述为如果大的整数下标在小整数下标之前，在decode时候，前面大的会丢失，如果调整了顺序，就不会出现这种情况，比如上面\r\n<code>$arr = array(\r\n11 =&gt; array("link"),\r\n12 =&gt; array("test"),\r\n);\r\n</code>就不会出现问题了。\r\n当然，还有另外一种解决办法，就是去掉true，变成<code>$arr = json_decode($arr);</code>转化称为一个对象，结果就对了', 'php json_decode 的一个bug', '', 'publish', 'open', 'open', '', 'php-json_decode-%e7%9a%84%e4%b8%80%e4%b8%aabug', '', '', '2015-01-14 09:38:12', '2015-01-14 09:38:12', '', 0, 'http://unasm.sinaapp.com/?p=142', 0, 'post', '', 0),
(143, 1, '2015-01-14 09:34:28', '2015-01-14 09:34:28', 'php 解析 json 的函数 json_decode 使用的时候会遇到的bug\r\n<code>\r\n$arr = array(\r\n12 =&gt; array("test"),\r\n11 =&gt; array("link"),\r\n);\r\n$arr = json_encode($arr);\r\n</code>\r\n这样解析的时候，如果使用json_decode($arr, true)将json还原成为一个数组的时候，<code> 12 =&gt; array(''test'')</code> 就会丢失\r\n结果会变成<code>\r\narray(\r\n11 =&gt; array("link"),\r\n);</code>\r\n这个bug可以概述为如果大的整数下标在小整数下标之前，在decode时候，前面大的会丢失，如果调整了顺序，就不会出现这种情况，比如上面\r\n<code>\r\n$arr = array(\r\n11 =&gt; array("link"),\r\n12 =&gt; array("test"),\r\n);\r\n</code>就不会出现问题了。\r\n当然，还有另外一种解决办法，就是去掉true，变成<code>$arr = json_decode($arr);</code>转化称为一个对象，结果就对了', 'php json_decode 的一个bug', '', 'inherit', 'open', 'open', '', '142-revision-v1', '', '', '2015-01-14 09:34:28', '2015-01-14 09:34:28', '', 142, 'http://unasm.sinaapp.com/?p=143', 0, 'revision', '', 0),
(144, 1, '2015-01-14 09:37:44', '2015-01-14 09:37:44', 'php 解析 json 的函数 json_decode 使用的时候会遇到的bug\r\n<code>\r\n$arr = array(\r\n12 =&gt; array("test"),\r\n11 =&gt; array("link"),\r\n);\r\n$arr = json_encode($arr);\r\n</code>\r\n这样解析的时候，如果使用json_decode($arr, true)将json还原成为一个数组的时候，<code> 12 =&gt; array(''test'')</code> 就会丢失，结果会变成<code>\r\narray(\r\n11 =&gt; array("link"),\r\n);</code>\r\n这个bug可以概述为如果大的整数下标在小整数下标之前，在decode时候，前面大的会丢失，如果调整了顺序，就不会出现这种情况，比如上面\r\n<code>$arr = array(\r\n11 =&gt; array("link"),\r\n12 =&gt; array("test"),\r\n);\r\n</code>就不会出现问题了。\r\n当然，还有另外一种解决办法，就是去掉true，变成<code>$arr = json_decode($arr);</code>转化称为一个对象，结果就对了', 'php json_decode 的一个bug', '', 'inherit', 'open', 'open', '', '142-revision-v1', '', '', '2015-01-14 09:37:44', '2015-01-14 09:37:44', '', 142, 'http://unasm.sinaapp.com/?p=144', 0, 'revision', '', 0),
(145, 1, '2015-01-14 09:38:12', '2015-01-14 09:38:12', 'php 解析 json 的函数 json_decode 使用的时候会遇到的bug\r\n<code>$arr = array(\r\n12 =&gt; array("test"),\r\n11 =&gt; array("link"),\r\n);\r\n$arr = json_encode($arr);\r\n</code>\r\n这样解析的时候，如果使用json_decode($arr, true)将json还原成为一个数组的时候，<code> 12 =&gt; array(''test'')</code> 就会丢失，结果会变成<code>\r\narray(\r\n11 =&gt; array("link"),\r\n);</code>\r\n这个bug可以概述为如果大的整数下标在小整数下标之前，在decode时候，前面大的会丢失，如果调整了顺序，就不会出现这种情况，比如上面\r\n<code>$arr = array(\r\n11 =&gt; array("link"),\r\n12 =&gt; array("test"),\r\n);\r\n</code>就不会出现问题了。\r\n当然，还有另外一种解决办法，就是去掉true，变成<code>$arr = json_decode($arr);</code>转化称为一个对象，结果就对了', 'php json_decode 的一个bug', '', 'inherit', 'open', 'open', '', '142-revision-v1', '', '', '2015-01-14 09:38:12', '2015-01-14 09:38:12', '', 142, 'http://unasm.sinaapp.com/?p=145', 0, 'revision', '', 0),
(146, 1, '2015-01-16 09:26:29', '2015-01-16 09:26:29', '<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href="http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href="http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n5. pid - 这个意义不大，主要是说以后这个.pdf文件里面的id号归这个进程使用，算是固定下来运行时候的pid号码吧\r\n\r\n6.  <span class="s1">request_</span><span class="s2">terminate</span><span class="s1">_timeout = 30   请求的最大终止时间，默认单位为妙</span>\r\n\r\n如果file_get_contents请求的远程资源如果反应过慢，file_get_contents就会一直卡在那里不会超时，我们知道php.ini 里面max_execution_time 可以设置 PHP 脚本的最大执行时间，但是，在 php-cgi(php-fpm) 中，该参数不会起效。真正能够控制 PHP 脚本最大执行时间的是 php-fpm.conf 配置文件中的request_terminate_timeout参数。\r\n\r\nrequest_terminate_timeout默认值为 0 秒，也就是说，PHP 脚本会一直执行下去。这样，当所有的 php-cgi 进程都卡在 file_get_contents() 函数时，这台 Nginx+PHP 的 WebServer 已经无法再处理新的 PHP 请求了，Nginx 将给用户返回“502 Bad Gateway”。修改该参数，设置一个 PHP 脚本最大执行时间是必要的，但是，治标不治本。例如改成 30s，如果发生 file_get_contents() 获取网页内容较慢的情况，这就意味着 150 个 php-cgi 进程，每秒钟只能处理 5 个请求，WebServer 同样很难避免"502 Bad Gateway"。解决办法是request_terminate_timeout设置为10s或者一个合理的值，或者给file_get_contents加一个超时参数。\r\n\r\n7.   <span class="s1">process</span><span class="s2">_control_timeout = 0   ，除了官方的翻译之后，未见到任何解释</span>\r\n\r\n8. syslog_facility (注释翻译)\r\n\r\nsyslog  工具 是用来明确如何记录日志信息的，使syslogd可以处理来自不同程序下的不同日志信息,syslog可能的值有（ex  daemon equiv LOG_DAEMON）,默认选择了daemon。\r\n\r\nsyslogd 是linux下面的处理日志信息的软件/命令 <a title=" Linux / Unix Command: syslogd" href="http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm">http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm</a> ，syslog应该是和syslogd进行交互的，处理日志信息的。\r\n\r\n这里的facility具体是指LOG_AUTH(安全/授权消息)，LOG_AUTHPRIV(安全/授权消息（私用）)，LOG_CRON（cron守护进程），LOG_DAEMON（系统守护进程），LOG_FTP（FTP守护进程）,LOG_KERN（内核进程），LOG_LOCAL0(本地使用)，LOG_LPR(行式打印机系统)，LOG_MAIL(邮件系统)，LOG_NEWS(网络新闻系统)，LOG_SYSLOG(SYSLOG内部产生的消息)，LOG_USER(任意的用户消息)，LOG_UUCP(UUCP系统)（摘自UNIX网络编程第一卷第三版313页）\r\n\r\n9.syslog_ident  是追加在所有的信息之前的，如果你在同一台服务器上面，有多个fpm实例运行，可以修改这个名字，满足需求。\r\n\r\n10.Log_level 可能的值是alert,error,warning,notice,debug,默认值notice.\r\n\r\n11,emergency_restart_threshold 如果一定时间内以SIGSEGV或者SIGBUS状态退出的子进程达到该值的两，fpm就会重启，0表示关闭。\r\n\r\n&nbsp;', 'php-fpm.conf 参数详解', '', 'publish', 'open', 'open', '', 'php-fpm-conf-%e5%8f%82%e6%95%b0%e8%af%a6%e8%a7%a3', '', '\nhttp://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/', '2015-03-20 14:58:29', '2015-03-20 14:58:29', '', 0, 'http://unasm.sinaapp.com/?p=146', 0, 'post', '', 0),
(147, 1, '2015-01-16 09:26:29', '2015-01-16 09:26:29', '<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\r\n\r\n&nbsp;', 'php-fpm.conf 参数详解', '', 'inherit', 'open', 'open', '', '146-revision-v1', '', '', '2015-01-16 09:26:29', '2015-01-16 09:26:29', '', 146, 'http://unasm.sinaapp.com/?p=147', 0, 'revision', '', 0),
(148, 1, '2015-03-20 13:06:46', '2015-03-20 13:06:46', '<code>user = www</code>\n\ngroup = www\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\n\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href="http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\n\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href="http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\n\n4. pm (直接翻译的配置文件的注释)\n选择如何控制子进程的数量\n<ul>\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\n<ul>\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\n</ul>\n</li>\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\n<ul>\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\n</ul>\n</li>\n</ul>\n5. pid - 这个意义不大，主要是说以后这个.pdf文件里面的id号归这个进程使用，算是固定下来运行时候的pid号码吧\n\n6.  <span class="s1">request_</span><span class="s2">terminate</span><span class="s1">_timeout = 30   请求的最大终止时间，默认单位为妙</span>\n\n如果file_get_contents请求的远程资源如果反应过慢，file_get_contents就会一直卡在那里不会超时，我们知道php.ini 里面max_execution_time 可以设置 PHP 脚本的最大执行时间，但是，在 php-cgi(php-fpm) 中，该参数不会起效。真正能够控制 PHP 脚本最大执行时间的是 php-fpm.conf 配置文件中的request_terminate_timeout参数。\n\nrequest_terminate_timeout默认值为 0 秒，也就是说，PHP 脚本会一直执行下去。这样，当所有的 php-cgi 进程都卡在 file_get_contents() 函数时，这台 Nginx+PHP 的 WebServer 已经无法再处理新的 PHP 请求了，Nginx 将给用户返回“502 Bad Gateway”。修改该参数，设置一个 PHP 脚本最大执行时间是必要的，但是，治标不治本。例如改成 30s，如果发生 file_get_contents() 获取网页内容较慢的情况，这就意味着 150 个 php-cgi 进程，每秒钟只能处理 5 个请求，WebServer 同样很难避免"502 Bad Gateway"。解决办法是request_terminate_timeout设置为10s或者一个合理的值，或者给file_get_contents加一个超时参数。\n\n7.   <span class="s1">process</span><span class="s2">_control_timeout = 0   ，除了官方的翻译之后，未见到任何解释</span>\n\n8. syslog_facility (注释翻译)\n\nsyslog  工具 是用来明确如何记录日志信息的，使syslogd可以处理来自不同程序下的不同日志信息,syslog可能的值有（ex  daemon equiv LOG_DAEMON）,默认选择了daemon。\n\nsyslogd 是linux下面的处理日志信息的软件/命令 <a title=" Linux / Unix Command: syslogd" href="http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm">http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm</a> ，syslog应该是和syslogd进行交互的，处理日志信息的。\n\n这里的facility具体是指LOG_AUTH(安全/授权消息)，LOG_AUTHPRIV(安全/授权消息（私用）)，LOG_CRON（cron守护进程），LOG_DAEMON（系统守护进程），LOG_FTP（FTP守护进程）,LOG_KERN（内核进程），LOG_LOCAL0(本地使用)，LOG_LPR(行式打印机系统)，LOG_MAIL(邮件系统)，LOG_NEWS(网络新闻系统)，LOG_SYSLOG(SYSLOG内部产生的消息)，LOG_USER(任意的用户消息)，LOG_UUCP(UUCP系统)（摘自UNIX网络编程第一卷第三版313页）\n\n9.syslog_ident  是追加在所有的信息之前的，如果你在同一台服务器上面，有多个fpm实例运行，可以修改这个名字，满足需求。\n\n10.Log_level 可能的值是alert,error,warning,notice,debug,默认值notice.\n\n11,emergency_restart_threshold 如果一定时间内以SIGSEGV或者SIGBUS状态退出的子进程达到该值的两，fpm就会重启，0表示关闭。\n\n&nbsp;', 'php-fpm.conf 参数详解', '', 'inherit', 'open', 'open', '', '146-autosave-v1', '', '', '2015-03-20 13:06:46', '2015-03-20 13:06:46', '', 146, 'http://unasm.sinaapp.com/?p=148', 0, 'revision', '', 0),
(153, 1, '2015-01-16 10:16:56', '2015-01-16 10:16:56', '<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href="http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href="http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>', 'php-fpm.conf 参数详解', '', 'inherit', 'open', 'open', '', '146-revision-v1', '', '', '2015-01-16 10:16:56', '2015-01-16 10:16:56', '', 146, 'http://unasm.sinaapp.com/?p=153', 0, 'revision', '', 0),
(152, 1, '2015-01-16 10:12:17', '2015-01-16 10:12:17', '<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>', 'php-fpm.conf 参数详解', '', 'inherit', 'open', 'open', '', '146-revision-v1', '', '', '2015-01-16 10:12:17', '2015-01-16 10:12:17', '', 146, 'http://unasm.sinaapp.com/?p=152', 0, 'revision', '', 0),
(150, 1, '2015-01-16 10:09:59', '2015-01-16 10:09:59', '<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n\r\npm = dynamic\r\n\r\n选择如何控制子进程的数量\r\n可选的值有\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>', 'php-fpm.conf 参数详解', '', 'inherit', 'open', 'open', '', '146-revision-v1', '', '', '2015-01-16 10:09:59', '2015-01-16 10:09:59', '', 146, 'http://unasm.sinaapp.com/?p=150', 0, 'revision', '', 0),
(149, 1, '2015-01-16 10:07:25', '2015-01-16 10:07:25', '<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n\r\npm = dynamic\r\n\r\n选择如何控制子进程的数量\r\n可选的值有\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<code>\r\n; Choose how the process manager will control the number of child processes.\r\n; Possible Values:\r\n;  static - a fixed number (pm.max_children) of child processes;\r\n; dynamic - the number of child processes are set dynamically based on the\r\n; following directives. With this process management, there will be\r\n; always at least 1 children.\r\n; pm.max_children - the maximum number of children that can\r\n; be alive at the same time.\r\n; pm.start_servers - the number of children created on startup.\r\n; pm.min_spare_servers - the minimum number of children in ''idle''\r\n; state (waiting to process). If the number\r\n; of ''idle'' processes is less than this\r\n; number then some children will be created.\r\n; pm.max_spare_servers - the maximum number of children in ''idle''\r\n; state (waiting to process). If the number\r\n; of ''idle'' processes is greater than this\r\n; number then some children will be killed.\r\n; ondemand - no children are created at startup. Children will be forked when\r\n; new requests will connect. The following parameter are used:\r\n; pm.max_children - the maximum number of children that\r\n; can be alive at the same time.\r\n; pm.process_idle_timeout - The number of seconds after which\r\n; an idle process will be killed.\r\n; Note: This value is mandatory.\r\npm = dynamic\r\n</code>', 'php-fpm.conf 参数详解', '', 'inherit', 'open', 'open', '', '146-revision-v1', '', '', '2015-01-16 10:07:25', '2015-01-16 10:07:25', '', 146, 'http://unasm.sinaapp.com/?p=149', 0, 'revision', '', 0),
(151, 1, '2015-01-16 10:11:42', '2015-01-16 10:11:42', '<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n可选的值有\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>', 'php-fpm.conf 参数详解', '', 'inherit', 'open', 'open', '', '146-revision-v1', '', '', '2015-01-16 10:11:42', '2015-01-16 10:11:42', '', 146, 'http://unasm.sinaapp.com/?p=151', 0, 'revision', '', 0),
(154, 1, '2015-01-16 10:44:27', '2015-01-16 10:44:27', '<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href="http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href="http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n5. pid - 这个意义不大，主要是说以后这个.pdf文件里面的id号归这个进程使用，算是固定下来运行时候的pid号码吧', 'php-fpm.conf 参数详解', '', 'inherit', 'open', 'open', '', '146-revision-v1', '', '', '2015-01-16 10:44:27', '2015-01-16 10:44:27', '', 146, 'http://unasm.sinaapp.com/?p=154', 0, 'revision', '', 0),
(155, 1, '2015-01-16 11:16:17', '2015-01-16 11:16:17', '<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href="http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href="http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n5. pid - 这个意义不大，主要是说以后这个.pdf文件里面的id号归这个进程使用，算是固定下来运行时候的pid号码吧\r\n\r\n6.  <span class="s1">request_</span><span class="s2">terminate</span><span class="s1">_timeout = 30   请求的最大终止时间，默认单位为妙</span>\r\n\r\n如果file_get_contents请求的远程资源如果反应过慢，file_get_contents就会一直卡在那里不会超时，我们知道php.ini 里面max_execution_time 可以设置 PHP 脚本的最大执行时间，但是，在 php-cgi(php-fpm) 中，该参数不会起效。真正能够控制 PHP 脚本最大执行时间的是 php-fpm.conf 配置文件中的request_terminate_timeout参数。\r\n\r\nrequest_terminate_timeout默认值为 0 秒，也就是说，PHP 脚本会一直执行下去。这样，当所有的 php-cgi 进程都卡在 file_get_contents() 函数时，这台 Nginx+PHP 的 WebServer 已经无法再处理新的 PHP 请求了，Nginx 将给用户返回“502 Bad Gateway”。修改该参数，设置一个 PHP 脚本最大执行时间是必要的，但是，治标不治本。例如改成 30s，如果发生 file_get_contents() 获取网页内容较慢的情况，这就意味着 150 个 php-cgi 进程，每秒钟只能处理 5 个请求，WebServer 同样很难避免"502 Bad Gateway"。解决办法是request_terminate_timeout设置为10s或者一个合理的值，或者给file_get_contents加一个超时参数。\r\n\r\n7.   <span class="s1">process</span><span class="s2">_control_timeout = 0   ，除了官方的翻译之后，未见到任何解释</span>', 'php-fpm.conf 参数详解', '', 'inherit', 'open', 'open', '', '146-revision-v1', '', '', '2015-01-16 11:16:17', '2015-01-16 11:16:17', '', 146, 'http://unasm.sinaapp.com/?p=155', 0, 'revision', '', 0),
(156, 1, '2015-01-18 10:07:47', '2015-01-18 10:07:47', '<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href="http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href="http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n5. pid - 这个意义不大，主要是说以后这个.pdf文件里面的id号归这个进程使用，算是固定下来运行时候的pid号码吧\r\n\r\n6.  <span class="s1">request_</span><span class="s2">terminate</span><span class="s1">_timeout = 30   请求的最大终止时间，默认单位为妙</span>\r\n\r\n如果file_get_contents请求的远程资源如果反应过慢，file_get_contents就会一直卡在那里不会超时，我们知道php.ini 里面max_execution_time 可以设置 PHP 脚本的最大执行时间，但是，在 php-cgi(php-fpm) 中，该参数不会起效。真正能够控制 PHP 脚本最大执行时间的是 php-fpm.conf 配置文件中的request_terminate_timeout参数。\r\n\r\nrequest_terminate_timeout默认值为 0 秒，也就是说，PHP 脚本会一直执行下去。这样，当所有的 php-cgi 进程都卡在 file_get_contents() 函数时，这台 Nginx+PHP 的 WebServer 已经无法再处理新的 PHP 请求了，Nginx 将给用户返回“502 Bad Gateway”。修改该参数，设置一个 PHP 脚本最大执行时间是必要的，但是，治标不治本。例如改成 30s，如果发生 file_get_contents() 获取网页内容较慢的情况，这就意味着 150 个 php-cgi 进程，每秒钟只能处理 5 个请求，WebServer 同样很难避免"502 Bad Gateway"。解决办法是request_terminate_timeout设置为10s或者一个合理的值，或者给file_get_contents加一个超时参数。\r\n\r\n7.   <span class="s1">process</span><span class="s2">_control_timeout = 0   ，除了官方的翻译之后，未见到任何解释</span>\r\n\r\n8. syslog_facility (注释翻译)\r\n\r\nsyslog  工具 是用来明确如何记录日志信息的，使syslogd可以处理来自不同程序下的不同日志信息,syslog可能的值有（ex  daemon equiv LOG_DAEMON）,默认选择了daemon。\r\n\r\nsyslogd 是linux下面的处理日志信息的软件/命令 <a title=" Linux / Unix Command: syslogd" href="http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm">http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm</a> ，syslog应该是和syslogd进行交互的，处理日志信息的。', 'php-fpm.conf 参数详解', '', 'inherit', 'open', 'open', '', '146-revision-v1', '', '', '2015-01-18 10:07:47', '2015-01-18 10:07:47', '', 146, 'http://unasm.sinaapp.com/?p=156', 0, 'revision', '', 0),
(173, 1, '2015-02-26 04:15:41', '2015-02-26 04:15:41', '目前的版本是PHPUnit 3.6.12 by Sebastian Bergmann. phpunit 在针对的检测，并没有提供一种好的方法，比如我运行一段代码，然后运行结束之后die或者exit，die或者exit之前有内容输出，这个在php代码中很常见，但是phpunit却没提供一种很好的检测机制，多个case，几乎每个case都有exit或者die的情况，这个时候，如果采用多线程的方式，是不可以的，因为不存在像nodejs那种回调，一旦多线程开了，虽然可以让代码在exit的时候执行，但是却无法获取exit之前的输出，也就是还是缺少汇总，\r\n\r\n目前的折中方案，就是通过curl，发起http请求的方式来测试具体有exit的api，获取exit之前的结果和输出', 'phpunit 实践', '', 'publish', 'open', 'open', '', 'phpunit-%e5%ae%9e%e8%b7%b5', '', '', '2015-03-05 03:32:40', '2015-03-05 03:32:40', '', 0, 'http://unasm.sinaapp.com/?p=173', 0, 'post', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(160, 1, '2015-01-22 02:24:45', '2015-01-22 02:24:45', '<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href="http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href="http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n5. pid - 这个意义不大，主要是说以后这个.pdf文件里面的id号归这个进程使用，算是固定下来运行时候的pid号码吧\r\n\r\n6.  <span class="s1">request_</span><span class="s2">terminate</span><span class="s1">_timeout = 30   请求的最大终止时间，默认单位为妙</span>\r\n\r\n如果file_get_contents请求的远程资源如果反应过慢，file_get_contents就会一直卡在那里不会超时，我们知道php.ini 里面max_execution_time 可以设置 PHP 脚本的最大执行时间，但是，在 php-cgi(php-fpm) 中，该参数不会起效。真正能够控制 PHP 脚本最大执行时间的是 php-fpm.conf 配置文件中的request_terminate_timeout参数。\r\n\r\nrequest_terminate_timeout默认值为 0 秒，也就是说，PHP 脚本会一直执行下去。这样，当所有的 php-cgi 进程都卡在 file_get_contents() 函数时，这台 Nginx+PHP 的 WebServer 已经无法再处理新的 PHP 请求了，Nginx 将给用户返回“502 Bad Gateway”。修改该参数，设置一个 PHP 脚本最大执行时间是必要的，但是，治标不治本。例如改成 30s，如果发生 file_get_contents() 获取网页内容较慢的情况，这就意味着 150 个 php-cgi 进程，每秒钟只能处理 5 个请求，WebServer 同样很难避免"502 Bad Gateway"。解决办法是request_terminate_timeout设置为10s或者一个合理的值，或者给file_get_contents加一个超时参数。\r\n\r\n7.   <span class="s1">process</span><span class="s2">_control_timeout = 0   ，除了官方的翻译之后，未见到任何解释</span>\r\n\r\n8. syslog_facility (注释翻译)\r\n\r\nsyslog  工具 是用来明确如何记录日志信息的，使syslogd可以处理来自不同程序下的不同日志信息,syslog可能的值有（ex  daemon equiv LOG_DAEMON）,默认选择了daemon。\r\n\r\nsyslogd 是linux下面的处理日志信息的软件/命令 <a title=" Linux / Unix Command: syslogd" href="http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm">http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm</a> ，syslog应该是和syslogd进行交互的，处理日志信息的。\r\n\r\n这里的facility具体是指LOG_AUTH(安全/授权消息)，LOG_AUTHPRIV(安全/授权消息（私用）)，LOG_CRON（cron守护进程），LOG_DAEMON（系统守护进程），LOG_FTP（FTP守护进程）,LOG_KERN（内核进程），LOG_LOCAL0(本地使用)，LOG_LPR(行式打印机系统)，LOG_MAIL(邮件系统)，LOG_NEWS(网络新闻系统)，LOG_SYSLOG(SYSLOG内部产生的消息)，LOG_USER(任意的用户消息)，LOG_UUCP(UUCP系统)（摘自UNIX网络编程第一卷第三版313页）', 'php-fpm.conf 参数详解', '', 'inherit', 'open', 'open', '', '146-revision-v1', '', '', '2015-01-22 02:24:45', '2015-01-22 02:24:45', '', 146, 'http://unasm.sinaapp.com/?p=160', 0, 'revision', '', 0),
(161, 1, '2015-01-25 14:13:51', '2015-01-25 14:13:51', '1.   fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;\r\n\r\n$document_root 指代上面的root配置变量，如果这里的document_root替换成具体的路径，则上面的root失效', 'nginx conf 配置参数详解', '', 'publish', 'open', 'open', '', 'nginx-conf-%e9%85%8d%e7%bd%ae%e5%8f%82%e6%95%b0%e8%af%a6%e8%a7%a3', '', '', '2015-01-25 15:00:33', '2015-01-25 15:00:33', '', 0, 'http://unasm.sinaapp.com/?p=161', 0, 'post', '', 0),
(162, 1, '2015-01-25 14:13:51', '2015-01-25 14:13:51', '1.   fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;\r\n\r\n$document_root 指代上面的root配置变量，如果这里的document_root替换成具体的路径，则上面的root失效', 'nginx conf 配置参数详解', '', 'inherit', 'open', 'open', '', '161-revision-v1', '', '', '2015-01-25 14:13:51', '2015-01-25 14:13:51', '', 161, 'http://unasm.sinaapp.com/?p=162', 0, 'revision', '', 0),
(164, 1, '2015-02-02 03:27:19', '2015-02-02 03:27:19', '最近要做一个分页系统，页数可能有多，数据有点大，如果每次都去数据库重新查找数据，虽然是后台，但是也会对数据库和编辑的体验造成很大的影响，比较好的办法就是添加缓存，可以强制刷新获取最新数据，也可以从缓存中获取几分钟之前的数据。\r\n\r\n所有要呈现的数据从数据库里面检索出来之后是一个大数组，然后对数组进行整理，形成按用户成仙的数组格式，考虑到效率，在缓存中保存整理之后的数据比较好，也就是以用户的id为下表的数组。\r\n\r\n如何保存，有三种方案。\r\n\r\n一个是将整个大数组进行序列化打包，然后存储字符串，比较简单方便，真正读取数据的时候，先获取全部的，然后根据下表显示指定的数据。而且还有一个担心，就是redis的字符串最大长度是512mb，在用户为1百万的时候，每个用户只有500+字节，显然不够用，虽然1百万用户的情况比较少，但是不可不防。\r\n\r\n第二是将数组进行拆分，以用户的id为单元存储,或者是插入的时间+id进行存储，然后每次显示的时候根据uid或者时间时间进行展示。\r\n\r\n还有第三种办法，就是按页进行保存，优点是高效，直接获取全部所有的想要展示的，缺点是一旦数据更新，需要更新全部数据，用不好，反而效率不高，这个时候，需要优雅降级。\r\n\r\n第一个降级的办法是，一定时间内更新全部的页数据，也是有一定压力的，而且，首页数据就已经不是实时的了。\r\n\r\n其实还有另外一种降级的办法，就是刷增量，每次更新page之后，保存一个最新的数据插入时间戳，用户访问的时候，查询数据库里面时间戳大于这个时间点的数据，整理，表明这些数据是最新的，不在page缓存中的，然后将这些数据作为首页将要呈现的数据，如果不足一页，从page缓存中的首页得到一页的数据，抽调其中一部分，补充，作为新的首页数据，然后配合定时刷新全部page页数据的部分，这样在保持效率的同时，保证了第一页，最重要 的部分始终是最新的数据，当然，第二页的数据就可能面临刷新时间间隔，不同步的问题。\r\n\r\n&nbsp;', '分页系统的设计与实现', '', 'publish', 'open', 'open', '', '%e5%88%86%e9%a1%b5%e7%b3%bb%e7%bb%9f%e7%9a%84%e8%ae%be%e8%ae%a1%e4%b8%8e%e5%ae%9e%e7%8e%b0', '', '', '2015-02-02 04:00:48', '2015-02-02 04:00:48', '', 0, 'http://unasm.sinaapp.com/?p=164', 0, 'post', '', 0),
(165, 1, '2015-02-02 03:27:19', '2015-02-02 03:27:19', '最近要做一个分页系统，页数可能有多，数据有点大，如果每次都去数据库重新查找数据，虽然是后台，但是也会对数据库和编辑的体验造成很大的影响，比较好的办法就是添加缓存，可以强制刷新获取最新数据，也可以从缓存中获取几分钟之前的数据。\r\n\r\n所有要呈现的数据从数据库里面检索出来之后是一个大数组，然后对数组进行整理，形成按用户成仙的数组格式，考虑到效率，在缓存中保存整理之后的数据比较好，也就是以用户的id为下表的数组。\r\n\r\n如何保存，有三种方案。\r\n\r\n一个是将整个大数组进行序列化打包，然后存储字符串，比较简单方便，真正读取数据的时候，先获取全部的，然后根据下表显示指定的数据。而且还有一个担心，就是redis的字符串最大长度是512mb，在用户为1百万的时候，每个用户只有500+字节，显然不够用，虽然1百万用户的情况比较少，但是不可不防。\r\n\r\n第二是将数组进行拆分，以用户的id为单元存储,或者是插入的时间+id进行存储，然后每次显示的时候根据uid或者时间时间进行展示。\r\n\r\n还有第三种办法，就是按页进行保存，优点是高效，直接获取全部所有的想要展示的，缺点是一旦数据更新，需要更新全部数据，用不好，反而效率不高，这个时候，需要优雅降级。\r\n\r\n第一个降级的办法是，一定时间内更新全部的页数据，也是有一定压力的，而且，首页数据就已经不是实时的了。\r\n\r\n其实还有另外一种降级的办法，就是刷增量，每次更新page之后，保存一个最新的数据插入时间戳，用户访问的时候，查询数据库里面时间戳大于这个时间点的数据，整理，表明这些数据是最新的，不在page缓存中的，然后将这些数据作为首页将要呈现的数据，如果不足一页，从page缓存中的首页得到一页的数据，抽调其中一部分，补充，作为新的首页数据，然后配合定时刷新全部page页数据的部分，这样在保持效率的同时，保证了第一页，最重要 的部分始终是最新的数据，当然，第二页的数据就可能面临刷新时间间隔，不同步的问题。\r\n\r\n&nbsp;', '分页系统的设计与实现', '', 'inherit', 'open', 'open', '', '164-revision-v1', '', '', '2015-02-02 03:27:19', '2015-02-02 03:27:19', '', 164, 'http://unasm.sinaapp.com/?p=165', 0, 'revision', '', 0),
(166, 1, '2015-02-03 03:56:21', '2015-02-03 03:56:21', '这个是为活动系统设计的一套动态分表的策略，活动数据的特点是每个活动之间的数据彼此独立，单个活动的的数据不算很大，几乎没有活动数据可以占据单独的一个表，\r\n\r\n首先在缓存中建立一个列表，标记还可以插入数据的表的集合，而在集合之外的其他的表已经是历史数据，至少不会有新的活动是数据插入，具体实现方式如下：\r\n\r\n<img class="alignnone" src="https://api.sinas3.com/v1/SAE_unasm/unasm/%E6%A1%B6%E6%B1%A0%E7%9A%84%E8%AE%BE%E8%AE%A1.jpg" alt="" width="556" height="627" />\r\n\r\n最上面的是一个一个的表，真正插入数据的地方\r\n\r\nActor 指活动，首先从列表中得到所有桶的信息，所谓桶，就是还可以插入数据的表，\r\n\r\n桶信息包括两种：表的名字，和已经插入该表的活动列表。根据这些可以获得当前每个表的数据量，以及为正在添加的活动预留的空间。\r\n\r\n因为获取的数据量是根据确实添加了的数据，之前为其他的已经结束的活动多预留的空间在这里可以重复利用。\r\n\r\n剩余的空间不足以容纳一个新的活动的时候，就放弃这个表，\r\n\r\n同时每个表的活动数量也可以一定程度的反应写压力，虽然不是很精确，但是两者存在一定的关联，如果严格的区分写压力，可以根据joyList中过去一定时间内插入的数据量来比较精确的反应写压力，然后将插入数据量放到桶信息里面，作为判断的依据，从而达到每个表的读写压力不至于过大的目的。从所有的桶中选择最优的，作为新的活动的存储地址。\r\n\r\n这样有几个好处：\r\n\r\n第一：保证了每个活动一个表的基本原则。\r\n\r\n第二：在不出现很奇葩的情况时候，保证了每个表的数据量都在一个设置的常量上下，比如200w，不会因为每个活动数据太少造成空间浪费。\r\n\r\n第三：动态创建表，可以保证数据的长期运行\r\n\r\n第四：为真正分担读写压力预留了扩展空间。\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n<code>\r\nclass DataModel  \r\n{\r\n    //存储桶池状态的set key\r\n    const KEY = ''jiaminJoyTest'';\r\n    //每个桶里面放的最多的活动数，考虑写压力,-1 表示不理会\r\n    const MAXEACHBUCKET = 3;\r\n    //每个活动预估的数字,20w\r\n    const EACHJOYNUM = 200000;\r\n    //每个表里面存储数据最多的基准值,200w\r\n    const MAXTABNUM = 2000000;\r\n\r\n    /**\r\n     *  添加新的桶，或者把活动添加到一个指定桶里面\r\n     *\r\n     *  之所以把修改和添加放在一起，是为了方便维护bucket里面的结构一直\r\n     *  只能有select 触发\r\n     *  @param  array   $bucket \r\n     **/\r\n    protected static function  addBucket($jid , $state = array())\r\n    {\r\n        $redis = new myRedis();\r\n        if(empty($state)){\r\n           //这里加入日志，提示创建了表 \r\n            $state = array(\r\n                ''name'' => UdataModel::createTab() ,\r\n                ''joyNum'' => 1,\r\n                ''joyList'' => array($jid)\r\n            );\r\n        } else {\r\n            if($redis->sRem(self::KEY , json_encode($state))){\r\n                $state[''joyNum''] += 1;\r\n                array_push($state[''joyList''] , $jid);\r\n            } else {\r\n                Common::debug(''删除桶池失败'');\r\n                Message::showError(''删除更新桶失败'');\r\n            }\r\n\r\n        }\r\n        if($redis->sAdd(self::KEY , json_encode($state))){\r\n            return $state[''name''];\r\n        }\r\n        //这里报警,添加失败，丢失了桶\r\n        Common::debug(''添加桶信息进入set 失败'');\r\n        return false;\r\n    }\r\n    \r\n\r\n    /**\r\n     * 从桶池中选择当前可以插入的表\r\n     * 就是从目前的bucket 中找一个最优的，\r\n     * 然后插入，如果都不满足条件，创建一个新的，如果超出了最大的桶池数就报警，\r\n     * 同时，创建成功\r\n     *\r\n     **/\r\n    public static function select($jid)\r\n    {\r\n        //查找所有符合条件的，然后得到一个负载最小的\r\n        $redis = new myRedis();\r\n        $data = $redis->sMembers(self::KEY);\r\n        $target = array();\r\n        if(count($data) === 0){\r\n            self::testAdd();\r\n        }\r\n        foreach($data as $bucket){\r\n            Common::Debug(''bucket : '' . $bucket);\r\n            $state = json_decode($bucket , true) ;\r\n            // 桶里面已经存储的总量\r\n            $storedInTab = UdataModel::getNumByName($state[''name'']); \r\n            if($storedInTab === 0){\r\n                BaseModelCommon::debug("no data in ". $state[''name'']);\r\n            }\r\n\r\n            if($state[''joyNum''] !== count( $state[''joyList'']) ){\r\n                //发送报警邮件，严重错误\r\n            }\r\n            //目前在桶里面的活动已经填充了的数据\r\n            $activeData = UdataModel::getDataNum($state[''name''], $state[''joyList'']);\r\n            BaseModelCommon::Debug(''activeData : '' . $activeData) ;\r\n            //需要为桶里面的活动预留的空间,\r\n            //预估的每个活动的记录数 * 活动的数目 - 已经存储了的数据 = 接来下还要占据的记录数\r\n            $activeNeedSpace = self::EACHJOYNUM * $state[''joyNum''] - $activeData;\r\n            BaseModelCommon::Debug(''activeNeedSpace : '' . $activeNeedSpace) ;\r\n            //发送报警邮件，告知管理员,同时这个桶池不再添加活动,避免进一步增加上限\r\n            if($activeNeedSpace < 0){\r\n                continue;\r\n            }\r\n            // 剩余的空间为每个表的最大数据数 - (已经存储的数据 + 还将要存储的数据数）\r\n            $leave = self::MAXTABNUM - ($storedInTab + $activeNeedSpace);\r\n\r\n            BaseModelCommon::Debug(''leave : '' . $leave) ;\r\n            // 如果剩下的空间还有就插入，进入备用列表,200w已经很保守了，没有必要降到200w以下\r\n            if($leave > 0){\r\n                if(empty($target)){\r\n                    $target = $state;\r\n                } else {\r\n                    //就根据插入的活动数量来判断负载, 不是最科学的，但是也是有相当道理\r\n                    if($target[''joyNum''] > $state[''joyNum'']){\r\n                        $target = $state;\r\n                    }\r\n                }\r\n            }\r\n            Common::Debug(''target : '' . json_encode($target));\r\n        }\r\n        //return self::addBucket($jid , $target);\r\n    }\r\n\r\n    /**\r\n     *  测试添加addBucket\r\n     *  @return     array ()    添加的桶的信息，名字等等\r\n     **/\r\n    public static function testAdd()\r\n    {\r\n        $states = array(\r\n            //name : 表名\r\n            //joyNum : 已经插入的活动数目\r\n            //joyList : 该表里面 正在插入的joy id列表\r\n            array(''name'' => ''udata_1'', ''joyNum'' => 3, ''joyList'' => array( 3,2,4 )),\r\n            array(''name'' => ''udata_2'', ''joyNum'' => 0, ''joyList'' => array()),\r\n            array(''name'' => ''udata_3'', ''joyNum'' => 1, ''joyList'' => array(7)),\r\n        );\r\n        $redis = new myRedis;\r\n        if($redis->sCard(self::KEY) === 0){\r\n            //灌数据\r\n            foreach($states as $state){\r\n                $redis->sAdd(self::KEY , json_encode($state));\r\n            }\r\n        }\r\n        //echo self::addBucket();\r\n    }  \r\n    \r\n    /**\r\n     * 监测程序的运行\r\n     *\r\n     * 程序员应该实时知道自己程序的运行状况\r\n     * @return array\r\n     **/\r\n    public static function inspect()\r\n    {\r\n        //array(''name'' => ''udata_1'', ''joyNum'' => 2, ''joyList'' => array( 3,2,4 )),\r\n        $redis = new myRedis;\r\n        $data = $redis->sMembers(self::KEY);\r\n        header("Cache-Control:no-cache");\r\n        echo "<table style = ''text-align:center''>\r\n            <thead><tr>\r\n            <th>当前正在插入表 </th>\r\n            <th>表内项目数</th>\r\n            <th>表内数据量</th>\r\n            <th>详情</th>\r\n            </tr></thead>";\r\n        foreach($data as $state){\r\n            $bucket = json_decode($state , true);\r\n            echo "<tr style = ''border-bottom:2px''><td>{$bucket[''name'']}</td> <td>{$bucket[''joyNum'']}</td>";\r\n            echo "<td>" . UdataModel::getNumByName($bucket[''name'']) . "</td>"; \r\n            echo "<td><table>";\r\n            foreach($bucket[''joyList''] as $joy){\r\n                echo "<tr>joy id 为{$joy}数量" . UdataModel::getDataNum($bucket[''name''], $joy) . "<br/></tr>";\r\n            }\r\n            echo "</table></td></tr>";\r\n        }\r\n        echo "</table>";\r\n    }\r\n\r\n    /**\r\n     * 清除数据\r\n     * 开发的时候用\r\n     **/\r\n    public static function clear()\r\n    {\r\n        $redis = new myRedis();\r\n        $data = $redis->sMembers(self::KEY);\r\n        foreach($data as $state){\r\n            $redis->sRem(self::KEY, $state);\r\n        }\r\n        $data = $redis->sMembers(self::KEY);\r\n        if(!count($data)) {\r\n            echo "it is clear<br/>";\r\n        } else {\r\n            echo "no clear<br/>";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清除bucket\r\n     *\r\n     * 当表里的数据已经达到200w的时候，就把这个表对应的桶删除\r\n     * 定时脚本,定期清理过期的数据\r\n     **/\r\n    public static function delBucket()\r\n    {\r\n        $data = $redis->sMembers(self::KEY);\r\n        foreach($data as $bucket){\r\n            $state = json_decode($bucket , true) ;\r\n            //数据已经满了的话，就从桶池里面删除，不再插入数据\r\n            if(UdataModel::getNumByName($state[''name'']) >= self::MAXTABNUM){\r\n                $redis->sRem(self::KEY , $bucket)  ;\r\n            }\r\n        }\r\n    }\r\n\r\n    function __construct(){}\r\n}\r\n</code>', 'mysql 分表之桶池', '', 'inherit', 'open', 'open', '', '10-revision-v1', '', '', '2015-02-03 03:56:21', '2015-02-03 03:56:21', '', 10, 'http://unasm.sinaapp.com/?p=166', 0, 'revision', '', 0),
(168, 1, '2015-02-11 03:30:44', '2015-02-11 03:30:44', '高速缓存的抖动就不解释了，为什么做一些填充之后，就可以是引用的块映射到到不同的组呢？', '高速缓存抖动解决方案的原理', '', 'publish', 'open', 'open', '', '%e9%ab%98%e9%80%9f%e7%bc%93%e5%ad%98%e6%8a%96%e5%8a%a8%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88%e7%9a%84%e5%8e%9f%e7%90%86', '', '', '2015-02-11 03:30:44', '2015-02-11 03:30:44', '', 0, 'http://unasm.sinaapp.com/?p=168', 0, 'post', '', 0),
(169, 1, '2015-02-11 03:30:44', '2015-02-11 03:30:44', '高速缓存的抖动就不解释了，为什么做一些填充之后，就可以是引用的块映射到到不同的组呢？', '高速缓存抖动解决方案的原理', '', 'inherit', 'open', 'open', '', '168-revision-v1', '', '', '2015-02-11 03:30:44', '2015-02-11 03:30:44', '', 168, 'http://unasm.sinaapp.com/?p=169', 0, 'revision', '', 0),
(170, 1, '2015-02-12 12:32:16', '0000-00-00 00:00:00', '在项目中，我们可能会选择性的人为的记录一些信息,这些信息', '日志的记录位置考虑', '', 'draft', 'open', 'open', '', '', '', '', '2015-02-12 12:32:16', '2015-02-12 12:32:16', '', 0, 'http://unasm.sinaapp.com/?p=170', 0, 'post', '', 0),
(171, 1, '2015-02-12 12:32:16', '2015-02-12 12:32:16', '在项目中，我们可能会选择性的人为的记录一些信息,这些信息', '日志的记录位置考虑', '', 'inherit', 'open', 'open', '', '170-revision-v1', '', '', '2015-02-12 12:32:16', '2015-02-12 12:32:16', '', 170, 'http://unasm.sinaapp.com/?p=171', 0, 'revision', '', 0),
(185, 1, '2015-03-05 03:32:40', '2015-03-05 03:32:40', '目前的版本是PHPUnit 3.6.12 by Sebastian Bergmann. phpunit 在针对的检测，并没有提供一种好的方法，比如我运行一段代码，然后运行结束之后die或者exit，die或者exit之前有内容输出，这个在php代码中很常见，但是phpunit却没提供一种很好的检测机制，多个case，几乎每个case都有exit或者die的情况，这个时候，如果采用多线程的方式，是不可以的，因为不存在像nodejs那种回调，一旦多线程开了，虽然可以让代码在exit的时候执行，但是却无法获取exit之前的输出，也就是还是缺少汇总，\r\n\r\n目前的折中方案，就是通过curl，发起http请求的方式来测试具体有exit的api，获取exit之前的结果和输出', 'phpunit 实践', '', 'inherit', 'open', 'open', '', '173-revision-v1', '', '', '2015-03-05 03:32:40', '2015-03-05 03:32:40', '', 173, 'http://unasm.sinaapp.com/?p=185', 0, 'revision', '', 0),
(174, 1, '2015-02-26 04:15:41', '2015-02-26 04:15:41', '目前的版本是PHPUnit 3.6.12 by Sebastian Bergmann. phpunit 在针对的检测，并没有提供一种好的方法，比如我运行一段代码，然后运行结束之后die或者exit，die或者exit之前有内容输出，这个在php代码中很常见，但是phpunit却没提供一种很好的检测机制可以通过缓冲来做\r\n\r\n<code>\r\nob_start();\r\nMessage::showSucc(''succ'');\r\n$output = ob_get_contents();\r\nob_end_clean();</code>\r\n\r\n<code>\r\nob_start();\r\nCdataModel::set();\r\n$code_output = ob_get_contents();\r\nob_end_clean();</code>\r\n\r\n上面两段，在Message::showSucc里面exit了，set函数里面也exit了，通过这样，可以得到想要的输出，运行的时候的输出，然后将$output 和 $code_output 对比，就可以知道在die的情况下得到die之前的输出，然后对比', 'phpunit 实践', '', 'inherit', 'open', 'open', '', '173-revision-v1', '', '', '2015-02-26 04:15:41', '2015-02-26 04:15:41', '', 173, 'http://unasm.sinaapp.com/?p=174', 0, 'revision', '', 0),
(175, 1, '2015-02-27 02:04:18', '2015-02-27 02:04:18', '<ol>\r\n	<li>一个表里面所有的varchar 字段加起来<strong>必须</strong>不能超过65532字节，推荐不超过8098个，因为一旦超过8098，占用的磁盘大小超过了一页,innodb会使用未压缩的blob页来保存，数据页会被用来保存偏移量，varchar越大，使用的blob越多，所以从效率和节省空间角度来说，不推荐超过8098.</li>\r\n	<li>char也被当做变成处理，根据字符集决定，比如同一个表，存入''a'' 和''他''占用的字节是不同的</li>\r\n	<li>innodb的range 分区 查询，只能针对YEAR,TO_DAYS,TO_SECONDS,UNIX_TIMESTAMP等函数进行搜索优化，比如YEAR(date) + MONTH(date)的时候，优化器是不会搜索优化的</li>\r\n	<li>Mysql 5.5版本之前 索引的添加或者删除操作过程是这样的\r\n<ul>\r\n	<li>先创建一个临时表，表结构为alter table之后的新定义的结构</li>\r\n	<li>把原来的数据导入临时表</li>\r\n	<li>删除原表</li>\r\n	<li>把临时表重命名为原来的表</li>\r\n</ul>\r\n</li>\r\n	<li>Got error 28 from storage engine,这就是一个很无辜的错误了，或者是属于dba范畴的，磁盘空间满了，没有空间写数据了</li>\r\n</ol>', 'mysql 基础知识集锦', '', 'publish', 'open', 'open', '', 'mysql-%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86%e9%9b%86%e9%94%a6', '', '', '2015-04-15 09:28:07', '2015-04-15 09:28:07', '', 0, 'http://unasm.sinaapp.com/?p=175', 0, 'post', '', 0),
(176, 1, '2015-02-27 02:04:18', '2015-02-27 02:04:18', '<ol>\r\n	<li>一个表里面所有的varchar 字段加起来不能超过65532字节</li>\r\n</ol>', 'mysql 基础知识集锦', '', 'inherit', 'open', 'open', '', '175-revision-v1', '', '', '2015-02-27 02:04:18', '2015-02-27 02:04:18', '', 175, 'http://unasm.sinaapp.com/?p=176', 0, 'revision', '', 0),
(177, 1, '2015-03-02 03:04:10', '2015-03-02 03:04:10', '', 'innodb 内存管理', '', 'publish', 'open', 'open', '', 'innodb-%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86', '', '', '2015-03-02 03:04:10', '2015-03-02 03:04:10', '', 0, 'http://unasm.sinaapp.com/?p=177', 0, 'post', '', 0),
(178, 1, '2015-03-02 03:04:10', '2015-03-02 03:04:10', '', 'innodb 内存管理', '', 'inherit', 'open', 'open', '', '177-revision-v1', '', '', '2015-03-02 03:04:10', '2015-03-02 03:04:10', '', 177, 'http://unasm.sinaapp.com/?p=178', 0, 'revision', '', 0),
(179, 1, '2015-04-15 09:26:08', '2015-04-15 09:26:08', '<ol>\n<ol>\n<ol>\n	<li>一个表里面所有的varchar 字段加起来<strong>必须</strong>不能超过65532字节，推荐不超过8098个，因为一旦超过8098，占用的磁盘大小超过了一页,innodb会使用未压缩的blob页来保存，数据页会被用来保存偏移量，varchar越大，使用的blob越多，所以从效率和节省空间角度来说，不推荐超过8098.</li>\n	<li>char也被当做变成处理，根据字符集决定，比如同一个表，存入''a'' 和''他''占用的字节是不同的</li>\n	<li>innodb的range 分区 查询，只能针对YEAR,TO_DAYS,TO_SECONDS,UNIX_TIMESTAMP等函数进行搜索优化，比如YEAR(date) + MONTH(date)的时候，优化器是不会搜索优化的</li>\n	<li>Mysql 5.5版本之前 索引的添加或者删除操作过程是这样的\n<ul>\n	<li>先创建一个临时表，表结构为alter table之后的新定义的结构</li>\n	<li>把原来的数据导入临时表</li>\n	<li>删除原表</li>\n	<li>把临时表重命名为原来的表</li>\n</ul>\n</li>\n</ol>\n</ol>\n</ol>', 'mysql 基础知识集锦', '', 'inherit', 'open', 'open', '', '175-autosave-v1', '', '', '2015-04-15 09:26:08', '2015-04-15 09:26:08', '', 175, 'http://unasm.sinaapp.com/?p=179', 0, 'revision', '', 0),
(180, 1, '2015-03-02 05:13:11', '2015-03-02 05:13:11', '<ol>\r\n	<li>一个表里面所有的varchar 字段加起来<strong>必须</strong>不能超过65532字节，推荐不超过8098个，因为一旦超过8098，占用的磁盘大小超过了一页,innodb会使用未压缩的blob页来保存，数据页会被用来保存偏移量，varchar越大，使用的blob越多</li>\r\n</ol>', 'mysql 基础知识集锦', '', 'inherit', 'open', 'open', '', '175-revision-v1', '', '', '2015-03-02 05:13:11', '2015-03-02 05:13:11', '', 175, 'http://unasm.sinaapp.com/?p=180', 0, 'revision', '', 0),
(181, 1, '2015-03-02 05:36:39', '2015-03-02 05:36:39', '<ol>\r\n	<li>一个表里面所有的varchar 字段加起来<strong>必须</strong>不能超过65532字节，推荐不超过8098个，因为一旦超过8098，占用的磁盘大小超过了一页,innodb会使用未压缩的blob页来保存，数据页会被用来保存偏移量，varchar越大，使用的blob越多，所以从效率和节省空间角度来说，不推荐超过8098.</li>\r\n	<li>char也被当做变成处理，根据字符集决定，比如同一个表，存入''a'' 和''他''占用的字节是不同的</li>\r\n</ol>', 'mysql 基础知识集锦', '', 'inherit', 'open', 'open', '', '175-revision-v1', '', '', '2015-03-02 05:36:39', '2015-03-02 05:36:39', '', 175, 'http://unasm.sinaapp.com/?p=181', 0, 'revision', '', 0),
(213, 1, '2015-03-19 17:24:34', '2015-03-19 17:24:34', '#这个文件控制着svnserver守护进程的配置，如果你想用它这个来访问版本库的话，那这个文件是没法避免的。\r\n\r\n[general]\r\n\r\n#这些选项控制着该版本库所有的有权限和没权限的用户，有效值是write,read,和none，配置的样例配置如默认配#置\r\n\r\nanon-access=none\r\n\r\nauth-access=write\r\n\r\n#password-db选项是数据库密码文件位置，除非你明确指明了一个以/开头的路径，否则密码文件的路径都是相对#于配置文件的相对路径。\r\n\r\npassword-db = passwd\r\n\r\n# authz-db 选项 是控制访问路径的权限的，不指定以/开头的路径，该文件的路径是相对于本文件的，不指定该\r\n\r\n#值，无法控制用户的访问路径。\r\n\r\n#realm （无意义）\r\n\r\n[sasl]\r\n\r\n#该选项指定是否使用Cyrus SASL权限验证库，默认不启用,运行命令“svnserve --version” ，查询是否能找到“<span class="s1">Cyrus #SASL authentication is available</span>”\r\n\r\n#use-sasl = true\r\n\r\n#这些选项指定想要通过sasl提供的安全级别，0 不加密，1意味着整数检查，大于一则意味着和加密字符串有效长度相关联\r\n\r\n#min-encryption = 0\r\n\r\n#max-encryption = 256', 'svn 服务器 配置svnserve.conf 翻译', '', 'publish', 'open', 'open', '', 'svn-%e6%9c%8d%e5%8a%a1%e5%99%a8-%e9%85%8d%e7%bd%aesvnserve-conf-%e7%bf%bb%e8%af%91', '', '', '2015-03-19 17:24:49', '2015-03-19 17:24:49', '', 0, 'http://unasm.sinaapp.com/?p=213', 0, 'post', '', 0),
(184, 1, '2015-03-05 03:31:15', '2015-03-05 03:31:15', '目前的版本是PHPUnit 3.6.12 by Sebastian Bergmann. phpunit 在针对的检测，并没有提供一种好的方法，比如我运行一段代码，然后运行结束之后die或者exit，die或者exit之前有内容输出，这个在php代码中很常见，但是phpunit却没提供一种很好的检测机制，多个case，几乎每个case都有exit或者die的情况，这个时候，如果采用多线程的方式，是不可以的，因为不存在像nodejs那种回调', 'phpunit 实践', '', 'inherit', 'open', 'open', '', '173-autosave-v1', '', '', '2015-03-05 03:31:15', '2015-03-05 03:31:15', '', 173, 'http://unasm.sinaapp.com/?p=184', 0, 'revision', '', 0),
(186, 1, '2015-03-06 09:49:27', '2015-03-06 09:49:27', '有一篇文章，需要被编辑，一般来说，都是一人在编辑，但是不排除两个人一起编辑的情况，因为不能做的像git那样成为一个标准的版本控制器，可以合并对比差异，这样工作量会有点大，所以实现一个最简单实用的，加锁，同一篇文章同一时间只能由一个人来编辑。\r\n\r\n第一种方案是在mc或者是redis加一个文章id和登陆编辑id的标志位，每次访问页面的时候，检查文章id的标志位是否存在，存在了，是谁在编辑，然后提示，通知不能编辑。对于缓存中的标志位的维护需要通过前端和后台的配合，前端在页面相隔时间T发送一个心跳信号，表示当前编辑依旧在编辑，后台在收到心跳信号之后，将标志位的失效时间延后3*T，保证不会因为某次网络事故丢包导致锁失效，如果编辑关闭浏览器，前端通过监测事件，在关闭之前发送一个请求，解除锁的存在，如果突然关机，或者断网等等，也可以保证锁在3*T之后，自动解除。\r\n\r\n这个方案的优点是简单，而且也实用，没有过于复杂的实现，前端和后台配合一下就好，缺点是DDOS，而且，关闭之前的事件或许发送失败，3*T时间的容忍程度，等等。\r\n\r\n第二种方案是websocket', '网络编辑文件中锁的实现', '', 'publish', 'open', 'open', '', '%e7%bd%91%e7%bb%9c%e7%bc%96%e8%be%91%e6%96%87%e4%bb%b6%e4%b8%ad%e9%94%81%e7%9a%84%e5%ae%9e%e7%8e%b0', '', '', '2015-03-06 10:06:19', '2015-03-06 10:06:19', '', 0, 'http://unasm.sinaapp.com/?p=186', 0, 'post', '', 0),
(187, 1, '2015-03-06 09:49:27', '2015-03-06 09:49:27', '有一篇文章，需要被编辑，一般来说，都是一人在编辑，但是不排除两个人一起编辑的情况，因为不能做的像git那样成为一个标准的版本控制器，可以合并对比差异，这样工作量会有点大，所以实现一个最简单实用的，加锁，同一篇文章同一时间只能由一个人来编辑。\r\n\r\n第一种方案是在mc或者是redis加一个文章id和登陆编辑id的标志位，每次访问页面的时候，检查文章id的标志位是否存在，存在了，是谁在编辑，然后提示，通知不能编辑。对于缓存中的标志位的维护需要通过前端和后台的配合，前端在页面相隔时间T发送一个心跳信号，表示当前编辑依旧在编辑，后台在收到心跳信号之后，将标志位的失效时间延后3*T，保证不会因为某次网络事故丢包导致锁失效，如果编辑关闭浏览器，前端通过监测事件，在关闭之前发送一个请求，解除锁的存在，如果突然关机，或者断网等等，也可以保证锁在3*T之后，自动解除。\r\n\r\n这个方案的优点是简单，而且也实用，没有过于复杂的实现，前端和后台配合一下就好，缺点是DDOS，而且，关闭之前的事件或许发送失败，3*T时间的容忍程度，等等。\r\n\r\n第二种方案是websocket', '网络编辑文件中锁的实现', '', 'inherit', 'open', 'open', '', '186-revision-v1', '', '', '2015-03-06 09:49:27', '2015-03-06 09:49:27', '', 186, 'http://unasm.sinaapp.com/?p=187', 0, 'revision', '', 0),
(188, 1, '2015-03-09 00:50:37', '2015-03-09 00:50:37', '<ol>\r\n	<li>一个表里面所有的varchar 字段加起来<strong>必须</strong>不能超过65532字节，推荐不超过8098个，因为一旦超过8098，占用的磁盘大小超过了一页,innodb会使用未压缩的blob页来保存，数据页会被用来保存偏移量，varchar越大，使用的blob越多，所以从效率和节省空间角度来说，不推荐超过8098.</li>\r\n	<li>char也被当做变成处理，根据字符集决定，比如同一个表，存入''a'' 和''他''占用的字节是不同的</li>\r\n	<li>innodb的range 分区 查询，只能针对YEAR,TO_DAYS,TO_SECONDS,UNIX_TIMESTAMP等函数进行搜索优化，比如YEAR(date) + MONTH(date)的时候，优化器是不会搜索优化的</li>\r\n</ol>', 'mysql 基础知识集锦', '', 'inherit', 'open', 'open', '', '175-revision-v1', '', '', '2015-03-09 00:50:37', '2015-03-09 00:50:37', '', 175, 'http://unasm.sinaapp.com/?p=188', 0, 'revision', '', 0),
(189, 1, '2015-03-11 16:23:50', '2015-03-11 16:23:50', '<p class="p1"><span class="s2">var</span><span class="s1"> conn = </span><span class="s3">new</span><span class="s1"> WebSocket</span><span class="s4">(</span><span class="s5">''ws://localhost:8080/echo''</span><span class="s4">)</span><span class="s1">;</span></p>\r\n<p class="p3"><span class="s5">conn</span><span class="s4">.</span><span class="s5">onopen = </span><span class="s2">function</span><span class="s4">(</span><span class="s3">event</span><span class="s4">)</span><span class="s2">{</span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">   </span></span><span class="s5"><span class="Apple-converted-space">   </span>conn</span><span class="s4">.</span><span class="s5">send</span><span class="s4">(</span><span class="s7">''I am listening''</span><span class="s4">)</span><span class="s5"> ;</span></p>\r\n<p class="p3"><span class="s3">    </span><span class="s5"> conn</span><span class="s4">.</span><span class="s5">onmessage = </span><span class="s2">function</span><span class="s4">(</span><span class="s5">e</span><span class="s4">)</span> <span class="s2">{</span></p>\r\n<p class="p3"><span class="s5">             console</span><span class="s4">.</span><span class="s5">log</span><span class="s4">(</span><span class="s5">e</span><span class="s4">.</span><span class="s5">data</span><span class="s4">)</span><span class="s5">; </span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">  </span></span><span class="s5"><span class="Apple-converted-space">   </span></span><span class="s2">}</span><span class="s5">;</span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">    </span></span><span class="s5"><span class="Apple-converted-space"> </span>conn</span><span class="s4">.</span><span class="s5">onclose = </span><span class="s2">function</span><span class="s4">(</span><span class="s3">event</span><span class="s4">)</span><span class="s2">{</span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">      </span></span><span class="s5"><span class="Apple-converted-space">       </span>console</span><span class="s4">.</span><span class="s5">log</span><span class="s4">(</span><span class="s7">"closing"</span><span class="s5">,</span><span class="s3">event</span><span class="s4">)</span><span class="s5"><span class="Apple-converted-space">    </span>;</span></p>\r\n<p class="p3"><span class="s5"><span class="Apple-converted-space">     </span></span><span class="s2">}</span></p>\r\n\r\n<pre class="default prettyprint prettyprinted"><code><span class="pln">  conn</span><span class="pun">.</span><span class="pln">onerror </span><span class="pun">=</span> <span class="kwd">function</span> <span class="pun">(</span><span class="pln">evt</span><span class="pun">)</span> <span class="pun">{</span><span class="pln">\r\n       console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">"ERR: "</span> <span class="pun">+</span><span class="pln"> evt</span><span class="pun">.</span><span class="pln">data</span><span class="pun">);</span>\r\n  <span class="pun">};</span>\r\n</code></pre>\r\n<p class="p3"><span class="s2">}</span></p>\r\nWebSocket对象一共支持四种消息事件 onopen, onmessage, onclose和onerror，\r\n\r\n1.  onopen当Browser和WebSocketServer连接成功后会触发onopen消息，这也就是为什么其他的方法都放在onopen内部的原因，只有在连接建立之后，才开始send数据，监听信息。\r\n\r\n2. 如果连接失败，发送、接收数据失败或者处理数据出现错误，browser会触发onerror消息;\r\n<div>3.当Browser接收到WebSocketServer发送过来的数据时，就会触发onmessage消息，参数evt中包含server传输过来的数据;</div>\r\n4.当Browser接收到WebSocketServer端发送的关闭连接请求时，就会触发onclose消息。\r\n\r\n所以上面一段代码的意思，就是首先声明一个conn的websocket对象，然后在建立连接之后，监听三种消息事件，关闭，错误，和接收到消息，send标明了主动和服务器通信的时候 的方法，', 'websocket 入门', '', 'publish', 'open', 'open', '', 'websocket-%e5%85%a5%e9%97%a8', '', '', '2015-03-11 16:36:20', '2015-03-11 16:36:20', '', 0, 'http://unasm.sinaapp.com/?p=189', 0, 'post', '', 0),
(190, 1, '2015-03-11 16:23:50', '2015-03-11 16:23:50', '<p class="p1"><span class="s2">var</span><span class="s1"> conn = </span><span class="s3">new</span><span class="s1"> WebSocket</span><span class="s4">(</span><span class="s5">''ws://localhost:8080/echo''</span><span class="s4">)</span><span class="s1">;</span></p>\r\n<p class="p1"><span class="s5"> //var conn = new WebSocket(''ws://localhost:8080/echo'');</span></p>\r\n<p class="p3"><span class="s5"><span class="Apple-converted-space">     </span>conn</span><span class="s4">.</span><span class="s5">onopen = </span><span class="s2">function</span><span class="s4">(</span><span class="s3">event</span><span class="s4">)</span><span class="s2">{</span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">   </span></span><span class="s5"><span class="Apple-converted-space">   </span>conn</span><span class="s4">.</span><span class="s5">send</span><span class="s4">(</span><span class="s7">''I am listening''</span><span class="s4">)</span><span class="s5"> ;</span></p>\r\n<p class="p3"><span class="s3">    </span><span class="s5"> conn</span><span class="s4">.</span><span class="s5">onmessage = </span><span class="s2">function</span><span class="s4">(</span><span class="s5">e</span><span class="s4">)</span> <span class="s2">{</span></p>\r\n<p class="p3"><span class="s5">             console</span><span class="s4">.</span><span class="s5">log</span><span class="s4">(</span><span class="s5">e</span><span class="s4">.</span><span class="s5">data</span><span class="s4">)</span><span class="s5">; </span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">  </span></span><span class="s5"><span class="Apple-converted-space">   </span></span><span class="s2">}</span><span class="s5">;</span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">    </span></span><span class="s5"><span class="Apple-converted-space"> </span>conn</span><span class="s4">.</span><span class="s5">onclose = </span><span class="s2">function</span><span class="s4">(</span><span class="s3">event</span><span class="s4">)</span><span class="s2">{</span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">      </span></span><span class="s5"><span class="Apple-converted-space">       </span>console</span><span class="s4">.</span><span class="s5">log</span><span class="s4">(</span><span class="s7">"closing"</span><span class="s5">,</span><span class="s3">event</span><span class="s4">)</span><span class="s5"><span class="Apple-converted-space">    </span>;</span></p>\r\n<p class="p3"><span class="s5"><span class="Apple-converted-space">     </span></span><span class="s2">}</span></p>\r\n\r\n<pre class="default prettyprint prettyprinted"><code><span class="pln">  conn</span><span class="pun">.</span><span class="pln">onerror </span><span class="pun">=</span> <span class="kwd">function</span> <span class="pun">(</span><span class="pln">evt</span><span class="pun">)</span> <span class="pun">{</span><span class="pln">\r\n       console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">"ERR: "</span> <span class="pun">+</span><span class="pln"> evt</span><span class="pun">.</span><span class="pln">data</span><span class="pun">);</span>\r\n  <span class="pun">};</span>\r\n</code></pre>\r\n<p class="p3"></p>\r\n<p class="p3"><span class="s2">}</span></p>\r\nWebSocket对象一共支持四个消息 onopen, onmessage, onclose和onerror，\r\n\r\n我们可以看出所有的操作都是采用消息的方式触发的，这样就不会阻塞UI，使得UI有更快的响应时间，得到更好的用户体验。\r\n\r\n1.  当Browser和WebSocketServer连接成功后，会触发onopen消息,这也就是为什么其他的方法都放在onopen内部的原因，只有在连接建立之后，才开始send数据，监听信息。\r\n\r\n2. 如果连接失败，发送、接收数据失败或者处理数据出现错误，browser会触发onerror消息;\r\n<div>3.当Browser接收到WebSocketServer发送过来的数据时，就会触发onmessage消息，参数evt中包含server传输过来的数据;</div>\r\n4.当Browser接收到WebSocketServer端发送的关闭连接请求时，就会触发onclose消息。', 'websocket 入门', '', 'inherit', 'open', 'open', '', '189-revision-v1', '', '', '2015-03-11 16:23:50', '2015-03-11 16:23:50', '', 189, 'http://unasm.sinaapp.com/?p=190', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(191, 1, '2015-03-11 16:36:16', '2015-03-11 16:36:16', '<p class="p1"><span class="s2">var</span><span class="s1"> conn = </span><span class="s3">new</span><span class="s1"> WebSocket</span><span class="s4">(</span><span class="s5">''ws://localhost:8080/echo''</span><span class="s4">)</span><span class="s1">;</span></p>\n<p class="p3"><span class="s5">conn</span><span class="s4">.</span><span class="s5">onopen = </span><span class="s2">function</span><span class="s4">(</span><span class="s3">event</span><span class="s4">)</span><span class="s2">{</span></p>\n<p class="p3"><span class="s3"><span class="Apple-converted-space">   </span></span><span class="s5"><span class="Apple-converted-space">   </span>conn</span><span class="s4">.</span><span class="s5">send</span><span class="s4">(</span><span class="s7">''I am listening''</span><span class="s4">)</span><span class="s5"> ;</span></p>\n<p class="p3"><span class="s3">    </span><span class="s5"> conn</span><span class="s4">.</span><span class="s5">onmessage = </span><span class="s2">function</span><span class="s4">(</span><span class="s5">e</span><span class="s4">)</span> <span class="s2">{</span></p>\n<p class="p3"><span class="s5">             console</span><span class="s4">.</span><span class="s5">log</span><span class="s4">(</span><span class="s5">e</span><span class="s4">.</span><span class="s5">data</span><span class="s4">)</span><span class="s5">; </span></p>\n<p class="p3"><span class="s3"><span class="Apple-converted-space">  </span></span><span class="s5"><span class="Apple-converted-space">   </span></span><span class="s2">}</span><span class="s5">;</span></p>\n<p class="p3"><span class="s3"><span class="Apple-converted-space">    </span></span><span class="s5"><span class="Apple-converted-space"> </span>conn</span><span class="s4">.</span><span class="s5">onclose = </span><span class="s2">function</span><span class="s4">(</span><span class="s3">event</span><span class="s4">)</span><span class="s2">{</span></p>\n<p class="p3"><span class="s3"><span class="Apple-converted-space">      </span></span><span class="s5"><span class="Apple-converted-space">       </span>console</span><span class="s4">.</span><span class="s5">log</span><span class="s4">(</span><span class="s7">"closing"</span><span class="s5">,</span><span class="s3">event</span><span class="s4">)</span><span class="s5"><span class="Apple-converted-space">    </span>;</span></p>\n<p class="p3"><span class="s5"><span class="Apple-converted-space">     </span></span><span class="s2">}</span></p>\n\n<pre class="default prettyprint prettyprinted"><code><span class="pln">  conn</span><span class="pun">.</span><span class="pln">onerror </span><span class="pun">=</span> <span class="kwd">function</span> <span class="pun">(</span><span class="pln">evt</span><span class="pun">)</span> <span class="pun">{</span><span class="pln">\n       console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">"ERR: "</span> <span class="pun">+</span><span class="pln"> evt</span><span class="pun">.</span><span class="pln">data</span><span class="pun">);</span>\n  <span class="pun">};</span>\n</code></pre>\n<p class="p3"><span class="s2">}</span></p>\nWebSocket对象一共支持四种消息事件 onopen, onmessage, onclose和onerror，\n\n1.  onopen当Browser和WebSocketServer连接成功后会触发onopen消息，这也就是为什么其他的方法都放在onopen内部的原因，只有在连接建立之后，才开始send数据，监听信息。\n\n2. 如果连接失败，发送、接收数据失败或者处理数据出现错误，browser会触发onerror消息;\n<div>3.当Browser接收到WebSocketServer发送过来的数据时，就会触发onmessage消息，参数evt中包含server传输过来的数据;</div>\n4.当Browser接收到WebSocketServer端发送的关闭连接请求时，就会触发onclose消息。\n\n所以上面一段代码的意思，就是首先声明一个conn的websocket对象，然后在建立连接之后，监听三种消息事件，关闭，错误，和接收到消息，send标明了主动和服务器通信的时候 的方法，', 'websocket 入门', '', 'inherit', 'open', 'open', '', '189-autosave-v1', '', '', '2015-03-11 16:36:16', '2015-03-11 16:36:16', '', 189, 'http://unasm.sinaapp.com/?p=191', 0, 'revision', '', 0),
(194, 1, '2015-03-11 16:36:20', '2015-03-11 16:36:20', '<p class="p1"><span class="s2">var</span><span class="s1"> conn = </span><span class="s3">new</span><span class="s1"> WebSocket</span><span class="s4">(</span><span class="s5">''ws://localhost:8080/echo''</span><span class="s4">)</span><span class="s1">;</span></p>\r\n<p class="p3"><span class="s5">conn</span><span class="s4">.</span><span class="s5">onopen = </span><span class="s2">function</span><span class="s4">(</span><span class="s3">event</span><span class="s4">)</span><span class="s2">{</span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">   </span></span><span class="s5"><span class="Apple-converted-space">   </span>conn</span><span class="s4">.</span><span class="s5">send</span><span class="s4">(</span><span class="s7">''I am listening''</span><span class="s4">)</span><span class="s5"> ;</span></p>\r\n<p class="p3"><span class="s3">    </span><span class="s5"> conn</span><span class="s4">.</span><span class="s5">onmessage = </span><span class="s2">function</span><span class="s4">(</span><span class="s5">e</span><span class="s4">)</span> <span class="s2">{</span></p>\r\n<p class="p3"><span class="s5">             console</span><span class="s4">.</span><span class="s5">log</span><span class="s4">(</span><span class="s5">e</span><span class="s4">.</span><span class="s5">data</span><span class="s4">)</span><span class="s5">; </span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">  </span></span><span class="s5"><span class="Apple-converted-space">   </span></span><span class="s2">}</span><span class="s5">;</span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">    </span></span><span class="s5"><span class="Apple-converted-space"> </span>conn</span><span class="s4">.</span><span class="s5">onclose = </span><span class="s2">function</span><span class="s4">(</span><span class="s3">event</span><span class="s4">)</span><span class="s2">{</span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">      </span></span><span class="s5"><span class="Apple-converted-space">       </span>console</span><span class="s4">.</span><span class="s5">log</span><span class="s4">(</span><span class="s7">"closing"</span><span class="s5">,</span><span class="s3">event</span><span class="s4">)</span><span class="s5"><span class="Apple-converted-space">    </span>;</span></p>\r\n<p class="p3"><span class="s5"><span class="Apple-converted-space">     </span></span><span class="s2">}</span></p>\r\n\r\n<pre class="default prettyprint prettyprinted"><code><span class="pln">  conn</span><span class="pun">.</span><span class="pln">onerror </span><span class="pun">=</span> <span class="kwd">function</span> <span class="pun">(</span><span class="pln">evt</span><span class="pun">)</span> <span class="pun">{</span><span class="pln">\r\n       console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">"ERR: "</span> <span class="pun">+</span><span class="pln"> evt</span><span class="pun">.</span><span class="pln">data</span><span class="pun">);</span>\r\n  <span class="pun">};</span>\r\n</code></pre>\r\n<p class="p3"><span class="s2">}</span></p>\r\nWebSocket对象一共支持四种消息事件 onopen, onmessage, onclose和onerror，\r\n\r\n1.  onopen当Browser和WebSocketServer连接成功后会触发onopen消息，这也就是为什么其他的方法都放在onopen内部的原因，只有在连接建立之后，才开始send数据，监听信息。\r\n\r\n2. 如果连接失败，发送、接收数据失败或者处理数据出现错误，browser会触发onerror消息;\r\n<div>3.当Browser接收到WebSocketServer发送过来的数据时，就会触发onmessage消息，参数evt中包含server传输过来的数据;</div>\r\n4.当Browser接收到WebSocketServer端发送的关闭连接请求时，就会触发onclose消息。\r\n\r\n所以上面一段代码的意思，就是首先声明一个conn的websocket对象，然后在建立连接之后，监听三种消息事件，关闭，错误，和接收到消息，send标明了主动和服务器通信的时候 的方法，', 'websocket 入门', '', 'inherit', 'open', 'open', '', '189-revision-v1', '', '', '2015-03-11 16:36:20', '2015-03-11 16:36:20', '', 189, 'http://unasm.sinaapp.com/?p=194', 0, 'revision', '', 0),
(193, 1, '2015-03-11 16:34:38', '2015-03-11 16:34:38', '<p class="p1"><span class="s2">var</span><span class="s1"> conn = </span><span class="s3">new</span><span class="s1"> WebSocket</span><span class="s4">(</span><span class="s5">''ws://localhost:8080/echo''</span><span class="s4">)</span><span class="s1">;</span></p>\r\n<p class="p3"><span class="s5">conn</span><span class="s4">.</span><span class="s5">onopen = </span><span class="s2">function</span><span class="s4">(</span><span class="s3">event</span><span class="s4">)</span><span class="s2">{</span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">   </span></span><span class="s5"><span class="Apple-converted-space">   </span>conn</span><span class="s4">.</span><span class="s5">send</span><span class="s4">(</span><span class="s7">''I am listening''</span><span class="s4">)</span><span class="s5"> ;</span></p>\r\n<p class="p3"><span class="s3">    </span><span class="s5"> conn</span><span class="s4">.</span><span class="s5">onmessage = </span><span class="s2">function</span><span class="s4">(</span><span class="s5">e</span><span class="s4">)</span> <span class="s2">{</span></p>\r\n<p class="p3"><span class="s5">             console</span><span class="s4">.</span><span class="s5">log</span><span class="s4">(</span><span class="s5">e</span><span class="s4">.</span><span class="s5">data</span><span class="s4">)</span><span class="s5">; </span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">  </span></span><span class="s5"><span class="Apple-converted-space">   </span></span><span class="s2">}</span><span class="s5">;</span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">    </span></span><span class="s5"><span class="Apple-converted-space"> </span>conn</span><span class="s4">.</span><span class="s5">onclose = </span><span class="s2">function</span><span class="s4">(</span><span class="s3">event</span><span class="s4">)</span><span class="s2">{</span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">      </span></span><span class="s5"><span class="Apple-converted-space">       </span>console</span><span class="s4">.</span><span class="s5">log</span><span class="s4">(</span><span class="s7">"closing"</span><span class="s5">,</span><span class="s3">event</span><span class="s4">)</span><span class="s5"><span class="Apple-converted-space">    </span>;</span></p>\r\n<p class="p3"><span class="s5"><span class="Apple-converted-space">     </span></span><span class="s2">}</span></p>\r\n\r\n<pre class="default prettyprint prettyprinted"><code><span class="pln">  conn</span><span class="pun">.</span><span class="pln">onerror </span><span class="pun">=</span> <span class="kwd">function</span> <span class="pun">(</span><span class="pln">evt</span><span class="pun">)</span> <span class="pun">{</span><span class="pln">\r\n       console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">"ERR: "</span> <span class="pun">+</span><span class="pln"> evt</span><span class="pun">.</span><span class="pln">data</span><span class="pun">);</span>\r\n  <span class="pun">};</span>\r\n</code></pre>\r\n<p class="p3"><span class="s2">}</span></p>\r\nWebSocket对象一共支持四个消息 onopen, onmessage, onclose和onerror，\r\n\r\n我们可以看出所有的操作都是采用消息的方式触发的，这样就不会阻塞UI，使得UI有更快的响应时间，得到更好的用户体验。\r\n\r\n1.  当Browser和WebSocketServer连接成功后，会触发onopen消息,这也就是为什么其他的方法都放在onopen内部的原因，只有在连接建立之后，才开始send数据，监听信息。\r\n\r\n2. 如果连接失败，发送、接收数据失败或者处理数据出现错误，browser会触发onerror消息;\r\n<div>3.当Browser接收到WebSocketServer发送过来的数据时，就会触发onmessage消息，参数evt中包含server传输过来的数据;</div>\r\n4.当Browser接收到WebSocketServer端发送的关闭连接请求时，就会触发onclose消息。\r\n\r\n所以上面一段代码的意思，就是首先声明一个conn的websocket对象，然后在建立连接之后，监听三种消息事件，关闭，错误，和接收到消息，send标明了主动和服务器通信的时候 的方法，', 'websocket 入门', '', 'inherit', 'open', 'open', '', '189-revision-v1', '', '', '2015-03-11 16:34:38', '2015-03-11 16:34:38', '', 189, 'http://unasm.sinaapp.com/?p=193', 0, 'revision', '', 0),
(192, 1, '2015-03-11 16:32:14', '2015-03-11 16:32:14', '<p class="p1"><span class="s2">var</span><span class="s1"> conn = </span><span class="s3">new</span><span class="s1"> WebSocket</span><span class="s4">(</span><span class="s5">''ws://localhost:8080/echo''</span><span class="s4">)</span><span class="s1">;</span></p>\r\n<p class="p1"><span class="s5"> //var conn = new WebSocket(''ws://localhost:8080/echo'');</span></p>\r\n<p class="p3"><span class="s5">conn</span><span class="s4">.</span><span class="s5">onopen = </span><span class="s2">function</span><span class="s4">(</span><span class="s3">event</span><span class="s4">)</span><span class="s2">{</span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">   </span></span><span class="s5"><span class="Apple-converted-space">   </span>conn</span><span class="s4">.</span><span class="s5">send</span><span class="s4">(</span><span class="s7">''I am listening''</span><span class="s4">)</span><span class="s5"> ;</span></p>\r\n<p class="p3"><span class="s3">    </span><span class="s5"> conn</span><span class="s4">.</span><span class="s5">onmessage = </span><span class="s2">function</span><span class="s4">(</span><span class="s5">e</span><span class="s4">)</span> <span class="s2">{</span></p>\r\n<p class="p3"><span class="s5">             console</span><span class="s4">.</span><span class="s5">log</span><span class="s4">(</span><span class="s5">e</span><span class="s4">.</span><span class="s5">data</span><span class="s4">)</span><span class="s5">; </span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">  </span></span><span class="s5"><span class="Apple-converted-space">   </span></span><span class="s2">}</span><span class="s5">;</span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">    </span></span><span class="s5"><span class="Apple-converted-space"> </span>conn</span><span class="s4">.</span><span class="s5">onclose = </span><span class="s2">function</span><span class="s4">(</span><span class="s3">event</span><span class="s4">)</span><span class="s2">{</span></p>\r\n<p class="p3"><span class="s3"><span class="Apple-converted-space">      </span></span><span class="s5"><span class="Apple-converted-space">       </span>console</span><span class="s4">.</span><span class="s5">log</span><span class="s4">(</span><span class="s7">"closing"</span><span class="s5">,</span><span class="s3">event</span><span class="s4">)</span><span class="s5"><span class="Apple-converted-space">    </span>;</span></p>\r\n<p class="p3"><span class="s5"><span class="Apple-converted-space">     </span></span><span class="s2">}</span></p>\r\n\r\n<pre class="default prettyprint prettyprinted"><code><span class="pln">  conn</span><span class="pun">.</span><span class="pln">onerror </span><span class="pun">=</span> <span class="kwd">function</span> <span class="pun">(</span><span class="pln">evt</span><span class="pun">)</span> <span class="pun">{</span><span class="pln">\r\n       console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">"ERR: "</span> <span class="pun">+</span><span class="pln"> evt</span><span class="pun">.</span><span class="pln">data</span><span class="pun">);</span>\r\n  <span class="pun">};</span>\r\n</code></pre>\r\n<p class="p3"><span class="s2">}</span></p>\r\nWebSocket对象一共支持四个消息 onopen, onmessage, onclose和onerror，\r\n\r\n我们可以看出所有的操作都是采用消息的方式触发的，这样就不会阻塞UI，使得UI有更快的响应时间，得到更好的用户体验。\r\n\r\n1.  当Browser和WebSocketServer连接成功后，会触发onopen消息,这也就是为什么其他的方法都放在onopen内部的原因，只有在连接建立之后，才开始send数据，监听信息。\r\n\r\n2. 如果连接失败，发送、接收数据失败或者处理数据出现错误，browser会触发onerror消息;\r\n<div>3.当Browser接收到WebSocketServer发送过来的数据时，就会触发onmessage消息，参数evt中包含server传输过来的数据;</div>\r\n4.当Browser接收到WebSocketServer端发送的关闭连接请求时，就会触发onclose消息。\r\n\r\n所以上面一段代码的意思，就是首先声明一个conn的websocket对象，然后在建立连接之后，监听三种消息事件，关闭，错误，和接收到消息，send标明了主动和服务器通信的时候 的方法，', 'websocket 入门', '', 'inherit', 'open', 'open', '', '189-revision-v1', '', '', '2015-03-11 16:32:14', '2015-03-11 16:32:14', '', 189, 'http://unasm.sinaapp.com/?p=192', 0, 'revision', '', 0),
(195, 1, '2015-03-12 09:37:02', '2015-03-12 09:37:02', '1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心\r\n\r\n2.检测编码的时候，mb_check_encoding基本是没有用的，检查不出当前的字符串编码格式\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">  </span></span><span class="s2">if</span> <span class="s3">(</span><span class="s4">3</span> <span class="s2">!==</span> <span class="s5">strlen</span><span class="s3">(</span><span class="s1">''</span><span class="s4">✓</span><span class="s1">''</span><span class="s3">))</span> <span class="s3">{</span><span class="s1"><span class="Apple-converted-space">                                                                                                                                            </span></span></p>\r\n<p class="p2"><span class="s8"><span class="Apple-converted-space">          </span></span><span class="s9"><span class="Apple-converted-space">  </span></span><span class="s8">throw</span> <span class="s11">new</span><span class="s9"> \\</span><span class="s12">DomainException</span><span class="s11">(</span><span class="s9">''</span><span class="s13">Bad encoding, length of unicode character ✓ should be 3. Ensure charset UTF-8 and check ini val  mbstring.func_autoload</span><span class="s9">''</span><span class="s11">)</span><span class="s9">; <span class="Apple-converted-space">         </span></span><span class="s13">    </span> <span class="s13"> </span></p>\r\n<p class="p2"><span class="s11">}</span><span class="s13">                                                                                                                                                                  </span></p>\r\n<p class="p2">这个方法不错，可以判断是不是utf-8编码</p>\r\n<p class="p2">3.php静态变量的问题。奇葩问题。</p>\r\n<p class="p2">   从mc中读取缓存，如果读取次数太多，也会出现效率问题，一个更加优化的办法是保存在静态变量里面，或者是变量里面，这样会得到更高的效率。</p>\r\n<p class="p2">这样做的前提条件是，数据量不能够过大，php的静态变量中不能保存太多的东西，最近遇到一个问题，</p>\r\n<p class="p2">一个数组，长度为9，存储在mc中的，每个变量的长度是一个长度48的数组，如下,其中只有四条是有用的，如果我将这个9 * 48</p>\r\n\r\n<pre>的数组存在静态变量里面，页面是无法显示出来的，如果将长度为48的数组替换成想要的长度为4的数组，就可以毫无压力的显示数据，由此可见静态变量无法保存这个9 * 48 的数组，不过有点奇怪的是，使用 memory_get_usage 测试，耗费内存是2.4mb，不再变化。\r\n\r\n&lt;!--------------------------------------------------------------------------&gt;\r\n实测证明，不是因为静态变量大，将此长度为48数组单独保存，for循环复制给一个静态变量，，发现在循环到1000，程序执行如常，因为担心引用造成的复用，\r\n每次循环中修改数组中的变量，形成数组脏数组，避免php的内部数据引用，结果依旧证明，不是因为静态变量造成的。</pre>\r\n<pre>4.array_merge 的元素中，如果其中有null或者其他，返回结果不是array，而是null</pre>', 'PHP 的坑', '', 'publish', 'open', 'open', '', 'php-%e7%9a%84%e5%9d%91', '', '', '2015-03-23 10:22:55', '2015-03-23 10:22:55', '', 0, 'http://unasm.sinaapp.com/?p=195', 0, 'post', '', 0),
(196, 1, '2015-03-12 09:37:02', '2015-03-12 09:37:02', '1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心', 'PHP 的坑', '', 'inherit', 'open', 'open', '', '195-revision-v1', '', '', '2015-03-12 09:37:02', '2015-03-12 09:37:02', '', 195, 'http://unasm.sinaapp.com/?p=196', 0, 'revision', '', 0),
(199, 1, '2015-03-12 16:47:36', '2015-03-12 16:47:36', '1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心\r\n\r\n2.检测编码的时候，mb_check_encoding基本是没有用的，检查不出当前的字符串编码格式\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">  </span></span><span class="s2">if</span> <span class="s3">(</span><span class="s4">3</span> <span class="s2">!==</span> <span class="s5">strlen</span><span class="s3">(</span><span class="s1">''</span><span class="s4">✓</span><span class="s1">''</span><span class="s3">))</span> <span class="s3">{</span><span class="s1"><span class="Apple-converted-space">                                                                                                                                            </span></span></p>\r\n<p class="p2"><span class="s8"><span class="Apple-converted-space">          </span></span><span class="s9"><span class="Apple-converted-space">  </span></span><span class="s8">throw</span> <span class="s11">new</span><span class="s9"> \\</span><span class="s12">DomainException</span><span class="s11">(</span><span class="s9">''</span><span class="s13">Bad encoding, length of unicode character ✓ should be 3. Ensure charset UTF-8 and check ini val  mbstring.func_autoload</span><span class="s9">''</span><span class="s11">)</span><span class="s9">; <span class="Apple-converted-space">         </span></span><span class="s13">    </span> <span class="s13"> </span></p>\r\n<p class="p2"><span class="s11">}</span><span class="s13">                                                                                                                                                                  </span></p>\r\n<p class="p2">这个方法不错，可以判断是不是utf-8编码</p>', 'PHP 的坑', '', 'inherit', 'open', 'open', '', '195-revision-v1', '', '', '2015-03-12 16:47:36', '2015-03-12 16:47:36', '', 195, 'http://unasm.sinaapp.com/?p=199', 0, 'revision', '', 0),
(200, 1, '2015-03-14 07:54:31', '2015-03-14 07:54:31', '1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心\r\n\r\n2.检测编码的时候，mb_check_encoding基本是没有用的，检查不出当前的字符串编码格式\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">  </span></span><span class="s2">if</span> <span class="s3">(</span><span class="s4">3</span> <span class="s2">!==</span> <span class="s5">strlen</span><span class="s3">(</span><span class="s1">''</span><span class="s4">✓</span><span class="s1">''</span><span class="s3">))</span> <span class="s3">{</span><span class="s1"><span class="Apple-converted-space">                                                                                                                                            </span></span></p>\r\n<p class="p2"><span class="s8"><span class="Apple-converted-space">          </span></span><span class="s9"><span class="Apple-converted-space">  </span></span><span class="s8">throw</span> <span class="s11">new</span><span class="s9"> \\</span><span class="s12">DomainException</span><span class="s11">(</span><span class="s9">''</span><span class="s13">Bad encoding, length of unicode character ✓ should be 3. Ensure charset UTF-8 and check ini val  mbstring.func_autoload</span><span class="s9">''</span><span class="s11">)</span><span class="s9">; <span class="Apple-converted-space">         </span></span><span class="s13">    </span> <span class="s13"> </span></p>\r\n<p class="p2"><span class="s11">}</span><span class="s13">                                                                                                                                                                  </span></p>\r\n<p class="p2">这个方法不错，可以判断是不是utf-8编码</p>\r\n<p class="p2">3.php静态变量的问题。</p>\r\n<p class="p2">   从mc中读取缓存，如果读取次数太多，也会出现效率问题，一个更加优化的办法是保存在静态变量里面，或者是变量里面，这样会得到更高的效率。</p>\r\n<p class="p2">这样做的前提条件是，数据量不能够过大，php的静态变量中不能保存太多的东西，最近遇到一个问题，</p>\r\n<p class="p2">一个数组，长度为9，存储在mc中的，每个变量的长度是一个长度48的数组，如下,其中只有四条是有用的，如果我将这个9 * 48</p>\r\n\r\n<pre>的数组存在静态变量里面，页面是无法显示出来的，如果将长度为48的数组替换成想要的长度为4的数组，就可以毫无压力的显示数据，由此可见静态变量无法保存这个9 * 48 的数组，\r\narray(48) {\r\n  ["id"]=&gt;\r\n  int(2940866463)\r\n  ["idstr"]=&gt;\r\n  string(10) "2940866463"\r\n  ["class"]=&gt;\r\n  int(1)\r\n  ["screen_name"]=&gt;\r\n  string(30) "testtesttesttesttesttesttestte"\r\n  ["name"]=&gt;\r\n  string(30) "testtesttesttesttesttesttestte"\r\n  ["province"]=&gt;\r\n  string(3) "400"\r\n  ["city"]=&gt;\r\n  string(1) "5"\r\n  ["location"]=&gt;\r\n  string(16) "海外 加拿大"\r\n  ["description"]=&gt;\r\n  string(15) "曾经的曾经"\r\n  ["url"]=&gt;\r\n  string(0) ""\r\n  ["profile_image_url"]=&gt;\r\n  string(48) "http://tp4.sinaimg.cn/2940866463/50/5647849369/0"\r\n  ["profile_url"]=&gt;\r\n  string(12) "u/2940866463"\r\n  ["domain"]=&gt;\r\n  string(0) ""\r\n  ["weihao"]=&gt;\r\n  string(0) ""\r\n  ["gender"]=&gt;\r\n  string(1) "f"\r\n  ["followers_count"]=&gt;\r\n  int(157)\r\n  ["friends_count"]=&gt;\r\n  int(86)\r\n  ["pagefriends_count"]=&gt;\r\n  int(0)\r\n  ["statuses_count"]=&gt;\r\n  int(724)\r\n  ["favourites_count"]=&gt;\r\n  int(87)\r\n  ["created_at"]=&gt;\r\n  string(30) "Fri Sep 07 09:58:19 +0800 2012"\r\n  ["following"]=&gt;\r\n  bool(false)\r\n  ["allow_all_act_msg"]=&gt;\r\n  bool(false)\r\n  ["geo_enabled"]=&gt;\r\n  bool(true)\r\n  ["verified"]=&gt;\r\n  bool(false)\r\n  ["verified_type"]=&gt;\r\n  int(-1)\r\n  ["remark"]=&gt;\r\n  string(0) ""\r\n  ["status"]=&gt;\r\n  array(21) {\r\n    ["created_at"]=&gt;\r\n    string(30) "Fri Mar 13 16:37:03 +0800 2015"\r\n    ["id"]=&gt;\r\n    int(3819972268604590)\r\n    ["mid"]=&gt;\r\n    string(16) "3819972268604590"\r\n    ["idstr"]=&gt;\r\n    string(16) "3819972268604590"\r\n    ["text"]=&gt;\r\n    string(17) "#新浪观影团#"\r\n    ["source_allowclick"]=&gt;\r\n    int(0)\r\n    ["source_type"]=&gt;\r\n    int(1)\r\n    ["source"]=&gt;\r\n    string(63) "<a href="http://weibo.com/" rel="nofollow">微博 weibo.com</a>"\r\n    ["favorited"]=&gt;\r\n    bool(false)\r\n    ["truncated"]=&gt;\r\n    bool(false)\r\n    ["in_reply_to_status_id"]=&gt;\r\n    string(0) ""\r\n    ["in_reply_to_user_id"]=&gt;\r\n    string(0) ""\r\n    ["in_reply_to_screen_name"]=&gt;\r\n    string(0) ""\r\n    ["pic_ids"]=&gt;\r\n    array(0) {\r\n    }\r\n    ["geo"]=&gt;\r\n    NULL\r\n    ["reposts_count"]=&gt;\r\n    int(0)\r\n    ["comments_count"]=&gt;\r\n    int(0)\r\n    ["attitudes_count"]=&gt;\r\n    int(0)\r\n    ["mlevel"]=&gt;\r\n    int(0)\r\n    ["visible"]=&gt;\r\n    array(2) {\r\n      ["type"]=&gt;\r\n      int(0)\r\n      ["list_id"]=&gt;\r\n      int(0)\r\n    }\r\n    ["darwin_tags"]=&gt;\r\n    array(0) {\r\n    }\r\n  }\r\n  ["ptype"]=&gt;\r\n  int(0)\r\n  ["allow_all_comment"]=&gt;\r\n  bool(false)\r\n  ["avatar_large"]=&gt;\r\n  string(49) "http://tp4.sinaimg.cn/2940866463/180/5647849369/0"\r\n  ["avatar_hd"]=&gt;\r\n  string(49) "http://tp4.sinaimg.cn/2940866463/180/5647849369/0"\r\n  ["verified_reason"]=&gt;\r\n  string(0) ""\r\n  ["verified_trade"]=&gt;\r\n  string(0) ""\r\n  ["verified_reason_url"]=&gt;\r\n  string(0) ""\r\n  ["verified_source"]=&gt;\r\n  string(0) ""\r\n  ["verified_source_url"]=&gt;\r\n  string(0) ""\r\n  ["follow_me"]=&gt;\r\n  bool(false)\r\n  ["online_status"]=&gt;\r\n  int(0)\r\n  ["bi_followers_count"]=&gt;\r\n  int(6)\r\n  ["lang"]=&gt;\r\n  string(5) "zh-cn"\r\n  ["star"]=&gt;\r\n  int(0)\r\n  ["mbtype"]=&gt;\r\n  int(0)\r\n  ["mbrank"]=&gt;\r\n  int(0)\r\n  ["block_word"]=&gt;\r\n  int(0)\r\n  ["block_app"]=&gt;\r\n  int(0)\r\n  ["credit_score"]=&gt;\r\n  int(80)\r\n  ["urank"]=&gt;\r\n  int(8)\r\n}</pre>', 'PHP 的坑', '', 'inherit', 'open', 'open', '', '195-revision-v1', '', '', '2015-03-14 07:54:31', '2015-03-14 07:54:31', '', 195, 'http://unasm.sinaapp.com/?p=200', 0, 'revision', '', 0),
(225, 1, '2015-03-26 06:47:13', '2015-03-26 06:47:13', '<p class="p1"><span class="s1"><span class="Apple-converted-space">   </span>upstream websocket {<span class="Apple-converted-space">             </span></span> <span class="s1"><span class="Apple-converted-space">                              </span></span><span class="s4"><span class="Apple-converted-space">                                                                                                      </span></span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">         </span></span><span class="s6">#负载均衡</span><span class="s1"> <span class="Apple-converted-space">                   </span></span> <span class="s1"><span class="Apple-converted-space">                              </span></span><span class="s4"><span class="Apple-converted-space">                                                                                                    </span></span></p>\r\n<p class="p1"><span class="s1">          server 127.0.0.1:8030 weight=</span><span class="s2">5</span><span class="s1">;                   </span><span class="s4">                                                                                                  </span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">          </span>server 127.0.0.1:8040 weight=</span><span class="s2">1</span><span class="s1">; <span class="Apple-converted-space">                     </span></span><span class="s4"><span class="Apple-converted-space">                                                                                        </span></span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">  </span>} <span class="Apple-converted-space">                               </span></span> <span class="s1"><span class="Apple-converted-space">                         </span></span><span class="s4"><span class="Apple-converted-space">                                                                                                   </span></span></p>\r\n<p class="p1"><span class="s1">server {<span class="Apple-converted-space">                         </span></span> <span class="s1"><span class="Apple-converted-space">                            </span></span><span class="s4"><span class="Apple-converted-space">                                                                                                      </span></span></p>\r\n<p class="p1"><span class="s1">        listen 8020;<span class="Apple-converted-space">                 </span></span> <span class="s1"><span class="Apple-converted-space">                             </span></span><span class="s4"><span class="Apple-converted-space">                                                                                                  </span></span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">         </span></span><span class="s1"><span class="Apple-converted-space"> </span>location /chat/ { <span class="Apple-converted-space">           </span></span> <span class="s1"><span class="Apple-converted-space">             </span></span><span class="s4"><span class="Apple-converted-space">                                                                                                </span></span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">  </span> </span><span class="s1"><span class="Apple-converted-space">                </span>proxy_pass http://web</span><span class="s2">s</span><span class="s1">ocket;<span class="Apple-converted-space">                      </span></span><span class="s4"><span class="Apple-converted-space">                                                                                                    </span></span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">  </span> </span><span class="s1"><span class="Apple-converted-space">        </span></span><span class="s6"># <span class="Apple-converted-space">      </span>proxy_pass http://127</span><span class="s2">.</span><span class="s6">0.0.1:</span><span class="s7">8010</span><span class="s6">;</span><span class="s1"> <span class="Apple-converted-space">           </span></span><span class="s4"><span class="Apple-converted-space">                                                                                            </span></span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">  </span> </span><span class="s1"><span class="Apple-converted-space">                </span>proxy_http_version 1.</span><span class="s2">1</span><span class="s1">; <span class="Apple-converted-space">                       </span></span><span class="s4"><span class="Apple-converted-space">                                                                                                    </span></span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">  </span> </span><span class="s1"><span class="Apple-converted-space">                </span>proxy_set_header Upgr</span><span class="s2">a</span><span class="s1">de $http_upgrade; <span class="Apple-converted-space">           </span></span><span class="s4"><span class="Apple-converted-space">                                                                                          </span></span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">  </span> </span><span class="s1"><span class="Apple-converted-space">                </span>proxy_set_header Conn</span><span class="s2">e</span><span class="s1">ction $connection_upgrade;</span><span class="s4"><span class="Apple-converted-space">                                                                                             </span></span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">  </span> </span><span class="s1"><span class="Apple-converted-space">        </span>} <span class="Apple-converted-space">                       </span></span> <span class="s1"><span class="Apple-converted-space">                        </span></span><span class="s4"><span class="Apple-converted-space">                                                                                        </span></span></p>\r\n<p class="p2"><span class="s5"><span class="Apple-converted-space">  </span></span><span class="s4">}<span class="Apple-converted-space">                   </span></span></p>\r\n<p class="p2">上面就是一个最简单的负载均衡，</p>\r\n<p class="p2">首先server监听8020端口，然后将请求分发给websocket ，然后socket下面是一个服务器集群，分别是8030和8040端口，两台端口分别独立处理请求，可以称之为8020是一个反向代理，8030,和8040的nodejs服务器，是后端服务器集群。</p>', 'nginx配置之upstream 案例解释', '', 'publish', 'open', 'open', '', 'nginx%e9%85%8d%e7%bd%ae%e4%b9%8bupstream-%e6%a1%88%e4%be%8b%e8%a7%a3%e9%87%8a', '', '', '2015-03-26 06:49:55', '2015-03-26 06:49:55', '', 0, 'http://unasm.sinaapp.com/?p=225', 0, 'post', '', 0),
(201, 1, '2015-03-14 08:07:43', '2015-03-14 08:07:43', '1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心\r\n\r\n2.检测编码的时候，mb_check_encoding基本是没有用的，检查不出当前的字符串编码格式\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">  </span></span><span class="s2">if</span> <span class="s3">(</span><span class="s4">3</span> <span class="s2">!==</span> <span class="s5">strlen</span><span class="s3">(</span><span class="s1">''</span><span class="s4">✓</span><span class="s1">''</span><span class="s3">))</span> <span class="s3">{</span><span class="s1"><span class="Apple-converted-space">                                                                                                                                            </span></span></p>\r\n<p class="p2"><span class="s8"><span class="Apple-converted-space">          </span></span><span class="s9"><span class="Apple-converted-space">  </span></span><span class="s8">throw</span> <span class="s11">new</span><span class="s9"> \\</span><span class="s12">DomainException</span><span class="s11">(</span><span class="s9">''</span><span class="s13">Bad encoding, length of unicode character ✓ should be 3. Ensure charset UTF-8 and check ini val  mbstring.func_autoload</span><span class="s9">''</span><span class="s11">)</span><span class="s9">; <span class="Apple-converted-space">         </span></span><span class="s13">    </span> <span class="s13"> </span></p>\r\n<p class="p2"><span class="s11">}</span><span class="s13">                                                                                                                                                                  </span></p>\r\n<p class="p2">这个方法不错，可以判断是不是utf-8编码</p>\r\n<p class="p2">3.php静态变量的问题。</p>\r\n<p class="p2">   从mc中读取缓存，如果读取次数太多，也会出现效率问题，一个更加优化的办法是保存在静态变量里面，或者是变量里面，这样会得到更高的效率。</p>\r\n<p class="p2">这样做的前提条件是，数据量不能够过大，php的静态变量中不能保存太多的东西，最近遇到一个问题，</p>\r\n<p class="p2">一个数组，长度为9，存储在mc中的，每个变量的长度是一个长度48的数组，如下,其中只有四条是有用的，如果我将这个9 * 48</p>\r\n\r\n<pre>的数组存在静态变量里面，页面是无法显示出来的，如果将长度为48的数组替换成想要的长度为4的数组，就可以毫无压力的显示数据，由此可见静态变量无法保存这个9 * 48 的数组，不过有点奇怪的是，使用 memory_get_usage 测试，耗费内存是2.4mb，不再变化。</pre>\r\n<pre> array(48) {\r\n  ["id"]=&gt;\r\n  int(2940866463)\r\n  ["idstr"]=&gt;\r\n  string(10) "2940866463"\r\n  ["class"]=&gt;\r\n  int(1)\r\n  ["screen_name"]=&gt;\r\n  string(30) "testtesttesttesttesttesttestte"\r\n  ["name"]=&gt;\r\n  string(30) "testtesttesttesttesttesttestte"\r\n  ["province"]=&gt;\r\n  string(3) "400"\r\n  ["city"]=&gt;\r\n  string(1) "5"\r\n  ["location"]=&gt;\r\n  string(16) "海外 加拿大"\r\n  ["description"]=&gt;\r\n  string(15) "曾经的曾经"\r\n  ["url"]=&gt;\r\n  string(0) ""\r\n  ["profile_image_url"]=&gt;\r\n  string(48) "http://tp4.sinaimg.cn/2940866463/50/5647849369/0"\r\n  ["profile_url"]=&gt;\r\n  string(12) "u/2940866463"\r\n  ["domain"]=&gt;\r\n  string(0) ""\r\n  ["weihao"]=&gt;\r\n  string(0) ""\r\n  ["gender"]=&gt;\r\n  string(1) "f"\r\n  ["followers_count"]=&gt;\r\n  int(157)\r\n  ["friends_count"]=&gt;\r\n  int(86)\r\n  ["pagefriends_count"]=&gt;\r\n  int(0)\r\n  ["statuses_count"]=&gt;\r\n  int(724)\r\n  ["favourites_count"]=&gt;\r\n  int(87)\r\n  ["created_at"]=&gt;\r\n  string(30) "Fri Sep 07 09:58:19 +0800 2012"\r\n  ["following"]=&gt;\r\n  bool(false)\r\n  ["allow_all_act_msg"]=&gt;\r\n  bool(false)\r\n  ["geo_enabled"]=&gt;\r\n  bool(true)\r\n  ["verified"]=&gt;\r\n  bool(false)\r\n  ["verified_type"]=&gt;\r\n  int(-1)\r\n  ["remark"]=&gt;\r\n  string(0) ""\r\n  ["status"]=&gt;\r\n  array(21) {\r\n    ["created_at"]=&gt;\r\n    string(30) "Fri Mar 13 16:37:03 +0800 2015"\r\n    ["id"]=&gt;\r\n    int(3819972268604590)\r\n    ["mid"]=&gt;\r\n    string(16) "3819972268604590"\r\n    ["idstr"]=&gt;\r\n    string(16) "3819972268604590"\r\n    ["text"]=&gt;\r\n    string(17) "#新浪观影团#"\r\n    ["source_allowclick"]=&gt;\r\n    int(0)\r\n    ["source_type"]=&gt;\r\n    int(1)\r\n    ["source"]=&gt;\r\n    string(63) "<a href="http://weibo.com/" rel="nofollow">微博 weibo.com</a>"\r\n    ["favorited"]=&gt;\r\n    bool(false)\r\n    ["truncated"]=&gt;\r\n    bool(false)\r\n    ["in_reply_to_status_id"]=&gt;\r\n    string(0) ""\r\n    ["in_reply_to_user_id"]=&gt;\r\n    string(0) ""\r\n    ["in_reply_to_screen_name"]=&gt;\r\n    string(0) ""\r\n    ["pic_ids"]=&gt;\r\n    array(0) {\r\n    }\r\n    ["geo"]=&gt;\r\n    NULL\r\n    ["reposts_count"]=&gt;\r\n    int(0)\r\n    ["comments_count"]=&gt;\r\n    int(0)\r\n    ["attitudes_count"]=&gt;\r\n    int(0)\r\n    ["mlevel"]=&gt;\r\n    int(0)\r\n    ["visible"]=&gt;\r\n    array(2) {\r\n      ["type"]=&gt;\r\n      int(0)\r\n      ["list_id"]=&gt;\r\n      int(0)\r\n    }\r\n    ["darwin_tags"]=&gt;\r\n    array(0) {\r\n    }\r\n  }\r\n  ["ptype"]=&gt;\r\n  int(0)\r\n  ["allow_all_comment"]=&gt;\r\n  bool(false)\r\n  ["avatar_large"]=&gt;\r\n  string(49) "http://tp4.sinaimg.cn/2940866463/180/5647849369/0"\r\n  ["avatar_hd"]=&gt;\r\n  string(49) "http://tp4.sinaimg.cn/2940866463/180/5647849369/0"\r\n  ["verified_reason"]=&gt;\r\n  string(0) ""\r\n  ["verified_trade"]=&gt;\r\n  string(0) ""\r\n  ["verified_reason_url"]=&gt;\r\n  string(0) ""\r\n  ["verified_source"]=&gt;\r\n  string(0) ""\r\n  ["verified_source_url"]=&gt;\r\n  string(0) ""\r\n  ["follow_me"]=&gt;\r\n  bool(false)\r\n  ["online_status"]=&gt;\r\n  int(0)\r\n  ["bi_followers_count"]=&gt;\r\n  int(6)\r\n  ["lang"]=&gt;\r\n  string(5) "zh-cn"\r\n  ["star"]=&gt;\r\n  int(0)\r\n  ["mbtype"]=&gt;\r\n  int(0)\r\n  ["mbrank"]=&gt;\r\n  int(0)\r\n  ["block_word"]=&gt;\r\n  int(0)\r\n  ["block_app"]=&gt;\r\n  int(0)\r\n  ["credit_score"]=&gt;\r\n  int(80)\r\n  ["urank"]=&gt;\r\n  int(8)\r\n}</pre>', 'PHP 的坑', '', 'inherit', 'open', 'open', '', '195-revision-v1', '', '', '2015-03-14 08:07:43', '2015-03-14 08:07:43', '', 195, 'http://unasm.sinaapp.com/?p=201', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(202, 1, '2015-03-14 09:24:08', '2015-03-14 09:24:08', '1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心\r\n\r\n2.检测编码的时候，mb_check_encoding基本是没有用的，检查不出当前的字符串编码格式\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">  </span></span><span class="s2">if</span> <span class="s3">(</span><span class="s4">3</span> <span class="s2">!==</span> <span class="s5">strlen</span><span class="s3">(</span><span class="s1">''</span><span class="s4">✓</span><span class="s1">''</span><span class="s3">))</span> <span class="s3">{</span><span class="s1"><span class="Apple-converted-space">                                                                                                                                            </span></span></p>\r\n<p class="p2"><span class="s8"><span class="Apple-converted-space">          </span></span><span class="s9"><span class="Apple-converted-space">  </span></span><span class="s8">throw</span> <span class="s11">new</span><span class="s9"> \\</span><span class="s12">DomainException</span><span class="s11">(</span><span class="s9">''</span><span class="s13">Bad encoding, length of unicode character ✓ should be 3. Ensure charset UTF-8 and check ini val  mbstring.func_autoload</span><span class="s9">''</span><span class="s11">)</span><span class="s9">; <span class="Apple-converted-space">         </span></span><span class="s13">    </span> <span class="s13"> </span></p>\r\n<p class="p2"><span class="s11">}</span><span class="s13">                                                                                                                                                                  </span></p>\r\n<p class="p2">这个方法不错，可以判断是不是utf-8编码</p>\r\n<p class="p2">3.php静态变量的问题。</p>\r\n<p class="p2">   从mc中读取缓存，如果读取次数太多，也会出现效率问题，一个更加优化的办法是保存在静态变量里面，或者是变量里面，这样会得到更高的效率。</p>\r\n<p class="p2">这样做的前提条件是，数据量不能够过大，php的静态变量中不能保存太多的东西，最近遇到一个问题，</p>\r\n<p class="p2">一个数组，长度为9，存储在mc中的，每个变量的长度是一个长度48的数组，如下,其中只有四条是有用的，如果我将这个9 * 48</p>\r\n\r\n<pre>的数组存在静态变量里面，页面是无法显示出来的，如果将长度为48的数组替换成想要的长度为4的数组，就可以毫无压力的显示数据，由此可见静态变量无法保存这个9 * 48 的数组，不过有点奇怪的是，使用 memory_get_usage 测试，耗费内存是2.4mb，不再变化。\r\n\r\n&lt;!--------------------------------------------------------------------------&gt;\r\n实测证明，不是因为静态变量大，将此长度为48数组单独保存，for循环复制给一个静态变量，，发现在循环到1000，程序执行如常，因为担心引用造成的复用，\r\n每次循环中修改数组中的变量，形成数组脏数组，避免php的内部数据引用，结果依旧证明，不是因为静态变量造成的。</pre>\r\n<pre> array(48) {\r\n  ["id"]=&gt;\r\n  int(2940866463)\r\n  ["idstr"]=&gt;\r\n  string(10) "2940866463"\r\n  ["class"]=&gt;\r\n  int(1)\r\n  ["screen_name"]=&gt;\r\n  string(30) "testtesttesttesttesttesttestte"\r\n  ["name"]=&gt;\r\n  string(30) "testtesttesttesttesttesttestte"\r\n  ["province"]=&gt;\r\n  string(3) "400"\r\n  ["city"]=&gt;\r\n  string(1) "5"\r\n  ["location"]=&gt;\r\n  string(16) "海外 加拿大"\r\n  ["description"]=&gt;\r\n  string(15) "曾经的曾经"\r\n  ["url"]=&gt;\r\n  string(0) ""\r\n  ["profile_image_url"]=&gt;\r\n  string(48) "http://tp4.sinaimg.cn/2940866463/50/5647849369/0"\r\n  ["profile_url"]=&gt;\r\n  string(12) "u/2940866463"\r\n  ["domain"]=&gt;\r\n  string(0) ""\r\n  ["weihao"]=&gt;\r\n  string(0) ""\r\n  ["gender"]=&gt;\r\n  string(1) "f"\r\n  ["followers_count"]=&gt;\r\n  int(157)\r\n  ["friends_count"]=&gt;\r\n  int(86)\r\n  ["pagefriends_count"]=&gt;\r\n  int(0)\r\n  ["statuses_count"]=&gt;\r\n  int(724)\r\n  ["favourites_count"]=&gt;\r\n  int(87)\r\n  ["created_at"]=&gt;\r\n  string(30) "Fri Sep 07 09:58:19 +0800 2012"\r\n  ["following"]=&gt;\r\n  bool(false)\r\n  ["allow_all_act_msg"]=&gt;\r\n  bool(false)\r\n  ["geo_enabled"]=&gt;\r\n  bool(true)\r\n  ["verified"]=&gt;\r\n  bool(false)\r\n  ["verified_type"]=&gt;\r\n  int(-1)\r\n  ["remark"]=&gt;\r\n  string(0) ""\r\n  ["status"]=&gt;\r\n  array(21) {\r\n    ["created_at"]=&gt;\r\n    string(30) "Fri Mar 13 16:37:03 +0800 2015"\r\n    ["id"]=&gt;\r\n    int(3819972268604590)\r\n    ["mid"]=&gt;\r\n    string(16) "3819972268604590"\r\n    ["idstr"]=&gt;\r\n    string(16) "3819972268604590"\r\n    ["text"]=&gt;\r\n    string(17) "#新浪观影团#"\r\n    ["source_allowclick"]=&gt;\r\n    int(0)\r\n    ["source_type"]=&gt;\r\n    int(1)\r\n    ["source"]=&gt;\r\n    string(63) "<a href="http://weibo.com/" rel="nofollow">微博 weibo.com</a>"\r\n    ["favorited"]=&gt;\r\n    bool(false)\r\n    ["truncated"]=&gt;\r\n    bool(false)\r\n    ["in_reply_to_status_id"]=&gt;\r\n    string(0) ""\r\n    ["in_reply_to_user_id"]=&gt;\r\n    string(0) ""\r\n    ["in_reply_to_screen_name"]=&gt;\r\n    string(0) ""\r\n    ["pic_ids"]=&gt;\r\n    array(0) {\r\n    }\r\n    ["geo"]=&gt;\r\n    NULL\r\n    ["reposts_count"]=&gt;\r\n    int(0)\r\n    ["comments_count"]=&gt;\r\n    int(0)\r\n    ["attitudes_count"]=&gt;\r\n    int(0)\r\n    ["mlevel"]=&gt;\r\n    int(0)\r\n    ["visible"]=&gt;\r\n    array(2) {\r\n      ["type"]=&gt;\r\n      int(0)\r\n      ["list_id"]=&gt;\r\n      int(0)\r\n    }\r\n    ["darwin_tags"]=&gt;\r\n    array(0) {\r\n    }\r\n  }\r\n  ["ptype"]=&gt;\r\n  int(0)\r\n  ["allow_all_comment"]=&gt;\r\n  bool(false)\r\n  ["avatar_large"]=&gt;\r\n  string(49) "http://tp4.sinaimg.cn/2940866463/180/5647849369/0"\r\n  ["avatar_hd"]=&gt;\r\n  string(49) "http://tp4.sinaimg.cn/2940866463/180/5647849369/0"\r\n  ["verified_reason"]=&gt;\r\n  string(0) ""\r\n  ["verified_trade"]=&gt;\r\n  string(0) ""\r\n  ["verified_reason_url"]=&gt;\r\n  string(0) ""\r\n  ["verified_source"]=&gt;\r\n  string(0) ""\r\n  ["verified_source_url"]=&gt;\r\n  string(0) ""\r\n  ["follow_me"]=&gt;\r\n  bool(false)\r\n  ["online_status"]=&gt;\r\n  int(0)\r\n  ["bi_followers_count"]=&gt;\r\n  int(6)\r\n  ["lang"]=&gt;\r\n  string(5) "zh-cn"\r\n  ["star"]=&gt;\r\n  int(0)\r\n  ["mbtype"]=&gt;\r\n  int(0)\r\n  ["mbrank"]=&gt;\r\n  int(0)\r\n  ["block_word"]=&gt;\r\n  int(0)\r\n  ["block_app"]=&gt;\r\n  int(0)\r\n  ["credit_score"]=&gt;\r\n  int(80)\r\n  ["urank"]=&gt;\r\n  int(8)\r\n}</pre>', 'PHP 的坑', '', 'inherit', 'open', 'open', '', '195-revision-v1', '', '', '2015-03-14 09:24:08', '2015-03-14 09:24:08', '', 195, 'http://unasm.sinaapp.com/?p=202', 0, 'revision', '', 0),
(224, 1, '2015-03-23 10:11:20', '2015-03-23 10:11:20', '1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心\r\n\r\n2.检测编码的时候，mb_check_encoding基本是没有用的，检查不出当前的字符串编码格式\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">  </span></span><span class="s2">if</span> <span class="s3">(</span><span class="s4">3</span> <span class="s2">!==</span> <span class="s5">strlen</span><span class="s3">(</span><span class="s1">''</span><span class="s4">✓</span><span class="s1">''</span><span class="s3">))</span> <span class="s3">{</span><span class="s1"><span class="Apple-converted-space">                                                                                                                                            </span></span></p>\r\n<p class="p2"><span class="s8"><span class="Apple-converted-space">          </span></span><span class="s9"><span class="Apple-converted-space">  </span></span><span class="s8">throw</span> <span class="s11">new</span><span class="s9"> \\</span><span class="s12">DomainException</span><span class="s11">(</span><span class="s9">''</span><span class="s13">Bad encoding, length of unicode character ✓ should be 3. Ensure charset UTF-8 and check ini val  mbstring.func_autoload</span><span class="s9">''</span><span class="s11">)</span><span class="s9">; <span class="Apple-converted-space">         </span></span><span class="s13">    </span> <span class="s13"> </span></p>\r\n<p class="p2"><span class="s11">}</span><span class="s13">                                                                                                                                                                  </span></p>\r\n<p class="p2">这个方法不错，可以判断是不是utf-8编码</p>\r\n<p class="p2">3.php静态变量的问题。奇葩问题。</p>\r\n<p class="p2">   从mc中读取缓存，如果读取次数太多，也会出现效率问题，一个更加优化的办法是保存在静态变量里面，或者是变量里面，这样会得到更高的效率。</p>\r\n<p class="p2">这样做的前提条件是，数据量不能够过大，php的静态变量中不能保存太多的东西，最近遇到一个问题，</p>\r\n<p class="p2">一个数组，长度为9，存储在mc中的，每个变量的长度是一个长度48的数组，如下,其中只有四条是有用的，如果我将这个9 * 48</p>\r\n\r\n<pre>的数组存在静态变量里面，页面是无法显示出来的，如果将长度为48的数组替换成想要的长度为4的数组，就可以毫无压力的显示数据，由此可见静态变量无法保存这个9 * 48 的数组，不过有点奇怪的是，使用 memory_get_usage 测试，耗费内存是2.4mb，不再变化。\r\n\r\n&lt;!--------------------------------------------------------------------------&gt;\r\n实测证明，不是因为静态变量大，将此长度为48数组单独保存，for循环复制给一个静态变量，，发现在循环到1000，程序执行如常，因为担心引用造成的复用，\r\n每次循环中修改数组中的变量，形成数组脏数组，避免php的内部数据引用，结果依旧证明，不是因为静态变量造成的。</pre>\r\n<pre>4.array_merge 的元素中，如果其中有null或者其他，返回结果不是array，而是null</pre>', 'PHP 的坑', '', 'inherit', 'open', 'open', '', '195-revision-v1', '', '', '2015-03-23 10:11:20', '2015-03-23 10:11:20', '', 195, 'http://unasm.sinaapp.com/?p=224', 0, 'revision', '', 0),
(203, 1, '2015-03-14 09:24:44', '2015-03-14 09:24:44', '1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心\r\n\r\n2.检测编码的时候，mb_check_encoding基本是没有用的，检查不出当前的字符串编码格式\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">  </span></span><span class="s2">if</span> <span class="s3">(</span><span class="s4">3</span> <span class="s2">!==</span> <span class="s5">strlen</span><span class="s3">(</span><span class="s1">''</span><span class="s4">✓</span><span class="s1">''</span><span class="s3">))</span> <span class="s3">{</span><span class="s1"><span class="Apple-converted-space">                                                                                                                                            </span></span></p>\r\n<p class="p2"><span class="s8"><span class="Apple-converted-space">          </span></span><span class="s9"><span class="Apple-converted-space">  </span></span><span class="s8">throw</span> <span class="s11">new</span><span class="s9"> \\</span><span class="s12">DomainException</span><span class="s11">(</span><span class="s9">''</span><span class="s13">Bad encoding, length of unicode character ✓ should be 3. Ensure charset UTF-8 and check ini val  mbstring.func_autoload</span><span class="s9">''</span><span class="s11">)</span><span class="s9">; <span class="Apple-converted-space">         </span></span><span class="s13">    </span> <span class="s13"> </span></p>\r\n<p class="p2"><span class="s11">}</span><span class="s13">                                                                                                                                                                  </span></p>\r\n<p class="p2">这个方法不错，可以判断是不是utf-8编码</p>\r\n<p class="p2">3.php静态变量的问题。奇葩问题。</p>\r\n<p class="p2">   从mc中读取缓存，如果读取次数太多，也会出现效率问题，一个更加优化的办法是保存在静态变量里面，或者是变量里面，这样会得到更高的效率。</p>\r\n<p class="p2">这样做的前提条件是，数据量不能够过大，php的静态变量中不能保存太多的东西，最近遇到一个问题，</p>\r\n<p class="p2">一个数组，长度为9，存储在mc中的，每个变量的长度是一个长度48的数组，如下,其中只有四条是有用的，如果我将这个9 * 48</p>\r\n\r\n<pre>的数组存在静态变量里面，页面是无法显示出来的，如果将长度为48的数组替换成想要的长度为4的数组，就可以毫无压力的显示数据，由此可见静态变量无法保存这个9 * 48 的数组，不过有点奇怪的是，使用 memory_get_usage 测试，耗费内存是2.4mb，不再变化。\r\n\r\n&lt;!--------------------------------------------------------------------------&gt;\r\n实测证明，不是因为静态变量大，将此长度为48数组单独保存，for循环复制给一个静态变量，，发现在循环到1000，程序执行如常，因为担心引用造成的复用，\r\n每次循环中修改数组中的变量，形成数组脏数组，避免php的内部数据引用，结果依旧证明，不是因为静态变量造成的。</pre>\r\n<pre> array(48) {\r\n  ["id"]=&gt;\r\n  int(2940866463)\r\n  ["idstr"]=&gt;\r\n  string(10) "2940866463"\r\n  ["class"]=&gt;\r\n  int(1)\r\n  ["screen_name"]=&gt;\r\n  string(30) "testtesttesttesttesttesttestte"\r\n  ["name"]=&gt;\r\n  string(30) "testtesttesttesttesttesttestte"\r\n  ["province"]=&gt;\r\n  string(3) "400"\r\n  ["city"]=&gt;\r\n  string(1) "5"\r\n  ["location"]=&gt;\r\n  string(16) "海外 加拿大"\r\n  ["description"]=&gt;\r\n  string(15) "曾经的曾经"\r\n  ["url"]=&gt;\r\n  string(0) ""\r\n  ["profile_image_url"]=&gt;\r\n  string(48) "http://tp4.sinaimg.cn/2940866463/50/5647849369/0"\r\n  ["profile_url"]=&gt;\r\n  string(12) "u/2940866463"\r\n  ["domain"]=&gt;\r\n  string(0) ""\r\n  ["weihao"]=&gt;\r\n  string(0) ""\r\n  ["gender"]=&gt;\r\n  string(1) "f"\r\n  ["followers_count"]=&gt;\r\n  int(157)\r\n  ["friends_count"]=&gt;\r\n  int(86)\r\n  ["pagefriends_count"]=&gt;\r\n  int(0)\r\n  ["statuses_count"]=&gt;\r\n  int(724)\r\n  ["favourites_count"]=&gt;\r\n  int(87)\r\n  ["created_at"]=&gt;\r\n  string(30) "Fri Sep 07 09:58:19 +0800 2012"\r\n  ["following"]=&gt;\r\n  bool(false)\r\n  ["allow_all_act_msg"]=&gt;\r\n  bool(false)\r\n  ["geo_enabled"]=&gt;\r\n  bool(true)\r\n  ["verified"]=&gt;\r\n  bool(false)\r\n  ["verified_type"]=&gt;\r\n  int(-1)\r\n  ["remark"]=&gt;\r\n  string(0) ""\r\n  ["status"]=&gt;\r\n  array(21) {\r\n    ["created_at"]=&gt;\r\n    string(30) "Fri Mar 13 16:37:03 +0800 2015"\r\n    ["id"]=&gt;\r\n    int(3819972268604590)\r\n    ["mid"]=&gt;\r\n    string(16) "3819972268604590"\r\n    ["idstr"]=&gt;\r\n    string(16) "3819972268604590"\r\n    ["text"]=&gt;\r\n    string(17) "#新浪观影团#"\r\n    ["source_allowclick"]=&gt;\r\n    int(0)\r\n    ["source_type"]=&gt;\r\n    int(1)\r\n    ["source"]=&gt;\r\n    string(63) "<a href="http://weibo.com/" rel="nofollow">微博 weibo.com</a>"\r\n    ["favorited"]=&gt;\r\n    bool(false)\r\n    ["truncated"]=&gt;\r\n    bool(false)\r\n    ["in_reply_to_status_id"]=&gt;\r\n    string(0) ""\r\n    ["in_reply_to_user_id"]=&gt;\r\n    string(0) ""\r\n    ["in_reply_to_screen_name"]=&gt;\r\n    string(0) ""\r\n    ["pic_ids"]=&gt;\r\n    array(0) {\r\n    }\r\n    ["geo"]=&gt;\r\n    NULL\r\n    ["reposts_count"]=&gt;\r\n    int(0)\r\n    ["comments_count"]=&gt;\r\n    int(0)\r\n    ["attitudes_count"]=&gt;\r\n    int(0)\r\n    ["mlevel"]=&gt;\r\n    int(0)\r\n    ["visible"]=&gt;\r\n    array(2) {\r\n      ["type"]=&gt;\r\n      int(0)\r\n      ["list_id"]=&gt;\r\n      int(0)\r\n    }\r\n    ["darwin_tags"]=&gt;\r\n    array(0) {\r\n    }\r\n  }\r\n  ["ptype"]=&gt;\r\n  int(0)\r\n  ["allow_all_comment"]=&gt;\r\n  bool(false)\r\n  ["avatar_large"]=&gt;\r\n  string(49) "http://tp4.sinaimg.cn/2940866463/180/5647849369/0"\r\n  ["avatar_hd"]=&gt;\r\n  string(49) "http://tp4.sinaimg.cn/2940866463/180/5647849369/0"\r\n  ["verified_reason"]=&gt;\r\n  string(0) ""\r\n  ["verified_trade"]=&gt;\r\n  string(0) ""\r\n  ["verified_reason_url"]=&gt;\r\n  string(0) ""\r\n  ["verified_source"]=&gt;\r\n  string(0) ""\r\n  ["verified_source_url"]=&gt;\r\n  string(0) ""\r\n  ["follow_me"]=&gt;\r\n  bool(false)\r\n  ["online_status"]=&gt;\r\n  int(0)\r\n  ["bi_followers_count"]=&gt;\r\n  int(6)\r\n  ["lang"]=&gt;\r\n  string(5) "zh-cn"\r\n  ["star"]=&gt;\r\n  int(0)\r\n  ["mbtype"]=&gt;\r\n  int(0)\r\n  ["mbrank"]=&gt;\r\n  int(0)\r\n  ["block_word"]=&gt;\r\n  int(0)\r\n  ["block_app"]=&gt;\r\n  int(0)\r\n  ["credit_score"]=&gt;\r\n  int(80)\r\n  ["urank"]=&gt;\r\n  int(8)\r\n}</pre>', 'PHP 的坑', '', 'inherit', 'open', 'open', '', '195-revision-v1', '', '', '2015-03-14 09:24:44', '2015-03-14 09:24:44', '', 195, 'http://unasm.sinaapp.com/?p=203', 0, 'revision', '', 0),
(204, 1, '2015-03-15 00:12:31', '2015-03-15 00:12:31', '<ol>\r\n	<li>一个表里面所有的varchar 字段加起来<strong>必须</strong>不能超过65532字节，推荐不超过8098个，因为一旦超过8098，占用的磁盘大小超过了一页,innodb会使用未压缩的blob页来保存，数据页会被用来保存偏移量，varchar越大，使用的blob越多，所以从效率和节省空间角度来说，不推荐超过8098.</li>\r\n	<li>char也被当做变成处理，根据字符集决定，比如同一个表，存入''a'' 和''他''占用的字节是不同的</li>\r\n	<li>innodb的range 分区 查询，只能针对YEAR,TO_DAYS,TO_SECONDS,UNIX_TIMESTAMP等函数进行搜索优化，比如YEAR(date) + MONTH(date)的时候，优化器是不会搜索优化的</li>\r\n	<li>Mysql 5.5版本之前 索引的添加或者删除操作过程是这样的\r\n<ul>\r\n	<li>先创建一个临时表，表结构为alter table之后的新定义的结构</li>\r\n	<li>把原来的数据导入临时表</li>\r\n	<li>删除原表</li>\r\n	<li>把临时表重命名为原来的表</li>\r\n</ul>\r\n</li>\r\n</ol>', 'mysql 基础知识集锦', '', 'inherit', 'open', 'open', '', '175-revision-v1', '', '', '2015-03-15 00:12:31', '2015-03-15 00:12:31', '', 175, 'http://unasm.sinaapp.com/?p=204', 0, 'revision', '', 0),
(205, 1, '2015-03-15 01:00:29', '2015-03-15 01:00:29', '<pre id="recommend-content-365978365" class="recommend-text mb-10">SQL语言共分为四大类：数据查询语言DQL，数据操纵语言DML，\r\n数据定义语言DDL，数据控制语言DCL。\r\n\r\n1 数据查询语言DQL\r\n数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE\r\n子句组成的查询块：\r\nSELECT &lt;字段名表&gt;\r\nFROM &lt;表或视图名&gt;\r\nWHERE &lt;查询条件&gt;\r\n\r\n2 数据操纵语言\r\n数据操纵语言DML主要有三种形式：\r\n1) 插入：INSERT\r\n2) 更新：UPDATE\r\n3) 删除：DELETE\r\n\r\n3 数据定义语言DDL\r\n数据定义语言DDL用来创建数据库中的各种对象-----表、视图、\r\n索引、同义词、聚簇等如：\r\nCREATE TABLE/VIEW/INDEX/SYN/CLUSTER\r\n| | | | |\r\n表 视图 索引 同义词 簇\r\n\r\n4 数据控制语言DCL\r\n数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制\r\n数据库操纵事务发生的时间及效果，对数据库实行监视等。如：\r\n1) GRANT：授权。\r\n2) ROLLBACK [WORK] TO [SAVEPOINT]：回退到某一点。\r\n回滚---ROLLBACK\r\n回滚命令使数据库状态回到上次最后提交的状态。其格式为：\r\nSQL&gt;ROLLBACK;\r\n3) COMMIT [WORK]：提交。\r\n在数据库的插入、删除和修改操作时，只有当事务在提交到数据\r\n库时才算完成。在事务提交前，只有操作数据库的这个人才能有权看\r\n到所做的事情，别人只有在最后提交完成后才可以看到。\r\n提交数据有三种类型：显式提交、隐式提交及自动提交。下面分\r\n别说明这三种类型。\r\n(1) 显式提交\r\n用COMMIT命令直接完成的提交为显式提交。其格式为：\r\nSQL&gt;COMMIT；\r\n(2) 隐式提交\r\n用SQL命令间接完成的提交为隐式提交。这些命令是：\r\nALTER，AUDIT，COMMENT，CONNECT，CREATE，DISCONNECT，DROP，\r\nEXIT，GRANT，NOAUDIT，QUIT，REVOKE，RENAME。\r\n(3) 自动提交\r\n若把AUTOCOMMIT设置为ON，则在插入、修改、删除语句执行后，\r\n系统将自动进行提交，这就是自动提交。其格式为：\r\nSQL&gt;SET AUTOCOMMIT ON；\r\n\r\n转自：http://zhidao.baidu.com/question/115195964.html</pre>', 'SQL语言四大类', '', 'publish', 'open', 'open', '', '%e6%95%b0%e6%8d%ae%e5%ba%93%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86%e9%9b%86%e9%94%a6', '', '', '2015-04-15 09:24:21', '2015-04-15 09:24:21', '', 0, 'http://unasm.sinaapp.com/?p=205', 0, 'post', '', 0),
(206, 1, '2015-03-15 01:00:29', '2015-03-15 01:00:29', '<pre id="recommend-content-365978365" class="recommend-text mb-10">SQL语言共分为四大类：数据查询语言DQL，数据操纵语言DML，\r\n数据定义语言DDL，数据控制语言DCL。\r\n\r\n1 数据查询语言DQL\r\n数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE\r\n子句组成的查询块：\r\nSELECT &lt;字段名表&gt;\r\nFROM &lt;表或视图名&gt;\r\nWHERE &lt;查询条件&gt;\r\n\r\n2 数据操纵语言\r\n数据操纵语言DML主要有三种形式：\r\n1) 插入：INSERT\r\n2) 更新：UPDATE\r\n3) 删除：DELETE\r\n\r\n3 数据定义语言DDL\r\n数据定义语言DDL用来创建数据库中的各种对象-----表、视图、\r\n索引、同义词、聚簇等如：\r\nCREATE TABLE/VIEW/INDEX/SYN/CLUSTER\r\n| | | | |\r\n表 视图 索引 同义词 簇\r\n\r\n4 数据控制语言DCL\r\n数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制\r\n数据库操纵事务发生的时间及效果，对数据库实行监视等。如：\r\n1) GRANT：授权。\r\n2) ROLLBACK [WORK] TO [SAVEPOINT]：回退到某一点。\r\n回滚---ROLLBACK\r\n回滚命令使数据库状态回到上次最后提交的状态。其格式为：\r\nSQL&gt;ROLLBACK;\r\n3) COMMIT [WORK]：提交。\r\n在数据库的插入、删除和修改操作时，只有当事务在提交到数据\r\n库时才算完成。在事务提交前，只有操作数据库的这个人才能有权看\r\n到所做的事情，别人只有在最后提交完成后才可以看到。\r\n提交数据有三种类型：显式提交、隐式提交及自动提交。下面分\r\n别说明这三种类型。\r\n(1) 显式提交\r\n用COMMIT命令直接完成的提交为显式提交。其格式为：\r\nSQL&gt;COMMIT；\r\n(2) 隐式提交\r\n用SQL命令间接完成的提交为隐式提交。这些命令是：\r\nALTER，AUDIT，COMMENT，CONNECT，CREATE，DISCONNECT，DROP，\r\nEXIT，GRANT，NOAUDIT，QUIT，REVOKE，RENAME。\r\n(3) 自动提交\r\n若把AUTOCOMMIT设置为ON，则在插入、修改、删除语句执行后，\r\n系统将自动进行提交，这就是自动提交。其格式为：\r\nSQL&gt;SET AUTOCOMMIT ON；\r\n\r\n转自：http://zhidao.baidu.com/question/115195964.html</pre>', '数据库基础知识集锦', '', 'inherit', 'open', 'open', '', '205-revision-v1', '', '', '2015-03-15 01:00:29', '2015-03-15 01:00:29', '', 205, 'http://unasm.sinaapp.com/?p=206', 0, 'revision', '', 0),
(207, 1, '2015-03-16 03:11:58', '2015-03-16 03:11:58', '在通过js提交数据的时候，用户往往会因为得不到及时的响应多次提交，结果就是造成数据的多次提交，造成不好的结果。如何避免用户数据的多次提交呢？\r\n<ol>\r\n	<li>可以前后端配合，在form的隐藏域中生成一个包含用户ip，url，时间的md5值,存储在form的隐藏域中，在服务端，检测到对应的md5值，与保存在缓存中的md5值对比，如果该md5值已经存在，证明重复提交，如果不存在，则证明刚刚提交，然后在缓存中置为该md5值，30s后失效。</li>\r\n	<li>第二种办法会有点麻烦，通过在具体的add函数那里检验sql语句，对比通过提交的数据与用户在表里面的最新数据，可以得到，用户的提交数据与已经插入的数据是不是同一份数据。因为主从的缘故，最新的数据要从主库读取。这样面临一个危险，就是面对攻击的时候，每次都从主库读取，可能会因此造成性能危机，</li>\r\n	<li>第三种方案是纯后台的，将插入sql进行md5，首先检查该md5值与缓存中的对应，如果有数据，就证明重复提交，如果没有数据，则置位该md5值，30s后失效，同时执行插入语句。优点是不需要和前端配合，单独的后台处理，并且，可以在add函数哪里添加判断，一处添加，整站收益。缺点是，md5会随着字符串的增加，时间线性增长，并且有相当的性能损失 <a title="md5()效率问题要注意" href="http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d">http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d</a></li>\r\n	<li>第四种方案，纯前端的，在发起post请求之前，先将锁变量置位，然后在得到相应之后，将锁解除，同时设置一个计时，在超时得不到响应之后，依旧打开锁，并且在ui层面，适当的回馈用户，告知已经点击，请求发起</li>\r\n</ol>', '如何防止用户同一个表单的多次提交', '', 'publish', 'open', 'open', '', '%e5%a6%82%e4%bd%95%e9%98%b2%e6%ad%a2%e7%94%a8%e6%88%b7%e5%90%8c%e4%b8%80%e4%b8%aa%e8%a1%a8%e5%8d%95%e7%9a%84%e5%a4%9a%e6%ac%a1%e6%8f%90%e4%ba%a4', '', '', '2015-03-16 03:46:19', '2015-03-16 03:46:19', '', 0, 'http://unasm.sinaapp.com/?p=207', 0, 'post', '', 0),
(208, 1, '2015-03-16 03:11:58', '2015-03-16 03:11:58', '在通过js提交数据的时候，用户往往会因为得不到及时的响应多次提交，结果就是造成数据的多次提交，造成不好的结果。如何避免用户数据的多次提交呢？\r\n<ol>\r\n	<li>可以前后端配合，在form的隐藏域中生成一个包含用户ip，url，时间的md5值,存储在form的隐藏域中，在服务端，检测到对应的md5值，与保存在缓存中的md5值对比，如果该md5值已经存在，证明重复提交，如果不存在，则证明刚刚提交，然后在缓存中置为该md5值，30s后失效。</li>\r\n	<li>第二种办法会有点麻烦，通过在具体的add函数哪里检验sql语句，对比通过提交的数据与用户在表里面的最新数据，可以得到，用户的提交数据与已经插入的数据是不是同一份数据。因为主从的缘故，最新的数据要从主库读取。这样面临一个危险，就是面对攻击的时候，每次都从主库读取，可能会因此造成性能危机，</li>\r\n	<li>第三种方案是将插入sql进行md5，首先检查该md5值与缓存中的对应，如果有数据，就证明重复提交，如果没有数据，则置位该md5值，30s后失效，同时执行插入语句。</li>\r\n</ol>', '如何防止用户同一个表单的多次提交', '', 'inherit', 'open', 'open', '', '207-revision-v1', '', '', '2015-03-16 03:11:58', '2015-03-16 03:11:58', '', 207, 'http://unasm.sinaapp.com/?p=208', 0, 'revision', '', 0),
(209, 1, '2015-03-16 03:36:16', '2015-03-16 03:36:16', '在通过js提交数据的时候，用户往往会因为得不到及时的响应多次提交，结果就是造成数据的多次提交，造成不好的结果。如何避免用户数据的多次提交呢？\n<ol>\n	<li>可以前后端配合，在form的隐藏域中生成一个包含用户ip，url，时间的md5值,存储在form的隐藏域中，在服务端，检测到对应的md5值，与保存在缓存中的md5值对比，如果该md5值已经存在，证明重复提交，如果不存在，则证明刚刚提交，然后在缓存中置为该md5值，30s后失效。</li>\n	<li>第二种办法会有点麻烦，通过在具体的add函数那里检验sql语句，对比通过提交的数据与用户在表里面的最新数据，可以得到，用户的提交数据与已经插入的数据是不是同一份数据。因为主从的缘故，最新的数据要从主库读取。这样面临一个危险，就是面对攻击的时候，每次都从主库读取，可能会因此造成性能危机，</li>\n	<li>第三种方案是纯后台的，将插入sql进行md5，首先检查该md5值与缓存中的对应，如果有数据，就证明重复提交，如果没有数据，则置位该md5值，30s后失效，同时执行插入语句。优点是不需要和前端配合，单独的后台处理，并且，可以在add函数哪里添加判断，一处添加，整站收益。缺点是，md5会随着字符串的增加，时间线性增长，并且有相当的性能损失 <a title="md5()效率问题要注意" href="http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d">http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d</a></li>\n	<li>第四种方案，纯前端的，在发起post请求之前，先将锁变量置位，然后在得到相应之后，将锁解除，同时设置一个计时，在超时得不到响应之后，依旧打开锁，并且在ui层面，适当的hui''k</li>\n</ol>', '如何防止用户同一个表单的多次提交', '', 'inherit', 'open', 'open', '', '207-autosave-v1', '', '', '2015-03-16 03:36:16', '2015-03-16 03:36:16', '', 207, 'http://unasm.sinaapp.com/?p=209', 0, 'revision', '', 0),
(210, 1, '2015-03-16 03:25:29', '2015-03-16 03:25:29', '在通过js提交数据的时候，用户往往会因为得不到及时的响应多次提交，结果就是造成数据的多次提交，造成不好的结果。如何避免用户数据的多次提交呢？\r\n<ol>\r\n	<li>可以前后端配合，在form的隐藏域中生成一个包含用户ip，url，时间的md5值,存储在form的隐藏域中，在服务端，检测到对应的md5值，与保存在缓存中的md5值对比，如果该md5值已经存在，证明重复提交，如果不存在，则证明刚刚提交，然后在缓存中置为该md5值，30s后失效。</li>\r\n	<li>第二种办法会有点麻烦，通过在具体的add函数哪里检验sql语句，对比通过提交的数据与用户在表里面的最新数据，可以得到，用户的提交数据与已经插入的数据是不是同一份数据。因为主从的缘故，最新的数据要从主库读取。这样面临一个危险，就是面对攻击的时候，每次都从主库读取，可能会因此造成性能危机，</li>\r\n	<li>第三种方案是将插入sql进行md5，首先检查该md5值与缓存中的对应，如果有数据，就证明重复提交，如果没有数据，则置位该md5值，30s后失效，同时执行插入语句。优点是不需要和前端配合，单独的后台处理，并且，可以在add函数哪里添加判断，一处添加，整站收益。缺点是，md5会随着字符串的增加，时间线性增长，并且有相当的性能损失 <a title="md5()效率问题要注意" href="http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d">http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d</a></li>\r\n</ol>', '如何防止用户同一个表单的多次提交', '', 'inherit', 'open', 'open', '', '207-revision-v1', '', '', '2015-03-16 03:25:29', '2015-03-16 03:25:29', '', 207, 'http://unasm.sinaapp.com/?p=210', 0, 'revision', '', 0),
(211, 1, '2015-03-16 03:26:11', '2015-03-16 03:26:11', '在通过js提交数据的时候，用户往往会因为得不到及时的响应多次提交，结果就是造成数据的多次提交，造成不好的结果。如何避免用户数据的多次提交呢？\r\n<ol>\r\n	<li>可以前后端配合，在form的隐藏域中生成一个包含用户ip，url，时间的md5值,存储在form的隐藏域中，在服务端，检测到对应的md5值，与保存在缓存中的md5值对比，如果该md5值已经存在，证明重复提交，如果不存在，则证明刚刚提交，然后在缓存中置为该md5值，30s后失效。</li>\r\n	<li>第二种办法会有点麻烦，通过在具体的add函数那里检验sql语句，对比通过提交的数据与用户在表里面的最新数据，可以得到，用户的提交数据与已经插入的数据是不是同一份数据。因为主从的缘故，最新的数据要从主库读取。这样面临一个危险，就是面对攻击的时候，每次都从主库读取，可能会因此造成性能危机，</li>\r\n	<li>第三种方案是将插入sql进行md5，首先检查该md5值与缓存中的对应，如果有数据，就证明重复提交，如果没有数据，则置位该md5值，30s后失效，同时执行插入语句。优点是不需要和前端配合，单独的后台处理，并且，可以在add函数哪里添加判断，一处添加，整站收益。缺点是，md5会随着字符串的增加，时间线性增长，并且有相当的性能损失 <a title="md5()效率问题要注意" href="http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d">http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d</a></li>\r\n</ol>', '如何防止用户同一个表单的多次提交', '', 'inherit', 'open', 'open', '', '207-revision-v1', '', '', '2015-03-16 03:26:11', '2015-03-16 03:26:11', '', 207, 'http://unasm.sinaapp.com/?p=211', 0, 'revision', '', 0),
(212, 1, '2015-03-16 03:36:32', '2015-03-16 03:36:32', '在通过js提交数据的时候，用户往往会因为得不到及时的响应多次提交，结果就是造成数据的多次提交，造成不好的结果。如何避免用户数据的多次提交呢？\r\n<ol>\r\n	<li>可以前后端配合，在form的隐藏域中生成一个包含用户ip，url，时间的md5值,存储在form的隐藏域中，在服务端，检测到对应的md5值，与保存在缓存中的md5值对比，如果该md5值已经存在，证明重复提交，如果不存在，则证明刚刚提交，然后在缓存中置为该md5值，30s后失效。</li>\r\n	<li>第二种办法会有点麻烦，通过在具体的add函数那里检验sql语句，对比通过提交的数据与用户在表里面的最新数据，可以得到，用户的提交数据与已经插入的数据是不是同一份数据。因为主从的缘故，最新的数据要从主库读取。这样面临一个危险，就是面对攻击的时候，每次都从主库读取，可能会因此造成性能危机，</li>\r\n	<li>第三种方案是纯后台的，将插入sql进行md5，首先检查该md5值与缓存中的对应，如果有数据，就证明重复提交，如果没有数据，则置位该md5值，30s后失效，同时执行插入语句。优点是不需要和前端配合，单独的后台处理，并且，可以在add函数哪里添加判断，一处添加，整站收益。缺点是，md5会随着字符串的增加，时间线性增长，并且有相当的性能损失 <a title="md5()效率问题要注意" href="http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d">http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d</a></li>\r\n	<li>第四种方案，纯前端的，在发起post请求之前，先将锁变量置位，然后在得到相应之后，将锁解除，同时设置一个计时，在超时得不到响应之后，依旧打开锁，并且在ui层面，适当的回馈用户，告知已经点击，请求发起</li>\r\n</ol>', '如何防止用户同一个表单的多次提交', '', 'inherit', 'open', 'open', '', '207-revision-v1', '', '', '2015-03-16 03:36:32', '2015-03-16 03:36:32', '', 207, 'http://unasm.sinaapp.com/?p=212', 0, 'revision', '', 0),
(214, 1, '2015-03-19 17:24:34', '2015-03-19 17:24:34', '#这个文件控制着svnserver守护进程的配置，如果你想用它这个来访问版本库的话，那这个文件是没法避免的。\r\n\r\n[general]\r\n\r\n#这些选项控制着该版本库所有的有权限和没权限的用户，有效值是write,read,和none，配置的样例配置如默认配#置\r\n\r\nanon-access=none\r\n\r\nauth-access=write\r\n\r\n#password-db选项是数据库密码文件位置，除非你明确指明了一个以/开头的路径，否则密码文件的路径都是相对#于配置文件的相对路径。\r\n\r\npassword-db = passwd\r\n\r\n# authz-db 选项 是控制访问路径的权限的，不指定以/开头的路径，该文件的路径是相对于本文件的，不指定该\r\n\r\n#值，无法控制用户的访问路径。\r\n\r\n#realm （无意义）\r\n\r\n[sasl]\r\n\r\n#该选项指定是否使用Cyrus SASL权限验证库，默认不启用,运行命令“svnserve --version” ，查询是否能找到“<span class="s1">Cyrus #SASL authentication is available</span>”\r\n\r\n#use-sasl = true\r\n\r\n#这些选项指定想要通过sasl提供的安全级别，0 不加密，1意味着整数检查，大于一则意味着和加密字符串有效长度相关联\r\n\r\n#min-encryption = 0\r\n\r\n#max-encryption = 256', 'svn 服务器 配置svnserve.conf 翻译', '', 'inherit', 'open', 'open', '', '213-revision-v1', '', '', '2015-03-19 17:24:34', '2015-03-19 17:24:34', '', 213, 'http://unasm.sinaapp.com/?p=214', 0, 'revision', '', 0),
(216, 1, '2015-03-20 03:44:34', '2015-03-20 03:44:34', '<p class="p1">把服务端与客户端的连接从HTTP/1.1 转化到WebSocket，这需要用到<a href="http://tools.ietf.org/html/rfc2616#section-14.42"><span class="s2">protocol_switch</span></a>  这个指令。</p>\r\n<p class="p4"><span class="s1">然而“Upgrade” 是一个hop-by-hop（逐个跳转扩展头），它是不可能通过代理服务器的，虽然客户端或许可以使用CONNECT方法避开这个问题，但是这不适用于反向代理服务器，因为客户端根本不会意识到这个是代理服务器，所以需要一种特殊的方式。</span></p>\r\n<p class="p4"><span class="s1">从1.3.13版，nginx实现了一种特殊的机制，只要代理服务器返回101（转换协议）就允许代理服务器和客户端之间建立一个通道，并且客户端会请求通过在请求中添加Upgrade 头来转换协议。</span></p>\r\n<p class="p4"><span class="s1">上文提到，包含了“Upgrade”和”Connection”的hop-by-hop 头是不能传到代理服务器的，因此为了通知服务器客户端想要将协议转换到WebSocket，这些头必须显式的传递。</span></p>\r\n<p class="p4"><span class="s1">location /chat/ {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_pass http://backend;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_http_version 1.1;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_set_header Connection "upgrade";</span></p>\r\n<p class="p4"><span class="s1">}</span></p>\r\n<p class="p4"><span class="s1">一个发往服务端的的header头中Connection的值 取决于于客户端请求头里面的Upgrade的有无。</span></p>\r\n<p class="p4"><span class="s1">http {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>map $http_upgrade $connection_upgrade {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>default upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>''''<span class="Apple-converted-space">      </span>close;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>}</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>server {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>...</span></p>\r\n<p class="p1"><span class="s1">        listen <span class="Apple-converted-space">      </span>8070;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>location /chat/ {</span></p>\r\n<p class="p4">            proxy_pass http://127.0.0.1:8010;</p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_http_version 1.1;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_set_header Connection $connection_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>}</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>}</span></p>\r\n<p class="p4">此时，对应的服务端代码为,服务端，需要安装nodejs，并且node node.js 运行起来，坚挺8010端口</p>\r\n<p class="p2"><span class="s1">/*************************************************************************</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">  </span>* File Name :<span class="Apple-converted-space">  </span>node.js</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">  </span>* Author<span class="Apple-converted-space">  </span>:<span class="Apple-converted-space">      </span>unasm</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">  </span>* Mail : <span class="Apple-converted-space">        </span>unasm@sina.cn</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">  </span>* Last_Modified: 2015-05-25 09:56:26</span></p>\r\n<p class="p2"><span class="s1"> ************************************************************************/</span></p>\r\n<p class="p2"><span class="s1">console.log("Server started");</span></p>\r\n<p class="p2"><span class="s1">var connects = new Array();</span></p>\r\n<p class="p2"><span class="s1">var WebSocketServer = require(''ws'').Server</span></p>\r\n<p class="p2"><span class="s1">, wss = new WebSocketServer({port: 8010});</span></p>\r\n<p class="p2"><span class="s1">console.log("complete");</span></p>\r\n<p class="p2"><span class="s1">wss.on(''connection'', function(ws) {</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">        </span>connects.push(ws);</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">        </span>ws.on(''message'', function(msg) {</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                </span>ws.send(msg);</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                </span>for(var i = 0,len = connects.length; i &lt; len;i++){</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                        </span>if(connects[i] !== ws){</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                                </span>connects[i].send(msg);</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                        </span>}</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                </span>}</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">        </span>});</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">        </span>console.log("connection");</span></p>\r\n<p class="p2"><span class="s1">});</span></p>\r\n<p class="p4">客户端html代码为：</p>\r\n&nbsp;\r\n<p class="p1"><span class="s1">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>&lt;script type="text/javascript"&gt;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>var sock = null;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>var wsuri = "ws://127.0.0.1:8070/chat/";</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>window.onload = function() {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>console.log("onload");</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>sock = new WebSocket(wsuri);</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>sock.onopen = function() {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                        </span>console.log("connected to " + wsuri);</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>}</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>sock.onclose = function(e) {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                        </span>console.log("connection closed (" + e.code + ")");</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>}</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>sock.onmessage = function(e) {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                        </span>console.log("message received: " + e.data);</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>}</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>};</span></p>\r\n<p class="p1"><span class="s1">function send() {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>var msg = document.getElementById(''message'').value;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>sock.send(msg);</span></p>\r\n<p class="p1"><span class="s1">};</span></p>\r\n<p class="p1"><span class="s1">&lt;/script&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;h1&gt;WebSocket Echo Test&lt;/h1&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;form&gt;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>&lt;p&gt;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>Message: &lt;input id="message" type="text" value="Hello, world!"&gt;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>&lt;/p&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;/form&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;button onclick="send();"&gt;Send Message&lt;/button&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;/body&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;/html&gt;</span></p>\r\n&nbsp;\r\n<p class="p4">原文参考连接http://nginx.org/en/docs/http/websocket.html?_ga=1.166503037.270828851.1426754420</p>', 'nginx 作为websocket代理服务器（译）', '', 'publish', 'open', 'open', '', 'nginx-%e4%bd%9c%e4%b8%bawebsocket%e4%bb%a3%e7%90%86%e6%9c%8d%e5%8a%a1%e5%99%a8%ef%bc%88%e8%af%91%ef%bc%89', '', '', '2015-05-25 02:58:54', '2015-05-25 02:58:54', '', 0, 'http://unasm.sinaapp.com/?p=216', 0, 'post', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(218, 1, '2015-03-20 03:45:02', '2015-03-20 03:45:02', '<p class="p1">把服务端与客户端的连接从HTTP/1.1 转化到WebSocket，这需要用到<a href="http://tools.ietf.org/html/rfc2616#section-14.42"><span class="s2">protocol_switch</span></a>  这个指令。</p>\r\n<p class="p4"><span class="s1">然后有点精巧的是，既然“Upgrade” 是一个hop-by-hop（逐个跳转扩展头），它是不可能通过代理服务器的，为了通过代理，客户端或许可以使用CONNECT方法避开这个问题，但是这不适用于代理服务器，因为客户端根本不会意识到这个是代理服务器，所以需要用一个比较特别的方式。</span></p>\r\n<p class="p4"><span class="s1">从1.3.13版，nginx实现了一种特殊的机制，只要代理服务器返回101（转换协议）就允许代理服务器和客户端之间建立一个通道，并且客户端会请求通过在请求中添加Upgrade 头来转换协议。</span></p>\r\n<p class="p4"><span class="s1">上文提到，包含了“Upgrade”和”Connection”的hop-by-hop 头是不能传到代理服务器的，因此为了通知服务器客户端想要将协议转换到WebSocket，这些头必须显式的传递。</span></p>\r\n<p class="p4"><span class="s1">location /chat/ {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_pass http://backend;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_http_version 1.1;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_set_header Connection "upgrade";</span></p>\r\n<p class="p4"><span class="s1">}</span></p>\r\n<p class="p4"><span class="s1">一个发往服务端的的header头中Connection的值 取决于于客户端请求头里面的Upgrade的有无。</span></p>\r\n<p class="p4"><span class="s1">http {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>map $http_upgrade $connection_upgrade {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>default upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>''''<span class="Apple-converted-space">      </span>close;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>}</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>server {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>...</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>location /chat/ {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_pass http://backend;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_http_version 1.1;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_set_header Connection $connection_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>}</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>}</span></p>', 'nginx 作为websocket代理服务器（译）', '', 'inherit', 'open', 'open', '', '216-revision-v1', '', '', '2015-03-20 03:45:02', '2015-03-20 03:45:02', '', 216, 'http://unasm.sinaapp.com/?p=218', 0, 'revision', '', 0),
(217, 1, '2015-03-20 03:44:34', '2015-03-20 03:44:34', '<p class="p1"><span class="s1">Urna Semper</span></p>\r\n<p class="p1"><span class="s1">Instructor’s Name</span></p>\r\n<p class="p1"><span class="s1">March 19, 2015</span></p>\r\n<p class="p4"><span class="s1">把服务端与客户端的连接从HTTP/1.1 转化到WebSocket，这需要用到<a href="http://tools.ietf.org/html/rfc2616#section-14.42"><span class="s2">protocol_switch</span></a><span class="Apple-converted-space">  </span>这个指令。</span></p>\r\n<p class="p4"><span class="s1">然后有点精巧的是，既然“Upgrade” 是一个hop-by-hop（逐个跳转扩展头），它是不可能通过代理服务器的，为了通过代理，客户端或许可以使用CONNECT方法避开这个问题，但是这不适用于代理服务器，因为客户端根本不会意识到这个是代理服务器，所以需要用一个比较特别的方式。</span></p>\r\n<p class="p4"><span class="s1">从1.3.13版，nginx实现了一种特殊的机制，只要代理服务器返回101（转换协议）就允许代理服务器和客户端之间建立一个通道，并且客户端会请求通过在请求中添加Upgrade 头来转换协议。</span></p>\r\n<p class="p4"><span class="s1">上文提到，包含了“Upgrade”和”Connection”的hop-by-hop 头是不能传到代理服务器的，因此为了通知服务器客户端想要将协议转换到WebSocket，这些头必须显式的传递。</span></p>\r\n<p class="p4"><span class="s1">location /chat/ {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_pass http://backend;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_http_version 1.1;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_set_header Connection "upgrade";</span></p>\r\n<p class="p4"><span class="s1">}</span></p>\r\n<p class="p4"><span class="s1">一个发往服务端的的header头中Connection的值 取决于于客户端请求头里面的Upgrade的有无。</span></p>\r\n<p class="p4"><span class="s1">http {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>map $http_upgrade $connection_upgrade {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>default upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>''''<span class="Apple-converted-space">      </span>close;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>}</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>server {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>...</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>location /chat/ {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_pass http://backend;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_http_version 1.1;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_set_header Connection $connection_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>}</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>}</span></p>', 'nginx 作为websocket代理服务器（译）', '', 'inherit', 'open', 'open', '', '216-revision-v1', '', '', '2015-03-20 03:44:34', '2015-03-20 03:44:34', '', 216, 'http://unasm.sinaapp.com/?p=217', 0, 'revision', '', 0),
(221, 1, '2015-03-20 04:21:33', '2015-03-20 04:21:33', '<p class="p1">把服务端与客户端的连接从HTTP/1.1 转化到WebSocket，这需要用到<a href="http://tools.ietf.org/html/rfc2616#section-14.42"><span class="s2">protocol_switch</span></a>  这个指令。</p>\r\n<p class="p4"><span class="s1">然而“Upgrade” 是一个hop-by-hop（逐个跳转扩展头），它是不可能通过代理服务器的，虽然客户端或许可以使用CONNECT方法避开这个问题，但是这不适用于反向代理服务器，因为客户端根本不会意识到这个是代理服务器，所以需要一种特殊的方式。</span></p>\r\n<p class="p4"><span class="s1">从1.3.13版，nginx实现了一种特殊的机制，只要代理服务器返回101（转换协议）就允许代理服务器和客户端之间建立一个通道，并且客户端会请求通过在请求中添加Upgrade 头来转换协议。</span></p>\r\n<p class="p4"><span class="s1">上文提到，包含了“Upgrade”和”Connection”的hop-by-hop 头是不能传到代理服务器的，因此为了通知服务器客户端想要将协议转换到WebSocket，这些头必须显式的传递。</span></p>\r\n<p class="p4"><span class="s1">location /chat/ {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_pass http://backend;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_http_version 1.1;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_set_header Connection "upgrade";</span></p>\r\n<p class="p4"><span class="s1">}</span></p>\r\n<p class="p4"><span class="s1">一个发往服务端的的header头中Connection的值 取决于于客户端请求头里面的Upgrade的有无。</span></p>\r\n<p class="p4"><span class="s1">http {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>map $http_upgrade $connection_upgrade {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>default upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>''''<span class="Apple-converted-space">      </span>close;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>}</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>server {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>...</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>location /chat/ {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_pass http://backend;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_http_version 1.1;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_set_header Connection $connection_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>}</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>}</span></p>\r\n<p class="p4">原文连接http://nginx.org/en/docs/http/websocket.html?_ga=1.166503037.270828851.1426754420</p>', 'nginx 作为websocket代理服务器（译）', '', 'inherit', 'open', 'open', '', '216-revision-v1', '', '', '2015-03-20 04:21:33', '2015-03-20 04:21:33', '', 216, 'http://unasm.sinaapp.com/?p=221', 0, 'revision', '', 0),
(219, 1, '2015-03-20 03:45:48', '2015-03-20 03:45:48', '<p class="p1">把服务端与客户端的连接从HTTP/1.1 转化到WebSocket，这需要用到<a href="http://tools.ietf.org/html/rfc2616#section-14.42"><span class="s2">protocol_switch</span></a>  这个指令。</p>\r\n<p class="p4"><span class="s1">然后有点精巧的是，既然“Upgrade” 是一个hop-by-hop（逐个跳转扩展头），它是不可能通过代理服务器的，为了通过代理，客户端或许可以使用CONNECT方法避开这个问题，但是这不适用于代理服务器，因为客户端根本不会意识到这个是代理服务器，所以需要用一个比较特别的方式。</span></p>\r\n<p class="p4"><span class="s1">从1.3.13版，nginx实现了一种特殊的机制，只要代理服务器返回101（转换协议）就允许代理服务器和客户端之间建立一个通道，并且客户端会请求通过在请求中添加Upgrade 头来转换协议。</span></p>\r\n<p class="p4"><span class="s1">上文提到，包含了“Upgrade”和”Connection”的hop-by-hop 头是不能传到代理服务器的，因此为了通知服务器客户端想要将协议转换到WebSocket，这些头必须显式的传递。</span></p>\r\n<p class="p4"><span class="s1">location /chat/ {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_pass http://backend;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_http_version 1.1;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_set_header Connection "upgrade";</span></p>\r\n<p class="p4"><span class="s1">}</span></p>\r\n<p class="p4"><span class="s1">一个发往服务端的的header头中Connection的值 取决于于客户端请求头里面的Upgrade的有无。</span></p>\r\n<p class="p4"><span class="s1">http {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>map $http_upgrade $connection_upgrade {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>default upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>''''<span class="Apple-converted-space">      </span>close;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>}</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>server {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>...</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>location /chat/ {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_pass http://backend;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_http_version 1.1;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_set_header Connection $connection_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>}</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>}</span></p>\r\n<p class="p4">原文连接http://nginx.org/en/docs/http/websocket.html?_ga=1.166503037.270828851.1426754420</p>', 'nginx 作为websocket代理服务器（译）', '', 'inherit', 'open', 'open', '', '216-revision-v1', '', '', '2015-03-20 03:45:48', '2015-03-20 03:45:48', '', 216, 'http://unasm.sinaapp.com/?p=219', 0, 'revision', '', 0),
(220, 1, '2015-05-25 02:33:04', '2015-05-25 02:33:04', '<p class="p1">把服务端与客户端的连接从HTTP/1.1 转化到WebSocket，这需要用到<a href="http://tools.ietf.org/html/rfc2616#section-14.42"><span class="s2">protocol_switch</span></a>  这个指令。</p>\n<p class="p4"><span class="s1">然而“Upgrade” 是一个hop-by-hop（逐个跳转扩展头），它是不可能通过代理服务器的，虽然客户端或许可以使用CONNECT方法避开这个问题，但是这不适用于反向代理服务器，因为客户端根本不会意识到这个是代理服务器，所以需要一种特殊的方式。</span></p>\n<p class="p4"><span class="s1">从1.3.13版，nginx实现了一种特殊的机制，只要代理服务器返回101（转换协议）就允许代理服务器和客户端之间建立一个通道，并且客户端会请求通过在请求中添加Upgrade 头来转换协议。</span></p>\n<p class="p4"><span class="s1">上文提到，包含了“Upgrade”和”Connection”的hop-by-hop 头是不能传到代理服务器的，因此为了通知服务器客户端想要将协议转换到WebSocket，这些头必须显式的传递。</span></p>\n<p class="p4"><span class="s1">location /chat/ {</span></p>\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_pass http://backend;</span></p>\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_http_version 1.1;</span></p>\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_set_header Upgrade $http_upgrade;</span></p>\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_set_header Connection "upgrade";</span></p>\n<p class="p4"><span class="s1">}</span></p>\n<p class="p4"><span class="s1">一个发往服务端的的header头中Connection的值 取决于于客户端请求头里面的Upgrade的有无。</span></p>\n<p class="p4"><span class="s1">http {</span></p>\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>map $http_upgrade $connection_upgrade {</span></p>\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>default upgrade;</span></p>\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>''''<span class="Apple-converted-space">      </span>close;</span></p>\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>}</span></p>\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>server {</span></p>\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>...</span></p>\n<p class="p1"><span class="s1">        listen <span class="Apple-converted-space">      </span>8070;</span></p>\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>location /chat/ {</span></p>\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_pass http://backend;</span></p>\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_http_version 1.1;</span></p>\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_set_header Upgrade $http_upgrade;</span></p>\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_set_header Connection $connection_upgrade;</span></p>\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>}</span></p>\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>}</span></p>\n<p class="p4">此时，对应的服务端代码为</p>\n<p class="p4">客户端html代码为：</p>\n&nbsp;\n<p class="p1"><span class="s1">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>&lt;script type="text/javascript"&gt;</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>var sock = null;</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>var wsuri = "ws://127.0.0.1:8070/chat/";</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>window.onload = function() {</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>console.log("onload");</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>sock = new WebSocket(wsuri);</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>sock.onopen = function() {</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                        </span>console.log("connected to " + wsuri);</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>}</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>sock.onclose = function(e) {</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                        </span>console.log("connection closed (" + e.code + ")");</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>}</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>sock.onmessage = function(e) {</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                        </span>console.log("message received: " + e.data);</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>}</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>};</span></p>\n<p class="p1"><span class="s1">function send() {</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>var msg = document.getElementById(''message'').value;</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>sock.send(msg);</span></p>\n<p class="p1"><span class="s1">};</span></p>\n<p class="p1"><span class="s1">&lt;/script&gt;</span></p>\n<p class="p1"><span class="s1">&lt;h1&gt;WebSocket Echo Test&lt;/h1&gt;</span></p>\n<p class="p1"><span class="s1">&lt;form&gt;</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>&lt;p&gt;</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>Message: &lt;input id="message" type="text" value="Hello, world!"&gt;</span></p>\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>&lt;/p&gt;</span></p>\n<p class="p1"><span class="s1">&lt;/form&gt;</span></p>\n<p class="p1"><span class="s1">&lt;button onclick="send();"&gt;Send Message&lt;/button&gt;</span></p>\n<p class="p1"><span class="s1">&lt;/body&gt;</span></p>\n<p class="p1"><span class="s1">&lt;/html&gt;</span></p>\n&nbsp;\n<p class="p4">原文参考连接http://nginx.org/en/docs/http/websocket.html?_ga=1.166503037.270828851.1426754420</p>', 'nginx 作为websocket代理服务器（译）', '', 'inherit', 'open', 'open', '', '216-autosave-v1', '', '', '2015-05-25 02:33:04', '2015-05-25 02:33:04', '', 216, 'http://unasm.sinaapp.com/?p=220', 0, 'revision', '', 0),
(222, 1, '2015-03-20 11:35:52', '2015-03-20 11:35:52', '<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href="http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href="http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n5. pid - 这个意义不大，主要是说以后这个.pdf文件里面的id号归这个进程使用，算是固定下来运行时候的pid号码吧\r\n\r\n6.  <span class="s1">request_</span><span class="s2">terminate</span><span class="s1">_timeout = 30   请求的最大终止时间，默认单位为妙</span>\r\n\r\n如果file_get_contents请求的远程资源如果反应过慢，file_get_contents就会一直卡在那里不会超时，我们知道php.ini 里面max_execution_time 可以设置 PHP 脚本的最大执行时间，但是，在 php-cgi(php-fpm) 中，该参数不会起效。真正能够控制 PHP 脚本最大执行时间的是 php-fpm.conf 配置文件中的request_terminate_timeout参数。\r\n\r\nrequest_terminate_timeout默认值为 0 秒，也就是说，PHP 脚本会一直执行下去。这样，当所有的 php-cgi 进程都卡在 file_get_contents() 函数时，这台 Nginx+PHP 的 WebServer 已经无法再处理新的 PHP 请求了，Nginx 将给用户返回“502 Bad Gateway”。修改该参数，设置一个 PHP 脚本最大执行时间是必要的，但是，治标不治本。例如改成 30s，如果发生 file_get_contents() 获取网页内容较慢的情况，这就意味着 150 个 php-cgi 进程，每秒钟只能处理 5 个请求，WebServer 同样很难避免"502 Bad Gateway"。解决办法是request_terminate_timeout设置为10s或者一个合理的值，或者给file_get_contents加一个超时参数。\r\n\r\n7.   <span class="s1">process</span><span class="s2">_control_timeout = 0   ，除了官方的翻译之后，未见到任何解释</span>\r\n\r\n8. syslog_facility (注释翻译)\r\n\r\nsyslog  工具 是用来明确如何记录日志信息的，使syslogd可以处理来自不同程序下的不同日志信息,syslog可能的值有（ex  daemon equiv LOG_DAEMON）,默认选择了daemon。\r\n\r\nsyslogd 是linux下面的处理日志信息的软件/命令 <a title=" Linux / Unix Command: syslogd" href="http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm">http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm</a> ，syslog应该是和syslogd进行交互的，处理日志信息的。\r\n\r\n这里的facility具体是指LOG_AUTH(安全/授权消息)，LOG_AUTHPRIV(安全/授权消息（私用）)，LOG_CRON（cron守护进程），LOG_DAEMON（系统守护进程），LOG_FTP（FTP守护进程）,LOG_KERN（内核进程），LOG_LOCAL0(本地使用)，LOG_LPR(行式打印机系统)，LOG_MAIL(邮件系统)，LOG_NEWS(网络新闻系统)，LOG_SYSLOG(SYSLOG内部产生的消息)，LOG_USER(任意的用户消息)，LOG_UUCP(UUCP系统)（摘自UNIX网络编程第一卷第三版313页）\r\n\r\n9.syslog_ident  是追加在所有的信息之前的，如果你在同一台服务器上面，有多个fpm实例运行，可以修改这个名字，满足需求。\r\n\r\n10.Log_level 可能的值是alert,error,warning,notice,debug,默认值notice.\r\n\r\n11,\r\n\r\n&nbsp;', 'php-fpm.conf 参数详解', '', 'inherit', 'open', 'open', '', '146-revision-v1', '', '', '2015-03-20 11:35:52', '2015-03-20 11:35:52', '', 146, 'http://unasm.sinaapp.com/?p=222', 0, 'revision', '', 0),
(223, 1, '2015-03-20 14:58:29', '2015-03-20 14:58:29', '<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href="http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href="http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n5. pid - 这个意义不大，主要是说以后这个.pdf文件里面的id号归这个进程使用，算是固定下来运行时候的pid号码吧\r\n\r\n6.  <span class="s1">request_</span><span class="s2">terminate</span><span class="s1">_timeout = 30   请求的最大终止时间，默认单位为妙</span>\r\n\r\n如果file_get_contents请求的远程资源如果反应过慢，file_get_contents就会一直卡在那里不会超时，我们知道php.ini 里面max_execution_time 可以设置 PHP 脚本的最大执行时间，但是，在 php-cgi(php-fpm) 中，该参数不会起效。真正能够控制 PHP 脚本最大执行时间的是 php-fpm.conf 配置文件中的request_terminate_timeout参数。\r\n\r\nrequest_terminate_timeout默认值为 0 秒，也就是说，PHP 脚本会一直执行下去。这样，当所有的 php-cgi 进程都卡在 file_get_contents() 函数时，这台 Nginx+PHP 的 WebServer 已经无法再处理新的 PHP 请求了，Nginx 将给用户返回“502 Bad Gateway”。修改该参数，设置一个 PHP 脚本最大执行时间是必要的，但是，治标不治本。例如改成 30s，如果发生 file_get_contents() 获取网页内容较慢的情况，这就意味着 150 个 php-cgi 进程，每秒钟只能处理 5 个请求，WebServer 同样很难避免"502 Bad Gateway"。解决办法是request_terminate_timeout设置为10s或者一个合理的值，或者给file_get_contents加一个超时参数。\r\n\r\n7.   <span class="s1">process</span><span class="s2">_control_timeout = 0   ，除了官方的翻译之后，未见到任何解释</span>\r\n\r\n8. syslog_facility (注释翻译)\r\n\r\nsyslog  工具 是用来明确如何记录日志信息的，使syslogd可以处理来自不同程序下的不同日志信息,syslog可能的值有（ex  daemon equiv LOG_DAEMON）,默认选择了daemon。\r\n\r\nsyslogd 是linux下面的处理日志信息的软件/命令 <a title=" Linux / Unix Command: syslogd" href="http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm">http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm</a> ，syslog应该是和syslogd进行交互的，处理日志信息的。\r\n\r\n这里的facility具体是指LOG_AUTH(安全/授权消息)，LOG_AUTHPRIV(安全/授权消息（私用）)，LOG_CRON（cron守护进程），LOG_DAEMON（系统守护进程），LOG_FTP（FTP守护进程）,LOG_KERN（内核进程），LOG_LOCAL0(本地使用)，LOG_LPR(行式打印机系统)，LOG_MAIL(邮件系统)，LOG_NEWS(网络新闻系统)，LOG_SYSLOG(SYSLOG内部产生的消息)，LOG_USER(任意的用户消息)，LOG_UUCP(UUCP系统)（摘自UNIX网络编程第一卷第三版313页）\r\n\r\n9.syslog_ident  是追加在所有的信息之前的，如果你在同一台服务器上面，有多个fpm实例运行，可以修改这个名字，满足需求。\r\n\r\n10.Log_level 可能的值是alert,error,warning,notice,debug,默认值notice.\r\n\r\n11,emergency_restart_threshold 如果一定时间内以SIGSEGV或者SIGBUS状态退出的子进程达到该值的两，fpm就会重启，0表示关闭。\r\n\r\n&nbsp;', 'php-fpm.conf 参数详解', '', 'inherit', 'open', 'open', '', '146-revision-v1', '', '', '2015-03-20 14:58:29', '2015-03-20 14:58:29', '', 146, 'http://unasm.sinaapp.com/?p=223', 0, 'revision', '', 0),
(226, 1, '2015-03-26 06:47:13', '2015-03-26 06:47:13', '<p class="p1"><span class="s1"><span class="Apple-converted-space">   </span>upstream websocket {<span class="Apple-converted-space">             </span></span> <span class="s1"><span class="Apple-converted-space">                              </span></span><span class="s4"><span class="Apple-converted-space">                                                                                                      </span></span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">         </span></span><span class="s6">#负载均衡</span><span class="s1"> <span class="Apple-converted-space">                   </span></span> <span class="s1"><span class="Apple-converted-space">                              </span></span><span class="s4"><span class="Apple-converted-space">                                                                                                    </span></span></p>\r\n<p class="p1"><span class="s1">          server 127.0.0.1:8030 weight=</span><span class="s2">5</span><span class="s1">;                   </span><span class="s4">                                                                                                  </span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">          </span>server 127.0.0.1:8040 weight=</span><span class="s2">1</span><span class="s1">; <span class="Apple-converted-space">                     </span></span><span class="s4"><span class="Apple-converted-space">                                                                                        </span></span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">  </span>} <span class="Apple-converted-space">                               </span></span> <span class="s1"><span class="Apple-converted-space">                         </span></span><span class="s4"><span class="Apple-converted-space">                                                                                                   </span></span></p>\r\n<p class="p1"><span class="s1">server {<span class="Apple-converted-space">                         </span></span> <span class="s1"><span class="Apple-converted-space">                            </span></span><span class="s4"><span class="Apple-converted-space">                                                                                                      </span></span></p>\r\n<p class="p1"><span class="s1">        listen 8020;<span class="Apple-converted-space">                 </span></span> <span class="s1"><span class="Apple-converted-space">                             </span></span><span class="s4"><span class="Apple-converted-space">                                                                                                  </span></span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">         </span></span><span class="s1"><span class="Apple-converted-space"> </span>location /chat/ { <span class="Apple-converted-space">           </span></span> <span class="s1"><span class="Apple-converted-space">             </span></span><span class="s4"><span class="Apple-converted-space">                                                                                                </span></span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">  </span> </span><span class="s1"><span class="Apple-converted-space">                </span>proxy_pass http://web</span><span class="s2">s</span><span class="s1">ocket;<span class="Apple-converted-space">                      </span></span><span class="s4"><span class="Apple-converted-space">                                                                                                    </span></span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">  </span> </span><span class="s1"><span class="Apple-converted-space">        </span></span><span class="s6"># <span class="Apple-converted-space">      </span>proxy_pass http://127</span><span class="s2">.</span><span class="s6">0.0.1:</span><span class="s7">8010</span><span class="s6">;</span><span class="s1"> <span class="Apple-converted-space">           </span></span><span class="s4"><span class="Apple-converted-space">                                                                                            </span></span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">  </span> </span><span class="s1"><span class="Apple-converted-space">                </span>proxy_http_version 1.</span><span class="s2">1</span><span class="s1">; <span class="Apple-converted-space">                       </span></span><span class="s4"><span class="Apple-converted-space">                                                                                                    </span></span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">  </span> </span><span class="s1"><span class="Apple-converted-space">                </span>proxy_set_header Upgr</span><span class="s2">a</span><span class="s1">de $http_upgrade; <span class="Apple-converted-space">           </span></span><span class="s4"><span class="Apple-converted-space">                                                                                          </span></span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">  </span> </span><span class="s1"><span class="Apple-converted-space">                </span>proxy_set_header Conn</span><span class="s2">e</span><span class="s1">ction $connection_upgrade;</span><span class="s4"><span class="Apple-converted-space">                                                                                             </span></span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">  </span> </span><span class="s1"><span class="Apple-converted-space">        </span>} <span class="Apple-converted-space">                       </span></span> <span class="s1"><span class="Apple-converted-space">                        </span></span><span class="s4"><span class="Apple-converted-space">                                                                                        </span></span></p>\r\n<p class="p2"><span class="s5"><span class="Apple-converted-space">  </span></span><span class="s4">}<span class="Apple-converted-space">                   </span></span></p>\r\n<p class="p2">上面就是一个最简单的负载均衡，</p>\r\n<p class="p2">首先server监听8020端口，然后将请求分发给websocket ，然后socket下面是一个服务器集群，分别是8030和8040端口，两台端口分别独立处理请求，可以称之为8020是一个反向代理，8030,和8040的nodejs服务器，是后端服务器集群。</p>', 'nginx配置之upstream 案例解释', '', 'inherit', 'open', 'open', '', '225-revision-v1', '', '', '2015-03-26 06:47:13', '2015-03-26 06:47:13', '', 225, 'http://unasm.sinaapp.com/?p=226', 0, 'revision', '', 0),
(228, 1, '2015-04-01 13:25:28', '2015-04-01 13:25:28', 'INNODB Master Thread 内部由多个循环组成，主循环(loop)，后台循环(backgroup loop)，刷新循环(flush loop)，暂停循环（suspend loop），Master Thread 会根据数据库的运行状态在loop , background loop , flush loop,和suspend loop之间切换，Loop被称为主循环，大部分操作都是在这个循环中的，包括两个大部分的操作，每秒的操作和每10s的操作。\r\n\r\n每秒的操作包括：\r\n<ol>\r\n	<li>日志缓冲刷新到磁盘，即使这个事务还没有提交（总是）；</li>\r\n	<li>合并插入缓冲（可能）；</li>\r\n	<li>之多刷新100个Innodb的缓冲池中的脏页到磁盘（可能）；</li>\r\n	<li>如果当前没有用户活动，则切换到后台循环中（可能）；</li>\r\n</ol>\r\n即使某个事务还没有提交，Innodb仍然每秒将重做日志缓冲中的内容刷新到重做日志文件（这个是默认的配置，可以修改成刷新到系统文件缓冲和提交的时候刷新到日志文件），这个可以解释为什么再大的事务，提交的时间也是很短的。\r\n\r\n合并插入缓冲不是每秒都会发生的。Innodb 会判断前一秒内发生的IO次数是否小于5次，如果小于5次，Innodb会认为当前压力很小，可以执行合并插入缓冲的操作。\r\n\r\n刷新100个脏页的操作也不是每秒都发生的，Innodb会判断当前缓冲池中的脏页比例是否超过了配置文件中的innodb_max_dirty_pages_pct这个参数，如果超过了这个阀值，Innodb存储引擎认为需要做磁盘的操作，将100个脏页写入磁盘中。\r\n\r\n每10s的操作包括如下内容：\r\n<ol>\r\n	<li>合并最多五个插入缓冲（总是）；</li>\r\n	<li>将日志缓冲刷新到磁盘（总是）；</li>\r\n	<li>删除无用的Undo也（总是）；</li>\r\n	<li>刷新100个或者0个脏页到磁盘</li>\r\n</ol>\r\n在10s的操作中，Innodb会判断过去的10s之内磁盘的IO操作是否小于200次，如果是，Innodb 会认为当前有足够的磁盘Innodb，因此将100个脏页刷新到磁盘，接着Innodb会合并插入缓冲，不同于每秒可能发生的合并插入缓冲的操作，这次的合并插入缓冲总会在这个阶段进行，之后，INNODB存储引擎会再进行一次将日志缓冲刷新到磁盘的操作。\r\n接着Innodb存储引擎会进一步执行full purge 操作，即删除无用的Undo也，对表进行update，delete 这类操作时，原来的行被标记为删除，因为一致性读得关系，需要保留这些行版本的信息。但是fullpurge的过程中，Innodb存储引擎会判断当前事务中已被删除的行是否可以删除，有时候还可能有查询操作需要读取之前的版本的undo信息，如果可以删除，Innodb会立即将其删除。在每次purge的时候，每次会尝试回收尽可能的undo页。\r\n然后Innodb 存储引擎会判断缓冲池中脏页的比例，如果有超过70%的脏页，则刷新100个脏页到磁盘，如果磁盘脏页比例小于70%，则只需要刷新10%的脏页到磁盘。\r\n\r\nbackground loop 如果没有用户活动，或者数据库关闭，就会切换到这个循环，background loop 执行以下操作。\r\n<ol>\r\n	<li>删除无用的Undo页</li>\r\n	<li>合并20个插入缓冲</li>\r\n	<li>调回主循环。</li>\r\n	<li>不断刷新到100页，知道符合条件。</li>\r\n</ol>\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n摘录自《MySQL 技术内幕 InnoDB存储引擎》第49页', 'innodb 主线程操作', '', 'publish', 'open', 'open', '', 'innodb-%e4%b8%bb%e7%ba%bf%e7%a8%8b%e6%93%8d%e4%bd%9c', '', '', '2015-04-01 13:26:38', '2015-04-01 13:26:38', '', 0, 'http://unasm.sinaapp.com/?p=228', 0, 'post', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(229, 1, '2015-04-01 13:25:28', '2015-04-01 13:25:28', 'INNODB Master Thread 内部由多个循环组成，主循环(loop)，后台循环(backgroup loop)，刷新循环(flush loop)，暂停循环（suspend loop），Master Thread 会根据数据库的运行状态在loop , background loop , flush loop,和suspend loop之间切换，Loop被称为主循环，大部分操作都是在这个循环中的，包括两个大部分的操作，每秒的操作和每10s的操作。\r\n\r\n每秒的操作包括：\r\n<ol>\r\n	<li>日志缓冲刷新到磁盘，即使这个事务还没有提交（总是）；</li>\r\n	<li>合并插入缓冲（可能）；</li>\r\n	<li>之多刷新100个Innodb的缓冲池中的脏页到磁盘（可能）；</li>\r\n	<li>如果当前没有用户活动，则切换到后台循环中（可能）；</li>\r\n</ol>\r\n即使某个事务还没有提交，Innodb仍然每秒将重做日志缓冲中的内容刷新到重做日志文件（这个是默认的配置，可以修改成刷新到系统文件缓冲和提交的时候刷新到日志文件），这个可以解释为什么再大的事务，提交的时间也是很短的。\r\n\r\n合并插入缓冲不是每秒都会发生的。Innodb 会判断前一秒内发生的IO次数是否小于5次，如果小于5次，Innodb会认为当前压力很小，可以执行合并插入缓冲的操作。\r\n\r\n刷新100个脏页的操作也不是每秒都发生的，Innodb会判断当前缓冲池中的脏页比例是否超过了配置文件中的innodb_max_dirty_pages_pct这个参数，如果超过了这个阀值，Innodb存储引擎认为需要做磁盘的操作，将100个脏页写入磁盘中。\r\n\r\n每10s的操作包括如下内容：\r\n<ol>\r\n	<li>合并最多五个插入缓冲（总是）；</li>\r\n	<li>将日志缓冲刷新到磁盘（总是）；</li>\r\n	<li>删除无用的Undo也（总是）；</li>\r\n	<li>刷新100个或者0个脏页到磁盘</li>\r\n</ol>\r\n在10s的操作中，Innodb会判断过去的10s之内磁盘的IO操作是否小于200次，如果是，Innodb 会认为当前有足够的磁盘Innodb，因此将100个脏页刷新到磁盘，接着Innodb会合并插入缓冲，不同于每秒可能发生的合并插入缓冲的操作，这次的合并插入缓冲总会在这个阶段进行，之后，INNODB存储引擎会再进行一次将日志缓冲刷新到磁盘的操作。\r\n接着Innodb存储引擎会进一步执行full purge 操作，即删除无用的Undo也，对表进行update，delete 这类操作时，原来的行被标记为删除，因为一致性读得关系，需要保留这些行版本的信息。但是fullpurge的过程中，Innodb存储引擎会判断当前事务中已被删除的行是否可以删除，有时候还可能有查询操作需要读取之前的版本的undo信息，如果可以删除，Innodb会立即将其删除。在每次purge的时候，每次会尝试回收尽可能的undo页。\r\n然后Innodb 存储引擎会判断缓冲池中脏页的比例，如果有超过70%的脏页，则刷新100个脏页到磁盘，如果磁盘脏页比例小于70%，则只需要刷新10%的脏页到磁盘。\r\n\r\nbackground loop 如果没有用户活动，或者数据库关闭，就会切换到这个循环，background loop 执行以下操作。\r\n<ol>\r\n	<li>删除无用的Undo页</li>\r\n	<li>合并20个插入缓冲</li>\r\n	<li>调回主循环。</li>\r\n	<li>不断刷新到100页，知道符合条件。</li>\r\n</ol>\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n摘录自《MySQL 技术内幕 InnoDB存储引擎》第49页', 'innodb 主线程操作', '', 'inherit', 'open', 'open', '', '228-revision-v1', '', '', '2015-04-01 13:25:28', '2015-04-01 13:25:28', '', 228, 'http://unasm.sinaapp.com/?p=229', 0, 'revision', '', 0),
(231, 1, '2015-04-10 08:25:52', '2015-04-10 08:25:52', '1：cgdb分为上下两栏，上面类似于vi窗口（就称之为vi窗口吧）显示对应的代码，下面gdb窗口进行调试操作，上下窗口连动，也就是说vi窗口里显示的代码会跟随gdb窗口里调试的位置同步进退。\r\n2：按esc键可让输入焦点进入到vi窗口，再按i键回到gdb窗口。按其它键也可以进入到vi窗口，比如小键盘上的按键（如果此时Num Lock处于打开状态）。\r\n3：vi窗口可进行的操作包括，上下左右翻动，按冒号（:）开始进行设置（具体设置命令可以参考<a href="http://cgdb.sourceforge.net/docs/cgdb.html/Configuring-CGDB.html#Configuring-CGDB">这里</a>），比如设置上面窗口全屏显示（即下面的gdb窗口被隐藏），按斜干（/）为在当前文件内搜索，按o键可以显示当前程序关联的文件列表，按空格则在当前位置设置/取消断点。\r\n4：gdb窗口里的相关操作无法多说，有耐心看到这里的应该都会gdb或知道在哪看更详细的gdb操作介绍。\r\n最后，执行cgdb可带的命令行参数和gdb类似，比如-p等。', 'cgdb的使用', '', 'publish', 'open', 'open', '', 'cgdb%e7%9a%84%e4%bd%bf%e7%94%a8', '', '', '2015-04-10 08:26:47', '2015-04-10 08:26:47', '', 0, 'http://unasm.sinaapp.com/?p=231', 0, 'post', '', 0),
(232, 1, '2015-04-10 08:25:52', '2015-04-10 08:25:52', '1：cgdb分为上下两栏，上面类似于vi窗口（就称之为vi窗口吧）显示对应的代码，下面gdb窗口进行调试操作，上下窗口连动，也就是说vi窗口里显示的代码会跟随gdb窗口里调试的位置同步进退。\r\n2：按esc键可让输入焦点进入到vi窗口，再按i键回到gdb窗口。按其它键也可以进入到vi窗口，比如小键盘上的按键（如果此时Num Lock处于打开状态）。\r\n3：vi窗口可进行的操作包括，上下左右翻动，按冒号（:）开始进行设置（具体设置命令可以参考<a href="http://cgdb.sourceforge.net/docs/cgdb.html/Configuring-CGDB.html#Configuring-CGDB">这里</a>），比如设置上面窗口全屏显示（即下面的gdb窗口被隐藏），按斜干（/）为在当前文件内搜索，按o键可以显示当前程序关联的文件列表，按空格则在当前位置设置/取消断点。\r\n4：gdb窗口里的相关操作无法多说，有耐心看到这里的应该都会gdb或知道在哪看更详细的gdb操作介绍。\r\n最后，执行cgdb可带的命令行参数和gdb类似，比如-p等。', 'cgdb的使用', '', 'inherit', 'open', 'open', '', '231-revision-v1', '', '', '2015-04-10 08:25:52', '2015-04-10 08:25:52', '', 231, 'http://unasm.sinaapp.com/?p=232', 0, 'revision', '', 0),
(243, 1, '2015-04-29 07:08:56', '2015-04-29 07:08:56', '求最长回文子串的问题。是一个很经典的题目。我这里通过在n^2的算法基础上做了优化过的。源码如下\r\n\r\nhttps://github.com/unasm/utils/blob/master/palindromic.c\r\n\r\n首先，如kmp算法一般，首先对字符串进行扫描，在pos中记录每一个相同字符的前一个字符位置，第一个为-1，\r\n\r\n<code>\r\nfor (len = 0; s[len] != ''\\0''; len++) {\r\npos[len] = hash[s[len]];\r\nhash[s[len]] = len;\r\n}\r\n</code>\r\n这里将pos中保存前一个字符的位置，方便快速跳过无用的字符。\r\n\r\n这里利用了一个回文字符串的性质，就是如果abba是回文字符串，那下标 a+a = b+b的下标，所以根据dp的思想，判断两个字符是不是可以构成回文字符串，需要判断两个条件就是了，第一，这两个字符相同，第二个，题目之间包裹的字符串构成回文字符串，而判断中间构成回文字符串的语句就是\r\n\r\n<span class="pl-k">1 . if</span>(i - last &lt;= <span class="pl-c1">2)  如果两个相同字符之间只有一个或者没有字符，则中间是回文子串，如果大于1个，则 i -  hash[i + last] = 1，也就是说，两个字符的中心必须有过回文字符串，并且，上一个构成回文字符串的位置必须和现在的字符挨着，hash[i+last]中记录着上一个以i+last为中心的回文串的大值所处的位置，如果添加两个之后依旧构成回文串，则他们必须挨着，</span>\r\n\r\n<span class="pl-c1">最后可以根据 当前的最大位置和两者相加的结果判断出来回文串的长度。</span>\r\n\r\n从以上可以看出来，其实就是在o(n^2)的基础上，加了一个快读跳过的设置而已', 'leetcode 第五题： Longest Palindromic Substring ', '', 'publish', 'open', 'open', '', 'leetcode-%e7%ac%ac%e4%ba%94%e9%a2%98%ef%bc%9a-longest-palindromic-substring', '', '', '2015-04-29 07:08:56', '2015-04-29 07:08:56', '', 0, 'http://unasm.sinaapp.com/?p=243', 0, 'post', '', 0),
(235, 1, '2015-04-14 06:55:47', '2015-04-14 06:55:47', '这个题目有点意思，最初我以为是动态规划，从左到右，从上到下一次扫一遍，然后到最后得到其中最小的值，到最后，我发现，这样不行，因为这个样子的dp有两个值需要维护，一个是到达i,j点的时候剩余的生命值left，一个是在到达i,j途遇到的最小的生命值min，在dp判断条件的时候，就会面临很判断的局面，比如{left= 10,min= -12,left = 1,min=-13},那两条路线中，那条才是最优的呢？显然根据终点的不同，优劣的评判也是不一样的，也就是说，正面dp是不行的。\r\n\r\n放弃这个时候，开始想bfs，但是不行，因为每一步出去，都有两个选择，如果m= 100,n=100,这个矩阵不算大，然后bfs的复杂度就是2^(200)了，就算加上剪枝，不能达到目的。\r\n\r\n网上标准的解法是从终点开始，维护到达终点时候，所需要的最小的生命值，最小值为1，这样就简单了很多，对于一个i,j来说，到达终点所需的最小生命值等于本房间内消耗的生命值   加  向右或者向下两条路上消耗的生命值的最小值，这样维护的值只有一个，可以进行dp了', '174.leetcode Dungeon Game ', '', 'publish', 'open', 'open', '', 'leetcode-dungeon-game', '', '', '2015-04-14 06:56:05', '2015-04-14 06:56:05', '', 0, 'http://unasm.sinaapp.com/?p=235', 0, 'post', '', 0),
(236, 1, '2015-04-14 06:55:47', '2015-04-14 06:55:47', '这个题目有点意思，最初我以为是动态规划，从左到右，从上到下一次扫一遍，然后到最后得到其中最小的值，到最后，我发现，这样不行，因为这个样子的dp有两个值需要维护，一个是到达i,j点的时候剩余的生命值left，一个是在到达i,j途遇到的最小的生命值min，在dp判断条件的时候，就会面临很判断的局面，比如{left= 10,min= -12,left = 1,min=-13},那两条路线中，那条才是最优的呢？显然根据终点的不同，优劣的评判也是不一样的，也就是说，正面dp是不行的。\r\n\r\n放弃这个时候，开始想bfs，但是不行，因为每一步出去，都有两个选择，如果m= 100,n=100,这个矩阵不算大，然后bfs的复杂度就是2^(200)了，就算加上剪枝，不能达到目的。\r\n\r\n网上标准的解法是从终点开始，维护到达终点时候，所需要的最小的生命值，最小值为1，这样就简单了很多，对于一个i,j来说，到达终点所需的最小生命值等于本房间内消耗的生命值   加  向右或者向下两条路上消耗的生命值的最小值，这样维护的值只有一个，可以进行dp了', 'leetcode Dungeon Game ', '', 'inherit', 'open', 'open', '', '235-revision-v1', '', '', '2015-04-14 06:55:47', '2015-04-14 06:55:47', '', 235, 'http://unasm.sinaapp.com/?p=236', 0, 'revision', '', 0),
(237, 1, '2015-04-14 06:56:05', '2015-04-14 06:56:05', '这个题目有点意思，最初我以为是动态规划，从左到右，从上到下一次扫一遍，然后到最后得到其中最小的值，到最后，我发现，这样不行，因为这个样子的dp有两个值需要维护，一个是到达i,j点的时候剩余的生命值left，一个是在到达i,j途遇到的最小的生命值min，在dp判断条件的时候，就会面临很判断的局面，比如{left= 10,min= -12,left = 1,min=-13},那两条路线中，那条才是最优的呢？显然根据终点的不同，优劣的评判也是不一样的，也就是说，正面dp是不行的。\r\n\r\n放弃这个时候，开始想bfs，但是不行，因为每一步出去，都有两个选择，如果m= 100,n=100,这个矩阵不算大，然后bfs的复杂度就是2^(200)了，就算加上剪枝，不能达到目的。\r\n\r\n网上标准的解法是从终点开始，维护到达终点时候，所需要的最小的生命值，最小值为1，这样就简单了很多，对于一个i,j来说，到达终点所需的最小生命值等于本房间内消耗的生命值   加  向右或者向下两条路上消耗的生命值的最小值，这样维护的值只有一个，可以进行dp了', '174.leetcode Dungeon Game ', '', 'inherit', 'open', 'open', '', '235-revision-v1', '', '', '2015-04-14 06:56:05', '2015-04-14 06:56:05', '', 235, 'http://unasm.sinaapp.com/?p=237', 0, 'revision', '', 0),
(238, 1, '2015-04-15 09:24:21', '2015-04-15 09:24:21', '<pre id="recommend-content-365978365" class="recommend-text mb-10">SQL语言共分为四大类：数据查询语言DQL，数据操纵语言DML，\r\n数据定义语言DDL，数据控制语言DCL。\r\n\r\n1 数据查询语言DQL\r\n数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE\r\n子句组成的查询块：\r\nSELECT &lt;字段名表&gt;\r\nFROM &lt;表或视图名&gt;\r\nWHERE &lt;查询条件&gt;\r\n\r\n2 数据操纵语言\r\n数据操纵语言DML主要有三种形式：\r\n1) 插入：INSERT\r\n2) 更新：UPDATE\r\n3) 删除：DELETE\r\n\r\n3 数据定义语言DDL\r\n数据定义语言DDL用来创建数据库中的各种对象-----表、视图、\r\n索引、同义词、聚簇等如：\r\nCREATE TABLE/VIEW/INDEX/SYN/CLUSTER\r\n| | | | |\r\n表 视图 索引 同义词 簇\r\n\r\n4 数据控制语言DCL\r\n数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制\r\n数据库操纵事务发生的时间及效果，对数据库实行监视等。如：\r\n1) GRANT：授权。\r\n2) ROLLBACK [WORK] TO [SAVEPOINT]：回退到某一点。\r\n回滚---ROLLBACK\r\n回滚命令使数据库状态回到上次最后提交的状态。其格式为：\r\nSQL&gt;ROLLBACK;\r\n3) COMMIT [WORK]：提交。\r\n在数据库的插入、删除和修改操作时，只有当事务在提交到数据\r\n库时才算完成。在事务提交前，只有操作数据库的这个人才能有权看\r\n到所做的事情，别人只有在最后提交完成后才可以看到。\r\n提交数据有三种类型：显式提交、隐式提交及自动提交。下面分\r\n别说明这三种类型。\r\n(1) 显式提交\r\n用COMMIT命令直接完成的提交为显式提交。其格式为：\r\nSQL&gt;COMMIT；\r\n(2) 隐式提交\r\n用SQL命令间接完成的提交为隐式提交。这些命令是：\r\nALTER，AUDIT，COMMENT，CONNECT，CREATE，DISCONNECT，DROP，\r\nEXIT，GRANT，NOAUDIT，QUIT，REVOKE，RENAME。\r\n(3) 自动提交\r\n若把AUTOCOMMIT设置为ON，则在插入、修改、删除语句执行后，\r\n系统将自动进行提交，这就是自动提交。其格式为：\r\nSQL&gt;SET AUTOCOMMIT ON；\r\n\r\n转自：http://zhidao.baidu.com/question/115195964.html</pre>', 'SQL语言四大类', '', 'inherit', 'open', 'open', '', '205-revision-v1', '', '', '2015-04-15 09:24:21', '2015-04-15 09:24:21', '', 205, 'http://unasm.sinaapp.com/?p=238', 0, 'revision', '', 0),
(239, 1, '2015-04-15 09:28:07', '2015-04-15 09:28:07', '<ol>\r\n	<li>一个表里面所有的varchar 字段加起来<strong>必须</strong>不能超过65532字节，推荐不超过8098个，因为一旦超过8098，占用的磁盘大小超过了一页,innodb会使用未压缩的blob页来保存，数据页会被用来保存偏移量，varchar越大，使用的blob越多，所以从效率和节省空间角度来说，不推荐超过8098.</li>\r\n	<li>char也被当做变成处理，根据字符集决定，比如同一个表，存入''a'' 和''他''占用的字节是不同的</li>\r\n	<li>innodb的range 分区 查询，只能针对YEAR,TO_DAYS,TO_SECONDS,UNIX_TIMESTAMP等函数进行搜索优化，比如YEAR(date) + MONTH(date)的时候，优化器是不会搜索优化的</li>\r\n	<li>Mysql 5.5版本之前 索引的添加或者删除操作过程是这样的\r\n<ul>\r\n	<li>先创建一个临时表，表结构为alter table之后的新定义的结构</li>\r\n	<li>把原来的数据导入临时表</li>\r\n	<li>删除原表</li>\r\n	<li>把临时表重命名为原来的表</li>\r\n</ul>\r\n</li>\r\n	<li>Got error 28 from storage engine,这就是一个很无辜的错误了，或者是属于dba范畴的，磁盘空间满了，没有空间写数据了</li>\r\n</ol>', 'mysql 基础知识集锦', '', 'inherit', 'open', 'open', '', '175-revision-v1', '', '', '2015-04-15 09:28:07', '2015-04-15 09:28:07', '', 175, 'http://unasm.sinaapp.com/?p=239', 0, 'revision', '', 0),
(240, 1, '2015-04-16 07:13:23', '2015-04-16 07:13:23', '现在有一个需求，就是需要A表的数据，但是需要B表的补充和字段排序，也就是需要跨表查询，有三种方案\r\n<ol>\r\n	<li>连表查询，select * from A,B where A.key = B.key order by B.key1 这种方案，这种方案，简单有效。缺点是sql比较复杂，不利于索引的使用</li>\r\n	<li>第二种方案是拆分sql，分两个sql，使用编程语言控制其中的逻辑，从A中获取全部的key，然后利用 where key in()这种方式</li>\r\n</ol>\r\n经过测试在A表中灌入1W条数据，B中1W条对应的数据,\r\n\r\n第一次测试：\r\n<p class="p1"><span class="s1">cross table query cost time is : 14500 ms</span></p>\r\n<p class="p1"><span class="s1">sep in query cost time is : 765 ms</span></p>\r\n<p class="p1">第二次测试：</p>\r\n<p class="p1"><span class="s1">cross table query cost time is : 13739 ms</span></p>\r\n<p class="p1"><span class="s1">sep in query cost time is : 431 ms</span></p>\r\n<p class="p1">第三次测试：</p>\r\n<p class="p1"><span class="s1">cross table query cost time is : 13902 ms</span></p>\r\n<p class="p1"><span class="s1">sep in query cost time is : 745 ms</span></p>\r\n<p class="p1">由此可见拆分sql，是更有利的方案。</p>\r\n<p class="p1">细究原因，根据《高性能mysql》209页介绍，分解关联查询的优势有：</p>\r\n\r\n<ol>\r\n	<li class="p1">缓存的效率更高</li>\r\n	<li class="p1">单个的查询锁竞争更少</li>\r\n	<li class="p1">实现了哈希关联</li>\r\n</ol>', '数据库 跨表查询和分条多次查询对比', '', 'publish', 'open', 'open', '', '%e6%95%b0%e6%8d%ae%e5%ba%93-%e8%b7%a8%e8%a1%a8%e6%9f%a5%e8%af%a2%e5%92%8c%e5%88%86%e6%9d%a1%e5%a4%9a%e6%ac%a1%e6%9f%a5%e8%af%a2%e5%af%b9%e6%af%94', '', '', '2015-04-16 07:13:23', '2015-04-16 07:13:23', '', 0, 'http://unasm.sinaapp.com/?p=240', 0, 'post', '', 0),
(241, 1, '2015-04-16 07:13:23', '2015-04-16 07:13:23', '现在有一个需求，就是需要A表的数据，但是需要B表的补充和字段排序，也就是需要跨表查询，有三种方案\r\n<ol>\r\n	<li>连表查询，select * from A,B where A.key = B.key order by B.key1 这种方案，这种方案，简单有效。缺点是sql比较复杂，不利于索引的使用</li>\r\n	<li>第二种方案是拆分sql，分两个sql，使用编程语言控制其中的逻辑，从A中获取全部的key，然后利用 where key in()这种方式</li>\r\n</ol>\r\n经过测试在A表中灌入1W条数据，B中1W条对应的数据,\r\n\r\n第一次测试：\r\n<p class="p1"><span class="s1">cross table query cost time is : 14500 ms</span></p>\r\n<p class="p1"><span class="s1">sep in query cost time is : 765 ms</span></p>\r\n<p class="p1">第二次测试：</p>\r\n<p class="p1"><span class="s1">cross table query cost time is : 13739 ms</span></p>\r\n<p class="p1"><span class="s1">sep in query cost time is : 431 ms</span></p>\r\n<p class="p1">第三次测试：</p>\r\n<p class="p1"><span class="s1">cross table query cost time is : 13902 ms</span></p>\r\n<p class="p1"><span class="s1">sep in query cost time is : 745 ms</span></p>\r\n<p class="p1">由此可见拆分sql，是更有利的方案。</p>\r\n<p class="p1">细究原因，根据《高性能mysql》209页介绍，分解关联查询的优势有：</p>\r\n\r\n<ol>\r\n	<li class="p1">缓存的效率更高</li>\r\n	<li class="p1">单个的查询锁竞争更少</li>\r\n	<li class="p1">实现了哈希关联</li>\r\n</ol>', '数据库 跨表查询和分条多次查询对比', '', 'inherit', 'open', 'open', '', '240-revision-v1', '', '', '2015-04-16 07:13:23', '2015-04-16 07:13:23', '', 240, 'http://unasm.sinaapp.com/?p=241', 0, 'revision', '', 0),
(244, 1, '2015-04-29 07:08:56', '2015-04-29 07:08:56', '求最长回文子串的问题。是一个很经典的题目。我这里通过在n^2的算法基础上做了优化过的。源码如下\r\n\r\nhttps://github.com/unasm/utils/blob/master/palindromic.c\r\n\r\n首先，如kmp算法一般，首先对字符串进行扫描，在pos中记录每一个相同字符的前一个字符位置，第一个为-1，\r\n\r\n<code>\r\nfor (len = 0; s[len] != ''\\0''; len++) {\r\npos[len] = hash[s[len]];\r\nhash[s[len]] = len;\r\n}\r\n</code>\r\n这里将pos中保存前一个字符的位置，方便快速跳过无用的字符。\r\n\r\n这里利用了一个回文字符串的性质，就是如果abba是回文字符串，那下标 a+a = b+b的下标，所以根据dp的思想，判断两个字符是不是可以构成回文字符串，需要判断两个条件就是了，第一，这两个字符相同，第二个，题目之间包裹的字符串构成回文字符串，而判断中间构成回文字符串的语句就是\r\n\r\n<span class="pl-k">1 . if</span>(i - last &lt;= <span class="pl-c1">2)  如果两个相同字符之间只有一个或者没有字符，则中间是回文子串，如果大于1个，则 i -  hash[i + last] = 1，也就是说，两个字符的中心必须有过回文字符串，并且，上一个构成回文字符串的位置必须和现在的字符挨着，hash[i+last]中记录着上一个以i+last为中心的回文串的大值所处的位置，如果添加两个之后依旧构成回文串，则他们必须挨着，</span>\r\n\r\n<span class="pl-c1">最后可以根据 当前的最大位置和两者相加的结果判断出来回文串的长度。</span>\r\n\r\n从以上可以看出来，其实就是在o(n^2)的基础上，加了一个快读跳过的设置而已', 'leetcode 第五题： Longest Palindromic Substring ', '', 'inherit', 'open', 'open', '', '243-revision-v1', '', '', '2015-04-29 07:08:56', '2015-04-29 07:08:56', '', 243, 'http://unasm.sinaapp.com/?p=244', 0, 'revision', '', 0),
(245, 1, '2015-05-05 09:10:42', '2015-05-05 09:10:42', 'Given <i>n</i> non-negative integers <i>a<sub>1</sub></i>, <i>a<sub>2</sub></i>, ..., <i>a<sub>n</sub></i>, where each represents a point at coordinate (<i>i</i>, <i>a<sub>i</sub></i>). <i>n</i> vertical lines are drawn such that the two endpoints of line <i>i</i> is at (<i>i</i>, <i>a<sub>i</sub></i>) and (<i>i</i>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\r\n\r\nNote: You may not slant the container.\r\n\r\n&nbsp;\r\n\r\n这个题目苦思冥想半个下午，还是想不到正确解法，除了1/2 * N^2的，就没有了，看到了标准解法之后，证明了半个小时，总算明白了，借来的答案如下\r\n,可以看到，就是首先选择最边上的两个，然后将其中短的向内移动，寻找更大的面积，因为如果这个时候，如果选择移动右边的长边，无论如何得到的面积，都不可能超过目前的面积MAX，因为面积(a-b) * min(sa,sb),既然目前a-b达到最大，min(sa , sb) = sa ,无论如何移动sb,得到sb1，如果sb1 &gt; sa, 在a-b1减小的情况下，min(sa,sb1) = sa,面积依旧是减小，如果sb1 &lt; sa,那么sb1 * (a-b1) &lt; sb1 (s - b) &lt; sa(a-b)，所以移动长的边，无论如何都不能得到更大的，贪心的移动小边，寻找可能的更大的，\r\n\r\n这里有一个问题，就是贪心的寻找得到的更大的，却未必是最大的，这个就是贪心的问题，\r\n\r\nok，现在就需要证明，一定不会错过最大面积的组合sa,sb,\r\n\r\n我们假定在下面贪心的样例中第一个遇到的最大组合边（O(n)扫，每个边至少都被访问一次）为sa，那我们需要证明，在已经得到sa的情况下，程序一定会移动另一个边到Sb.\r\n\r\n我们假定，当移动到sa的时候，另一个边为sc，那么如果想将sc移动到sb，必然有sa &gt; sc,利用反证法，sc &gt; sa 是不可能的,  因为 a - c &gt; a - b ,而且sa,sb是最大组合，min(sa, sb) * a- b  &gt; min(sa,sc) * a - c 所以然有min(sa, sb) &gt; min(sa, sc),也就是min(sa,sb) &gt; sa, 这个是不可能的，和sa,sb是最大面积的设定冲突，所以必然有sa &gt; sc ,根据程序运行，sa保留，sc向内移动，寻找到sb，得到最大的，min(sb,sa) * (a - b) 是最大值，\r\n\r\n&nbsp;\r\n<pre>public class Solution {\r\n    public int maxArea(int[] height) {\r\n        if (height.length &lt;= 1)\r\n            return 0;\r\n        int max = 0;\r\n        int left = 0;\r\n        int right = height.length - 1;\r\n        while (left &lt; right) {\r\n            max = Math.max(max, (right - left) * Math.min(height[left], height[right]));\r\n            if (height[left] &lt; height[right])\r\n                left++;\r\n            else\r\n                right--;\r\n        }\r\n        return max;\r\n    }\r\n}\r\n</pre>', 'Container With Most Water [leetcode 11]', '', 'publish', 'open', 'open', '', 'container-with-most-water-leetcode-11', '', '', '2015-05-05 09:14:15', '2015-05-05 09:14:15', '', 0, 'http://unasm.sinaapp.com/?p=245', 0, 'post', '', 0),
(246, 1, '2015-05-05 09:10:42', '2015-05-05 09:10:42', 'Given <i>n</i> non-negative integers <i>a<sub>1</sub></i>, <i>a<sub>2</sub></i>, ..., <i>a<sub>n</sub></i>, where each represents a point at coordinate (<i>i</i>, <i>a<sub>i</sub></i>). <i>n</i> vertical lines are drawn such that the two endpoints of line <i>i</i> is at (<i>i</i>, <i>a<sub>i</sub></i>) and (<i>i</i>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\r\n\r\nNote: You may not slant the container.\r\n\r\n&nbsp;\r\n\r\n这个题目苦思冥想半个下午，还是想不到正确解法，除了1/2 * N^2的，就没有了，看到了标准解法之后，证明了半个小时，总算明白了，借来的答案如下\r\n,可以看到，就是首先选择最边上的两个，然后将其中短的向内移动，寻找更大的面积，因为如果这个时候，如果选择移动右边的长边，无论如何得到的面积，都不可能超过目前的面积MAX，因为面积(a-b) * min(sa,sb),既然目前a-b达到最大，min(sa , sb) = sa ,无论如何移动sb,得到sb1，如果sb1 &gt; sa, 在a-b1减小的情况下，min(sa,sb1) = sa,面积依旧是减小，如果sb1 &lt; sa,那么sb1 * (a-b1) &lt; sb1 (s - b) &lt; sa(a-b)，所以移动长的边，无论如何都不能得到更大的，贪心的移动小边，寻找可能的更大的，\r\n\r\n这里有一个问题，就是贪心的寻找得到的更大的，却未必是最大的，这个就是贪心的问题，\r\n\r\nok，现在就需要证明，一定不会错过最大面积的组合sa,sb,\r\n\r\n我们假定在下面贪心的样例中第一个遇到的最大组合边（O(n)扫，每个边至少都被访问一次）为sa，那我们需要证明，在已经得到sa的情况下，程序一定会移动另一个边到Sb.\r\n\r\n我们假定，当移动到sa的时候，另一个边为sc，那么如果想将sc移动到sb，必然有sa &gt; sc,利用反证法，sc &gt; sa 是不可能的,  因为 a - c &gt; a - b ,而且sa,sb是最大组合，min(sa, sb) * a- b  &gt; min(sa,sc) * a - c 所以然有min(sa, sb) &gt; min(sa, sc),也就是min(sa,sb) &gt; sa, 这个是不可能的，和sa,sb是最大面积的设定冲突，所以必然有sa &gt; sc ,根据程序运行，sa保留，sc向内移动，寻找到sb，得到最大的，min(sb,sa) * (a - b) 是最大值，\r\n\r\n&nbsp;\r\n<pre>public class Solution {\r\n    public int maxArea(int[] height) {\r\n        if (height.length &lt;= 1)\r\n            return 0;\r\n        int max = 0;\r\n        int left = 0;\r\n        int right = height.length - 1;\r\n        while (left &lt; right) {\r\n            max = Math.max(max, (right - left) * Math.min(height[left], height[right]));\r\n            if (height[left] &lt; height[right])\r\n                left++;\r\n            else\r\n                right--;\r\n        }\r\n        return max;\r\n    }\r\n}\r\n</pre>', 'Container With Most Water [leetcode 11]', '', 'inherit', 'open', 'open', '', '245-revision-v1', '', '', '2015-05-05 09:10:42', '2015-05-05 09:10:42', '', 245, 'http://unasm.sinaapp.com/?p=246', 0, 'revision', '', 0),
(313, 1, '2015-06-17 03:22:17', '2015-06-17 03:22:17', '<code>\r\nhttp://club.baby.sina.com.cn/pm.php?action=send&amp;uid=1066572445%df%27%20and%20sleep(10)--+\r\n</code>\r\n上面的url就是一个最简单的sql注入例子，解决方案也很简单，就是对uid进行判断，如果不是整数就输出错误就好了。不过，php代码不是完全没有做安全过滤，discuz通过addslashes 对输入的数据做了一定程度的检验，但是被通过urlencode 的方式绕过了，%df%27%20and%20 转义回来之后 就是 ?'' and  的意思，也即是sql的''被关闭了，当然，这个只是最简单的注入', '一个初级的sql注入', '', 'inherit', 'open', 'open', '', '312-revision-v1', '', '', '2015-06-17 03:22:17', '2015-06-17 03:22:17', '', 312, 'http://unasm.sinaapp.com/?p=313', 0, 'revision', '', 0),
(318, 1, '2015-06-25 12:30:22', '2015-06-25 12:30:22', '编辑/产品 啪的一声，丢过来一个问题，说XXX出问题了，修复它，没有说明文档，自己刚刚接手不久，怎么办呢？？\r\n\r\n解决问题，应该归成一条线，一步一步来，从前向后，一步一步定位问题。\r\n\r\n首先，XXX出问题了，好，这个就是问题的头，我们沿着这个线往下走，瞄一眼  <span class="extension-title">Website IP （一个chrome的插件），看一下出问题的服务器ip，再怎么新接手，玩世不恭，自己掌管几台服务器，总是知道的吧，然后ssh到服务器上面去，然后就是/data1/bin/httpd -S  看一下apache/nginx 的配置，对配置了如指掌的，可以跳过这一步，主要是担心rewrite ，修改路由，让人不知道接下来怎么走。</span>\r\n\r\n一般来说，现在网站都是单入口的，直接从index.php开始就可以了，但是未必，老项目，如discuz或者不用框架，裸写的。\r\n\r\n如果裸写的，根据url和rewrite规则，或者直接按照目录去找文件，就可以了，如果是单入口模式，肯定会根据url中的参数确定下来具体的入口，这个时候，就需要对框架的路由规则比较了解，怎么了解路由那就是另一个问题了。总之，迅速定位入口，开始从头开始读代码，如果我的话，可能会首先在代码最前面加一个die，或者利用firephp输出，检测，看是不是找对了。然后就可以愉快的读代码了。\r\n\r\n一般来说，比较容易出问题的是外部资源，代码常年跑，不会轻易挂掉，php还是很健壮的。\r\n\r\n比较容易出问题的，比如http接口变化或者挂掉，mysql down掉了，系统没有了权限或者磁盘满了，redis 内存过多等等，优先查外部的，其次才是代码中的判断，', '分析无头案', '', 'publish', 'open', 'open', '', '%e5%88%86%e6%9e%90%e6%97%a0%e5%a4%b4%e6%a1%88', '', '', '2015-06-25 12:30:22', '2015-06-25 12:30:22', '', 0, 'http://unasm.sinaapp.com/?p=318', 0, 'post', '', 0),
(312, 1, '2015-06-17 03:22:17', '2015-06-17 03:22:17', '<code>\r\nhttp://club.baby.sina.com.cn/pm.php?action=send&amp;uid=1066572445%df%27%20and%20sleep(10)--+\r\n</code>\r\n上面的url就是一个最简单的sql注入例子，解决方案也很简单，就是对uid进行判断，如果不是整数就输出错误就好了。不过，php代码不是完全没有做安全过滤，discuz通过addslashes 对输入的数据做了一定程度的检验，但是被通过urlencode 的方式绕过了，%df%27%20and%20 转义回来之后 就是 ?'' and  的意思，也即是sql的''被关闭了，当然，这个只是最简单的注入', '一个初级的sql注入', '', 'publish', 'open', 'open', '', '%e4%b8%80%e4%b8%aa%e5%88%9d%e7%ba%a7%e7%9a%84sql%e6%b3%a8%e5%85%a5', '', '', '2015-06-17 03:22:17', '2015-06-17 03:22:17', '', 0, 'http://unasm.sinaapp.com/?p=312', 0, 'post', '', 0),
(251, 1, '2015-05-22 01:51:55', '2015-05-22 01:51:55', 'go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build  编译包和它的依赖关系\r\ngo get url  下载，安装包和它的依赖', 'go语言入门知识', '', 'publish', 'open', 'open', '', 'go%e8%af%ad%e8%a8%80%e5%85%a5%e9%97%a8%e7%9f%a5%e8%af%86', '', '', '2015-05-22 01:51:55', '2015-05-22 01:51:55', '', 0, 'http://unasm.sinaapp.com/?page_id=251', 0, 'page', '', 0),
(252, 1, '2015-05-22 01:51:55', '2015-05-22 01:51:55', 'go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build  编译包和它的依赖关系\r\ngo get url  下载，安装包和它的依赖', 'go语言入门知识', '', 'inherit', 'open', 'open', '', '251-revision-v1', '', '', '2015-05-22 01:51:55', '2015-05-22 01:51:55', '', 251, 'http://unasm.sinaapp.com/?p=252', 0, 'revision', '', 0),
(253, 1, '2015-05-22 01:53:20', '2015-05-22 01:53:20', 'go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build 编译包和它的依赖关系\r\ngo get url 下载，安装包和它的依赖\r\n\r\n连接数据库：\r\n<code>\r\ndb, err := sql.Open("mysql", "root:password@tcp(127.0.0.1:3306)/xueqiu")\r\n</code>\r\n上面第二个一次是用户名：密码,tcp(127.0.0.1:3306)表示连接的方式和对应的ip，xueqiu 表示具体连接的数据库\r\n\r\nuser@unix(/path/to/socket)/dbname?charset=utf8\r\nuser:password@tcp(localhost:5555)/dbname?charset=utf8\r\nuser:password@/dbname\r\nuser:password@tcp([de:ad:be:ef::ca:fe]:80)/dbname\r\n\r\n上面是open里面一共支持的书写格式，包含了tcp和socket通信两种\r\n\r\n<code>stmt, err := db.Prepare("SELECT * FROM list where id = ?")</code>表示预编译\r\nrows, err := stmt.Query(1) 执行预编译，获取对应的结果集，之前问号缺少的参数传递过去，也可以直接db.Query获取对应的结果集\r\nExec函数执行Prepare准备好的sql，传入参数执行update/insert等操作，返回Result数据\r\n\r\nQuery函数执行Prepare准备好的sql，传入需要的参数执行select操作，返回Rows结果集\r\nfor rows.Next() {\r\nvar id int\r\nvar times int\r\nvar symbol string\r\nvar item string\r\nvar value string\r\nrows.Scan(&amp;id, &amp;symbol, &amp;item, &amp;value, &amp;times)\r\nfmt.Println(symbol)\r\n}\r\n\r\nrows.Columns()  ： 返回 查询出的列字段名,\r\n<pre>func (nt *<a href="http://127.0.0.1:8080/pkg/github.com/go-sql-driver/mysql/#NullTime">NullTime</a>) Scan(value interface{}) (err <a href="http://127.0.0.1:8080/pkg/builtin/#error">error</a>)  这里是官方手册里面的定义，必须传入一个interface类型的变量</pre>', 'go入门知识', '', 'publish', 'open', 'open', '', 'go%e5%85%a5%e9%97%a8%e7%9f%a5%e8%af%86', '', '', '2015-05-23 11:16:13', '2015-05-23 11:16:13', '', 0, 'http://unasm.sinaapp.com/?p=253', 0, 'post', '', 0),
(254, 1, '2015-05-22 01:53:20', '2015-05-22 01:53:20', 'go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build 编译包和它的依赖关系\r\ngo get url 下载，安装包和它的依赖', 'go入门知识', '', 'inherit', 'open', 'open', '', '253-revision-v1', '', '', '2015-05-22 01:53:20', '2015-05-22 01:53:20', '', 253, 'http://unasm.sinaapp.com/?p=254', 0, 'revision', '', 0),
(255, 1, '2015-05-22 05:04:00', '2015-05-22 05:04:00', 'go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\ngo build 编译包和它的依赖关系\ngo get url 下载，安装包和它的依赖\n\n连接数据库：\n<code>\ndb, err := sql.Open("mysql", "root:password@tcp(127.0.0.1:3306)/xueqiu")\n</code>\n上面第二个一次是用户名：密码,tcp(127.0.0.1:3306)表示连接的方式和对应的ip，xueqiu 表示具体连接的数据库\n<code>stmt, err := db.Prepare("SELECT * FROM list where id = ?")</code>表示预编译\nrows, err := stmt.Query(1) 执行预编译，获取对应的结果集，之前问号缺少的参数传递过去，也可以直接db.Query获取对应的结果集\nExec函数执行Prepare准备好的sql，传入参数执行update/insert等操作，返回Result数据\n\nQuery函数执行Prepare准备好的sql，传入需要的参数执行select操作，返回Rows结果集\n  for rows.Next() {\n       var id int\n       var times int\n       var symbol string\n       var item string                                                           \n       var value string\n       rows.Scan(&id, &symbol, &item, &value, &times)\n  3         fmt.Println(symbol)\n  4         \n  5     }   \n', 'go入门知识', '', 'inherit', 'open', 'open', '', '253-autosave-v1', '', '', '2015-05-22 05:04:00', '2015-05-22 05:04:00', '', 253, 'http://unasm.sinaapp.com/?p=255', 0, 'revision', '', 0),
(256, 1, '2015-05-22 05:00:30', '2015-05-22 05:00:30', 'go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build 编译包和它的依赖关系\r\ngo get url 下载，安装包和它的依赖\r\n\r\n连接数据库：\r\n<code>\r\n db, err := sql.Open("mysql", "root:password@tcp(127.0.0.1:3306)/xueqiu") \r\n</code>\r\n上面第二个一次是用户名：密码,tcp(127.0.0.1:3306)表示连接的方式和对应的ip，xueqiu 表示具体连接的数据库\r\n  <code>stmt, err := db.Prepare("SELECT * FROM  list where id = ?")</code>表示预编译\r\n<cod> rows, err := stmt.Query(1) </code> 执行预编译，获取对应的结果集，之前问号缺少的参数传递过去', 'go入门知识', '', 'inherit', 'open', 'open', '', '253-revision-v1', '', '', '2015-05-22 05:00:30', '2015-05-22 05:00:30', '', 253, 'http://unasm.sinaapp.com/?p=256', 0, 'revision', '', 0),
(257, 1, '2015-05-22 05:01:58', '2015-05-22 05:01:58', 'go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build 编译包和它的依赖关系\r\ngo get url 下载，安装包和它的依赖\r\n\r\n连接数据库：\r\n<code>\r\ndb, err := sql.Open("mysql", "root:password@tcp(127.0.0.1:3306)/xueqiu")\r\n</code>\r\n上面第二个一次是用户名：密码,tcp(127.0.0.1:3306)表示连接的方式和对应的ip，xueqiu 表示具体连接的数据库\r\n<code>stmt, err := db.Prepare("SELECT * FROM list where id = ?")</code>表示预编译\r\nrows, err := stmt.Query(1) 执行预编译，获取对应的结果集，之前问号缺少的参数传递过去，也可以直接db.Query获取对应的结果集\r\nExec函数执行Prepare准备好的sql，传入参数执行update/insert等操作，返回Result数据\r\n\r\nQuery函数执行Prepare准备好的sql，传入需要的参数执行select操作，返回Rows结果集', 'go入门知识', '', 'inherit', 'open', 'open', '', '253-revision-v1', '', '', '2015-05-22 05:01:58', '2015-05-22 05:01:58', '', 253, 'http://unasm.sinaapp.com/?p=257', 0, 'revision', '', 0),
(258, 1, '2015-05-22 05:04:19', '2015-05-22 05:04:19', 'go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build 编译包和它的依赖关系\r\ngo get url 下载，安装包和它的依赖\r\n\r\n连接数据库：\r\n<code>\r\ndb, err := sql.Open("mysql", "root:password@tcp(127.0.0.1:3306)/xueqiu")\r\n</code>\r\n上面第二个一次是用户名：密码,tcp(127.0.0.1:3306)表示连接的方式和对应的ip，xueqiu 表示具体连接的数据库\r\n<code>stmt, err := db.Prepare("SELECT * FROM list where id = ?")</code>表示预编译\r\nrows, err := stmt.Query(1) 执行预编译，获取对应的结果集，之前问号缺少的参数传递过去，也可以直接db.Query获取对应的结果集\r\nExec函数执行Prepare准备好的sql，传入参数执行update/insert等操作，返回Result数据\r\n\r\nQuery函数执行Prepare准备好的sql，传入需要的参数执行select操作，返回Rows结果集\r\n  for rows.Next() {\r\n       var id int\r\n       var times int\r\n       var symbol string\r\n       var item string                                                           \r\n       var value string\r\n       rows.Scan(&id, &symbol, &item, &value, &times)\r\n       fmt.Println(symbol)       \r\n  }   \r\n', 'go入门知识', '', 'inherit', 'open', 'open', '', '253-revision-v1', '', '', '2015-05-22 05:04:19', '2015-05-22 05:04:19', '', 253, 'http://unasm.sinaapp.com/?p=258', 0, 'revision', '', 0),
(259, 1, '2015-05-22 07:38:55', '2015-05-22 07:38:55', 'go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build 编译包和它的依赖关系\r\ngo get url 下载，安装包和它的依赖\r\n\r\n连接数据库：\r\n<code>\r\ndb, err := sql.Open("mysql", "root:password@tcp(127.0.0.1:3306)/xueqiu")\r\n</code>\r\n上面第二个一次是用户名：密码,tcp(127.0.0.1:3306)表示连接的方式和对应的ip，xueqiu 表示具体连接的数据库\r\n\r\nuser@unix(/path/to/socket)/dbname?charset=utf8\r\nuser:password@tcp(localhost:5555)/dbname?charset=utf8\r\nuser:password@/dbname\r\nuser:password@tcp([de:ad:be:ef::ca:fe]:80)/dbname\r\n\r\n上面是open里面一共支持的书写格式，包含了tcp和socket通信两种\r\n\r\n<code>stmt, err := db.Prepare("SELECT * FROM list where id = ?")</code>表示预编译\r\nrows, err := stmt.Query(1) 执行预编译，获取对应的结果集，之前问号缺少的参数传递过去，也可以直接db.Query获取对应的结果集\r\nExec函数执行Prepare准备好的sql，传入参数执行update/insert等操作，返回Result数据\r\n\r\nQuery函数执行Prepare准备好的sql，传入需要的参数执行select操作，返回Rows结果集\r\nfor rows.Next() {\r\nvar id int\r\nvar times int\r\nvar symbol string\r\nvar item string\r\nvar value string\r\nrows.Scan(&amp;id, &amp;symbol, &amp;item, &amp;value, &amp;times)\r\nfmt.Println(symbol)\r\n}', 'go入门知识', '', 'inherit', 'open', 'open', '', '253-revision-v1', '', '', '2015-05-22 07:38:55', '2015-05-22 07:38:55', '', 253, 'http://unasm.sinaapp.com/?p=259', 0, 'revision', '', 0),
(260, 1, '2015-05-23 10:56:17', '2015-05-23 10:56:17', 'go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build 编译包和它的依赖关系\r\ngo get url 下载，安装包和它的依赖\r\n\r\n连接数据库：\r\n<code>\r\ndb, err := sql.Open("mysql", "root:password@tcp(127.0.0.1:3306)/xueqiu")\r\n</code>\r\n上面第二个一次是用户名：密码,tcp(127.0.0.1:3306)表示连接的方式和对应的ip，xueqiu 表示具体连接的数据库\r\n\r\nuser@unix(/path/to/socket)/dbname?charset=utf8\r\nuser:password@tcp(localhost:5555)/dbname?charset=utf8\r\nuser:password@/dbname\r\nuser:password@tcp([de:ad:be:ef::ca:fe]:80)/dbname\r\n\r\n上面是open里面一共支持的书写格式，包含了tcp和socket通信两种\r\n\r\n<code>stmt, err := db.Prepare("SELECT * FROM list where id = ?")</code>表示预编译\r\nrows, err := stmt.Query(1) 执行预编译，获取对应的结果集，之前问号缺少的参数传递过去，也可以直接db.Query获取对应的结果集\r\nExec函数执行Prepare准备好的sql，传入参数执行update/insert等操作，返回Result数据\r\n\r\nQuery函数执行Prepare准备好的sql，传入需要的参数执行select操作，返回Rows结果集\r\nfor rows.Next() {\r\nvar id int\r\nvar times int\r\nvar symbol string\r\nvar item string\r\nvar value string\r\nrows.Scan(&amp;id, &amp;symbol, &amp;item, &amp;value, &amp;times)\r\nfmt.Println(symbol)\r\n}\r\n\r\nrows.Columns()  ： 返回 查询出的列字段名', 'go入门知识', '', 'inherit', 'open', 'open', '', '253-revision-v1', '', '', '2015-05-23 10:56:17', '2015-05-23 10:56:17', '', 253, 'http://unasm.sinaapp.com/?p=260', 0, 'revision', '', 0),
(261, 1, '2015-05-23 11:15:29', '2015-05-23 11:15:29', 'go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build 编译包和它的依赖关系\r\ngo get url 下载，安装包和它的依赖\r\n\r\n连接数据库：\r\n<code>\r\ndb, err := sql.Open("mysql", "root:password@tcp(127.0.0.1:3306)/xueqiu")\r\n</code>\r\n上面第二个一次是用户名：密码,tcp(127.0.0.1:3306)表示连接的方式和对应的ip，xueqiu 表示具体连接的数据库\r\n\r\nuser@unix(/path/to/socket)/dbname?charset=utf8\r\nuser:password@tcp(localhost:5555)/dbname?charset=utf8\r\nuser:password@/dbname\r\nuser:password@tcp([de:ad:be:ef::ca:fe]:80)/dbname\r\n\r\n上面是open里面一共支持的书写格式，包含了tcp和socket通信两种\r\n\r\n<code>stmt, err := db.Prepare("SELECT * FROM list where id = ?")</code>表示预编译\r\nrows, err := stmt.Query(1) 执行预编译，获取对应的结果集，之前问号缺少的参数传递过去，也可以直接db.Query获取对应的结果集\r\nExec函数执行Prepare准备好的sql，传入参数执行update/insert等操作，返回Result数据\r\n\r\nQuery函数执行Prepare准备好的sql，传入需要的参数执行select操作，返回Rows结果集\r\nfor rows.Next() {\r\nvar id int\r\nvar times int\r\nvar symbol string\r\nvar item string\r\nvar value string\r\nrows.Scan(&amp;id, &amp;symbol, &amp;item, &amp;value, &amp;times)\r\nfmt.Println(symbol)\r\n}\r\n\r\nrows.Columns()  ： 返回 查询出的列字段名,\r\n<pre>func (nt *<a href="http://127.0.0.1:8080/pkg/github.com/go-sql-driver/mysql/#NullTime">NullTime</a>) Scan(value interface{}) (err <a href="http://127.0.0.1:8080/pkg/builtin/#error">error</a>)  这里是官方手册里面的定义，必须传入一个interface类型的变量</pre>', 'go入门知识', '', 'inherit', 'open', 'open', '', '253-revision-v1', '', '', '2015-05-23 11:15:29', '2015-05-23 11:15:29', '', 253, 'http://unasm.sinaapp.com/?p=261', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(262, 1, '2015-05-25 02:33:24', '2015-05-25 02:33:24', '<p class="p1">把服务端与客户端的连接从HTTP/1.1 转化到WebSocket，这需要用到<a href="http://tools.ietf.org/html/rfc2616#section-14.42"><span class="s2">protocol_switch</span></a>  这个指令。</p>\r\n<p class="p4"><span class="s1">然而“Upgrade” 是一个hop-by-hop（逐个跳转扩展头），它是不可能通过代理服务器的，虽然客户端或许可以使用CONNECT方法避开这个问题，但是这不适用于反向代理服务器，因为客户端根本不会意识到这个是代理服务器，所以需要一种特殊的方式。</span></p>\r\n<p class="p4"><span class="s1">从1.3.13版，nginx实现了一种特殊的机制，只要代理服务器返回101（转换协议）就允许代理服务器和客户端之间建立一个通道，并且客户端会请求通过在请求中添加Upgrade 头来转换协议。</span></p>\r\n<p class="p4"><span class="s1">上文提到，包含了“Upgrade”和”Connection”的hop-by-hop 头是不能传到代理服务器的，因此为了通知服务器客户端想要将协议转换到WebSocket，这些头必须显式的传递。</span></p>\r\n<p class="p4"><span class="s1">location /chat/ {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_pass http://backend;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_http_version 1.1;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_set_header Connection "upgrade";</span></p>\r\n<p class="p4"><span class="s1">}</span></p>\r\n<p class="p4"><span class="s1">一个发往服务端的的header头中Connection的值 取决于于客户端请求头里面的Upgrade的有无。</span></p>\r\n<p class="p4"><span class="s1">http {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>map $http_upgrade $connection_upgrade {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>default upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>''''<span class="Apple-converted-space">      </span>close;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>}</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>server {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>...</span></p>\r\n<p class="p1"><span class="s1">        listen <span class="Apple-converted-space">      </span>8070;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>location /chat/ {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_pass http://backend;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_http_version 1.1;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_set_header Connection $connection_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>}</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>}</span></p>\r\n<p class="p4">此时，对应的服务端代码为</p>\r\n<p class="p2"><span class="s1">/*************************************************************************</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">  </span>* File Name :<span class="Apple-converted-space">  </span>node.js</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">  </span>* Author<span class="Apple-converted-space">  </span>:<span class="Apple-converted-space">      </span>unasm</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">  </span>* Mail : <span class="Apple-converted-space">        </span>unasm@sina.cn</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">  </span>* Last_Modified: 2015-05-25 09:56:26</span></p>\r\n<p class="p2"><span class="s1"> ************************************************************************/</span></p>\r\n<p class="p2"><span class="s1">console.log("Server started");</span></p>\r\n<p class="p2"><span class="s1">var connects = new Array();</span></p>\r\n<p class="p2"><span class="s1">var WebSocketServer = require(''ws'').Server</span></p>\r\n<p class="p2"><span class="s1">, wss = new WebSocketServer({port: 8010});</span></p>\r\n<p class="p2"><span class="s1">console.log("complete");</span></p>\r\n<p class="p2"><span class="s1">wss.on(''connection'', function(ws) {</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">        </span>connects.push(ws);</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">        </span>ws.on(''message'', function(msg) {</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                </span>ws.send(msg);</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                </span>for(var i = 0,len = connects.length; i &lt; len;i++){</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                        </span>if(connects[i] !== ws){</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                                </span>connects[i].send(msg);</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                        </span>}</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                </span>}</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">        </span>});</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">        </span>console.log("connection");</span></p>\r\n<p class="p2"><span class="s1">});</span></p>\r\n<p class="p4">客户端html代码为：</p>\r\n&nbsp;\r\n<p class="p1"><span class="s1">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>&lt;script type="text/javascript"&gt;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>var sock = null;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>var wsuri = "ws://127.0.0.1:8070/chat/";</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>window.onload = function() {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>console.log("onload");</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>sock = new WebSocket(wsuri);</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>sock.onopen = function() {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                        </span>console.log("connected to " + wsuri);</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>}</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>sock.onclose = function(e) {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                        </span>console.log("connection closed (" + e.code + ")");</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>}</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>sock.onmessage = function(e) {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                        </span>console.log("message received: " + e.data);</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>}</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>};</span></p>\r\n<p class="p1"><span class="s1">function send() {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>var msg = document.getElementById(''message'').value;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>sock.send(msg);</span></p>\r\n<p class="p1"><span class="s1">};</span></p>\r\n<p class="p1"><span class="s1">&lt;/script&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;h1&gt;WebSocket Echo Test&lt;/h1&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;form&gt;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>&lt;p&gt;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>Message: &lt;input id="message" type="text" value="Hello, world!"&gt;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>&lt;/p&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;/form&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;button onclick="send();"&gt;Send Message&lt;/button&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;/body&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;/html&gt;</span></p>\r\n&nbsp;\r\n<p class="p4">原文参考连接http://nginx.org/en/docs/http/websocket.html?_ga=1.166503037.270828851.1426754420</p>', 'nginx 作为websocket代理服务器（译）', '', 'inherit', 'open', 'open', '', '216-revision-v1', '', '', '2015-05-25 02:33:24', '2015-05-25 02:33:24', '', 216, 'http://unasm.sinaapp.com/?p=262', 0, 'revision', '', 0),
(263, 1, '2015-05-25 02:34:18', '2015-05-25 02:34:18', '<p class="p1">把服务端与客户端的连接从HTTP/1.1 转化到WebSocket，这需要用到<a href="http://tools.ietf.org/html/rfc2616#section-14.42"><span class="s2">protocol_switch</span></a>  这个指令。</p>\r\n<p class="p4"><span class="s1">然而“Upgrade” 是一个hop-by-hop（逐个跳转扩展头），它是不可能通过代理服务器的，虽然客户端或许可以使用CONNECT方法避开这个问题，但是这不适用于反向代理服务器，因为客户端根本不会意识到这个是代理服务器，所以需要一种特殊的方式。</span></p>\r\n<p class="p4"><span class="s1">从1.3.13版，nginx实现了一种特殊的机制，只要代理服务器返回101（转换协议）就允许代理服务器和客户端之间建立一个通道，并且客户端会请求通过在请求中添加Upgrade 头来转换协议。</span></p>\r\n<p class="p4"><span class="s1">上文提到，包含了“Upgrade”和”Connection”的hop-by-hop 头是不能传到代理服务器的，因此为了通知服务器客户端想要将协议转换到WebSocket，这些头必须显式的传递。</span></p>\r\n<p class="p4"><span class="s1">location /chat/ {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_pass http://backend;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_http_version 1.1;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>proxy_set_header Connection "upgrade";</span></p>\r\n<p class="p4"><span class="s1">}</span></p>\r\n<p class="p4"><span class="s1">一个发往服务端的的header头中Connection的值 取决于于客户端请求头里面的Upgrade的有无。</span></p>\r\n<p class="p4"><span class="s1">http {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>map $http_upgrade $connection_upgrade {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>default upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>''''<span class="Apple-converted-space">      </span>close;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>}</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>server {</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>...</span></p>\r\n<p class="p1"><span class="s1">        listen <span class="Apple-converted-space">      </span>8070;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>location /chat/ {</span></p>\r\n<p class="p4">            proxy_pass http://127.0.0.1:8010;</p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_http_version 1.1;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">            </span>proxy_set_header Connection $connection_upgrade;</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">        </span>}</span></p>\r\n<p class="p4"><span class="s1"><span class="Apple-converted-space">    </span>}</span></p>\r\n<p class="p4">此时，对应的服务端代码为,服务端，需要安装nodejs，并且node node.js 运行起来，坚挺8010端口</p>\r\n<p class="p2"><span class="s1">/*************************************************************************</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">  </span>* File Name :<span class="Apple-converted-space">  </span>node.js</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">  </span>* Author<span class="Apple-converted-space">  </span>:<span class="Apple-converted-space">      </span>unasm</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">  </span>* Mail : <span class="Apple-converted-space">        </span>unasm@sina.cn</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">  </span>* Last_Modified: 2015-05-25 09:56:26</span></p>\r\n<p class="p2"><span class="s1"> ************************************************************************/</span></p>\r\n<p class="p2"><span class="s1">console.log("Server started");</span></p>\r\n<p class="p2"><span class="s1">var connects = new Array();</span></p>\r\n<p class="p2"><span class="s1">var WebSocketServer = require(''ws'').Server</span></p>\r\n<p class="p2"><span class="s1">, wss = new WebSocketServer({port: 8010});</span></p>\r\n<p class="p2"><span class="s1">console.log("complete");</span></p>\r\n<p class="p2"><span class="s1">wss.on(''connection'', function(ws) {</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">        </span>connects.push(ws);</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">        </span>ws.on(''message'', function(msg) {</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                </span>ws.send(msg);</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                </span>for(var i = 0,len = connects.length; i &lt; len;i++){</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                        </span>if(connects[i] !== ws){</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                                </span>connects[i].send(msg);</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                        </span>}</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">                </span>}</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">        </span>});</span></p>\r\n<p class="p2"><span class="s1"><span class="Apple-converted-space">        </span>console.log("connection");</span></p>\r\n<p class="p2"><span class="s1">});</span></p>\r\n<p class="p4">客户端html代码为：</p>\r\n&nbsp;\r\n<p class="p1"><span class="s1">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>&lt;script type="text/javascript"&gt;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>var sock = null;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>var wsuri = "ws://127.0.0.1:8070/chat/";</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>window.onload = function() {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>console.log("onload");</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>sock = new WebSocket(wsuri);</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>sock.onopen = function() {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                        </span>console.log("connected to " + wsuri);</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>}</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>sock.onclose = function(e) {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                        </span>console.log("connection closed (" + e.code + ")");</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>}</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>sock.onmessage = function(e) {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                        </span>console.log("message received: " + e.data);</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>}</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>};</span></p>\r\n<p class="p1"><span class="s1">function send() {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>var msg = document.getElementById(''message'').value;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>sock.send(msg);</span></p>\r\n<p class="p1"><span class="s1">};</span></p>\r\n<p class="p1"><span class="s1">&lt;/script&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;h1&gt;WebSocket Echo Test&lt;/h1&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;form&gt;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>&lt;p&gt;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>Message: &lt;input id="message" type="text" value="Hello, world!"&gt;</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>&lt;/p&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;/form&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;button onclick="send();"&gt;Send Message&lt;/button&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;/body&gt;</span></p>\r\n<p class="p1"><span class="s1">&lt;/html&gt;</span></p>\r\n&nbsp;\r\n<p class="p4">原文参考连接http://nginx.org/en/docs/http/websocket.html?_ga=1.166503037.270828851.1426754420</p>', 'nginx 作为websocket代理服务器（译）', '', 'inherit', 'open', 'open', '', '216-revision-v1', '', '', '2015-05-25 02:34:18', '2015-05-25 02:34:18', '', 216, 'http://unasm.sinaapp.com/?p=263', 0, 'revision', '', 0),
(264, 1, '2015-05-26 00:57:24', '2015-05-26 00:57:24', '<pre>\r\npackage main\r\n\r\nimport (\r\n	"fmt"\r\n	//"model"\r\n	"net/http"\r\n	//	"reflect"\r\n	//"code.google.com/p/go.net/websocket"\r\n	"github.com/gorilla/websocket"\r\n	"io"\r\n	"log"\r\n	"time"\r\n)\r\n\r\n//每刷新一次，就会建立一个连接，必须要根据用户的ip等，限制连接的创建\r\nvar conn_id int\r\n\r\n//正常情况下的http请求以及相应\r\nfunc index(w http.ResponseWriter, r *http.Request) {\r\n	r.ParseForm()\r\n	fmt.Println(r.Form)\r\n	fmt.Println("yes ,welcome !")\r\n	fmt.Fprintf(w, "Hello,world\r\n")\r\n}\r\n\r\n//第一种websocket的方式\r\nfunc socket(w http.ResponseWriter, r *http.Request) {\r\n	var upgrader = websocket.Upgrader{\r\n		ReadBufferSize:  1024,\r\n		WriteBufferSize: 1024,\r\n		//不再检查请求源\r\n		CheckOrigin: func(r *http.Request) bool {\r\n			return true\r\n		},\r\n	}\r\n	//将连接从http升级成websocket协议\r\n	conn, err := upgrader.Upgrade(w, r, nil)\r\n\r\n	if err != nil {\r\n		log.Println("not websocket: ", err)\r\n		return\r\n	}\r\n	for {\r\n		//读取数据，\r\n		msg, p, err := conn.ReadMessage()\r\n		fmt.Println(msg)\r\n		fmt.Println(p)\r\n		fmt.Println(err)\r\n		if err != nil {\r\n			return\r\n		}\r\n		//返回数据，\r\n		if err = conn.WriteMessage(msg, p); err != nil {\r\n			return\r\n		}\r\n	}\r\n}\r\n\r\n//第二种读取socket信息的方法\r\nfunc socket2(w http.ResponseWriter, r *http.Request) {\r\n	var upgrader = websocket.Upgrader{\r\n		// ReadBufferSize and WriteBufferSize specify I/O buffer sizes. If a buffer\r\n		// size is zero, then a default value of 4096 is used. The I/O buffer sizes\r\n		// do not limit the size of the messages that can be sent or received.\r\n		ReadBufferSize:  1024,\r\n		WriteBufferSize: 1024,\r\n\r\n		//握手的超时时间,单位是ms\r\n		HandshakeTimeout: 2000,\r\n		CheckOrigin: func(r *http.Request) bool {\r\n			return true\r\n		},\r\n	}\r\n	//将连接从http升级成websocket协议\r\n	conn, err := upgrader.Upgrade(w, r, nil)\r\n	//精确到纳秒 ， add 是time对象的方法，time.Now()产生一个time对象,time.Now()是此时的时间time对象，Add增加1分钟\r\n	conn.SetWriteDeadline(time.Now().Add(60000000000))\r\n	//设置读写的过期时间\r\n	conn.SetReadDeadline(time.Now().Add(60000000000))\r\n	fmt.Println(conn_id)\r\n	if err != nil {\r\n		log.Println("not websocket: ", err)\r\n		return\r\n	}\r\n	conn_id++\r\n	for {\r\n		fmt.Println(conn_id)\r\n		//读取数据，msg是类型，1,2 ，数据的类型，字符还是二进制\r\n		//p 是内容，err 是错误\r\n		msg, p, err := conn.NextReader()\r\n		if err != nil {\r\n			log.Println("next Reader ", err)\r\n			return\r\n		}\r\n		//返回数据，\r\n\r\n		www, err := conn.NextWriter(msg)\r\n		if err != nil {\r\n			log.Println("next Writer ", err)\r\n			return\r\n		}\r\n		if _, err := io.Copy(www, p); err != nil {\r\n			log.Println("copy ", err)\r\n			return\r\n		}\r\n\r\n		if err := www.Close(); err != nil {\r\n			return\r\n		}\r\n	}\r\n	//关闭conn\r\n	defer conn.Close()\r\n}\r\n\r\n//路由处理\r\nfunc route() {\r\n	http.HandleFunc("/chat/", socket2)\r\n	//http.HandleFunc("/chat/", socket)\r\n	//对路由为/的注册index函数\r\n	http.HandleFunc("/", index)\r\n}\r\n\r\n//检查错误，输出错误\r\nfunc checkErr(err error) {\r\n	if err != nil {\r\n		panic(err)\r\n	}\r\n}\r\n\r\n//就像c语言一样，从main开始执行\r\nfunc main() {\r\n	route()\r\n	// 监听 8010端口\r\n	if err := http.ListenAndServe(":8010", nil); err != nil {\r\n		conn_id = 0\r\n		log.Fatal("Listen and Server : ", err)\r\n	}\r\n}\r\n\r\n</pre>', 'golang websocket 编程 <基础篇>', '', 'publish', 'open', 'open', '', 'golang-websocket-%e7%bc%96%e7%a8%8b', '', '', '2015-07-14 05:54:53', '2015-07-14 05:54:53', '', 0, 'http://unasm.sinaapp.com/?p=264', 0, 'post', '', 0),
(265, 1, '2015-05-26 00:57:24', '2015-05-26 00:57:24', '<pre>\r\npackage main\r\n\r\nimport (\r\n	"fmt"\r\n	//"model"\r\n	"net/http"\r\n	//	"reflect"\r\n	//"code.google.com/p/go.net/websocket"\r\n	"github.com/gorilla/websocket"\r\n	"io"\r\n	"log"\r\n	"time"\r\n)\r\n\r\n//每刷新一次，就会建立一个连接，必须要根据用户的ip等，限制连接的创建\r\nvar conn_id int\r\n\r\n//正常情况下的http请求以及相应\r\nfunc index(w http.ResponseWriter, r *http.Request) {\r\n	r.ParseForm()\r\n	fmt.Println(r.Form)\r\n	fmt.Println("yes ,welcome !")\r\n	fmt.Fprintf(w, "Hello,world\r\n")\r\n}\r\n\r\n//第一种websocket的方式\r\nfunc socket(w http.ResponseWriter, r *http.Request) {\r\n	var upgrader = websocket.Upgrader{\r\n		ReadBufferSize:  1024,\r\n		WriteBufferSize: 1024,\r\n		//不再检查请求源\r\n		CheckOrigin: func(r *http.Request) bool {\r\n			return true\r\n		},\r\n	}\r\n	//将连接从http升级成websocket协议\r\n	conn, err := upgrader.Upgrade(w, r, nil)\r\n\r\n	if err != nil {\r\n		log.Println("not websocket: ", err)\r\n		return\r\n	}\r\n	for {\r\n		//读取数据，\r\n		msg, p, err := conn.ReadMessage()\r\n		fmt.Println(msg)\r\n		fmt.Println(p)\r\n		fmt.Println(err)\r\n		if err != nil {\r\n			return\r\n		}\r\n		//返回数据，\r\n		if err = conn.WriteMessage(msg, p); err != nil {\r\n			return\r\n		}\r\n	}\r\n}\r\n\r\n//第二种读取socket信息的方法\r\nfunc socket2(w http.ResponseWriter, r *http.Request) {\r\n	var upgrader = websocket.Upgrader{\r\n		// ReadBufferSize and WriteBufferSize specify I/O buffer sizes. If a buffer\r\n		// size is zero, then a default value of 4096 is used. The I/O buffer sizes\r\n		// do not limit the size of the messages that can be sent or received.\r\n		ReadBufferSize:  1024,\r\n		WriteBufferSize: 1024,\r\n\r\n		//握手的超时时间,单位是ms\r\n		HandshakeTimeout: 2000,\r\n		CheckOrigin: func(r *http.Request) bool {\r\n			return true\r\n		},\r\n	}\r\n	//将连接从http升级成websocket协议\r\n	conn, err := upgrader.Upgrade(w, r, nil)\r\n	//精确到纳秒 ， add 是time对象的方法，time.Now()产生一个time对象,time.Now()是此时的时间time对象，Add增加1分钟\r\n	conn.SetWriteDeadline(time.Now().Add(60000000000))\r\n	//设置读写的过期时间\r\n	conn.SetReadDeadline(time.Now().Add(60000000000))\r\n	fmt.Println(conn_id)\r\n	if err != nil {\r\n		log.Println("not websocket: ", err)\r\n		return\r\n	}\r\n	conn_id++\r\n	for {\r\n		fmt.Println(conn_id)\r\n		//读取数据，msg是类型，1,2 ，数据的类型，字符还是二进制\r\n		//p 是内容，err 是错误\r\n		msg, p, err := conn.NextReader()\r\n		if err != nil {\r\n			log.Println("next Reader ", err)\r\n			return\r\n		}\r\n		//返回数据，\r\n\r\n		www, err := conn.NextWriter(msg)\r\n		if err != nil {\r\n			log.Println("next Writer ", err)\r\n			return\r\n		}\r\n		if _, err := io.Copy(www, p); err != nil {\r\n			log.Println("copy ", err)\r\n			return\r\n		}\r\n\r\n		if err := www.Close(); err != nil {\r\n			return\r\n		}\r\n	}\r\n	//关闭conn\r\n	defer conn.Close()\r\n}\r\n\r\n//路由处理\r\nfunc route() {\r\n	http.HandleFunc("/chat/", socket2)\r\n	//http.HandleFunc("/chat/", socket)\r\n	//对路由为/的注册index函数\r\n	http.HandleFunc("/", index)\r\n}\r\n\r\n//检查错误，输出错误\r\nfunc checkErr(err error) {\r\n	if err != nil {\r\n		panic(err)\r\n	}\r\n}\r\n\r\n//就像c语言一样，从main开始执行\r\nfunc main() {\r\n	route()\r\n	// 监听 8010端口\r\n	if err := http.ListenAndServe(":8010", nil); err != nil {\r\n		conn_id = 0\r\n		log.Fatal("Listen and Server : ", err)\r\n	}\r\n}\r\n\r\n</pre>', 'golang websocket 编程 <基础篇>', '', 'inherit', 'open', 'open', '', '264-revision-v1', '', '', '2015-05-26 00:57:24', '2015-05-26 00:57:24', '', 264, 'http://unasm.sinaapp.com/?p=265', 0, 'revision', '', 0),
(266, 1, '2015-05-26 06:41:06', '2015-05-26 06:41:06', '<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class="comment">   // Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class="comment"> For client requests an empty string means GET.\r\n</span>   //用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a></pre>\r\n<pre>   //用户请求的url\r\n   URL *<a href="http://127.0.0.1:8080/pkg/net/url/">url</a>.<a href="http://127.0.0.1:8080/pkg/net/url/#URL">URL\r\n</a>   用户访问所用的协议，"HTTP/1.0" 或者是  "HTTP/1.1"\r\n   Proto\r\n   /* 用户的http请求头里面的信息，例： \r\n   User-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\n   Accept-Encoding:[gzip,deflate,sdch] \r\n   Accept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\n   Ra-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\n   Connection:[keep-alive] \r\n   Accept:[*/*]\r\n   */\r\n   Header Header</pre>\r\n<pre>   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href="http://127.0.0.1:8080/pkg/io/">io</a>.<a href="http://127.0.0.1:8080/pkg/io/#ReadCloser">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>   //主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //form包含了url和post或者put中的变量值，该变量只有在ParseForm执行过之后才可以用\r\n   Form url.Values \r\n   \r\n   //该变量包含post或者put中的参数，该变量只有在ParseForm执行过之后才可以用\r\n   PostForm url.Values\r\n</pre>\r\n<pre>    // MultipartForm 是解析的urltipart form得到的，包含了文件的上传，只有在ParseMultipartForm执行之后，才可以使用</pre>\r\n<pre>    MultipartForm *<a href="http://127.0.0.1:8080/pkg/mime/multipart/">multipart</a>.<a href="http://127.0.0.1:8080/pkg/mime/multipart/#Form">Form\r\n </a>   \r\n\r\n    //指header中请求体之外的信息，最初header 的键值值包含键值为nil，当函数处理完body之后，trailer 就会包含非nik值的键值对。</pre>\r\n<pre>    Trailer <a href="http://127.0.0.1:8080/pkg/net/http/#Header">Header</a>\r\n</pre>\r\n<pre>    //RemoteAddr允许http服务器记录发送请求的地址，通常用于登陆\r\n    RemoteAddr <a href="http://127.0.0.1:8080/pkg/builtin/#string">string\r\n</a>\r\n    //不详\r\n    RequestURI\r\n \r\n    //TLS 允许http服务器和其他的软件记录接受请求的时候的TLS连接的信息，TLS在有函数句柄执行之前都是有效的，之后该值就一直是nil，该值通常被http客户端忽略</pre>\r\n<pre>    TLS *<a href="http://127.0.0.1:8080/pkg/crypto/tls/">tls</a>.<a href="http://127.0.0.1:8080/pkg/crypto/tls/#ConnectionState">ConnectionState</a></pre>\r\n<pre>}</pre>', 'golang http包request对象    属性值', '', 'publish', 'open', 'open', '', 'golang-http%e5%8c%85request%e5%af%b9%e8%b1%a1', '', '', '2015-07-14 05:54:38', '2015-07-14 05:54:38', '', 0, 'http://unasm.sinaapp.com/?p=266', 0, 'post', '', 0),
(267, 1, '2015-05-26 06:41:06', '2015-05-26 06:41:06', '<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class="comment">// Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class="comment"> For client requests an empty string means GET.\r\n</span>//用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href="http://127.0.0.1:8080/pkg/builtin/#string">string\r\n </a> \r\n   //用户请求的url\r\n   URL *<a href="http://127.0.0.1:8080/pkg/net/url/">url</a>.<a href="http://127.0.0.1:8080/pkg/net/url/#URL">URL\r\n</a>   用户访问所用的协议，"HTTP/1.0" 或者是  "HTTP/1.1"\r\n   Proto\r\n   //用户的http请求头里面的信息，例： \r\nUser-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\nAccept-Encoding:[gzip,deflate,sdch] \r\nAccept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\nRa-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\nConnection:[keep-alive] \r\nAccept:[*/*]</pre>\r\n<pre>   Header Header \r\n\r\n   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href="http://127.0.0.1:8080/pkg/io/">io</a>.<a href="http://127.0.0.1:8080/pkg/io/#ReadCloser">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>   //主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //\r\n   Form url.Values</pre>\r\n<pre>}</pre>', 'golang http包request对象', '', 'inherit', 'open', 'open', '', '266-revision-v1', '', '', '2015-05-26 06:41:06', '2015-05-26 06:41:06', '', 266, 'http://unasm.sinaapp.com/?p=267', 0, 'revision', '', 0),
(269, 1, '2015-05-26 06:51:38', '2015-05-26 06:51:38', '<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class="comment">// Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class="comment"> For client requests an empty string means GET.\r\n</span>//用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href="http://127.0.0.1:8080/pkg/builtin/#string">string\r\n </a> \r\n   //用户请求的url\r\n   URL *<a href="http://127.0.0.1:8080/pkg/net/url/">url</a>.<a href="http://127.0.0.1:8080/pkg/net/url/#URL">URL\r\n</a>   用户访问所用的协议，"HTTP/1.0" 或者是  "HTTP/1.1"\r\n   Proto\r\n   //用户的http请求头里面的信息，例： \r\nUser-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\nAccept-Encoding:[gzip,deflate,sdch] \r\nAccept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\nRa-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\nConnection:[keep-alive] \r\nAccept:[*/*]</pre>\r\n<pre>   Header Header \r\n\r\n   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href="http://127.0.0.1:8080/pkg/io/">io</a>.<a href="http://127.0.0.1:8080/pkg/io/#ReadCloser">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>//主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //form包含了url和post或者put中的变量值，该变量只有在ParseForm执行过之后才可以用\r\n   Form url.Values \r\n   \r\n   //该变量包含post或者put中的参数，该变量只有在ParseForm执行过之后才可以用\r\n   //PostForm url.Values\r\n</pre>\r\n<pre>   //</pre>\r\n<pre>MultipartForm 是解析的urltipart form得到的，包含了文件的上传，只有在 ParseMultipartForm执行之后，才可以使用</pre>\r\n<pre>    MultipartForm *<a href="http://127.0.0.1:8080/pkg/mime/multipart/">multipart</a>.<a href="http://127.0.0.1:8080/pkg/mime/multipart/#Form">Form</a></pre>\r\n<pre>}</pre>', 'golang http包request对象', '', 'inherit', 'open', 'open', '', '266-revision-v1', '', '', '2015-05-26 06:51:38', '2015-05-26 06:51:38', '', 266, 'http://unasm.sinaapp.com/?p=269', 0, 'revision', '', 0),
(270, 1, '2015-05-26 07:37:12', '2015-05-26 07:37:12', '<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class="comment">// Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class="comment"> For client requests an empty string means GET.\r\n</span>//用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a></pre>\r\n<pre> \r\n   //用户请求的url\r\n   URL *<a href="http://127.0.0.1:8080/pkg/net/url/">url</a>.<a href="http://127.0.0.1:8080/pkg/net/url/#URL">URL\r\n</a>   用户访问所用的协议，"HTTP/1.0" 或者是  "HTTP/1.1"\r\n   Proto\r\n   //用户的http请求头里面的信息，例： \r\nUser-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\nAccept-Encoding:[gzip,deflate,sdch] \r\nAccept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\nRa-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\nConnection:[keep-alive] \r\nAccept:[*/*]</pre>\r\n<pre>   Header Header \r\n\r\n   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href="http://127.0.0.1:8080/pkg/io/">io</a>.<a href="http://127.0.0.1:8080/pkg/io/#ReadCloser">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>//主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //form包含了url和post或者put中的变量值，该变量只有在ParseForm执行过之后才可以用\r\n   Form url.Values \r\n   \r\n   //该变量包含post或者put中的参数，该变量只有在ParseForm执行过之后才可以用\r\n   PostForm url.Values\r\n</pre>\r\n<pre>   // MultipartForm 是解析的urltipart form得到的，包含了文件的上传，只有在 ParseMultipartForm执行之后，才可以使用</pre>\r\n<pre>    MultipartForm *<a href="http://127.0.0.1:8080/pkg/mime/multipart/">multipart</a>.<a href="http://127.0.0.1:8080/pkg/mime/multipart/#Form">Form\r\n </a>   \r\n\r\n    //指header中请求体之外的信息，最初header 的键值值包含键值为nil，当函数处理完body之后，trailer 就会包含非nik值的键值对。</pre>\r\n<pre>    Trailer <a href="http://127.0.0.1:8080/pkg/net/http/#Header">Header</a>\r\n</pre>\r\n<pre>//RemoteAddr允许http服务器记录发送请求的地址，通常用于登陆\r\n    RemoteAddr <a href="http://127.0.0.1:8080/pkg/builtin/#string">string\r\n</a>\r\n    //不详\r\n    RequestURI\r\n \r\n    //TLS 允许http服务器和其他的软件记录接受请求的时候的TLS连接的信息，TLS在有函数句柄执行之前都是有效的，之后该值就一直是nil，该值通常被http客户端忽略</pre>\r\n<pre>\r\n    TLS *<a href="http://127.0.0.1:8080/pkg/crypto/tls/">tls</a>.<a href="http://127.0.0.1:8080/pkg/crypto/tls/#ConnectionState">ConnectionState</a></pre>\r\n<pre>}</pre>', 'golang http包request对象    Trailer Header', '', 'inherit', 'open', 'open', '', '266-revision-v1', '', '', '2015-05-26 07:37:12', '2015-05-26 07:37:12', '', 266, 'http://unasm.sinaapp.com/?p=270', 0, 'revision', '', 0),
(271, 1, '2015-05-26 07:38:27', '2015-05-26 07:38:27', '<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class="comment">// Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class="comment"> For client requests an empty string means GET.\r\n</span>//用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a></pre>\r\n<pre> \r\n   //用户请求的url\r\n   URL *<a href="http://127.0.0.1:8080/pkg/net/url/">url</a>.<a href="http://127.0.0.1:8080/pkg/net/url/#URL">URL\r\n</a>   用户访问所用的协议，"HTTP/1.0" 或者是  "HTTP/1.1"\r\n   Proto\r\n   //用户的http请求头里面的信息，例： \r\nUser-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\nAccept-Encoding:[gzip,deflate,sdch] \r\nAccept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\nRa-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\nConnection:[keep-alive] \r\nAccept:[*/*]</pre>\r\n<pre>   Header Header \r\n\r\n   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href="http://127.0.0.1:8080/pkg/io/">io</a>.<a href="http://127.0.0.1:8080/pkg/io/#ReadCloser">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>//主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //form包含了url和post或者put中的变量值，该变量只有在ParseForm执行过之后才可以用\r\n   Form url.Values \r\n   \r\n   //该变量包含post或者put中的参数，该变量只有在ParseForm执行过之后才可以用\r\n   PostForm url.Values\r\n</pre>\r\n<pre>   // MultipartForm 是解析的urltipart form得到的，包含了文件的上传，只有在 ParseMultipartForm执行之后，才可以使用</pre>\r\n<pre>    MultipartForm *<a href="http://127.0.0.1:8080/pkg/mime/multipart/">multipart</a>.<a href="http://127.0.0.1:8080/pkg/mime/multipart/#Form">Form\r\n </a>   \r\n\r\n    //指header中请求体之外的信息，最初header 的键值值包含键值为nil，当函数处理完body之后，trailer 就会包含非nik值的键值对。</pre>\r\n<pre>    Trailer <a href="http://127.0.0.1:8080/pkg/net/http/#Header">Header</a>\r\n</pre>\r\n<pre>//RemoteAddr允许http服务器记录发送请求的地址，通常用于登陆\r\n    RemoteAddr <a href="http://127.0.0.1:8080/pkg/builtin/#string">string\r\n</a>\r\n    //不详\r\n    RequestURI\r\n \r\n    //TLS 允许http服务器和其他的软件记录接受请求的时候的TLS连接的信息，TLS在有函数句柄执行之前都是有效的，之后该值就一直是nil，该值通常被http客户端忽略</pre>\r\n<pre>    TLS *<a href="http://127.0.0.1:8080/pkg/crypto/tls/">tls</a>.<a href="http://127.0.0.1:8080/pkg/crypto/tls/#ConnectionState">ConnectionState</a></pre>\r\n<pre>}</pre>', 'golang http包request对象    Trailer Header', '', 'inherit', 'open', 'open', '', '266-revision-v1', '', '', '2015-05-26 07:38:27', '2015-05-26 07:38:27', '', 266, 'http://unasm.sinaapp.com/?p=271', 0, 'revision', '', 0),
(284, 1, '2015-05-28 02:58:18', '2015-05-28 02:58:18', '<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class="comment">// Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class="comment"> For client requests an empty string means GET.\r\n</span>//用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a></pre>\r\n<pre> \r\n   //用户请求的url\r\n   URL *<a href="http://127.0.0.1:8080/pkg/net/url/">url</a>.<a href="http://127.0.0.1:8080/pkg/net/url/#URL">URL\r\n</a>   用户访问所用的协议，"HTTP/1.0" 或者是  "HTTP/1.1"\r\n   Proto\r\n   //用户的http请求头里面的信息，例： \r\nUser-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\nAccept-Encoding:[gzip,deflate,sdch] \r\nAccept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\nRa-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\nConnection:[keep-alive] \r\nAccept:[*/*]</pre>\r\n<pre>   Header Header \r\n\r\n   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href="http://127.0.0.1:8080/pkg/io/">io</a>.<a href="http://127.0.0.1:8080/pkg/io/#ReadCloser">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>//主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //form包含了url和post或者put中的变量值，该变量只有在ParseForm执行过之后才可以用\r\n   Form url.Values \r\n   \r\n   //该变量包含post或者put中的参数，该变量只有在ParseForm执行过之后才可以用\r\n   PostForm url.Values\r\n</pre>\r\n<pre>   // MultipartForm 是解析的urltipart form得到的，包含了文件的上传，只有在 ParseMultipartForm执行之后，才可以使用</pre>\r\n<pre>    MultipartForm *<a href="http://127.0.0.1:8080/pkg/mime/multipart/">multipart</a>.<a href="http://127.0.0.1:8080/pkg/mime/multipart/#Form">Form\r\n </a>   \r\n\r\n    //指header中请求体之外的信息，最初header 的键值值包含键值为nil，当函数处理完body之后，trailer 就会包含非nik值的键值对。</pre>\r\n<pre>    Trailer <a href="http://127.0.0.1:8080/pkg/net/http/#Header">Header</a>\r\n</pre>\r\n<pre>//RemoteAddr允许http服务器记录发送请求的地址，通常用于登陆\r\n    RemoteAddr <a href="http://127.0.0.1:8080/pkg/builtin/#string">string\r\n</a>\r\n    //不详\r\n    RequestURI\r\n \r\n    //TLS 允许http服务器和其他的软件记录接受请求的时候的TLS连接的信息，TLS在有函数句柄执行之前都是有效的，之后该值就一直是nil，该值通常被http客户端忽略</pre>\r\n<pre>    TLS *<a href="http://127.0.0.1:8080/pkg/crypto/tls/">tls</a>.<a href="http://127.0.0.1:8080/pkg/crypto/tls/#ConnectionState">ConnectionState</a></pre>\r\n<pre>}</pre>', 'golang http包request对象    属性值', '', 'inherit', 'open', 'open', '', '266-revision-v1', '', '', '2015-05-28 02:58:18', '2015-05-28 02:58:18', '', 266, 'http://unasm.sinaapp.com/?p=284', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(272, 1, '2015-05-27 09:51:36', '2015-05-27 09:51:36', '源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，特征是 1. （注：8进制）的操作码\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关闭信号可能包含有一个信息体（body），说明关闭的原因，比如终端关机，信息帧过大，信息帧格式不对。如果有信息体体（body），那么这个信息体的前两位必须是在 <a href="https://tools.ietf.org/html/rfc6455#section-7.4">Section 7.4</a> 中定义的状态码，紧接两个字节还是整数。\r\n\r\n解释的内容必须是UTF-8编码的数据，该解释内容本规范并不定义，该数据亦未必可读，但是最好对调试有帮助，或者和开启连接有关。既然数据未必对人可读，所以最好不要给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href="https://tools.ietf.org/html/rfc6455#section-5.3">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n在双端都各自收发了一个关闭信号之后，终端会认为websocket已经关闭，底层的tcp连接必须立即断开。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也要断开。\r\n\r\nClose信号会在浏览器刷新之前以及主动断开连接的时候，发出\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href="https://tools.ietf.org/html/rfc6455#section-5.5.3">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。', 'websocket 协议之控制帧 （RFC6455 5.5节）翻译', '', 'publish', 'open', 'open', '', 'websocket-%e5%8d%8f%e8%ae%ae%e4%b9%8b%e6%8e%a7%e5%88%b6%e5%b8%a7-%ef%bc%88rfc6455-5-5%e8%8a%82%ef%bc%89%e7%bf%bb%e8%af%91', '', '', '2015-05-28 02:57:03', '2015-05-28 02:57:03', '', 0, 'http://unasm.sinaapp.com/?p=272', 0, 'post', '', 0),
(273, 1, '2015-05-27 09:51:36', '2015-05-27 09:51:36', '源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   控制帧\r\n\r\nwebsocket 控制帧是特征为 1. （注：8进制）的操作码        目前已经定义的操作码包括0x8(关闭信号)，0x9(ping信号)，0xA(pong信号)，操作码 0xB-0xF  尚未定义，以后备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态，可以插入在通信的碎片之中。\r\n\r\n全部的控制帧都必须在一个最长为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且不能被分割。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关系信号可能包含有一个包含了关闭的原因，比如关闭的结束位置，收到一个过大帧的结束位置（ 注，原文：such as an endpoint shutting down, an endpoint having received a frame too large）或者是一个格式不正确帧的结束位置 的结构体，如果有这么一个结构体（body），那么这个结构体的前两位（in network byte order）必须为非负数，代表了在 <a href="https://tools.ietf.org/html/rfc6455#section-7.4">Section 7.4</a> 中定义的状态码。紧接着的还是两个整数，结构体可以包含UTF-8编码的数据，该解释不限定在本规范，该数据亦未必人可读，但是最好对调试有帮助，或者有用。所以既然数据未必对人可读，所以在客户端未必将其展示给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href="https://tools.ietf.org/html/rfc6455#section-5.3">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也关闭了。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href="https://tools.ietf.org/html/rfc6455#section-5.5.3">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。', 'websocket 协议之控制帧 （RFC6455 5.5节）翻译', '', 'inherit', 'open', 'open', '', '272-revision-v1', '', '', '2015-05-27 09:51:36', '2015-05-27 09:51:36', '', 272, 'http://unasm.sinaapp.com/?p=273', 0, 'revision', '', 0),
(274, 1, '2015-05-27 10:49:35', '2015-05-27 10:49:35', '源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\n\n5.5   WebSocket 控制帧\n\nWebsocket 控制帧的特征为 1. （注：8进制）的操作码\n\n&nbsp;\n\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，\n\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\n\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\n\n5.5.1 关闭信号(Close信号)\n\n关闭信号的状态码 是0x8.\n\n关闭信号可能包含有一个信息体（body），说明关闭的原因，比如终端关机，信息帧过大，信息帧格式不对。如果有信息体体（body），那么这个信息体的前两位必须是在 <a href="https://tools.ietf.org/html/rfc6455#section-7.4">Section 7.4</a> 中定义的状态码，紧接两个字节还是整数。\n\n解释的内容必须是UTF-8编码的数据，该解释内容本规范并不定义，该数据亦未必可读，但是最好对调试有帮助，或者和开启连接有关。既然数据未必对人可读，所以最好不要给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href="https://tools.ietf.org/html/rfc6455#section-5.3">Section 5.3</a>）。\n\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\n\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\n\n在双端都各自收发了一个关闭信号之后，终端会认为websocket已经关闭，底层的tcp连接必须立即断开。\n\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也要断开。\n\n5.5.2 Ping 信号\n\nPing信号帧包含状态码0x9。\n\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href="https://tools.ietf.org/html/rfc6455#section-5.5.3">Section 5.5.3</a> 中讨论（注：也就是下面）。\n\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\n\n5.5.3 Pong信号\n\nPong信号帧必须包含状态码0xA。\n\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\n\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\n\nPong信号是被动信号，不能主动发送。', 'websocket 协议之控制帧 （RFC6455 5.5节）翻译', '', 'inherit', 'open', 'open', '', '272-autosave-v1', '', '', '2015-05-27 10:49:35', '2015-05-27 10:49:35', '', 272, 'http://unasm.sinaapp.com/?p=274', 0, 'revision', '', 0),
(275, 1, '2015-05-27 09:57:26', '2015-05-27 09:57:26', '源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebsocket 控制帧的特征为 1. （注：8进制）的操作码\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且不能被分割。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关系信号可能包含有一个包含了关闭的原因，比如关闭的结束位置，收到一个过大帧的结束位置（ 注，原文：such as an endpoint shutting down, an endpoint having received a frame too large）或者是一个格式不正确帧的结束位置 的结构体，如果有这么一个结构体（body），那么这个结构体的前两位（in network byte order）必须为非负数，代表了在 <a href="https://tools.ietf.org/html/rfc6455#section-7.4">Section 7.4</a> 中定义的状态码。紧接着的还是两个整数，结构体可以包含UTF-8编码的数据，该解释不限定在本规范，该数据亦未必人可读，但是最好对调试有帮助，或者有用。所以既然数据未必对人可读，所以在客户端未必将其展示给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href="https://tools.ietf.org/html/rfc6455#section-5.3">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也关闭了。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href="https://tools.ietf.org/html/rfc6455#section-5.5.3">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。', 'websocket 协议之控制帧 （RFC6455 5.5节）翻译', '', 'inherit', 'open', 'open', '', '272-revision-v1', '', '', '2015-05-27 09:57:26', '2015-05-27 09:57:26', '', 272, 'http://unasm.sinaapp.com/?p=275', 0, 'revision', '', 0),
(276, 1, '2015-05-27 09:57:49', '2015-05-27 09:57:49', '源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebsocket 控制帧的特征为 1. （注：8进制）的操作码\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个包之中，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关系信号可能包含有一个包含了关闭的原因，比如关闭的结束位置，收到一个过大帧的结束位置（ 注，原文：such as an endpoint shutting down, an endpoint having received a frame too large）或者是一个格式不正确帧的结束位置 的结构体，如果有这么一个结构体（body），那么这个结构体的前两位（in network byte order）必须为非负数，代表了在 <a href="https://tools.ietf.org/html/rfc6455#section-7.4">Section 7.4</a> 中定义的状态码。紧接着的还是两个整数，结构体可以包含UTF-8编码的数据，该解释不限定在本规范，该数据亦未必人可读，但是最好对调试有帮助，或者有用。所以既然数据未必对人可读，所以在客户端未必将其展示给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href="https://tools.ietf.org/html/rfc6455#section-5.3">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也关闭了。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href="https://tools.ietf.org/html/rfc6455#section-5.5.3">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。', 'websocket 协议之控制帧 （RFC6455 5.5节）翻译', '', 'inherit', 'open', 'open', '', '272-revision-v1', '', '', '2015-05-27 09:57:49', '2015-05-27 09:57:49', '', 272, 'http://unasm.sinaapp.com/?p=276', 0, 'revision', '', 0),
(278, 1, '2015-05-27 10:14:32', '2015-05-27 10:14:32', '源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebsocket 控制帧的特征为 1. （注：8进制）的操作码\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关闭信号可能包含有一个信息体（body），说明关闭的原因，比如终端关机，信息帧过大，信息帧格式不对。如果有信息体体（body），那么这个信息体的前两位必须是在 <a href="https://tools.ietf.org/html/rfc6455#section-7.4">Section 7.4</a> 中定义的状态码，紧接两个字节还是整数。\r\n\r\n解释的内容必须是UTF-8编码的数据，该解释内容本规范并不定义，该数据亦未必可读，但是最好对调试有帮助，或者和开启连接有关。既然数据未必对人可读，所以最好不要给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close f\r\nrames sent from client to server must be masked as per <a href="https://tools.ietf.org/html/rfc6455#section-5.3">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也关闭了。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href="https://tools.ietf.org/html/rfc6455#section-5.5.3">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。', 'websocket 协议之控制帧 （RFC6455 5.5节）翻译', '', 'inherit', 'open', 'open', '', '272-revision-v1', '', '', '2015-05-27 10:14:32', '2015-05-27 10:14:32', '', 272, 'http://unasm.sinaapp.com/?p=278', 0, 'revision', '', 0),
(277, 1, '2015-05-27 09:58:22', '2015-05-27 09:58:22', '源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebsocket 控制帧的特征为 1. （注：8进制）的操作码\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关系信号可能包含有一个包含了关闭的原因，比如关闭的结束位置，收到一个过大帧的结束位置（ 注，原文：such as an endpoint shutting down, an endpoint having received a frame too large）或者是一个格式不正确帧的结束位置 的结构体，如果有这么一个结构体（body），那么这个结构体的前两位（in network byte order）必须为非负数，代表了在 <a href="https://tools.ietf.org/html/rfc6455#section-7.4">Section 7.4</a> 中定义的状态码。紧接着的还是两个整数，结构体可以包含UTF-8编码的数据，该解释不限定在本规范，该数据亦未必人可读，但是最好对调试有帮助，或者有用。所以既然数据未必对人可读，所以在客户端未必将其展示给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href="https://tools.ietf.org/html/rfc6455#section-5.3">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也关闭了。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href="https://tools.ietf.org/html/rfc6455#section-5.5.3">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。', 'websocket 协议之控制帧 （RFC6455 5.5节）翻译', '', 'inherit', 'open', 'open', '', '272-revision-v1', '', '', '2015-05-27 09:58:22', '2015-05-27 09:58:22', '', 272, 'http://unasm.sinaapp.com/?p=277', 0, 'revision', '', 0),
(279, 1, '2015-05-27 10:50:17', '2015-05-27 10:50:17', '源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebsocket 控制帧的特征为 1. （注：8进制）的操作码\r\n\r\n&nbsp;\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关闭信号可能包含有一个信息体（body），说明关闭的原因，比如终端关机，信息帧过大，信息帧格式不对。如果有信息体体（body），那么这个信息体的前两位必须是在 <a href="https://tools.ietf.org/html/rfc6455#section-7.4">Section 7.4</a> 中定义的状态码，紧接两个字节还是整数。\r\n\r\n解释的内容必须是UTF-8编码的数据，该解释内容本规范并不定义，该数据亦未必可读，但是最好对调试有帮助，或者和开启连接有关。既然数据未必对人可读，所以最好不要给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href="https://tools.ietf.org/html/rfc6455#section-5.3">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n在双端都各自收发了一个关闭信号之后，终端会认为websocket已经关闭，底层的tcp连接必须立即断开。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也要断开。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href="https://tools.ietf.org/html/rfc6455#section-5.5.3">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。', 'websocket 协议之控制帧 （RFC6455 5.5节）翻译', '', 'inherit', 'open', 'open', '', '272-revision-v1', '', '', '2015-05-27 10:50:17', '2015-05-27 10:50:17', '', 272, 'http://unasm.sinaapp.com/?p=279', 0, 'revision', '', 0),
(280, 1, '2015-05-27 10:50:46', '2015-05-27 10:50:46', '源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebsocket 控制帧的特征为 1. （注：8进制）的操作码\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关闭信号可能包含有一个信息体（body），说明关闭的原因，比如终端关机，信息帧过大，信息帧格式不对。如果有信息体体（body），那么这个信息体的前两位必须是在 <a href="https://tools.ietf.org/html/rfc6455#section-7.4">Section 7.4</a> 中定义的状态码，紧接两个字节还是整数。\r\n\r\n解释的内容必须是UTF-8编码的数据，该解释内容本规范并不定义，该数据亦未必可读，但是最好对调试有帮助，或者和开启连接有关。既然数据未必对人可读，所以最好不要给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href="https://tools.ietf.org/html/rfc6455#section-5.3">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n在双端都各自收发了一个关闭信号之后，终端会认为websocket已经关闭，底层的tcp连接必须立即断开。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也要断开。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href="https://tools.ietf.org/html/rfc6455#section-5.5.3">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。', 'websocket 协议之控制帧 （RFC6455 5.5节）翻译', '', 'inherit', 'open', 'open', '', '272-revision-v1', '', '', '2015-05-27 10:50:46', '2015-05-27 10:50:46', '', 272, 'http://unasm.sinaapp.com/?p=280', 0, 'revision', '', 0),
(281, 1, '2015-05-27 10:51:19', '2015-05-27 10:51:19', '源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，特征为 1. （注：8进制）的操作码\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关闭信号可能包含有一个信息体（body），说明关闭的原因，比如终端关机，信息帧过大，信息帧格式不对。如果有信息体体（body），那么这个信息体的前两位必须是在 <a href="https://tools.ietf.org/html/rfc6455#section-7.4">Section 7.4</a> 中定义的状态码，紧接两个字节还是整数。\r\n\r\n解释的内容必须是UTF-8编码的数据，该解释内容本规范并不定义，该数据亦未必可读，但是最好对调试有帮助，或者和开启连接有关。既然数据未必对人可读，所以最好不要给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href="https://tools.ietf.org/html/rfc6455#section-5.3">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n在双端都各自收发了一个关闭信号之后，终端会认为websocket已经关闭，底层的tcp连接必须立即断开。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也要断开。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href="https://tools.ietf.org/html/rfc6455#section-5.5.3">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。', 'websocket 协议之控制帧 （RFC6455 5.5节）翻译', '', 'inherit', 'open', 'open', '', '272-revision-v1', '', '', '2015-05-27 10:51:19', '2015-05-27 10:51:19', '', 272, 'http://unasm.sinaapp.com/?p=281', 0, 'revision', '', 0),
(282, 1, '2015-05-27 10:51:30', '2015-05-27 10:51:30', '源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，特征是 1. （注：8进制）的操作码\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关闭信号可能包含有一个信息体（body），说明关闭的原因，比如终端关机，信息帧过大，信息帧格式不对。如果有信息体体（body），那么这个信息体的前两位必须是在 <a href="https://tools.ietf.org/html/rfc6455#section-7.4">Section 7.4</a> 中定义的状态码，紧接两个字节还是整数。\r\n\r\n解释的内容必须是UTF-8编码的数据，该解释内容本规范并不定义，该数据亦未必可读，但是最好对调试有帮助，或者和开启连接有关。既然数据未必对人可读，所以最好不要给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href="https://tools.ietf.org/html/rfc6455#section-5.3">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n在双端都各自收发了一个关闭信号之后，终端会认为websocket已经关闭，底层的tcp连接必须立即断开。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也要断开。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href="https://tools.ietf.org/html/rfc6455#section-5.5.3">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。', 'websocket 协议之控制帧 （RFC6455 5.5节）翻译', '', 'inherit', 'open', 'open', '', '272-revision-v1', '', '', '2015-05-27 10:51:30', '2015-05-27 10:51:30', '', 272, 'http://unasm.sinaapp.com/?p=282', 0, 'revision', '', 0),
(283, 1, '2015-05-28 01:47:03', '2015-05-28 01:47:03', '源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，特征是 1. （注：8进制）的操作码\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关闭信号可能包含有一个信息体（body），说明关闭的原因，比如终端关机，信息帧过大，信息帧格式不对。如果有信息体体（body），那么这个信息体的前两位必须是在 <a href="https://tools.ietf.org/html/rfc6455#section-7.4">Section 7.4</a> 中定义的状态码，紧接两个字节还是整数。\r\n\r\n解释的内容必须是UTF-8编码的数据，该解释内容本规范并不定义，该数据亦未必可读，但是最好对调试有帮助，或者和开启连接有关。既然数据未必对人可读，所以最好不要给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href="https://tools.ietf.org/html/rfc6455#section-5.3">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n在双端都各自收发了一个关闭信号之后，终端会认为websocket已经关闭，底层的tcp连接必须立即断开。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也要断开。\r\n\r\nClose信号会在浏览器刷新之前以及主动断开连接的时候，发出\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href="https://tools.ietf.org/html/rfc6455#section-5.5.3">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。', 'websocket 协议之控制帧 （RFC6455 5.5节）翻译', '', 'inherit', 'open', 'open', '', '272-revision-v1', '', '', '2015-05-28 01:47:03', '2015-05-28 01:47:03', '', 272, 'http://unasm.sinaapp.com/?p=283', 0, 'revision', '', 0),
(285, 1, '2015-05-28 02:59:27', '2015-05-28 02:59:27', '<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class="comment">   // Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class="comment"> For client requests an empty string means GET.\r\n</span>   //用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a></pre>\r\n<pre>   //用户请求的url\r\n   URL *<a href="http://127.0.0.1:8080/pkg/net/url/">url</a>.<a href="http://127.0.0.1:8080/pkg/net/url/#URL">URL\r\n</a>   用户访问所用的协议，"HTTP/1.0" 或者是  "HTTP/1.1"\r\n   Proto\r\n   /* 用户的http请求头里面的信息，例： \r\n   User-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\n   Accept-Encoding:[gzip,deflate,sdch] \r\n   Accept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\n   Ra-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\n   Connection:[keep-alive] \r\n   Accept:[*/*]\r\n   */</pre>\r\n<pre>   Header Header \r\n\r\n   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href="http://127.0.0.1:8080/pkg/io/">io</a>.<a href="http://127.0.0.1:8080/pkg/io/#ReadCloser">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>//主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //form包含了url和post或者put中的变量值，该变量只有在ParseForm执行过之后才可以用\r\n   Form url.Values \r\n   \r\n   //该变量包含post或者put中的参数，该变量只有在ParseForm执行过之后才可以用\r\n   PostForm url.Values\r\n</pre>\r\n<pre>   // MultipartForm 是解析的urltipart form得到的，包含了文件的上传，只有在 ParseMultipartForm执行之后，才可以使用</pre>\r\n<pre>    MultipartForm *<a href="http://127.0.0.1:8080/pkg/mime/multipart/">multipart</a>.<a href="http://127.0.0.1:8080/pkg/mime/multipart/#Form">Form\r\n </a>   \r\n\r\n    //指header中请求体之外的信息，最初header 的键值值包含键值为nil，当函数处理完body之后，trailer 就会包含非nik值的键值对。</pre>\r\n<pre>    Trailer <a href="http://127.0.0.1:8080/pkg/net/http/#Header">Header</a>\r\n</pre>\r\n<pre>//RemoteAddr允许http服务器记录发送请求的地址，通常用于登陆\r\n    RemoteAddr <a href="http://127.0.0.1:8080/pkg/builtin/#string">string\r\n</a>\r\n    //不详\r\n    RequestURI\r\n \r\n    //TLS 允许http服务器和其他的软件记录接受请求的时候的TLS连接的信息，TLS在有函数句柄执行之前都是有效的，之后该值就一直是nil，该值通常被http客户端忽略</pre>\r\n<pre>    TLS *<a href="http://127.0.0.1:8080/pkg/crypto/tls/">tls</a>.<a href="http://127.0.0.1:8080/pkg/crypto/tls/#ConnectionState">ConnectionState</a></pre>\r\n<pre>}</pre>', 'golang http包request对象    属性值', '', 'inherit', 'open', 'open', '', '266-revision-v1', '', '', '2015-05-28 02:59:27', '2015-05-28 02:59:27', '', 266, 'http://unasm.sinaapp.com/?p=285', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(286, 1, '2015-05-28 03:00:15', '2015-05-28 03:00:15', '<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class="comment">   // Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class="comment"> For client requests an empty string means GET.\r\n</span>   //用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a></pre>\r\n<pre>   //用户请求的url\r\n   URL *<a href="http://127.0.0.1:8080/pkg/net/url/">url</a>.<a href="http://127.0.0.1:8080/pkg/net/url/#URL">URL\r\n</a>   用户访问所用的协议，"HTTP/1.0" 或者是  "HTTP/1.1"\r\n   Proto\r\n   /* 用户的http请求头里面的信息，例： \r\n   User-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\n   Accept-Encoding:[gzip,deflate,sdch] \r\n   Accept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\n   Ra-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\n   Connection:[keep-alive] \r\n   Accept:[*/*]\r\n   */\r\n   Header Header</pre>\r\n<pre>\r\n   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href="http://127.0.0.1:8080/pkg/io/">io</a>.<a href="http://127.0.0.1:8080/pkg/io/#ReadCloser">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>//主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //form包含了url和post或者put中的变量值，该变量只有在ParseForm执行过之后才可以用\r\n   Form url.Values \r\n   \r\n   //该变量包含post或者put中的参数，该变量只有在ParseForm执行过之后才可以用\r\n   PostForm url.Values\r\n</pre>\r\n<pre>   // MultipartForm 是解析的urltipart form得到的，包含了文件的上传，只有在 ParseMultipartForm执行之后，才可以使用</pre>\r\n<pre>    MultipartForm *<a href="http://127.0.0.1:8080/pkg/mime/multipart/">multipart</a>.<a href="http://127.0.0.1:8080/pkg/mime/multipart/#Form">Form\r\n </a>   \r\n\r\n    //指header中请求体之外的信息，最初header 的键值值包含键值为nil，当函数处理完body之后，trailer 就会包含非nik值的键值对。</pre>\r\n<pre>    Trailer <a href="http://127.0.0.1:8080/pkg/net/http/#Header">Header</a>\r\n</pre>\r\n<pre>//RemoteAddr允许http服务器记录发送请求的地址，通常用于登陆\r\n    RemoteAddr <a href="http://127.0.0.1:8080/pkg/builtin/#string">string\r\n</a>\r\n    //不详\r\n    RequestURI\r\n \r\n    //TLS 允许http服务器和其他的软件记录接受请求的时候的TLS连接的信息，TLS在有函数句柄执行之前都是有效的，之后该值就一直是nil，该值通常被http客户端忽略</pre>\r\n<pre>    TLS *<a href="http://127.0.0.1:8080/pkg/crypto/tls/">tls</a>.<a href="http://127.0.0.1:8080/pkg/crypto/tls/#ConnectionState">ConnectionState</a></pre>\r\n<pre>}</pre>', 'golang http包request对象    属性值', '', 'inherit', 'open', 'open', '', '266-revision-v1', '', '', '2015-05-28 03:00:15', '2015-05-28 03:00:15', '', 266, 'http://unasm.sinaapp.com/?p=286', 0, 'revision', '', 0),
(287, 1, '2015-05-28 03:00:59', '2015-05-28 03:00:59', '<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class="comment">   // Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class="comment"> For client requests an empty string means GET.\r\n</span>   //用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a></pre>\r\n<pre>   //用户请求的url\r\n   URL *<a href="http://127.0.0.1:8080/pkg/net/url/">url</a>.<a href="http://127.0.0.1:8080/pkg/net/url/#URL">URL\r\n</a>   用户访问所用的协议，"HTTP/1.0" 或者是  "HTTP/1.1"\r\n   Proto\r\n   /* 用户的http请求头里面的信息，例： \r\n   User-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\n   Accept-Encoding:[gzip,deflate,sdch] \r\n   Accept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\n   Ra-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\n   Connection:[keep-alive] \r\n   Accept:[*/*]\r\n   */\r\n   Header Header</pre>\r\n<pre>   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href="http://127.0.0.1:8080/pkg/io/">io</a>.<a href="http://127.0.0.1:8080/pkg/io/#ReadCloser">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>   //主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //form包含了url和post或者put中的变量值，该变量只有在ParseForm执行过之后才可以用\r\n   Form url.Values \r\n   \r\n   //该变量包含post或者put中的参数，该变量只有在ParseForm执行过之后才可以用\r\n   PostForm url.Values\r\n</pre>\r\n<pre>    // MultipartForm 是解析的urltipart form得到的，包含了文件的上传，只有在ParseMultipartForm执行之后，才可以使用</pre>\r\n<pre>    MultipartForm *<a href="http://127.0.0.1:8080/pkg/mime/multipart/">multipart</a>.<a href="http://127.0.0.1:8080/pkg/mime/multipart/#Form">Form\r\n </a>   \r\n\r\n    //指header中请求体之外的信息，最初header 的键值值包含键值为nil，当函数处理完body之后，trailer 就会包含非nik值的键值对。</pre>\r\n<pre>    Trailer <a href="http://127.0.0.1:8080/pkg/net/http/#Header">Header</a>\r\n</pre>\r\n<pre>    //RemoteAddr允许http服务器记录发送请求的地址，通常用于登陆\r\n    RemoteAddr <a href="http://127.0.0.1:8080/pkg/builtin/#string">string\r\n</a>\r\n    //不详\r\n    RequestURI\r\n \r\n    //TLS 允许http服务器和其他的软件记录接受请求的时候的TLS连接的信息，TLS在有函数句柄执行之前都是有效的，之后该值就一直是nil，该值通常被http客户端忽略</pre>\r\n<pre>    TLS *<a href="http://127.0.0.1:8080/pkg/crypto/tls/">tls</a>.<a href="http://127.0.0.1:8080/pkg/crypto/tls/#ConnectionState">ConnectionState</a></pre>\r\n<pre>}</pre>', 'golang http包request对象    属性值', '', 'inherit', 'open', 'open', '', '266-revision-v1', '', '', '2015-05-28 03:00:59', '2015-05-28 03:00:59', '', 266, 'http://unasm.sinaapp.com/?p=287', 0, 'revision', '', 0),
(288, 1, '2015-05-29 07:46:00', '2015-05-29 07:46:00', '今天遇到一个问题，功能很简单，就是给线上的文章加锁，每篇文章只能由一个人访问编辑，设想很简单，两个结构体，一个结构体 hub 保存全部的正在被访问的文章的列表，一个结构体 client 是文章的内容以及属性。当每个文章被访问的时候，将放入信道hub的一个信道之中，单独开一个goroutine , 监听goroutine的信号变化，一旦信道变化，就读取变化，然后放入数组中。\r\n\r\n很简单，对吧。但就是出了奇葩问题。\r\n\r\n我开始的时候，准备两个函数,一个Index，处理http/websocket请求，一个是监听hub信道变化的，在Index 函数里面,通过信道将正在访问的文章信息传递给hub，然后我发现了灵异的情况，就是及时赋值给信道，也是没有用处的，必须等这个链接短开之后，被监听到，但是这个时候，链接已经断开了，文章已经不被访问了。\r\n\r\n解决方法是写三个函数，一个是监听hub信道变化的，一个是原来的Index，然后把阻塞监听websocket 链接的部分放在一个新的函数里面，然后将对hub信道变化的部分放在Index里面，这样，等Index函数执行完毕的时候，Hub就能捕捉到信道变化了。\r\n\r\nHere is the code\r\n<p class="p1"><span class="s1">func</span> <span class="s3">Ind</span><span class="s4">e</span><span class="s3">x</span><span class="s2">(w http.ResponseWriter, r </span><span class="s1">*</span><span class="s2">http.Request) {</span></p>\r\n.......\r\n<p class="p1"><span class="s1">  h.</span><span class="s2">register</span> <span class="s3">&lt;-</span><span class="s1"> c<span class="Apple-converted-space">                                                                                                                                                           </span></span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span><span class="s6">f</span><span class="s4">or</span><span class="s5"> {</span></p>\r\n<p class="p2"><span class="s7"><span class="Apple-converted-space">    </span></span> <span class="s7"> <span class="Apple-converted-space">  </span></span><span class="s5">//守护着这个连接，从连接中读取信息，然后通过信道传递给broadcast ，进入传递的队列</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>_, msg, err </span><span class="s4">:=</span><span class="s5"> c.ws.</span><span class="s8">ReadMessage</span><span class="s5">()</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span></span><span class="s4">if</span><span class="s5"> err </span><span class="s4">!=</span> <span class="s9">nil</span><span class="s5"> {</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">      </span></span><span class="s4">break</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>}</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>h.broadcast </span><span class="s4">&lt;-</span> <span class="s8">string</span><span class="s5">(msg)</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span><span class="s6">}</span></p>\r\n<p class="p3"><span class="s5"><span class="Apple-converted-space">  </span></span><span class="s7"><span class="Apple-converted-space">    </span></span><span class="s6">d</span><span class="s5">efer</span> <span class="s5">func</span><span class="s7">() {</span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>Println(</span><span class="s9">"defering"</span><span class="s5">)</span></p>\r\n<p class="p1"><span class="s4"> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>h.un</span><span class="s2">register</span> <span class="s4">&lt;-</span><span class="s5"> c</span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>c.ws.</span><span class="s8">Close</span><span class="s5">()</span></p>\r\n<p class="p1"><span class="s5">     </span> <span class="s5">   </span><span class="s4">close</span><span class="s5">(c.send)</span></p>\r\n<p class="p1"><span class="s6">}</span><span class="s5">()</span></p>\r\n<p class="p1">}</p>\r\n<p class="p1">新的方案就是把除第一行以外的代码，从for开始，到close下面的独立出来，放在一个新的函数里面，然后调用这个函数，h.register &lt;- c 保留在Index函数里，这样在调用新函数的时候，监听h.register的函数就能捕捉到register的变化了</p>\r\n<p class="p1">/****************************************************************************************/</p>\r\n<p class="p1">经朋友指点，指出是缓冲的问题，register变量声明的时候，是通过make(chan *client)的方式，这样声明会默认自己带缓冲，所以可以通过make(chan *client，1)的方式，这样赋值之后，立即生效，检测register变化的函数立即就捕捉到了信道的变化，</p>', 'golang 信道的坑', '', 'publish', 'open', 'open', '', 'websocket-%e4%bf%a1%e9%81%93%e7%9a%84%e5%9d%91', '', '', '2015-05-29 08:49:41', '2015-05-29 08:49:41', '', 0, 'http://unasm.sinaapp.com/?p=288', 0, 'post', '', 0),
(289, 1, '2015-05-29 07:46:00', '2015-05-29 07:46:00', '今天遇到一个问题，功能很简单，就是给线上的文章加锁，每篇文章只能由一个人访问编辑，设想很简单，两个结构体，一个结构体 hub 保存全部的正在被访问的文章的列表，一个结构体 client 是文章的内容以及属性。当每个文章被访问的时候，将放入信道hub的一个信道之中，单独开一个goroutine , 监听goroutine的信号变化，一旦信道变化，就读取变化，然后放入数组中。\r\n\r\n很简单，对吧。但就是出了奇葩问题。\r\n\r\n我开始的时候，准备两个函数,一个Index，处理http/websocket请求，一个是监听hub信道变化的，在Index 函数里面,通过信道将正在访问的文章信息传递给hub，然后我发现了灵异的情况，就是及时赋值给信道，也是没有用处的，必须等这个链接短开之后，被监听到，但是这个时候，链接已经断开了，文章已经不被访问了。\r\n\r\n解决方法是写三个函数，一个是监听hub信道变化的，一个是原来的Index，然后把阻塞监听websocket 链接的部分放在一个新的函数里面，然后将对hub信道变化的部分放在Index里面，这样，等Index函数执行完毕的时候，Hub就能捕捉到信道变化了。', 'websocket 信道的坑', '', 'inherit', 'open', 'open', '', '288-revision-v1', '', '', '2015-05-29 07:46:00', '2015-05-29 07:46:00', '', 288, 'http://unasm.sinaapp.com/?p=289', 0, 'revision', '', 0),
(290, 1, '2015-05-29 08:48:36', '2015-05-29 08:48:36', '今天遇到一个问题，功能很简单，就是给线上的文章加锁，每篇文章只能由一个人访问编辑，设想很简单，两个结构体，一个结构体 hub 保存全部的正在被访问的文章的列表，一个结构体 client 是文章的内容以及属性。当每个文章被访问的时候，将放入信道hub的一个信道之中，单独开一个goroutine , 监听goroutine的信号变化，一旦信道变化，就读取变化，然后放入数组中。\n\n很简单，对吧。但就是出了奇葩问题。\n\n我开始的时候，准备两个函数,一个Index，处理http/websocket请求，一个是监听hub信道变化的，在Index 函数里面,通过信道将正在访问的文章信息传递给hub，然后我发现了灵异的情况，就是及时赋值给信道，也是没有用处的，必须等这个链接短开之后，被监听到，但是这个时候，链接已经断开了，文章已经不被访问了。\n\n解决方法是写三个函数，一个是监听hub信道变化的，一个是原来的Index，然后把阻塞监听websocket 链接的部分放在一个新的函数里面，然后将对hub信道变化的部分放在Index里面，这样，等Index函数执行完毕的时候，Hub就能捕捉到信道变化了。\n\nHere is the code\n<p class="p1"><span class="s1">func</span> <span class="s3">Ind</span><span class="s4">e</span><span class="s3">x</span><span class="s2">(w http.ResponseWriter, r </span><span class="s1">*</span><span class="s2">http.Request) {</span></p>\n.......\n<p class="p1"><span class="s1">  h.</span><span class="s2">register</span> <span class="s3">&lt;-</span><span class="s1"> c<span class="Apple-converted-space">                                                                                                                                                           </span></span></p>\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span><span class="s6">f</span><span class="s4">or</span><span class="s5"> {</span></p>\n<p class="p2"><span class="s7"><span class="Apple-converted-space">    </span></span> <span class="s7"> <span class="Apple-converted-space">  </span></span><span class="s5">//守护着这个连接，从连接中读取信息，然后通过信道传递给broadcast ，进入传递的队列</span></p>\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>_, msg, err </span><span class="s4">:=</span><span class="s5"> c.ws.</span><span class="s8">ReadMessage</span><span class="s5">()</span></p>\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span></span><span class="s4">if</span><span class="s5"> err </span><span class="s4">!=</span> <span class="s9">nil</span><span class="s5"> {</span></p>\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">      </span></span><span class="s4">break</span></p>\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>}</span></p>\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>h.broadcast </span><span class="s4">&lt;-</span> <span class="s8">string</span><span class="s5">(msg)</span></p>\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span><span class="s6">}</span></p>\n<p class="p3"><span class="s5"><span class="Apple-converted-space">  </span></span><span class="s7"><span class="Apple-converted-space">    </span></span><span class="s6">d</span><span class="s5">efer</span> <span class="s5">func</span><span class="s7">() {</span></p>\n<p class="p1"><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>Println(</span><span class="s9">"defering"</span><span class="s5">)</span></p>\n<p class="p1"><span class="s4"> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>h.un</span><span class="s2">register</span> <span class="s4">&lt;-</span><span class="s5"> c</span></p>\n<p class="p1"><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>c.ws.</span><span class="s8">Close</span><span class="s5">()</span></p>\n<p class="p1"><span class="s5">     </span> <span class="s5">   </span><span class="s4">close</span><span class="s5">(c.send)</span></p>\n<p class="p1"><span class="s6">}</span><span class="s5">()</span></p>\n<p class="p1">}</p>\n<p class="p1">新的方案就是把除第一行以外的代码，从for开始，到close下面的独立出来，放在一个新的函数里面，然后调用这个函数，h.register &lt;- c 保留在Index函数里，这样在调用新函数的时候，监听h.register的函数就能捕捉到register的变化了</p>\n<p class="p1"></p>\n<p class="p1">/****************************************************************************************/</p>\n<p class="p1">经朋友指点，指出是缓冲的问题，register变量声明的时候，是通过make(chan *client)的方式，这样声明会默认自己带缓冲，所以可以通过make(chan *client，1)的方式，这样赋值之后，立即生效，jian''ce</p>', 'golang 信道的坑', '', 'inherit', 'open', 'open', '', '288-autosave-v1', '', '', '2015-05-29 08:48:36', '2015-05-29 08:48:36', '', 288, 'http://unasm.sinaapp.com/?p=290', 0, 'revision', '', 0),
(291, 1, '2015-05-29 07:54:32', '2015-05-29 07:54:32', '今天遇到一个问题，功能很简单，就是给线上的文章加锁，每篇文章只能由一个人访问编辑，设想很简单，两个结构体，一个结构体 hub 保存全部的正在被访问的文章的列表，一个结构体 client 是文章的内容以及属性。当每个文章被访问的时候，将放入信道hub的一个信道之中，单独开一个goroutine , 监听goroutine的信号变化，一旦信道变化，就读取变化，然后放入数组中。\r\n\r\n很简单，对吧。但就是出了奇葩问题。\r\n\r\n我开始的时候，准备两个函数,一个Index，处理http/websocket请求，一个是监听hub信道变化的，在Index 函数里面,通过信道将正在访问的文章信息传递给hub，然后我发现了灵异的情况，就是及时赋值给信道，也是没有用处的，必须等这个链接短开之后，被监听到，但是这个时候，链接已经断开了，文章已经不被访问了。\r\n\r\n解决方法是写三个函数，一个是监听hub信道变化的，一个是原来的Index，然后把阻塞监听websocket 链接的部分放在一个新的函数里面，然后将对hub信道变化的部分放在Index里面，这样，等Index函数执行完毕的时候，Hub就能捕捉到信道变化了。\r\n\r\nHere is the code\r\n\r\nfunc Index() {\r\n\r\n.......\r\n<p class="p1"><span class="s1">  h.</span><span class="s2">register</span> <span class="s3">&lt;-</span><span class="s1"> c<span class="Apple-converted-space">                                                                                                                                                           </span></span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span><span class="s6">f</span><span class="s4">or</span><span class="s5"> {</span></p>\r\n<p class="p2"><span class="s7"><span class="Apple-converted-space">    </span></span> <span class="s7"> <span class="Apple-converted-space">  </span></span><span class="s5">//守护着这个连接，从连接中读取信息，然后通过信道传递给broadcast ，进入传递的队列</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>_, msg, err </span><span class="s4">:=</span><span class="s5"> c.ws.</span><span class="s8">ReadMessage</span><span class="s5">()</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span></span><span class="s4">if</span><span class="s5"> err </span><span class="s4">!=</span> <span class="s9">nil</span><span class="s5"> {</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">      </span></span><span class="s4">break</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>}</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>h.broadcast </span><span class="s4">&lt;-</span> <span class="s8">string</span><span class="s5">(msg)</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span><span class="s6">}</span></p>\r\n<p class="p3"><span class="s5"><span class="Apple-converted-space">  </span></span><span class="s7"><span class="Apple-converted-space">    </span></span><span class="s6">d</span><span class="s5">efer</span> <span class="s5">func</span><span class="s7">() {</span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>Println(</span><span class="s9">"defering"</span><span class="s5">)</span></p>\r\n<p class="p1"><span class="s4"> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>h.un</span><span class="s2">register</span> <span class="s4">&lt;-</span><span class="s5"> c</span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>c.ws.</span><span class="s8">Close</span><span class="s5">()</span></p>\r\n<p class="p1"><span class="s5">     </span> <span class="s5">   </span><span class="s4">close</span><span class="s5">(c.send)</span></p>\r\n<p class="p1"><span class="s6">}</span><span class="s5">()</span></p>\r\n<p class="p1">}</p>\r\n<p class="p1">新的方案就是把除第一行以外的代码，从for开始，到close下面的独立出来，放在一个新的函数里面，然后调用这个函数，h.register &lt;- c 保留在Index函数里，这样在调用新函数的时候，监听h.register的函数就能捕捉到register的变化了</p>', 'websocket 信道的坑', '', 'inherit', 'open', 'open', '', '288-revision-v1', '', '', '2015-05-29 07:54:32', '2015-05-29 07:54:32', '', 288, 'http://unasm.sinaapp.com/?p=291', 0, 'revision', '', 0),
(292, 1, '2015-05-29 07:55:41', '2015-05-29 07:55:41', '今天遇到一个问题，功能很简单，就是给线上的文章加锁，每篇文章只能由一个人访问编辑，设想很简单，两个结构体，一个结构体 hub 保存全部的正在被访问的文章的列表，一个结构体 client 是文章的内容以及属性。当每个文章被访问的时候，将放入信道hub的一个信道之中，单独开一个goroutine , 监听goroutine的信号变化，一旦信道变化，就读取变化，然后放入数组中。\r\n\r\n很简单，对吧。但就是出了奇葩问题。\r\n\r\n我开始的时候，准备两个函数,一个Index，处理http/websocket请求，一个是监听hub信道变化的，在Index 函数里面,通过信道将正在访问的文章信息传递给hub，然后我发现了灵异的情况，就是及时赋值给信道，也是没有用处的，必须等这个链接短开之后，被监听到，但是这个时候，链接已经断开了，文章已经不被访问了。\r\n\r\n解决方法是写三个函数，一个是监听hub信道变化的，一个是原来的Index，然后把阻塞监听websocket 链接的部分放在一个新的函数里面，然后将对hub信道变化的部分放在Index里面，这样，等Index函数执行完毕的时候，Hub就能捕捉到信道变化了。\r\n\r\nHere is the code\r\n<p class="p1"><span class="s1">func</span> <span class="s3">Ind</span><span class="s4">e</span><span class="s3">x</span><span class="s2">(w http.ResponseWriter, r </span><span class="s1">*</span><span class="s2">http.Request) {</span></p>\r\n.......\r\n<p class="p1"><span class="s1">  h.</span><span class="s2">register</span> <span class="s3">&lt;-</span><span class="s1"> c<span class="Apple-converted-space">                                                                                                                                                           </span></span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span><span class="s6">f</span><span class="s4">or</span><span class="s5"> {</span></p>\r\n<p class="p2"><span class="s7"><span class="Apple-converted-space">    </span></span> <span class="s7"> <span class="Apple-converted-space">  </span></span><span class="s5">//守护着这个连接，从连接中读取信息，然后通过信道传递给broadcast ，进入传递的队列</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>_, msg, err </span><span class="s4">:=</span><span class="s5"> c.ws.</span><span class="s8">ReadMessage</span><span class="s5">()</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span></span><span class="s4">if</span><span class="s5"> err </span><span class="s4">!=</span> <span class="s9">nil</span><span class="s5"> {</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">      </span></span><span class="s4">break</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>}</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>h.broadcast </span><span class="s4">&lt;-</span> <span class="s8">string</span><span class="s5">(msg)</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span><span class="s6">}</span></p>\r\n<p class="p3"><span class="s5"><span class="Apple-converted-space">  </span></span><span class="s7"><span class="Apple-converted-space">    </span></span><span class="s6">d</span><span class="s5">efer</span> <span class="s5">func</span><span class="s7">() {</span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>Println(</span><span class="s9">"defering"</span><span class="s5">)</span></p>\r\n<p class="p1"><span class="s4"> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>h.un</span><span class="s2">register</span> <span class="s4">&lt;-</span><span class="s5"> c</span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>c.ws.</span><span class="s8">Close</span><span class="s5">()</span></p>\r\n<p class="p1"><span class="s5">     </span> <span class="s5">   </span><span class="s4">close</span><span class="s5">(c.send)</span></p>\r\n<p class="p1"><span class="s6">}</span><span class="s5">()</span></p>\r\n<p class="p1">}</p>\r\n<p class="p1">新的方案就是把除第一行以外的代码，从for开始，到close下面的独立出来，放在一个新的函数里面，然后调用这个函数，h.register &lt;- c 保留在Index函数里，这样在调用新函数的时候，监听h.register的函数就能捕捉到register的变化了</p>', 'websocket 信道的坑', '', 'inherit', 'open', 'open', '', '288-revision-v1', '', '', '2015-05-29 07:55:41', '2015-05-29 07:55:41', '', 288, 'http://unasm.sinaapp.com/?p=292', 0, 'revision', '', 0),
(293, 1, '2015-05-29 08:48:57', '2015-05-29 08:48:57', '今天遇到一个问题，功能很简单，就是给线上的文章加锁，每篇文章只能由一个人访问编辑，设想很简单，两个结构体，一个结构体 hub 保存全部的正在被访问的文章的列表，一个结构体 client 是文章的内容以及属性。当每个文章被访问的时候，将放入信道hub的一个信道之中，单独开一个goroutine , 监听goroutine的信号变化，一旦信道变化，就读取变化，然后放入数组中。\r\n\r\n很简单，对吧。但就是出了奇葩问题。\r\n\r\n我开始的时候，准备两个函数,一个Index，处理http/websocket请求，一个是监听hub信道变化的，在Index 函数里面,通过信道将正在访问的文章信息传递给hub，然后我发现了灵异的情况，就是及时赋值给信道，也是没有用处的，必须等这个链接短开之后，被监听到，但是这个时候，链接已经断开了，文章已经不被访问了。\r\n\r\n解决方法是写三个函数，一个是监听hub信道变化的，一个是原来的Index，然后把阻塞监听websocket 链接的部分放在一个新的函数里面，然后将对hub信道变化的部分放在Index里面，这样，等Index函数执行完毕的时候，Hub就能捕捉到信道变化了。\r\n\r\nHere is the code\r\n<p class="p1"><span class="s1">func</span> <span class="s3">Ind</span><span class="s4">e</span><span class="s3">x</span><span class="s2">(w http.ResponseWriter, r </span><span class="s1">*</span><span class="s2">http.Request) {</span></p>\r\n.......\r\n<p class="p1"><span class="s1">  h.</span><span class="s2">register</span> <span class="s3">&lt;-</span><span class="s1"> c<span class="Apple-converted-space">                                                                                                                                                           </span></span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span><span class="s6">f</span><span class="s4">or</span><span class="s5"> {</span></p>\r\n<p class="p2"><span class="s7"><span class="Apple-converted-space">    </span></span> <span class="s7"> <span class="Apple-converted-space">  </span></span><span class="s5">//守护着这个连接，从连接中读取信息，然后通过信道传递给broadcast ，进入传递的队列</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>_, msg, err </span><span class="s4">:=</span><span class="s5"> c.ws.</span><span class="s8">ReadMessage</span><span class="s5">()</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span></span><span class="s4">if</span><span class="s5"> err </span><span class="s4">!=</span> <span class="s9">nil</span><span class="s5"> {</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">      </span></span><span class="s4">break</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>}</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>h.broadcast </span><span class="s4">&lt;-</span> <span class="s8">string</span><span class="s5">(msg)</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span><span class="s6">}</span></p>\r\n<p class="p3"><span class="s5"><span class="Apple-converted-space">  </span></span><span class="s7"><span class="Apple-converted-space">    </span></span><span class="s6">d</span><span class="s5">efer</span> <span class="s5">func</span><span class="s7">() {</span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>Println(</span><span class="s9">"defering"</span><span class="s5">)</span></p>\r\n<p class="p1"><span class="s4"> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>h.un</span><span class="s2">register</span> <span class="s4">&lt;-</span><span class="s5"> c</span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>c.ws.</span><span class="s8">Close</span><span class="s5">()</span></p>\r\n<p class="p1"><span class="s5">     </span> <span class="s5">   </span><span class="s4">close</span><span class="s5">(c.send)</span></p>\r\n<p class="p1"><span class="s6">}</span><span class="s5">()</span></p>\r\n<p class="p1">}</p>\r\n<p class="p1">新的方案就是把除第一行以外的代码，从for开始，到close下面的独立出来，放在一个新的函数里面，然后调用这个函数，h.register &lt;- c 保留在Index函数里，这样在调用新函数的时候，监听h.register的函数就能捕捉到register的变化了</p>\r\n<p class="p1"></p>\r\n<p class="p1">/****************************************************************************************/</p>\r\n<p class="p1">经朋友指点，指出是缓冲的问题，register变量声明的时候，是通过make(chan *client)的方式，这样声明会默认自己带缓冲，所以可以通过make(chan *client，1)的方式，这样赋值之后，立即生效，检测register变化的函数立即就捕捉到了信道的变化，</p>', 'golang 信道的坑', '', 'inherit', 'open', 'open', '', '288-revision-v1', '', '', '2015-05-29 08:48:57', '2015-05-29 08:48:57', '', 288, 'http://unasm.sinaapp.com/?p=293', 0, 'revision', '', 0),
(294, 1, '2015-05-29 08:49:41', '2015-05-29 08:49:41', '今天遇到一个问题，功能很简单，就是给线上的文章加锁，每篇文章只能由一个人访问编辑，设想很简单，两个结构体，一个结构体 hub 保存全部的正在被访问的文章的列表，一个结构体 client 是文章的内容以及属性。当每个文章被访问的时候，将放入信道hub的一个信道之中，单独开一个goroutine , 监听goroutine的信号变化，一旦信道变化，就读取变化，然后放入数组中。\r\n\r\n很简单，对吧。但就是出了奇葩问题。\r\n\r\n我开始的时候，准备两个函数,一个Index，处理http/websocket请求，一个是监听hub信道变化的，在Index 函数里面,通过信道将正在访问的文章信息传递给hub，然后我发现了灵异的情况，就是及时赋值给信道，也是没有用处的，必须等这个链接短开之后，被监听到，但是这个时候，链接已经断开了，文章已经不被访问了。\r\n\r\n解决方法是写三个函数，一个是监听hub信道变化的，一个是原来的Index，然后把阻塞监听websocket 链接的部分放在一个新的函数里面，然后将对hub信道变化的部分放在Index里面，这样，等Index函数执行完毕的时候，Hub就能捕捉到信道变化了。\r\n\r\nHere is the code\r\n<p class="p1"><span class="s1">func</span> <span class="s3">Ind</span><span class="s4">e</span><span class="s3">x</span><span class="s2">(w http.ResponseWriter, r </span><span class="s1">*</span><span class="s2">http.Request) {</span></p>\r\n.......\r\n<p class="p1"><span class="s1">  h.</span><span class="s2">register</span> <span class="s3">&lt;-</span><span class="s1"> c<span class="Apple-converted-space">                                                                                                                                                           </span></span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span><span class="s6">f</span><span class="s4">or</span><span class="s5"> {</span></p>\r\n<p class="p2"><span class="s7"><span class="Apple-converted-space">    </span></span> <span class="s7"> <span class="Apple-converted-space">  </span></span><span class="s5">//守护着这个连接，从连接中读取信息，然后通过信道传递给broadcast ，进入传递的队列</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>_, msg, err </span><span class="s4">:=</span><span class="s5"> c.ws.</span><span class="s8">ReadMessage</span><span class="s5">()</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span></span><span class="s4">if</span><span class="s5"> err </span><span class="s4">!=</span> <span class="s9">nil</span><span class="s5"> {</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">      </span></span><span class="s4">break</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>}</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>h.broadcast </span><span class="s4">&lt;-</span> <span class="s8">string</span><span class="s5">(msg)</span></p>\r\n<p class="p1"><span class="s4"><span class="Apple-converted-space">  </span> </span><span class="s5"><span class="Apple-converted-space">    </span></span><span class="s6">}</span></p>\r\n<p class="p3"><span class="s5"><span class="Apple-converted-space">  </span></span><span class="s7"><span class="Apple-converted-space">    </span></span><span class="s6">d</span><span class="s5">efer</span> <span class="s5">func</span><span class="s7">() {</span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>Println(</span><span class="s9">"defering"</span><span class="s5">)</span></p>\r\n<p class="p1"><span class="s4"> </span><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>h.un</span><span class="s2">register</span> <span class="s4">&lt;-</span><span class="s5"> c</span></p>\r\n<p class="p1"><span class="s5"><span class="Apple-converted-space">    </span></span> <span class="s5"> <span class="Apple-converted-space">  </span>c.ws.</span><span class="s8">Close</span><span class="s5">()</span></p>\r\n<p class="p1"><span class="s5">     </span> <span class="s5">   </span><span class="s4">close</span><span class="s5">(c.send)</span></p>\r\n<p class="p1"><span class="s6">}</span><span class="s5">()</span></p>\r\n<p class="p1">}</p>\r\n<p class="p1">新的方案就是把除第一行以外的代码，从for开始，到close下面的独立出来，放在一个新的函数里面，然后调用这个函数，h.register &lt;- c 保留在Index函数里，这样在调用新函数的时候，监听h.register的函数就能捕捉到register的变化了</p>\r\n<p class="p1">/****************************************************************************************/</p>\r\n<p class="p1">经朋友指点，指出是缓冲的问题，register变量声明的时候，是通过make(chan *client)的方式，这样声明会默认自己带缓冲，所以可以通过make(chan *client，1)的方式，这样赋值之后，立即生效，检测register变化的函数立即就捕捉到了信道的变化，</p>', 'golang 信道的坑', '', 'inherit', 'open', 'open', '', '288-revision-v1', '', '', '2015-05-29 08:49:41', '2015-05-29 08:49:41', '', 288, 'http://unasm.sinaapp.com/?p=294', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(296, 1, '2015-05-30 06:20:26', '2015-05-30 06:20:26', 'golang有所谓的阻塞，也就是说，等待io变化，比如select 监听信道变化，等待websocket连接变化，而这个阻塞，同时也会带来代码上的阻塞，比如\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space"> </span></span>        for {</p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>select {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>case &lt;-ticker.C:</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>Println("time counting")</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>//发送一个ping信号</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>if err := c.ws.WriteMessage(websocket.PingMessage, []byte{}); err != nil {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>return</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>}</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>case flag := &lt;-c.shutdown:</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>if flag == true {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>Println("shuting down")</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>return</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>}</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>}</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>}</span></p>\r\n<p class="p1"><span class="s1"> defer func() {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>Println("stoping")</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>c.ws.Close()</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>h.unregister &lt;- c</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>close(c.shutdown)</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>}()</span></p>\r\n<p class="p1"> 这个defer是没有用的，因为会监听信道变化，代码执行到for之后，就不再执行了，即使加上break，因为在for循环里面，直接return掉了，defer事件根本没有注册上，所以最好的办法就是把defer向上移动，放在for循环之前。同一个函数里面，绝对不能放两个阻塞的监听，要通过信道控制变化</p>', 'golang的阻塞', '', 'publish', 'open', 'open', '', 'golang%e7%9a%84%e9%98%bb%e5%a1%9e', '', '', '2015-05-30 12:59:56', '2015-05-30 12:59:56', '', 0, 'http://unasm.sinaapp.com/?p=296', 0, 'post', '', 0),
(297, 1, '2015-05-30 06:20:26', '2015-05-30 06:20:26', 'golang有所谓的阻塞，也就是说，等待io变化，比如select 监听信道变化，等待websocket连接变化，而这个阻塞，同时也会带来代码上的阻塞，比如\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space"> </span></span>        for {</p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>select {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>case &lt;-ticker.C:</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>Println("time counting")</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>//发送一个ping信号</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>if err := c.ws.WriteMessage(websocket.PingMessage, []byte{}); err != nil {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>return</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>}</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>case flag := &lt;-c.shutdown:</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>if flag == true {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>Println("shuting down")</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                                </span>return</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                        </span>}</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>}</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>}</span></p>\r\n<p class="p1"><span class="s1"> defer func() {</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>Println("stoping")</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>c.ws.Close()</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>h.unregister &lt;- c</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">                </span>close(c.shutdown)</span></p>\r\n<p class="p1"><span class="s1"><span class="Apple-converted-space">        </span>}()</span></p>\r\n<p class="p1"> 这个defer是没有用的，因为会监听信道变化，代码执行到for之后，就不再执行了，即使加上break，因为在for循环里面，直接return掉了，defer事件根本没有注册上，所以最好的办法就是把defer向上移动，放在for循环之前。同一个函数里面，绝对不能放两个阻塞的监听，要通过信道控制变化</p>', 'golang的阻塞', '', 'inherit', 'open', 'open', '', '296-revision-v1', '', '', '2015-05-30 06:20:26', '2015-05-30 06:20:26', '', 296, 'http://unasm.sinaapp.com/?p=297', 0, 'revision', '', 0),
(298, 1, '2015-05-30 13:43:51', '2015-05-30 13:43:51', 'golang 的 runtime包可以用来检测内存的使用情况，主要内存使用情况，都在MemStats结构体里面\r\n<pre> type MemStats struct {\r\n    // 常用数据   \r\n    Alloc      <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 系统分配了，并且仍在使用的内存</span>\r\n    TotalAlloc <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 分配的内存总量</span>\r\n    Sys        <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 从系统得到的内存总量</span>\r\n    Lookups    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 回环指针数量</span>\r\n    Mallocs    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 分配次数</span>\r\n    Frees      <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 内存释放次数</span>\r\n\r\n    <span class="comment">// 主要的堆数据</span>\r\n    HeapAlloc    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 分配了之后，并且仍在使用的堆内存</span>\r\n    HeapSys      <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 从系统申请的堆内存大小</span>\r\n    HeapIdle     <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 闲置状态的的span</span>\r\n    HeapInuse    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 非限制状体的span  HeapIdle + HeapInuse = HeapSys</span>\r\n    HeapReleased <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 从系统中释放的内存大小</span>\r\n    HeapObjects  <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 一共分配的对象数量</span>\r\n\r\n    <span class="comment">//底层的固定分配数据</span>\r\n    <span class="comment">//	按字节计算容量</span>\r\n    <span class="comment">//	Sys is bytes obtained from system.</span>\r\n    StackInuse  <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 栈分配使用的内存</span>\r\n    StackSys    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>  //系统帐使用的内存量\r\n    MSpanInuse  <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// mspan结构 使用的量</span>\r\n    MSpanSys    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\r\n    MCacheInuse <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// mcache 结构使用的量</span>\r\n    MCacheSys   <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>  //系统mcache结构使用的量\r\n    BuckHashSys <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// profiling bucket hash table,系统hash表使用情况</span>\r\n    GCSys       <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// GC 的元数据</span>\r\n    OtherSys    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 其他的系统分配数据</span>\r\n\r\n    <span class="comment">// Garbage collector statistics.</span>\r\n    NextGC       <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 当 HeapAlloc 大于该值的时候，会进行垃圾回收</span>\r\n    LastGC       <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 上一次垃圾回收的时间</span>\r\n    PauseTotalNs <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\r\n    PauseNs      [256]<a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// circular buffer of recent GC pause durations, most recent at [(NumGC+255)%256]</span></pre>\r\n<pre>    PauseEnd     [256]<a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// circular buffer of recent GC pause end times</span>\r\n    NumGC        <a href="http://127.0.0.1:8080/pkg/builtin/#uint32">uint32</a>\r\n    EnableGC     <a href="http://127.0.0.1:8080/pkg/builtin/#bool">bool</a>\r\n    DebugGC      <a href="http://127.0.0.1:8080/pkg/builtin/#bool">bool</a>\r\n\r\n    <span class="comment">// Per-size allocation statistics.</span>\r\n    <span class="comment">// 61 is NumSizeClasses in the C code.</span>\r\n    BySize [61]struct {\r\n        Size    <a href="http://127.0.0.1:8080/pkg/builtin/#uint32">uint32</a>\r\n        Mallocs <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\r\n        Frees   <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\r\n    }\r\n}</pre>', 'golang之内存使用报告', '', 'publish', 'open', 'open', '', 'golang%e4%b9%8b%e5%86%85%e5%ad%98%e4%bd%bf%e7%94%a8%e6%8a%a5%e5%91%8a', '', '', '2015-07-14 05:54:16', '2015-07-14 05:54:16', '', 0, 'http://unasm.sinaapp.com/?p=298', 0, 'post', '', 0),
(299, 1, '2015-05-30 13:43:51', '2015-05-30 13:43:51', 'golang 的 runtime包可以用来检测内存的使用情况，主要内存使用情况，都在MemStats结构体里面\r\n<pre>\r\n type MemStats struct {\r\n    // 常用数据   \r\n    Alloc      <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 系统分配了，并且仍在使用的内存</span>\r\n    TotalAlloc <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 分配的内存总量</span>\r\n    Sys        <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 从系统得到的内存总量</span>\r\n    Lookups    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 回环指针数量</span>\r\n    Mallocs    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 分配次数</span>\r\n    Frees      <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 内存释放次数</span>\r\n\r\n    <span class="comment">// 主要的堆数据</span>\r\n    HeapAlloc    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 分配，并且仍在使用的堆内存</span>\r\n    HeapSys      <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 从系统申请的堆内存大小</span>\r\n    HeapIdle     <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 闲置的内存大小</span>\r\n    HeapInuse    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 使用中的内存大小</span>\r\n    HeapReleased <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 从系统中释放的内存大小</span>\r\n    HeapObjects  <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 一共分配的对象数量</span>\r\n\r\n    <span class="comment">//底层的固定分配数据</span>\r\n    <span class="comment">//	按字节计算容量</span>\r\n    <span class="comment">//	Sys is bytes obtained from system.</span>\r\n    StackInuse  <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 栈分配使用的内存</span>\r\n    StackSys    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>  //系统帐使用的内存量\r\n    MSpanInuse  <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// mspan结构 使用的量</span>\r\n    MSpanSys    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\r\n    MCacheInuse <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// mcache 结构使用的量</span>\r\n    MCacheSys   <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>  //系统mcache结构使用的量\r\n    BuckHashSys <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// profiling bucket hash table,系统hash表使用情况</span>\r\n    GCSys       <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// GC 的元数据</span>\r\n    OtherSys    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 其他的系统分配数据</span>\r\n\r\n    <span class="comment">// Garbage collector statistics.</span>\r\n    NextGC       <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 当 HeapAlloc 大于该值的时候，会进行垃圾回收</span>\r\n    LastGC       <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 上一次垃圾回收的时间</span>\r\n    PauseTotalNs <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\r\n    PauseNs      [256]<a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// circular buffer of recent GC pause durations, most recent at [(NumGC+255)%256]</span></pre>\r\n<pre>\r\n    PauseEnd     [256]<a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// circular buffer of recent GC pause end times</span>\r\n    NumGC        <a href="http://127.0.0.1:8080/pkg/builtin/#uint32">uint32</a>\r\n    EnableGC     <a href="http://127.0.0.1:8080/pkg/builtin/#bool">bool</a>\r\n    DebugGC      <a href="http://127.0.0.1:8080/pkg/builtin/#bool">bool</a>\r\n\r\n    <span class="comment">// Per-size allocation statistics.</span>\r\n    <span class="comment">// 61 is NumSizeClasses in the C code.</span>\r\n    BySize [61]struct {\r\n        Size    <a href="http://127.0.0.1:8080/pkg/builtin/#uint32">uint32</a>\r\n        Mallocs <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\r\n        Frees   <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\r\n    }\r\n}</pre>', 'golang之内存使用报告', '', 'inherit', 'open', 'open', '', '298-revision-v1', '', '', '2015-05-30 13:43:51', '2015-05-30 13:43:51', '', 298, 'http://unasm.sinaapp.com/?p=299', 0, 'revision', '', 0),
(300, 1, '2015-05-30 13:46:14', '2015-05-30 13:46:14', 'golang 的 runtime包可以用来检测内存的使用情况，主要内存使用情况，都在MemStats结构体里面\r\n<pre> type MemStats struct {\r\n    // 常用数据   \r\n    Alloc      <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 系统分配了，并且仍在使用的内存</span>\r\n    TotalAlloc <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 分配的内存总量</span>\r\n    Sys        <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 从系统得到的内存总量</span>\r\n    Lookups    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 回环指针数量</span>\r\n    Mallocs    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 分配次数</span>\r\n    Frees      <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 内存释放次数</span>\r\n\r\n    <span class="comment">// 主要的堆数据</span>\r\n    HeapAlloc    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 分配，并且仍在使用的堆内存</span>\r\n    HeapSys      <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 从系统申请的堆内存大小</span>\r\n    HeapIdle     <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 闲置的内存大小</span>\r\n    HeapInuse    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 使用中的内存大小</span>\r\n    HeapReleased <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 从系统中释放的内存大小</span>\r\n    HeapObjects  <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 一共分配的对象数量</span>\r\n\r\n    <span class="comment">//底层的固定分配数据</span>\r\n    <span class="comment">//	按字节计算容量</span>\r\n    <span class="comment">//	Sys is bytes obtained from system.</span>\r\n    StackInuse  <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 栈分配使用的内存</span>\r\n    StackSys    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>  //系统帐使用的内存量\r\n    MSpanInuse  <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// mspan结构 使用的量</span>\r\n    MSpanSys    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\r\n    MCacheInuse <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// mcache 结构使用的量</span>\r\n    MCacheSys   <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>  //系统mcache结构使用的量\r\n    BuckHashSys <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// profiling bucket hash table,系统hash表使用情况</span>\r\n    GCSys       <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// GC 的元数据</span>\r\n    OtherSys    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 其他的系统分配数据</span>\r\n\r\n    <span class="comment">// Garbage collector statistics.</span>\r\n    NextGC       <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 当 HeapAlloc 大于该值的时候，会进行垃圾回收</span>\r\n    LastGC       <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 上一次垃圾回收的时间</span>\r\n    PauseTotalNs <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\r\n    PauseNs      [256]<a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// circular buffer of recent GC pause durations, most recent at [(NumGC+255)%256]</span></pre>\r\n<pre>    PauseEnd     [256]<a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// circular buffer of recent GC pause end times</span>\r\n    NumGC        <a href="http://127.0.0.1:8080/pkg/builtin/#uint32">uint32</a>\r\n    EnableGC     <a href="http://127.0.0.1:8080/pkg/builtin/#bool">bool</a>\r\n    DebugGC      <a href="http://127.0.0.1:8080/pkg/builtin/#bool">bool</a>\r\n\r\n    <span class="comment">// Per-size allocation statistics.</span>\r\n    <span class="comment">// 61 is NumSizeClasses in the C code.</span>\r\n    BySize [61]struct {\r\n        Size    <a href="http://127.0.0.1:8080/pkg/builtin/#uint32">uint32</a>\r\n        Mallocs <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\r\n        Frees   <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\r\n    }\r\n}</pre>', 'golang之内存使用报告', '', 'inherit', 'open', 'open', '', '298-revision-v1', '', '', '2015-05-30 13:46:14', '2015-05-30 13:46:14', '', 298, 'http://unasm.sinaapp.com/?p=300', 0, 'revision', '', 0),
(301, 1, '2015-05-31 05:53:32', '2015-05-31 05:53:32', 'golang 的 runtime包可以用来检测内存的使用情况，主要内存使用情况，都在MemStats结构体里面\n<pre> type MemStats struct {\n    // 常用数据   \n    Alloc      <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 系统分配了，并且仍在使用的内存</span>\n    TotalAlloc <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 分配的内存总量</span>\n    Sys        <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 从系统得到的内存总量</span>\n    Lookups    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 回环指针数量</span>\n    Mallocs    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 分配次数</span>\n    Frees      <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 内存释放次数</span>\n\n    <span class="comment">// 主要的堆数据</span>\n    HeapAlloc    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 分配了之后，并且仍在使用的堆内存</span>\n    HeapSys      <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 从系统申请的堆内存大小</span>\n    HeapIdle     <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 闲置状态的的span</span>\n    HeapInuse    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 非限制状体的span  HeapIdle + HeapInuse = HeapSys</span>\n    HeapReleased <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 从系统中释放的内存大小</span>\n    HeapObjects  <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 一共分配的对象数量</span>\n\n    <span class="comment">//底层的固定分配数据</span>\n    <span class="comment">//	按字节计算容量</span>\n    <span class="comment">//	Sys is bytes obtained from system.</span>\n    StackInuse  <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 栈分配使用的内存</span>\n    StackSys    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>  //系统帐使用的内存量\n    MSpanInuse  <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// mspan结构 使用的量</span>\n    MSpanSys    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\n    MCacheInuse <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// mcache 结构使用的量</span>\n    MCacheSys   <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>  //系统mcache结构使用的量\n    BuckHashSys <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// profiling bucket hash table,系统hash表使用情况</span>\n    GCSys       <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// GC 的元数据</span>\n    OtherSys    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 其他的系统分配数据</span>\n\n    <span class="comment">// Garbage collector statistics.</span>\n    NextGC       <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 当 HeapAlloc 大于该值的时候，会进行垃圾回收</span>\n    LastGC       <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 上一次垃圾回收的时间</span>\n    PauseTotalNs <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\n    PauseNs      [256]<a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// circular buffer of recent GC pause durations, most recent at [(NumGC+255)%256]</span></pre>\n<pre>    PauseEnd     [256]<a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// circular buffer of recent GC pause end times</span>\n    NumGC        <a href="http://127.0.0.1:8080/pkg/builtin/#uint32">uint32</a>\n    EnableGC     <a href="http://127.0.0.1:8080/pkg/builtin/#bool">bool</a>\n    DebugGC      <a href="http://127.0.0.1:8080/pkg/builtin/#bool">bool</a>\n\n    <span class="comment">// Per-size allocation statistics.</span>\n    <span class="comment">// 61 is NumSizeClasses in the C code.</span>\n    BySize [61]struct {\n        Size    <a href="http://127.0.0.1:8080/pkg/builtin/#uint32">uint32</a>\n        Mallocs <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\n        Frees   <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\n    }\n}</pre>', 'golang之内存使用报告', '', 'inherit', 'open', 'open', '', '298-autosave-v1', '', '', '2015-05-31 05:53:32', '2015-05-31 05:53:32', '', 298, 'http://unasm.sinaapp.com/?p=301', 0, 'revision', '', 0),
(302, 1, '2015-05-31 05:53:45', '2015-05-31 05:53:45', 'golang 的 runtime包可以用来检测内存的使用情况，主要内存使用情况，都在MemStats结构体里面\r\n<pre> type MemStats struct {\r\n    // 常用数据   \r\n    Alloc      <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 系统分配了，并且仍在使用的内存</span>\r\n    TotalAlloc <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 分配的内存总量</span>\r\n    Sys        <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 从系统得到的内存总量</span>\r\n    Lookups    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 回环指针数量</span>\r\n    Mallocs    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 分配次数</span>\r\n    Frees      <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 内存释放次数</span>\r\n\r\n    <span class="comment">// 主要的堆数据</span>\r\n    HeapAlloc    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 分配了之后，并且仍在使用的堆内存</span>\r\n    HeapSys      <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 从系统申请的堆内存大小</span>\r\n    HeapIdle     <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 闲置状态的的span</span>\r\n    HeapInuse    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 非限制状体的span  HeapIdle + HeapInuse = HeapSys</span>\r\n    HeapReleased <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 从系统中释放的内存大小</span>\r\n    HeapObjects  <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 一共分配的对象数量</span>\r\n\r\n    <span class="comment">//底层的固定分配数据</span>\r\n    <span class="comment">//	按字节计算容量</span>\r\n    <span class="comment">//	Sys is bytes obtained from system.</span>\r\n    StackInuse  <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 栈分配使用的内存</span>\r\n    StackSys    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>  //系统帐使用的内存量\r\n    MSpanInuse  <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// mspan结构 使用的量</span>\r\n    MSpanSys    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\r\n    MCacheInuse <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// mcache 结构使用的量</span>\r\n    MCacheSys   <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>  //系统mcache结构使用的量\r\n    BuckHashSys <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// profiling bucket hash table,系统hash表使用情况</span>\r\n    GCSys       <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// GC 的元数据</span>\r\n    OtherSys    <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 其他的系统分配数据</span>\r\n\r\n    <span class="comment">// Garbage collector statistics.</span>\r\n    NextGC       <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 当 HeapAlloc 大于该值的时候，会进行垃圾回收</span>\r\n    LastGC       <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// 上一次垃圾回收的时间</span>\r\n    PauseTotalNs <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\r\n    PauseNs      [256]<a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// circular buffer of recent GC pause durations, most recent at [(NumGC+255)%256]</span></pre>\r\n<pre>    PauseEnd     [256]<a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a> <span class="comment">// circular buffer of recent GC pause end times</span>\r\n    NumGC        <a href="http://127.0.0.1:8080/pkg/builtin/#uint32">uint32</a>\r\n    EnableGC     <a href="http://127.0.0.1:8080/pkg/builtin/#bool">bool</a>\r\n    DebugGC      <a href="http://127.0.0.1:8080/pkg/builtin/#bool">bool</a>\r\n\r\n    <span class="comment">// Per-size allocation statistics.</span>\r\n    <span class="comment">// 61 is NumSizeClasses in the C code.</span>\r\n    BySize [61]struct {\r\n        Size    <a href="http://127.0.0.1:8080/pkg/builtin/#uint32">uint32</a>\r\n        Mallocs <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\r\n        Frees   <a href="http://127.0.0.1:8080/pkg/builtin/#uint64">uint64</a>\r\n    }\r\n}</pre>', 'golang之内存使用报告', '', 'inherit', 'open', 'open', '', '298-revision-v1', '', '', '2015-05-31 05:53:45', '2015-05-31 05:53:45', '', 298, 'http://unasm.sinaapp.com/?p=302', 0, 'revision', '', 0),
(303, 1, '2015-06-01 04:05:25', '2015-06-01 04:05:25', '<h2>环境变量</h2>\r\nruntime 包含的是go实时运行系统的一些交互操作，比如控制goroutines,也包含了一些使用反射包获得的底层信息，具体见反射包关于实时系统的接口。\r\n\r\n下面的环境变量（$name或者是%name%，取决于运行的操作系统）控制go运行时候的实时行为，这个意义和使用方法，也许会在不同版本之间变化（目前1.4版）。\r\n\r\nGOGC变量设置垃圾回收的百分比，当新添加的数据加上上次垃圾回收之后留下的数据重新达到这个比例之后，会再次出发垃圾回收，默认的GOGC是100，设置gogc=off会彻底禁止垃圾回收，runtime/debug包的SetGCPercent函数会允许在运行时修改该参数。详见<a href="http://golang.org/pkg/runtime/debug/#SetGCPercent">http://golang.org/pkg/runtime/debug/#SetGCPercent</a>.\r\n\r\nGODEBUG变量控制着运行时的debug输出，GODEBUG变量是一个逗号分隔的键值对，支持的键名有\r\n<ol>\r\n	<li>allocfreetrace ：设置 allocfreetrace = 1会让每次分配和释放都记录并且可以被栈追踪打印到</li>\r\n	<li>efence : 设置efence = 1会让分配器给每一个对象都分配一个单独的页，并且该页不会再被重复利用了</li>\r\n	<li>gctrace : 设置 gctrace = 1 会让垃圾回收器每次回收的时候都发送一个一行到error，描述回收的量和停顿的时间长度，设置gctrace = 2 ，不止会得到上述结果，但是还有重复的次数。</li>\r\n	<li>gcdead: 设置gcdead = 1 会毁了所有他认为死掉了执行堆栈。</li>\r\n	<li>invalidptr : 默认invalidptr = 1，如果指针被赋予一个无效值,会引起程序的崩溃，设置该值为0，会停止该检查，这个只能临时用于查找bug，真正的解决方法是不要把整数类型的值存在指针变量里面。</li>\r\n	<li>scheddetail : 设置 scheddetail= 1 &amp;&amp; schedtrace = X 会让调度器 发出来一个详细的Xms内多线调度信息，描述调度器的情况，如线程，进程，协程等等。</li>\r\n	<li>schedtrace: 同上</li>\r\n	<li>scavenge : scavenge=1 enables debugging mode of heap scavenger</li>\r\n</ol>\r\n变量GOMAXPROCS限制操作系统可以 同时运行的用户级别的go代码数量，但是对于出于阻塞状态的线程数量是没有限制的，这些是不受GOMAXPROCS 限制的，GOMAXPROCS 是可以修改该限制的（注：NumCPU() 函数可以获取当前系统的CPU数目，可以根据该结果确认GOMAXPROCS的值）。\r\n\r\nGOTRACEBACK可以控制go成语因为未恢复的panic和意外情况造成的崩溃的时候输出栈数量，默认会输出所有的尚存的goroutine，内置函数到实时系统，如果以退出码2退出，如果GOTRACEBACK 设置成0，那goroutine追踪栈会全部输出，GOTRACEBACK 设置成1，采用默认的行为，如果GOTRACEBACK设置成2，不仅输出全部的栈，还有实时交互系统的函数，如果GOTRACEBACK 设置成crash,不仅包括输出栈和实时系统本身的函数，还有尽可能的以操作系统规定的方式退出而不是立即退出，比如在unix系统上，程序会发送一个SIGABRT 去触发一个core dump。\r\n\r\nGOARCH, GOOS, GOPATH, 和 GOROOT 这些环境变量。题目影响go程序的构建。\r\n<h2><strong>常量</strong></h2>\r\n<pre>const <span id="Compiler">Compiler</span> = "gc" \r\n编译器是构建运行的二进制代码的工具集的名字，一直的工具集名字有</pre>\r\n<pre>gc      The 5g/6g/8g compiler suite at code.google.com/p/go.\r\ngccgo   The gccgo front end, part of the GCC compiler suite.</pre>\r\n<pre>const <span id="GOARCH">GOARCH</span> <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a> = theGoarch\r\nGOARCH  是运行程序的CPU架构：386，amd64，或者是arm</pre>\r\n<pre>const <span id="GOOS">GOOS</span> <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a> = theGoos\r\nGOOS 是运行程序的操作系统，darwin,freebsd,linux等等\r\n\r\n</pre>\r\n<h2>变量</h2>\r\nvar MemProfileRate int = 512 * 1024\r\n\r\nMemProfileRate 会在内存profile 里面 保存内存分配的频率和报告频率，profile的目标是对内存分配的平均情况进行采样分析。 为了在内存profile分析报告里面记录每一次内存分配的情况，请将MemProfileRate 设置成1，如果彻底关闭内存分析，请将MemProfileRate 设置成0， 该工具会会在整个程序的生命周期里面不停地以设置的频率对内存进行采样分析，修改内存采样频率的操作只应该做一次，并且最好尽可能的早做。\r\n\r\n&nbsp;\r\n<h2>func BlockProfile</h2>\r\nfunc BlockProfile(p []BlockProfileRecord) (n int, ok bool)\r\n\r\n该函数返回n,几率的是当前阻塞的报告。如果len(p) &gt;= n ,该函数会拷贝分析报告进入p，并且返回n，如果len(p) &lt; n, BlockProfile 不做任何修改，只是返回n，false。\r\n\r\nMost clients should use the runtime/pprof package or the testing package''s -test.blockprofile flag instead of calling BlockProfile directly.\r\n\r\n&nbsp;\r\n<h2>func CPUProfile</h2>\r\nfunc CPUProfile() []byte\r\n\r\nCPUProfile returns the next chunk of binary CPU profiling stack trace data, blocking until data is available. If profiling is turned off and all the profile data accumulated while it was on has been returned, CPUProfile returns nil. The caller must save the returned data before calling CPUProfile again.\r\n\r\nMost clients should use the runtime/pprof package or the testing package''s -test.cpuprofile flag instead of calling CPUProfile directly.\r\n\r\n&nbsp;\r\n\r\n<h2>func GoroutineProfile</h2>\r\n\r\nfunc GoroutineProfile(p [] StackRecord) (n int, ok bool)\r\nGoroutineProfile 返回n，活动gogoutine 站报告的记录数，如果 len(p) >= n，GoroutineProfile 会拷贝报告进入p，然后返回n，如果 len(p) < n , GoroutineProfile并不会改变p，并且返回n，false。\r\n应该使用runtime/pprof包，而不是直接使用GoroutineProfile \r\n\r\n<h2>func NumCPU()</h2>\r\n返回本机逻辑CPUS的数量\r\n<h2>func NumGoroutine</h2>\r\nfunc NumGoroutine int\r\n返回存在的goroutineus 的数量\r\nfunc ReadMemStats(m *MemStats)\r\n\r\n读取内存分配的数据\r\n&nbsp;', 'golang runtime 包官方文档 翻译', '', 'publish', 'open', 'open', '', 'golang-runtime-%e5%8c%85%e5%ae%98%e6%96%b9%e6%96%87%e6%a1%a3-%e7%bf%bb%e8%af%91', '', '', '2015-07-14 09:04:38', '2015-07-14 09:04:38', '', 0, 'http://unasm.sinaapp.com/?p=303', 0, 'post', '', 0),
(304, 1, '2015-06-01 04:05:25', '2015-06-01 04:05:25', 'runtime 包含的是go实时运行系统的一些交互操作，比如控制goroutines,也包含了一些使用反射包获得的底层信息，具体见反射包关于实时系统的接口。\r\n\r\n下面的环境变量（$name或者是%name%，取决于运行的操作系统）控制go运行时候的实时行为，这个意义和使用方法，也许会在不同版本之间变化（目前1.4版）。\r\n\r\nGOGC变量设置垃圾回收的百分比，当新添加的数据加上上次垃圾回收之后留下的数据重新达到这个比例之后，会再次出发垃圾回收，默认的GOGC是100，设置gogc=off会彻底禁止垃圾回收，runtime/debug包的SetGCPercent函数会允许在运行时修改该参数。详见<a href="http://golang.org/pkg/runtime/debug/#SetGCPercent">http://golang.org/pkg/runtime/debug/#SetGCPercent</a>.\r\n\r\nGODEBUG变量控制着运行时的debug输出，GODEBUG变量是一个逗号分隔的键值对，支持的键名有\r\n<ol>\r\n	<li>allocfreetrace ：设置 allocfreetrace = 1会让每次分配和释放都记录并且可以被栈追踪打印到</li>\r\n	<li>efence : 设置efence = 1会让分配器给每一个对象都分配一个单独的页，并且该页不会再被重复利用了</li>\r\n	<li>gctrace : 设置 gctrace = 1 会让垃圾回收器每次回收的时候都发送一个一行到error，描述回收的量和停顿的时间长度，设置gctrace = 2 ，不止会得到上述结果，但是还有重复的次数。</li>\r\n	<li>gcdead: 设置gcdead = 1 会毁了所有他认为死掉了执行堆栈。</li>\r\n	<li>invalidptr : 默认invalidptr = 1，如果指针被赋予一个无效值,会引起程序的崩溃，设置该值为0，会停止该检查，这个只能临时用于查找bug，真正的解决方法是不要把整数类型的值存在指针变量里面。</li>\r\n	<li>scheddetail : 设置 scheddetail= 1 &amp;&amp; schedtrace = X 会让调度器 发出来一个详细的Xms内多线调度信息，描述调度器的情况，如线程，进程，协程等等。</li>\r\n	<li>schedtrace: 同上</li>\r\n	<li>scavenge : scavenge=1 enables debugging mode of heap scavenger</li>\r\n</ol>\r\n变量GOMAXPROCS限制操作系统可以 同时运行的用户级别的go代码数量，但是对于出于阻塞状态的线程数量是没有限制的，这些是不受GOMAXPROCS 限制的，GOMAXPROCS 是可以修改该限制的（注：NumCPU() 函数可以获取当前系统的CPU数目，可以根据该结果确认GOMAXPROCS的值）。\r\n\r\nGOTRACEBACK可以控制go成语因为未恢复的panic和意外情况造成的崩溃的时候输出栈数量，默认会输出所有的尚存的goroutine，内置函数到实时系统，如果以退出码2退出，如果GOTRACEBACK 设置成0，那goroutine追踪栈会全部输出，GOTRACEBACK 设置成1，采用默认的行为，如果GOTRACEBACK设置成2，不仅输出全部的栈，还有实时交互系统的函数，如果GOTRACEBACK 设置成crash,不仅包括输出栈和实时系统本身的函数，还有尽可能的以操作系统规定的方式退出而不是立即退出，比如在unix系统上，程序会发送一个SIGABRT 去触发一个core dump。\r\n\r\nGOARCH, GOOS, GOPATH, 和 GOROOT 这些环境变量。题目影响go程序的构建。', 'golang runtime 包官方文档 翻译', '', 'inherit', 'open', 'open', '', '303-revision-v1', '', '', '2015-06-01 04:05:25', '2015-06-01 04:05:25', '', 303, 'http://unasm.sinaapp.com/?p=304', 0, 'revision', '', 0),
(305, 1, '2015-06-01 08:26:59', '2015-06-01 08:26:59', '<h2>环境变量</h2>\nruntime 包含的是go实时运行系统的一些交互操作，比如控制goroutines,也包含了一些使用反射包获得的底层信息，具体见反射包关于实时系统的接口。\n\n下面的环境变量（$name或者是%name%，取决于运行的操作系统）控制go运行时候的实时行为，这个意义和使用方法，也许会在不同版本之间变化（目前1.4版）。\n\nGOGC变量设置垃圾回收的百分比，当新添加的数据加上上次垃圾回收之后留下的数据重新达到这个比例之后，会再次出发垃圾回收，默认的GOGC是100，设置gogc=off会彻底禁止垃圾回收，runtime/debug包的SetGCPercent函数会允许在运行时修改该参数。详见<a href="http://golang.org/pkg/runtime/debug/#SetGCPercent">http://golang.org/pkg/runtime/debug/#SetGCPercent</a>.\n\nGODEBUG变量控制着运行时的debug输出，GODEBUG变量是一个逗号分隔的键值对，支持的键名有\n<ol>\n	<li>allocfreetrace ：设置 allocfreetrace = 1会让每次分配和释放都记录并且可以被栈追踪打印到</li>\n	<li>efence : 设置efence = 1会让分配器给每一个对象都分配一个单独的页，并且该页不会再被重复利用了</li>\n	<li>gctrace : 设置 gctrace = 1 会让垃圾回收器每次回收的时候都发送一个一行到error，描述回收的量和停顿的时间长度，设置gctrace = 2 ，不止会得到上述结果，但是还有重复的次数。</li>\n	<li>gcdead: 设置gcdead = 1 会毁了所有他认为死掉了执行堆栈。</li>\n	<li>invalidptr : 默认invalidptr = 1，如果指针被赋予一个无效值,会引起程序的崩溃，设置该值为0，会停止该检查，这个只能临时用于查找bug，真正的解决方法是不要把整数类型的值存在指针变量里面。</li>\n	<li>scheddetail : 设置 scheddetail= 1 &amp;&amp; schedtrace = X 会让调度器 发出来一个详细的Xms内多线调度信息，描述调度器的情况，如线程，进程，协程等等。</li>\n	<li>schedtrace: 同上</li>\n	<li>scavenge : scavenge=1 enables debugging mode of heap scavenger</li>\n</ol>\n变量GOMAXPROCS限制操作系统可以 同时运行的用户级别的go代码数量，但是对于出于阻塞状态的线程数量是没有限制的，这些是不受GOMAXPROCS 限制的，GOMAXPROCS 是可以修改该限制的（注：NumCPU() 函数可以获取当前系统的CPU数目，可以根据该结果确认GOMAXPROCS的值）。\n\nGOTRACEBACK可以控制go成语因为未恢复的panic和意外情况造成的崩溃的时候输出栈数量，默认会输出所有的尚存的goroutine，内置函数到实时系统，如果以退出码2退出，如果GOTRACEBACK 设置成0，那goroutine追踪栈会全部输出，GOTRACEBACK 设置成1，采用默认的行为，如果GOTRACEBACK设置成2，不仅输出全部的栈，还有实时交互系统的函数，如果GOTRACEBACK 设置成crash,不仅包括输出栈和实时系统本身的函数，还有尽可能的以操作系统规定的方式退出而不是立即退出，比如在unix系统上，程序会发送一个SIGABRT 去触发一个core dump。\n\nGOARCH, GOOS, GOPATH, 和 GOROOT 这些环境变量。题目影响go程序的构建。\n<h2><strong>常量</strong></h2>\n<pre>const <span id="Compiler">Compiler</span> = "gc" \n编译器是构建运行的二进制代码的工具集的名字，一直的工具集名字有</pre>\n<pre>gc      The 5g/6g/8g compiler suite at code.google.com/p/go.\ngccgo   The gccgo front end, part of the GCC compiler suite.</pre>\n<pre>const <span id="GOARCH">GOARCH</span> <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a> = theGoarch\nGOARCH  是运行程序的CPU架构：386，amd64，或者是arm</pre>\n<pre>const <span id="GOOS">GOOS</span> <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a> = theGoos\nGOOS 是运行程序的操作系统，darwin,freebsd,linux等等\n\n</pre>\n<h2>变量</h2>\nvar MemProfileRate int = 512 * 1024\n\nMemProfileRate 会在内存profile 里面 保存内存分配的频率和报告频率，profile的目标是对内存分配的平均情况进行采样分析。 为了在内存profile分析报告里面记录每一次内存分配的情况，请将MemProfileRate 设置成1，如果彻底关闭内存分析，请将MemProfileRate 设置成0， 该工具会会在整个程序的生命周期里面不停地以设置的频率对内存进行采样分析，修改内存采样频率的操作只应该做一次，并且最好尽可能的早做。\n\n&nbsp;\n<h2>func BlockProfile</h2>\nfunc BlockProfile(p []BlockProfileRecord) (n int, ok bool)\n\n该函数返回n,几率的是当前阻塞的报告。如果len(p) &gt;= n ,该函数会拷贝分析报告进入p，并且返回n，如果len(p) &lt; n, BlockProfile 不做任何修改，只是返回n，false。\n\nMost clients should use the runtime/pprof package or the testing package''s -test.blockprofile flag instead of calling BlockProfile directly.\n\n&nbsp;\n<h2>func CPUProfile</h2>\nfunc CPUProfile() []byte\n\nCPUProfile returns the next chunk of binary CPU profiling stack trace data, blocking until data is available. If profiling is turned off and all the profile data accumulated while it was on has been returned, CPUProfile returns nil. The caller must save the returned data before calling CPUProfile again.\n\nMost clients should use the runtime/pprof package or the testing package''s -test.cpuprofile flag instead of calling CPUProfile directly.\n\n&nbsp;\n\n<h2>func GoroutineProfile<h2>\n\nfunc GoroutineProfile(p [] StackRecord) (n int, ok bool)\nGoroutineProfile 返回n，活动gogoutine 站报告的记录数，如果 len(p) >= n，GoroutineProfile 会拷贝报告进入p，然后返回n，如果 len(p) < n , GoroutineProfile并不会改变p，并且返回n，false。\n应该使用runtime/pprof包，而不是直接使用GoroutineProfile \n\n<h2>func NumCPU()</h2>\n返回本机逻辑CPUS的数量\n<h2>func NumGoroutine</h2>\nfunc NumGoroutine int\n返回存在的goroutineus 的数量\nfunc ReadMemStats(m *MemStats)\n\n读取内存分配的数据\n&nbsp;', 'golang runtime 包官方文档 翻译', '', 'inherit', 'open', 'open', '', '303-autosave-v1', '', '', '2015-06-01 08:26:59', '2015-06-01 08:26:59', '', 303, 'http://unasm.sinaapp.com/?p=305', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(306, 1, '2015-06-01 07:16:40', '2015-06-01 07:16:40', '<h2>环境变量</h2>\r\nruntime 包含的是go实时运行系统的一些交互操作，比如控制goroutines,也包含了一些使用反射包获得的底层信息，具体见反射包关于实时系统的接口。\r\n\r\n下面的环境变量（$name或者是%name%，取决于运行的操作系统）控制go运行时候的实时行为，这个意义和使用方法，也许会在不同版本之间变化（目前1.4版）。\r\n\r\nGOGC变量设置垃圾回收的百分比，当新添加的数据加上上次垃圾回收之后留下的数据重新达到这个比例之后，会再次出发垃圾回收，默认的GOGC是100，设置gogc=off会彻底禁止垃圾回收，runtime/debug包的SetGCPercent函数会允许在运行时修改该参数。详见<a href="http://golang.org/pkg/runtime/debug/#SetGCPercent">http://golang.org/pkg/runtime/debug/#SetGCPercent</a>.\r\n\r\nGODEBUG变量控制着运行时的debug输出，GODEBUG变量是一个逗号分隔的键值对，支持的键名有\r\n<ol>\r\n	<li>allocfreetrace ：设置 allocfreetrace = 1会让每次分配和释放都记录并且可以被栈追踪打印到</li>\r\n	<li>efence : 设置efence = 1会让分配器给每一个对象都分配一个单独的页，并且该页不会再被重复利用了</li>\r\n	<li>gctrace : 设置 gctrace = 1 会让垃圾回收器每次回收的时候都发送一个一行到error，描述回收的量和停顿的时间长度，设置gctrace = 2 ，不止会得到上述结果，但是还有重复的次数。</li>\r\n	<li>gcdead: 设置gcdead = 1 会毁了所有他认为死掉了执行堆栈。</li>\r\n	<li>invalidptr : 默认invalidptr = 1，如果指针被赋予一个无效值,会引起程序的崩溃，设置该值为0，会停止该检查，这个只能临时用于查找bug，真正的解决方法是不要把整数类型的值存在指针变量里面。</li>\r\n	<li>scheddetail : 设置 scheddetail= 1 &amp;&amp; schedtrace = X 会让调度器 发出来一个详细的Xms内多线调度信息，描述调度器的情况，如线程，进程，协程等等。</li>\r\n	<li>schedtrace: 同上</li>\r\n	<li>scavenge : scavenge=1 enables debugging mode of heap scavenger</li>\r\n</ol>\r\n变量GOMAXPROCS限制操作系统可以 同时运行的用户级别的go代码数量，但是对于出于阻塞状态的线程数量是没有限制的，这些是不受GOMAXPROCS 限制的，GOMAXPROCS 是可以修改该限制的（注：NumCPU() 函数可以获取当前系统的CPU数目，可以根据该结果确认GOMAXPROCS的值）。\r\n\r\nGOTRACEBACK可以控制go成语因为未恢复的panic和意外情况造成的崩溃的时候输出栈数量，默认会输出所有的尚存的goroutine，内置函数到实时系统，如果以退出码2退出，如果GOTRACEBACK 设置成0，那goroutine追踪栈会全部输出，GOTRACEBACK 设置成1，采用默认的行为，如果GOTRACEBACK设置成2，不仅输出全部的栈，还有实时交互系统的函数，如果GOTRACEBACK 设置成crash,不仅包括输出栈和实时系统本身的函数，还有尽可能的以操作系统规定的方式退出而不是立即退出，比如在unix系统上，程序会发送一个SIGABRT 去触发一个core dump。\r\n\r\nGOARCH, GOOS, GOPATH, 和 GOROOT 这些环境变量。题目影响go程序的构建。\r\n<h2><strong>常量</strong></h2>\r\n<pre>const <span id="Compiler">Compiler</span> = "gc" \r\n编译器是构建运行的二进制代码的工具集的名字，一直的工具集名字有</pre>\r\n<pre>gc      The 5g/6g/8g compiler suite at code.google.com/p/go.\r\ngccgo   The gccgo front end, part of the GCC compiler suite.</pre>\r\n<pre>const <span id="GOARCH">GOARCH</span> <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a> = theGoarch\r\nGOARCH  是运行程序的CPU架构：386，amd64，或者是arm</pre>\r\n<pre>const <span id="GOOS">GOOS</span> <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a> = theGoos\r\nGOOS 是运行程序的操作系统，darwin,freebsd,linux等等\r\n\r\n</pre>\r\n<h2>变量</h2>\r\nvar MemProfileRate int = 512 * 1024\r\n\r\nMemProfileRate 会在内存profile 里面 保存内存分配的频率和报告频率，profile的目标是对内存分配的平均情况进行采样分析。 为了在内存profile分析报告里面记录每一次内存分配的情况，请将MemProfileRate 设置成1，如果彻底关闭内存分析，请将MemProfileRate 设置成0， 该工具会会在整个程序的生命周期里面不停地以设置的频率对内存进行采样分析，修改内存采样频率的操作只应该做一次，并且最好尽可能的早做。\r\n\r\n&nbsp;', 'golang runtime 包官方文档 翻译', '', 'inherit', 'open', 'open', '', '303-revision-v1', '', '', '2015-06-01 07:16:40', '2015-06-01 07:16:40', '', 303, 'http://unasm.sinaapp.com/?p=306', 0, 'revision', '', 0),
(308, 1, '2015-06-01 07:57:45', '2015-06-01 07:57:45', '<h2>环境变量</h2>\r\nruntime 包含的是go实时运行系统的一些交互操作，比如控制goroutines,也包含了一些使用反射包获得的底层信息，具体见反射包关于实时系统的接口。\r\n\r\n下面的环境变量（$name或者是%name%，取决于运行的操作系统）控制go运行时候的实时行为，这个意义和使用方法，也许会在不同版本之间变化（目前1.4版）。\r\n\r\nGOGC变量设置垃圾回收的百分比，当新添加的数据加上上次垃圾回收之后留下的数据重新达到这个比例之后，会再次出发垃圾回收，默认的GOGC是100，设置gogc=off会彻底禁止垃圾回收，runtime/debug包的SetGCPercent函数会允许在运行时修改该参数。详见<a href="http://golang.org/pkg/runtime/debug/#SetGCPercent">http://golang.org/pkg/runtime/debug/#SetGCPercent</a>.\r\n\r\nGODEBUG变量控制着运行时的debug输出，GODEBUG变量是一个逗号分隔的键值对，支持的键名有\r\n<ol>\r\n	<li>allocfreetrace ：设置 allocfreetrace = 1会让每次分配和释放都记录并且可以被栈追踪打印到</li>\r\n	<li>efence : 设置efence = 1会让分配器给每一个对象都分配一个单独的页，并且该页不会再被重复利用了</li>\r\n	<li>gctrace : 设置 gctrace = 1 会让垃圾回收器每次回收的时候都发送一个一行到error，描述回收的量和停顿的时间长度，设置gctrace = 2 ，不止会得到上述结果，但是还有重复的次数。</li>\r\n	<li>gcdead: 设置gcdead = 1 会毁了所有他认为死掉了执行堆栈。</li>\r\n	<li>invalidptr : 默认invalidptr = 1，如果指针被赋予一个无效值,会引起程序的崩溃，设置该值为0，会停止该检查，这个只能临时用于查找bug，真正的解决方法是不要把整数类型的值存在指针变量里面。</li>\r\n	<li>scheddetail : 设置 scheddetail= 1 &amp;&amp; schedtrace = X 会让调度器 发出来一个详细的Xms内多线调度信息，描述调度器的情况，如线程，进程，协程等等。</li>\r\n	<li>schedtrace: 同上</li>\r\n	<li>scavenge : scavenge=1 enables debugging mode of heap scavenger</li>\r\n</ol>\r\n变量GOMAXPROCS限制操作系统可以 同时运行的用户级别的go代码数量，但是对于出于阻塞状态的线程数量是没有限制的，这些是不受GOMAXPROCS 限制的，GOMAXPROCS 是可以修改该限制的（注：NumCPU() 函数可以获取当前系统的CPU数目，可以根据该结果确认GOMAXPROCS的值）。\r\n\r\nGOTRACEBACK可以控制go成语因为未恢复的panic和意外情况造成的崩溃的时候输出栈数量，默认会输出所有的尚存的goroutine，内置函数到实时系统，如果以退出码2退出，如果GOTRACEBACK 设置成0，那goroutine追踪栈会全部输出，GOTRACEBACK 设置成1，采用默认的行为，如果GOTRACEBACK设置成2，不仅输出全部的栈，还有实时交互系统的函数，如果GOTRACEBACK 设置成crash,不仅包括输出栈和实时系统本身的函数，还有尽可能的以操作系统规定的方式退出而不是立即退出，比如在unix系统上，程序会发送一个SIGABRT 去触发一个core dump。\r\n\r\nGOARCH, GOOS, GOPATH, 和 GOROOT 这些环境变量。题目影响go程序的构建。\r\n<h2><strong>常量</strong></h2>\r\n<pre>const <span id="Compiler">Compiler</span> = "gc" \r\n编译器是构建运行的二进制代码的工具集的名字，一直的工具集名字有</pre>\r\n<pre>gc      The 5g/6g/8g compiler suite at code.google.com/p/go.\r\ngccgo   The gccgo front end, part of the GCC compiler suite.</pre>\r\n<pre>const <span id="GOARCH">GOARCH</span> <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a> = theGoarch\r\nGOARCH  是运行程序的CPU架构：386，amd64，或者是arm</pre>\r\n<pre>const <span id="GOOS">GOOS</span> <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a> = theGoos\r\nGOOS 是运行程序的操作系统，darwin,freebsd,linux等等\r\n\r\n</pre>\r\n<h2>变量</h2>\r\nvar MemProfileRate int = 512 * 1024\r\n\r\nMemProfileRate 会在内存profile 里面 保存内存分配的频率和报告频率，profile的目标是对内存分配的平均情况进行采样分析。 为了在内存profile分析报告里面记录每一次内存分配的情况，请将MemProfileRate 设置成1，如果彻底关闭内存分析，请将MemProfileRate 设置成0， 该工具会会在整个程序的生命周期里面不停地以设置的频率对内存进行采样分析，修改内存采样频率的操作只应该做一次，并且最好尽可能的早做。\r\n\r\n&nbsp;\r\n<h2>func BlockProfile</h2>\r\nfunc BlockProfile(p []BlockProfileRecord) (n int, ok bool)\r\n\r\n该函数返回n,几率的是当前阻塞的报告。如果len(p) &gt;= n ,该函数会拷贝分析报告进入p，并且返回n，如果len(p) &lt; n, BlockProfile 不做任何修改，只是返回n，false。\r\n\r\nMost clients should use the runtime/pprof package or the testing package''s -test.blockprofile flag instead of calling BlockProfile directly.\r\n\r\n&nbsp;\r\n<h2>func CPUProfile</h2>\r\nfunc CPUProfile() []byte\r\n\r\nCPUProfile returns the next chunk of binary CPU profiling stack trace data, blocking until data is available. If profiling is turned off and all the profile data accumulated while it was on has been returned, CPUProfile returns nil. The caller must save the returned data before calling CPUProfile again.\r\n\r\nMost clients should use the runtime/pprof package or the testing package''s -test.cpuprofile flag instead of calling CPUProfile directly.', 'golang runtime 包官方文档 翻译', '', 'inherit', 'open', 'open', '', '303-revision-v1', '', '', '2015-06-01 07:57:45', '2015-06-01 07:57:45', '', 303, 'http://unasm.sinaapp.com/?p=308', 0, 'revision', '', 0),
(307, 1, '2015-06-01 07:46:34', '2015-06-01 07:46:34', '<h2>环境变量</h2>\r\nruntime 包含的是go实时运行系统的一些交互操作，比如控制goroutines,也包含了一些使用反射包获得的底层信息，具体见反射包关于实时系统的接口。\r\n\r\n下面的环境变量（$name或者是%name%，取决于运行的操作系统）控制go运行时候的实时行为，这个意义和使用方法，也许会在不同版本之间变化（目前1.4版）。\r\n\r\nGOGC变量设置垃圾回收的百分比，当新添加的数据加上上次垃圾回收之后留下的数据重新达到这个比例之后，会再次出发垃圾回收，默认的GOGC是100，设置gogc=off会彻底禁止垃圾回收，runtime/debug包的SetGCPercent函数会允许在运行时修改该参数。详见<a href="http://golang.org/pkg/runtime/debug/#SetGCPercent">http://golang.org/pkg/runtime/debug/#SetGCPercent</a>.\r\n\r\nGODEBUG变量控制着运行时的debug输出，GODEBUG变量是一个逗号分隔的键值对，支持的键名有\r\n<ol>\r\n	<li>allocfreetrace ：设置 allocfreetrace = 1会让每次分配和释放都记录并且可以被栈追踪打印到</li>\r\n	<li>efence : 设置efence = 1会让分配器给每一个对象都分配一个单独的页，并且该页不会再被重复利用了</li>\r\n	<li>gctrace : 设置 gctrace = 1 会让垃圾回收器每次回收的时候都发送一个一行到error，描述回收的量和停顿的时间长度，设置gctrace = 2 ，不止会得到上述结果，但是还有重复的次数。</li>\r\n	<li>gcdead: 设置gcdead = 1 会毁了所有他认为死掉了执行堆栈。</li>\r\n	<li>invalidptr : 默认invalidptr = 1，如果指针被赋予一个无效值,会引起程序的崩溃，设置该值为0，会停止该检查，这个只能临时用于查找bug，真正的解决方法是不要把整数类型的值存在指针变量里面。</li>\r\n	<li>scheddetail : 设置 scheddetail= 1 &amp;&amp; schedtrace = X 会让调度器 发出来一个详细的Xms内多线调度信息，描述调度器的情况，如线程，进程，协程等等。</li>\r\n	<li>schedtrace: 同上</li>\r\n	<li>scavenge : scavenge=1 enables debugging mode of heap scavenger</li>\r\n</ol>\r\n变量GOMAXPROCS限制操作系统可以 同时运行的用户级别的go代码数量，但是对于出于阻塞状态的线程数量是没有限制的，这些是不受GOMAXPROCS 限制的，GOMAXPROCS 是可以修改该限制的（注：NumCPU() 函数可以获取当前系统的CPU数目，可以根据该结果确认GOMAXPROCS的值）。\r\n\r\nGOTRACEBACK可以控制go成语因为未恢复的panic和意外情况造成的崩溃的时候输出栈数量，默认会输出所有的尚存的goroutine，内置函数到实时系统，如果以退出码2退出，如果GOTRACEBACK 设置成0，那goroutine追踪栈会全部输出，GOTRACEBACK 设置成1，采用默认的行为，如果GOTRACEBACK设置成2，不仅输出全部的栈，还有实时交互系统的函数，如果GOTRACEBACK 设置成crash,不仅包括输出栈和实时系统本身的函数，还有尽可能的以操作系统规定的方式退出而不是立即退出，比如在unix系统上，程序会发送一个SIGABRT 去触发一个core dump。\r\n\r\nGOARCH, GOOS, GOPATH, 和 GOROOT 这些环境变量。题目影响go程序的构建。\r\n<h2><strong>常量</strong></h2>\r\n<pre>const <span id="Compiler">Compiler</span> = "gc" \r\n编译器是构建运行的二进制代码的工具集的名字，一直的工具集名字有</pre>\r\n<pre>gc      The 5g/6g/8g compiler suite at code.google.com/p/go.\r\ngccgo   The gccgo front end, part of the GCC compiler suite.</pre>\r\n<pre>const <span id="GOARCH">GOARCH</span> <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a> = theGoarch\r\nGOARCH  是运行程序的CPU架构：386，amd64，或者是arm</pre>\r\n<pre>const <span id="GOOS">GOOS</span> <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a> = theGoos\r\nGOOS 是运行程序的操作系统，darwin,freebsd,linux等等\r\n\r\n</pre>\r\n<h2>变量</h2>\r\nvar MemProfileRate int = 512 * 1024\r\n\r\nMemProfileRate 会在内存profile 里面 保存内存分配的频率和报告频率，profile的目标是对内存分配的平均情况进行采样分析。 为了在内存profile分析报告里面记录每一次内存分配的情况，请将MemProfileRate 设置成1，如果彻底关闭内存分析，请将MemProfileRate 设置成0， 该工具会会在整个程序的生命周期里面不停地以设置的频率对内存进行采样分析，修改内存采样频率的操作只应该做一次，并且最好尽可能的早做。\r\n\r\n&nbsp;\r\n<h2>func BlockProfile</h2>\r\nfunc BlockProfile(p []BlockProfileRecord) (n int, ok bool)\r\n\r\n该函数返回n,几率的是当前阻塞的报告。如果len(p) &gt;= n ,该函数会拷贝分析报告进入p，并且返回n，如果len(p) &lt; n, BlockProfile 不做任何修改，只是返回n，false。\r\n\r\nMost clients should use the runtime/pprof package or the testing package''s -test.blockprofile flag instead of calling BlockProfile directly.\r\n\r\n&nbsp;\r\n<h2>func CPUProfile</h2>\r\nfunc CPUProfile() []byte\r\n\r\nCPUProfile 返回 下一个 CPU追踪栈数据的二进制数块，阻塞直到数据可用。如果记录报告被关闭了，所有的数据都会积累起来直到（不明白）\r\n\r\nCPUProfile returns the next chunk of binary CPU profiling stack trace data, blocking until data is available. If profiling is turned off and all the profile data accumulated while it was on has been returned, CPUProfile returns nil. The caller must save the returned data before calling CPUProfile again.\r\n\r\nMost clients should use the runtime/pprof package or the testing package''s -test.cpuprofile flag instead of calling CPUProfile directly.', 'golang runtime 包官方文档 翻译', '', 'inherit', 'open', 'open', '', '303-revision-v1', '', '', '2015-06-01 07:46:34', '2015-06-01 07:46:34', '', 303, 'http://unasm.sinaapp.com/?p=307', 0, 'revision', '', 0),
(309, 1, '2015-06-01 08:27:16', '2015-06-01 08:27:16', '<h2>环境变量</h2>\r\nruntime 包含的是go实时运行系统的一些交互操作，比如控制goroutines,也包含了一些使用反射包获得的底层信息，具体见反射包关于实时系统的接口。\r\n\r\n下面的环境变量（$name或者是%name%，取决于运行的操作系统）控制go运行时候的实时行为，这个意义和使用方法，也许会在不同版本之间变化（目前1.4版）。\r\n\r\nGOGC变量设置垃圾回收的百分比，当新添加的数据加上上次垃圾回收之后留下的数据重新达到这个比例之后，会再次出发垃圾回收，默认的GOGC是100，设置gogc=off会彻底禁止垃圾回收，runtime/debug包的SetGCPercent函数会允许在运行时修改该参数。详见<a href="http://golang.org/pkg/runtime/debug/#SetGCPercent">http://golang.org/pkg/runtime/debug/#SetGCPercent</a>.\r\n\r\nGODEBUG变量控制着运行时的debug输出，GODEBUG变量是一个逗号分隔的键值对，支持的键名有\r\n<ol>\r\n	<li>allocfreetrace ：设置 allocfreetrace = 1会让每次分配和释放都记录并且可以被栈追踪打印到</li>\r\n	<li>efence : 设置efence = 1会让分配器给每一个对象都分配一个单独的页，并且该页不会再被重复利用了</li>\r\n	<li>gctrace : 设置 gctrace = 1 会让垃圾回收器每次回收的时候都发送一个一行到error，描述回收的量和停顿的时间长度，设置gctrace = 2 ，不止会得到上述结果，但是还有重复的次数。</li>\r\n	<li>gcdead: 设置gcdead = 1 会毁了所有他认为死掉了执行堆栈。</li>\r\n	<li>invalidptr : 默认invalidptr = 1，如果指针被赋予一个无效值,会引起程序的崩溃，设置该值为0，会停止该检查，这个只能临时用于查找bug，真正的解决方法是不要把整数类型的值存在指针变量里面。</li>\r\n	<li>scheddetail : 设置 scheddetail= 1 &amp;&amp; schedtrace = X 会让调度器 发出来一个详细的Xms内多线调度信息，描述调度器的情况，如线程，进程，协程等等。</li>\r\n	<li>schedtrace: 同上</li>\r\n	<li>scavenge : scavenge=1 enables debugging mode of heap scavenger</li>\r\n</ol>\r\n变量GOMAXPROCS限制操作系统可以 同时运行的用户级别的go代码数量，但是对于出于阻塞状态的线程数量是没有限制的，这些是不受GOMAXPROCS 限制的，GOMAXPROCS 是可以修改该限制的（注：NumCPU() 函数可以获取当前系统的CPU数目，可以根据该结果确认GOMAXPROCS的值）。\r\n\r\nGOTRACEBACK可以控制go成语因为未恢复的panic和意外情况造成的崩溃的时候输出栈数量，默认会输出所有的尚存的goroutine，内置函数到实时系统，如果以退出码2退出，如果GOTRACEBACK 设置成0，那goroutine追踪栈会全部输出，GOTRACEBACK 设置成1，采用默认的行为，如果GOTRACEBACK设置成2，不仅输出全部的栈，还有实时交互系统的函数，如果GOTRACEBACK 设置成crash,不仅包括输出栈和实时系统本身的函数，还有尽可能的以操作系统规定的方式退出而不是立即退出，比如在unix系统上，程序会发送一个SIGABRT 去触发一个core dump。\r\n\r\nGOARCH, GOOS, GOPATH, 和 GOROOT 这些环境变量。题目影响go程序的构建。\r\n<h2><strong>常量</strong></h2>\r\n<pre>const <span id="Compiler">Compiler</span> = "gc" \r\n编译器是构建运行的二进制代码的工具集的名字，一直的工具集名字有</pre>\r\n<pre>gc      The 5g/6g/8g compiler suite at code.google.com/p/go.\r\ngccgo   The gccgo front end, part of the GCC compiler suite.</pre>\r\n<pre>const <span id="GOARCH">GOARCH</span> <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a> = theGoarch\r\nGOARCH  是运行程序的CPU架构：386，amd64，或者是arm</pre>\r\n<pre>const <span id="GOOS">GOOS</span> <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a> = theGoos\r\nGOOS 是运行程序的操作系统，darwin,freebsd,linux等等\r\n\r\n</pre>\r\n<h2>变量</h2>\r\nvar MemProfileRate int = 512 * 1024\r\n\r\nMemProfileRate 会在内存profile 里面 保存内存分配的频率和报告频率，profile的目标是对内存分配的平均情况进行采样分析。 为了在内存profile分析报告里面记录每一次内存分配的情况，请将MemProfileRate 设置成1，如果彻底关闭内存分析，请将MemProfileRate 设置成0， 该工具会会在整个程序的生命周期里面不停地以设置的频率对内存进行采样分析，修改内存采样频率的操作只应该做一次，并且最好尽可能的早做。\r\n\r\n&nbsp;\r\n<h2>func BlockProfile</h2>\r\nfunc BlockProfile(p []BlockProfileRecord) (n int, ok bool)\r\n\r\n该函数返回n,几率的是当前阻塞的报告。如果len(p) &gt;= n ,该函数会拷贝分析报告进入p，并且返回n，如果len(p) &lt; n, BlockProfile 不做任何修改，只是返回n，false。\r\n\r\nMost clients should use the runtime/pprof package or the testing package''s -test.blockprofile flag instead of calling BlockProfile directly.\r\n\r\n&nbsp;\r\n<h2>func CPUProfile</h2>\r\nfunc CPUProfile() []byte\r\n\r\nCPUProfile returns the next chunk of binary CPU profiling stack trace data, blocking until data is available. If profiling is turned off and all the profile data accumulated while it was on has been returned, CPUProfile returns nil. The caller must save the returned data before calling CPUProfile again.\r\n\r\nMost clients should use the runtime/pprof package or the testing package''s -test.cpuprofile flag instead of calling CPUProfile directly.\r\n\r\n&nbsp;\r\n\r\n<h2>func GoroutineProfile<h2>\r\n\r\nfunc GoroutineProfile(p [] StackRecord) (n int, ok bool)\r\nGoroutineProfile 返回n，活动gogoutine 站报告的记录数，如果 len(p) >= n，GoroutineProfile 会拷贝报告进入p，然后返回n，如果 len(p) < n , GoroutineProfile并不会改变p，并且返回n，false。\r\n应该使用runtime/pprof包，而不是直接使用GoroutineProfile \r\n\r\n<h2>func NumCPU()</h2>\r\n返回本机逻辑CPUS的数量\r\n<h2>func NumGoroutine</h2>\r\nfunc NumGoroutine int\r\n返回存在的goroutineus 的数量\r\nfunc ReadMemStats(m *MemStats)\r\n\r\n读取内存分配的数据\r\n&nbsp;', 'golang runtime 包官方文档 翻译', '', 'inherit', 'open', 'open', '', '303-revision-v1', '', '', '2015-06-01 08:27:16', '2015-06-01 08:27:16', '', 303, 'http://unasm.sinaapp.com/?p=309', 0, 'revision', '', 0),
(315, 1, '2015-06-23 06:27:12', '2015-06-23 06:27:12', '早上刚刚来，突然接到一个电话，说线上出bug了，看一下，说是某个文件创建失败，根据错误提示，去代码里面grep，再根据域名，很快定位了错误，\r\n\r\n是要在一个文件里面，fwrite，但是之前已经 is_writable 进行 判断了，也就是可以写，有权限，但是真正写的时候，却还是不行，初步判断是系统问题，猜测是磁盘满了。\r\n\r\n通过 df -lh 判断，果然/data0的使用率已经是100%了，再根据du  -hc /data0判断，发现才使用65mb，也就是说，其实不是磁盘真正满了，而是没有释放而已\r\n\r\n命令  lsof |grep delete 查找 已经删除了，但是却还没有关闭的系统文件，果然有一个bf_tennis.log 的文件极大，并且尚未关闭，找到对应的pid，也即是第二列的数字，发现pid是一个2014年开始在跑的进程，目前源代码都已经被删除了，但却没有关闭的进程，果断kill掉，再次df -hl ,ok, /data0 使用率已经降到了48%，再kill两个，/data0使用率变成了2%,问题顺利解决', '记一次线上bug处理', '', 'publish', 'open', 'open', '', '%e8%ae%b0%e4%b8%80%e6%ac%a1%e7%ba%bf%e4%b8%8abug%e5%a4%84%e7%90%86', '', '', '2015-06-23 06:27:26', '2015-06-23 06:27:26', '', 0, 'http://unasm.sinaapp.com/?p=315', 0, 'post', '', 0),
(316, 1, '2015-06-23 06:27:12', '2015-06-23 06:27:12', '早上刚刚来，突然接到一个电话，说线上出bug了，看一下，说是某个文件创建失败，根据错误提示，去代码里面grep，再根据域名，很快定位了错误，\r\n\r\n是要在一个文件里面，fwrite，但是之前已经 is_writable 进行 判断了，也就是可以写，有权限，但是真正写的时候，却还是不行，初步判断是系统问题，猜测是磁盘满了。\r\n\r\n通过 df -lh 判断，果然/data0的使用率已经是100%了，再根据du  -hc /data0判断，发现才使用65mb，也就是说，其实不是磁盘真正满了，而是没有释放而已\r\n\r\n命令  lsof |grep delete 查找 已经删除了，但是却还没有关闭的系统文件，果然有一个bf_tennis.log 的文件极大，并且尚未关闭，找到对应的pid，也即是第二列的数字，发现pid是一个2014年开始在跑的进程，目前源代码都已经被删除了，但却没有关闭的进程，果断kill掉，再次df -hl ,ok, /data0 使用率已经降到了48%，再kill两个，/data0使用率变成了2%,问题顺利解决', '记一次线上bug处理', '', 'inherit', 'open', 'open', '', '315-revision-v1', '', '', '2015-06-23 06:27:12', '2015-06-23 06:27:12', '', 315, 'http://unasm.sinaapp.com/?p=316', 0, 'revision', '', 0),
(319, 1, '2015-06-25 12:30:22', '2015-06-25 12:30:22', '编辑/产品 啪的一声，丢过来一个问题，说XXX出问题了，修复它，没有说明文档，自己刚刚接手不久，怎么办呢？？\r\n\r\n解决问题，应该归成一条线，一步一步来，从前向后，一步一步定位问题。\r\n\r\n首先，XXX出问题了，好，这个就是问题的头，我们沿着这个线往下走，瞄一眼  <span class="extension-title">Website IP （一个chrome的插件），看一下出问题的服务器ip，再怎么新接手，玩世不恭，自己掌管几台服务器，总是知道的吧，然后ssh到服务器上面去，然后就是/data1/bin/httpd -S  看一下apache/nginx 的配置，对配置了如指掌的，可以跳过这一步，主要是担心rewrite ，修改路由，让人不知道接下来怎么走。</span>\r\n\r\n一般来说，现在网站都是单入口的，直接从index.php开始就可以了，但是未必，老项目，如discuz或者不用框架，裸写的。\r\n\r\n如果裸写的，根据url和rewrite规则，或者直接按照目录去找文件，就可以了，如果是单入口模式，肯定会根据url中的参数确定下来具体的入口，这个时候，就需要对框架的路由规则比较了解，怎么了解路由那就是另一个问题了。总之，迅速定位入口，开始从头开始读代码，如果我的话，可能会首先在代码最前面加一个die，或者利用firephp输出，检测，看是不是找对了。然后就可以愉快的读代码了。\r\n\r\n一般来说，比较容易出问题的是外部资源，代码常年跑，不会轻易挂掉，php还是很健壮的。\r\n\r\n比较容易出问题的，比如http接口变化或者挂掉，mysql down掉了，系统没有了权限或者磁盘满了，redis 内存过多等等，优先查外部的，其次才是代码中的判断，', '分析无头案', '', 'inherit', 'open', 'open', '', '318-revision-v1', '', '', '2015-06-25 12:30:22', '2015-06-25 12:30:22', '', 318, 'http://unasm.sinaapp.com/?p=319', 0, 'revision', '', 0),
(320, 1, '2015-06-27 17:24:17', '2015-06-27 17:24:17', 'http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<b>描述</b>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\r\n<h2>有效的op 参数如下：</h2>\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLL_CTL_ADD </b></li>\r\n</ul>\r\n</ul>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLL_CTL_MOD</b></li>\r\n</ul>\r\n</ul>\r\n修改注册到fd参数上的监听事件\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLL_CTL_DEL</b></li>\r\n</ul>\r\n</ul>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLLIN</b></li>\r\n</ul>\r\n</ul>\r\n关联的文件可以执行read 操作\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLOUT</b></li>\r\n</ul>\r\n</ul>\r\n关联的文件可以进行写操作\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></li>\r\n</ul>\r\n</ul>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLPRI</b></li>\r\n</ul>\r\n</ul>\r\n有紧急的数据需要去读\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLLERR</b></li>\r\n</ul>\r\n</ul>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。此时接口可写。\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLHUP</b></li>\r\n</ul>\r\n</ul>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。此时接口可写。\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLET</b></li>\r\n</ul>\r\n</ul>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<ul>\r\n<ul>\r\n	<li>EPOLLONESHOT(linux 2.6.2之后的版本)</li>\r\n</ul>\r\n</ul>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLWAKEUP(Linux 3.5之后)</b></li>\r\n</ul>\r\n</ul>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n	<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n	<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n	<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n	<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n	<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n	<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。', 'epoll_ctl 函数（译）', '', 'publish', 'open', 'open', '', 'epoll_ctl-%e5%87%bd%e6%95%b0%e7%bf%bb%e8%af%91', '', '', '2015-07-02 01:37:17', '2015-07-02 01:37:17', '', 0, 'http://unasm.sinaapp.com/?p=320', 0, 'post', '', 0),
(321, 1, '2015-06-27 17:24:17', '2015-06-27 17:24:17', 'http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll 函数是计划的文件描述符epfd，它需要具体执行的请求参数op，需要操作的文件描述符 fd.\r\n\r\n有效的op 参数如下：\r\n<pre><b>EPOLL_CTL_ADD </b></pre>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<pre><b>EPOLL_CTL_MOD</b></pre>\r\n修改注册到fd参数上的监听事件\r\n<pre><b>EPOLL_CTL_DEL</b></pre>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<pre><b>EPOLLIN</b></pre>\r\n关联的文件可以执行read 操作\r\n\r\n&nbsp;\r\n<pre><b> EPOLLOUT</b></pre>\r\n关联的文件可以进行写操作\r\n<pre><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></pre>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<pre><b> EPOLLPRI</b></pre>\r\n有紧急的数据需要去读\r\n<pre><b>EPOLLERR</b></pre>\r\n\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<pre><b> EPOLLHUP</b></pre>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<pre><b> EPOLLET</b></pre>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。', 'epoll_ctl 函数翻译', '', 'inherit', 'open', 'open', '', '320-revision-v1', '', '', '2015-06-27 17:24:17', '2015-06-27 17:24:17', '', 320, 'http://unasm.sinaapp.com/?p=321', 0, 'revision', '', 0),
(322, 1, '2015-07-01 13:04:19', '2015-07-01 13:04:19', 'http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\n<h2>梗概：</h2>\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\n</pre>\n<b>描述</b>\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\n<h2>有效的op 参数如下：</h2>\n<ul>\n<ul>\n	<li><b>EPOLL_CTL_ADD </b></li>\n</ul>\n</ul>\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\n<ul>\n<ul>\n	<li><b>EPOLL_CTL_MOD</b></li>\n</ul>\n</ul>\n修改注册到fd参数上的监听事件\n<ul>\n<ul>\n	<li><b>EPOLL_CTL_DEL</b></li>\n</ul>\n</ul>\n从epfd中删除fd，这里event参数可以没有，用NULL\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\n<pre> typedef union epoll_data {\n               void        *ptr;\n               int          fd;\n               uint32_t     u32;\n               uint64_t     u64;\n           } epoll_data_t;\n\n           struct epoll_event {\n               uint32_t     events;      /* Epoll events */\n               epoll_data_t data;        /* User data variable */\n           };</pre>\nevents 是一个使用如下参数的位集合。\n<ul>\n<ul>\n	<li><b>EPOLLIN</b></li>\n</ul>\n</ul>\n关联的文件可以执行read 操作\n<ul>\n<ul>\n	<li><b> EPOLLOUT</b></li>\n</ul>\n</ul>\n关联的文件可以进行写操作\n<ul>\n<ul>\n	<li><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></li>\n</ul>\n</ul>\nsocket刘关闭连接或则是关闭写半连接（）\n<ul>\n<ul>\n	<li><b> EPOLLPRI</b></li>\n</ul>\n</ul>\n有紧急的数据需要去读\n<ul>\n<ul>\n	<li><b>EPOLLERR</b></li>\n</ul>\n</ul>\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\n<ul>\n<ul>\n	<li><b> EPOLLHUP</b></li>\n</ul>\n</ul>\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。此时接口可写。\n<ul>\n<ul>\n	<li><b> EPOLLET</b></li>\n</ul>\n</ul>\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\n<ul>\n<ul>\n	<li>EPOLLONESHOT(linux 2.6.2之后的版本)</li>\n</ul>\n</ul>\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\n<ul>\n<ul>\n	<li><b> EPOLLWAKEUP(Linux 3.5之后)</b></li>\n</ul>\n</ul>\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\n<h2>返回值</h2>\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\n<pre><b>可能的错误情况</b></pre>\n<ul>\n	<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\n	<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\n	<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\n	<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\n	<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\n	<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\n</ul>\n<h2>版本</h2>\nepoll_ctl 是在linux 2.6之后加进去的。', 'epoll_ctl 函数（译）', '', 'inherit', 'open', 'open', '', '320-autosave-v1', '', '', '2015-07-01 13:04:19', '2015-07-01 13:04:19', '', 320, 'http://unasm.sinaapp.com/?p=322', 0, 'revision', '', 0),
(329, 1, '2015-06-28 01:49:57', '2015-06-28 01:49:57', 'http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\r\n有效的op 参数如下：\r\n<b>EPOLL_CTL_ADD </b>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<b>EPOLL_CTL_MOD</b>\r\n修改注册到fd参数上的监听事件\r\n<b>EPOLL_CTL_DEL</b>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<b>EPOLLIN</b>\r\n关联的文件可以执行read 操作\r\n<b> EPOLLOUT</b>\r\n关联的文件可以进行写操作\r\n<b> EPOLLRDHUP （Linux 2.6.17之后有）</b>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<b> EPOLLPRI</b>\r\n有紧急的数据需要去读\r\n<b>EPOLLERR</b>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<b> EPOLLHUP</b>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<b> EPOLLET</b>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<li> EPOLLONESHOT(linux 2.6.2之后的版本)</li>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<li><b> EPOLLWAKEUP(Linux 3.5之后)</b></li>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。', 'epoll_ctl 函数（译）', '', 'inherit', 'open', 'open', '', '320-revision-v1', '', '', '2015-06-28 01:49:57', '2015-06-28 01:49:57', '', 320, 'http://unasm.sinaapp.com/?p=329', 0, 'revision', '', 0),
(323, 1, '2015-06-28 01:31:39', '2015-06-28 01:31:39', 'http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll 函数是计划的文件描述符epfd，它需要具体执行的请求参数op，需要操作的文件描述符 fd.\r\n\r\n有效的op 参数如下：\r\n<pre><b>EPOLL_CTL_ADD </b></pre>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<pre><b>EPOLL_CTL_MOD</b></pre>\r\n修改注册到fd参数上的监听事件\r\n<pre><b>EPOLL_CTL_DEL</b></pre>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<pre><b>EPOLLIN</b></pre>\r\n关联的文件可以执行read 操作\r\n\r\n&nbsp;\r\n<pre><b> EPOLLOUT</b></pre>\r\n关联的文件可以进行写操作\r\n<pre><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></pre>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<pre><b> EPOLLPRI</b></pre>\r\n有紧急的数据需要去读\r\n<pre><b>EPOLLERR</b></pre>\r\n\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<pre><b> EPOLLHUP</b></pre>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<pre><b> EPOLLET</b></pre>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<pre><b> EPOLLONESHOT(linux 2.6.2之后的版本)</b></pre>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<pre><b> EPOLLWAKEUP(Linux 3.5之后)</b></pre>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<pre><h2>返回值</h2></pre>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<b>EBADF</b>  epfd 或者df 不是正确的文件描述符。\r\n<b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。\r\n<b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。\r\n<b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。\r\n<b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制\r\n<b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。\r\n\r\n<h2>版本</h2> epoll_ctl 是在linux 2.6之后加进去的。\r\n\r\n\r\n\r\n', 'epoll_ctl 函数翻译', '', 'inherit', 'open', 'open', '', '320-revision-v1', '', '', '2015-06-28 01:31:39', '2015-06-28 01:31:39', '', 320, 'http://unasm.sinaapp.com/?p=323', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(324, 1, '2015-06-28 01:32:24', '2015-06-28 01:32:24', 'http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll 函数是计划的文件描述符epfd，它需要具体执行的请求参数op，需要操作的文件描述符 fd.\r\n有效的op 参数如下：\r\n<pre><b>EPOLL_CTL_ADD </b></pre>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<pre><b>EPOLL_CTL_MOD</b></pre>\r\n修改注册到fd参数上的监听事件\r\n<pre><b>EPOLL_CTL_DEL</b></pre>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<pre><b>EPOLLIN</b></pre>\r\n关联的文件可以执行read 操作\r\n<pre><b> EPOLLOUT</b></pre>\r\n关联的文件可以进行写操作\r\n<pre><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></pre>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<pre><b> EPOLLPRI</b></pre>\r\n有紧急的数据需要去读\r\n<pre><b>EPOLLERR</b></pre>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<pre><b> EPOLLHUP</b></pre>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<pre><b> EPOLLET</b></pre>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<pre><b> EPOLLONESHOT(linux 2.6.2之后的版本)</b></pre>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<pre><b> EPOLLWAKEUP(Linux 3.5之后)</b></pre>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<b>EBADF</b> epfd 或者df 不是正确的文件描述符。\r\n<b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。\r\n<b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。\r\n<b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。\r\n<b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制\r\n<b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。', 'epoll_ctl 函数翻译', '', 'inherit', 'open', 'open', '', '320-revision-v1', '', '', '2015-06-28 01:32:24', '2015-06-28 01:32:24', '', 320, 'http://unasm.sinaapp.com/?p=324', 0, 'revision', '', 0),
(328, 1, '2015-06-28 01:48:08', '2015-06-28 01:48:08', 'http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\r\n有效的op 参数如下：\r\n<b>EPOLL_CTL_ADD </b>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<b>EPOLL_CTL_MOD</b>\r\n修改注册到fd参数上的监听事件\r\n<pre><b>EPOLL_CTL_DEL</b></pre>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<pre><b>EPOLLIN</b></pre>\r\n关联的文件可以执行read 操作\r\n<pre><b> EPOLLOUT</b></pre>\r\n关联的文件可以进行写操作\r\n<pre><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></pre>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<pre><b> EPOLLPRI</b></pre>\r\n有紧急的数据需要去读\r\n<pre><b>EPOLLERR</b></pre>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<pre><b> EPOLLHUP</b></pre>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<pre><b> EPOLLET</b></pre>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<pre><b> EPOLLONESHOT(linux 2.6.2之后的版本)</b></pre>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<pre><b> EPOLLWAKEUP(Linux 3.5之后)</b></pre>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。', 'epoll_ctl 函数（译）', '', 'inherit', 'open', 'open', '', '320-revision-v1', '', '', '2015-06-28 01:48:08', '2015-06-28 01:48:08', '', 320, 'http://unasm.sinaapp.com/?p=328', 0, 'revision', '', 0),
(325, 1, '2015-06-28 01:34:11', '2015-06-28 01:34:11', 'http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll 函数是计划的文件描述符epfd，它需要具体执行的请求参数op，需要操作的文件描述符 fd.\r\n有效的op 参数如下：\r\n<pre><b>EPOLL_CTL_ADD </b></pre>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<pre><b>EPOLL_CTL_MOD</b></pre>\r\n修改注册到fd参数上的监听事件\r\n<pre><b>EPOLL_CTL_DEL</b></pre>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<pre><b>EPOLLIN</b></pre>\r\n关联的文件可以执行read 操作\r\n<pre><b> EPOLLOUT</b></pre>\r\n关联的文件可以进行写操作\r\n<pre><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></pre>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<pre><b> EPOLLPRI</b></pre>\r\n有紧急的数据需要去读\r\n<pre><b>EPOLLERR</b></pre>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<pre><b> EPOLLHUP</b></pre>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<pre><b> EPOLLET</b></pre>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<pre><b> EPOLLONESHOT(linux 2.6.2之后的版本)</b></pre>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<pre><b> EPOLLWAKEUP(Linux 3.5之后)</b></pre>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。', 'epoll_ctl 函数翻译', '', 'inherit', 'open', 'open', '', '320-revision-v1', '', '', '2015-06-28 01:34:11', '2015-06-28 01:34:11', '', 320, 'http://unasm.sinaapp.com/?p=325', 0, 'revision', '', 0),
(326, 1, '2015-06-28 01:38:58', '2015-06-28 01:38:58', 'http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行操作op以及被op执行的文件描述符 fd.\r\n有效的op 参数如下：\r\n<pre><b>EPOLL_CTL_ADD </b></pre>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<pre><b>EPOLL_CTL_MOD</b></pre>\r\n修改注册到fd参数上的监听事件\r\n<pre><b>EPOLL_CTL_DEL</b></pre>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<pre><b>EPOLLIN</b></pre>\r\n关联的文件可以执行read 操作\r\n<pre><b> EPOLLOUT</b></pre>\r\n关联的文件可以进行写操作\r\n<pre><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></pre>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<pre><b> EPOLLPRI</b></pre>\r\n有紧急的数据需要去读\r\n<pre><b>EPOLLERR</b></pre>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<pre><b> EPOLLHUP</b></pre>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<pre><b> EPOLLET</b></pre>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<pre><b> EPOLLONESHOT(linux 2.6.2之后的版本)</b></pre>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<pre><b> EPOLLWAKEUP(Linux 3.5之后)</b></pre>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。', 'epoll_ctl 函数（译）', '', 'inherit', 'open', 'open', '', '320-revision-v1', '', '', '2015-06-28 01:38:58', '2015-06-28 01:38:58', '', 320, 'http://unasm.sinaapp.com/?p=326', 0, 'revision', '', 0),
(327, 1, '2015-06-28 01:41:18', '2015-06-28 01:41:18', 'http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\r\n有效的op 参数如下：\r\n<pre><b>EPOLL_CTL_ADD </b></pre>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<pre><b>EPOLL_CTL_MOD</b></pre>\r\n修改注册到fd参数上的监听事件\r\n<pre><b>EPOLL_CTL_DEL</b></pre>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<pre><b>EPOLLIN</b></pre>\r\n关联的文件可以执行read 操作\r\n<pre><b> EPOLLOUT</b></pre>\r\n关联的文件可以进行写操作\r\n<pre><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></pre>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<pre><b> EPOLLPRI</b></pre>\r\n有紧急的数据需要去读\r\n<pre><b>EPOLLERR</b></pre>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<pre><b> EPOLLHUP</b></pre>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<pre><b> EPOLLET</b></pre>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<pre><b> EPOLLONESHOT(linux 2.6.2之后的版本)</b></pre>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<pre><b> EPOLLWAKEUP(Linux 3.5之后)</b></pre>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。', 'epoll_ctl 函数（译）', '', 'inherit', 'open', 'open', '', '320-revision-v1', '', '', '2015-06-28 01:41:18', '2015-06-28 01:41:18', '', 320, 'http://unasm.sinaapp.com/?p=327', 0, 'revision', '', 0),
(330, 1, '2015-06-28 01:51:28', '2015-06-28 01:51:28', 'http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\r\n有效的op 参数如下：\r\n<li><b>EPOLL_CTL_ADD </b></li>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<li><b>EPOLL_CTL_MOD</b></li>\r\n修改注册到fd参数上的监听事件\r\n<li><b>EPOLL_CTL_DEL</b></li>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<li><b>EPOLLIN</b></li>\r\n关联的文件可以执行read 操作\r\n<li><b> EPOLLOUT</b></li>\r\n关联的文件可以进行写操作\r\n<li><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></li>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<li><b> EPOLLPRI</b></li>\r\n有紧急的数据需要去读\r\n<li><b>EPOLLERR</b></li>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<li><b> EPOLLHUP</b></li>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<li><b> EPOLLET</b></li>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<li> EPOLLONESHOT(linux 2.6.2之后的版本)</li>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<li><b> EPOLLWAKEUP(Linux 3.5之后)</b></li>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。', 'epoll_ctl 函数（译）', '', 'inherit', 'open', 'open', '', '320-revision-v1', '', '', '2015-06-28 01:51:28', '2015-06-28 01:51:28', '', 320, 'http://unasm.sinaapp.com/?p=330', 0, 'revision', '', 0),
(331, 1, '2015-06-28 01:52:18', '2015-06-28 01:52:18', 'http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\r\n<ul>\r\n<h2>有效的op 参数如下：</h2>\r\n<li><b>EPOLL_CTL_ADD </b></li>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<li><b>EPOLL_CTL_MOD</b></li>\r\n修改注册到fd参数上的监听事件\r\n<li><b>EPOLL_CTL_DEL</b></li>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<li><b>EPOLLIN</b></li>\r\n关联的文件可以执行read 操作\r\n<li><b> EPOLLOUT</b></li>\r\n关联的文件可以进行写操作\r\n<li><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></li>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<li><b> EPOLLPRI</b></li>\r\n有紧急的数据需要去读\r\n<li><b>EPOLLERR</b></li>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<li><b> EPOLLHUP</b></li>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<li><b> EPOLLET</b></li>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<li> EPOLLONESHOT(linux 2.6.2之后的版本)</li>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<li><b> EPOLLWAKEUP(Linux 3.5之后)</b></li>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n</ul>\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。', 'epoll_ctl 函数（译）', '', 'inherit', 'open', 'open', '', '320-revision-v1', '', '', '2015-06-28 01:52:18', '2015-06-28 01:52:18', '', 320, 'http://unasm.sinaapp.com/?p=331', 0, 'revision', '', 0),
(332, 1, '2015-06-28 01:52:44', '2015-06-28 01:52:44', 'http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<b>描述</b>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\r\n<ul>\r\n<h2>有效的op 参数如下：</h2>\r\n<li><b>EPOLL_CTL_ADD </b></li>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<li><b>EPOLL_CTL_MOD</b></li>\r\n修改注册到fd参数上的监听事件\r\n<li><b>EPOLL_CTL_DEL</b></li>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<li><b>EPOLLIN</b></li>\r\n关联的文件可以执行read 操作\r\n<li><b> EPOLLOUT</b></li>\r\n关联的文件可以进行写操作\r\n<li><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></li>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<li><b> EPOLLPRI</b></li>\r\n有紧急的数据需要去读\r\n<li><b>EPOLLERR</b></li>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<li><b> EPOLLHUP</b></li>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<li><b> EPOLLET</b></li>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<li> EPOLLONESHOT(linux 2.6.2之后的版本)</li>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<li><b> EPOLLWAKEUP(Linux 3.5之后)</b></li>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n</ul>\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。', 'epoll_ctl 函数（译）', '', 'inherit', 'open', 'open', '', '320-revision-v1', '', '', '2015-06-28 01:52:44', '2015-06-28 01:52:44', '', 320, 'http://unasm.sinaapp.com/?p=332', 0, 'revision', '', 0),
(334, 1, '2015-07-01 13:04:36', '2015-07-01 13:04:36', 'http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<b>描述</b>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\r\n<h2>有效的op 参数如下：</h2>\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLL_CTL_ADD </b></li>\r\n</ul>\r\n</ul>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLL_CTL_MOD</b></li>\r\n</ul>\r\n</ul>\r\n修改注册到fd参数上的监听事件\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLL_CTL_DEL</b></li>\r\n</ul>\r\n</ul>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLLIN</b></li>\r\n</ul>\r\n</ul>\r\n关联的文件可以执行read 操作\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLOUT</b></li>\r\n</ul>\r\n</ul>\r\n关联的文件可以进行写操作\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></li>\r\n</ul>\r\n</ul>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLPRI</b></li>\r\n</ul>\r\n</ul>\r\n有紧急的数据需要去读\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLLERR</b></li>\r\n</ul>\r\n</ul>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。此时接口可写。\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLHUP</b></li>\r\n</ul>\r\n</ul>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。此时接口可写。\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLET</b></li>\r\n</ul>\r\n</ul>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<ul>\r\n<ul>\r\n	<li>EPOLLONESHOT(linux 2.6.2之后的版本)</li>\r\n</ul>\r\n</ul>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLWAKEUP(Linux 3.5之后)</b></li>\r\n</ul>\r\n</ul>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n	<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n	<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n	<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n	<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n	<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n	<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。', 'epoll_ctl 函数（译）', '', 'inherit', 'open', 'open', '', '320-revision-v1', '', '', '2015-07-01 13:04:36', '2015-07-01 13:04:36', '', 320, 'http://unasm.sinaapp.com/?p=334', 0, 'revision', '', 0),
(335, 1, '2015-07-02 02:29:19', '2015-07-02 02:29:19', '英文源自：<a title="http://man7.org/linux/man-pages/man2/epoll_wait.2.html" href="http://man7.org/linux/man-pages/man2/epoll_wait.2.html" target="_blank">http://man7.org/linux/man-pages/man2/epoll_wait.2.html</a>\r\n<h3>梗概</h3>\r\n\r\n[cpp]\r\n #include &lt;sys/epoll.h&gt;\r\n int epoll_wait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout);\r\n int epoll_pwait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout,\r\n                      const sigset_t *sigmask);\r\n[/cpp]\r\n\r\n<h3>描述</h3>\r\nepoll_wait 该系统调用等待 epoll的实例化文件描述符epfd 响应。events指针指向可以被调用者调用的响应事件。至于maxevents 被函数返回，该参数必须大于0。\r\ntimeout参数指定epoll_wait阻塞的时间。该调用会在下列情况下停止：\r\n<ol>\r\n	<li>每一个文件描述符都有了事件响应。</li>\r\n	<li>该调用被信号句柄终止</li>\r\n	<li>或者超时</li>\r\n</ol>\r\ntimeout 会使用系统的时钟，内核的调度意味着阻塞的时间会有一丁点的超时。如果timeout设置成-1，意味着无限期的阻塞，设置成0意味着函数立即返回，不管是不是有事件响应。\r\n\r\nepoll_event 定义如下\r\n\r\n[cpp]\r\n typedef union epoll_data {\r\n         void    *ptr;\r\n         int      fd;\r\n         uint32_t u32;\r\n         uint64_t u64;\r\n } epoll_data_t;\r\n\r\n struct epoll_event {\r\n        uint32_t     events;    /* Epoll events */\r\n        epoll_data_t data;      /* User data variable */\r\n };\r\n[/cpp]\r\n\r\ndata 返回的结构体会包含与epoll_ctl 相同的数据，而events 会包含一个时间位列。\r\n<h3>epoll_pwait</h3>\r\n与epoll_wait的关系就像select和pselect 一样（不懂）。\r\n<h3>返回值</h3>\r\n成功的时候，epoll_wait 会返回就绪的 请求I/O 描述字数量，或者是0，表示timeout 毫秒内没有文件描述子变成可用。出错的时候，epoll_wait 返回-1，errno会被设置成对应的值。\r\n<h3>错误</h3>\r\n<ol>\r\n	<li>EBADF  epfd 不是正确的文件描述符。</li>\r\n	<li>EFAULT  <i>events 不可写。</i></li>\r\n	<li>EINTR   函数被中断了。</li>\r\n	<li>EINVAL epfd 不是epoll 文件描述字，或者maxevents 小于等于0；</li>\r\n</ol>', 'epoll_wait 函数(译)', '', 'publish', 'open', 'open', '', 'epoll_wait-%e5%87%bd%e6%95%b0%e8%af%91', '', '', '2015-07-02 08:04:34', '2015-07-02 08:04:34', '', 0, 'http://unasm.sinaapp.com/?p=335', 0, 'post', '', 0),
(336, 1, '2015-07-02 02:29:19', '2015-07-02 02:29:19', '<h2></h2>\r\n\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n\r\n[code language="css"]\r\n<?php\r\n    echo "hello,world";\r\n?>\r\n[/code]', 'epoll_wait 函数(译)', '', 'inherit', 'open', 'open', '', '335-revision-v1', '', '', '2015-07-02 02:29:19', '2015-07-02 02:29:19', '', 335, 'http://unasm.sinaapp.com/?p=336', 0, 'revision', '', 0),
(337, 1, '2015-07-02 02:30:09', '2015-07-02 02:30:09', '<h2></h2>\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n<code language="css">\r\n<?php     echo "hello,world"; ?>\r\n</code>', 'epoll_wait 函数(译)', '', 'inherit', 'open', 'open', '', '335-revision-v1', '', '', '2015-07-02 02:30:09', '2015-07-02 02:30:09', '', 335, 'http://unasm.sinaapp.com/?p=337', 0, 'revision', '', 0),
(345, 1, '2015-07-02 07:12:14', '2015-07-02 07:12:14', '<h2></h2>\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n<code>\r\n<!--?php     echo "hello,world"; ?--></code>\r\n<pre class="brush: php">\r\necho "hello,world";\r\n</pre>\r\n\r\n\r\n[php]\r\n&lt;?php\r\n echo &quot;hello,world&quot;;\r\n?&gt;\r\n[/php]\r\n', 'epoll_wait 函数(译)', '', 'inherit', 'open', 'open', '', '335-revision-v1', '', '', '2015-07-02 07:12:14', '2015-07-02 07:12:14', '', 335, 'http://unasm.sinaapp.com/?p=345', 0, 'revision', '', 0),
(344, 1, '2015-07-02 07:11:50', '2015-07-02 07:11:50', '<h2></h2>\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n<code>\r\n<!--?php     echo "hello,world"; ?--></code>\r\n<pre class="brush: php"></pre>\r\n<!--?php  echo "hello,world"; ?-->\r\n<p class="p1"><span class="s1">&lt;?php get_header(); ?&gt;</span></p>\r\n<p class="p1"></p>\r\n\r\n\r\n[php]\r\n&lt;?php\r\n echo &quot;hello,world&quot;;\r\n?&gt;\r\n[/php]\r\n', 'epoll_wait 函数(译)', '', 'inherit', 'open', 'open', '', '335-revision-v1', '', '', '2015-07-02 07:11:50', '2015-07-02 07:11:50', '', 335, 'http://unasm.sinaapp.com/?p=344', 0, 'revision', '', 0),
(346, 1, '2015-07-02 07:12:46', '2015-07-02 07:12:46', '<h2></h2>\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n\r\n<pre class="brush: php">\r\necho "hello,world";\r\n</pre>\r\n\r\n\r\n[php]\r\n&lt;?php\r\n echo &quot;hello,world&quot;;\r\n?&gt;\r\n[/php]\r\n', 'epoll_wait 函数(译)', '', 'inherit', 'open', 'open', '', '335-revision-v1', '', '', '2015-07-02 07:12:46', '2015-07-02 07:12:46', '', 335, 'http://unasm.sinaapp.com/?p=346', 0, 'revision', '', 0),
(339, 1, '2015-07-02 06:04:04', '2015-07-02 06:04:04', '<h2></h2>\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n<code>\r\n<!--?php     echo "hello,world"; ?--></code>\r\n<pre class="brush: php"></pre>\r\n<p class="p1"><span class="s1">&lt;?php get_header(); ?&gt;</span></p>', 'epoll_wait 函数(译)', '', 'inherit', 'open', 'open', '', '335-revision-v1', '', '', '2015-07-02 06:04:04', '2015-07-02 06:04:04', '', 335, 'http://unasm.sinaapp.com/?p=339', 0, 'revision', '', 0),
(340, 1, '2015-07-02 06:04:20', '2015-07-02 06:04:20', '<h2></h2>\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n<code>\r\n<!--?php     echo "hello,world"; ?--></code>\r\n<pre class="brush: php">\r\n<p class="p1"><span class="s1">&lt;?php get_header(); ?&gt;</span></p>\r\n</pre>', 'epoll_wait 函数(译)', '', 'inherit', 'open', 'open', '', '335-revision-v1', '', '', '2015-07-02 06:04:20', '2015-07-02 06:04:20', '', 335, 'http://unasm.sinaapp.com/?p=340', 0, 'revision', '', 0),
(341, 1, '2015-07-02 06:04:32', '2015-07-02 06:04:32', '<h2></h2>\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n<code>\r\n<!--?php     echo "hello,world"; ?--></code>\r\n<pre class="brush: php"></pre>\r\n<p class="p1"><span class="s1">&lt;?php get_header(); ?&gt;</span></p>', 'epoll_wait 函数(译)', '', 'inherit', 'open', 'open', '', '335-revision-v1', '', '', '2015-07-02 06:04:32', '2015-07-02 06:04:32', '', 335, 'http://unasm.sinaapp.com/?p=341', 0, 'revision', '', 0),
(342, 1, '2015-07-02 06:08:01', '2015-07-02 06:08:01', '<h2></h2>\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n<code>\r\n<!--?php     echo "hello,world"; ?--></code>\r\n<pre class="brush: php"/>\r\n<?php  echo "hello,world"; ?>\r\n</pre>\r\n<p class="p1"><span class="s1">&lt;?php get_header(); ?&gt;</span></p>', 'epoll_wait 函数(译)', '', 'inherit', 'open', 'open', '', '335-revision-v1', '', '', '2015-07-02 06:08:01', '2015-07-02 06:08:01', '', 335, 'http://unasm.sinaapp.com/?p=342', 0, 'revision', '', 0),
(343, 1, '2015-07-02 08:00:58', '2015-07-02 08:00:58', '英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\n<h3>梗概</h3>\n\n[cpp]\n #include &lt;sys/epoll.h&gt;\n int epoll_wait(int epfd, struct epoll_event *events,\n                      int maxevents, int timeout);\n int epoll_pwait(int epfd, struct epoll_event *events,\n                      int maxevents, int timeout,\n                      const sigset_t *sigmask);\n[/cpp]\n\n<h3>描述</h3>\nepoll_wait 该系统调用等待 epoll的实例化文件描述符epfd 响应。events指针指向可以被调用者调用的响应事件。至于maxevents 被函数返回，该参数必须大于0。\ntimeout参数指定epoll_wait阻塞的时间。该调用会在下列情况下停止：\n<ol>\n	<li>每一个文件描述符都有了事件响应。</li>\n	<li>该调用被信号句柄终止</li>\n	<li>或者超时</li>\n</ol>\ntimeout 会使用系统的时钟，内核的调度意味着阻塞的时间会有一丁点的超时。如果timeout设置成-1，意味着无限期的阻塞，设置成0意味着函数立即返回，不管是不是有事件响应。\n\nepoll_event 定义如下\n\n[cpp]\n typedef union epoll_data {\n         void    *ptr;\n         int      fd;\n         uint32_t u32;\n         uint64_t u64;\n } epoll_data_t;\n\n struct epoll_event {\n        uint32_t     events;    /* Epoll events */\n        epoll_data_t data;      /* User data variable */\n };\n[/cpp]\n\ndata 返回的结构体会包含与epoll_ctl 相同的数据，而events 会包含一个时间位列。\n<h3>epoll_pwait</h3>\n与epoll_wait的关系就像select和pselect 一样（不懂）。\n<h3>返回值</h3>\n成功的时候，epoll_wait 会返回就绪的 请求I/O 描述字数量，或者是0，表示timeout 毫秒内没有文件描述子变成可用。出错的时候，epoll_wait 返回-1，errno会被设置成对应的值。\n<h3>错误</h3>\n<ol>\n	<li>EBADF  epfd 不是正确的文件描述符。</li>\n	<li>EFAULT  <i>events 不可写。</i></li>\n	<li>EINTR   函数被中断了。</li>\n	<li>EINVAL epfd 不是epoll 文件描述字，或者maxevents 小于等于0；</li>\n</ol>', 'epoll_wait 函数(译)', '', 'inherit', 'open', 'open', '', '335-autosave-v1', '', '', '2015-07-02 08:00:58', '2015-07-02 08:00:58', '', 335, 'http://unasm.sinaapp.com/?p=343', 0, 'revision', '', 0),
(347, 1, '2015-07-02 07:32:26', '2015-07-02 07:32:26', '\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n\r\n<h3>梗概</h3>\r\n<pre lang = "c++">\r\n\r\n #include <sys/epoll.h>\r\n\r\n       int epoll_wait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout);\r\n       int epoll_pwait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout,\r\n                      const sigset_t *sigmask);\r\n</pre>\r\n', 'epoll_wait 函数(译)', '', 'inherit', 'open', 'open', '', '335-revision-v1', '', '', '2015-07-02 07:32:26', '2015-07-02 07:32:26', '', 335, 'http://unasm.sinaapp.com/?p=347', 0, 'revision', '', 0),
(349, 1, '2015-07-02 07:36:10', '2015-07-02 07:36:10', '英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n\r\n<h3>梗概</h3>\r\n<pre class = "brush: c">\r\n\r\n #include <sys/epoll.h>\r\n\r\n       int epoll_wait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout);\r\n       int epoll_pwait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout,\r\n                      const sigset_t *sigmask);\r\n</pre>\r\n', 'epoll_wait 函数(译)', '', 'inherit', 'open', 'open', '', '335-revision-v1', '', '', '2015-07-02 07:36:10', '2015-07-02 07:36:10', '', 335, 'http://unasm.sinaapp.com/?p=349', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(348, 1, '2015-07-02 07:35:07', '2015-07-02 07:35:07', '英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n\r\n<h3>梗概</h3>\r\n<pre class = "brush: c++">\r\n\r\n #include <sys/epoll.h>\r\n\r\n       int epoll_wait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout);\r\n       int epoll_pwait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout,\r\n                      const sigset_t *sigmask);\r\n</pre>\r\n', 'epoll_wait 函数(译)', '', 'inherit', 'open', 'open', '', '335-revision-v1', '', '', '2015-07-02 07:35:07', '2015-07-02 07:35:07', '', 335, 'http://unasm.sinaapp.com/?p=348', 0, 'revision', '', 0),
(350, 1, '2015-07-02 07:36:33', '2015-07-02 07:36:33', '英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n\r\n<h3>梗概</h3>\r\n[c language="++"][/c]\r\n\r\n #include <sys/epoll.h>\r\n\r\n       int epoll_wait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout);\r\n       int epoll_pwait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout,\r\n                      const sigset_t *sigmask);\r\n[/c++]\r\n', 'epoll_wait 函数(译)', '', 'inherit', 'open', 'open', '', '335-revision-v1', '', '', '2015-07-02 07:36:33', '2015-07-02 07:36:33', '', 335, 'http://unasm.sinaapp.com/?p=350', 0, 'revision', '', 0),
(351, 1, '2015-07-02 07:38:23', '2015-07-02 07:38:23', '英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n<h3>梗概</h3>\r\n\r\n[cpp]\r\n\r\n #include &lt;sys/epoll.h&gt;\r\n\r\n       int epoll_wait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout);\r\n       int epoll_pwait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout,\r\n                      const sigset_t *sigmask);\r\n[/cpp]', 'epoll_wait 函数(译)', '', 'inherit', 'open', 'open', '', '335-revision-v1', '', '', '2015-07-02 07:38:23', '2015-07-02 07:38:23', '', 335, 'http://unasm.sinaapp.com/?p=351', 0, 'revision', '', 0),
(352, 1, '2015-07-02 08:01:05', '2015-07-02 08:01:05', '英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n<h3>梗概</h3>\r\n\r\n[cpp]\r\n #include &lt;sys/epoll.h&gt;\r\n int epoll_wait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout);\r\n int epoll_pwait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout,\r\n                      const sigset_t *sigmask);\r\n[/cpp]\r\n\r\n<h3>描述</h3>\r\nepoll_wait 该系统调用等待 epoll的实例化文件描述符epfd 响应。events指针指向可以被调用者调用的响应事件。至于maxevents 被函数返回，该参数必须大于0。\r\ntimeout参数指定epoll_wait阻塞的时间。该调用会在下列情况下停止：\r\n<ol>\r\n	<li>每一个文件描述符都有了事件响应。</li>\r\n	<li>该调用被信号句柄终止</li>\r\n	<li>或者超时</li>\r\n</ol>\r\ntimeout 会使用系统的时钟，内核的调度意味着阻塞的时间会有一丁点的超时。如果timeout设置成-1，意味着无限期的阻塞，设置成0意味着函数立即返回，不管是不是有事件响应。\r\n\r\nepoll_event 定义如下\r\n\r\n[cpp]\r\n typedef union epoll_data {\r\n         void    *ptr;\r\n         int      fd;\r\n         uint32_t u32;\r\n         uint64_t u64;\r\n } epoll_data_t;\r\n\r\n struct epoll_event {\r\n        uint32_t     events;    /* Epoll events */\r\n        epoll_data_t data;      /* User data variable */\r\n };\r\n[/cpp]\r\n\r\ndata 返回的结构体会包含与epoll_ctl 相同的数据，而events 会包含一个时间位列。\r\n<h3>epoll_pwait</h3>\r\n与epoll_wait的关系就像select和pselect 一样（不懂）。\r\n<h3>返回值</h3>\r\n成功的时候，epoll_wait 会返回就绪的 请求I/O 描述字数量，或者是0，表示timeout 毫秒内没有文件描述子变成可用。出错的时候，epoll_wait 返回-1，errno会被设置成对应的值。\r\n<h3>错误</h3>\r\n<ol>\r\n	<li>EBADF  epfd 不是正确的文件描述符。</li>\r\n	<li>EFAULT  <i>events 不可写。</i></li>\r\n	<li>EINTR   函数被中断了。</li>\r\n	<li>EINVAL epfd 不是epoll 文件描述字，或者maxevents 小于等于0；</li>\r\n</ol>', 'epoll_wait 函数(译)', '', 'inherit', 'open', 'open', '', '335-revision-v1', '', '', '2015-07-02 08:01:05', '2015-07-02 08:01:05', '', 335, 'http://unasm.sinaapp.com/?p=352', 0, 'revision', '', 0),
(353, 1, '2015-07-02 08:04:34', '2015-07-02 08:04:34', '英文源自：<a title="http://man7.org/linux/man-pages/man2/epoll_wait.2.html" href="http://man7.org/linux/man-pages/man2/epoll_wait.2.html" target="_blank">http://man7.org/linux/man-pages/man2/epoll_wait.2.html</a>\r\n<h3>梗概</h3>\r\n\r\n[cpp]\r\n #include &lt;sys/epoll.h&gt;\r\n int epoll_wait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout);\r\n int epoll_pwait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout,\r\n                      const sigset_t *sigmask);\r\n[/cpp]\r\n\r\n<h3>描述</h3>\r\nepoll_wait 该系统调用等待 epoll的实例化文件描述符epfd 响应。events指针指向可以被调用者调用的响应事件。至于maxevents 被函数返回，该参数必须大于0。\r\ntimeout参数指定epoll_wait阻塞的时间。该调用会在下列情况下停止：\r\n<ol>\r\n	<li>每一个文件描述符都有了事件响应。</li>\r\n	<li>该调用被信号句柄终止</li>\r\n	<li>或者超时</li>\r\n</ol>\r\ntimeout 会使用系统的时钟，内核的调度意味着阻塞的时间会有一丁点的超时。如果timeout设置成-1，意味着无限期的阻塞，设置成0意味着函数立即返回，不管是不是有事件响应。\r\n\r\nepoll_event 定义如下\r\n\r\n[cpp]\r\n typedef union epoll_data {\r\n         void    *ptr;\r\n         int      fd;\r\n         uint32_t u32;\r\n         uint64_t u64;\r\n } epoll_data_t;\r\n\r\n struct epoll_event {\r\n        uint32_t     events;    /* Epoll events */\r\n        epoll_data_t data;      /* User data variable */\r\n };\r\n[/cpp]\r\n\r\ndata 返回的结构体会包含与epoll_ctl 相同的数据，而events 会包含一个时间位列。\r\n<h3>epoll_pwait</h3>\r\n与epoll_wait的关系就像select和pselect 一样（不懂）。\r\n<h3>返回值</h3>\r\n成功的时候，epoll_wait 会返回就绪的 请求I/O 描述字数量，或者是0，表示timeout 毫秒内没有文件描述子变成可用。出错的时候，epoll_wait 返回-1，errno会被设置成对应的值。\r\n<h3>错误</h3>\r\n<ol>\r\n	<li>EBADF  epfd 不是正确的文件描述符。</li>\r\n	<li>EFAULT  <i>events 不可写。</i></li>\r\n	<li>EINTR   函数被中断了。</li>\r\n	<li>EINVAL epfd 不是epoll 文件描述字，或者maxevents 小于等于0；</li>\r\n</ol>', 'epoll_wait 函数(译)', '', 'inherit', 'open', 'open', '', '335-revision-v1', '', '', '2015-07-02 08:04:34', '2015-07-02 08:04:34', '', 335, 'http://unasm.sinaapp.com/?p=353', 0, 'revision', '', 0),
(354, 1, '2015-07-02 12:53:21', '2015-07-02 12:53:21', '看源码的时候，看到了epoll部分，原来3.0都用了这个，挺好，正好最近研究epoll,就深入看了下代码，ae.c + ae_epoll.c 两个文件不到一千行代码，挺好。\r\n\r\n首先从aeMain函数开始\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n \r\n    eventLoop-&gt;stop = 0;\r\n \r\n    while (!eventLoop-&gt;stop) {\r\n \r\n        // 如果有需要在事件处理前执行的函数，那么运行它                                 \r\n        if (eventLoop-&gt;beforesleep != NULL)                                             \r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n                                                                                        \r\n        // 开始处理事件                                                                 \r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);                                      \r\n    }                                                                                   \r\n}\r\n[/cpp]\r\n\r\neventLoop 就是redis的事件调度器，可以看到这里就是一个死循环，只要stop不置位，就会不停循环。aeProcessEvents 处理epoll的响应事件。\r\n\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\n\r\nflags表示的是要处理的事件类型，其实一共是两种类型的事件，文件类型，事件类型，事件类型的事件是未来尚未发生的，文件类型的事件嘛，主要是I/O事件，再说，unix哲学里面，一切都是文件。\r\n\r\naeProcessEvents 第一个if判断无意义，略过，第二个if/else ,那一大块代码段，是用来设置事件时间的。if/else之后有这么一行,前面的十几二十行就是为了得到不同情况下的tvp参数，也就是最近的时间事件 到达时间。\r\n\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\r\n\r\naeApiPoll 返回了当前已经可读可处理的事件列表 eventLoop-&gt;fired ，以及numevents数量。\r\n后面接着的for循环，就是对已经响应的事件进行处理。这里其实存在一个很经典的设计模式，观察者模式。\r\n“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\r\n文件描述字发生变化，通知对应的调度器，调度器调用预先注册好的函数处理，调度器通过epoll观察着全部的I/O变化。\r\n之前说了，一共其实只有两种事件，一个文件事件，一个时间事件，对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\r\n这里逻辑很简单，就是找对应的处理函数，然后把参数什么的传递给他们处理。挺适合goroutine的，直接开协程处理，哈哈。\r\n\r\n[cpp]\r\n for (j = 0; j &lt; numevents; j++) {\r\n            // 从已就绪数组中获取事件\r\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\r\n            \r\n            int mask = eventLoop-&gt;fired[j].mask;\r\n            int fd = eventLoop-&gt;fired[j].fd;\r\n            int rfired = 0;\r\n            \r\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\r\n             * event removed an element that fired and we still didn''t\r\n             * processed, so we check if the event is still valid. */\r\n            // 读事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\r\n                // rfired 确保读/写事件只能执行其中一个\r\n                rfired = 1;\r\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            // 写事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\r\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\r\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            \r\n            processed++;\r\n }                                 \r\n[/cpp]\r\n\r\n回头接着说aeApiPoll 函数。逻辑也很简单，主要是对<a title="epoll_wait" href="http://unasm.sinaapp.com/?p=335" target="_blank">epoll_wait </a>函数的使用,这里我对官方的epoll_wait做了一个翻译。epoll_wait 会在三种情况下返回，停止阻塞。\r\n一个是被中断，一个是超时，一个是所有的描述字都得到了响应，也就是说，虽然epoll是为异步非阻塞i/o提供的解决方案，到底还是会有一定程度的阻塞的，只是不会为一个I/O阻塞，而是在监测所有的I/O的时候阻塞。\r\n[cpp]\r\n   if (e-&gt;events &amp; EPOLLIN) mask |= AE_READABLE;\r\n   if (e-&gt;events &amp; EPOLLOUT) mask |= AE_WRITABLE;\r\n   if (e-&gt;events &amp; EPOLLERR) mask |= AE_WRITABLE;\r\n   if (e-&gt;events &amp; EPOLLHUP) mask |= AE_WRITABLE;\r\n[/cpp]\r\n这里挺有意思的。就是判断什么情况下，i/o套字节可读，可写，原来EPOLLERR和EPOLLHUP也是可写的。', 'redis的事件调度器  epoll', '', 'publish', 'open', 'open', '', 'redis%e7%9a%84%e4%ba%8b%e4%bb%b6%e8%b0%83%e5%ba%a6%e5%99%a8-epoll', '', '', '2015-07-03 07:20:19', '2015-07-03 07:20:19', '', 0, 'http://unasm.sinaapp.com/?p=354', 0, 'post', '', 0),
(355, 1, '2015-07-02 12:53:21', '2015-07-02 12:53:21', '看源码的时候，看到了epoll部分，原来3.0都用了这个，挺好，正好最近研究epoll,就深入看了下代码，ae.c + ae_epoll.c 两个文件不到一千行代码，挺好。\r\n\r\n首先从aeMain函数开始\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n \r\n    eventLoop-&gt;stop = 0;\r\n \r\n    while (!eventLoop-&gt;stop) {\r\n \r\n        // 如果有需要在事件处理前执行的函数，那么运行它                                 \r\n        if (eventLoop-&gt;beforesleep != NULL)                                             \r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n                                                                                        \r\n        // 开始处理事件                                                                 \r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);                                      \r\n    }                                                                                   \r\n}\r\n[/cpp]\r\n\r\neventLoop 就是redis的事件调度器，可以看到这里就是一个死循环，只要stop不置位，就会不停循环。aeProcessEvents 处理epoll的响应事件。\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\nflags表示的是要处理的事件类型，其实一共是两种类型的事件，文件类型，事件类型，事件类型的事件是未来尚未发生的，文件类型的事件嘛，主要是I/O事件，再说，unix哲学里面，一切都是文件。\r\n\r\naeProcessEvents 第一个if判断无意义，略过，第二个if/else ,那一大块代码段，是用来设置事件时间的。if/else之后有这么一行,前面的十几二十行就是为了得到不同情况下的tvp参数，也就是最近的时间事件 到达时间。\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]', 'redis的事件调度器  epoll', '', 'inherit', 'open', 'open', '', '354-revision-v1', '', '', '2015-07-02 12:53:21', '2015-07-02 12:53:21', '', 354, 'http://unasm.sinaapp.com/?p=355', 0, 'revision', '', 0),
(356, 1, '2015-07-03 07:19:28', '2015-07-03 07:19:28', '看源码的时候，看到了epoll部分，原来3.0都用了这个，挺好，正好最近研究epoll,就深入看了下代码，ae.c + ae_epoll.c 两个文件不到一千行代码，挺好。\n\n首先从aeMain函数开始\n\n[cpp]\nvoid aeMain(aeEventLoop *eventLoop) {\n \n    eventLoop-&gt;stop = 0;\n \n    while (!eventLoop-&gt;stop) {\n \n        // 如果有需要在事件处理前执行的函数，那么运行它                                 \n        if (eventLoop-&gt;beforesleep != NULL)                                             \n            eventLoop-&gt;beforesleep(eventLoop);                                          \n                                                                                        \n        // 开始处理事件                                                                 \n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);                                      \n    }                                                                                   \n}\n[/cpp]\n\neventLoop 就是redis的事件调度器，可以看到这里就是一个死循环，只要stop不置位，就会不停循环。aeProcessEvents 处理epoll的响应事件。\n\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\n\nflags表示的是要处理的事件类型，其实一共是两种类型的事件，文件类型，事件类型，事件类型的事件是未来尚未发生的，文件类型的事件嘛，主要是I/O事件，再说，unix哲学里面，一切都是文件。\n\naeProcessEvents 第一个if判断无意义，略过，第二个if/else ,那一大块代码段，是用来设置事件时间的。if/else之后有这么一行,前面的十几二十行就是为了得到不同情况下的tvp参数，也就是最近的时间事件 到达时间。\n\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\n\naeApiPoll 返回了当前已经可读可处理的事件列表 eventLoop-&gt;fired ，以及numevents数量。\n后面接着的for循环，就是对已经响应的事件进行处理。这里其实存在一个很经典的设计模式，观察者模式。\n“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\n文件描述字发生变化，通知对应的调度器，调度器调用预先注册好的函数处理，调度器通过epoll观察着全部的I/O变化。\n之前说了，一共其实只有两种事件，一个文件事件，一个时间事件，对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\n这里逻辑很简单，就是找对应的处理函数，然后把参数什么的传递给他们处理。挺适合goroutine的，直接开协程处理，哈哈。\n\n[cpp]\n for (j = 0; j &lt; numevents; j++) {\n            // 从已就绪数组中获取事件\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\n            \n            int mask = eventLoop-&gt;fired[j].mask;\n            int fd = eventLoop-&gt;fired[j].fd;\n            int rfired = 0;\n            \n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\n             * event removed an element that fired and we still didn''t\n             * processed, so we check if the event is still valid. */\n            // 读事件\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\n                // rfired 确保读/写事件只能执行其中一个\n                rfired = 1;\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\n            }\n            // 写事件\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\n            }\n            \n            processed++;\n }                                 \n[/cpp]\n\n回头接着说aeApiPoll 函数。逻辑也很简单，主要是对<a title="epoll_wait" href="http://unasm.sinaapp.com/?p=335" target="_blank">epoll_wait </a>函数的使用,这里我对官方的epoll_wait做了一个翻译。epoll_wait 会在三种情况下返回，停止阻塞。\n一个是被中断，一个是超时，一个是所有的描述字都得到了响应，也就是说，虽然epoll是为异步非阻塞i/o提供的解决方案，到底还是会有一定程度的阻塞的，只是不会为一个I/O阻塞，而是为所有被监测的I/O\n[cpp]\n   if (e-&gt;events &amp; EPOLLIN) mask |= AE_READABLE;\n   if (e-&gt;events &amp; EPOLLOUT) mask |= AE_WRITABLE;\n   if (e-&gt;events &amp; EPOLLERR) mask |= AE_WRITABLE;\n   if (e-&gt;events &amp; EPOLLHUP) mask |= AE_WRITABLE;\n[/cpp]\n这里挺有意思的。就是判断什么情况下，i/o套字节可读，可写，原来EPOLLERR和EPOLLHUP也是可写的。', 'redis的事件调度器  epoll', '', 'inherit', 'open', 'open', '', '354-autosave-v1', '', '', '2015-07-03 07:19:28', '2015-07-03 07:19:28', '', 354, 'http://unasm.sinaapp.com/?p=356', 0, 'revision', '', 0),
(357, 1, '2015-07-02 13:22:19', '2015-07-02 13:22:19', '看源码的时候，看到了epoll部分，原来3.0都用了这个，挺好，正好最近研究epoll,就深入看了下代码，ae.c + ae_epoll.c 两个文件不到一千行代码，挺好。\r\n\r\n首先从aeMain函数开始\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n \r\n    eventLoop-&gt;stop = 0;\r\n \r\n    while (!eventLoop-&gt;stop) {\r\n \r\n        // 如果有需要在事件处理前执行的函数，那么运行它                                 \r\n        if (eventLoop-&gt;beforesleep != NULL)                                             \r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n                                                                                        \r\n        // 开始处理事件                                                                 \r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);                                      \r\n    }                                                                                   \r\n}\r\n[/cpp]\r\n\r\neventLoop 就是redis的事件调度器，可以看到这里就是一个死循环，只要stop不置位，就会不停循环。aeProcessEvents 处理epoll的响应事件。\r\n\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\n\r\nflags表示的是要处理的事件类型，其实一共是两种类型的事件，文件类型，事件类型，事件类型的事件是未来尚未发生的，文件类型的事件嘛，主要是I/O事件，再说，unix哲学里面，一切都是文件。\r\n\r\naeProcessEvents 第一个if判断无意义，略过，第二个if/else ,那一大块代码段，是用来设置事件时间的。if/else之后有这么一行,前面的十几二十行就是为了得到不同情况下的tvp参数，也就是最近的时间事件 到达时间。\r\n\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\r\n\r\naeApiPoll 返回了当前已经可读可处理的事件列表 eventLoop-&gt;fired ，以及numevents数量。\r\n后面接着的for循环，就是对已经响应的事件进行处理。这里其实存在一个很经典的设计模式，观察者模式。\r\n“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\r\n文件描述字发生变化，通知对应的调度器，调度器调用预先注册好的函数处理，调度器通过epoll观察着全部的I/O变化。\r\n之前说了，一共其实只有两种事件，一个文件事件，一个时间事件，对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\r\n这里逻辑很简单，就是找对应的处理函数，然后把参数什么的传递给他们处理。挺适合goroutine的，直接开协程处理，哈哈。\r\n\r\n[cpp]\r\n for (j = 0; j &lt; numevents; j++) {\r\n            // 从已就绪数组中获取事件\r\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\r\n            \r\n            int mask = eventLoop-&gt;fired[j].mask;\r\n            int fd = eventLoop-&gt;fired[j].fd;\r\n            int rfired = 0;\r\n            \r\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\r\n             * event removed an element that fired and we still didn''t\r\n             * processed, so we check if the event is still valid. */\r\n            // 读事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\r\n                // rfired 确保读/写事件只能执行其中一个\r\n                rfired = 1;\r\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            // 写事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\r\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\r\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            \r\n            processed++;\r\n }                                 \r\n[/cpp]\r\n\r\n回头接着说aeApiPoll 函数。逻辑也很简单，主要是对<a title="epoll_wait" href="http://unasm.sinaapp.com/?p=335" target="_blank">epoll_wait </a>函数的使用,这里我对官方的epoll_wait做了一个翻译。\r\n[cpp]\r\n   if (e-&gt;events &amp; EPOLLIN) mask |= AE_READABLE;\r\n   if (e-&gt;events &amp; EPOLLOUT) mask |= AE_WRITABLE;\r\n   if (e-&gt;events &amp; EPOLLERR) mask |= AE_WRITABLE;\r\n   if (e-&gt;events &amp; EPOLLHUP) mask |= AE_WRITABLE;\r\n[/cpp]\r\n这里挺有意思的。就是判断什么情况下，i/o套字节可读，可写，原来EPOLLERR和EPOLLHUP也是可写的。', 'redis的事件调度器  epoll', '', 'inherit', 'open', 'open', '', '354-revision-v1', '', '', '2015-07-02 13:22:19', '2015-07-02 13:22:19', '', 354, 'http://unasm.sinaapp.com/?p=357', 0, 'revision', '', 0),
(358, 1, '2015-07-03 07:20:19', '2015-07-03 07:20:19', '看源码的时候，看到了epoll部分，原来3.0都用了这个，挺好，正好最近研究epoll,就深入看了下代码，ae.c + ae_epoll.c 两个文件不到一千行代码，挺好。\r\n\r\n首先从aeMain函数开始\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n \r\n    eventLoop-&gt;stop = 0;\r\n \r\n    while (!eventLoop-&gt;stop) {\r\n \r\n        // 如果有需要在事件处理前执行的函数，那么运行它                                 \r\n        if (eventLoop-&gt;beforesleep != NULL)                                             \r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n                                                                                        \r\n        // 开始处理事件                                                                 \r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);                                      \r\n    }                                                                                   \r\n}\r\n[/cpp]\r\n\r\neventLoop 就是redis的事件调度器，可以看到这里就是一个死循环，只要stop不置位，就会不停循环。aeProcessEvents 处理epoll的响应事件。\r\n\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\n\r\nflags表示的是要处理的事件类型，其实一共是两种类型的事件，文件类型，事件类型，事件类型的事件是未来尚未发生的，文件类型的事件嘛，主要是I/O事件，再说，unix哲学里面，一切都是文件。\r\n\r\naeProcessEvents 第一个if判断无意义，略过，第二个if/else ,那一大块代码段，是用来设置事件时间的。if/else之后有这么一行,前面的十几二十行就是为了得到不同情况下的tvp参数，也就是最近的时间事件 到达时间。\r\n\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\r\n\r\naeApiPoll 返回了当前已经可读可处理的事件列表 eventLoop-&gt;fired ，以及numevents数量。\r\n后面接着的for循环，就是对已经响应的事件进行处理。这里其实存在一个很经典的设计模式，观察者模式。\r\n“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\r\n文件描述字发生变化，通知对应的调度器，调度器调用预先注册好的函数处理，调度器通过epoll观察着全部的I/O变化。\r\n之前说了，一共其实只有两种事件，一个文件事件，一个时间事件，对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\r\n这里逻辑很简单，就是找对应的处理函数，然后把参数什么的传递给他们处理。挺适合goroutine的，直接开协程处理，哈哈。\r\n\r\n[cpp]\r\n for (j = 0; j &lt; numevents; j++) {\r\n            // 从已就绪数组中获取事件\r\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\r\n            \r\n            int mask = eventLoop-&gt;fired[j].mask;\r\n            int fd = eventLoop-&gt;fired[j].fd;\r\n            int rfired = 0;\r\n            \r\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\r\n             * event removed an element that fired and we still didn''t\r\n             * processed, so we check if the event is still valid. */\r\n            // 读事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\r\n                // rfired 确保读/写事件只能执行其中一个\r\n                rfired = 1;\r\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            // 写事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\r\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\r\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            \r\n            processed++;\r\n }                                 \r\n[/cpp]\r\n\r\n回头接着说aeApiPoll 函数。逻辑也很简单，主要是对<a title="epoll_wait" href="http://unasm.sinaapp.com/?p=335" target="_blank">epoll_wait </a>函数的使用,这里我对官方的epoll_wait做了一个翻译。epoll_wait 会在三种情况下返回，停止阻塞。\r\n一个是被中断，一个是超时，一个是所有的描述字都得到了响应，也就是说，虽然epoll是为异步非阻塞i/o提供的解决方案，到底还是会有一定程度的阻塞的，只是不会为一个I/O阻塞，而是在监测所有的I/O的时候阻塞。\r\n[cpp]\r\n   if (e-&gt;events &amp; EPOLLIN) mask |= AE_READABLE;\r\n   if (e-&gt;events &amp; EPOLLOUT) mask |= AE_WRITABLE;\r\n   if (e-&gt;events &amp; EPOLLERR) mask |= AE_WRITABLE;\r\n   if (e-&gt;events &amp; EPOLLHUP) mask |= AE_WRITABLE;\r\n[/cpp]\r\n这里挺有意思的。就是判断什么情况下，i/o套字节可读，可写，原来EPOLLERR和EPOLLHUP也是可写的。', 'redis的事件调度器  epoll', '', 'inherit', 'open', 'open', '', '354-revision-v1', '', '', '2015-07-03 07:20:19', '2015-07-03 07:20:19', '', 354, 'http://unasm.sinaapp.com/?p=358', 0, 'revision', '', 0),
(400, 1, '2015-07-17 03:02:34', '0000-00-00 00:00:00', '', 'Auto Draft', '', 'auto-draft', 'open', 'open', '', '', '', '', '2015-07-17 03:02:34', '0000-00-00 00:00:00', '', 0, 'http://unasm.sinaapp.com/?p=400', 0, 'post', '', 0),
(361, 1, '2015-07-09 13:49:52', '2015-07-09 13:49:52', '被水军攻击是从7月5日0点43分（最早的帖子）开始的，就是周日的晚上，我是第二天早上知道的，平时就有水军在不停的灌，也不是太在意，下午的时候，监控的人说实在太多了，封不尽删不完，已经处于放弃治疗的状态，但是在休假，电脑也不在身边，有心无力，好几个月了，我只请一天假，攻击就在我请假的时候发动了,有点隆美尔的感觉。\r\n\r\n周二刚下火车，来到公司，就开始梳理。实际上，新接手论坛才一两个星期，还要兼顾娱乐频道，代码又丑又乱，对发帖的流程只是大概清楚,虽然自己是技术，负责这个，实际上，也是头大。\r\n\r\n先和老大沟通，问具体的情况，了解多少账号，了解发了多少帖子，各个频道的编辑在应对的时候都是怎么做的，请教了可能的应对的方案，然后和监控谈谈，听监控说说概括，看监控有什么主意，然后和各个频道（育儿，星座，科技）谈谈，听他们认为什么方案行之有效，然后连系统，看写入速度，看垃圾用户发帖量，看sso，用户来源，估了下总量。问了一圈，代码层面还是没有什么进展，对如何解决多少有了点谱。\r\n\r\n因为了解到主要是有两三千个账号在灌垃圾，只要限制每个账号的每天发帖量，就会极大程度的减小垃圾的量，我依稀记得论坛里面好像是有这个限制的，只是不知道为什么失效了，从数据库里面select 数据来看，有一个垃圾账号一天发了两千多，和监控以及老大碰了下，决定先上这个，然后就是在那堆恶心的代码里面，根据寥寥可数的注释，变量的命名以及从逻辑上连蒙带猜，找到了疑似发帖限制的，我开始以为是时间太久了，mc 挂了，所以导致了限制无效，就不断向就去排查mc 的情况，mc是对的，从最上层一直追查到new Memcache,发现mc是没有问题的。带着失望回头看，无意中发现之前设置的mc的值失效了，这点很神奇，理论上应该是一天后才失效的才对，一行行扫，发现是set的时候，没有指定失效的时间，追查的框架的最底层，也没有发现一个默认的时间，“低级错误...........”，一阵恶心略过心头，加上失效时间之后，测试，发现可以了，赶快上线，略出一口气，应该不会再被大规模灌了，虽然不知道全量垃圾用户多少。\r\n\r\n之后要加图片验证码，实际上，我都没有在论坛见过验证码这东西，只是凭借着相信肯定有这么一个东西，就在代码里面扒，看来看去，觉得有一个$secodecheck 的变量，好像是控制这个的开关，有一段代码，看起来像是生成验证码的，但是discuz恶心的地方就是一个.php文件，可以被各种url，以各种不同的参数访问进来，完全不知道怎么让程序运行到这段疑似代码，同一个变量，被穿插在700行没有函数隔离的代码中，在不同地方以各种不同的条件设置置位，不知道为什么这么做，没个解释，有些变量，来自include的子文件，有些变量是全局的，request,get,cookie中的变量也被提出来成为php的变量，变量之间互相污染，防不胜防，后来听说军事论坛有图片验证码，赶快拿来url看看，总算看着url中最初的变量，以及连蒙带猜，加上几分运气经验，在下班前将图片验证码上线了，防住了水军的继续灌。上面的这些事情加起来就消耗了一天的时间。\r\n\r\n之后开始按照频道的要求开始清除这段时间的垃圾内容，我开始以为会很简单，但是却花了整整一天。因为对论坛删除帖子的过程不是很清楚，中间到底涉及多少数据表，行，字段的修改，有没有队列机制，如何清除缓存，文件等等。不怎么敢直接走脚本修改删除数据库，也不愿意冒修改主库的风险，取舍排查之后，决定走http请求，从数据库里面通过select 得到要清理的帖子id，然后根据id走http请求删除，风险小，容易控制，恢复，排查异常，当然，http的问题是慢，所以后来我开了20个php进程删。从数据库里面select得到 id，两个板块，大概有130w数据要删，还有4w多的异常数据，也要清理，这个是删除的过程中发现的。\r\n\r\n删本身难度不大，但是却有风险，我写了脚本，跑着，跑着，然后在屏幕上监测各种输出，还有不断的刷页面，看结果，是不是符合预期，有没有删错，速度如何，很快发现了清理不了的异常数据，到现在也不是很清楚这些数据的来源，我没有论坛的操作日志，为了删除这些，我还是仔细的读了一遍删除过程的代码，以及论坛获取正常帖子的代码，研究了数据的特征，分析了数据量，4w条，我开始以为是因为删除过程中没有加事务，在代码执行中的异常以及不回滚导致的数据的不完整。把问题推给异常总是这么的顺理成章。但是通过分析删除的输出日志以及结果数据的现状，还有未修改数据对比综合来推测，实际上，应该不是异常导致的，而是本来就是这样，为什么会这样，不知道，但是和我修改没关系，为了删除他们，我又写了一个脚本，连接主库，修改记录，把这些异常的修正成正常的，记录下id，然后走http接口，删了他们。\r\n\r\n连接主库，然后修改数据是让人提心吊胆的事情。http错了再多，也就是几十上百条数据的事情，但是连接主库，一个不小心就可能清库，修改完之后，我开了20个php进程，看了下数据库平台显示的主从同步的压力，黄色，处于有压力，但是还能接受的地步。看着屏幕上疯狂的输出，惬意的喝杯水，有点得意，享受着跑数据过程中的宁静，然后，噩梦就在几分钟之后开始了。\r\n\r\n正在清理的板块，没有数据了，空了，空了，空了，在我刚刚修改主库之后，在我疯狂删除的时候，一阵电流经过身体，各种清库的传说略过心头。欲哭无泪，赶紧连接数据库，select之后，发现数据还在，从库不可信，连主库，发现主库也没挂，数据也还在，心中稍定，总算不用再半夜里打电话给DBA求恢复数据。我肯定没有修改线上的代码，虽然修改了几次测试机的代码，代码没动，数据还爱，推测是缓存问题，也可能是有编辑修改了论坛数据，都有可能，排查，再次排查，一天内第几次追查数据了，着重看缓存问题，追查到是因为subforums + forum[''threads''] = 0 导致的。subforums来自缓存，全局变量$_DCACHE，而$_DCACHE中没有有subforums 的信息，推测是因为什么导致subforums缺失，不断追查$_DCACHE来源，发现的确是来自文件缓存，数据源是forum_cache，一阵雀跃，以为找到了问题，然而并不是，并没有编辑在凌晨的时候去修改论坛的结构，forum_cache表里面数据正确 ，subforums 的确没有，这是一个错误，但是不是导致这个问题的错误，回头看forum 变量，一番追查，发现是因为自己不断的删除数据，forum[''threads''] 不断减一，而forum[''threads''] 并没有真正反映数据库帖子量的大小，数据一致性的问题，修改forum[''threads'']成正确的值，然后就可以了。\r\n\r\n再次开动脚本，开始删数据，然后不断检查状况，一切正常，正常，正常，然后就删完了，', '记一次线上被灌水攻击', '', 'publish', 'open', 'open', '', '%e8%ae%b0%e4%b8%80%e6%ac%a1%e7%ba%bf%e4%b8%8a%e8%a2%ab%e7%81%8c%e6%b0%b4%e6%94%bb%e5%87%bb', '', '', '2015-07-09 13:49:52', '2015-07-09 13:49:52', '', 0, 'http://unasm.sinaapp.com/?p=361', 0, 'post', '', 0),
(362, 1, '2015-07-09 13:49:52', '2015-07-09 13:49:52', '被水军攻击是从7月5日0点43分（最早的帖子）开始的，就是周日的晚上，我是第二天早上知道的，平时就有水军在不停的灌，也不是太在意，下午的时候，监控的人说实在太多了，封不尽删不完，已经处于放弃治疗的状态，但是在休假，电脑也不在身边，有心无力，好几个月了，我只请一天假，攻击就在我请假的时候发动了,有点隆美尔的感觉。\r\n\r\n周二刚下火车，来到公司，就开始梳理。实际上，新接手论坛才一两个星期，还要兼顾娱乐频道，代码又丑又乱，对发帖的流程只是大概清楚,虽然自己是技术，负责这个，实际上，也是头大。\r\n\r\n先和老大沟通，问具体的情况，了解多少账号，了解发了多少帖子，各个频道的编辑在应对的时候都是怎么做的，请教了可能的应对的方案，然后和监控谈谈，听监控说说概括，看监控有什么主意，然后和各个频道（育儿，星座，科技）谈谈，听他们认为什么方案行之有效，然后连系统，看写入速度，看垃圾用户发帖量，看sso，用户来源，估了下总量。问了一圈，代码层面还是没有什么进展，对如何解决多少有了点谱。\r\n\r\n因为了解到主要是有两三千个账号在灌垃圾，只要限制每个账号的每天发帖量，就会极大程度的减小垃圾的量，我依稀记得论坛里面好像是有这个限制的，只是不知道为什么失效了，从数据库里面select 数据来看，有一个垃圾账号一天发了两千多，和监控以及老大碰了下，决定先上这个，然后就是在那堆恶心的代码里面，根据寥寥可数的注释，变量的命名以及从逻辑上连蒙带猜，找到了疑似发帖限制的，我开始以为是时间太久了，mc 挂了，所以导致了限制无效，就不断向就去排查mc 的情况，mc是对的，从最上层一直追查到new Memcache,发现mc是没有问题的。带着失望回头看，无意中发现之前设置的mc的值失效了，这点很神奇，理论上应该是一天后才失效的才对，一行行扫，发现是set的时候，没有指定失效的时间，追查的框架的最底层，也没有发现一个默认的时间，“低级错误...........”，一阵恶心略过心头，加上失效时间之后，测试，发现可以了，赶快上线，略出一口气，应该不会再被大规模灌了，虽然不知道全量垃圾用户多少。\r\n\r\n之后要加图片验证码，实际上，我都没有在论坛见过验证码这东西，只是凭借着相信肯定有这么一个东西，就在代码里面扒，看来看去，觉得有一个$secodecheck 的变量，好像是控制这个的开关，有一段代码，看起来像是生成验证码的，但是discuz恶心的地方就是一个.php文件，可以被各种url，以各种不同的参数访问进来，完全不知道怎么让程序运行到这段疑似代码，同一个变量，被穿插在700行没有函数隔离的代码中，在不同地方以各种不同的条件设置置位，不知道为什么这么做，没个解释，有些变量，来自include的子文件，有些变量是全局的，request,get,cookie中的变量也被提出来成为php的变量，变量之间互相污染，防不胜防，后来听说军事论坛有图片验证码，赶快拿来url看看，总算看着url中最初的变量，以及连蒙带猜，加上几分运气经验，在下班前将图片验证码上线了，防住了水军的继续灌。上面的这些事情加起来就消耗了一天的时间。\r\n\r\n之后开始按照频道的要求开始清除这段时间的垃圾内容，我开始以为会很简单，但是却花了整整一天。因为对论坛删除帖子的过程不是很清楚，中间到底涉及多少数据表，行，字段的修改，有没有队列机制，如何清除缓存，文件等等。不怎么敢直接走脚本修改删除数据库，也不愿意冒修改主库的风险，取舍排查之后，决定走http请求，从数据库里面通过select 得到要清理的帖子id，然后根据id走http请求删除，风险小，容易控制，恢复，排查异常，当然，http的问题是慢，所以后来我开了20个php进程删。从数据库里面select得到 id，两个板块，大概有130w数据要删，还有4w多的异常数据，也要清理，这个是删除的过程中发现的。\r\n\r\n删本身难度不大，但是却有风险，我写了脚本，跑着，跑着，然后在屏幕上监测各种输出，还有不断的刷页面，看结果，是不是符合预期，有没有删错，速度如何，很快发现了清理不了的异常数据，到现在也不是很清楚这些数据的来源，我没有论坛的操作日志，为了删除这些，我还是仔细的读了一遍删除过程的代码，以及论坛获取正常帖子的代码，研究了数据的特征，分析了数据量，4w条，我开始以为是因为删除过程中没有加事务，在代码执行中的异常以及不回滚导致的数据的不完整。把问题推给异常总是这么的顺理成章。但是通过分析删除的输出日志以及结果数据的现状，还有未修改数据对比综合来推测，实际上，应该不是异常导致的，而是本来就是这样，为什么会这样，不知道，但是和我修改没关系，为了删除他们，我又写了一个脚本，连接主库，修改记录，把这些异常的修正成正常的，记录下id，然后走http接口，删了他们。\r\n\r\n连接主库，然后修改数据是让人提心吊胆的事情。http错了再多，也就是几十上百条数据的事情，但是连接主库，一个不小心就可能清库，修改完之后，我开了20个php进程，看了下数据库平台显示的主从同步的压力，黄色，处于有压力，但是还能接受的地步。看着屏幕上疯狂的输出，惬意的喝杯水，有点得意，享受着跑数据过程中的宁静，然后，噩梦就在几分钟之后开始了。\r\n\r\n正在清理的板块，没有数据了，空了，空了，空了，在我刚刚修改主库之后，在我疯狂删除的时候，一阵电流经过身体，各种清库的传说略过心头。欲哭无泪，赶紧连接数据库，select之后，发现数据还在，从库不可信，连主库，发现主库也没挂，数据也还在，心中稍定，总算不用再半夜里打电话给DBA求恢复数据。我肯定没有修改线上的代码，虽然修改了几次测试机的代码，代码没动，数据还爱，推测是缓存问题，也可能是有编辑修改了论坛数据，都有可能，排查，再次排查，一天内第几次追查数据了，着重看缓存问题，追查到是因为subforums + forum[''threads''] = 0 导致的。subforums来自缓存，全局变量$_DCACHE，而$_DCACHE中没有有subforums 的信息，推测是因为什么导致subforums缺失，不断追查$_DCACHE来源，发现的确是来自文件缓存，数据源是forum_cache，一阵雀跃，以为找到了问题，然而并不是，并没有编辑在凌晨的时候去修改论坛的结构，forum_cache表里面数据正确 ，subforums 的确没有，这是一个错误，但是不是导致这个问题的错误，回头看forum 变量，一番追查，发现是因为自己不断的删除数据，forum[''threads''] 不断减一，而forum[''threads''] 并没有真正反映数据库帖子量的大小，数据一致性的问题，修改forum[''threads'']成正确的值，然后就可以了。\r\n\r\n再次开动脚本，开始删数据，然后不断检查状况，一切正常，正常，正常，然后就删完了，', '记一次线上被灌水攻击', '', 'inherit', 'open', 'open', '', '361-revision-v1', '', '', '2015-07-09 13:49:52', '2015-07-09 13:49:52', '', 361, 'http://unasm.sinaapp.com/?p=362', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(363, 1, '2015-07-10 08:52:53', '2015-07-10 08:52:53', '本次灌水清理一共删除 1313003条垃圾数据，数据一共来自 2945个垃圾账号，其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com结束，共发帖107131个，其中删除92162个\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他ip如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n', '灌水攻击回顾分析', '', 'publish', 'open', 'open', '', '%e7%81%8c%e6%b0%b4%e6%94%bb%e5%87%bb%e7%9a%84%e5%88%86%e6%9e%90%e5%9b%9e%e9%a1%be', '', '', '2015-07-12 00:32:11', '2015-07-12 00:32:11', '', 0, 'http://unasm.sinaapp.com/?p=363', 0, 'post', '', 0),
(364, 1, '2015-07-10 08:52:53', '2015-07-10 08:52:53', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始与 2015-07-06 00:05左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1                                                                        \r\nvofzujqovnup    1                                                                        \r\nhvcaygscmrzo    1                                                                        \r\nbamplkltkjck    1                                                                        \r\nobsuukxdugli    1                                                                        \r\nlwelbcflixvk    1                                                                        \r\nmvujvixbwjoy    1                                                                        \r\nrpvxvphhjvzd    1            \r\n[/php]\r\n\r\n<p class="p1">第二类账号是</p>\r\n<p class="p1"></p>', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-10 08:52:53', '2015-07-10 08:52:53', '', 363, 'http://unasm.sinaapp.com/?p=364', 0, 'revision', '', 0),
(365, 1, '2015-07-11 14:23:23', '2015-07-11 14:23:23', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 2945个账号，开始于 2015-07-05 00点左右\n\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\n\n[php]\nhtizroxrpyyr    1\nvofzujqovnup    1\nhvcaygscmrzo    1\nbamplkltkjck    1\nobsuukxdugli    1\nlwelbcflixvk    1\nmvujvixbwjoy    1\nrpvxvphhjvzd    1\n[/php]\n\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\n\n\n[php]\neyi1988910@163.com 5                                            \nubo77920@163.com  5\nuangqihah@163.com  5\nylujinli@163.com   5\nushijiecf1739@mailnesia.com    95\nshenziyinxc275@mailnesia.com    95\nshentingfangvy97@mailnesia.com  95\n[/php]\n\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\n\n\n[php]\nlgwwwk@mailnesia.com	1\ncrdbkhnet99731	1\nhdndh468	1\nnzjpr408	1\ndvtrz888	1\noouci040	1\nfrpdx066	1\nvbjlp468	1\nhdoryynwg79333	1\nabwnn	1\nwww52088    2\ndsgfds3443  2\nfgjgfhdfg   2\njfgyhr  3\n[/php]\n\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\n\n[php]\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\n[/php]\n\n\n[php]\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\n[/php]\n\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\n\n[php]\n106.46.242.147  109  \n122.232.41.223  274  \n43.240.57.86    379  \n111.183.163.22  862  \n113.27.20.210   901  \n43.240.57.90    925  \n106.46.243.46   1177 \n106.46.242.133  2013 \n171.83.82.246   2146 \n123.151.191.19  3580 \n43.240.57.95    3994 \n125.39.18.99    5726 \n60.220.213.153  6035 \n221.233.217.14  9625 \n60.223.221.21   20226\n112.90.236.50   154850\n125.39.18.103   375653\n43.240.57.91    733533\n[/php]\n\n从注册ip上来看，1943个没有注册ip，其他人的如下\n[php]\n125.39.18.99    1    \n60.223.221.21   1\n61.136.153.198  1\n58.53.99.150    1    \n112.90.236.50   1\n43.240.57.91    2    \n124.228.28.195  3\n[/php]\n从注册时间上来看，\n<ol>\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\n</ol>\n\n\n\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\n[php]\n111.179.41.115	1\n61.184.226.162	1\n222.209.250.86	1\n171.40.68.99	1\n60.14.239.210	1\n202.114.224.27	1\n117.9.248.195	1\n61.136.153.198	1\n111.180.105.118	2\n60.172.246.104	4\n122.13.141.82	10\n113.98.76.109	11\n171.83.82.246	13\n113.57.244.58	18\n113.57.191.44	26\n113.57.182.75	29\n113.57.191.76	32\n60.172.229.142	48\n183.10.119.133	112\n59.172.196.28	149\n171.113.191.104	513\n[/php]\n\n这是第二类用户的注册时间,\n<ol>\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\n	<li>7月7号，共注册四个账号,详情如下</li>\n</ol>\n\n[php]\n2015-07-07 00:43:18\n2015-07-07 01:26:43\n2015-07-07 02:00:16\n2015-07-07 07:55:12\n[/php]\n\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\n\n[php]\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\n\n雷少专用&lt;/pre&gt;\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\n&lt;pre&gt;\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\n[/php]\n\n\n[php]\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\n\n雷少专用\n\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\n[/php]\n', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-autosave-v1', '', '', '2015-07-11 14:23:23', '2015-07-11 14:23:23', '', 363, 'http://unasm.sinaapp.com/?p=365', 0, 'revision', '', 0),
(371, 1, '2015-07-10 10:52:37', '2015-07-10 10:52:37', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n对第二类用户展开分析，先从ip入手,这个是他们注册的时候使用的ip,结果如下，几乎可以肯定171.113.191.104 就是这次攻击的背后隐藏着ip了\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n\r\n这是第二类用户的注册时间\r\n[php]\r\n2015-07-06 00:11:47\r\n2015-07-05 23:51:48\r\n2015-07-06 05:10:37\r\n2015-07-06 00:13:08\r\n2015-07-06 00:13:37\r\n2015-07-06 05:09:06\r\n2015-07-06 00:15:02\r\n2015-07-06 00:15:27\r\n2015-07-06 00:15:35\r\n2015-07-06 00:35:50\r\n2015-07-06 00:20:18\r\n2015-07-06 05:10:36\r\n2015-07-06 03:43:50\r\n[/php]\r\n', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-10 10:52:37', '2015-07-10 10:52:37', '', 363, 'http://unasm.sinaapp.com/?p=371', 0, 'revision', '', 0),
(367, 1, '2015-07-10 09:25:37', '2015-07-10 09:25:37', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,这些账号发帖107131个，其中删除92162个 ，还有 14969个未删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-10 09:25:37', '2015-07-10 09:25:37', '', 363, 'http://unasm.sinaapp.com/?p=367', 0, 'revision', '', 0),
(370, 1, '2015-07-10 09:39:02', '2015-07-10 09:39:02', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-10 09:39:02', '2015-07-10 09:39:02', '', 363, 'http://unasm.sinaapp.com/?p=370', 0, 'revision', '', 0),
(369, 1, '2015-07-10 09:29:58', '2015-07-10 09:29:58', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\nshishuyiyb85395@mailnesia.com   95\r\nsangsixuenq3084@mailnesia.com   95\r\nshenshijiecf395@mailnesia.com   95\r\nshazhongcf6317@mailnesia.com    95\r\n[/php]\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-10 09:29:58', '2015-07-10 09:29:58', '', 363, 'http://unasm.sinaapp.com/?p=369', 0, 'revision', '', 0),
(368, 1, '2015-07-10 09:29:11', '2015-07-10 09:29:11', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除(可能被其他途径删除了)</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\nshishuyiyb85395@mailnesia.com   95\r\nsangsixuenq3084@mailnesia.com   95\r\nshenshijiecf395@mailnesia.com   95\r\nshazhongcf6317@mailnesia.com    95\r\n[/php]\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-10 09:29:11', '2015-07-10 09:29:11', '', 363, 'http://unasm.sinaapp.com/?p=368', 0, 'revision', '', 0),
(366, 1, '2015-07-10 09:21:57', '2015-07-10 09:21:57', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,这些账号发帖107131个，其中删除92162个 ，还有 14969个未删除</p>\r\n<p class="p1"></p>\r\n\r\n\r\n[php]\r\n\r\n&lt;span class=&quot;s1&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;eyi1988910@163.com 5 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                     &lt;/span&gt;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;s1&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ubo77920@163.com &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;5 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                      &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s4&quot;&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                   &lt;/span&gt;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;s1&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;www123456789 &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;5 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                          &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s4&quot;&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                   &lt;/span&gt;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;s1&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;uangqihah@163.com&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;5 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                      &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                   &lt;/span&gt;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;s1&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ylujinli@163.com &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;5 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                      &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s4&quot;&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                   &lt;/span&gt;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;s1&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;uangsilin110521@163.com&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;5 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                              &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s4&quot;&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                   &lt;/span&gt;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;s1&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;d2321040@163.com &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;6 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                   &lt;/span&gt;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;s5&quot;&gt;pwwwpqqq@163.com&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;6 &lt;/span&gt;\r\n\r\n[/php]\r\n\r\n<p class="p1"></p>\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n<p class="p1">\r\n[php]&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ww52088&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;2 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                       &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cxudb@mailnesia.com&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;2 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                           &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sgfds3443&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;2 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                       &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;gjgfhdfg &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;2 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                       &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fgyhr&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;3 &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fghasdfasd 4&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;ertsegdfgsdf&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;87&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;gdfser&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;86&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;lgwwwk@mailnesia.com 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;crdbkhnet99731 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;hdndh468 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;nzjpr408 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;dvtrz888 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;oouci040 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;frpdx066 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;vbjlp468 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;hdoryynwg79333 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;abwnn 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;[/php]\r\n</p>', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-10 09:21:57', '2015-07-10 09:21:57', '', 363, 'http://unasm.sinaapp.com/?p=366', 0, 'revision', '', 0),
(372, 1, '2015-07-11 08:37:41', '2015-07-11 08:37:41', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n换个角度，从内容上分析，从所有的第一类用户发帖内容来看,所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，根据从页面上提供的用户uid在系统中搜索,发现攻击者是在每次发帖之后，都修改了自己的用户名，这个也是为什么之前得出“用户信息全部不存在”结论的原因，因为修改了名字，拿之前的名字找，自然没有。\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉 \r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n对第二类用户展开分析，先从ip入手,这个是他们注册的时候使用的ip,结果如下，几乎可以肯定171.113.191.104 就是这次攻击的背后隐藏着ip了\r\n\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，<code>于2015-07-05 23:59:53结束，共注册71个账号</code></li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册五个账号,详情如下</li>\r\n</ol>\r\n[php]\r\n2015-07-07 00:43:18                                                                                                                                           \r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的征文内容都是乱码\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用\r\n\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-11 08:37:41', '2015-07-11 08:37:41', '', 363, 'http://unasm.sinaapp.com/?p=372', 0, 'revision', '', 0),
(373, 1, '2015-07-11 08:40:22', '2015-07-11 08:40:22', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n换个角度，从内容上分析，从所有的第一类用户发帖内容来看,所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，根据从页面上提供的用户uid在系统中搜索,发现攻击者是在每次发帖之后，都修改了自己的用户名，这个也是为什么之前得出“用户信息全部不存在”结论的原因，因为修改了名字，拿之前的名字找，自然没有。\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉 \r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n对第二类用户展开分析，先从ip入手,这个是他们注册的时候使用的ip,结果如下，几乎可以肯定171.113.191.104 就是这次攻击的背后隐藏着ip了\r\n\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，<code>于2015-07-05 23:59:53结束，共注册71个账号</code></li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册五个账号,详情如下</li>\r\n</ol>\r\n[php]\r\n2015-07-07 00:43:18                                                                                                                                           \r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用\r\n\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-11 08:40:22', '2015-07-11 08:40:22', '', 363, 'http://unasm.sinaapp.com/?p=373', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(374, 1, '2015-07-11 10:05:54', '2015-07-11 10:05:54', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n换个角度，从内容上分析，从所有的第一类用户发帖内容来看,所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，根据从页面上提供的用户uid在系统中搜索,发现攻击者是在每次发帖之后，都修改了自己的用户名，这个也是为什么之前得出“用户信息全部不存在”结论的原因，因为修改了名字，拿之前的名字找，自然没有。\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉 \r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n随机选择了7w 个用户名，得到对应的520个用户账号，这些账号在系统中共发帖合计413357，单个账号发帖量从239 到1336不等，危害极深，I have to say.\r\n从发帖ip上来看,全部共27个ip,43.240.57.91 几乎占据了全部的发帖量，单个人或者团伙所为。\r\n\r\n[php]\r\n42.49.255.3     92\r\n106.46.243.46   189 \r\n106.46.242.133  336 \r\n43.240.57.90    632 \r\n113.27.20.210   901 \r\n125.39.18.99    3446\r\n43.240.57.91    427608\r\n[/php]\r\n从注册ip上来看，517个没有注册ip，两个来自43.240.57.91，一个来自125.39.18.99 ，\r\n从注册时间上来看\r\n对第二类用户展开分析，先从ip入手,这个是他们注册的时候使用的ip,结果如下，几乎可以肯定171.113.191.104 就是这次攻击的背后隐藏着ip了\r\n\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n[php]\r\n2015-07-07 00:43:18                                                                                                                                           \r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用\r\n\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-11 10:05:54', '2015-07-11 10:05:54', '', 363, 'http://unasm.sinaapp.com/?p=374', 0, 'revision', '', 0),
(377, 1, '2015-07-11 10:36:51', '2015-07-11 10:36:51', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n换个角度，从内容上分析，从所有的第一类用户发帖内容来看,所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，根据从页面上提供的用户uid在系统中搜索,发现攻击者是在每次发帖之后，都修改了自己的用户名，这个也是为什么之前得出“用户信息全部不存在”结论的原因，因为修改了名字，拿之前的名字找，自然没有。\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n随机选择了7w 个用户名，得到对应的520个用户账号，这些账号在系统中共发帖合计413357，单个账号发帖量从239 到1336不等，危害极深，I have to say.\r\n从发帖ip上来看,全部共27个ip,43.240.57.91 几乎占据了全部的发帖量，单个人或者团伙所为。\r\n\r\n[php]\r\n42.49.255.3     92\r\n106.46.243.46   189\r\n106.46.242.133  336\r\n43.240.57.90    632\r\n113.27.20.210   901\r\n125.39.18.99    3446\r\n43.240.57.91    427608\r\n[/php]\r\n\r\n从注册ip上来看，517个没有注册ip，两个来自43.240.57.91，也是发帖量最大的那个ip，一个来自125.39.18.99 ，\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 21:13:27 ，结束于 23:37:27，共注册账号24个，</li>\r\n	<li>7月6号，开始于00:08:50，结束于04:32:23，共注册账号496个</li>\r\n</ol>\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 独占鳌头\r\n\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-11 10:36:51', '2015-07-11 10:36:51', '', 363, 'http://unasm.sinaapp.com/?p=377', 0, 'revision', '', 0),
(376, 1, '2015-07-11 10:14:33', '2015-07-11 10:14:33', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n换个角度，从内容上分析，从所有的第一类用户发帖内容来看,所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，根据从页面上提供的用户uid在系统中搜索,发现攻击者是在每次发帖之后，都修改了自己的用户名，这个也是为什么之前得出“用户信息全部不存在”结论的原因，因为修改了名字，拿之前的名字找，自然没有。\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n随机选择了7w 个用户名，得到对应的520个用户账号，这些账号在系统中共发帖合计413357，单个账号发帖量从239 到1336不等，危害极深，I have to say.\r\n从发帖ip上来看,全部共27个ip,43.240.57.91 几乎占据了全部的发帖量，单个人或者团伙所为。\r\n\r\n[php]\r\n42.49.255.3     92\r\n106.46.243.46   189\r\n106.46.242.133  336\r\n43.240.57.90    632\r\n113.27.20.210   901\r\n125.39.18.99    3446\r\n43.240.57.91    427608\r\n[/php]\r\n\r\n从注册ip上来看，517个没有注册ip，两个来自43.240.57.91，一个来自125.39.18.99 ，\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 21:13:27 ，结束于 23:37:27，共注册账号24个，</li>\r\n	<li>7月6号，开始于00:08:50，结束于04:32:23，共注册账号496个对第二类用户展开分析，先从ip入手,这个是他们注册的时候使用的ip,结果如下，几乎可以肯定171.113.191.104 就是这次攻击的背后隐藏着ip了</li>\r\n</ol>\r\n\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-11 10:14:33', '2015-07-11 10:14:33', '', 363, 'http://unasm.sinaapp.com/?p=376', 0, 'revision', '', 0),
(375, 1, '2015-07-11 10:09:43', '2015-07-11 10:09:43', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n换个角度，从内容上分析，从所有的第一类用户发帖内容来看,所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，根据从页面上提供的用户uid在系统中搜索,发现攻击者是在每次发帖之后，都修改了自己的用户名，这个也是为什么之前得出“用户信息全部不存在”结论的原因，因为修改了名字，拿之前的名字找，自然没有。\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉 \r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n随机选择了7w 个用户名，得到对应的520个用户账号，这些账号在系统中共发帖合计413357，单个账号发帖量从239 到1336不等，危害极深，I have to say.\r\n从发帖ip上来看,全部共27个ip,43.240.57.91 几乎占据了全部的发帖量，单个人或者团伙所为。\r\n\r\n[php]\r\n42.49.255.3     92\r\n106.46.243.46   189 \r\n106.46.242.133  336 \r\n43.240.57.90    632 \r\n113.27.20.210   901 \r\n125.39.18.99    3446\r\n43.240.57.91    427608\r\n[/php]\r\n\r\n从注册ip上来看，517个没有注册ip，两个来自43.240.57.91，一个来自125.39.18.99 ，\r\n从注册时间上来看，</pre>\r\n<ol>\r\n	<li>7月5号，开始于 21:13:27 ，结束于 23:37:27，共注册账号24个，</li>\r\n	<li>7月6号，开始于00:08:50，结束于04:32:23，共注册账号496个\r\n\r\n对第二类用户展开分析，先从ip入手,这个是他们注册的时候使用的ip,结果如下，几乎可以肯定171.113.191.104 就是这次攻击的背后隐藏着ip了</li>\r\n</ol>\r\n\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18                                                                                                                                           \r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用\r\n\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-11 10:09:43', '2015-07-11 10:09:43', '', 363, 'http://unasm.sinaapp.com/?p=375', 0, 'revision', '', 0),
(378, 1, '2015-07-11 11:20:15', '2015-07-11 11:20:15', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n换个角度，从内容上分析，从所有的第一类用户发帖内容来看,所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，根据从页面上提供的用户uid在系统中搜索,发现攻击者是在每次发帖之后，都修改了自己的用户名，这个也是为什么之前得出“用户信息全部不存在”结论的原因，因为修改了名字，拿之前的名字找，自然没有。\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n随机选择了7w 个用户名，得到对应的520个用户账号，这些账号在系统中共发帖合计413357，单个账号发帖量从239 到1336不等，危害极深，I have to say.\r\n从发帖ip上来看,全部共27个ip,43.240.57.91 几乎占据了全部的发帖量，单个人或者团伙所为。\r\n\r\n[php]\r\n42.49.255.3     92\r\n106.46.243.46   189\r\n106.46.242.133  336\r\n43.240.57.90    632\r\n113.27.20.210   901\r\n125.39.18.99    3446\r\n43.240.57.91    427608\r\n[/php]\r\n\r\n从注册ip上来看，517个没有注册ip，两个来自43.240.57.91，也是发帖量最大的那个ip，一个来自125.39.18.99 ，\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 21:13:27 ，结束于 23:37:27，共注册账号24个，</li>\r\n	<li>7月6号，开始于00:08:50，结束于04:32:23，共注册账号496个</li>\r\n</ol>\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 独占鳌头</pre>\r\n\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-11 11:20:15', '2015-07-11 11:20:15', '', 363, 'http://unasm.sinaapp.com/?p=378', 0, 'revision', '', 0),
(388, 1, '2015-07-11 17:04:39', '2015-07-11 17:04:39', '本次灌水清理一共删除 1313003条垃圾数据，数据一共来自 2945个垃圾账号，其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com结束，共发帖107131个，其中删除92162个\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他ip如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n', '灌水攻击回顾分析', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-11 17:04:39', '2015-07-11 17:04:39', '', 363, 'http://unasm.sinaapp.com/?p=388', 0, 'revision', '', 0),
(387, 1, '2015-07-11 14:35:53', '2015-07-11 14:35:53', '本次灌水清理一共删除 1313003条垃圾数据，数据一共来自 2945个垃圾账号，其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com结束，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他ip如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n', '灌水攻击回顾分析', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-11 14:35:53', '2015-07-11 14:35:53', '', 363, 'http://unasm.sinaapp.com/?p=387', 0, 'revision', '', 0),
(380, 1, '2015-07-11 14:22:20', '2015-07-11 14:22:20', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 2945个账号，开始于 2015-07-05 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，全部账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他人的如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-11 14:22:20', '2015-07-11 14:22:20', '', 363, 'http://unasm.sinaapp.com/?p=380', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(379, 1, '2015-07-11 14:05:16', '2015-07-11 14:05:16', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n换个角度，从内容上分析，从所有的第一类用户发帖内容来看,所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，根据从页面上提供的用户uid在系统中搜索,发现攻击者是在每次发帖之后，都修改了自己的用户名，这个也是为什么之前得出“用户信息全部不存在”结论的原因，因为修改了名字，拿之前的名字找，自然没有。\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n随机选择了7w 个用户名，得到对应的520个用户账号，这些账号在系统中共发帖合计413357，单个账号发帖量从239 到1336不等，危害极深，I have to say.\r\n从发帖ip上来看,全部共27个ip,43.240.57.91 几乎占据了全部的发帖量，单个人或者团伙所为。\r\n\r\n[php]\r\n42.49.255.3     92\r\n106.46.243.46   189\r\n106.46.242.133  336\r\n43.240.57.90    632\r\n113.27.20.210   901\r\n125.39.18.99    3446\r\n43.240.57.91    427608\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他人的如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 独占鳌头</pre>\r\n\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-11 14:05:16', '2015-07-11 14:05:16', '', 363, 'http://unasm.sinaapp.com/?p=379', 0, 'revision', '', 0),
(381, 1, '2015-07-11 14:23:26', '2015-07-11 14:23:26', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 2945个账号，开始于 2015-07-05 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他人的如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-11 14:23:26', '2015-07-11 14:23:26', '', 363, 'http://unasm.sinaapp.com/?p=381', 0, 'revision', '', 0),
(382, 1, '2015-07-11 14:24:02', '2015-07-11 14:24:02', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 2945个账号，开始于 2015-07-05 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com结束，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他人的如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-11 14:24:02', '2015-07-11 14:24:02', '', 363, 'http://unasm.sinaapp.com/?p=382', 0, 'revision', '', 0),
(383, 1, '2015-07-11 14:25:14', '2015-07-11 14:25:14', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 2945个账号，开始于 2015-07-05 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com结束，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他ip如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n', '灌水攻击的分析回顾', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-11 14:25:14', '2015-07-11 14:25:14', '', 363, 'http://unasm.sinaapp.com/?p=383', 0, 'revision', '', 0),
(384, 1, '2015-07-11 14:28:35', '2015-07-11 14:28:35', '本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 2945个账号，开始于 2015-07-05 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com结束，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他ip如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n', '灌水攻击回顾分析', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-11 14:28:35', '2015-07-11 14:28:35', '', 363, 'http://unasm.sinaapp.com/?p=384', 0, 'revision', '', 0),
(385, 1, '2015-07-11 14:35:10', '2015-07-11 14:35:10', '本次灌水清理一共删除 1313003条垃圾数据，这些数据一共来自 2945个账号，开始于 2015-07-05 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com结束，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他ip如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n', '灌水攻击回顾分析', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-11 14:35:10', '2015-07-11 14:35:10', '', 363, 'http://unasm.sinaapp.com/?p=385', 0, 'revision', '', 0),
(386, 1, '2015-07-11 14:35:31', '2015-07-11 14:35:31', '本次灌水清理一共删除 1313003条垃圾数据，数据一共来自 2945个垃圾账号，开始于 2015-07-05 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class="p1">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com结束，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class="p1">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他ip如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n', '灌水攻击回顾分析', '', 'inherit', 'open', 'open', '', '363-revision-v1', '', '', '2015-07-11 14:35:31', '2015-07-11 14:35:31', '', 363, 'http://unasm.sinaapp.com/?p=386', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(389, 1, '2015-07-14 06:39:36', '2015-07-14 06:39:36', '摘录自《Redis 设计与实现》19.3\r\n在Redis中 事务总是具有原子性，一致性，隔离性，隔离性，持久性。一下四个小结分别对四个特性进行讨论\r\n<h3>19.1 原子性</h3>\r\n事物具有原子性指的是，数据库将十五中的多个操作当做一个整体来执行，服务器要不执行执行十五中的所有操作，要不就一个操作都不执行。对于Redis的事务功能来说，事务队列的命令要不就全部执行，要不就一个都不执行，因此Redis的事务是具有原子性的（注：有待讨论）\r\n举个例子，一下展示的是一个成功执行的事务，事务中的所有命令都会被执行，\r\n\r\n[php]\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SET msg &quot;hello&quot;\r\nQUEUED\r\nredis&gt;GET msg\r\nQUEUED\r\nredis&gt;EXEC\r\n1)OK\r\n2)&quot;hello&quot;\r\n[/php]\r\n\r\n与此相反，以下展示的是一个执行失败的事务，这个事务因为命令入队出错拒绝执行，事务中的所有命令都不会被执行。\r\n\r\n[php]\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SET msg &quot;hello&quot;\r\nQUEUED\r\nredis&gt;GET\r\n(error) ERR wrong number of arguments for ''get'' command\r\nredis&gt;GET msg\r\nQUEUED\r\nredis&gt;EXEC\r\n(error)EXECABORT Transaction discarded because of previous errors.\r\n[/php]\r\n\r\nRedis的事务和传统的关系型数据库事务的最大区别在于，Redis 不支持事务的回滚机制，即使事务队列中的某个命令在执行期间出现了错误，整个事务也会继续执行下去，知道事务队列中所有的命令都执行完毕。\r\n\r\n在下面的例子中，即使RPUSH命令在执行期间出现了错误，事务的后续命令也会继续执行下去，并且执行的命令也不会有任何影响。\r\n\r\n[php]\r\n\r\nredis&gt;SET msg &quot;hello&quot; #msg\r\n键是一个字符串\r\nOK\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SADD fruit &quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;\r\nQUEUED\r\nredis&gt;RPUSH msg &quot;good bye&quot; &quot;byebye&quot;\r\nQUEUED\r\nredis&gt;SADD alphabet &quot;a&quot; &quot;b&quot; &quot;c&quot;\r\nQUEUED\r\nredis&gt;EXEC\r\n1) (integer)3\r\n2(error) WRONGTYPE Operation against a key holding the wrong kind of value\r\n3)(integer)3\r\n[/php]\r\n\r\nRedis的作者在事务的文档中解释说，不支持事务的回滚是因为这种复杂的功能和Redis追求简单高效的设计主旨不相符，并且他认为，Redis事务的执行时错误通常都是编程错误产生的，这种错误通常出现在开发环境中，很少在实际生产环境中出现，没有必要开发事务的回滚功能。\r\n<h3>19.3.2一致性</h3>\r\n事物具有一致性指的是，如果数据库在执行事务之前是一直的，那么在执行事务之后，无论事务是否成功，数据库也应该仍然是一致的。\r\n\r\n"一致"指的是数据符合数据库本身的定义和要求，并没有包含非法或者无效的错误数据。\r\n\r\nRedis通过谨慎的错误检测和简单的设计保证事物的一致性，一下三个小结介绍Redis事务可能出错的地方，并说明Redis是如何妥善的处理这些错误，从而保证事务的一致性的。\r\n\r\n入队错误：如果一个事务在入队过程中出现命令不存在，或者命令格式不正确等情况，redis将拒绝执行这个事务。 2.6.5以前，如果在入队以前发生了错误，事务一样可以执行，不过只执行那些正确入队的命令。\r\n\r\n执行错误：关于这种错误，有两个需要说明的地方，执行过程中发生的错误都是一些不能再入队时被服务器发现的错误，这些错误只会在命令实际是中被触发。即使执行过程中发生错误，服务器也不会中断事务的执行，它会继续执行事务中余下的命令。并且已经执行的命令不会被出错的命令影响。\r\n\r\n服务器停机：如果在执行事务中停机，那么根据服务器使用的持久化模式，可能有以下的情况，如果服务器在无持久化内存模式下，重启后数据库是空白的，因此总是一致的。\r\n\r\n如果运行于RDB模式下，停机不会导致不一致，因为可以根据RDB恢复数据，如果找不到RDB文件，重启后数据库是空白的，总是一致的。\r\n\r\n如果运行于AOF模式下，事务中途停机不会导致不一致，因为可以根据AOF文件恢复数据。如果没有AOF，重启后是空白的，总之一直的。\r\n<h3>19.3.3 隔离性</h3>\r\n因为Redis使用单线程方式执行事务，并且服务器保证，执行事务中不会对事务进行中断，因此Redis的事务总是以串行的方式运行的，并且总是具有隔离性的。\r\n<h3>19.3.4耐久性</h3>\r\n事务的耐久性指的是，当一个事务执行完毕的时候，执行这个事务所得的结果已经保存到硬盘里面了，即使执行事务完毕之后停机，执行事务所得结果也不会丢失。\r\n因为\r\n<b>Redis的事务不过是简单地用队列包裹起一组Redis命令</b>\r\n，Redis并没有为事务提供任何额外的持久化功能，并且Redis的事务耐久性由Redis所使用的耐久化模式决定的。\r\n\r\n当服务器在无持久化内存模式下，事务不具有耐久性，一旦服务器停机，包括事务在内的所有服务器数据都停止。\r\n\r\n当服务器在RDB持久化模式下运行时，服务器只会在特定的保存条件满足时，才会执行BGSAVE命令。并且异步执行的BGSAVE 不能保证事务数据第一之间内保存在硬盘里面，因此RDB模式下不具有持久性。\r\n\r\n当服务器运行在AOF持久化模式下，并且appendsync选项为always时，程序总会在执行命令后调用sync，将数据真正保存在硬盘里面，因此这种配置喜爱具有耐久性。\r\n\r\n当服务器运行于AOF持久化模式下，并且appendfsync选项为everysec时，程序每秒同步一次命令到硬盘，如果停机恰好发生在同步的那一秒，可能会造成事务数据丢失，因此这种配置下，事务不具有耐久性。\r\n当服务器运行于AOF持久化模式下，并且appendfsync选项为no时，程序交给操作系统决定何时同步命令到硬盘，事务数据可能在等待同步中丢失，因此这种配置下，事务不具有耐久性。\r\n\r\n不论Redis在什么模式下工作，在事务的最后加SAVE 命令，总是看以保证事物的耐久度的，不过会影响效率。', 'redis 的ACID 性质', '', 'publish', 'open', 'open', '', 'redis-%e7%9a%84acid-%e6%80%a7%e8%b4%a8', '', '', '2015-07-14 08:39:14', '2015-07-14 08:39:14', '', 0, 'http://unasm.sinaapp.com/?p=389', 0, 'post', '', 0),
(390, 1, '2015-07-14 06:39:36', '2015-07-14 06:39:36', '摘录自《Redis 设计与实现》19.3\r\n在Redis中 事务总是具有原子性，一致性，隔离性，隔离性，持久性。一下四个小结分别对四个特性进行讨论\r\n<h3>19.1 原子性</h3>\r\n事物具有原子性指的是，数据库将十五中的多个操作当做一个整体来执行，服务器要不执行执行十五中的所有操作，要不就一个操作都不执行。对于Redis的事务功能来说，事务队列的命令要不就全部执行，要不就一个都不执行，因此Redis的事务是具有原子性的（注：有待讨论）\r\n举个例子，一下展示的是一个成功执行的事务，事务中的所有命令都会被执行，\r\n\r\n[php]\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SET msg &quot;hello&quot;\r\nQUEUED\r\nredis&gt;GET msg\r\nQUEUED\r\nredis&gt;EXEC\r\n1)OK\r\n2)&quot;hello&quot;\r\n[/php]\r\n\r\n与此相反，以下展示的是一个执行失败的事务，这个事务因为命令入队出错拒绝执行，事务中的所有命令都不会被执行。\r\n\r\n[php]\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SET msg &quot;hello&quot;\r\nQUEUED\r\nredis&gt;GET\r\n(error) ERR wrong number of arguments for ''get'' command\r\nredis&gt;GET msg\r\nQUEUED\r\nredis&gt;EXEC\r\n(error)EXECABORT Transaction discarded because of previous errors.\r\n[/php]\r\n\r\nRedis的事务和传统的关系型数据库事务的最大区别在于，Redis 不支持事务的回滚机制，即使事务队列中的某个命令在执行期间出现了错误，整个事务也会继续执行下去，知道事务队列中所有的命令都执行完毕。\r\n\r\n在下面的例子中，即使RPUSH命令在执行期间出现了错误，事务的后续命令也会继续执行下去，并且执行的命令也不会有任何影响。\r\n\r\n[php]\r\n\r\nredis&gt;SET msg &quot;hello&quot; #msg\r\n键是一个字符串\r\nOK\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SADD fruit &quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;\r\nQUEUED\r\nredis&gt;RPUSH msg &quot;good bye&quot; &quot;byebye&quot;\r\nQUEUED\r\nredis&gt;SADD alphabet &quot;a&quot; &quot;b&quot; &quot;c&quot;\r\nQUEUED\r\nredis&gt;EXEC\r\n1) (integer)3\r\n2(error) WRONGTYPE Operation against a key holding the wrong kind of value\r\n3)(integer)3\r\n[/php]\r\n\r\nRedis的作者在事务的文档中解释说，不支持事务的回滚是因为这种复杂的功能和Redis追求简单高效的设计主旨不相符，并且他认为，Redis事务的执行时错误通常都是编程错误产生的，这种错误通常出现在开发环境中，很少在实际生产环境中出现，没有必要开发事务的回滚功能。\r\n<h3>19.3.2一致性</h3>\r\n事物具有一致性指的是，如果数据库在执行事务之前是一直的，那么在执行事务之后，无论事务是否成功，数据库也应该仍然是一致的。\r\n\r\n"一致"指的是数据符合数据库本身的定义和要求，并没有包含非法或者无效的错误数据。\r\n\r\nRedis通过谨慎的错误检测和简单的设计保证事物的一致性，一下三个小结介绍Redis事务可能出错的地方，并说明Redis是如何妥善的处理这些错误，从而保证事务的一致性的。\r\n\r\n&nbsp;', 'redis 的ACID 性质', '', 'inherit', 'open', 'open', '', '389-revision-v1', '', '', '2015-07-14 06:39:36', '2015-07-14 06:39:36', '', 389, 'http://unasm.sinaapp.com/?p=390', 0, 'revision', '', 0),
(391, 1, '2015-07-14 08:38:03', '2015-07-14 08:38:03', '摘录自《Redis 设计与实现》19.3\n在Redis中 事务总是具有原子性，一致性，隔离性，隔离性，持久性。一下四个小结分别对四个特性进行讨论\n<h3>19.1 原子性</h3>\n事物具有原子性指的是，数据库将十五中的多个操作当做一个整体来执行，服务器要不执行执行十五中的所有操作，要不就一个操作都不执行。对于Redis的事务功能来说，事务队列的命令要不就全部执行，要不就一个都不执行，因此Redis的事务是具有原子性的（注：有待讨论）\n举个例子，一下展示的是一个成功执行的事务，事务中的所有命令都会被执行，\n\n[php]\nredis&gt;MULTI\nOK\nredis&gt;SET msg &quot;hello&quot;\nQUEUED\nredis&gt;GET msg\nQUEUED\nredis&gt;EXEC\n1)OK\n2)&quot;hello&quot;\n[/php]\n\n与此相反，以下展示的是一个执行失败的事务，这个事务因为命令入队出错拒绝执行，事务中的所有命令都不会被执行。\n\n[php]\nredis&gt;MULTI\nOK\nredis&gt;SET msg &quot;hello&quot;\nQUEUED\nredis&gt;GET\n(error) ERR wrong number of arguments for ''get'' command\nredis&gt;GET msg\nQUEUED\nredis&gt;EXEC\n(error)EXECABORT Transaction discarded because of previous errors.\n[/php]\n\nRedis的事务和传统的关系型数据库事务的最大区别在于，Redis 不支持事务的回滚机制，即使事务队列中的某个命令在执行期间出现了错误，整个事务也会继续执行下去，知道事务队列中所有的命令都执行完毕。\n\n在下面的例子中，即使RPUSH命令在执行期间出现了错误，事务的后续命令也会继续执行下去，并且执行的命令也不会有任何影响。\n\n[php]\n\nredis&gt;SET msg &quot;hello&quot; #msg\n键是一个字符串\nOK\nredis&gt;MULTI\nOK\nredis&gt;SADD fruit &quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;\nQUEUED\nredis&gt;RPUSH msg &quot;good bye&quot; &quot;byebye&quot;\nQUEUED\nredis&gt;SADD alphabet &quot;a&quot; &quot;b&quot; &quot;c&quot;\nQUEUED\nredis&gt;EXEC\n1) (integer)3\n2(error) WRONGTYPE Operation against a key holding the wrong kind of value\n3)(integer)3\n[/php]\n\nRedis的作者在事务的文档中解释说，不支持事务的回滚是因为这种复杂的功能和Redis追求简单高效的设计主旨不相符，并且他认为，Redis事务的执行时错误通常都是编程错误产生的，这种错误通常出现在开发环境中，很少在实际生产环境中出现，没有必要开发事务的回滚功能。\n<h3>19.3.2一致性</h3>\n事物具有一致性指的是，如果数据库在执行事务之前是一直的，那么在执行事务之后，无论事务是否成功，数据库也应该仍然是一致的。\n\n"一致"指的是数据符合数据库本身的定义和要求，并没有包含非法或者无效的错误数据。\n\nRedis通过谨慎的错误检测和简单的设计保证事物的一致性，一下三个小结介绍Redis事务可能出错的地方，并说明Redis是如何妥善的处理这些错误，从而保证事务的一致性的。\n\n入队错误：如果一个事务在入队过程中出现命令不存在，或者命令格式不正确等情况，redis将拒绝执行这个事务。 2.6.5以前，如果在入队以前发生了错误，事务一样可以执行，不过只执行那些正确入队的命令。\n\n执行错误：关于这种错误，有两个需要说明的地方，执行过程中发生的错误都是一些不能再入队时被服务器发现的错误，这些错误只会在命令实际是中被触发。即使执行过程中发生错误，服务器也不会中断事务的执行，它会继续执行事务中余下的命令。并且已经执行的命令不会被出错的命令影响。\n\n服务器停机：如果在执行事务中停机，那么根据服务器使用的持久化模式，可能有以下的情况，如果服务器在无持久化内存模式下，重启后数据库是空白的，因此总是一致的。\n\n如果运行于RDB模式下，停机不会导致不一致，因为可以根据RDB恢复数据，如果找不到RDB文件，重启后数据库是空白的，总是一致的。\n\n如果运行于AOF模式下，事务中途停机不会导致不一致，因为可以根据AOF文件恢复数据。如果没有AOF，重启后是空白的，总之一直的。\n<h3>19.3.3 隔离性</h3>\n因为Redis使用单线程方式执行事务，并且服务器保证，执行事务中不会对事务进行中断，因此Redis的事务总是以串行的方式运行的，并且总是具有隔离性的。\n<h3>19.3.4耐久性</h3>\n事务的耐久性指的是，当一个事务执行完毕的时候，执行这个事务所得的结果已经保存到硬盘里面了，即使执行事务完毕之后停机，执行事务所得结果也不会丢失。\n因为\n<b>Redis的事务不过是简单地用队列包裹起一组Redis命令</b>\n，Redis并没有为事务提供任何额外的持久化功能，并且Redis的事务耐久性由Redis所使用的耐久化模式决定的。\n\n当服务器在无持久化内存模式下，事务不具有耐久性，一旦服务器停机，包括事务在内的所有服务器数据都停止。\n\n当服务器在RDB持久化模式下运行时，服务器只会在特定的保存条件满足时，才会执行BGSAVE命令。并且异步执行的BGSAVE 不能保证事务数据第一之间内保存在硬盘里面，因此RDB模式下不具有持久性。\n\n当服务器运行在AOF持久化模式下，并且appendsync选项为always时，程序总会在执行命令后调用sync，将数据真正保存在硬盘里面，因此这种配置喜爱具有耐久性。\n\n当服务器运行于AOF持久化模式下，并且appendfsync选项为everysec时，程序每秒同步一次命令到硬盘，如果停机恰好发生在同步的那一秒，可能会造成事务数据丢失，因此这种配置下，事务不具有耐久性。\n当服务器运行于AOF持久化模式下，并且appendfsync选项为no时，程序交给操作系统决定何时同步命令到硬盘，shi''w，因此这种配置下，事务不具有耐久性。', 'redis 的ACID 性质', '', 'inherit', 'open', 'open', '', '389-autosave-v1', '', '', '2015-07-14 08:38:03', '2015-07-14 08:38:03', '', 389, 'http://unasm.sinaapp.com/?p=391', 0, 'revision', '', 0),
(392, 1, '2015-07-14 08:39:14', '2015-07-14 08:39:14', '摘录自《Redis 设计与实现》19.3\r\n在Redis中 事务总是具有原子性，一致性，隔离性，隔离性，持久性。一下四个小结分别对四个特性进行讨论\r\n<h3>19.1 原子性</h3>\r\n事物具有原子性指的是，数据库将十五中的多个操作当做一个整体来执行，服务器要不执行执行十五中的所有操作，要不就一个操作都不执行。对于Redis的事务功能来说，事务队列的命令要不就全部执行，要不就一个都不执行，因此Redis的事务是具有原子性的（注：有待讨论）\r\n举个例子，一下展示的是一个成功执行的事务，事务中的所有命令都会被执行，\r\n\r\n[php]\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SET msg &quot;hello&quot;\r\nQUEUED\r\nredis&gt;GET msg\r\nQUEUED\r\nredis&gt;EXEC\r\n1)OK\r\n2)&quot;hello&quot;\r\n[/php]\r\n\r\n与此相反，以下展示的是一个执行失败的事务，这个事务因为命令入队出错拒绝执行，事务中的所有命令都不会被执行。\r\n\r\n[php]\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SET msg &quot;hello&quot;\r\nQUEUED\r\nredis&gt;GET\r\n(error) ERR wrong number of arguments for ''get'' command\r\nredis&gt;GET msg\r\nQUEUED\r\nredis&gt;EXEC\r\n(error)EXECABORT Transaction discarded because of previous errors.\r\n[/php]\r\n\r\nRedis的事务和传统的关系型数据库事务的最大区别在于，Redis 不支持事务的回滚机制，即使事务队列中的某个命令在执行期间出现了错误，整个事务也会继续执行下去，知道事务队列中所有的命令都执行完毕。\r\n\r\n在下面的例子中，即使RPUSH命令在执行期间出现了错误，事务的后续命令也会继续执行下去，并且执行的命令也不会有任何影响。\r\n\r\n[php]\r\n\r\nredis&gt;SET msg &quot;hello&quot; #msg\r\n键是一个字符串\r\nOK\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SADD fruit &quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;\r\nQUEUED\r\nredis&gt;RPUSH msg &quot;good bye&quot; &quot;byebye&quot;\r\nQUEUED\r\nredis&gt;SADD alphabet &quot;a&quot; &quot;b&quot; &quot;c&quot;\r\nQUEUED\r\nredis&gt;EXEC\r\n1) (integer)3\r\n2(error) WRONGTYPE Operation against a key holding the wrong kind of value\r\n3)(integer)3\r\n[/php]\r\n\r\nRedis的作者在事务的文档中解释说，不支持事务的回滚是因为这种复杂的功能和Redis追求简单高效的设计主旨不相符，并且他认为，Redis事务的执行时错误通常都是编程错误产生的，这种错误通常出现在开发环境中，很少在实际生产环境中出现，没有必要开发事务的回滚功能。\r\n<h3>19.3.2一致性</h3>\r\n事物具有一致性指的是，如果数据库在执行事务之前是一直的，那么在执行事务之后，无论事务是否成功，数据库也应该仍然是一致的。\r\n\r\n"一致"指的是数据符合数据库本身的定义和要求，并没有包含非法或者无效的错误数据。\r\n\r\nRedis通过谨慎的错误检测和简单的设计保证事物的一致性，一下三个小结介绍Redis事务可能出错的地方，并说明Redis是如何妥善的处理这些错误，从而保证事务的一致性的。\r\n\r\n入队错误：如果一个事务在入队过程中出现命令不存在，或者命令格式不正确等情况，redis将拒绝执行这个事务。 2.6.5以前，如果在入队以前发生了错误，事务一样可以执行，不过只执行那些正确入队的命令。\r\n\r\n执行错误：关于这种错误，有两个需要说明的地方，执行过程中发生的错误都是一些不能再入队时被服务器发现的错误，这些错误只会在命令实际是中被触发。即使执行过程中发生错误，服务器也不会中断事务的执行，它会继续执行事务中余下的命令。并且已经执行的命令不会被出错的命令影响。\r\n\r\n服务器停机：如果在执行事务中停机，那么根据服务器使用的持久化模式，可能有以下的情况，如果服务器在无持久化内存模式下，重启后数据库是空白的，因此总是一致的。\r\n\r\n如果运行于RDB模式下，停机不会导致不一致，因为可以根据RDB恢复数据，如果找不到RDB文件，重启后数据库是空白的，总是一致的。\r\n\r\n如果运行于AOF模式下，事务中途停机不会导致不一致，因为可以根据AOF文件恢复数据。如果没有AOF，重启后是空白的，总之一直的。\r\n<h3>19.3.3 隔离性</h3>\r\n因为Redis使用单线程方式执行事务，并且服务器保证，执行事务中不会对事务进行中断，因此Redis的事务总是以串行的方式运行的，并且总是具有隔离性的。\r\n<h3>19.3.4耐久性</h3>\r\n事务的耐久性指的是，当一个事务执行完毕的时候，执行这个事务所得的结果已经保存到硬盘里面了，即使执行事务完毕之后停机，执行事务所得结果也不会丢失。\r\n因为\r\n<b>Redis的事务不过是简单地用队列包裹起一组Redis命令</b>\r\n，Redis并没有为事务提供任何额外的持久化功能，并且Redis的事务耐久性由Redis所使用的耐久化模式决定的。\r\n\r\n当服务器在无持久化内存模式下，事务不具有耐久性，一旦服务器停机，包括事务在内的所有服务器数据都停止。\r\n\r\n当服务器在RDB持久化模式下运行时，服务器只会在特定的保存条件满足时，才会执行BGSAVE命令。并且异步执行的BGSAVE 不能保证事务数据第一之间内保存在硬盘里面，因此RDB模式下不具有持久性。\r\n\r\n当服务器运行在AOF持久化模式下，并且appendsync选项为always时，程序总会在执行命令后调用sync，将数据真正保存在硬盘里面，因此这种配置喜爱具有耐久性。\r\n\r\n当服务器运行于AOF持久化模式下，并且appendfsync选项为everysec时，程序每秒同步一次命令到硬盘，如果停机恰好发生在同步的那一秒，可能会造成事务数据丢失，因此这种配置下，事务不具有耐久性。\r\n当服务器运行于AOF持久化模式下，并且appendfsync选项为no时，程序交给操作系统决定何时同步命令到硬盘，事务数据可能在等待同步中丢失，因此这种配置下，事务不具有耐久性。\r\n\r\n不论Redis在什么模式下工作，在事务的最后加SAVE 命令，总是看以保证事物的耐久度的，不过会影响效率。', 'redis 的ACID 性质', '', 'inherit', 'open', 'open', '', '389-revision-v1', '', '', '2015-07-14 08:39:14', '2015-07-14 08:39:14', '', 389, 'http://unasm.sinaapp.com/?p=392', 0, 'revision', '', 0),
(393, 1, '2015-07-14 09:04:38', '2015-07-14 09:04:38', '<h2>环境变量</h2>\r\nruntime 包含的是go实时运行系统的一些交互操作，比如控制goroutines,也包含了一些使用反射包获得的底层信息，具体见反射包关于实时系统的接口。\r\n\r\n下面的环境变量（$name或者是%name%，取决于运行的操作系统）控制go运行时候的实时行为，这个意义和使用方法，也许会在不同版本之间变化（目前1.4版）。\r\n\r\nGOGC变量设置垃圾回收的百分比，当新添加的数据加上上次垃圾回收之后留下的数据重新达到这个比例之后，会再次出发垃圾回收，默认的GOGC是100，设置gogc=off会彻底禁止垃圾回收，runtime/debug包的SetGCPercent函数会允许在运行时修改该参数。详见<a href="http://golang.org/pkg/runtime/debug/#SetGCPercent">http://golang.org/pkg/runtime/debug/#SetGCPercent</a>.\r\n\r\nGODEBUG变量控制着运行时的debug输出，GODEBUG变量是一个逗号分隔的键值对，支持的键名有\r\n<ol>\r\n	<li>allocfreetrace ：设置 allocfreetrace = 1会让每次分配和释放都记录并且可以被栈追踪打印到</li>\r\n	<li>efence : 设置efence = 1会让分配器给每一个对象都分配一个单独的页，并且该页不会再被重复利用了</li>\r\n	<li>gctrace : 设置 gctrace = 1 会让垃圾回收器每次回收的时候都发送一个一行到error，描述回收的量和停顿的时间长度，设置gctrace = 2 ，不止会得到上述结果，但是还有重复的次数。</li>\r\n	<li>gcdead: 设置gcdead = 1 会毁了所有他认为死掉了执行堆栈。</li>\r\n	<li>invalidptr : 默认invalidptr = 1，如果指针被赋予一个无效值,会引起程序的崩溃，设置该值为0，会停止该检查，这个只能临时用于查找bug，真正的解决方法是不要把整数类型的值存在指针变量里面。</li>\r\n	<li>scheddetail : 设置 scheddetail= 1 &amp;&amp; schedtrace = X 会让调度器 发出来一个详细的Xms内多线调度信息，描述调度器的情况，如线程，进程，协程等等。</li>\r\n	<li>schedtrace: 同上</li>\r\n	<li>scavenge : scavenge=1 enables debugging mode of heap scavenger</li>\r\n</ol>\r\n变量GOMAXPROCS限制操作系统可以 同时运行的用户级别的go代码数量，但是对于出于阻塞状态的线程数量是没有限制的，这些是不受GOMAXPROCS 限制的，GOMAXPROCS 是可以修改该限制的（注：NumCPU() 函数可以获取当前系统的CPU数目，可以根据该结果确认GOMAXPROCS的值）。\r\n\r\nGOTRACEBACK可以控制go成语因为未恢复的panic和意外情况造成的崩溃的时候输出栈数量，默认会输出所有的尚存的goroutine，内置函数到实时系统，如果以退出码2退出，如果GOTRACEBACK 设置成0，那goroutine追踪栈会全部输出，GOTRACEBACK 设置成1，采用默认的行为，如果GOTRACEBACK设置成2，不仅输出全部的栈，还有实时交互系统的函数，如果GOTRACEBACK 设置成crash,不仅包括输出栈和实时系统本身的函数，还有尽可能的以操作系统规定的方式退出而不是立即退出，比如在unix系统上，程序会发送一个SIGABRT 去触发一个core dump。\r\n\r\nGOARCH, GOOS, GOPATH, 和 GOROOT 这些环境变量。题目影响go程序的构建。\r\n<h2><strong>常量</strong></h2>\r\n<pre>const <span id="Compiler">Compiler</span> = "gc" \r\n编译器是构建运行的二进制代码的工具集的名字，一直的工具集名字有</pre>\r\n<pre>gc      The 5g/6g/8g compiler suite at code.google.com/p/go.\r\ngccgo   The gccgo front end, part of the GCC compiler suite.</pre>\r\n<pre>const <span id="GOARCH">GOARCH</span> <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a> = theGoarch\r\nGOARCH  是运行程序的CPU架构：386，amd64，或者是arm</pre>\r\n<pre>const <span id="GOOS">GOOS</span> <a href="http://127.0.0.1:8080/pkg/builtin/#string">string</a> = theGoos\r\nGOOS 是运行程序的操作系统，darwin,freebsd,linux等等\r\n\r\n</pre>\r\n<h2>变量</h2>\r\nvar MemProfileRate int = 512 * 1024\r\n\r\nMemProfileRate 会在内存profile 里面 保存内存分配的频率和报告频率，profile的目标是对内存分配的平均情况进行采样分析。 为了在内存profile分析报告里面记录每一次内存分配的情况，请将MemProfileRate 设置成1，如果彻底关闭内存分析，请将MemProfileRate 设置成0， 该工具会会在整个程序的生命周期里面不停地以设置的频率对内存进行采样分析，修改内存采样频率的操作只应该做一次，并且最好尽可能的早做。\r\n\r\n&nbsp;\r\n<h2>func BlockProfile</h2>\r\nfunc BlockProfile(p []BlockProfileRecord) (n int, ok bool)\r\n\r\n该函数返回n,几率的是当前阻塞的报告。如果len(p) &gt;= n ,该函数会拷贝分析报告进入p，并且返回n，如果len(p) &lt; n, BlockProfile 不做任何修改，只是返回n，false。\r\n\r\nMost clients should use the runtime/pprof package or the testing package''s -test.blockprofile flag instead of calling BlockProfile directly.\r\n\r\n&nbsp;\r\n<h2>func CPUProfile</h2>\r\nfunc CPUProfile() []byte\r\n\r\nCPUProfile returns the next chunk of binary CPU profiling stack trace data, blocking until data is available. If profiling is turned off and all the profile data accumulated while it was on has been returned, CPUProfile returns nil. The caller must save the returned data before calling CPUProfile again.\r\n\r\nMost clients should use the runtime/pprof package or the testing package''s -test.cpuprofile flag instead of calling CPUProfile directly.\r\n\r\n&nbsp;\r\n\r\n<h2>func GoroutineProfile</h2>\r\n\r\nfunc GoroutineProfile(p [] StackRecord) (n int, ok bool)\r\nGoroutineProfile 返回n，活动gogoutine 站报告的记录数，如果 len(p) >= n，GoroutineProfile 会拷贝报告进入p，然后返回n，如果 len(p) < n , GoroutineProfile并不会改变p，并且返回n，false。\r\n应该使用runtime/pprof包，而不是直接使用GoroutineProfile \r\n\r\n<h2>func NumCPU()</h2>\r\n返回本机逻辑CPUS的数量\r\n<h2>func NumGoroutine</h2>\r\nfunc NumGoroutine int\r\n返回存在的goroutineus 的数量\r\nfunc ReadMemStats(m *MemStats)\r\n\r\n读取内存分配的数据\r\n&nbsp;', 'golang runtime 包官方文档 翻译', '', 'inherit', 'open', 'open', '', '303-revision-v1', '', '', '2015-07-14 09:04:38', '2015-07-14 09:04:38', '', 303, 'http://unasm.sinaapp.com/?p=393', 0, 'revision', '', 0),
(394, 1, '2015-07-16 13:49:13', '2015-07-16 13:49:13', '这里其实是对 Redis.c serverCron 函数进行分析，也就是Redis的每次循环中，做的事情，innode的master thread每次做的事情也不少，I have to say.\r\n\r\n首先从入门的REDIS_NOTUSED开始，REDIS_NOTUSED是一个宏定义，就是将声明而未使用的警告去除，serverCron的三个参数，在函数内部都没有被使用，会有警告出来，所以使用REDIS_NOTUSED去除，居然不使用，为什么还传递这三个参数呢?\r\n全部源码如下。\r\n\r\n[cpp]\r\nint serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {\r\n    int j;\r\n    REDIS_NOTUSED(eventLoop);\r\n    REDIS_NOTUSED(id);\r\n    REDIS_NOTUSED(clientData);\r\n\r\n    if (server.watchdog_period) watchdogScheduleSignal(server.watchdog_period);\r\n\r\n    updateCachedTime();\r\n\r\n    run_with_period(100) trackOperationsPerSecond();\r\n    server.lruclock = getLRUClock();\r\n\r\n    if (zmalloc_used_memory() &gt; server.stat_peak_memory)\r\n        server.stat_peak_memory = zmalloc_used_memory();\r\n\r\n    server.resident_set_size = zmalloc_get_rss();\r\n\r\n    if (server.shutdown_asap) {\r\n        if (prepareForShutdown(0) == REDIS_OK) exit(0);\r\n\r\n        redisLog(REDIS_WARNING,&quot;SIGTERM received but errors trying to shut down the server, check the logs for more information&quot;);\r\n        server.shutdown_asap = 0;\r\n    }\r\n\r\n    run_with_period(5000) {\r\n        for (j = 0; j &lt; server.dbnum; j++) {\r\n            long long size, used, vkeys;\r\n\r\n            size = dictSlots(server.db[j].dict);\r\n            used = dictSize(server.db[j].dict);\r\n            vkeys = dictSize(server.db[j].expires);\r\n\r\n            if (used || vkeys) {\r\n                redisLog(REDIS_VERBOSE,&quot;DB %d: %lld keys (%lld volatile) in %lld slots HT.&quot;,j,used,vkeys,size);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!server.sentinel_mode) {\r\n        run_with_period(5000) {\r\n            redisLog(REDIS_VERBOSE,\r\n                &quot;%lu clients connected (%lu slaves), %zu bytes in use&quot;,\r\n                listLength(server.clients)-listLength(server.slaves),\r\n                listLength(server.slaves),\r\n                zmalloc_used_memory());\r\n        }\r\n    }\r\n    clientsCron();\r\n    databasesCron();\r\n    if (server.rdb_child_pid == -1 &amp;&amp; server.aof_child_pid == -1 &amp;&amp;\r\n        server.aof_rewrite_scheduled)\r\n    {\r\n        rewriteAppendOnlyFileBackground();\r\n    }\r\n\r\n    if (server.rdb_child_pid != -1 || server.aof_child_pid != -1) {\r\n        int statloc;\r\n        pid_t pid;\r\n\r\n        if ((pid = wait3(&amp;statloc,WNOHANG,NULL)) != 0) {\r\n            int exitcode = WEXITSTATUS(statloc);\r\n            int bysignal = 0;\r\n            if (WIFSIGNALED(statloc)) bysignal = WTERMSIG(statloc);\r\n\r\n            if (pid == server.rdb_child_pid) {\r\n                backgroundSaveDoneHandler(exitcode,bysignal);\r\n\r\n            } else if (pid == server.aof_child_pid) {\r\n                backgroundRewriteDoneHandler(exitcode,bysignal);\r\n            } else {\r\n                redisLog(REDIS_WARNING,\r\n                    &quot;Warning, detected child with unmatched pid: %ld&quot;,\r\n                    (long)pid);\r\n            }\r\n            updateDictResizePolicy();\r\n        }\r\n    } else {\r\n         for (j = 0; j &lt; server.saveparamslen; j++) {\r\n            struct saveparam *sp = server.saveparams+j;\r\n            if (server.dirty &gt;= sp-&gt;changes &amp;&amp;\r\n                server.unixtime-server.lastsave &gt; sp-&gt;seconds &amp;&amp;\r\n                (server.unixtime-server.lastbgsave_try &gt;\r\n                 REDIS_BGSAVE_RETRY_DELAY ||\r\n                 server.lastbgsave_status == REDIS_OK))\r\n            {\r\n                redisLog(REDIS_NOTICE,&quot;%d changes in %d seconds. Saving...&quot;,\r\n                    sp-&gt;changes, (int)sp-&gt;seconds);\r\n                // 执行 BGSAVE\r\n                rdbSaveBackground(server.rdb_filename);\r\n                break;\r\n            }\r\n         }\r\n\r\n         if (server.rdb_child_pid == -1 &amp;&amp;\r\n             server.aof_child_pid == -1 &amp;&amp;\r\n             server.aof_rewrite_perc &amp;&amp;\r\n             // AOF 文件的当前大小大于执行 BGREWRITEAOF 所需的最小大小\r\n             server.aof_current_size &gt; server.aof_rewrite_min_size)\r\n         {\r\n            // 上一次完成 AOF 写入之后，AOF 文件的大小\r\n            long long base = server.aof_rewrite_base_size ?\r\n                            server.aof_rewrite_base_size : 1;\r\n\r\n            // AOF 文件当前的体积相对于 base 的体积的百分比\r\n            long long growth = (server.aof_current_size*100/base) - 100;\r\n\r\n            // 如果增长体积的百分比超过了 growth ，那么执行 BGREWRITEAOF\r\n            if (growth &gt;= server.aof_rewrite_perc) {\r\n                redisLog(REDIS_NOTICE,&quot;Starting automatic rewriting of AOF on %lld%% growth&quot;,growth);\r\n                // 执行 BGREWRITEAOF\r\n                rewriteAppendOnlyFileBackground();\r\n            }\r\n         }\r\n    }\r\n\r\n    if (server.aof_flush_postponed_start) flushAppendOnlyFile(0);\r\n\r\n    run_with_period(1000) {\r\n        if (server.aof_last_write_status == REDIS_ERR)\r\n            flushAppendOnlyFile(0);\r\n    }\r\n\r\n    freeClientsInAsyncFreeQueue();\r\n\r\n    clientsArePaused(); /* Don''t check return value, just use the side effect. */\r\n    run_with_period(1000) replicationCron();\r\n\r\n    run_with_period(100) {\r\n        if (server.cluster_enabled) clusterCron();\r\n    }\r\n\r\n    run_with_period(100) {\r\n        if (server.sentinel_mode) sentinelTimer();\r\n    }\r\n\r\n    run_with_period(1000) {\r\n        migrateCloseTimedoutSockets();\r\n    }\r\n\r\n    server.cronloops++;\r\n    return 1000/server.hz;\r\n}\r\n[/cpp]\r\n', 'Redis 定时循环执行任务(serverCron解析)', '', 'publish', 'open', 'open', '', 'redis-%e5%ae%9a%e6%97%b6%e5%be%aa%e7%8e%af%e6%89%a7%e8%a1%8c%e4%bb%bb%e5%8a%a1servercron%e8%a7%a3%e6%9e%90', '', '', '2015-07-16 13:57:44', '2015-07-16 13:57:44', '', 0, 'http://unasm.sinaapp.com/?p=394', 0, 'post', '', 0),
(395, 1, '2015-07-16 13:49:13', '2015-07-16 13:49:13', '这里其实是对 Redis.c serverCron进行分析，也就是Redis的每次循环中，做的事情，innode的master thread每次做的事情也不少，I have to say.', 'Redis 定时循环执行任务(serverCron解析)', '', 'inherit', 'open', 'open', '', '394-revision-v1', '', '', '2015-07-16 13:49:13', '2015-07-16 13:49:13', '', 394, 'http://unasm.sinaapp.com/?p=395', 0, 'revision', '', 0),
(396, 1, '2015-07-16 13:50:25', '2015-07-16 13:50:25', '这里其实是对 Redis.c serverCron 函数进行分析，也就是Redis的每次循环中，做的事情，innode的master thread每次做的事情也不少，I have to say.', 'Redis 定时循环执行任务(serverCron解析)', '', 'inherit', 'open', 'open', '', '394-revision-v1', '', '', '2015-07-16 13:50:25', '2015-07-16 13:50:25', '', 394, 'http://unasm.sinaapp.com/?p=396', 0, 'revision', '', 0),
(397, 1, '2015-07-16 13:56:21', '2015-07-16 13:56:21', '这里其实是对 Redis.c serverCron 函数进行分析，也就是Redis的每次循环中，做的事情，innode的master thread每次做的事情也不少，I have to say.\n\n首先从入门的REDIS_NOTUSED开始，REDIS_NOTUSED是一个宏定义，zuo''\n全部源码如下。\n[cpp]\nint serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {\n    int j;\n    REDIS_NOTUSED(eventLoop);\n    REDIS_NOTUSED(id);\n    REDIS_NOTUSED(clientData);\n\n    if (server.watchdog_period) watchdogScheduleSignal(server.watchdog_period);\n\n    updateCachedTime();\n\n    run_with_period(100) trackOperationsPerSecond();\n    server.lruclock = getLRUClock();\n\n    if (zmalloc_used_memory() &gt; server.stat_peak_memory)\n        server.stat_peak_memory = zmalloc_used_memory();\n\n    server.resident_set_size = zmalloc_get_rss();\n\n    if (server.shutdown_asap) {\n        if (prepareForShutdown(0) == REDIS_OK) exit(0);\n\n        redisLog(REDIS_WARNING,&quot;SIGTERM received but errors trying to shut down the server, check the logs for more information&quot;);\n        server.shutdown_asap = 0;\n    }\n\n    run_with_period(5000) {\n        for (j = 0; j &lt; server.dbnum; j++) {\n            long long size, used, vkeys;\n\n            size = dictSlots(server.db[j].dict);\n            used = dictSize(server.db[j].dict);\n            vkeys = dictSize(server.db[j].expires);\n\n            if (used || vkeys) {\n                redisLog(REDIS_VERBOSE,&quot;DB %d: %lld keys (%lld volatile) in %lld slots HT.&quot;,j,used,vkeys,size);\n            }\n        }\n    }\n\n    if (!server.sentinel_mode) {\n        run_with_period(5000) {\n            redisLog(REDIS_VERBOSE,\n                &quot;%lu clients connected (%lu slaves), %zu bytes in use&quot;,\n                listLength(server.clients)-listLength(server.slaves),\n                listLength(server.slaves),\n                zmalloc_used_memory());\n        }\n    }\n    clientsCron();\n    databasesCron();\n    if (server.rdb_child_pid == -1 &amp;&amp; server.aof_child_pid == -1 &amp;&amp;\n        server.aof_rewrite_scheduled)\n    {\n        rewriteAppendOnlyFileBackground();\n    }\n\n    if (server.rdb_child_pid != -1 || server.aof_child_pid != -1) {\n        int statloc;\n        pid_t pid;\n\n        if ((pid = wait3(&amp;statloc,WNOHANG,NULL)) != 0) {\n            int exitcode = WEXITSTATUS(statloc);\n            int bysignal = 0;\n            if (WIFSIGNALED(statloc)) bysignal = WTERMSIG(statloc);\n\n            if (pid == server.rdb_child_pid) {\n                backgroundSaveDoneHandler(exitcode,bysignal);\n\n            } else if (pid == server.aof_child_pid) {\n                backgroundRewriteDoneHandler(exitcode,bysignal);\n            } else {\n                redisLog(REDIS_WARNING,\n                    &quot;Warning, detected child with unmatched pid: %ld&quot;,\n                    (long)pid);\n            }\n            updateDictResizePolicy();\n        }\n    } else {\n         for (j = 0; j &lt; server.saveparamslen; j++) {\n            struct saveparam *sp = server.saveparams+j;\n            if (server.dirty &gt;= sp-&gt;changes &amp;&amp;\n                server.unixtime-server.lastsave &gt; sp-&gt;seconds &amp;&amp;\n                (server.unixtime-server.lastbgsave_try &gt;\n                 REDIS_BGSAVE_RETRY_DELAY ||\n                 server.lastbgsave_status == REDIS_OK))\n            {\n                redisLog(REDIS_NOTICE,&quot;%d changes in %d seconds. Saving...&quot;,\n                    sp-&gt;changes, (int)sp-&gt;seconds);\n                // 执行 BGSAVE\n                rdbSaveBackground(server.rdb_filename);\n                break;\n            }\n         }\n\n         if (server.rdb_child_pid == -1 &amp;&amp;\n             server.aof_child_pid == -1 &amp;&amp;\n             server.aof_rewrite_perc &amp;&amp;\n             // AOF 文件的当前大小大于执行 BGREWRITEAOF 所需的最小大小\n             server.aof_current_size &gt; server.aof_rewrite_min_size)\n         {\n            // 上一次完成 AOF 写入之后，AOF 文件的大小\n            long long base = server.aof_rewrite_base_size ?\n                            server.aof_rewrite_base_size : 1;\n\n            // AOF 文件当前的体积相对于 base 的体积的百分比\n            long long growth = (server.aof_current_size*100/base) - 100;\n\n            // 如果增长体积的百分比超过了 growth ，那么执行 BGREWRITEAOF\n            if (growth &gt;= server.aof_rewrite_perc) {\n                redisLog(REDIS_NOTICE,&quot;Starting automatic rewriting of AOF on %lld%% growth&quot;,growth);\n                // 执行 BGREWRITEAOF\n                rewriteAppendOnlyFileBackground();\n            }\n         }\n    }\n\n    if (server.aof_flush_postponed_start) flushAppendOnlyFile(0);\n\n    run_with_period(1000) {\n        if (server.aof_last_write_status == REDIS_ERR)\n            flushAppendOnlyFile(0);\n    }\n\n    freeClientsInAsyncFreeQueue();\n\n    clientsArePaused(); /* Don''t check return value, just use the side effect. */\n    run_with_period(1000) replicationCron();\n\n    run_with_period(100) {\n        if (server.cluster_enabled) clusterCron();\n    }\n\n    run_with_period(100) {\n        if (server.sentinel_mode) sentinelTimer();\n    }\n\n    run_with_period(1000) {\n        migrateCloseTimedoutSockets();\n    }\n\n    server.cronloops++;\n    return 1000/server.hz;\n}\n[/cpp]', 'Redis 定时循环执行任务(serverCron解析)', '', 'inherit', 'open', 'open', '', '394-autosave-v1', '', '', '2015-07-16 13:56:21', '2015-07-16 13:56:21', '', 394, 'http://unasm.sinaapp.com/?p=397', 0, 'revision', '', 0),
(398, 1, '2015-07-16 13:55:19', '2015-07-16 13:55:19', '这里其实是对 Redis.c serverCron 函数进行分析，也就是Redis的每次循环中，做的事情，innode的master thread每次做的事情也不少，I have to say.\r\n\r\n全部源码如下。\r\n[cpp]\r\nint serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {\r\n    int j;\r\n    REDIS_NOTUSED(eventLoop);\r\n    REDIS_NOTUSED(id);\r\n    REDIS_NOTUSED(clientData);\r\n\r\n    if (server.watchdog_period) watchdogScheduleSignal(server.watchdog_period);\r\n\r\n    updateCachedTime();\r\n\r\n    run_with_period(100) trackOperationsPerSecond();\r\n    server.lruclock = getLRUClock();\r\n\r\n    if (zmalloc_used_memory() &gt; server.stat_peak_memory)\r\n        server.stat_peak_memory = zmalloc_used_memory();\r\n\r\n    server.resident_set_size = zmalloc_get_rss();\r\n\r\n    if (server.shutdown_asap) {\r\n        if (prepareForShutdown(0) == REDIS_OK) exit(0);\r\n\r\n        redisLog(REDIS_WARNING,&quot;SIGTERM received but errors trying to shut down the server, check the logs for more information&quot;);\r\n        server.shutdown_asap = 0;\r\n    }\r\n\r\n    run_with_period(5000) {\r\n        for (j = 0; j &lt; server.dbnum; j++) {\r\n            long long size, used, vkeys;\r\n\r\n            size = dictSlots(server.db[j].dict);\r\n            used = dictSize(server.db[j].dict);\r\n            vkeys = dictSize(server.db[j].expires);\r\n\r\n            if (used || vkeys) {\r\n                redisLog(REDIS_VERBOSE,&quot;DB %d: %lld keys (%lld volatile) in %lld slots HT.&quot;,j,used,vkeys,size);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!server.sentinel_mode) {\r\n        run_with_period(5000) {\r\n            redisLog(REDIS_VERBOSE,\r\n                &quot;%lu clients connected (%lu slaves), %zu bytes in use&quot;,\r\n                listLength(server.clients)-listLength(server.slaves),\r\n                listLength(server.slaves),\r\n                zmalloc_used_memory());\r\n        }\r\n    }\r\n    clientsCron();\r\n    databasesCron();\r\n    if (server.rdb_child_pid == -1 &amp;&amp; server.aof_child_pid == -1 &amp;&amp;\r\n        server.aof_rewrite_scheduled)\r\n    {\r\n        rewriteAppendOnlyFileBackground();\r\n    }\r\n\r\n    if (server.rdb_child_pid != -1 || server.aof_child_pid != -1) {\r\n        int statloc;\r\n        pid_t pid;\r\n\r\n        if ((pid = wait3(&amp;statloc,WNOHANG,NULL)) != 0) {\r\n            int exitcode = WEXITSTATUS(statloc);\r\n            int bysignal = 0;\r\n            if (WIFSIGNALED(statloc)) bysignal = WTERMSIG(statloc);\r\n\r\n            if (pid == server.rdb_child_pid) {\r\n                backgroundSaveDoneHandler(exitcode,bysignal);\r\n\r\n            } else if (pid == server.aof_child_pid) {\r\n                backgroundRewriteDoneHandler(exitcode,bysignal);\r\n            } else {\r\n                redisLog(REDIS_WARNING,\r\n                    &quot;Warning, detected child with unmatched pid: %ld&quot;,\r\n                    (long)pid);\r\n            }\r\n            updateDictResizePolicy();\r\n        }\r\n    } else {\r\n         for (j = 0; j &lt; server.saveparamslen; j++) {\r\n            struct saveparam *sp = server.saveparams+j;\r\n            if (server.dirty &gt;= sp-&gt;changes &amp;&amp;\r\n                server.unixtime-server.lastsave &gt; sp-&gt;seconds &amp;&amp;\r\n                (server.unixtime-server.lastbgsave_try &gt;\r\n                 REDIS_BGSAVE_RETRY_DELAY ||\r\n                 server.lastbgsave_status == REDIS_OK))\r\n            {\r\n                redisLog(REDIS_NOTICE,&quot;%d changes in %d seconds. Saving...&quot;,\r\n                    sp-&gt;changes, (int)sp-&gt;seconds);\r\n                // 执行 BGSAVE\r\n                rdbSaveBackground(server.rdb_filename);\r\n                break;\r\n            }\r\n         }\r\n\r\n         if (server.rdb_child_pid == -1 &amp;&amp;\r\n             server.aof_child_pid == -1 &amp;&amp;\r\n             server.aof_rewrite_perc &amp;&amp;\r\n             // AOF 文件的当前大小大于执行 BGREWRITEAOF 所需的最小大小\r\n             server.aof_current_size &gt; server.aof_rewrite_min_size)\r\n         {\r\n            // 上一次完成 AOF 写入之后，AOF 文件的大小\r\n            long long base = server.aof_rewrite_base_size ?\r\n                            server.aof_rewrite_base_size : 1;\r\n\r\n            // AOF 文件当前的体积相对于 base 的体积的百分比\r\n            long long growth = (server.aof_current_size*100/base) - 100;\r\n\r\n            // 如果增长体积的百分比超过了 growth ，那么执行 BGREWRITEAOF\r\n            if (growth &gt;= server.aof_rewrite_perc) {\r\n                redisLog(REDIS_NOTICE,&quot;Starting automatic rewriting of AOF on %lld%% growth&quot;,growth);\r\n                // 执行 BGREWRITEAOF\r\n                rewriteAppendOnlyFileBackground();\r\n            }\r\n         }\r\n    }\r\n\r\n    if (server.aof_flush_postponed_start) flushAppendOnlyFile(0);\r\n\r\n    run_with_period(1000) {\r\n        if (server.aof_last_write_status == REDIS_ERR)\r\n            flushAppendOnlyFile(0);\r\n    }\r\n\r\n    freeClientsInAsyncFreeQueue();\r\n\r\n    clientsArePaused(); /* Don''t check return value, just use the side effect. */\r\n    run_with_period(1000) replicationCron();\r\n\r\n    run_with_period(100) {\r\n        if (server.cluster_enabled) clusterCron();\r\n    }\r\n\r\n    run_with_period(100) {\r\n        if (server.sentinel_mode) sentinelTimer();\r\n    }\r\n\r\n    run_with_period(1000) {\r\n        migrateCloseTimedoutSockets();\r\n    }\r\n\r\n    server.cronloops++;\r\n    return 1000/server.hz;\r\n}\r\n[/cpp]', 'Redis 定时循环执行任务(serverCron解析)', '', 'inherit', 'open', 'open', '', '394-revision-v1', '', '', '2015-07-16 13:55:19', '2015-07-16 13:55:19', '', 394, 'http://unasm.sinaapp.com/?p=398', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(399, 1, '2015-07-16 13:57:35', '2015-07-16 13:57:35', '这里其实是对 Redis.c serverCron 函数进行分析，也就是Redis的每次循环中，做的事情，innode的master thread每次做的事情也不少，I have to say.\r\n\r\n首先从入门的REDIS_NOTUSED开始，REDIS_NOTUSED是一个宏定义，就是将声明而未使用的警告去除，serverCron的三个参数，在函数内部都没有被使用，会有警告出来，所以使用REDIS_NOTUSED去除，居然不使用，为什么还传递这三个参数呢?\r\n全部源码如下。\r\n[cpp]\r\nint serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {\r\n    int j;\r\n    REDIS_NOTUSED(eventLoop);\r\n    REDIS_NOTUSED(id);\r\n    REDIS_NOTUSED(clientData);\r\n\r\n    if (server.watchdog_period) watchdogScheduleSignal(server.watchdog_period);\r\n\r\n    updateCachedTime();\r\n\r\n    run_with_period(100) trackOperationsPerSecond();\r\n    server.lruclock = getLRUClock();\r\n\r\n    if (zmalloc_used_memory() &gt; server.stat_peak_memory)\r\n        server.stat_peak_memory = zmalloc_used_memory();\r\n\r\n    server.resident_set_size = zmalloc_get_rss();\r\n\r\n    if (server.shutdown_asap) {\r\n        if (prepareForShutdown(0) == REDIS_OK) exit(0);\r\n\r\n        redisLog(REDIS_WARNING,&quot;SIGTERM received but errors trying to shut down the server, check the logs for more information&quot;);\r\n        server.shutdown_asap = 0;\r\n    }\r\n\r\n    run_with_period(5000) {\r\n        for (j = 0; j &lt; server.dbnum; j++) {\r\n            long long size, used, vkeys;\r\n\r\n            size = dictSlots(server.db[j].dict);\r\n            used = dictSize(server.db[j].dict);\r\n            vkeys = dictSize(server.db[j].expires);\r\n\r\n            if (used || vkeys) {\r\n                redisLog(REDIS_VERBOSE,&quot;DB %d: %lld keys (%lld volatile) in %lld slots HT.&quot;,j,used,vkeys,size);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!server.sentinel_mode) {\r\n        run_with_period(5000) {\r\n            redisLog(REDIS_VERBOSE,\r\n                &quot;%lu clients connected (%lu slaves), %zu bytes in use&quot;,\r\n                listLength(server.clients)-listLength(server.slaves),\r\n                listLength(server.slaves),\r\n                zmalloc_used_memory());\r\n        }\r\n    }\r\n    clientsCron();\r\n    databasesCron();\r\n    if (server.rdb_child_pid == -1 &amp;&amp; server.aof_child_pid == -1 &amp;&amp;\r\n        server.aof_rewrite_scheduled)\r\n    {\r\n        rewriteAppendOnlyFileBackground();\r\n    }\r\n\r\n    if (server.rdb_child_pid != -1 || server.aof_child_pid != -1) {\r\n        int statloc;\r\n        pid_t pid;\r\n\r\n        if ((pid = wait3(&amp;statloc,WNOHANG,NULL)) != 0) {\r\n            int exitcode = WEXITSTATUS(statloc);\r\n            int bysignal = 0;\r\n            if (WIFSIGNALED(statloc)) bysignal = WTERMSIG(statloc);\r\n\r\n            if (pid == server.rdb_child_pid) {\r\n                backgroundSaveDoneHandler(exitcode,bysignal);\r\n\r\n            } else if (pid == server.aof_child_pid) {\r\n                backgroundRewriteDoneHandler(exitcode,bysignal);\r\n            } else {\r\n                redisLog(REDIS_WARNING,\r\n                    &quot;Warning, detected child with unmatched pid: %ld&quot;,\r\n                    (long)pid);\r\n            }\r\n            updateDictResizePolicy();\r\n        }\r\n    } else {\r\n         for (j = 0; j &lt; server.saveparamslen; j++) {\r\n            struct saveparam *sp = server.saveparams+j;\r\n            if (server.dirty &gt;= sp-&gt;changes &amp;&amp;\r\n                server.unixtime-server.lastsave &gt; sp-&gt;seconds &amp;&amp;\r\n                (server.unixtime-server.lastbgsave_try &gt;\r\n                 REDIS_BGSAVE_RETRY_DELAY ||\r\n                 server.lastbgsave_status == REDIS_OK))\r\n            {\r\n                redisLog(REDIS_NOTICE,&quot;%d changes in %d seconds. Saving...&quot;,\r\n                    sp-&gt;changes, (int)sp-&gt;seconds);\r\n                // 执行 BGSAVE\r\n                rdbSaveBackground(server.rdb_filename);\r\n                break;\r\n            }\r\n         }\r\n\r\n         if (server.rdb_child_pid == -1 &amp;&amp;\r\n             server.aof_child_pid == -1 &amp;&amp;\r\n             server.aof_rewrite_perc &amp;&amp;\r\n             // AOF 文件的当前大小大于执行 BGREWRITEAOF 所需的最小大小\r\n             server.aof_current_size &gt; server.aof_rewrite_min_size)\r\n         {\r\n            // 上一次完成 AOF 写入之后，AOF 文件的大小\r\n            long long base = server.aof_rewrite_base_size ?\r\n                            server.aof_rewrite_base_size : 1;\r\n\r\n            // AOF 文件当前的体积相对于 base 的体积的百分比\r\n            long long growth = (server.aof_current_size*100/base) - 100;\r\n\r\n            // 如果增长体积的百分比超过了 growth ，那么执行 BGREWRITEAOF\r\n            if (growth &gt;= server.aof_rewrite_perc) {\r\n                redisLog(REDIS_NOTICE,&quot;Starting automatic rewriting of AOF on %lld%% growth&quot;,growth);\r\n                // 执行 BGREWRITEAOF\r\n                rewriteAppendOnlyFileBackground();\r\n            }\r\n         }\r\n    }\r\n\r\n    if (server.aof_flush_postponed_start) flushAppendOnlyFile(0);\r\n\r\n    run_with_period(1000) {\r\n        if (server.aof_last_write_status == REDIS_ERR)\r\n            flushAppendOnlyFile(0);\r\n    }\r\n\r\n    freeClientsInAsyncFreeQueue();\r\n\r\n    clientsArePaused(); /* Don''t check return value, just use the side effect. */\r\n    run_with_period(1000) replicationCron();\r\n\r\n    run_with_period(100) {\r\n        if (server.cluster_enabled) clusterCron();\r\n    }\r\n\r\n    run_with_period(100) {\r\n        if (server.sentinel_mode) sentinelTimer();\r\n    }\r\n\r\n    run_with_period(1000) {\r\n        migrateCloseTimedoutSockets();\r\n    }\r\n\r\n    server.cronloops++;\r\n    return 1000/server.hz;\r\n}\r\n[/cpp]', 'Redis 定时循环执行任务(serverCron解析)', '', 'inherit', 'open', 'open', '', '394-revision-v1', '', '', '2015-07-16 13:57:35', '2015-07-16 13:57:35', '', 394, 'http://unasm.sinaapp.com/?p=399', 0, 'revision', '', 0);

-- --------------------------------------------------------

--
-- 表的结构 `wp_terms`
--

CREATE TABLE IF NOT EXISTS `wp_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL DEFAULT '',
  `slug` varchar(200) NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_id`),
  UNIQUE KEY `slug` (`slug`),
  KEY `name` (`name`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=16 ;

--
-- 转存表中的数据 `wp_terms`
--

INSERT INTO `wp_terms` (`term_id`, `name`, `slug`, `term_group`) VALUES
(1, 'redis', 'redis', 0),
(2, 'mysql', 'mysql', 0),
(3, 'post-format-aside', 'post-format-aside', 0),
(4, 'post-format-image', 'post-format-image', 0),
(5, 'shell', 'shell', 0),
(6, 'algorithm', 'algorithm', 0),
(7, '模式设计', 'structure', 0),
(8, 'vim', 'vim', 0),
(9, 'php', 'php', 0),
(10, 'c', 'c', 0),
(11, '杂谈', '%e6%9d%82%e8%b0%88', 0),
(12, 'javascript', 'javascript', 0),
(14, 'nginx', 'nginx', 0),
(15, 'go', 'go', 0);

-- --------------------------------------------------------

--
-- 表的结构 `wp_term_relationships`
--

CREATE TABLE IF NOT EXISTS `wp_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `wp_term_relationships`
--

INSERT INTO `wp_term_relationships` (`object_id`, `term_taxonomy_id`, `term_order`) VALUES
(1, 1, 0),
(4, 1, 0),
(4, 3, 0),
(8, 1, 0),
(8, 4, 0),
(10, 2, 0),
(14, 1, 0),
(74, 9, 0),
(19, 5, 0),
(22, 1, 0),
(24, 1, 0),
(26, 1, 0),
(28, 1, 0),
(32, 2, 0),
(37, 7, 0),
(50, 8, 0),
(39, 2, 0),
(52, 9, 0),
(55, 10, 0),
(57, 10, 0),
(60, 11, 0),
(62, 10, 0),
(64, 2, 0),
(67, 9, 0),
(69, 2, 0),
(71, 9, 0),
(76, 1, 0),
(80, 1, 0),
(85, 8, 0),
(81, 8, 0),
(93, 7, 0),
(90, 9, 0),
(96, 12, 0),
(101, 10, 0),
(105, 1, 0),
(106, 1, 0),
(110, 10, 0),
(115, 10, 0),
(119, 11, 0),
(123, 9, 0),
(121, 9, 0),
(127, 11, 0),
(142, 9, 0),
(130, 9, 0),
(132, 2, 0),
(146, 9, 0),
(186, 1, 0),
(161, 1, 0),
(164, 1, 0),
(168, 1, 0),
(170, 1, 0),
(173, 9, 0),
(175, 2, 0),
(177, 2, 0),
(189, 12, 0),
(207, 9, 0),
(195, 9, 0),
(205, 2, 0),
(231, 10, 0),
(213, 11, 0),
(216, 9, 0),
(225, 14, 0),
(228, 2, 0),
(235, 6, 0),
(243, 6, 0),
(240, 2, 0),
(245, 6, 0),
(312, 9, 0),
(253, 15, 0),
(389, 1, 0),
(264, 15, 0),
(288, 1, 0),
(272, 15, 0),
(296, 1, 0),
(266, 15, 0),
(298, 15, 0),
(318, 1, 0),
(315, 11, 0),
(320, 1, 0),
(335, 1, 0),
(354, 1, 0),
(361, 11, 0),
(303, 15, 0),
(363, 11, 0),
(394, 1, 0);

-- --------------------------------------------------------

--
-- 表的结构 `wp_term_taxonomy`
--

CREATE TABLE IF NOT EXISTS `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) NOT NULL DEFAULT '',
  `description` longtext NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=16 ;

--
-- 转存表中的数据 `wp_term_taxonomy`
--

INSERT INTO `wp_term_taxonomy` (`term_taxonomy_id`, `term_id`, `taxonomy`, `description`, `parent`, `count`) VALUES
(1, 1, 'category', '', 0, 21),
(2, 2, 'category', '', 0, 11),
(3, 3, 'post_format', '', 0, 1),
(4, 4, 'post_format', '', 0, 1),
(5, 5, 'category', '', 0, 1),
(6, 6, 'category', '', 0, 3),
(7, 7, 'category', '', 0, 2),
(8, 8, 'category', '', 0, 3),
(9, 9, 'category', '', 0, 15),
(10, 10, 'category', '', 0, 7),
(11, 11, 'category', '', 0, 6),
(12, 12, 'category', '', 0, 2),
(14, 14, 'category', '', 0, 1),
(15, 15, 'category', '', 0, 6);

-- --------------------------------------------------------

--
-- 表的结构 `wp_usermeta`
--

CREATE TABLE IF NOT EXISTS `wp_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=26 ;

--
-- 转存表中的数据 `wp_usermeta`
--

INSERT INTO `wp_usermeta` (`umeta_id`, `user_id`, `meta_key`, `meta_value`) VALUES
(1, 1, 'nickname', 'unasm'),
(2, 1, 'first_name', ''),
(3, 1, 'last_name', ''),
(4, 1, 'description', ''),
(5, 1, 'rich_editing', 'true'),
(6, 1, 'comment_shortcuts', 'false'),
(7, 1, 'admin_color', 'fresh'),
(8, 1, 'use_ssl', '0'),
(9, 1, 'show_admin_bar_front', 'true'),
(10, 1, 'wp_capabilities', 'a:1:{s:13:"administrator";b:1;}'),
(11, 1, 'wp_user_level', '10'),
(12, 1, 'dismissed_wp_pointers', 'wp350_media,wp360_revisions,wp360_locks,wp390_widgets'),
(13, 1, 'show_welcome_panel', '1'),
(21, 1, 'session_tokens', 'a:1:{s:64:"f7659df5fd2eb894cc0f2481b87df7ae34319f69a5f634653e6ca483a9995343";i:1437227186;}'),
(15, 1, 'wp_dashboard_quick_press_last_post_id', '400'),
(16, 1, 'wp_user-settings', 'editor=tinymce&dfw_width=647&libraryContent=browse&hidetb=1&mfold=o&posts_list_mode=list'),
(17, 1, 'wp_user-settings-time', '1437113265'),
(18, 1, 'closedpostboxes_dashboard', 'a:1:{i:0;s:14:"mh_info_widget";}'),
(19, 1, 'metaboxhidden_dashboard', 'a:0:{}'),
(24, 1, 'closedpostboxes_post', 'a:1:{i:0;s:16:"tagsdiv-post_tag";}'),
(25, 1, 'metaboxhidden_post', 'a:6:{i:0;s:11:"postexcerpt";i:1;s:13:"trackbacksdiv";i:2;s:10:"postcustom";i:3;s:16:"commentstatusdiv";i:4;s:7:"slugdiv";i:5;s:9:"authordiv";}'),
(22, 1, 'closedpostboxes_page', 'a:0:{}'),
(23, 1, 'metaboxhidden_page', 'a:5:{i:0;s:10:"postcustom";i:1;s:16:"commentstatusdiv";i:2;s:11:"commentsdiv";i:3;s:7:"slugdiv";i:4;s:9:"authordiv";}');

-- --------------------------------------------------------

--
-- 表的结构 `wp_users`
--

CREATE TABLE IF NOT EXISTS `wp_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) NOT NULL DEFAULT '',
  `user_pass` varchar(64) NOT NULL DEFAULT '',
  `user_nicename` varchar(50) NOT NULL DEFAULT '',
  `user_email` varchar(100) NOT NULL DEFAULT '',
  `user_url` varchar(100) NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(60) NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

--
-- 转存表中的数据 `wp_users`
--

INSERT INTO `wp_users` (`ID`, `user_login`, `user_pass`, `user_nicename`, `user_email`, `user_url`, `user_registered`, `user_activation_key`, `user_status`, `display_name`) VALUES
(1, 'unasm', '$P$BLImuxrAYQOEy49lbGYsFuOj2Ns1Qd.', 'unasm', 'unasm@sina.cn', '', '2014-09-23 16:07:29', '', 0, 'unasm');
