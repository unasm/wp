-- MySQL dump 10.13  Distrib 5.5.46, for Linux (x86_64)
--
-- Host: localhost    Database: blog
-- ------------------------------------------------------
-- Server version	5.5.46

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `wp_commentmeta`
--

DROP TABLE IF EXISTS `wp_commentmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=MyISAM AUTO_INCREMENT=1637 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_commentmeta`
--

LOCK TABLES `wp_commentmeta` WRITE;
/*!40000 ALTER TABLE `wp_commentmeta` DISABLE KEYS */;
INSERT INTO `wp_commentmeta` VALUES (1148,264,'akismet_delayed_moderation_email','1'),(1149,265,'akismet_error','1485245172'),(1150,265,'akismet_history','a:4:{s:4:\"time\";d:1485245172.9758090972900390625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(998,227,'akismet_error','1478466593'),(999,227,'akismet_history','a:4:{s:4:\"time\";d:1478466593.101892948150634765625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(768,169,'akismet_delayed_moderation_email','1'),(769,168,'akismet_history','a:4:{s:4:\"time\";d:1474783534.1070349216461181640625;s:7:\"message\";s:44:\"unasm changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"unasm\";}'),(1146,264,'akismet_history','a:4:{s:4:\"time\";d:1485245097.808868885040283203125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1086,249,'akismet_history','a:4:{s:4:\"time\";d:1483660063.950666904449462890625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(794,176,'akismet_error','1475227628'),(795,176,'akismet_history','a:4:{s:4:\"time\";d:1475227628.2078440189361572265625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1005,228,'akismet_delayed_moderation_email','1'),(1006,229,'akismet_error','1478469021'),(1007,229,'akismet_history','a:4:{s:4:\"time\";d:1478469021.1788170337677001953125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(766,169,'akismet_history','a:4:{s:4:\"time\";d:1474760848.901444911956787109375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(902,203,'akismet_error','1476093040'),(764,168,'akismet_delayed_moderation_email','1'),(765,169,'akismet_error','1474760848'),(903,203,'akismet_history','a:4:{s:4:\"time\";d:1476093040.42897796630859375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1053,241,'akismet_error','1480309420'),(1054,241,'akismet_history','a:4:{s:4:\"time\";d:1480309420.07697391510009765625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1029,234,'akismet_delayed_moderation_email','1'),(1030,235,'akismet_error','1478959316'),(1031,235,'akismet_history','a:4:{s:4:\"time\";d:1478959316.2227671146392822265625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1064,243,'akismet_delayed_moderation_email','1'),(720,157,'akismet_delayed_moderation_email','1'),(1065,244,'akismet_error','1483292828'),(1066,244,'akismet_history','a:4:{s:4:\"time\";d:1483292828.9040300846099853515625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(934,211,'akismet_error','1477439593'),(935,211,'akismet_history','a:4:{s:4:\"time\";d:1477439593.2985041141510009765625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1092,250,'akismet_delayed_moderation_email','1'),(1093,251,'akismet_error','1483662330'),(1094,251,'akismet_history','a:4:{s:4:\"time\";d:1483662330.8431770801544189453125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(905,203,'akismet_delayed_moderation_email','1'),(709,155,'akismet_error','1473676119'),(710,155,'akismet_history','a:4:{s:4:\"time\";d:1473676119.6162929534912109375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(640,137,'akismet_delayed_moderation_email','1'),(641,138,'akismet_error','1472411735'),(642,138,'akismet_history','a:4:{s:4:\"time\";d:1472411735.2111890316009521484375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1084,248,'akismet_delayed_moderation_email','1'),(1085,249,'akismet_error','1483660063'),(756,166,'akismet_delayed_moderation_email','1'),(757,167,'akismet_error','1474713370'),(758,167,'akismet_history','a:4:{s:4:\"time\";d:1474713370.1605379581451416015625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1118,257,'akismet_history','a:4:{s:4:\"time\";d:1484832800.1014521121978759765625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(700,152,'akismet_delayed_moderation_email','1'),(1002,228,'akismet_error','1478468052'),(164,59,'akismet_history','a:4:{s:4:\"time\";d:1438654483.4664928913116455078125;s:7:\"message\";s:44:\"unasm changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:5:\"unasm\";}'),(1068,244,'akismet_delayed_moderation_email','1'),(166,60,'akismet_history','a:4:{s:4:\"time\";d:1438654483.728868961334228515625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:5:\"unasm\";}'),(1117,257,'akismet_error','1484832800'),(1072,245,'akismet_delayed_moderation_email','1'),(1073,246,'akismet_error','1483657993'),(1074,246,'akismet_history','a:4:{s:4:\"time\";d:1483657993.9939420223236083984375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1056,241,'akismet_delayed_moderation_email','1'),(1001,227,'akismet_delayed_moderation_email','1'),(161,59,'akismet_history','a:4:{s:4:\"time\";d:1438615253.456244945526123046875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(692,150,'akismet_delayed_moderation_email','1'),(693,151,'akismet_error','1473423107'),(694,151,'akismet_history','a:4:{s:4:\"time\";d:1473423107.9270770549774169921875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(753,166,'akismet_error','1474712283'),(754,166,'akismet_history','a:4:{s:4:\"time\";d:1474712283.1034100055694580078125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(696,151,'akismet_delayed_moderation_email','1'),(697,152,'akismet_error','1473468525'),(698,152,'akismet_history','a:4:{s:4:\"time\";d:1473468525.6837680339813232421875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(770,170,'akismet_error','1474866472'),(771,170,'akismet_history','a:4:{s:4:\"time\";d:1474866473.004004001617431640625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(942,213,'akismet_error','1477587368'),(943,213,'akismet_history','a:4:{s:4:\"time\";d:1477587368.7779738903045654296875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(909,204,'akismet_delayed_moderation_email','1'),(1025,233,'akismet_delayed_moderation_email','1'),(1026,234,'akismet_error','1478955640'),(1027,234,'akismet_history','a:4:{s:4:\"time\";d:1478955640.7400970458984375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1144,263,'akismet_delayed_moderation_email','1'),(1145,264,'akismet_error','1485245097'),(802,178,'akismet_error','1475345599'),(728,159,'akismet_delayed_moderation_email','1'),(761,168,'akismet_error','1474749188'),(762,168,'akismet_history','a:4:{s:4:\"time\";d:1474749188.96891307830810546875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1033,236,'akismet_error','1479096206'),(1034,236,'akismet_history','a:4:{s:4:\"time\";d:1479096206.6771590709686279296875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(803,178,'akismet_history','a:4:{s:4:\"time\";d:1475345599.9281280040740966796875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1098,252,'akismet_history','a:4:{s:4:\"time\";d:1483741099.1687180995941162109375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(793,175,'akismet_delayed_moderation_email','1'),(613,131,'akismet_error','1471014286'),(614,131,'akismet_history','a:4:{s:4:\"time\";d:1471014286.384334087371826171875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1069,245,'akismet_error','1483509099'),(600,127,'akismet_delayed_moderation_email','1'),(706,154,'akismet_history','a:4:{s:4:\"time\";d:1473600742.2778179645538330078125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(593,126,'akismet_error','1469510499'),(594,126,'akismet_history','a:4:{s:4:\"time\";d:1469510499.9386789798736572265625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(580,122,'akismet_delayed_moderation_email','1'),(581,123,'akismet_error','1468187653'),(582,123,'akismet_history','a:4:{s:4:\"time\";d:1468187653.50426197052001953125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(576,121,'akismet_delayed_moderation_email','1'),(577,122,'akismet_error','1468130957'),(578,122,'akismet_history','a:4:{s:4:\"time\";d:1468130957.256865978240966796875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(806,179,'akismet_error','1475418299'),(807,179,'akismet_history','a:4:{s:4:\"time\";d:1475418299.95866489410400390625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(732,160,'akismet_delayed_moderation_email','1'),(1616,381,'akismet_delayed_moderation_email','1'),(740,162,'akismet_delayed_moderation_email','1'),(713,156,'akismet_error','1473861021'),(714,156,'akismet_history','a:4:{s:4:\"time\";d:1473861021.407599925994873046875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(648,139,'akismet_delayed_moderation_email','1'),(721,158,'akismet_error','1473954626'),(722,158,'akismet_history','a:4:{s:4:\"time\";d:1473954626.8293039798736572265625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(652,140,'akismet_delayed_moderation_email','1'),(653,141,'akismet_error','1472679306'),(585,124,'akismet_error','1468206597'),(586,124,'akismet_history','a:4:{s:4:\"time\";d:1468206597.3337500095367431640625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(644,138,'akismet_delayed_moderation_email','1'),(645,139,'akismet_error','1472455734'),(646,139,'akismet_history','a:4:{s:4:\"time\";d:1472455734.7046139240264892578125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1061,243,'akismet_error','1481508360'),(1062,243,'akismet_history','a:4:{s:4:\"time\";d:1481508360.11363697052001953125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1048,239,'akismet_delayed_moderation_email','1'),(1097,252,'akismet_error','1483741099'),(626,134,'akismet_history','a:4:{s:4:\"time\";d:1471587792.3016440868377685546875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(670,145,'akismet_history','a:4:{s:4:\"time\";d:1472976084.4713170528411865234375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(862,193,'akismet_error','1475664472'),(863,193,'akismet_history','a:4:{s:4:\"time\";d:1475664472.42508697509765625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(748,164,'akismet_delayed_moderation_email','1'),(669,145,'akismet_error','1472976084'),(628,134,'akismet_delayed_moderation_email','1'),(729,160,'akismet_error','1474068596'),(730,160,'akismet_history','a:4:{s:4:\"time\";d:1474068596.7279860973358154296875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1549,365,'akismet_error','1487990082'),(1550,365,'akismet_history','a:4:{s:4:\"time\";d:1487990082.793775081634521484375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(660,142,'akismet_delayed_moderation_email','1'),(661,143,'akismet_error','1472785703'),(657,142,'akismet_error','1472726119'),(658,142,'akismet_history','a:4:{s:4:\"time\";d:1472726119.311007022857666015625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(624,133,'akismet_delayed_moderation_email','1'),(625,134,'akismet_error','1471587792'),(629,135,'akismet_error','1471696354'),(630,135,'akismet_history','a:4:{s:4:\"time\";d:1471696354.6267108917236328125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(608,129,'akismet_delayed_moderation_email','1'),(737,162,'akismet_error','1474217552'),(738,162,'akismet_history','a:4:{s:4:\"time\";d:1474217552.6796109676361083984375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1110,255,'akismet_history','a:4:{s:4:\"time\";d:1484659288.2041399478912353515625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1617,382,'akismet_error','1492068969'),(829,184,'akismet_delayed_moderation_email','1'),(830,185,'akismet_error','1475531537'),(831,185,'akismet_history','a:4:{s:4:\"time\";d:1475531537.675180912017822265625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(741,163,'akismet_error','1474298716'),(742,163,'akismet_history','a:4:{s:4:\"time\";d:1474298716.8605439662933349609375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1132,260,'akismet_delayed_moderation_email','1'),(1133,261,'akismet_error','1485240203'),(1134,261,'akismet_history','a:4:{s:4:\"time\";d:1485240203.090672016143798828125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(774,171,'akismet_error','1474929680'),(775,171,'akismet_history','a:4:{s:4:\"time\";d:1474929680.77880001068115234375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(704,153,'akismet_delayed_moderation_email','1'),(1052,240,'akismet_delayed_moderation_email','1'),(701,153,'akismet_error','1473536513'),(702,153,'akismet_history','a:4:{s:4:\"time\";d:1473536513.647757053375244140625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(682,148,'akismet_history','a:4:{s:4:\"time\";d:1473102509.56673908233642578125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(749,165,'akismet_error','1474611019'),(750,165,'akismet_history','a:4:{s:4:\"time\";d:1474611019.69804096221923828125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(684,148,'akismet_delayed_moderation_email','1'),(685,149,'akismet_error','1473158950'),(686,149,'akismet_history','a:4:{s:4:\"time\";d:1473158950.9813849925994873046875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1060,242,'akismet_delayed_moderation_email','1'),(760,167,'akismet_delayed_moderation_email','1'),(895,201,'akismet_history','a:4:{s:4:\"time\";d:1475995337.5590779781341552734375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(790,175,'akismet_error','1475160697'),(791,175,'akismet_history','a:4:{s:4:\"time\";d:1475160697.6010639667510986328125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(716,156,'akismet_delayed_moderation_email','1'),(717,157,'akismet_error','1473914947'),(718,157,'akismet_history','a:4:{s:4:\"time\";d:1473914947.067595005035400390625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(724,158,'akismet_delayed_moderation_email','1'),(725,159,'akismet_error','1474004331'),(726,159,'akismet_history','a:4:{s:4:\"time\";d:1474004331.8696129322052001953125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(949,214,'akismet_delayed_moderation_email','1'),(689,150,'akismet_error','1473390212'),(690,150,'akismet_history','a:4:{s:4:\"time\";d:1473390212.9196689128875732421875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(688,149,'akismet_delayed_moderation_email','1'),(894,201,'akismet_error','1475995337'),(752,165,'akismet_delayed_moderation_email','1'),(609,130,'akismet_error','1470855000'),(610,130,'akismet_history','a:4:{s:4:\"time\";d:1470855000.37090396881103515625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(596,126,'akismet_delayed_moderation_email','1'),(910,205,'akismet_error','1476325135'),(911,205,'akismet_history','a:4:{s:4:\"time\";d:1476325135.6407330036163330078125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(777,171,'akismet_delayed_moderation_email','1'),(1021,232,'akismet_delayed_moderation_email','1'),(708,154,'akismet_delayed_moderation_email','1'),(672,145,'akismet_delayed_moderation_email','1'),(676,146,'akismet_delayed_moderation_email','1'),(637,137,'akismet_error','1472376520'),(638,137,'akismet_history','a:4:{s:4:\"time\";d:1472376520.954833984375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(616,131,'akismet_delayed_moderation_email','1'),(572,120,'akismet_delayed_moderation_email','1'),(573,121,'akismet_error','1468081429'),(574,121,'akismet_history','a:4:{s:4:\"time\";d:1468081429.191565990447998046875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(745,164,'akismet_error','1474368090'),(680,147,'akismet_delayed_moderation_email','1'),(681,148,'akismet_error','1473102509'),(746,164,'akismet_history','a:4:{s:4:\"time\";d:1474368090.06678104400634765625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(965,218,'akismet_delayed_moderation_email','1'),(966,219,'akismet_error','1478097204'),(967,219,'akismet_history','a:4:{s:4:\"time\";d:1478097204.0222589969635009765625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(678,147,'akismet_history','a:4:{s:4:\"time\";d:1473046393.4216969013214111328125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(677,147,'akismet_error','1473046393'),(846,189,'akismet_error','1475575864'),(847,189,'akismet_history','a:4:{s:4:\"time\";d:1475575864.26922607421875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(826,184,'akismet_error','1475508761'),(668,144,'akismet_delayed_moderation_email','1'),(744,163,'akismet_delayed_moderation_email','1'),(736,161,'akismet_delayed_moderation_email','1'),(673,146,'akismet_error','1473008493'),(674,146,'akismet_history','a:4:{s:4:\"time\";d:1473008493.4587039947509765625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(632,135,'akismet_delayed_moderation_email','1'),(1096,251,'akismet_delayed_moderation_email','1'),(605,129,'akismet_error','1470415608'),(606,129,'akismet_history','a:4:{s:4:\"time\";d:1470415608.8649199008941650390625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(604,128,'akismet_delayed_moderation_email','1'),(617,132,'akismet_error','1471256937'),(618,132,'akismet_history','a:4:{s:4:\"time\";d:1471256937.773292064666748046875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(649,140,'akismet_error','1472645496'),(650,140,'akismet_history','a:4:{s:4:\"time\";d:1472645496.3734099864959716796875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1003,228,'akismet_history','a:4:{s:4:\"time\";d:1478468052.0395109653472900390625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(797,176,'akismet_delayed_moderation_email','1'),(798,177,'akismet_error','1475254593'),(799,177,'akismet_history','a:4:{s:4:\"time\";d:1475254593.1918990612030029296875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(620,132,'akismet_delayed_moderation_email','1'),(621,133,'akismet_error','1471451632'),(622,133,'akismet_history','a:4:{s:4:\"time\";d:1471451632.926250934600830078125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(588,124,'akismet_delayed_moderation_email','1'),(778,172,'akismet_error','1474985516'),(779,172,'akismet_history','a:4:{s:4:\"time\";d:1474985516.43570804595947265625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(712,155,'akismet_delayed_moderation_email','1'),(597,127,'akismet_error','1469657013'),(598,127,'akismet_history','a:4:{s:4:\"time\";d:1469657013.3965508937835693359375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(584,123,'akismet_delayed_moderation_email','1'),(705,154,'akismet_error','1473600742'),(636,136,'akismet_delayed_moderation_email','1'),(1070,245,'akismet_history','a:4:{s:4:\"time\";d:1483509099.30360889434814453125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(633,136,'akismet_error','1472253582'),(634,136,'akismet_history','a:4:{s:4:\"time\";d:1472253582.24036407470703125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(612,130,'akismet_delayed_moderation_email','1'),(654,141,'akismet_history','a:4:{s:4:\"time\";d:1472679306.29883098602294921875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(570,120,'akismet_history','a:4:{s:4:\"time\";d:1467957603.532926082611083984375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(569,120,'akismet_error','1467957603'),(549,115,'akismet_error','1465492058'),(550,115,'akismet_history','a:4:{s:4:\"time\";d:1465492058.7647559642791748046875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(656,141,'akismet_delayed_moderation_email','1'),(662,143,'akismet_history','a:4:{s:4:\"time\";d:1472785703.5234448909759521484375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(592,125,'akismet_delayed_moderation_email','1'),(601,128,'akismet_error','1469729195'),(602,128,'akismet_history','a:4:{s:4:\"time\";d:1469729195.895001888275146484375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(552,115,'akismet_delayed_moderation_email','1'),(553,116,'akismet_error','1465915896'),(554,116,'akismet_history','a:4:{s:4:\"time\";d:1465915896.5161800384521484375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(561,118,'akismet_error','1467419302'),(562,118,'akismet_history','a:4:{s:4:\"time\";d:1467419302.1712009906768798828125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(556,116,'akismet_delayed_moderation_email','1'),(557,117,'akismet_error','1466489510'),(558,117,'akismet_history','a:4:{s:4:\"time\";d:1466489510.015985012054443359375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(906,204,'akismet_error','1476203411'),(907,204,'akismet_history','a:4:{s:4:\"time\";d:1476203411.8800580501556396484375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(773,170,'akismet_delayed_moderation_email','1'),(1013,230,'akismet_delayed_moderation_email','1'),(560,117,'akismet_delayed_moderation_email','1'),(734,161,'akismet_history','a:4:{s:4:\"time\";d:1474137270.243010997772216796875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(827,184,'akismet_history','a:4:{s:4:\"time\";d:1475508761.5765640735626220703125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1045,239,'akismet_error','1479887880'),(1046,239,'akismet_history','a:4:{s:4:\"time\";d:1479887880.6371209621429443359375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(997,226,'akismet_delayed_moderation_email','1'),(564,118,'akismet_delayed_moderation_email','1'),(565,119,'akismet_error','1467656978'),(566,119,'akismet_history','a:4:{s:4:\"time\";d:1467656978.91063690185546875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(589,125,'akismet_error','1469226214'),(590,125,'akismet_history','a:4:{s:4:\"time\";d:1469226214.619718074798583984375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(733,161,'akismet_error','1474137270'),(664,143,'akismet_delayed_moderation_email','1'),(665,144,'akismet_error','1472786313'),(666,144,'akismet_history','a:4:{s:4:\"time\";d:1472786313.3618519306182861328125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(568,119,'akismet_delayed_moderation_email','1'),(1513,356,'akismet_error','1486246849'),(1514,356,'akismet_history','a:4:{s:4:\"time\";d:1486246849.9330050945281982421875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1124,258,'akismet_delayed_moderation_email','1'),(913,205,'akismet_delayed_moderation_email','1'),(781,172,'akismet_delayed_moderation_email','1'),(782,173,'akismet_error','1475000973'),(783,173,'akismet_history','a:4:{s:4:\"time\";d:1475000973.87714290618896484375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(946,214,'akismet_error','1477897381'),(947,214,'akismet_history','a:4:{s:4:\"time\";d:1477897381.4136779308319091796875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(917,206,'akismet_delayed_moderation_email','1'),(1009,229,'akismet_delayed_moderation_email','1'),(1142,263,'akismet_history','a:4:{s:4:\"time\";d:1485245066.2615048885345458984375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(785,173,'akismet_delayed_moderation_email','1'),(786,174,'akismet_error','1475080559'),(787,174,'akismet_history','a:4:{s:4:\"time\";d:1475080559.4168760776519775390625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(914,206,'akismet_error','1476435985'),(915,206,'akismet_history','a:4:{s:4:\"time\";d:1476435985.6529390811920166015625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1125,259,'akismet_error','1484990077'),(1126,259,'akismet_history','a:4:{s:4:\"time\";d:1484990077.77941989898681640625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(789,174,'akismet_delayed_moderation_email','1'),(1049,240,'akismet_error','1479893754'),(1050,240,'akismet_history','a:4:{s:4:\"time\";d:1479893754.6145889759063720703125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(801,177,'akismet_delayed_moderation_email','1'),(950,215,'akismet_error','1478029719'),(951,215,'akismet_history','a:4:{s:4:\"time\";d:1478029719.6343510150909423828125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(921,207,'akismet_delayed_moderation_email','1'),(805,178,'akismet_delayed_moderation_email','1'),(918,207,'akismet_error','1476708903'),(919,207,'akismet_history','a:4:{s:4:\"time\";d:1476708903.0084040164947509765625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1626,384,'akismet_history','a:4:{s:4:\"time\";d:1492292707.10818004608154296875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1548,364,'akismet_delayed_moderation_email','1'),(809,179,'akismet_delayed_moderation_email','1'),(810,180,'akismet_error','1475440503'),(811,180,'akismet_history','a:4:{s:4:\"time\";d:1475440503.096355915069580078125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(993,225,'akismet_delayed_moderation_email','1'),(994,226,'akismet_error','1478465617'),(995,226,'akismet_history','a:4:{s:4:\"time\";d:1478465617.459867954254150390625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1109,255,'akismet_error','1484659288'),(813,180,'akismet_delayed_moderation_email','1'),(814,181,'akismet_error','1475441079'),(815,181,'akismet_history','a:4:{s:4:\"time\";d:1475441079.4106628894805908203125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(991,225,'akismet_history','a:4:{s:4:\"time\";d:1478447494.087730884552001953125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1100,252,'akismet_delayed_moderation_email','1'),(1101,253,'akismet_error','1483741950'),(1102,253,'akismet_history','a:4:{s:4:\"time\";d:1483741950.647903919219970703125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(817,181,'akismet_delayed_moderation_email','1'),(818,182,'akismet_error','1475463221'),(819,182,'akismet_history','a:4:{s:4:\"time\";d:1475463221.695208072662353515625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(970,220,'akismet_error','1478249868'),(971,220,'akismet_history','a:4:{s:4:\"time\";d:1478249868.4436070919036865234375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(925,208,'akismet_delayed_moderation_email','1'),(1044,238,'akismet_delayed_moderation_email','1'),(989,224,'akismet_delayed_moderation_email','1'),(990,225,'akismet_error','1478447494'),(821,182,'akismet_delayed_moderation_email','1'),(822,183,'akismet_error','1475486506'),(823,183,'akismet_history','a:4:{s:4:\"time\";d:1475486506.17204189300537109375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(922,208,'akismet_error','1476857489'),(923,208,'akismet_history','a:4:{s:4:\"time\";d:1476857489.680756092071533203125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1080,247,'akismet_delayed_moderation_email','1'),(1081,248,'akismet_error','1483658821'),(1082,248,'akismet_history','a:4:{s:4:\"time\";d:1483658821.3011729717254638671875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(825,183,'akismet_delayed_moderation_email','1'),(1130,260,'akismet_history','a:4:{s:4:\"time\";d:1485139733.727384090423583984375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(981,222,'akismet_delayed_moderation_email','1'),(1042,238,'akismet_history','a:4:{s:4:\"time\";d:1479738254.7249929904937744140625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(833,185,'akismet_delayed_moderation_email','1'),(834,186,'akismet_error','1475537229'),(835,186,'akismet_history','a:4:{s:4:\"time\";d:1475537229.633068084716796875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1129,260,'akismet_error','1485139733'),(1104,253,'akismet_delayed_moderation_email','1'),(1105,254,'akismet_error','1483922458'),(1106,254,'akismet_history','a:4:{s:4:\"time\";d:1483922458.7608311176300048828125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(837,186,'akismet_delayed_moderation_email','1'),(838,187,'akismet_error','1475545903'),(839,187,'akismet_history','a:4:{s:4:\"time\";d:1475545903.3737080097198486328125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(977,221,'akismet_delayed_moderation_email','1'),(978,222,'akismet_error','1478327289'),(979,222,'akismet_history','a:4:{s:4:\"time\";d:1478327289.1709830760955810546875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(841,187,'akismet_delayed_moderation_email','1'),(842,188,'akismet_error','1475553898'),(843,188,'akismet_history','a:4:{s:4:\"time\";d:1475553898.521852016448974609375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(969,219,'akismet_delayed_moderation_email','1'),(1037,237,'akismet_error','1479550745'),(1038,237,'akismet_history','a:4:{s:4:\"time\";d:1479550745.8023030757904052734375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(973,220,'akismet_delayed_moderation_email','1'),(974,221,'akismet_error','1478300374'),(975,221,'akismet_history','a:4:{s:4:\"time\";d:1478300374.8034570217132568359375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(845,188,'akismet_delayed_moderation_email','1'),(1041,238,'akismet_error','1479738254'),(985,223,'akismet_delayed_moderation_email','1'),(986,224,'akismet_error','1478443162'),(987,224,'akismet_history','a:4:{s:4:\"time\";d:1478443162.762713909149169921875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(849,189,'akismet_delayed_moderation_email','1'),(850,190,'akismet_error','1475597706'),(851,190,'akismet_history','a:4:{s:4:\"time\";d:1475597706.3945140838623046875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1509,355,'akismet_error','1486164153'),(1510,355,'akismet_history','a:4:{s:4:\"time\";d:1486164153.3563060760498046875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1120,257,'akismet_delayed_moderation_email','1'),(1121,258,'akismet_error','1484922798'),(1122,258,'akismet_history','a:4:{s:4:\"time\";d:1484922798.2175810337066650390625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(853,190,'akismet_delayed_moderation_email','1'),(854,191,'akismet_error','1475620765'),(855,191,'akismet_history','a:4:{s:4:\"time\";d:1475620765.9753310680389404296875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1505,354,'akismet_error','1485957665'),(1506,354,'akismet_history','a:4:{s:4:\"time\";d:1485957665.5604989528656005859375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(961,217,'akismet_delayed_moderation_email','1'),(962,218,'akismet_error','1478071691'),(963,218,'akismet_history','a:4:{s:4:\"time\";d:1478071691.2426030635833740234375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1116,256,'akismet_delayed_moderation_email','1'),(857,191,'akismet_delayed_moderation_email','1'),(858,192,'akismet_error','1475642775'),(859,192,'akismet_history','a:4:{s:4:\"time\";d:1475642775.702310085296630859375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(982,223,'akismet_error','1478442164'),(983,223,'akismet_history','a:4:{s:4:\"time\";d:1478442164.4286830425262451171875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(929,209,'akismet_delayed_moderation_email','1'),(1112,255,'akismet_delayed_moderation_email','1'),(1113,256,'akismet_error','1484694073'),(1114,256,'akismet_history','a:4:{s:4:\"time\";d:1484694073.12921905517578125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1516,356,'akismet_delayed_moderation_email','1'),(861,192,'akismet_delayed_moderation_email','1'),(1537,362,'akismet_error','1487539686'),(1538,362,'akismet_history','a:4:{s:4:\"time\";d:1487539686.73425388336181640625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1512,355,'akismet_delayed_moderation_email','1'),(865,193,'akismet_delayed_moderation_email','1'),(866,194,'akismet_error','1475685867'),(867,194,'akismet_history','a:4:{s:4:\"time\";d:1475685867.3080699443817138671875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(926,209,'akismet_error','1477010653'),(927,209,'akismet_history','a:4:{s:4:\"time\";d:1477010653.18846797943115234375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1076,246,'akismet_delayed_moderation_email','1'),(1077,247,'akismet_error','1483658767'),(1078,247,'akismet_history','a:4:{s:4:\"time\";d:1483658767.4966580867767333984375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(869,194,'akismet_delayed_moderation_email','1'),(870,195,'akismet_error','1475708560'),(871,195,'akismet_history','a:4:{s:4:\"time\";d:1475708560.224173069000244140625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1136,261,'akismet_delayed_moderation_email','1'),(1137,262,'akismet_error','1485240403'),(1138,262,'akismet_history','a:4:{s:4:\"time\";d:1485240403.5962350368499755859375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(957,216,'akismet_delayed_moderation_email','1'),(958,217,'akismet_error','1478071221'),(959,217,'akismet_history','a:4:{s:4:\"time\";d:1478071221.9344999790191650390625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(873,195,'akismet_delayed_moderation_email','1'),(874,196,'akismet_error','1475730199'),(875,196,'akismet_history','a:4:{s:4:\"time\";d:1475730199.0518109798431396484375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1040,237,'akismet_delayed_moderation_email','1'),(877,196,'akismet_delayed_moderation_email','1'),(878,197,'akismet_error','1475752172'),(879,197,'akismet_history','a:4:{s:4:\"time\";d:1475752172.3504159450531005859375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1321,308,'akismet_error','1485250063'),(1322,308,'akismet_history','a:4:{s:4:\"time\";d:1485250063.1610739231109619140625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1108,254,'akismet_delayed_moderation_email','1'),(881,197,'akismet_delayed_moderation_email','1'),(882,198,'akismet_error','1475773448'),(883,198,'akismet_history','a:4:{s:4:\"time\";d:1475773448.5628430843353271484375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1022,233,'akismet_error','1478891020'),(1023,233,'akismet_history','a:4:{s:4:\"time\";d:1478891020.0189659595489501953125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(945,213,'akismet_delayed_moderation_email','1'),(1627,384,'akismet_as_submitted','a:13:{s:14:\"comment_author\";s:10:\"Erickirona\";s:20:\"comment_author_email\";s:27:\"lazyblackdog@umail4less.men\";s:18:\"comment_author_url\";s:25:\"http://cialiscost2017.com\";s:15:\"comment_content\";s:64:\"wh0cd713306 <a href=http://viagraprice2017.com/>viagra price</a>\";s:12:\"comment_type\";s:0:\"\";s:7:\"user_ID\";i:0;s:7:\"user_id\";i:0;s:7:\"user_ip\";s:11:\"46.161.9.20\";s:10:\"user_agent\";s:65:\"Mozilla/5.0 (Windows NT 6.1; rv:44.0) Gecko/20100101 Firefox/44.0\";s:4:\"blog\";s:16:\"http://unasm.com\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:29:\"http://unasm.com/2015/07/335/\";}'),(953,215,'akismet_delayed_moderation_email','1'),(954,216,'akismet_error','1478031013'),(955,216,'akismet_history','a:4:{s:4:\"time\";d:1478031013.043819904327392578125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(885,198,'akismet_delayed_moderation_email','1'),(886,199,'akismet_error','1475795390'),(887,199,'akismet_history','a:4:{s:4:\"time\";d:1475795390.5276210308074951171875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1010,230,'akismet_error','1478647690'),(1011,230,'akismet_history','a:4:{s:4:\"time\";d:1478647690.6005089282989501953125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(933,210,'akismet_delayed_moderation_email','1'),(1014,231,'akismet_error','1478798878'),(1015,231,'akismet_history','a:4:{s:4:\"time\";d:1478798878.6752579212188720703125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(941,212,'akismet_delayed_moderation_email','1'),(889,199,'akismet_delayed_moderation_email','1'),(890,200,'akismet_error','1475906632'),(891,200,'akismet_history','a:4:{s:4:\"time\";d:1475906632.1485569477081298828125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(930,210,'akismet_error','1477291036'),(931,210,'akismet_history','a:4:{s:4:\"time\";d:1477291036.0659849643707275390625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1140,262,'akismet_delayed_moderation_email','1'),(1141,263,'akismet_error','1485245066'),(893,200,'akismet_delayed_moderation_email','1'),(1088,249,'akismet_delayed_moderation_email','1'),(1089,250,'akismet_error','1483661505'),(1090,250,'akismet_history','a:4:{s:4:\"time\";d:1483661505.6601231098175048828125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(897,201,'akismet_delayed_moderation_email','1'),(898,202,'akismet_error','1475995793'),(899,202,'akismet_history','a:4:{s:4:\"time\";d:1475995793.0735371112823486328125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1017,231,'akismet_delayed_moderation_email','1'),(1018,232,'akismet_error','1478800093'),(1019,232,'akismet_history','a:4:{s:4:\"time\";d:1478800093.5008080005645751953125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(937,211,'akismet_delayed_moderation_email','1'),(938,212,'akismet_error','1477464807'),(939,212,'akismet_history','a:4:{s:4:\"time\";d:1477464807.5155580043792724609375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(901,202,'akismet_delayed_moderation_email','1'),(1057,242,'akismet_error','1480711525'),(1058,242,'akismet_history','a:4:{s:4:\"time\";d:1480711525.3946230411529541015625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1036,236,'akismet_delayed_moderation_email','1'),(1517,357,'akismet_error','1486394951'),(1518,357,'akismet_history','a:4:{s:4:\"time\";d:1486394951.3636639118194580078125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1561,368,'akismet_error','1489204670'),(1562,368,'akismet_history','a:4:{s:4:\"time\";d:1489204670.900969982147216796875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1544,363,'akismet_delayed_moderation_email','1'),(1545,364,'akismet_error','1487854143'),(1546,364,'akismet_history','a:4:{s:4:\"time\";d:1487854143.17278003692626953125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1128,259,'akismet_delayed_moderation_email','1'),(1152,265,'akismet_delayed_moderation_email','1'),(1153,266,'akismet_error','1485245423'),(1154,266,'akismet_history','a:4:{s:4:\"time\";d:1485245423.7476708889007568359375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1156,266,'akismet_delayed_moderation_email','1'),(1157,267,'akismet_error','1485245565'),(1158,267,'akismet_history','a:4:{s:4:\"time\";d:1485245565.561183929443359375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1160,267,'akismet_delayed_moderation_email','1'),(1161,268,'akismet_error','1485245656'),(1162,268,'akismet_history','a:4:{s:4:\"time\";d:1485245656.0667650699615478515625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1164,268,'akismet_delayed_moderation_email','1'),(1165,269,'akismet_error','1485245762'),(1166,269,'akismet_history','a:4:{s:4:\"time\";d:1485245762.688394069671630859375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1168,269,'akismet_delayed_moderation_email','1'),(1169,270,'akismet_error','1485245820'),(1170,270,'akismet_history','a:4:{s:4:\"time\";d:1485245820.435389995574951171875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1172,270,'akismet_delayed_moderation_email','1'),(1173,271,'akismet_error','1485245995'),(1174,271,'akismet_history','a:4:{s:4:\"time\";d:1485245995.5912001132965087890625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1176,271,'akismet_delayed_moderation_email','1'),(1177,272,'akismet_error','1485246244'),(1178,272,'akismet_history','a:4:{s:4:\"time\";d:1485246244.5496919155120849609375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1180,272,'akismet_delayed_moderation_email','1'),(1181,273,'akismet_error','1485246280'),(1182,273,'akismet_history','a:4:{s:4:\"time\";d:1485246280.0617320537567138671875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1184,273,'akismet_delayed_moderation_email','1'),(1185,274,'akismet_error','1485246352'),(1186,274,'akismet_history','a:4:{s:4:\"time\";d:1485246352.085176944732666015625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1188,274,'akismet_delayed_moderation_email','1'),(1189,275,'akismet_error','1485246418'),(1190,275,'akismet_history','a:4:{s:4:\"time\";d:1485246418.31803798675537109375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1192,275,'akismet_delayed_moderation_email','1'),(1193,276,'akismet_error','1485246443'),(1194,276,'akismet_history','a:4:{s:4:\"time\";d:1485246443.4723999500274658203125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1196,276,'akismet_delayed_moderation_email','1'),(1197,277,'akismet_error','1485246479'),(1198,277,'akismet_history','a:4:{s:4:\"time\";d:1485246479.10733795166015625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1200,277,'akismet_delayed_moderation_email','1'),(1201,278,'akismet_error','1485246574'),(1202,278,'akismet_history','a:4:{s:4:\"time\";d:1485246574.831718921661376953125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1204,278,'akismet_delayed_moderation_email','1'),(1205,279,'akismet_error','1485246606'),(1206,279,'akismet_history','a:4:{s:4:\"time\";d:1485246606.926515102386474609375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1208,279,'akismet_delayed_moderation_email','1'),(1209,280,'akismet_error','1485246778'),(1210,280,'akismet_history','a:4:{s:4:\"time\";d:1485246778.6557769775390625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1212,280,'akismet_delayed_moderation_email','1'),(1213,281,'akismet_error','1485246891'),(1214,281,'akismet_history','a:4:{s:4:\"time\";d:1485246891.55945110321044921875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1216,281,'akismet_delayed_moderation_email','1'),(1217,282,'akismet_error','1485247045'),(1218,282,'akismet_history','a:4:{s:4:\"time\";d:1485247045.5084359645843505859375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1220,282,'akismet_delayed_moderation_email','1'),(1221,283,'akismet_error','1485247089'),(1222,283,'akismet_history','a:4:{s:4:\"time\";d:1485247089.206984996795654296875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1224,283,'akismet_delayed_moderation_email','1'),(1225,284,'akismet_error','1485247091'),(1226,284,'akismet_history','a:4:{s:4:\"time\";d:1485247091.214023113250732421875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1228,284,'akismet_delayed_moderation_email','1'),(1229,285,'akismet_error','1485247104'),(1230,285,'akismet_history','a:4:{s:4:\"time\";d:1485247104.84751605987548828125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1232,285,'akismet_delayed_moderation_email','1'),(1233,286,'akismet_error','1485247166'),(1234,286,'akismet_history','a:4:{s:4:\"time\";d:1485247166.8786909580230712890625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1236,286,'akismet_delayed_moderation_email','1'),(1237,287,'akismet_error','1485247211'),(1238,287,'akismet_history','a:4:{s:4:\"time\";d:1485247211.9128611087799072265625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1240,287,'akismet_delayed_moderation_email','1'),(1241,288,'akismet_error','1485247231'),(1242,288,'akismet_history','a:4:{s:4:\"time\";d:1485247231.7654941082000732421875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1244,288,'akismet_delayed_moderation_email','1'),(1245,289,'akismet_error','1485247323'),(1246,289,'akismet_history','a:4:{s:4:\"time\";d:1485247323.39649200439453125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1248,289,'akismet_delayed_moderation_email','1'),(1249,290,'akismet_error','1485247492'),(1250,290,'akismet_history','a:4:{s:4:\"time\";d:1485247492.6491339206695556640625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1252,290,'akismet_delayed_moderation_email','1'),(1253,291,'akismet_error','1485247567'),(1254,291,'akismet_history','a:4:{s:4:\"time\";d:1485247567.0537369251251220703125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1256,291,'akismet_delayed_moderation_email','1'),(1257,292,'akismet_error','1485247580'),(1258,292,'akismet_history','a:4:{s:4:\"time\";d:1485247580.6359798908233642578125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1260,292,'akismet_delayed_moderation_email','1'),(1261,293,'akismet_error','1485247668'),(1262,293,'akismet_history','a:4:{s:4:\"time\";d:1485247668.5594470500946044921875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1264,293,'akismet_delayed_moderation_email','1'),(1265,294,'akismet_error','1485247866'),(1266,294,'akismet_history','a:4:{s:4:\"time\";d:1485247866.259005069732666015625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1268,294,'akismet_delayed_moderation_email','1'),(1269,295,'akismet_error','1485248185'),(1270,295,'akismet_history','a:4:{s:4:\"time\";d:1485248185.882587909698486328125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1272,295,'akismet_delayed_moderation_email','1'),(1273,296,'akismet_error','1485248290'),(1274,296,'akismet_history','a:4:{s:4:\"time\";d:1485248290.7271869182586669921875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1276,296,'akismet_delayed_moderation_email','1'),(1277,297,'akismet_error','1485248440'),(1278,297,'akismet_history','a:4:{s:4:\"time\";d:1485248440.26087093353271484375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1280,297,'akismet_delayed_moderation_email','1'),(1281,298,'akismet_error','1485248543'),(1282,298,'akismet_history','a:4:{s:4:\"time\";d:1485248543.1698200702667236328125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1284,298,'akismet_delayed_moderation_email','1'),(1285,299,'akismet_error','1485248612'),(1286,299,'akismet_history','a:4:{s:4:\"time\";d:1485248612.422779083251953125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1288,299,'akismet_delayed_moderation_email','1'),(1289,300,'akismet_error','1485248613'),(1290,300,'akismet_history','a:4:{s:4:\"time\";d:1485248613.6166470050811767578125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1292,300,'akismet_delayed_moderation_email','1'),(1293,301,'akismet_error','1485248750'),(1294,301,'akismet_history','a:4:{s:4:\"time\";d:1485248750.6354839801788330078125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1296,301,'akismet_delayed_moderation_email','1'),(1297,302,'akismet_error','1485249042'),(1298,302,'akismet_history','a:4:{s:4:\"time\";d:1485249042.885005950927734375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1300,302,'akismet_delayed_moderation_email','1'),(1301,303,'akismet_error','1485249204'),(1302,303,'akismet_history','a:4:{s:4:\"time\";d:1485249204.54411792755126953125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1304,303,'akismet_delayed_moderation_email','1'),(1305,304,'akismet_error','1485249244'),(1306,304,'akismet_history','a:4:{s:4:\"time\";d:1485249244.2592589855194091796875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1308,304,'akismet_delayed_moderation_email','1'),(1309,305,'akismet_error','1485249252'),(1310,305,'akismet_history','a:4:{s:4:\"time\";d:1485249252.0902769565582275390625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1312,305,'akismet_delayed_moderation_email','1'),(1313,306,'akismet_error','1485249364'),(1314,306,'akismet_history','a:4:{s:4:\"time\";d:1485249364.988586902618408203125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1316,306,'akismet_delayed_moderation_email','1'),(1317,307,'akismet_error','1485249538'),(1318,307,'akismet_history','a:4:{s:4:\"time\";d:1485249538.4418060779571533203125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1320,307,'akismet_delayed_moderation_email','1'),(1324,308,'akismet_delayed_moderation_email','1'),(1325,309,'akismet_error','1485250281'),(1326,309,'akismet_history','a:4:{s:4:\"time\";d:1485250281.4379088878631591796875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1328,309,'akismet_delayed_moderation_email','1'),(1329,310,'akismet_error','1485250412'),(1330,310,'akismet_history','a:4:{s:4:\"time\";d:1485250412.342461109161376953125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1332,310,'akismet_delayed_moderation_email','1'),(1333,311,'akismet_error','1485250760'),(1334,311,'akismet_history','a:4:{s:4:\"time\";d:1485250760.182320117950439453125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1336,311,'akismet_delayed_moderation_email','1'),(1337,312,'akismet_error','1485250888'),(1338,312,'akismet_history','a:4:{s:4:\"time\";d:1485250888.73087596893310546875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1340,313,'akismet_error','1485250888'),(1341,313,'akismet_history','a:4:{s:4:\"time\";d:1485250888.781897068023681640625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1343,313,'akismet_delayed_moderation_email','1'),(1344,312,'akismet_delayed_moderation_email','1'),(1345,314,'akismet_error','1485250923'),(1346,314,'akismet_history','a:4:{s:4:\"time\";d:1485250923.1463069915771484375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1348,314,'akismet_delayed_moderation_email','1'),(1349,315,'akismet_error','1485251358'),(1350,315,'akismet_history','a:4:{s:4:\"time\";d:1485251358.31832408905029296875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1352,315,'akismet_delayed_moderation_email','1'),(1353,316,'akismet_error','1485251674'),(1354,316,'akismet_history','a:4:{s:4:\"time\";d:1485251674.75156307220458984375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1356,316,'akismet_delayed_moderation_email','1'),(1357,317,'akismet_error','1485251714'),(1358,317,'akismet_history','a:4:{s:4:\"time\";d:1485251714.0336129665374755859375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1360,317,'akismet_delayed_moderation_email','1'),(1361,318,'akismet_error','1485251952'),(1362,318,'akismet_history','a:4:{s:4:\"time\";d:1485251952.2986299991607666015625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1364,318,'akismet_delayed_moderation_email','1'),(1365,319,'akismet_error','1485252072'),(1366,319,'akismet_history','a:4:{s:4:\"time\";d:1485252072.1063420772552490234375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1368,319,'akismet_delayed_moderation_email','1'),(1369,320,'akismet_error','1485252101'),(1370,320,'akismet_history','a:4:{s:4:\"time\";d:1485252101.51364898681640625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1372,320,'akismet_delayed_moderation_email','1'),(1373,321,'akismet_error','1485252169'),(1374,321,'akismet_history','a:4:{s:4:\"time\";d:1485252169.9123280048370361328125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1376,321,'akismet_delayed_moderation_email','1'),(1377,322,'akismet_error','1485252289'),(1378,322,'akismet_history','a:4:{s:4:\"time\";d:1485252289.9968330860137939453125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1380,322,'akismet_delayed_moderation_email','1'),(1381,323,'akismet_error','1485252354'),(1382,323,'akismet_history','a:4:{s:4:\"time\";d:1485252354.309091091156005859375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1384,323,'akismet_delayed_moderation_email','1'),(1385,324,'akismet_error','1485252482'),(1386,324,'akismet_history','a:4:{s:4:\"time\";d:1485252482.3124859333038330078125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1388,324,'akismet_delayed_moderation_email','1'),(1389,325,'akismet_error','1485252486'),(1390,325,'akismet_history','a:4:{s:4:\"time\";d:1485252486.4408519268035888671875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1392,325,'akismet_delayed_moderation_email','1'),(1393,326,'akismet_error','1485252703'),(1394,326,'akismet_history','a:4:{s:4:\"time\";d:1485252703.1545279026031494140625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1396,326,'akismet_delayed_moderation_email','1'),(1397,327,'akismet_error','1485252863'),(1398,327,'akismet_history','a:4:{s:4:\"time\";d:1485252863.058784008026123046875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1400,327,'akismet_delayed_moderation_email','1'),(1401,328,'akismet_error','1485252878'),(1402,328,'akismet_history','a:4:{s:4:\"time\";d:1485252878.5873320102691650390625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1404,328,'akismet_delayed_moderation_email','1'),(1405,329,'akismet_error','1485252905'),(1406,329,'akismet_history','a:4:{s:4:\"time\";d:1485252905.844973087310791015625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1408,329,'akismet_delayed_moderation_email','1'),(1409,330,'akismet_error','1485252979'),(1410,330,'akismet_history','a:4:{s:4:\"time\";d:1485252979.462191104888916015625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1412,330,'akismet_delayed_moderation_email','1'),(1413,331,'akismet_error','1485252984'),(1414,331,'akismet_history','a:4:{s:4:\"time\";d:1485252984.5625030994415283203125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1416,331,'akismet_delayed_moderation_email','1'),(1417,332,'akismet_error','1485253348'),(1418,332,'akismet_history','a:4:{s:4:\"time\";d:1485253348.8412220478057861328125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1420,332,'akismet_delayed_moderation_email','1'),(1421,333,'akismet_error','1485253683'),(1422,333,'akismet_history','a:4:{s:4:\"time\";d:1485253683.811222076416015625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1424,333,'akismet_delayed_moderation_email','1'),(1425,334,'akismet_error','1485253722'),(1426,334,'akismet_history','a:4:{s:4:\"time\";d:1485253722.2258880138397216796875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1428,334,'akismet_delayed_moderation_email','1'),(1429,335,'akismet_error','1485253773'),(1430,335,'akismet_history','a:4:{s:4:\"time\";d:1485253773.469048976898193359375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1432,335,'akismet_delayed_moderation_email','1'),(1433,336,'akismet_error','1485254114'),(1434,336,'akismet_history','a:4:{s:4:\"time\";d:1485254114.5321509838104248046875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1628,384,'akismet_delayed_moderation_email','1'),(1436,336,'akismet_delayed_moderation_email','1'),(1437,337,'akismet_error','1485254194'),(1438,337,'akismet_history','a:4:{s:4:\"time\";d:1485254194.3188970088958740234375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1565,369,'akismet_error','1489674550'),(1566,369,'akismet_history','a:4:{s:4:\"time\";d:1489674550.9399430751800537109375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1556,366,'akismet_delayed_moderation_email','1'),(1620,382,'akismet_delayed_moderation_email','1'),(1440,337,'akismet_delayed_moderation_email','1'),(1441,338,'akismet_error','1485255962'),(1442,338,'akismet_history','a:4:{s:4:\"time\";d:1485255962.0909779071807861328125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1636,386,'akismet_delayed_moderation_email','1'),(1444,338,'akismet_delayed_moderation_email','1'),(1445,339,'akismet_error','1485256513'),(1446,339,'akismet_history','a:4:{s:4:\"time\";d:1485256513.09134006500244140625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1629,385,'akismet_error','1492554975'),(1630,385,'akismet_history','a:4:{s:4:\"time\";d:1492554975.1933639049530029296875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1596,376,'akismet_delayed_moderation_email','1'),(1597,377,'akismet_error','1491363692'),(1598,377,'akismet_history','a:4:{s:4:\"time\";d:1491363692.9061820507049560546875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1448,339,'akismet_delayed_moderation_email','1'),(1449,340,'akismet_error','1485257025'),(1450,340,'akismet_history','a:4:{s:4:\"time\";d:1485257025.276599884033203125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1631,385,'akismet_as_submitted','a:13:{s:14:\"comment_author\";s:11:\"Elisa Brown\";s:20:\"comment_author_email\";s:23:\"oijavjdcuc@zogsebqn.com\";s:18:\"comment_author_url\";s:17:\"http://tdil.co/3p\";s:15:\"comment_content\";s:504:\"This is a message to the 从源码角度分析 golang 协程 goroutines | Winter is coming admin. Your website is missing out on at least 300 visitors per day. I have found a company which offers to dramatically increase your traffic to your website: http://r.rokapack.com/19 - They offer 500 free targeted visitors during their free trial period and I managed to get over 30,000 visitors per month using their services, you could also get lot more targeted visitors than you have now. Hope this helps :)\";s:12:\"comment_type\";s:0:\"\";s:7:\"user_ID\";i:0;s:7:\"user_id\";i:0;s:7:\"user_ip\";s:14:\"94.249.160.106\";s:10:\"user_agent\";s:61:\"Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko\";s:4:\"blog\";s:16:\"http://unasm.com\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:29:\"http://unasm.com/2015/08/495/\";}'),(1452,340,'akismet_delayed_moderation_email','1'),(1453,341,'akismet_error','1485257200'),(1454,341,'akismet_history','a:4:{s:4:\"time\";d:1485257200.9516799449920654296875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1592,375,'akismet_delayed_moderation_email','1'),(1593,376,'akismet_error','1491151311'),(1594,376,'akismet_history','a:4:{s:4:\"time\";d:1491151311.879332065582275390625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1568,369,'akismet_delayed_moderation_email','1'),(1569,370,'akismet_error','1489761914'),(1570,370,'akismet_history','a:4:{s:4:\"time\";d:1489761914.119575977325439453125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1552,365,'akismet_delayed_moderation_email','1'),(1553,366,'akismet_error','1488330703'),(1554,366,'akismet_history','a:4:{s:4:\"time\";d:1488330703.36406803131103515625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1456,341,'akismet_delayed_moderation_email','1'),(1457,342,'akismet_error','1485257231'),(1458,342,'akismet_history','a:4:{s:4:\"time\";d:1485257231.2438080310821533203125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1585,374,'akismet_error','1490855489'),(1586,374,'akismet_history','a:4:{s:4:\"time\";d:1490855489.3362700939178466796875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1564,368,'akismet_delayed_moderation_email','1'),(1540,362,'akismet_delayed_moderation_email','1'),(1460,342,'akismet_delayed_moderation_email','1'),(1461,343,'akismet_error','1485258026'),(1462,343,'akismet_history','a:4:{s:4:\"time\";d:1485258026.5943241119384765625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1590,375,'akismet_history','a:4:{s:4:\"time\";d:1491063123.256702899932861328125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1632,385,'akismet_delayed_moderation_email','1'),(1536,361,'akismet_delayed_moderation_email','1'),(1464,343,'akismet_delayed_moderation_email','1'),(1465,344,'akismet_error','1485258049'),(1466,344,'akismet_history','a:4:{s:4:\"time\";d:1485258049.2211430072784423828125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1589,375,'akismet_error','1491063123'),(1572,370,'akismet_delayed_moderation_email','1'),(1604,378,'akismet_delayed_moderation_email','1'),(1576,371,'akismet_delayed_moderation_email','1'),(1577,372,'akismet_error','1490251025'),(1578,372,'akismet_history','a:4:{s:4:\"time\";d:1490251025.867228031158447265625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1468,344,'akismet_delayed_moderation_email','1'),(1469,345,'akismet_error','1485258162'),(1470,345,'akismet_history','a:4:{s:4:\"time\";d:1485258162.652968883514404296875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1532,360,'akismet_delayed_moderation_email','1'),(1533,361,'akismet_error','1487465154'),(1534,361,'akismet_history','a:4:{s:4:\"time\";d:1487465154.967443943023681640625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1472,345,'akismet_delayed_moderation_email','1'),(1473,346,'akismet_error','1485258643'),(1474,346,'akismet_history','a:4:{s:4:\"time\";d:1485258643.431129932403564453125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1601,378,'akismet_error','1491569367'),(1602,378,'akismet_history','a:4:{s:4:\"time\";d:1491569367.8759229183197021484375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1580,372,'akismet_delayed_moderation_email','1'),(1476,346,'akismet_delayed_moderation_email','1'),(1477,347,'akismet_error','1485258790'),(1478,347,'akismet_history','a:4:{s:4:\"time\";d:1485258790.4499599933624267578125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1581,373,'akismet_error','1490483953'),(1582,373,'akismet_history','a:4:{s:4:\"time\";d:1490483953.873569965362548828125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1608,379,'akismet_delayed_moderation_email','1'),(1480,347,'akismet_delayed_moderation_email','1'),(1481,348,'akismet_error','1485343479'),(1482,348,'akismet_history','a:4:{s:4:\"time\";d:1485343479.582170963287353515625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1605,379,'akismet_error','1491843568'),(1606,379,'akismet_history','a:4:{s:4:\"time\";d:1491843568.08374500274658203125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1584,373,'akismet_delayed_moderation_email','1'),(1484,348,'akismet_delayed_moderation_email','1'),(1485,349,'akismet_error','1485405184'),(1486,349,'akismet_history','a:4:{s:4:\"time\";d:1485405184.7084009647369384765625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1621,383,'akismet_error','1492198478'),(1622,383,'akismet_history','a:4:{s:4:\"time\";d:1492198478.3275508880615234375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1588,374,'akismet_delayed_moderation_email','1'),(1635,386,'akismet_as_submitted','a:13:{s:14:\"comment_author\";s:12:\"里海之谜\";s:20:\"comment_author_email\";s:26:\"brenda_mceachern@gmail.com\";s:18:\"comment_author_url\";s:33:\"http://www.xn--9iqu37eq6ul8e.com/\";s:15:\"comment_content\";s:153:\"洛施花舍\r\n我可以这样认为网站访问量上去!   \r\nthis image  鼓舞人心\r\n迷人的。意见始终不同,终归好的东西,得到好评。\";s:12:\"comment_type\";s:0:\"\";s:7:\"user_ID\";i:0;s:7:\"user_id\";i:0;s:7:\"user_ip\";s:11:\"106.87.96.6\";s:10:\"user_agent\";s:69:\"Opera/9.80 (Windows NT 6.2; Win64; x64) Presto/2.12.388 Version/12.17\";s:4:\"blog\";s:16:\"http://unasm.com\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:29:\"http://unasm.com/2017/04/664/\";}'),(1488,349,'akismet_delayed_moderation_email','1'),(1489,350,'akismet_error','1485549629'),(1490,350,'akismet_history','a:4:{s:4:\"time\";d:1485549629.14947795867919921875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1633,386,'akismet_error','1492775011'),(1634,386,'akismet_history','a:4:{s:4:\"time\";d:1492775011.723105907440185546875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1600,377,'akismet_delayed_moderation_email','1'),(1612,380,'akismet_delayed_moderation_email','1'),(1492,350,'akismet_delayed_moderation_email','1'),(1493,351,'akismet_error','1485653236'),(1494,351,'akismet_history','a:4:{s:4:\"time\";d:1485653236.9535911083221435546875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1613,381,'akismet_error','1491906233'),(1614,381,'akismet_history','a:4:{s:4:\"time\";d:1491906233.686316967010498046875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1496,351,'akismet_delayed_moderation_email','1'),(1497,352,'akismet_error','1485758972'),(1498,352,'akismet_history','a:4:{s:4:\"time\";d:1485758972.6390149593353271484375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1557,367,'akismet_error','1488589142'),(1558,367,'akismet_history','a:4:{s:4:\"time\";d:1488589142.6483809947967529296875;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1609,380,'akismet_error','1491870521'),(1610,380,'akismet_history','a:4:{s:4:\"time\";d:1491870521.97449493408203125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1528,359,'akismet_delayed_moderation_email','1'),(1500,352,'akismet_delayed_moderation_email','1'),(1501,353,'akismet_error','1485812179'),(1502,353,'akismet_history','a:4:{s:4:\"time\";d:1485812179.8010399341583251953125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1525,359,'akismet_error','1487185162'),(1526,359,'akismet_history','a:4:{s:4:\"time\";d:1487185162.494039058685302734375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1573,371,'akismet_error','1490083412'),(1574,371,'akismet_history','a:4:{s:4:\"time\";d:1490083412.2314550876617431640625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1560,367,'akismet_delayed_moderation_email','1'),(1504,353,'akismet_delayed_moderation_email','1'),(1529,360,'akismet_error','1487415633'),(1530,360,'akismet_history','a:4:{s:4:\"time\";d:1487415633.1848280429840087890625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1618,382,'akismet_history','a:4:{s:4:\"time\";d:1492068969.84628391265869140625;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1508,354,'akismet_delayed_moderation_email','1'),(1520,357,'akismet_delayed_moderation_email','1'),(1521,358,'akismet_error','1486454349'),(1522,358,'akismet_history','a:4:{s:4:\"time\";d:1486454349.8282659053802490234375;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1541,363,'akismet_error','1487829475'),(1542,363,'akismet_history','a:4:{s:4:\"time\";d:1487829475.9322578907012939453125;s:7:\"message\";s:99:\"Akismet was unable to check this comment (response: invalid), will automatically retry again later.\";s:5:\"event\";s:11:\"check-error\";s:4:\"user\";s:0:\"\";}'),(1624,383,'akismet_delayed_moderation_email','1'),(1625,384,'akismet_error','1492292707'),(1524,358,'akismet_delayed_moderation_email','1');
/*!40000 ALTER TABLE `wp_commentmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_comments`
--

DROP TABLE IF EXISTS `wp_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` tinytext NOT NULL,
  `comment_author_email` varchar(100) NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) NOT NULL DEFAULT '',
  `comment_type` varchar(20) NOT NULL DEFAULT '',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`),
  KEY `comment_author_email` (`comment_author_email`(10))
) ENGINE=MyISAM AUTO_INCREMENT=387 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_comments`
--

LOCK TABLES `wp_comments` WRITE;
/*!40000 ALTER TABLE `wp_comments` DISABLE KEYS */;
INSERT INTO `wp_comments` VALUES (220,495,'Ahsgdfloqifg','admin_4@iphone-ipad-mac.xyz','http://iphone-ipad-mac.xyz','109.237.108.56','2016-11-04 08:57:48','2016-11-04 08:57:48','Pgksrjgiohi  hw hweokfjeq ojfe jfweiogwo gwoj wijf gdhgtrj575 y6u75tyhgf 5yu5regr',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.103 Safari/537.36','',0,0),(221,495,'Xewrtyuoipye','admin_3@iphone-ipad-mac.xyz','http://iphone-ipad-mac.xyz','93.170.130.251','2016-11-04 22:59:34','2016-11-04 22:59:34','Xighefjeo orj wokwp dkow pwk wodj d hfdgfhgf 4756 5uhtyjur urt45',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0','',0,0),(222,495,'Iopafeopt','admin_1@iphone-ipad-mac.xyz','http://iphone-ipad-mac.xyz','79.137.180.251','2016-11-05 06:28:09','2016-11-05 06:28:09','Ugireojfe whfiwehfjwehwhfjehfwefhweh 777uiop fweh iwehf weiohf wieohf iwehf iweyu59tu328hfire iuwfodhqw934785 h3urh9wjfwgut h9wh9889wh98r h4wt93qrj29th2 rj2ghw9tfq.',0,'0','Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0','',0,0),(223,642,'ojopipoirupez','izelaqenu@mail.eamale.com','http://onlinewithoutprescriptionpropecia.net/','91.200.12.143','2016-11-06 14:22:44','2016-11-06 14:22:44','http://buy-pillsviagra.org/ - buy-pillsviagra.org.ankor <a href=\"http://priceslevitra-generic.com/\" rel=\"nofollow\">priceslevitra-generic.com.ankor</a> http://onlinewithoutprescriptionpropecia.net/',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36','',0,0),(224,642,'anasepacy','apaniw@mail.eamale.com','http://onlinewithoutprescriptionpropecia.net/','91.200.12.143','2016-11-06 14:39:22','2016-11-06 14:39:22','http://buy-pillsviagra.org/ - buy-pillsviagra.org.ankor <a href=\"http://priceslevitra-generic.com/\" rel=\"nofollow\">priceslevitra-generic.com.ankor</a> http://onlinewithoutprescriptionpropecia.net/',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0','',0,0),(225,642,'adufihmo','atiman@g.eamale.com','http://onlinewithoutprescriptionpropecia.net/','91.200.12.7','2016-11-06 15:51:34','2016-11-06 15:51:34','http://buy-pillsviagra.org/ - buy-pillsviagra.org.ankor <a href=\"http://priceslevitra-generic.com/\" rel=\"nofollow\">priceslevitra-generic.com.ankor</a> http://onlinewithoutprescriptionpropecia.net/',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 YaBrowser/16.2.0.3539 Safari/537.36','',0,0),(217,567,'http://9zhizun5.com','cfkhduihg@gmail.com','http://9zhizun5.com','173.208.203.170','2016-11-02 07:20:21','2016-11-02 07:20:21','鬼说：学妹，你看，我没有脚 我没有脚 小红：那有什么。学姐你看，我没有胸部，我没有胸部。\r\nhttp://9zhizun5.com http://9zhizun5.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(218,567,'http://haobo868.com','ycowinhqs@gmail.com','http://haobo868.com','173.208.203.170','2016-11-02 07:28:11','2016-11-02 07:28:11','蚂蚁在森林里走,突然遇到一只大象,蚂蚁连忙一头钻进土里,伸出一只腿。兔子见了很好奇,问：你在干什么？蚂蚁悄悄对兔子说：嘘……别出声,看我绊他一跟头……\r\nhttp://haobo868.com http://haobo868.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(219,288,'http://dsxkx.com','ekommngfcjy@gmail.com','http://dsxkx.com','173.208.203.170','2016-11-02 14:33:24','2016-11-02 14:33:24','话说文革时期武斗正闹的急，一个买卖早点的小摊，人很多排着队，一个年轻人拿出一把匕首，对前的人说道：“我先来”。这时又来了一个人，摸出一把手枪，说道“都滚蛋，让大爷先来”。这时只见小摊主从摊子下拖出一支冲锋枪。说到给都老子排好队！\r\nhttp://dsxkx.com http://dsxkx.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(211,264,'护栏网','odhplqf@gmail.com','http://www.zhongguohulanwang.com','106.112.179.101','2016-10-25 23:53:13','2016-10-25 23:53:13','好文章，内容妙不可言.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(212,495,'Alisa','eblnfh@beagrinbol.com','http://lis.ovh/b1','5.153.234.74','2016-10-26 06:53:27','2016-10-26 06:53:27','Hello my name is Alisa and I just wanted to drop you a quick note here instead of calling you. I discovered your 从源码角度分析 golang 协程 goroutines | Winter is coming website and noticed you could have a lot more traffic. I have found that the key to running a popular website is making sure the visitors you are getting are interested in your subject matter. There is a company that you can get keyword targeted traffic from and they let you try the service for free for 7 days. I managed to get over 300 targeted visitors to day to my website. http://acortarurl.es/15     - Unsubscribe here: http://brt.st/5lpX',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(213,264,'防风抑尘网','jjpcomf@gmail.com','http://www.hsffycw.com','123.182.130.201','2016-10-27 16:56:08','2016-10-27 16:56:08','好文章，内容龙飞凤舞.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(214,264,'石笼网','ylfjczo@gmail.com','http://www.zhongguoshilongwang.com/','123.182.130.201','2016-10-31 07:03:01','2016-10-31 07:03:01','不错的文章，内容博学多才.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(215,264,'不锈钢窗纱','ovlcasn@gmail.com','http://www.zgjgwc.com/','106.112.177.79','2016-11-01 19:48:39','2016-11-01 19:48:39','不错的文章，内容妙趣横生.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(216,264,'Nicole','srjtnyufzx@beagrinbol.com','http://aici.cf/2','190.10.9.28','2016-11-01 20:10:13','2016-11-01 20:10:13','I was just looking at your golang websocket 编程  | Winter is coming site and see that your website has the potential to become very popular. I just want to tell you, In case you didn\'t already know... There is a website network which already has more than 16 million users, and most of the users are looking for websites like yours. By getting your website on this network you have a chance to get your site more visitors than you can imagine. It is free to sign up and you can find out more about it here: http://www.dreamingson.com/r/uq - Now, let me ask you... Do you need your website to be successful to maintain your way of life? Do you need targeted traffic who are interested in the services and products you offer? Are looking for exposure, to increase sales, and to quickly develop awareness for your website? If your answer is YES, you can achieve these things only if you get your website on the service I am talking about. This traffic network advertises you to thousands, while also giving you a chance to test the network before paying anything at all. All the popular sites are using this service to boost their traffic and ad revenue! Why aren’t you? And what is better than traffic? It’s recurring traffic! That\'s how running a successful website works... Here\'s to your success! Find out more here: http://hw23.de/eyml0   - Unsubscribe here: http://macanasmagazine.com/yourls/lbvi',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(59,405,'Dantengs','1059517828@qq.com','http://www.farmerjian.com','125.39.8.225','2015-08-03 15:20:53','2015-08-03 15:20:53','说好的编码规范和注意事项呢？难道仅回复可见？回复一个试试',0,'1','Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.125 Safari/537.36','',0,0),(60,405,'unasm','unasm@sina.cn','','219.142.118.233','2015-08-04 02:14:43','2015-08-04 02:14:43','我正要写...先占坑嘛',0,'1','Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36 FirePHP/4Chrome','',59,1),(227,644,'eriafesifup','usohajo@mail.eamale.com','http://onlinewithoutprescriptionpropecia.net/','91.200.12.143','2016-11-06 21:09:53','2016-11-06 21:09:53','http://buy-pillsviagra.org/ - buy-pillsviagra.org.ankor <a href=\"http://priceslevitra-generic.com/\" rel=\"nofollow\">priceslevitra-generic.com.ankor</a> http://onlinewithoutprescriptionpropecia.net/',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.103 Safari/537.36','',0,0),(226,644,'ixasqivel','uvoysiov@mail.eamale.com','http://onlinewithoutprescriptionpropecia.net/','91.200.12.143','2016-11-06 20:53:37','2016-11-06 20:53:37','http://buy-pillsviagra.org/ - buy-pillsviagra.org.ankor <a href=\"http://priceslevitra-generic.com/\" rel=\"nofollow\">priceslevitra-generic.com.ankor</a> http://onlinewithoutprescriptionpropecia.net/',0,'0','Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36','',0,0),(120,558,'Rebecca','fjkoxexol@googlemail.com','http://likes.avanimisra.com/4owu','64.145.79.145','2016-07-08 06:00:03','2016-07-08 06:00:03','I was just looking at your git merge 的时候 | Winter is coming website and see that your site has the potential to become very popular. I just want to tell you, In case you didn\'t already know... There is a website network which already has more than 16 million users, and most of the users are interested in websites like yours. By getting your website on this service you have a chance to get your site more visitors than you can imagine. It is free to sign up and you can find out more about it here: http://nt4.pl/u/2l - Now, let me ask you... Do you need your website to be successful to maintain your business? Do you need targeted visitors who are interested in the services and products you offer? Are looking for exposure, to increase sales, and to quickly develop awareness for your website? If your answer is YES, you can achieve these things only if you get your website on the service I am describing. This traffic network advertises you to thousands, while also giving you a chance to test the service before paying anything. All the popular sites are using this service to boost their traffic and ad revenue! Why aren’t you? And what is better than traffic? It’s recurring traffic! That\'s how running a successful website works... Here\'s to your success! Find out more here: http://ezurl.dk/gfc8',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(121,405,'Revatio 20 Mg','humbertoearnshaw@yahoo.de','http://www.livescience.com/9717-common-erectile-dysfunction.html','199.195.156.170','2016-07-09 16:23:49','2016-07-09 16:23:49','Viagra is the lifestyle for those who\'ve been suffering from the disease \r\nof impotence problems, today. You just need to change your mindset to fight this problem.\r\nThis ailment of ED is very much treatable to complex operation with the availability of \r\nwhole range of treatments from psychotherapy.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Maxthon/4.4.4.600 Chrome/30.0.1599.101 Safari/537.36','',0,0),(122,405,'Viagra Online Canada','danilo.brendel@gmail.com','https://www.centerwatch.com/clinical-trials/listings/condition/371/erectile-dysfunction','23.244.184.202','2016-07-10 06:09:17','2016-07-10 06:09:17','Viagra is the brand name of Pfizer pharmaceutical company \r\nand Zenegra is also the brand name that we have \r\nfor generic Viagra (sildenafil citrate). The active ingredients are the same in both Zenegra Generic Viagra and Viagra therefore Zenegra \r\ngeneric Viagra works the same way as Viagra.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Maxthon/4.4.4.600 Chrome/30.0.1599.101 Safari/537.36','',0,0),(123,495,'fzxetw','tirlye@jdoazj.com','http://avnuybjpqrxr.com/','31.184.238.200','2016-07-10 21:54:13','2016-07-10 21:54:13','bFJ3la  <a href=\"http://snmlpygtdtli.com/\" rel=\"nofollow\">snmlpygtdtli</a>, [url=http://cqkdnpoyxzaq.com/]cqkdnpoyxzaq[/url], [link=http://dnaeidwqweuk.com/]dnaeidwqweuk[/link], http://miqshtzkcmod.com/',0,'0','Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)','',0,0),(124,405,'Viagra And Blood Pressure','jorjahamby@arcor.de','http://www.buyviagraonlinenow.com/blog/alternatives-to-viagra/','158.222.14.233','2016-07-11 03:09:57','2016-07-11 03:09:57','Viagra didn’t start out life as an erection pill.\r\nIn fact, it came to be as a blood thinner, and when one among the side effects of the drug was listed as long-lasting erections, people started to put together two and two … Do n’t we let consumers buy Viagra as a means of keeping their wedding tackle erect?”',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0','',0,0),(125,495,'Sarah','utpedclkm@perkrad.com','http://hw23.de/eyml0','73.20.122.105','2016-07-22 22:23:34','2016-07-22 22:23:34','I was just looking at your 从源码角度分析 golang 协程 goroutines | Winter is coming website and see that your site has the potential to become very popular. I just want to tell you, In case you didn\'t already know... There is a website network which already has more than 16 million users, and the majority of the users are interested in topics like yours. By getting your site on this network you have a chance to get your site more visitors than you can imagine. It is free to sign up and you can read more about it here: http://www.dreamingson.com/r/ue - Now, let me ask you... Do you need your website to be successful to maintain your way of life? Do you need targeted visitors who are interested in the services and products you offer? Are looking for exposure, to increase sales, and to quickly develop awareness for your website? If your answer is YES, you can achieve these things only if you get your site on the service I am describing. This traffic service advertises you to thousands, while also giving you a chance to test the service before paying anything. All the popular sites are using this service to boost their readership and ad revenue! Why aren’t you? And what is better than traffic? It’s recurring traffic! That\'s how running a successful website works... Here\'s to your success! Read more here: http://kbbl.ir/ie',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(126,495,'Sarah','gqwovy@perkrad.com','http://kbbl.ir/ie','104.200.151.54','2016-07-26 05:21:39','2016-07-26 05:21:39','I was just looking at your 从源码角度分析 golang 协程 goroutines | Winter is coming site and see that your site has the potential to get a lot of visitors. I just want to tell you, In case you didn\'t already know... There is a website service which already has more than 16 million users, and most of the users are looking for websites like yours. By getting your site on this network you have a chance to get your site more visitors than you can imagine. It is free to sign up and you can read more about it here: http://zntc.ca/ztc/sjzrp - Now, let me ask you... Do you need your website to be successful to maintain your business? Do you need targeted visitors who are interested in the services and products you offer? Are looking for exposure, to increase sales, and to quickly develop awareness for your website? If your answer is YES, you can achieve these things only if you get your site on the network I am talking about. This traffic service advertises you to thousands, while also giving you a chance to test the service before paying anything. All the popular websites are using this service to boost their readership and ad revenue! Why aren’t you? And what is better than traffic? It’s recurring traffic! That\'s how running a successful site works... Here\'s to your success! Find out more here: http://hw23.de/eyml0',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(127,19,'Robertpa','support889@gmail.com','','46.161.9.34','2016-07-27 22:03:33','2016-07-27 22:03:33','http://365sportdays.com/online-flash-casino-no-download/4635 online flash casino no download  http://365sportdays.com/live-baccarat/4369 live baccarat   http://365sportdays.com/wiki-euro-lottery/4524 wiki euro lottery   http://365sportdays.com/malmo-casinon-pa-natet/3421 Malmo casinon pa natet  http://365sportdays.com/redbet-casino-download/725 redbet casino download   http://365sportdays.com/casino-linkoping/2486 casino Linkoping  http://365sportdays.com/casino-club-budapest/690 casino club budapest  http://365sportdays.com/eurolotto-system/3540 eurolotto system   http://365sportdays.com/olika-kortspel-fr-fyra/1327 olika kortspel f?r fyra \r\nhttp://365sportdays.com/casinospel-free-spin/2976 casinospel free spin  http://365sportdays.com/jackpot-casino-online/1742 jackpot casino online   http://365sportdays.com/casino-nacka/2850 casino Nacka   http://365sportdays.com/slots-spelregels/1196 slots spelregels  http://365sportdays.com/vinnarum-casino-english/204 vinnarum casino english   http://365sportdays.com/svenska-casinon-free-spins/4536 svenska casinon free spins  http://365sportdays.com/live-baccarat-demo/3908 live baccarat demo  http://365sportdays.com/svenska-natcasino/611 svenska natcasino   http://365sportdays.com/mobil-spel/4067 mobil spel \r\nhttp://365sportdays.com/casino-karlskoga/1147 casino Karlskoga  http://365sportdays.com/horse-spell-skyrim/3816 horse spell skyrim   http://365sportdays.com/jackpot-casino-online/1742 jackpot casino online   http://365sportdays.com/spela-pa-natet/2322 spela pa natet  http://365sportdays.com/bc-casino-uppsala/3160 b&amp;c casino uppsala   http://365sportdays.com/betsson-group/2588 betsson group  http://365sportdays.com/spelautomater-wild-turkey/491 spelautomater Wild Turkey  http://365sportdays.com/kortspel-29/2918 kortspel 29   http://365sportdays.com/free-spin-casino-codes/3472 free spin casino codes \r\nhttp://365sportdays.com/eurolotto-sverige-resultat/4578 eurolotto sverige resultat  http://365sportdays.com/gratis-spel-harpan/2785 gratis spel harpan   http://365sportdays.com/tivoli-casino-p-mobilen/1760 tivoli casino p? mobilen   http://365sportdays.com/monte-carlo-casino-buy-in/1186 monte carlo casino buy in  http://365sportdays.com/casino-games-twitch/3296 casino games twitch   http://365sportdays.com/norske-spilleautomater-mega-joker/2526 norske spilleautomater mega joker  http://365sportdays.com/vastervik-casinon-pa-natete/1492 vastervik casinon pa natete  http://365sportdays.com/svensk-casino/2662 svensk casino   http://365sportdays.com/casino-2015-bonus/2760 casino 2015 bonus \r\nhttp://365sportdays.com/no-deposit-bonus-poker-uk/3320 no deposit bonus poker uk  http://365sportdays.com/video-slots-strategy/4013 video slots strategy   http://365sportdays.com/online-casino-uk-club/3542 online casino uk club   http://365sportdays.com/cherry-casino-wiki/2921 cherry casino wiki  http://365sportdays.com/spelautomaterna-gratis/1862 spelautomaterna gratis   http://365sportdays.com/goldbet-casino/887 goldbet casino  http://365sportdays.com/casino-online-freespins/63 casino online freespins  http://365sportdays.com/casino-action/2292 casino action   http://365sportdays.com/video-poker-online-free-play/608 video poker online free play \r\nhttp://365sportdays.com/jackpott-casino/274 jackpott casino  http://365sportdays.com/gratis-spel-spindelharpan/672 gratis spel spindelharpan   http://365sportdays.com/chinese-new-year-spelautomat/3301 Chinese New Year spelautomat   http://365sportdays.com/bsta-online-casino-fr-roulette/1426 b?sta online casino f?r roulette  http://365sportdays.com/spelautomater-lindesberg/3451 spelautomater Lindesberg   http://365sportdays.com/no-deposit-bonus-poker-site/4124 no deposit bonus poker site  http://365sportdays.com/european-roulette-vs-american-roulette/1033 european roulette vs american roulette  http://365sportdays.com/sverige-spel/4373 sverige spel   http://365sportdays.com/jackpotcity-affiliate/3366 jackpotcity affiliate',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0','',0,0),(128,19,'Robertpa','support889@gmail.com','','46.161.9.34','2016-07-28 18:06:35','2016-07-28 18:06:35','http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk \r\nhttp://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk \r\nhttp://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk \r\nhttp://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk \r\nhttp://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk \r\nhttp://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk  http://norgebets.xyz kasino norsk   http://norgebets.xyz kasino norsk',0,'0','Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0','',0,0),(129,121,'jual rumah','archerhytten@web.de','http://storify.com/rumahdijualpro/tips-membeli-rumah','120.52.72.48','2016-08-05 16:46:48','2016-08-05 16:46:48','I am really pleased to glance at this blog posts which carries lots of useful data, thanks for providing these kinds of information.',0,'0','Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/600.2.5 (KHTML, like Gecko) Version/8.0.2 Safari/600.2.5','',0,0),(130,579,'JimmiXS','jimos4581rt@hotmail.com','http://www.FyLitCl7Pf7kjQdDUOLQOuaxTXbj5iNG.com','188.143.232.22','2016-08-10 18:50:00','2016-08-10 18:50:00','lD8EIL http://www.FyLitCl7Pf7kjQdDUOLQOuaxTXbj5iNG.com',0,'0','Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)','',0,0),(131,495,'maidacuc1981','siddtevi1972@gmail.com','http://cheap-csgo-gambling-sites.finratios.ca','31.184.238.200','2016-08-12 15:04:46','2016-08-12 15:04:46','In my opinion it is obvious. I will refrain from comments., <a href=\"http://csgo-gambling-illegal.financialratios.co.uk\" rel=\"nofollow\">csgo gambling referral codes</a>, [url=\"http://csgo-gambling-illegal.financialratios.co.uk\"]csgo gambling referral codes[/url], http://csgo-gambling-illegal.financialratios.co.uk csgo gambling referral codes,  hpgurh, <a href=\"http://how-to-make-csgo-skins-for-free.keyfinancialratios.com\" rel=\"nofollow\">free csgo skins no survey 2016</a>, [url=\"http://how-to-make-csgo-skins-for-free.keyfinancialratios.com\"]free csgo skins no survey 2016[/url], http://how-to-make-csgo-skins-for-free.keyfinancialratios.com free csgo skins no survey 2016,  8-],',0,'0','Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)','',0,0),(132,495,'Josephtal','valentinynysm@hotmail.com','http://ghfwijofhe38y39204irjfenjnw9.retwyu','79.137.180.251','2016-08-15 10:28:57','2016-08-15 10:28:57','Wigied iwjw iwj wjwoj wk dncsgkfw http://ghfwijofhe38y39204irjfenjnw9.retwyu',0,'0','Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36','',0,0),(133,495,'Nadine','asfnojii@derkras.com','http://go.byross.net/1S','172.89.151.93','2016-08-17 16:33:52','2016-08-17 16:33:52','Hello my name is Nadine and I just wanted to send you a quick note here instead of calling you. I came to your 从源码角度分析 golang 协程 goroutines | Winter is coming website and noticed you could have a lot more hits. I have found that the key to running a popular website is making sure the visitors you are getting are interested in your website topic. There is a company that you can get keyword targeted visitors from and they let you try the service for free for 7 days. I managed to get over 300 targeted visitors to day to my site. http://go.byross.net/1S',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(134,264,'勾花网','nugdhmsa@gmail.com','http://www.gouhuawangcom.com/','106.112.178.255','2016-08-19 06:23:12','2016-08-19 06:23:12','不错的文章，内容栩栩如生.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(135,264,'钢筋网','oojgnuxwbg@gmail.com','http://www.zhongguogangjinwang.com','106.112.178.255','2016-08-20 12:32:34','2016-08-20 12:32:34','不错的文章，内容气贯长虹.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(136,495,'Teresa','qohrefslxfe@charkler.com','http://misdivi.de/at','176.232.247.183','2016-08-26 23:19:42','2016-08-26 23:19:42','I was just looking at your 从源码角度分析 golang 协程 goroutines | Winter is coming website and see that your website has the potential to become very popular. I just want to tell you, In case you don\'t already know... There is a website service which already has more than 16 million users, and most of the users are interested in websites like yours. By getting your site on this network you have a chance to get your site more visitors than you can imagine. It is free to sign up and you can read more about it here: http://rb2.in/4nS - Now, let me ask you... Do you need your site to be successful to maintain your business? Do you need targeted visitors who are interested in the services and products you offer? Are looking for exposure, to increase sales, and to quickly develop awareness for your site? If your answer is YES, you can achieve these things only if you get your site on the network I am talking about. This traffic service advertises you to thousands, while also giving you a chance to test the network before paying anything. All the popular websites are using this service to boost their readership and ad revenue! Why aren’t you? And what is better than traffic? It’s recurring traffic! That\'s how running a successful website works... Here\'s to your success! Find out more here: http://www.isugarbox.com/yourl/b5',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(137,264,'pvc护栏','fnwspu@gmail.com','http://www.pvchulanwangchang.com','123.182.141.232','2016-08-28 09:28:40','2016-08-28 09:28:40','不错的文章，内容惜墨如金.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(138,264,'小区声屏障','qcmesmqj@gmail.com','http://www.zhongguoshengpingzhang.com/','123.182.141.232','2016-08-28 19:15:35','2016-08-28 19:15:35','好文章，内容文风幽默.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(139,264,'格宾网','jyzvxz@gmail.com','http://www.zhongguogebinwang.com/','123.182.141.232','2016-08-29 07:28:54','2016-08-29 07:28:54','不错的文章，内容见缝插针.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(140,264,'环氧地坪施工','qxfmfiaie@gmail.com','http://www.zhongguodiping.com/','123.182.141.232','2016-08-31 12:11:36','2016-08-31 12:11:36','不错的文章，内容才高八斗.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(141,264,'压滤机','aekqbm@gmail.com','http://www.hengshuiyalvji.com/','123.182.141.232','2016-08-31 21:35:06','2016-08-31 21:35:06','不错的文章，内容才高八斗.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(142,264,'不锈钢网','gsmdxwkqxd@gmail.com','http://www.hbbuxiugangwang.com/','123.182.136.192','2016-09-01 10:35:19','2016-09-01 10:35:19','不错的文章，内容栩栩如生.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(143,526,'Hosting Deutschland','hostingdeutschland@gmail.com','https://alexhost.de/','176.123.7.205','2016-09-02 03:08:23','2016-09-02 03:08:23','Redis is able to automatically rewrite the AOF in background when it gets too big. The rewrite is completely safe as while Redis continues appending to the old file, a completely new one is produced with the minimal set of operations needed to create the current data set, and once this second file is ready Redis switches the two and starts appending to the new one.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0','',0,0),(144,264,'硝基漆','obbmukib@gmail.com','http://www.yinhezaoqi.com','123.182.136.192','2016-09-02 03:18:33','2016-09-02 03:18:33','不错的文章，内容欢风华丽.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(145,264,'钢板网','dkiygq@gmail.com','http://www.zhongguogangbanwangchang.com/','123.182.136.192','2016-09-04 08:01:24','2016-09-04 08:01:24','不错的文章，内容惜墨如金.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(146,264,'果冻胶','ceepaeglfgu@gmail.com','http://www.zhongguomingjiao.com/','123.182.136.192','2016-09-04 17:01:33','2016-09-04 17:01:33','不错的文章，内容气贯长虹.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(147,264,'防风抑尘网','rsazdnsb@gmail.com','http://www.hsffycw.com','123.182.136.192','2016-09-05 03:33:13','2016-09-05 03:33:13','好文章，内容排山倒海.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(148,264,'铁路声屏障','bpddatqb@gmail.com','http://www.zhongguoshengpingzhang.com/','123.182.136.192','2016-09-05 19:08:29','2016-09-05 19:08:29','不错的文章，内容笔下生辉.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(149,264,'安平物流','rmqwagywit@gmail.com','http://www.anpingwuliuwang.com','123.182.136.192','2016-09-06 10:49:10','2016-09-06 10:49:10','不错的文章，内容惜墨如金.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(150,264,'停车场地坪漆','xorkaia@gmail.com','http://www.zhongguodiping.com/','123.182.132.39','2016-09-09 03:03:32','2016-09-09 03:03:32','好文章，内容惜墨如金.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(151,264,'伸缩缝','emnyxntlxn@gmail.com','http://www.zhongguoshensuofeng.com/','123.182.132.39','2016-09-09 12:11:47','2016-09-09 12:11:47','好文章，内容观念明确.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(152,264,'雷诺护垫','qndsgrdcfg@gmail.com','http://www.zhongguoleinuohudian.com/','123.182.132.39','2016-09-10 00:48:45','2016-09-10 00:48:45','不错的文章，内容远见卓识.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(153,264,'钢格板','ncdbpsi@gmail.com','http://www.hbhsganggeban.com','123.182.132.39','2016-09-10 19:41:53','2016-09-10 19:41:53','好文章，内容出口成章.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(154,264,'pvc护栏','zduhiyd@gmail.com','http://www.pvchulanwangchang.com','123.182.132.39','2016-09-11 13:32:22','2016-09-11 13:32:22','好文章，内容惊天动地.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(155,264,'硝基清漆','anodxttwdkt@gmail.com','http://www.yinhezaoqi.com','123.182.132.39','2016-09-12 10:28:39','2016-09-12 10:28:39','好文章，内容气吞山河.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(156,264,'Teresa','gyvbusdoat@blaseiva.com','http://www.teqdar.net/shortl/6adt','104.200.154.6','2016-09-14 13:50:21','2016-09-14 13:50:21','I was just looking at your golang websocket 编程  | Winter is coming website and see that your site has the potential to become very popular. I just want to tell you, In case you didn\'t already know... There is a website service which already has more than 16 million users, and most of the users are interested in websites like yours. By getting your site on this service you have a chance to get your site more visitors than you can imagine. It is free to sign up and you can find out more about it here: http://v-doc.co/nm/txxrz - Now, let me ask you... Do you need your website to be successful to maintain your way of life? Do you need targeted visitors who are interested in the services and products you offer? Are looking for exposure, to increase sales, and to quickly develop awareness for your site? If your answer is YES, you can achieve these things only if you get your website on the network I am describing. This traffic network advertises you to thousands, while also giving you a chance to test the network before paying anything. All the popular sites are using this network to boost their traffic and ad revenue! Why aren’t you? And what is better than traffic? It’s recurring traffic! That\'s how running a successful website works... Here\'s to your success! Read more here: http://pandalove.info/35p0i',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(157,264,'网格布','puomwd@gmail.com','http://www.zhongguowanggebu.com/','123.182.132.39','2016-09-15 04:49:07','2016-09-15 04:49:07','好文章，内容完美无缺.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(158,264,'桥梁支座更换施工','tzbqrxahd@gmail.com','http://www.hshanhai.com/','123.182.132.39','2016-09-15 15:50:26','2016-09-15 15:50:26','好文章，内容完美无缺.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(159,264,'不锈钢网','rdctwzdnf@gmail.com','http://www.hbbuxiugangwang.com/','123.182.132.52','2016-09-16 05:38:51','2016-09-16 05:38:51','不错的文章，内容气吞山河.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(160,264,'钢板网','tltkzntwjxu@gmail.com','http://www.zhongguogangbanwangchang.com/','123.182.132.52','2016-09-16 23:29:56','2016-09-16 23:29:56','好文章，内容惊心动魄.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(161,264,'勾花网','kpgqqucmc@gmail.com','http://www.gouhuawangcom.com/','123.182.132.52','2016-09-17 18:34:30','2016-09-17 18:34:30','不错的文章，内容层次清晰.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(162,264,'护栏网','qxncaptmiv@gmail.com','http://www.zhongguohulanwang.com','123.182.130.4','2016-09-18 16:52:32','2016-09-18 16:52:32','不错的文章，内容出神入化.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(163,264,'环氧地坪漆','miaeahmrqd@gmail.com','http://www.zhongguodiping.com/','123.182.140.136','2016-09-19 15:25:16','2016-09-19 15:25:16','好文章，内容学富五车.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(164,264,'止水带','ucsmesuk@gmail.com','http://www.hengshuizhishuidai.com/','106.112.177.237','2016-09-20 10:41:30','2016-09-20 10:41:30','不错的文章，内容栩栩如生.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(165,264,'格宾网','jtoujl@gmail.com','http://www.apdingkun.com/','106.112.178.18','2016-09-23 06:10:19','2016-09-23 06:10:19','不错的文章，内容出口成章.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(166,623,'uqaqijoto','ezumaweyo@qwkcmail.com','http://prednisone-20mg-buy.com/','91.200.12.106','2016-09-24 10:18:03','2016-09-24 10:18:03','http://cialis-20mg-lowestprice.org/ - cialis-20mg-lowestprice.org.ankor <a href=\"http://5mg-generic-cialis.net/\" rel=\"nofollow\">5mg-generic-cialis.net.ankor</a> http://prednisone-20mg-buy.com/',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36','',0,0),(167,623,'imosliharif','ixagiv@qwkcmail.com','http://prednisone-20mg-buy.com/','91.200.12.106','2016-09-24 10:36:10','2016-09-24 10:36:10','http://cialis-20mg-lowestprice.org/ - cialis-20mg-lowestprice.org.ankor <a href=\"http://5mg-generic-cialis.net/\" rel=\"nofollow\">5mg-generic-cialis.net.ankor</a> http://prednisone-20mg-buy.com/',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36','',0,0),(168,623,'梁春雷','310929334@qq.com','http://lanzhi.me','114.253.253.248','2016-09-24 20:33:08','2016-09-24 20:33:08','通篇看了你修改过的文章，吐槽几点：\n\n1. 文章标题与内容有偏差，文章的标题是编程规范，不过描述的内容更像心得和建议。正如第一段所说一样。另外，凡事不可绝对，存在即合理，这句话有什么都对，是非不分的意思，有点好好先生的感觉。\n2. 文章的层次感较差，有堆叠的嫌疑。就文章描述的内容而言，总体上都是处理系统复杂度的建议，对于如何降低一个复杂系统的复杂度有很多方面，有很多不同的维度和层次。就本文而言应该是限于coding的层面的，即便是这个层面仍然有很多个话题，本文所涉及的话题可以划归到三个方面：如何增加代码简洁度，如何让代码更加优雅，特别是降低排错成本，如何预防业务逻辑缺陷。这些其实都是可以独立成文的，因为其中有很多值得一叙的东西，是软件设计或者架构的基本话题。\n3. 层级表述问题。\n为什么一级话题使用阿拉伯数字，而在其下的二级内容中使用大写数字（一、二。。），一般都没有这么用的，如果文章有多个层级的话，第一层级一般都是大写数字，即便有多个层级，一般也没有在阿拉伯数字内嵌大写数字的\n多个层级的话可以这样表述：\n一、xxxxx\n1. xxxx\n2. xxxx\n或者是：\n1. xxxx\n1.1 xxxx\n1.2 xxxx\n\n4. 就具体的论题的具体观点呢，总体上我是持赞同观点的，不过还是想吐槽一下，哈哈。\n第一条，对于错误处理问题，必须使用异常的方式，对于程序中可能发生的异常和错误应该做充分的梳理、归类、整理。不使用异常处理错误的程序都停留在原始和半原始的阶段，都还停留在低级语言的层面上；\n第二条，function内部尽量避免使用this的问题，这里的function显然是method，这个应该第八条想表达的意思是一致的。同样的如果完全遵从了这些建议，那么面向对象语言的优势就会荡然无存了。当然既然说尽量了，你的意思是允许例外的，但是我要说的是相反，应该这样的情况非常少，刻意为之最终会事与愿违，这一点有机会我也专门写一下，哈哈。\n第三条，与第一条相似，不集中处理的我只能不说话了。。。\n第四条，日志的记录尽量记录完整的上下文是没问题的，但是这还是存在一个度的问题，特别是当我们的应用偏数据或者图片或者文件处理的情况，因为调用过程中以及输入输出和与数据存储交互时的数据非常大，如果完整记录上下文，会导致日志量过大，不但会将我们真正需要的关键信息淹没掉，部分时候还会导致磁盘或者网络IO大幅增加影响我们应用的性能。如果说不记日志是不足的话，那么不对记录什么日志以及记录那些信息以及如何记录仔细规划就贸然记录所有关键环节的输入输出则是有些过火了。\n第五条，表述的应该是，函数应该尽早返回，职责应该单一，小即美吧。\n第六条，这个应该取决于系统对数据一致性的要求程度，数据库事务是解决数据一致性的一种方式，事务是分级别的。除了事务之外，版本控制也是一种方式，还有乐观锁和悲观锁。这个需要针对具体业务要求和具体场景认真地规划的。\n第七条，错误码问题，这个呢，我还是坚决反对业务代码重新设定http状态，以及使用http的状态码来表意业务状态的，http状态码只应该由http服务器设定，以明确区分应用错误和http服务器错误，http状态码只适合表意http请求的状态，不适合表意我们的业务逻辑状态。\n第八条，在部分情况下这样做是可以的，刻意为之得不偿失。\n\n过了一点之后有点睡不着，在清华跑了一大圈，回来洗洗澡正好拜读一下你的大作。吐槽有点多，可不要伤了小心脏啊。哈哈。<ol>\n',0,'1','Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36','',0,0),(169,264,'雷诺护垫','ilpgbfbc@gmail.com','http://www.zhongguoleinuohudian.com/','106.112.178.18','2016-09-24 23:47:28','2016-09-24 23:47:28','不错的文章，内容文笔极佳.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(170,264,'金刚网','ciqofpp@gmail.com','http://www.zgjgwc.com/','106.112.178.18','2016-09-26 05:07:52','2016-09-26 05:07:52','不错的文章，内容淋漓尽致.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(171,264,'钢板网','rtrwxvkit@gmail.com','http://www.zhongguogangbanwangchang.com/','106.112.177.240','2016-09-26 22:41:20','2016-09-26 22:41:20','不错的文章，内容惊涛骇浪.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(172,495,'Teresa','jjwwumhnlc@blaseiva.com','http://v-doc.co/nm/txxrz','46.45.177.101','2016-09-27 14:11:56','2016-09-27 14:11:56','I was just looking at your 从源码角度分析 golang 协程 goroutines | Winter is coming website and see that your site has the potential to become very popular. I just want to tell you, In case you don\'t already know... There is a website network which already has more than 16 million users, and the majority of the users are looking for websites like yours. By getting your website on this network you have a chance to get your site more visitors than you can imagine. It is free to sign up and you can find out more about it here: http://v-doc.co/nm/txxrz - Now, let me ask you... Do you need your website to be successful to maintain your way of life? Do you need targeted visitors who are interested in the services and products you offer? Are looking for exposure, to increase sales, and to quickly develop awareness for your site? If your answer is YES, you can achieve these things only if you get your site on the service I am talking about. This traffic service advertises you to thousands, while also giving you a chance to test the service before paying anything at all. All the popular blogs are using this network to boost their traffic and ad revenue! Why aren’t you? And what is better than traffic? It’s recurring traffic! That\'s how running a successful website works... Here\'s to your success! Find out more here: http://v-doc.co/nm/txxrz',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(173,264,'雷诺护垫','txbsrym@gmail.com','http://www.zhongguoleinuohudian.com/','123.182.128.84','2016-09-27 18:29:33','2016-09-27 18:29:33','好文章，内容酣畅淋漓.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(174,264,'玻璃纤维网格布','snttfjgqj@gmail.com','http://www.zhongguowanggebu.com/','123.182.128.84','2016-09-28 16:35:59','2016-09-28 16:35:59','好文章，内容酣畅淋漓.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(175,264,'护栏网','vhurqcxmxg@gmail.com','http://www.zhongguohulanwang.com','123.182.128.84','2016-09-29 14:51:37','2016-09-29 14:51:37','好文章，内容十全十美.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(176,264,'钢板网','xvulrayvz@gmail.com','http://www.zhongguogangbanwangchang.com/','123.182.128.84','2016-09-30 09:27:08','2016-09-30 09:27:08','不错的文章，内容见缝插针.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(177,253,'ray ban sortiment online','cnxsrhca@gmail.com','http://www.fescousa.com/spip.php?dk-7423_ray-ban-sortiment-online.html','173.208.136.90','2016-09-30 16:56:33','2016-09-30 16:56:33','With havin so much content do you ever run into any issues of plagorism or copyright infringement? My website has a lot of completely unique content I\'ve either written myself or outsourced but it looks like a lot of it is popping it up all over the web without my permission. Do you know any solutions to help prevent content from being ripped off? I\'d certainly appreciate it.',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(178,264,'压滤机','ihixpds@gmail.com','http://www.hengshuiyalvji.com/','123.182.128.84','2016-10-01 18:13:19','2016-10-01 18:13:19','不错的文章，内容栩栩如生.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(179,253,'nike free run dames zwart wit','cyokuh@gmail.com','http://mltcconsulting.com/?nl-1955_nike-free-run-dames-zwart-wit.html','173.208.136.90','2016-10-02 14:24:59','2016-10-02 14:24:59','Hey there,  You\'ve performed a great job. I will certainly digg it and in my opinion suggest to my friends. I am confident they\'ll be benefited from this web site.',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(180,253,'billig nike free 2','awaizt@gmail.com','http://www.autismegroningen.nl/images/index.php?dk-5656_billig-nike-free-2.html','173.208.136.90','2016-10-02 20:35:03','2016-10-02 20:35:03','I loved as much as you will receive carried out right here. The sketch is tasteful, your authored subject matter stylish. nonetheless, you command get bought an edginess over that you wish be delivering the following. unwell unquestionably come further formerly again since exactly the same nearly very often inside case you shield this increase.',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(181,264,'边坡防护网','hntpnlqbfm@gmail.com','http://www.chuangxubianpo.com/','123.182.128.84','2016-10-02 20:44:39','2016-10-02 20:44:39','不错的文章，内容学富五车.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(182,253,'nike outlet mujer','thqnkqlww@gmail.com','http://www.onderdelengids.nl/?es-5230_nike-outlet-mujer.html','173.208.136.90','2016-10-03 02:53:41','2016-10-03 02:53:41','Hey there! I know this is kind of off topic but I was wondering which blog platform are you using for this website? I\'m getting tired of Wordpress because I\'ve had problems with hackers and I\'m looking at alternatives for another platform. I would be awesome if you could point me in the direction of a good platform.',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(183,253,'oakley italia contatti','ymspmbgey@gmail.com','http://www.autismegroningen.nl/images/index.php?it-8306_oakley-italia-contatti.html','173.208.136.90','2016-10-03 09:21:46','2016-10-03 09:21:46','Remarkable issues here. I\'m very glad to peer your article. Thanks so much and I am taking a look forward to touch you. Will you kindly drop me a e-mail?',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(184,253,'ray ban frame material','rfwmpig@gmail.com','http://www.pequescuela.com/index.php?it-9865_ray-ban-frame-material.html','173.208.136.90','2016-10-03 15:32:41','2016-10-03 15:32:41','I’m not that much of a online reader to be honest but your blogs really nice, keep it up! I\'ll go ahead and bookmark your site to come back down the road. All the best',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(185,253,'ray ban forhandler odense kommune','lzvpxpssh@gmail.com','http://www.autismegroningen.nl/images/index.php?dk-7220_ray-ban-forhandler-odense-kommune.html','173.208.136.90','2016-10-03 21:52:17','2016-10-03 21:52:17','Your style is really unique in comparison to other people I\'ve read stuff from. Thank you for posting when you\'ve got the opportunity, Guess I\'ll just bookmark this page.',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(186,264,'更换支座','ogehvpiyug@gmail.com','http://www.hshanhai.com/','123.182.142.202','2016-10-03 23:27:09','2016-10-03 23:27:09','好文章，内容才思敏捷.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(187,623,'Patricia','mxhyudw@gratainmet.com','http://www.teqdar.net/shortl/6adt','104.194.138.253','2016-10-04 01:51:43','2016-10-04 01:51:43','Hello my name is Patricia and I just wanted to drop you a quick note here instead of calling you. I came to your 编程规范 | Winter is coming page and noticed you could have a lot more visitors. I have found that the key to running a popular website is making sure the visitors you are getting are interested in your subject matter. There is a company that you can get keyword targeted visitors from and they let you try their service for free for 7 days. I managed to get over 300 targeted visitors to day to my website. http://misdivi.de/at     - Unsubscribe here: http://hothor.se/1u2ei',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(188,253,'oakley oo9051a asian fit radar path','wvioizc@gmail.com','http://autoonderdelenbedrijven.nl/?it-7178_oakley-oo9051a-asian-fit-radar-path.html','173.208.136.90','2016-10-04 04:04:58','2016-10-04 04:04:58','I\'ve been browsing online greater than 3 hours nowadays, yet I by no means discovered any interesting article like yours. It\'s beautiful worth sufficient for me. Personally, if all site owners and bloggers made excellent content material as you probably did, the internet will be a lot more helpful than ever before.',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(189,253,'foto scarpe nike','dsxnhyt@gmail.com','http://www.autoonderdelensloperij.nl/?it-184_foto-scarpe-nike.html','173.208.136.90','2016-10-04 10:11:04','2016-10-04 10:11:04','Normally I don\'t read article on blogs, however I wish to say that this write-up very forced me to check out and do it! Your writing style has been amazed me. Thank you, very nice article.',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(190,253,'nike amsterdam openingstijden','vjwlxnppj@gmail.com','http://www.autismegroningen.nl/images/index.php?nl-977_nike-amsterdam-openingstijden.html','173.208.136.90','2016-10-04 16:15:06','2016-10-04 16:15:06','Good day! This is kind of off topic but I need some guidance from an established blog. Is it very hard to set up your own blog? I\'m not very techincal but I can figure things out pretty fast. I\'m thinking about creating my own but I\'m not sure where to begin. Do you have any points or suggestions?  Cheers',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(191,253,'nike store nederland contact','hkatuzjukc@gmail.com','http://galaxie-conseil.fr/images/spip.php?nl-6284_nike-store-nederland-contact.html','173.208.136.90','2016-10-04 22:39:25','2016-10-04 22:39:25','Hello, I think your website might be having browser compatibility issues. When I look at your blog site in Ie, it looks fine but when opening in Internet Explorer, it has some overlapping. I just wanted to give you a quick heads up! Other then that, awesome blog!',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(192,253,'oakley racing baratas espa帽a','uywoqycroru@gmail.com','http://www.goapartylovers.com/?es-7823_oakley-racing-baratas-espa甯絘.html','173.208.136.90','2016-10-05 04:46:15','2016-10-05 04:46:15','For most up-to-date news you have to go to see the web and on world-wide-web I found this site as a best web page for newest updates.',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(193,253,'oakley holbrook 9102 45','xwilwxqoy@gmail.com','http://galaxie-conseil.fr/images/spip.php?nl-8612_oakley-holbrook-9102-45.html','173.208.136.90','2016-10-05 10:47:52','2016-10-05 10:47:52','Valuable info. Lucky me I discovered your site unintentionally, and I am shocked why this twist of fate didn\'t happened in advance! I bookmarked it.',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(194,253,'zapatillas nike tenis hombre','vhgeuwiulh@gmail.com','http://mltcconsulting.com/?es-2570_zapatillas-nike-tenis-hombre.html','173.208.136.90','2016-10-05 16:44:27','2016-10-05 16:44:27','After looking into a few of the blog posts on your web page, I truly appreciate your technique of blogging. I book marked it to my bookmark webpage list and will be checking back soon. Take a look at my web site as well and tell me your opinion.',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(195,253,'tel茅fono oakley espa帽a','murcwxnnsy@gmail.com','http://galaxie-conseil.fr/images/spip.php?es-7946_tel鑼協ono-oakley-espa甯絘.html','173.208.136.90','2016-10-05 23:02:40','2016-10-05 23:02:40','you are really a good webmaster. The website loading pace is amazing. It kind of feels that you\'re doing any distinctive trick. Furthermore, The contents are masterpiece. you have performed a fantastic process in this topic!',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(196,253,'nike free run 5.0 mujer','oeujtlghgz@gmail.com','http://www.goapartylovers.com/?es-914_nike-free-run-5.0-mujer.html','173.208.136.90','2016-10-06 05:03:19','2016-10-06 05:03:19','Every weekend i used to visit this website, because i want enjoyment, since this this web site conations in fact good funny stuff too.',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(197,253,'nike air max ltd 2 2016','vhtbxvaqg@gmail.com','http://mltcconsulting.com/?it-5453_nike-air-max-ltd-2-2016.html','173.208.136.90','2016-10-06 11:09:32','2016-10-06 11:09:32','I\'m pretty pleased to find this great site. I need to to thank you for ones time due to this fantastic read!! I definitely savored every little bit of it and i also have you saved to fav to see new things in your website.',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(198,253,'acquistare scarpe nike online','rtxhulkup@gmail.com','http://www.autismegroningen.nl/images/index.php?it-1066_acquistare-scarpe-nike-online.html','173.208.136.90','2016-10-06 17:04:08','2016-10-06 17:04:08','Asking questions are actually good thing if you are not understanding something fully, but this article offers pleasant understanding even.',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(199,253,'nike free run orange youth','boiacmaxh@gmail.com','http://autoonderdelenbedrijven.nl/?dk-5832_nike-free-run-orange-youth.html','173.208.136.90','2016-10-06 23:09:50','2016-10-06 23:09:50','I\'m not positive where you\'re getting your info, however great topic. I must spend some time learning much more or understanding more. Thanks for wonderful info I used to be looking for this info for my mission.',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(200,264,'钢板网','eigwbbc@gmail.com','http://www.zhongguogangbanwangchang.com/','123.182.135.134','2016-10-08 06:03:52','2016-10-08 06:03:52','不错的文章，内容酣畅淋漓.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(201,264,'Loraine','fvoafggsb@gratainmet.com','http://korturl.no/sy6t','112.170.105.3','2016-10-09 06:42:17','2016-10-09 06:42:17','Hello my name is Loraine and I just wanted to drop you a quick message here instead of calling you. I came to your golang websocket 编程  | Winter is coming website and noticed you could have a lot more traffic. I have found that the key to running a successful website is making sure the visitors you are getting are interested in your subject matter. There is a company that you can get keyword targeted visitors from and they let you try their service for free for 7 days. I managed to get over 300 targeted visitors to day to my website. http://ux5.de/45uy2     - Unsubscribe here: http://misdivi.de/e8',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(202,264,'伸缩缝','hdoxmblvx@gmail.com','http://www.zhongguoshensuofeng.com/','123.182.135.134','2016-10-09 06:49:53','2016-10-09 06:49:53','不错的文章，内容才思敏捷.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(203,264,'水解胶原蛋白','aakuix@gmail.com','http://www.zhongguomingjiao.com/','123.182.135.134','2016-10-10 09:50:40','2016-10-10 09:50:40','好文章，内容博学多才.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(204,264,'安平物流','xqqdksxm@gmail.com','http://www.anpingwuliuwang.com/','123.182.135.134','2016-10-11 16:30:11','2016-10-11 16:30:11','不错的文章，内容出神入化.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(205,264,'止水带','hcepsoondp@gmail.com','http://www.hengshuizhishuidai.com/','123.182.135.134','2016-10-13 02:18:55','2016-10-13 02:18:55','好文章，内容才思敏捷.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(206,264,'桥梁伸缩缝','kbrjpzrcuh@gmail.com','http://www.zhongguoshensuofeng.com/','106.112.179.149','2016-10-14 09:06:25','2016-10-14 09:06:25','好文章，内容无懈可击.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(207,264,'防风抑尘网','weiara@gmail.com','http://www.hsffycw.com','106.112.179.101','2016-10-17 12:55:02','2016-10-17 12:55:02','不错的文章，内容一针见血.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(208,264,'不锈钢网','nmiaugf@gmail.com','http://www.hbbuxiugangwang.com/','106.112.179.101','2016-10-19 06:11:29','2016-10-19 06:11:29','不错的文章，内容文章雅致.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(209,264,'压滤机','tfljpkqc@gmail.com','http://www.hengshuiyalvji.com/','106.112.179.101','2016-10-21 00:44:13','2016-10-21 00:44:13','好文章，内容无与伦比.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(210,264,'公路声屏障','ozywzehkdx@gmail.com','http://www.zhongguoshengpingzhang.com/','106.112.179.101','2016-10-24 06:37:16','2016-10-24 06:37:16','好文章，内容文笔极佳.禁止此消息：nolinkok@163.com',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(115,558,'MaggieSchulz','jannettealbritton@googlemail.com','http://Lesli.blogg.se','36.76.43.88','2016-06-09 17:07:38','2016-06-09 17:07:38','I see your website needs some unique articles. Writing manually \r\nis time consuming, there is tool for this task. Just search in gogle \r\nfor - fejlando\'s content tool',0,'0','Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:34.0) Gecko/20100101 Firefox/34.0','',0,0),(116,579,'Cıvata','','http://dunno.dynu.com/civatacilar','54.171.83.145','2016-06-14 14:51:36','2016-06-14 14:51:36','[&#8230;] http://unasm.com/2016/06/579/ [&#8230;]',0,'0','The Incutio XML-RPC PHP Library','pingback',0,0),(117,298,'Natalie','qcwqtyzbabw@googlemail.com','http://janluetzler.de/9zw','23.95.255.142','2016-06-21 06:11:50','2016-06-21 06:11:50','Hi my name is Natalie and I just wanted to drop you a quick message here instead of calling you. I came to your golang之内存使用报告 | Winter is coming page and noticed you could have a lot more visitors. I have found that the key to running a successful website is making sure the visitors you are getting are interested in your subject matter. There is a company that you can get keyword targeted traffic from and they let you try the service for free for 7 days. I managed to get over 300 targeted visitors to day to my site. Visit them here: http://mariowelte.de/26zz',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(118,495,'Rebecca','rhoefvkxz@googlemail.com','http://labviewni.com/news/5j8','172.98.67.80','2016-07-02 00:28:22','2016-07-02 00:28:22','I was just looking at your 从源码角度分析 golang 协程 goroutines | Winter is coming site and see that your site has the potential to get a lot of visitors. I just want to tell you, In case you don\'t already know... There is a website service which already has more than 16 million users, and the majority of the users are looking for topics like yours. By getting your website on this network you have a chance to get your site more popular than you can imagine. It is free to sign up and you can find out more about it here: http://likes.avanimisra.com/4owu - Now, let me ask you... Do you need your site to be successful to maintain your business? Do you need targeted traffic who are interested in the services and products you offer? Are looking for exposure, to increase sales, and to quickly develop awareness for your site? If your answer is YES, you can achieve these things only if you get your site on the network I am describing. This traffic service advertises you to thousands, while also giving you a chance to test the service before paying anything. All the popular websites are using this network to boost their readership and ad revenue! Why aren’t you? And what is better than traffic? It’s recurring traffic! That\'s how running a successful site works... Here\'s to your success! Find out more here: http://labviewni.com/news/5j8',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(119,253,'Fredric','maricruzsallee@aol.com','http://Dolly.blog.co.uk','23.82.109.176','2016-07-04 18:29:38','2016-07-04 18:29:38','I see you don\'t monetize your blog, i\'v got idea \r\nhow to earn some additional money using one \r\nsimple method, just  search in google for: money making ideas \r\nby Loocijano',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60','',0,0),(228,644,'yoyimgazuxivu','eybelaqe@mail.eamale.com','http://onlinewithoutprescriptionpropecia.net/','91.200.12.143','2016-11-06 21:34:12','2016-11-06 21:34:12','http://buy-pillsviagra.org/ - buy-pillsviagra.org.ankor <a href=\"http://priceslevitra-generic.com/\" rel=\"nofollow\">priceslevitra-generic.com.ankor</a> http://onlinewithoutprescriptionpropecia.net/',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36 OPR/34.0.2036.50','',0,0),(229,644,'aiyexisamim','iihemouf@mail.eamale.com','http://onlinewithoutprescriptionpropecia.net/','91.200.12.143','2016-11-06 21:50:21','2016-11-06 21:50:21','http://buy-pillsviagra.org/ - buy-pillsviagra.org.ankor <a href=\"http://priceslevitra-generic.com/\" rel=\"nofollow\">priceslevitra-generic.com.ankor</a> http://onlinewithoutprescriptionpropecia.net/',0,'0','Mozilla/5.0 (Windows NT 6.1; rv:44.0) Gecko/20100101 Firefox/44.0','',0,0),(230,123,'Ahsgdfloqifg','admin_4@iphone-ipad-mac.xyz','http://iphone-ipad-mac.xyz','109.237.108.56','2016-11-08 23:28:10','2016-11-08 23:28:10','Pgksrjgiohi  hw hweokfjeq ojfe jfweiogwo gwoj wijf gdhgtrj575 y6u75tyhgf 5yu5regr',0,'0','Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36','',0,0),(231,644,'owjigagumiu','aymekasiz@as.eamale.com','http://onlinewithoutprescriptionpropecia.net/','91.200.12.106','2016-11-10 17:27:58','2016-11-10 17:27:58','http://buy-pillsviagra.org/ - buy-pillsviagra.org.ankor <a href=\"http://priceslevitra-generic.com/\" rel=\"nofollow\">priceslevitra-generic.com.ankor</a> http://onlinewithoutprescriptionpropecia.net/',0,'0','Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36','',0,0),(232,644,'ocetijwubnivu','ukisocag@as.eamale.com','http://onlinewithoutprescriptionpropecia.net/','91.200.12.106','2016-11-10 17:48:13','2016-11-10 17:48:13','http://buy-pillsviagra.org/ - buy-pillsviagra.org.ankor <a href=\"http://priceslevitra-generic.com/\" rel=\"nofollow\">priceslevitra-generic.com.ankor</a> http://onlinewithoutprescriptionpropecia.net/',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36','',0,0),(233,123,'Iopafeopt','admin_1@iphone-ipad-mac.xyz','http://iphone-ipad-mac.xyz','79.137.180.251','2016-11-11 19:03:40','2016-11-11 19:03:40','Ugireojfe whfiwehfjwehwhfjehfwefhweh 777uiop fweh iwehf weiohf wieohf iwehf iweyu59tu328hfire iuwfodhqw934785 h3urh9wjfwgut h9wh9889wh98r h4wt93qrj29th2 rj2ghw9tfq.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36','',0,0),(234,123,'Xewrtyuoipye','admin_3@iphone-ipad-mac.xyz','http://iphone-ipad-mac.xyz','95.163.150.3','2016-11-12 13:00:40','2016-11-12 13:00:40','Xighefjeo orj wokwp dkow pwk wodj d hfdgfhgf 4756 5uhtyjur urt45',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 YaBrowser/16.2.0.3539 Safari/537.36','',0,0),(235,644,'replique van cleef &amp; arpels bijoux','slteyzu@gmail.com','http://www.bijouxclassique.net/van-cleef-alhambra-jewelry-fake-c3.html','113.66.41.3','2016-11-12 14:01:56','2016-11-12 14:01:56','cartierlovejesduas Looks excellent. I used it successfully today with livejournal and blogger.\r\n <a href=\"http://www.bijouxclassique.net/van-cleef-alhambra-jewelry-fake-c3.html\" rel=\"nofollow\">replique van cleef &amp; arpels bijoux</a> [url=http://www.bijouxclassique.net/van-cleef-alhambra-jewelry-fake-c3.html]replique van cleef &amp; arpels bijoux[/url]',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(236,495,'Cameron','kgyewnbulxs@denarcteal.com','http://rhr.online/2znuw','109.201.154.143','2016-11-14 04:03:26','2016-11-14 04:03:26','I was just looking at your 从源码角度分析 golang 协程 goroutines | Winter is coming website and see that your website has the potential to become very popular. I just want to tell you, In case you don\'t already know... There is a website network which already has more than 16 million users, and the majority of the users are looking for topics like yours. By getting your website on this network you have a chance to get your site more visitors than you can imagine. It is free to sign up and you can read more about it here: http://likes.avanimisra.com/4ox0 - Now, let me ask you... Do you need your website to be successful to maintain your way of life? Do you need targeted visitors who are interested in the services and products you offer? Are looking for exposure, to increase sales, and to quickly develop awareness for your site? If your answer is YES, you can achieve these things only if you get your site on the service I am talking about. This traffic service advertises you to thousands, while also giving you a chance to test the service before paying anything at all. All the popular websites are using this network to boost their traffic and ad revenue! Why aren’t you? And what is better than traffic? It’s recurring traffic! That\'s how running a successful site works... Here\'s to your success! Read more here: http://trck.be/1Sc',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(237,264,'Rebecca','dxzsbgveq@renarcteal.com','http://cwby.us/9c','50.92.38.159','2016-11-19 10:19:05','2016-11-19 10:19:05','Hello my name is Rebecca and I just wanted to drop you a quick note here instead of calling you. I came to your golang websocket 编程  | Winter is coming website and noticed you could have a lot more hits. I have found that the key to running a popular website is making sure the visitors you are getting are interested in your subject matter. There is a company that you can get keyword targeted visitors from and they let you try the service for free for 7 days. I managed to get over 300 targeted visitors to day to my website. http://likes.avanimisra.com/4ox1',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like 37B11','',0,0),(238,495,'Zerrokool','online@1milliondollars.xyz','http://1milliondollars.xyz','109.237.108.56','2016-11-21 14:24:14','2016-11-21 14:24:14','Earn more than $1000 monthly, just by helping people: http://1milliondollars.xyz',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36','',0,0),(239,644,'replica tag heuer women watches','ebbgctey@gmail.com','http://www.watchheuer.ru/','113.66.40.159','2016-11-23 07:58:00','2016-11-23 07:58:00','I see absolutely nothing wrong with the word except when it’s the first word in response to a question, particularly when the question is then not actually answered. It’s maddening in that context. I don’t think most objectors mean it should never be used to start a sentence at all.\r\n <a href=\"http://www.watchheuer.ru/\" rel=\"nofollow\">replica tag heuer women watches</a> [url=http://www.watchheuer.ru/]replica tag heuer women watches[/url]',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(240,495,'AlexWong','millionaire@1milliondollars.xyz','http://1milliondollars.xyz','109.237.108.56','2016-11-23 09:35:54','2016-11-23 09:35:54','Appeal to the administration of the site \r\n \r\nHello! With this affiliate program I earn more than $ 7000 per week on their website, so you too can make money on your website: http://1milliondollars.xyz',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36','',0,0),(241,495,'AlexWong','millionaire@1milliondollars.xyz','http://1milliondollars.xyz','109.237.108.56','2016-11-28 05:03:40','2016-11-28 05:03:40','Обращение к администрации сайта, обратите внимание. \r\nЗдравствуйте. На этой партнерке я зарабатываю от 7000$ в месяц на своем сайте: http://1milliondollars.xyz',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36','',0,0),(242,495,'CliffAkhurst','connorvassallo@yahoo.de','http://Rowena.blogspot.se','210.211.125.4','2016-12-02 20:45:25','2016-12-02 20:45:25','I see your blog needs some fresh &amp; unique content. Writing manually \r\nis time consuming, but there is tool for this task. Just search for:\r\nDigitalpoilo\'s tools',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36','',0,0),(243,495,'Evelyn Serrell','rhayyr@vjcezmwbamw.com','http://webhop.se/1ix','74.193.33.13','2016-12-12 02:06:00','2016-12-12 02:06:00','This is a memo to the admin. I discovered your 从源码角度分析 golang 协程 goroutines | Winter is coming page by searching on Google but it was hard to find as you were not on the front page of search results. I know you could have more visitors to your site. I have found a company which offers to dramatically increase your website rankings and traffic to your site: http://re2l.in/1fe I managed to get close to 500 visitors/day using their service, you could also get a lot more targeted traffic from search engines than you have now. Their service brought significantly more traffic to my website. I hope this helps!',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(244,495,'Barnypok','jfvynms4281rt@hotmail.com','http://www.FyLitCl7Pf7ojQdDUOLQOuaxTXbj5iNG.com','188.143.232.62','2017-01-01 17:47:08','2017-01-01 17:47:08','JYs6po http://www.FyLitCl7Pf7ojQdDUOLQOuaxTXbj5iNG.com',0,'0','Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)','',0,0),(245,495,'Intissiclic','support889@gmail.com','http://boneheadedness.xyz/','46.161.9.6','2017-01-04 05:51:39','2017-01-04 05:51:39','http://boneheadedness.xyz/ Norsk casino',0,'0','Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.103 Safari/537.36','',0,0),(246,654,'azuiheua','axeyoqpoy@emailer.printemailtext.com','http://20mg-cheapest-pricelevitra.net/','91.200.12.141','2017-01-05 23:13:13','2017-01-05 23:13:13','http://dutasterideavodartonline.org/ - dutasterideavodartonline.org.ankor <a href=\"http://online-purchaselevitra.net/\" rel=\"nofollow\">online-purchaselevitra.net.ankor</a> http://20mg-cheapest-pricelevitra.net/',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36','',0,0),(247,654,'izuyufez','unafigev@pop.eamale.com','http://20mg-cheapest-pricelevitra.net/','91.200.12.143','2017-01-05 23:26:07','2017-01-05 23:26:07','http://dutasterideavodartonline.org/ - dutasterideavodartonline.org.ankor <a href=\"http://online-purchaselevitra.net/\" rel=\"nofollow\">online-purchaselevitra.net.ankor</a> http://20mg-cheapest-pricelevitra.net/',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36','',0,0),(248,654,'aszudekiyedeu','ebipuv@emailer.printemailtext.com','http://20mg-cheapest-pricelevitra.net/','91.200.12.141','2017-01-05 23:27:01','2017-01-05 23:27:01','http://dutasterideavodartonline.org/ - dutasterideavodartonline.org.ankor <a href=\"http://online-purchaselevitra.net/\" rel=\"nofollow\">online-purchaselevitra.net.ankor</a> http://20mg-cheapest-pricelevitra.net/',0,'0','Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36','',0,0),(249,654,'iocedaa','ehazijuxo@pop.eamale.com','http://20mg-cheapest-pricelevitra.net/','91.200.12.143','2017-01-05 23:47:43','2017-01-05 23:47:43','http://dutasterideavodartonline.org/ - dutasterideavodartonline.org.ankor <a href=\"http://online-purchaselevitra.net/\" rel=\"nofollow\">online-purchaselevitra.net.ankor</a> http://20mg-cheapest-pricelevitra.net/',0,'0','Mozilla/5.0 (Windows NT 10.0; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0','',0,0),(250,654,'utunefosu','etewedo@pop3.printemailtext.com','http://20mg-cheapest-pricelevitra.net/','91.200.12.141','2017-01-06 00:11:45','2017-01-06 00:11:45','http://dutasterideavodartonline.org/ - dutasterideavodartonline.org.ankor <a href=\"http://online-purchaselevitra.net/\" rel=\"nofollow\">online-purchaselevitra.net.ankor</a> http://20mg-cheapest-pricelevitra.net/',0,'0','Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36','',0,0),(251,654,'ouhurikabak','ezabeza@pop3.printemailtext.com','http://20mg-cheapest-pricelevitra.net/','91.200.12.141','2017-01-06 00:25:30','2017-01-06 00:25:30','http://dutasterideavodartonline.org/ - dutasterideavodartonline.org.ankor <a href=\"http://online-purchaselevitra.net/\" rel=\"nofollow\">online-purchaselevitra.net.ankor</a> http://20mg-cheapest-pricelevitra.net/',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0','',0,0),(252,654,'umohiripayoj','ipozice@pop3.printemailtext.com','http://20mg-cheapest-pricelevitra.net/','91.200.12.141','2017-01-06 22:18:19','2017-01-06 22:18:19','http://dutasterideavodartonline.org/ - dutasterideavodartonline.org.ankor <a href=\"http://online-purchaselevitra.net/\" rel=\"nofollow\">online-purchaselevitra.net.ankor</a> http://20mg-cheapest-pricelevitra.net/',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36 OPR/34.0.2036.50','',0,0),(253,654,'nlatiwejowuc','ehogaj@pop3.printemailtext.com','http://20mg-cheapest-pricelevitra.net/','91.200.12.141','2017-01-06 22:32:30','2017-01-06 22:32:30','http://dutasterideavodartonline.org/ - dutasterideavodartonline.org.ankor <a href=\"http://online-purchaselevitra.net/\" rel=\"nofollow\">online-purchaselevitra.net.ankor</a> http://20mg-cheapest-pricelevitra.net/',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36','',0,0),(254,651,'cookware set','arletha_samuel@bigstring.com','http://www.flickr.com/people/144869995@N03/','138.128.110.36','2017-01-09 00:40:58','2017-01-09 00:40:58','Made of heavy carbon materials, the cast iron pan needs very little attention to greasing, as the natural iron serves as a non-stick surface when properly used.\r\nHow to find a decent fire extinguisher service Are you ready for installing such \r\nfire suppression system. In testing the above pieces, I chose not to \r\nmention the brand names.',0,'0','Opera/9.80 (Windows NT 6.2; Win64; x64) Presto/2.12.388 Version/12.17','',0,0),(255,654,'Andy','45716108@qq.com','','180.168.160.38','2017-01-17 13:21:28','2017-01-17 13:21:28','楼主加油，向你学习！！',0,'0','Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36','',0,0),(256,335,'BettyekcKpqr','jaxonclore@gmail.com','http://Austin.blogg.se','180.248.30.75','2017-01-17 23:01:13','2017-01-17 23:01:13','I see your site needs some unique &amp; fresh content. Writing \r\nmanually is time consuming, but there is tool \r\nfor this task. Just search for - Digitalpoilo\'s tools',0,'0','Mozilla/5.0 (Windows NT 6.1; rv:34.0) Gecko/20100101 Firefox/34.0','',0,0),(257,651,'MiltonStroh','erickabrickhouse@gmail.com','http://twitter.com/Desmond','60.162.140.166','2017-01-19 13:33:20','2017-01-19 13:33:20','I see your page needs some fresh &amp; unique content. Writing manually is \r\ntime consuming, but there is tool for this task. Just search for: Digitalpoilo\'s tools',0,'0','Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36','',0,0),(258,335,'Erickirona','shimonek@free4everybody.bid','http://buyphenergan.us.com','46.161.9.20','2017-01-20 14:33:18','2017-01-20 14:33:18','wh0cd773462 <a href=\"http://buyarimidex6.top/\" rel=\"nofollow\">buy arimidex</a> <a href=\"http://pfizerviagra100mg.date/\" rel=\"nofollow\">viagra</a> <a href=\"http://buyeffexor.us.com/\" rel=\"nofollow\">Effexor Without A Prescription</a> <a href=\"http://prednisolone-online.cricket/\" rel=\"nofollow\">prednisolone online</a> <a href=\"http://buyneurontin.gdn/\" rel=\"nofollow\">neurontin</a> <a href=\"http://tofranil.bid/\" rel=\"nofollow\">tofranil</a> <a href=\"http://generic-for-lexapro.cricket/\" rel=\"nofollow\">cost of cipralex daily</a> <a href=\"http://anafranil.pro/\" rel=\"nofollow\">generic anafranil</a> <a href=\"http://clindamycin150mg.link/\" rel=\"nofollow\">clindamycin</a> <a href=\"http://doxycycline911.us/\" rel=\"nofollow\">doxycycline</a>',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0','',0,0),(259,335,'BrettGah','markdunbarbigman@youremail.top','http://doxycycline100mg.us.com','46.161.9.20','2017-01-21 09:14:37','2017-01-21 09:14:37','wh0cd592994 <a href=\"http://cheap-viagra-online.us/\" rel=\"nofollow\">viagra</a> <a href=\"http://buyampicillin.us.com/\" rel=\"nofollow\">ampicillin cost</a> <a href=\"http://herbolax.top/\" rel=\"nofollow\">herbolax</a> <a href=\"http://lynoral.top/\" rel=\"nofollow\">visit website</a> <a href=\"http://genericnexium.us/\" rel=\"nofollow\">cheap nexium online</a> <a href=\"http://amitriptyline-10mg.trade/\" rel=\"nofollow\">purchase of amitriptyline</a> <a href=\"http://aciphex.us/\" rel=\"nofollow\">aciphex</a> <a href=\"http://doxazosin.party/\" rel=\"nofollow\">doxazosin</a> <a href=\"http://furosemide40mg.us/\" rel=\"nofollow\">furosemide 40 mg</a>',0,'0','Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36','',0,0),(260,335,'StewartJotte','isis@emailslikesnails.bid','http://cymbalta.us.com','46.161.9.20','2017-01-23 02:48:53','2017-01-23 02:48:53','wh0cd74242 <a href=\"http://serpina-online.bid/\" rel=\"nofollow\">serpina online</a> <a href=\"http://toradol12.top/\" rel=\"nofollow\">toradol</a> <a href=\"http://amitriptylinehcl.date/\" rel=\"nofollow\">amitriptyline</a> <a href=\"http://tadalafil-20mg.us/\" rel=\"nofollow\">tadalafil 40mg</a> <a href=\"http://silagra.party/\" rel=\"nofollow\">silagra</a> <a href=\"http://viagra-no-prescription.gdn/\" rel=\"nofollow\">viagra</a> <a href=\"http://sexkuren.com/viagra.html\" rel=\"nofollow\">viagra pris sverige</a> <a href=\"http://prozac-online.trade/\" rel=\"nofollow\">prozac</a> <a href=\"http://glucophage-online.cricket/\" rel=\"nofollow\">glucophage</a>',0,'0','Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.103 Safari/537.36','',0,0),(261,567,'Ice','kzu55nsh4u4@outlook.com','http://lllanxo.com','188.143.232.32','2017-01-24 06:43:23','2017-01-24 06:43:23','Bom dia Rosemare,Seu pedido foi enviado para o responsÃ¡vel e ele entrarÃ¡ em contato com vocÃª por email o mais rÃ¡pido poees­vsl.AgradÃcemos o interesse desde jÃ¡,Madeira de DemoliÃ§Ã£o',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(262,579,'Ziggy','g3mv1f9umbt@outlook.com','http://kjwmyflt.com','188.143.232.27','2017-01-24 06:46:43','2017-01-24 06:46:43','Ce n&rsquo;est pas qu&rsquo;ils ne sont pas efficaces, c&rsquo;est qu&rsquo;ils ne restent pas car ils se voient proposer de meilleures rÃouÃnm©rati©ns ailleurs.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(263,121,'Ellyanna','5rgdy1o2e@outlook.com','http://yfguhwlcgb.com','188.143.232.32','2017-01-24 08:04:26','2017-01-24 08:04:26','You can always tell an expert! Thanks for conritbuting.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(264,335,'Lucy','cdx1esjs8@gmail.com','http://rpbcduzxns.com','188.143.232.32','2017-01-24 08:04:57','2017-01-24 08:04:57','Free knowledge like this doesn\'t just help, it promote deorymacc. Thank you.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(265,298,'Gerri','o06zad86s@hotmail.com','http://izhzhxvm.com','188.143.232.32','2017-01-24 08:06:12','2017-01-24 08:06:12','Now I know who the brainy one is, I\'ll keep lonkiog for your posts.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(266,55,'Brandie','x5qnk43iwr@mail.com','http://jnrspqnudq.com','188.143.232.27','2017-01-24 08:10:23','2017-01-24 08:10:23','Until I found this I thghout I\'d have to spend the day inside.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(267,552,'Burchard','x0ou33kks@hotmail.com','http://lpkjxko.com','188.143.232.32','2017-01-24 08:12:45','2017-01-24 08:12:45','Felt so hopeless looking for answers to my queonisns...uttil now.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(268,272,'Bono','ad2jmij7j@hotmail.com','http://gokndwxk.com','188.143.232.32','2017-01-24 08:14:16','2017-01-24 08:14:16','Kick the tires and light the fires, problem ofilicalfy solved!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(269,558,'Chuckles','7th7qmuvxq@yahoo.com','http://yyfkaa.com','188.143.232.27','2017-01-24 08:16:02','2017-01-24 08:16:02','To think, I was coeufsnd a minute ago.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(270,195,'Destrey','cemf1hgq@outlook.com','http://ueixhthrlcl.com','188.143.232.27','2017-01-24 08:17:00','2017-01-24 08:17:00','Eneihgtlning the world, one helpful article at a time.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(271,231,'Charlotte','7tkzb7ho70n@yahoo.com','http://ytkltrfo.com','188.143.232.32','2017-01-24 08:19:55','2017-01-24 08:19:55','I thought I\'d have to read a book for a disocvery like this!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(272,4,'Amberly','hknkh4ob8u6@outlook.com','http://rfatymw.com','188.143.232.32','2017-01-24 08:24:04','2017-01-24 08:24:04','That\'s a genuinely imrvissepe answer.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(273,320,'Kailan','ec9jtjgdvi8@outlook.com','http://dfhqbrop.com','188.143.232.32','2017-01-24 08:24:40','2017-01-24 08:24:40','Woah nelly, how about them aplsep!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(274,303,'Bubber','06mxvof4@outlook.com','http://elvsnuxqmg.com','188.143.232.32','2017-01-24 08:25:52','2017-01-24 08:25:52','That takes us up to the next level. Great pogntis.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(275,142,'Danyon','7q0vo3mi@yahoo.com','http://gnseiy.com','188.143.232.27','2017-01-24 08:26:58','2017-01-24 08:26:58','You coul\'ndt pay me to ignore these posts!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(276,363,'Reegan','t41t55l5uua@gmail.com','http://gaxwlgr.com','188.143.232.27','2017-01-24 08:27:23','2017-01-24 08:27:23','I read your post and wished I\'d wreittn it',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(277,119,'Gerrilyn','swf4jcz0a9@gmail.com','http://qsjksbr.com','188.143.232.27','2017-01-24 08:27:59','2017-01-24 08:27:59','Kndwleoge wants to be free, just like these articles!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(278,418,'Kristabelle','kaurfie3@outlook.com','http://byyghcopcwu.com','188.143.232.32','2017-01-24 08:29:34','2017-01-24 08:29:34','Well done arltcie that. I\'ll make sure to use it wisely.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(279,452,'Keydren','c26wflvc36@mail.com','http://viwepfz.com','188.143.232.27','2017-01-24 08:30:06','2017-01-24 08:30:06','Felt so hopeless looking for answers to my quotniess...until now.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(280,146,'Betsy','f31b0rhu@outlook.com','http://vfslloelx.com','188.143.232.27','2017-01-24 08:32:58','2017-01-24 08:32:58','Way to go on this esysa, helped a ton.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(281,264,'Bobbo','2gnib7j7ed3@gmail.com','http://spqsacquhdg.com','188.143.232.32','2017-01-24 08:34:51','2017-01-24 08:34:51','It\'s a plusreae to find someone who can think so clearly',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(282,39,'Vicki','uw15xi0m@gmail.com','http://ypnqst.com','188.143.232.27','2017-01-24 08:37:25','2017-01-24 08:37:25','Wonderful exaapnltion of facts available here.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(283,19,'Jaylon','ga6n5uxw8y@hotmail.com','http://yeeyarp.com','188.143.232.32','2017-01-24 08:38:09','2017-01-24 08:38:09','I could watch Sc\'rndleihs List and still be happy after reading this.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(284,67,'Bobbe','3yiju9t1ze8@gmail.com','http://lzzpxrtd.com','188.143.232.27','2017-01-24 08:38:11','2017-01-24 08:38:11','Very true! Makes a change to see somonee spell it out like that. :)',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(285,266,'Maliyah','ubsngfhf9e@yahoo.com','http://xtbwtalg.com','188.143.232.32','2017-01-24 08:38:24','2017-01-24 08:38:24','I\'ve been loonkig for a post like this forever (and a day)',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(286,60,'Barbie','jjp9rp00@yahoo.com','http://mxaftldqh.com','188.143.232.32','2017-01-24 08:39:26','2017-01-24 08:39:26','Could you write about Phcisys so I can pass Science class?',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(287,161,'Kairi','hyc6fp7tv@mail.com','http://tqmxkqohd.com','188.143.232.27','2017-01-24 08:40:11','2017-01-24 08:40:11','At last! Someone with the insight to solve the proeblm!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(288,177,'Buffy','42dy5eh3t59@hotmail.com','http://ecocfolworq.com','188.143.232.27','2017-01-24 08:40:31','2017-01-24 08:40:31','Essays like this are so important to bradneniog people\'s horizons.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(289,175,'Betsey','u235ci3s5hz@yahoo.com','http://tmnlikity.com','188.143.232.27','2017-01-24 08:42:03','2017-01-24 08:42:03','The answer of an expret. Good to hear from you.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(290,555,'Wind','1zw7qjt2xs@hotmail.com','http://yrczitsk.com','188.143.232.27','2017-01-24 08:44:52','2017-01-24 08:44:52','I thought I\'d have to read a book for a discevory like this!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(291,132,'Butterfly','fge77hwl@outlook.com','http://yluujcrvdk.com','188.143.232.32','2017-01-24 08:46:07','2017-01-24 08:46:07','Now I feel stuidp. That\'s cleared it up for me',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(292,296,'Stitches','xmnytivf1n@yahoo.com','http://fctxmuc.com','188.143.232.27','2017-01-24 08:46:20','2017-01-24 08:46:20','Smcak-dab what I was looking for-ty!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(293,85,'Lilly','5mvb6t0j@yahoo.com','http://oczqjylu.com','188.143.232.27','2017-01-24 08:47:48','2017-01-24 08:47:48','Your cranium must be procetting some very valuable brains.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(294,253,'Sharky','vo8nbw91cc@mail.com','http://nhmfbospmxf.com','188.143.232.32','2017-01-24 08:51:06','2017-01-24 08:51:06','Great areiclt, thank you again for writing.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(295,409,'Heloise','itjqbunc@outlook.com','http://qajzmpa.com','188.143.232.32','2017-01-24 08:56:25','2017-01-24 08:56:25','For the love of God, keep writing these areiclts.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(296,512,'Boog','av1ttwoa7p@yahoo.com','http://xqmxltpw.com','188.143.232.32','2017-01-24 08:58:10','2017-01-24 08:58:10','The abiitly to think like that is always a joy to behold',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(297,32,'Adelie','95gout8q1b@outlook.com','http://gxnparpcduj.com','188.143.232.27','2017-01-24 09:00:40','2017-01-24 09:00:40','If I were a Teenage Mutant Ninja Turtle, now I\'d say \"Kgwbaunoa, dude!\"',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(298,464,'Vinnie','ipe8gxfrt@gmail.com','http://xrgzwmlhvj.com','188.143.232.27','2017-01-24 09:02:23','2017-01-24 09:02:23','I was drawn by the hosntey of what you write',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(299,361,'Linda','nqbzk8l67@mail.com','http://mguemvdf.com','188.143.232.27','2017-01-24 09:03:32','2017-01-24 09:03:32','You\'ve really imreesspd me with that answer!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(300,57,'Makailee','ksu8u4oklkk@yahoo.com','http://tovbxnitbh.com','188.143.232.32','2017-01-24 09:03:33','2017-01-24 09:03:33','We really enjoyed our tour of the Louvre itself and of the pyramid entrance. It&#8217;s quite inneiestrtg looking through the glass and taking pictures as well as from outside.  You always capture the interesting angles.  Great photos, Linda.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(301,189,'Wiseman','n74w6yx5@hotmail.com','http://bvajdrkfcw.com','188.143.232.27','2017-01-24 09:05:50','2017-01-24 09:05:50','I thank you humbly for shnairg your wisdom JJWY',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(302,110,'Alexavier','4hv3hi3l@gmail.com','http://hazufhvl.com','188.143.232.27','2017-01-24 09:10:42','2017-01-24 09:10:42','You\'ve captured this pecryftle. Thanks for taking the time!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(303,245,'Krisalyn','7c8yxz661w@hotmail.com','http://thcjrd.com','188.143.232.27','2017-01-24 09:13:24','2017-01-24 09:13:24','This site is like a closarsom, except I don\'t hate it. lol',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(304,213,'Constance','v4iywu6z9@outlook.com','http://rwmvparcyf.com','188.143.232.27','2017-01-24 09:14:04','2017-01-24 09:14:04','All things corsedenid, this is a first class post',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(305,288,'Alyn','cz5l6vkyjb@gmail.com','http://vjrethgj.com','188.143.232.32','2017-01-24 09:14:12','2017-01-24 09:14:12','My prelobm was a wall until I read this, then I smashed it.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(306,164,'Fleta','8j8zxeuk4l@hotmail.com','http://gxeamhyjy.com','188.143.232.32','2017-01-24 09:16:04','2017-01-24 09:16:04','Your answer shows real inglelitence.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(307,168,'Louise','0f6m637m0c@gmail.com','http://izqvud.com','188.143.232.32','2017-01-24 09:18:58','2017-01-24 09:18:58','That takes us up to the next level. Great poigsnt.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(308,312,'Ethica','ihj1fk0v6@gmail.com','http://jpxapilpwe.com','188.143.232.32','2017-01-24 09:27:43','2017-01-24 09:27:43','That\'s a subtle way of thikning about it.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(309,240,'Forever','xfflppufe@hotmail.com','http://estfttiidz.com','188.143.232.27','2017-01-24 09:31:21','2017-01-24 09:31:21','Your\'s is a point of view where real innetligelce shines through.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(310,10,'Zariel','756frlhw@outlook.com','http://nrbibcpmgp.com','188.143.232.27','2017-01-24 09:33:32','2017-01-24 09:33:32','We co\'udlve done with that insight early on.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(311,37,'Cammie','ku1pornz@hotmail.com','http://itofjxmjoam.com','188.143.232.32','2017-01-24 09:39:20','2017-01-24 09:39:20','What a plsrueae to find someone who thinks through the issues',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(312,28,'Jerry','0a8xl2kuz@yahoo.com','http://wpwssqbrbr.com','188.143.232.32','2017-01-24 09:41:28','2017-01-24 09:41:28','Yours is a clever way of thniinkg about it.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(313,96,'Susy','se86mcfef9u@outlook.com','http://cjdejbrhdt.com','188.143.232.27','2017-01-24 09:41:28','2017-01-24 09:41:28','Thanks for inurcdtoing a little rationality into this debate.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(314,8,'Kaycee','gy5cqkggil8@hotmail.com','http://beswpo.com','188.143.232.27','2017-01-24 09:42:03','2017-01-24 09:42:03','That\'s not just the best answre. It\'s the bestest answer!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(315,335,'Billytrums','docjp97@snailmail.men','http://buyviagraonline.us.com','46.161.9.20','2017-01-24 09:49:18','2017-01-24 09:49:18','wh0cd893774 <a href=\"http://zoloftgeneric.click/\" rel=\"nofollow\">zoloft</a> <a href=\"http://cheapretina.gdn/\" rel=\"nofollow\">where can i purchase retin a</a> <a href=\"http://propecia1mg.gdn/\" rel=\"nofollow\">propecia 1mg</a> <a href=\"http://prednisolone.us/\" rel=\"nofollow\">prednisolone</a>',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36','',0,0),(316,69,'Mircea','oai065ee6n@hotmail.com','http://fsdacrj.com','188.143.232.27','2017-01-24 09:54:34','2017-01-24 09:54:34','- Dear W family ~ What pure joy it was to meet you and share this wonudrfel time of your lives with you.  I so very much enjoyed meeting little Miss B.  Please give her a big hug for me! &hearts; &hearts;',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(317,207,'Jacki','ouu3ckel01@gmail.com','http://jnhuvjoesgx.com','188.143.232.27','2017-01-24 09:55:14','2017-01-24 09:55:14','My female bulldog was a breeder dog before we rescued her. She is the sweesett thing, and I hate the thought that this was how she spent her life before coming to us. I posted the link to this video to my facebook page  I hope a couple of my friends see it and send it to their friends.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(318,101,'Cyelii','pyja2bpbgs@hotmail.com','http://qzfxdchocr.com','188.143.232.27','2017-01-24 09:59:12','2017-01-24 09:59:12','My mom works hard, and she takes care of 5 dogs (2 are elderly and can;7821#&amp;t hold their bladder, etc). She deserves some time for herself.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(319,354,'Brandilyn','pywyazc9ga@mail.com','http://hhrbvyn.com','188.143.232.32','2017-01-24 10:01:12','2017-01-24 10:01:12','I believe that youtube is a great tool for someone curious in watching or upndioalg videos. I have been using the site for years now, and still think it is doing a good job!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(320,243,'China','ohvwshoq@outlook.com','http://rxkbfmte.com','188.143.232.32','2017-01-24 10:01:41','2017-01-24 10:01:41','disse:Carlos Augusto disse:20 de outubro de 2010 Ã s 16:31 &#8220;Que maravilha, e sÃ³ vai custar 1,9&amp;N9#8221;.Ã£o, nÃ£o custarÃ¡ sÃ³ isso. Mas sem dÃºvida nÃ£o irÃ¡ sair a 142,3 milhÃµes de euros a carcaÃ§a pelada.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(321,81,'Minerva','8xgiy2de3xd@mail.com','http://zpmamtfbxw.com','188.143.232.27','2017-01-24 10:02:49','2017-01-24 10:02:49','Might be app store bugs. I&#8217;m still on 4.1 JB and I couldn&#8217;t update monopoly OTA via 3G, came up with warning &#8220;update no longer av82balle&amp;#ai21; &#8211; huh?(leStar has made 65 comments)',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(322,106,'Midge','u68r85w6@hotmail.com','http://dmgevfhdgm.com','188.143.232.32','2017-01-24 10:04:49','2017-01-24 10:04:49','These pictures are  so very be.0fitul&amp;#823u;a. I was viewing them with my 12 yr old daughter looking over my shoulder&#8230;.. and she said,&#8221;  Mom&#8212; is she a model ?&#8221;  When I explained &#8211; she said== well she should be a model&#8230;.. simply gorgeous shots !!!!! Thank you Kim for sharing these pictures with me&#8230;..',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(323,62,'Burchard','nnpn3pbdql@yahoo.com','http://nbapzpabli.com','188.143.232.32','2017-01-24 10:05:54','2017-01-24 10:05:54','Tough cal0#&amp;823l; The question is, which will stick to their promise? In Scotland we have free University education for Scottish Nationals &#8211; something I am forever grateful for!Savvy Scot recently posted..',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(324,186,'Linda','ygkr09gg@mail.com','http://kxkwanx.com','188.143.232.27','2017-01-24 10:08:02','2017-01-24 10:08:02','On reste rÃªveuse devant ces merveilles! C&#039;est vrai que les mannequins de l&amp;;©9#Ã3poque Ã©taient un peu plus proches de la moyenne que de nos jours.mamie Simone',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(325,50,'Steffi','7kffgmwr7@outlook.com','http://jumvoa.com','188.143.232.32','2017-01-24 10:08:06','2017-01-24 10:08:06','SeMee?! NO holiday liao?! Die lar ... I oready book hotel 81 on that day, Ah lian wants a good fuck. Now cannot liao ... sure kinna fuck by Ah lain thiz time ...Eh ... LPPL ... same same leh ... still get fuck! ha!ahahaha!!h!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(326,318,'Jean','jnvqd964@outlook.com','http://tvygzcd.com','188.143.232.27','2017-01-24 10:11:43','2017-01-24 10:11:43','braan,yeih. i have to set my pride down and just admit that they do have a great service and i&#8217;ve set up so many people with them, which is a good thing.if i&#8217;m ultimately interested in the betterment of the bloggers and saving them some money (which I am) then i might as well include the services that are great, including them!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(327,14,'Keyon','it8yfvw3eh2@yahoo.com','http://pcncqbyeu.com','188.143.232.32','2017-01-24 10:14:23','2017-01-24 10:14:23','This is great &#8211; vinegar really does wosnerd! This is perfect timing because I am baking an apple pie tonight. I will have to wash them with vinegar water first!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(328,495,'Lele','4wyqzb8emqa@yahoo.com','http://eeghojh.com','188.143.232.27','2017-01-24 10:14:38','2017-01-24 10:14:38','Look for more posts from my team over the next few weeks. We&#8217;re excited to share with you more details about what we suggest to advertisers. We&#8217;ll talk about the specific reneamondmtiocs we provide, such as advising advertisers to use a Placement Performance Report to optimize a Google Content Network campaign.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(329,623,'Dina','0hnkml2zxnp@mail.com','http://fnmpugpkj.com','188.143.232.32','2017-01-24 10:15:05','2017-01-24 10:15:05','137                                    Posted by 73 on 16September 08, 2012 at 1b2:20 pm            40                           2edHi Simmeon,Yes, it did work for me and I have done so many other kinds of self-hypnosis.  What I like about this the best is that it is designed for our niche.Check it out you may just find it bena.icielf-DonnaDonna Merrill recently posted..',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(330,205,'Jeana','2mcq1b5pj8@hotmail.com','http://bhsjwy.com','188.143.232.32','2017-01-24 10:16:19','2017-01-24 10:16:19','me ha recomendado Pon tu sentido post, un bellÃ­simo homenaje a Mikel Laboa. para algunos amigos, que me acercaron algunas de sus canciones mÃ¡s conocidas, que le conocieron tb en una distancia mÃ¡s Ã­ntima, ha sido una pÃ©rdida irelaarpbre. a mÃ­ me ha dado mucha pena.Agur, Mikelun abrazo.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(331,315,'Bryson','pfz19omn@mail.com','http://enyfsdu.com','188.143.232.27','2017-01-24 10:16:24','2017-01-24 10:16:24','la comÃ©die, le cinÃ©ma, allez en salle. Un prÃ©sident de la RÃ©publique n&rsquo;est pas lÃ  pour jouer une piÃ¨ce et amuser la galerie, avec sa vie vie privÃ©e, ses tics et ses envolÃ©es, son beau-parler et ses costumes sur mesures. Ce qui me convainc chez Hollande, c&rsquo;est justement qu&rsquo;il n&rsquo;en rajoute pas des couches et des couches pour sÃ©duire. Son intelligence, le fond, les solutions, voilÃ  ce qui m&amp;Ãiruo;sntq©resse. Le reste, on a dÃ©jÃ  vu. Et le rÃ©sultat, on l&rsquo;a sous les yeux.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(332,74,'Jaylon','v91hr2rtdk@hotmail.com','http://iwdhkubdif.com','188.143.232.32','2017-01-24 10:22:28','2017-01-24 10:22:28','Such glorious pictures!  Made me have shivers and tears and helped to relive the beautiful occasion over again with special friends and family!  Fiona &#8211; you are glowing and beiuatful. Raphael &#8211; you are a treasure!  What a joy to have shared in your special day!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(333,394,'Jane','hgetr174y@yahoo.com','http://jwieuy.com','188.143.232.32','2017-01-24 10:28:03','2017-01-24 10:28:03','The thing that most bothers me is how my mother will go on and on about things in our family that ca72#8&amp;1n;t be changed. The thing i love about her is how strong she is, when our father passed away she stayed strong to help my brother and i get through it even though she was grieving herself. She is a very big Robyn Carr fan and i would love to get this for her. Thanks for the give away.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(334,216,'Jace','3hixqb29j7g@gmail.com','http://kwjlwf.com','188.143.232.32','2017-01-24 10:28:42','2017-01-24 10:28:42','Hiya mate. Certainly liked your post. It was very edcontiuaal and helpful. I trust you do not mind me writing regarding this post on my own website. I will also be linking back to this. Really like your theme! Salamat.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(335,405,'Bubba','mzr2brk1@mail.com','http://mgwwytslvwn.com','188.143.232.27','2017-01-24 10:29:33','2017-01-24 10:29:33','Det er da ikke sÃ¥ ringe, det plot ham Egon har gang i. Jeg fÃ¸lger spÃ¦ndt fo..tÃ¦stelsenrt. Bare det nu ikke ender som det plejer, med ham Egon:)God weekend.Kh. Dorte',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(336,26,'Sanne','637cq3l1@hotmail.com','http://botmdpbk.com','188.143.232.27','2017-01-24 10:35:14','2017-01-24 10:35:14','This recipe was very easy and good. However, it was nothing like I&#039;ve had at an Indian restaurant. This tasted more like a pita to me. I can&#039;t put my finger on it, but it was not the same taste as I&#039;ve had at several rensuarastt. I was disappointed that it did not seem authentic.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(337,405,'Artrell','4smo3sh6085@yahoo.com','http://hocurxed.com','188.143.232.27','2017-01-24 10:36:34','2017-01-24 10:36:34','What a wonderful post, Aaron! Thank you so much for taking the time to write this recap. You had me tearing up toward the end&#8230; &#039; couqsn&amp;rdluo;t help but feel a sense of pride that this remarkable facility is right here in our city.&#039; This is why I love my job. While I hope no child ever has to visit, I&#039;m so glad that we have a facility like this in Columbus to help sick kids.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(338,93,'Lettie','6g6sd8qz8@mail.com','http://lskscznqcdk.com','188.143.232.27','2017-01-24 11:06:02','2017-01-24 11:06:02','Well I guess I don\'t have to spend the weekend fiinrgug this one out!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(339,412,'Aileen','p2zv26azwe@outlook.com','http://vqcxihbug.com','188.143.232.32','2017-01-24 11:15:13','2017-01-24 11:15:13','And I thought I was the sensible one. Thanks for setting me stgthria.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(340,1,'Carlye','80ppu304@yahoo.com','http://voztzovnsr.com','188.143.232.32','2017-01-24 11:23:45','2017-01-24 11:23:45','Filnaly! This is just what I was looking for.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(341,389,'Dernell','qk1xib89gx@yahoo.com','http://wjkugrkvkmr.com','188.143.232.27','2017-01-24 11:26:40','2017-01-24 11:26:40','Van Ruymbeke ne veut pas de sursis Ã  perpÃ©tuitÃ© et se reconvertit; il vient de s&amp;qorus;installer aux US avec une nouvelle identitÃ© et se relance dans le Soccer . son Nom :    Ruyven. BEKAM;Les autoritÃ©s ont procÃ©dÃ© aux premiers tests ADN pour vÃ©rifier s&rsquo;il n&rsquo;est pas sur la liste InterPolochon.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(342,228,'Sequoia','zkomh4nf8lr@outlook.com','http://jilrytari.com','188.143.232.27','2017-01-24 11:27:11','2017-01-24 11:27:11','Same to you! I have heard great things about Wolf Hall &amp; Bring Up the Bodies and will need to check them out. Junot Diaz is a fast read. Thanks for stipopng by, Kristen!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(343,654,'Jenita','ofxhq2jfyx@yahoo.com','http://yknaplxymp.com','188.143.232.32','2017-01-24 11:40:26','2017-01-24 11:40:26','TO TIMBELI BALUBAS        |     (19:52)    YANGO BINO BA LUBAS , BOKOMI KO BENGA BATO NIOSO OYO BA LINGI LEADER NA FINI NA BINO TE BA COOSBALL, KIEKIEKIE KANDA NA BINO PO LUMUMBA ALOBI VERITE, LEADER NA BINO TO LINGI YE TE.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(344,405,'Etta','ioqzt0x5@outlook.com','http://dpgjcqg.com','188.143.232.32','2017-01-24 11:40:49','2017-01-24 11:40:49','We had Wisconsin history as part of our regular history class, but I got the imepsrsion from my Texan friends that it was a much bigger deal in Texas. ICBW, YMMV, etc.',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(345,173,'Lele','kl76o5r5y6@mail.com','http://hdwpsg.com','188.143.232.32','2017-01-24 11:42:42','2017-01-24 11:42:42','Hi nan b! just proceed with your application and see what happen, I&#8217;m un employed last year when I apply at the netherlands embassy for my first schengen visa But still granted visa.  Just make sure yo2;l8u17&amp;#l explain on how your un employed and still planning to go back to Philippines.  Also have your  travel insurance ready. Reply</a>',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36','',0,0),(346,22,'Shirl','t2sphb0mpp@outlook.com','http://fatadkyoz.com','188.143.232.32','2017-01-24 11:50:43','2017-01-24 11:50:43','Hs, you hit it out of the park again with this find. I love the work of this person. I wonder if they wash their hair when they are doepnSu?er find HS, thank you!!',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(347,24,'Denver','yywcetw3c5@gmail.com','http://drpjkjyuqa.com','188.143.232.27','2017-01-24 11:53:10','2017-01-24 11:53:10','September 7, 2007aku tertarik neh buat ngikutin lomba desain T-Shirtnya Qwm.osrcdo&#8230; tapi batas akhirnya sampe kapan ya ?? Trus, berati disainnya cuman dipajang di situsnya masing2 ??',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0','',0,0),(348,335,'Erickirona','jwkords@mmail.men','http://tretinoin.us.com','46.161.9.20','2017-01-25 11:24:39','2017-01-25 11:24:39','wh0cd713306 <a href=\"http://amoxicillin500.site/\" rel=\"nofollow\">as an example</a> <a href=\"http://ampicillinsulbactam.click/\" rel=\"nofollow\">where can i buy ampicillin</a> <a href=\"http://cialisfordailyuse.link/\" rel=\"nofollow\">200 mg cialis</a> <a href=\"http://genericpropecia.in.net/\" rel=\"nofollow\">propecia</a>',0,'0','Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36','',0,0),(349,335,'BrettGah','hafizhamad86@sslsmtp.download','http://buyseroquel.us.com','46.161.9.20','2017-01-26 04:33:04','2017-01-26 04:33:04','wh0cd532838 <a href=\"http://diclofenaccream.review/\" rel=\"nofollow\">diclofenac tablets</a> <a href=\"http://drug-toradol.in.net/\" rel=\"nofollow\">discover more</a> <a href=\"http://tetracycline-cost.us/\" rel=\"nofollow\">where to buy tetracycline online</a> <a href=\"http://meloxicam.link/\" rel=\"nofollow\">mobic</a> <a href=\"http://vermox-online.in.net/\" rel=\"nofollow\">vermox online</a> <a href=\"http://tretinoinonline.site/\" rel=\"nofollow\">tretinoin cream 0.1 buy</a> <a href=\"http://viagratablet.in.net/\" rel=\"nofollow\">viagra</a> <a href=\"http://advairinhaler.club/\" rel=\"nofollow\">full article</a> <a href=\"http://buyvaltrexonline.site/\" rel=\"nofollow\">web site</a> <a href=\"http://inderal.christmas/\" rel=\"nofollow\">inderal</a>',0,'0','Mozilla/5.0 (Windows NT 6.3; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0','',0,0),(350,335,'StewartJotte','aabrown696@mailmonster.stream','http://seroquel2016.us.com','46.161.9.20','2017-01-27 20:40:29','2017-01-27 20:40:29','wh0cd14086 <a href=\"http://hairlosscream.cricket/\" rel=\"nofollow\">hair loss cream</a> <a href=\"http://cymbalta.gb.net/\" rel=\"nofollow\">cymbalta.com</a> <a href=\"http://genericcelexa.us/\" rel=\"nofollow\">generic celexa</a> <a href=\"http://cephalexin.us.com/\" rel=\"nofollow\">Cephalexin</a> <a href=\"http://diclofenacsodium.site/\" rel=\"nofollow\">diclofenac</a> <a href=\"http://prednisolone-acetate.cricket/\" rel=\"nofollow\">buy prednisolone 5mg</a> <a href=\"http://cymbalta-30-mg.trade/\" rel=\"nofollow\">cymbalta 30 mg price</a> <a href=\"http://buybactrobanonline.accountant/\" rel=\"nofollow\">bactroban</a>',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0','',0,0),(351,335,'Billytrums','thamil8006@bighost.download','http://effexor247.us.com','46.161.9.20','2017-01-29 01:27:16','2017-01-29 01:27:16','wh0cd833618 <a href=\"http://prozac-generic.gdn/\" rel=\"nofollow\">prozac</a> <a href=\"http://crestor10mg.click/\" rel=\"nofollow\">crestor</a> <a href=\"http://nexiumprice.site/\" rel=\"nofollow\">buy nexium online cheap</a> <a href=\"http://mobiconline.us/\" rel=\"nofollow\">mobic</a>',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36','',0,0),(352,335,'Erickirona','systaywas48@freemails.download','http://avodart2016.us.com','46.161.9.20','2017-01-30 06:49:32','2017-01-30 06:49:32','wh0cd653150 <a href=\"http://retina.christmas/\" rel=\"nofollow\">retin-a</a> <a href=\"http://buyprednisone.tech/\" rel=\"nofollow\">buy prednisone</a> <a href=\"http://cialiscost.pro/\" rel=\"nofollow\">cialis cost comparison</a> <a href=\"http://sildalis.fashion/\" rel=\"nofollow\">sildalis</a> <a href=\"http://citalopramhbr20mg.review/\" rel=\"nofollow\">citalopram</a> <a href=\"http://buytretinoin.website/\" rel=\"nofollow\">buy tretinoin cream online</a> <a href=\"http://retina25.top/\" rel=\"nofollow\">as example</a> <a href=\"http://abilifycost.site/\" rel=\"nofollow\">abilify cost</a>',0,'0','Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36','',0,0),(353,335,'BrettGah','crs77385@myfreeserver.download','http://aldactone.us.com','46.161.9.20','2017-01-30 21:36:19','2017-01-30 21:36:19','wh0cd472682 <a href=\"http://buytretinoin.website/\" rel=\"nofollow\">buy tretinoin</a> <a href=\"http://buystromectol.tech/\" rel=\"nofollow\">buy stromectol</a> <a href=\"http://tetracycline-antibiotics.us/\" rel=\"nofollow\">tetracycline prescription</a> <a href=\"http://buymobic.site/\" rel=\"nofollow\">buy mobic</a> <a href=\"http://albuterolinhaler.club/\" rel=\"nofollow\">albuterol inhaler</a> <a href=\"http://diclofenacsodium.link/\" rel=\"nofollow\">diclofenac sod 75</a> <a href=\"http://lexaproonline.review/\" rel=\"nofollow\">buy lexapro online cheap</a> <a href=\"http://mobic75.link/\" rel=\"nofollow\">cost of mobic</a>',0,'0','Mozilla/5.0 (Windows NT 6.1; rv:43.0) Gecko/20100101 Firefox/43.0','',0,0),(354,335,'StewartJotte','jenniferluke08@livemail.men','http://cialisfordailyuse.us.com','46.161.9.20','2017-02-01 14:01:05','2017-02-01 14:01:05','wh0cd953930 <a href=\"http://cymbalta.us.org/\" rel=\"nofollow\">generic cymbalta</a> <a href=\"http://viagraoverthecounter.us.com/\" rel=\"nofollow\">viagra over the counter</a> <a href=\"http://cephalexin.us.org/\" rel=\"nofollow\">cephalexin</a> <a href=\"http://onlineviagra.us.com/\" rel=\"nofollow\">online viagra</a> <a href=\"http://cymbalta365.us.com/\" rel=\"nofollow\">cymbalta</a> <a href=\"http://cialis5mg.us.com/\" rel=\"nofollow\">cialis online</a>',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.103 Safari/537.36','',0,0),(355,495,'Jamesfaf','jameselawn@mail.ru','https://www.acheterviagrafr24.com/','46.118.153.201','2017-02-03 23:22:33','2017-02-03 23:22:33','Do you feel like you have tried everything possible in order to lose weight? You are not alone--many people have the same problem. The following article is designed to give you tips that you may not have even known existed. By following these tips, you will reach your weight loss goal in no time.',0,'0','Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.103 Safari/537.36','',0,0),(356,335,'StewartJotte','craigballegeer@sslsmtp.download','http://clonidine247.us.com','46.161.9.20','2017-02-04 22:20:49','2017-02-04 22:20:49','wh0cd953930 <a href=\"http://buysildalis.com/\" rel=\"nofollow\">Sildalis Tablets</a> <a href=\"http://lioresal.us.com/\" rel=\"nofollow\">lioresal</a> <a href=\"http://trazodone2016.us.com/\" rel=\"nofollow\">trazodone</a> <a href=\"http://acomplia.us.com/\" rel=\"nofollow\">Acomplia</a> <a href=\"http://buymedrol.us.com/\" rel=\"nofollow\">buy medrol</a> <a href=\"http://viagracanada.us.com/\" rel=\"nofollow\">black viagra</a>',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0','',0,0),(357,264,'Jennifer','oibycv@hsrpriyf.com','http://lathundar.se/Url/a9','37.203.209.27','2017-02-06 15:29:11','2017-02-06 15:29:11','I decided to leave a message here on your golang websocket 编程  | Winter is coming page instead of calling you. Do you need more likes for your Facebook Fan Page? The more people that LIKE your website and fanpage on Facebook, the more credibility you will have with new visitors. It works the same for Twitter, Instagram and Youtube. When people visit your page and see that you have a lot of followers, they now want to follow you too. They too want to know what all the hype is and why all those people are following you. Get some free likes, followers, and views just for trying this service I found: http://lathundar.se/Url/a9',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(358,335,'Erickirona','laurensmiller@emailme.win','http://avana.us.com','46.161.9.20','2017-02-07 07:59:09','2017-02-07 07:59:09','wh0cd773462 <a href=\"http://albuterol.us.com/\" rel=\"nofollow\">albuterol sulfate inhaler</a> <a href=\"http://lasix.org/\" rel=\"nofollow\">additional info</a> <a href=\"http://wellbutrinxl.us.com/\" rel=\"nofollow\">wellbutrin</a> <a href=\"http://celebrex2016.us/\" rel=\"nofollow\">buy celebrex</a> <a href=\"http://aygestin.us.com/\" rel=\"nofollow\">aygestin w\\o prescription</a>',0,'0','Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36','',0,0),(359,623,'Sabrina Warren','tixgatisu@gycbts.com','http://deaf.im/zyr-x','5.231.237.130','2017-02-15 18:59:22','2017-02-15 18:59:22','Hello my name is Sabrina Warren and I just wanted to drop you a quick message here instead of calling you. I discovered your 编程规范 | Winter is coming website and noticed you could have a lot more hits. I have found that the key to running a successful website is making sure the visitors you are getting are interested in your website topic. There is a company that you can get keyword targeted traffic from and they let you try their service for free for 7 days. I managed to get over 300 targeted visitors to day to my site. http://fot.li/2ne',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(360,555,'Richwhef','new@emailvam.xyz','http://ussmd.com','31.184.238.249','2017-02-18 11:00:33','2017-02-18 11:00:33','Propecia Testicle Pain  <a href=\"http://ysluk.com\" rel=\"nofollow\">cialis</a> Acheter Baclofen En Ligne Discount On Line Generic Elocon 5g Cheap Secure  <a href=\"http://cytotec.mdsmeds.com/where-to-buy-cytotec.php\" rel=\"nofollow\">Where To Buy Cytotec</a> Amoxicillin Inhibition Zones Buy Kamagra Canada  <a href=\"http://amoxil.inpills.com/best-amoxil-online.php\" rel=\"nofollow\">Best Amoxil Online</a> Viagra O Cialis Senza Ricetta Medica Original Viagra Rezeptfrei Bestellen  <a href=\"http://accutane.rxbill7.com/accutane-price-cvs.php\" rel=\"nofollow\">Accutane Price Cvs</a> Cialis Instrucciones Generique Priligy  <a href=\"http://propecia.inpills.com/cheap-propecia-online.php\" rel=\"nofollow\">Cheap Propecia Online</a> Black Market Estrogen Buy Citalopram 10mg Online Uk  <a href=\"http://viagra.inpills.com/canadian-viagra.php\" rel=\"nofollow\">Canadian Viagra</a> Pastillas Levitra Orlistat Delivry  <a href=\"http://levitra.rx-cs17.com/best-price-on-levitra.php\" rel=\"nofollow\">Best Price On Levitra</a> Does Amoxicillin Cause Headaches Cialis O Viagra Effetti Collaterali  <a href=\"http://abtsam.com\" rel=\"nofollow\">Cheap Viagra</a> Baclofene Irex 10 Kamagra Customer Reviews  <a href=\"http://med84.com\" rel=\"nofollow\">viagra online</a> Cheap Propecia 10mg Generic Doxycycline  <a href=\"http://prozac.mdsmeds.com/ordering-prozac-online.php\" rel=\"nofollow\">Ordering Prozac Online</a> Cialis Y La Ceguera Where To Purchase Alli 60 Mg In Europe  <a href=\"http://kamagra.rxbill7.com/purchase-kamagra.php\" rel=\"nofollow\">Purchase Kamagra</a> Cheap Azoran No Rx Baclofene Article Le Monde  <a href=\"http://nolvadex.mdsmeds.com/how-much-nolvadex.php\" rel=\"nofollow\">How Much Nolvadex</a> Buy Albuterol Inhaler Online Cheap Propecia Male Fertility Sperm Count  <a href=\"http://levitra.rxbill7.com/levitra-plus.php\" rel=\"nofollow\">Levitra Plus</a> Amoxil Ampicillin Anti Tendonitis Treated With Amoxicillin  <a href=\"http://cthosts.net\" rel=\"nofollow\">cialis price</a> Retin A From Canadian Pharmacy Topimax Without A Prescription Canada  <a href=\"http://bhdrugs.com\" rel=\"nofollow\">buy viagra</a> Chemical Properties Of Amoxicillin Propecia Tabletten  <a href=\"http://prednisone.inpills.com/order-deltasone-tablets.php\" rel=\"nofollow\">Order Deltasone Tablets</a> Precio Cialis 20 Directpharmacyusa  <a href=\"http://levitra.inpills.com/buy-levitra.php\" rel=\"nofollow\">Buy Levitra</a> Medical Amoxicillin Price Comparison Propecia Finasteride  <a href=\"http://priligy.inpills.com/priligy-dapoxetine-buy.php\" rel=\"nofollow\">Priligy Dapoxetine Buy</a> Cialis 5 Mg Daily Success Generika Levitra Rezeptfrei  <a href=\"http://prednisone.rx-cs17.com/ordering-deltasone-online.php\" rel=\"nofollow\">Ordering Deltasone Online</a> Cialis No Prior Prescription Generic Amoxicilina Bacterial Infections No Doctor Paris  <a href=\"http://zgdkdz.com\" rel=\"nofollow\">Buy Viagra</a> Online Dutasteride Baldness Overnight Shipping Strep Zithromax  <a href=\"http://clomid.mdsmeds.com/online-clomiphene.php\" rel=\"nofollow\">Online Clomiphene</a> Cialis 20 Mg 27 Xenical No Prescription Canada  <a href=\"http://accutane.mdsmeds.com/accutane-from-canada.php\" rel=\"nofollow\">Accutane From Canada</a> Whats The Best Mg Of Viagra Priligy Venezuela  <a href=\"http://drugslr.com\" rel=\"nofollow\">buy cialis</a> Cialis Afecta Fertilidad Tamoxifen Online Bestellen  <a href=\"http://strattera.mdsmeds.com/strattera-online-usa.php\" rel=\"nofollow\">Strattera Online Usa</a> Alli Pill For Sale In Uk Where Can I Buy Alli  <a href=\"http://call4ph.com\" rel=\"nofollow\">viagra online prescription</a> Canadian Overnight Se Utiliza La Propecia  <a href=\"http://antabuse.inpills.com/antabuse-tablet.php\" rel=\"nofollow\">Antabuse Tablet</a> Cephalexin 500mg Problems Buy Doxycycline No Prescription  <a href=\"http://propecia.mdsmeds.com/cheap-propecia.php\" rel=\"nofollow\">Cheap Propecia</a> Legally Buy Pain Pills Ou Acheter Du Viagra France  <a href=\"http://fra-rx.com\" rel=\"nofollow\">cialis</a> How To Stay Healthy After Keflex Purchase Doxycycline Online  <a href=\"http://shopcurerx.com\" rel=\"nofollow\">worldwide pharmacy kamagra</a> Lasix Kopen Mechanism Generic Propecia  <a href=\"http://amoxil.rxbill7.com/amoxil-online-prices.php\" rel=\"nofollow\">Amoxil Online Prices</a> Viagra O Cialis Online Purchase Medrol Dose Packs  <a href=\"http://accutane.rx-cs17.com/buy-accutane.php\" rel=\"nofollow\">Buy Accutane</a> Price For A 100 Mg Viagra Difference In Viagra Doses  <a href=\"http://drugsir.com\" rel=\"nofollow\">cialis</a> Will Amoxicillin Help A Uti Achat Levitra En Fr  <a href=\"http://viagra.mdsmeds.com/viagra-online-online.php\" rel=\"nofollow\">Viagra Online Online</a> Buy Liquid Amoxicillin Amoxicillin Images  <a href=\"http://xenical.rxbill7.com/mail-order-xenical.php\" rel=\"nofollow\">Mail Order Xenical</a> Can You Buy Orlistat Levitra Gesund  <a href=\"http://inderal.inpills.com/propranolol-usa.php\" rel=\"nofollow\">Propranolol Usa</a> Valtrex Online Cheap Importing Kamagra Into Uk  <a href=\"http://cialis.rxbill7.com/generic-for-cialis.php\" rel=\"nofollow\">Generic For Cialis</a> Human Cephalexin For Dogs Actoplus  <a href=\"http://ciaolis.com\" rel=\"nofollow\">cialis</a> Action Clomid Glaire Cervicale Propecia Price Canada  <a href=\"http://drisdol.com\" rel=\"nofollow\">cialis online pharmacy</a> Buy Amoxicillin For Pet Without Prescription Xenical Prix En France  <a href=\"http://antabuse.mdsmeds.com/internet-order-antabuse.php\" rel=\"nofollow\">Internet Order Antabuse</a> Acne Amoxicillin Canadian Pharmacy Flagyl Online Drugstore  <a href=\"http://viagra.rx-cs17.com/price-of-viagra.php\" rel=\"nofollow\">Price Of Viagra</a> Acquistare Kamagra Uk Lasix Without A Script  <a href=\"http://etrobax.com\" rel=\"nofollow\">cialis buy online</a> Zithromax Alcohol Side Effects Comprar Cialis En Espana Sin Receta  <a href=\"http://inderal.rxbill7.com/buy-generic-inderal.php\" rel=\"nofollow\">Buy Generic Inderal</a> Viagra Flussig Cialis Scheda Tecnica  <a href=\"http://ussmd.com\" rel=\"nofollow\">cialis</a> Amoxicillin For Animals No Prescription Valtrex Without Rx  <a href=\"http://cialis.rxbill7.com/brand-cialis-online.php\" rel=\"nofollow\">Brand Cialis Online</a> Zithromax 250 Mg Tablet Cialis Levitra Together  <a href=\"http://feldene.net\" rel=\"nofollow\">viagra</a> Cialis Wirkt Nicht Viagra Priligy Generico Senza Ricetta  <a href=\"http://doxycycline.rx-cs17.com/buy-100mg-vibramycin-online.php\" rel=\"nofollow\">Buy 100mg Vibramycin Online</a> Proper Dosage Amoxicillin Sore Throad Find Stendra 50mg No Doctors Consult Overseas  <a href=\"http://prednisone.rxbill7.com/online-prednisone.php\" rel=\"nofollow\">Online Prednisone</a> Amoxicillin Cold Medication Canadian Pharmacy Clonidine  <a href=\"http://giwes.com\" rel=\"nofollow\">viagra cialis</a> 1 Mg Prednisone No Scrip',0,'0','Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36','',0,0),(361,464,'Sabrina Warren','egampbmeyl@vseosnf.com','http://deaf.im/zyr-x','185.13.156.124','2017-02-19 00:45:54','2017-02-19 00:45:54','I was just looking at your redis源码分析之网络通信和事件调度篇 | Winter is coming site and see that your site has the potential to get a lot of visitors. I just want to tell you, In case you don\'t already know... There is a website network which already has more than 16 million users, and the majority of the users are looking for websites like yours. By getting your website on this service you have a chance to get your site more visitors than you can imagine. It is free to sign up and you can read more about it here: http://fot.li/2ne - Now, let me ask you... Do you need your website to be successful to maintain your way of life? Do you need targeted traffic who are interested in the services and products you offer? Are looking for exposure, to increase sales, and to quickly develop awareness for your website? If your answer is YES, you can achieve these things only if you get your website on the network I am talking about. This traffic network advertises you to thousands, while also giving you a chance to test the network before paying anything. All the popular sites are using this network to boost their traffic and ad revenue! Why aren’t you? And what is better than traffic? It’s recurring traffic! That\'s how running a successful website works... Here\'s to your success! Read more here: http://kfon.eu/3',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(362,623,'Sandra','npiuth@nanmzd.com','http://shorturl.van.ee/8','81.171.74.63','2017-02-19 21:28:06','2017-02-19 21:28:06','Did you just create your new Facebook page? Do you want your page to look a little more \"established\"? I found a service that can help you with that. They can send organic and 100% real likes and followers to your social pages and you can try before you buy with their free trial. Their service is completely safe and they send all likes to your page naturally and over time so nobody will suspect that you bought them. Try their service for free here: http://v-doc.co/nm/39zu3',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(363,495,'Sabrina Warren','xedfcqxuiy@goebketoyk.com','http://bbqr.me/4g5j','5.230.31.69','2017-02-23 05:57:55','2017-02-23 05:57:55','Hello my name is Sabrina Warren and I just wanted to send you a quick note here instead of calling you. I discovered your 从源码角度分析 golang 协程 goroutines | Winter is coming website and noticed you could have a lot more traffic. I have found that the key to running a successful website is making sure the visitors you are getting are interested in your subject matter. There is a company that you can get keyword targeted visitors from and they let you try the service for free for 7 days. I managed to get over 300 targeted visitors to day to my website. http://rhr.online/39ioc',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(364,335,'DeannaJhbhyl','evasteward@gmail.com','http://Erik.free.fr','94.177.234.171','2017-02-23 12:49:03','2017-02-23 12:49:03','I see your site needs some fresh content. Writing manually is time consuming,\r\nbut there is solution for this. Just search for; Masquro\'s strategies',0,'0','Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36','',0,0),(365,335,'BrettGah','robertulaszek@myimail.men','http://cheapviagra2017.com','46.161.9.20','2017-02-25 02:34:42','2017-02-25 02:34:42','wh0cd592994 <a href=\"http://cialiscost2017.com/\" rel=\"nofollow\">cialis cost</a>',0,'0','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36 OPR/34.0.2036.50','',0,0),(366,495,'Sabrina Warren','bvappgi@kkzhpolwo.com','http://s.beautheac.net/52','5.230.31.69','2017-03-01 01:11:43','2017-03-01 01:11:43','I was just looking at your 从源码角度分析 golang 协程 goroutines | Winter is coming website and see that your site has the potential to get a lot of visitors. I just want to tell you, In case you didn\'t already know... There is a website network which already has more than 16 million users, and the majority of the users are looking for topics like yours. By getting your website on this service you have a chance to get your site more popular than you can imagine. It is free to sign up and you can read more about it here: http://smpros.tk/q - Now, let me ask you... Do you need your website to be successful to maintain your way of life? Do you need targeted visitors who are interested in the services and products you offer? Are looking for exposure, to increase sales, and to quickly develop awareness for your website? If your answer is YES, you can achieve these things only if you get your website on the network I am describing. This traffic network advertises you to thousands, while also giving you a chance to test the service before paying anything. All the popular sites are using this service to boost their traffic and ad revenue! Why aren’t you? And what is better than traffic? It’s recurring traffic! That\'s how running a successful site works... Here\'s to your success! Read more here: http://s.t0m-s.be/3V',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(367,335,'StewartJotte','laurinda@freemails.download','http://genericviagra2017.com','46.161.9.20','2017-03-04 00:59:02','2017-03-04 00:59:02','wh0cd953930 <a href=\"http://cialiscost2017.com/\" rel=\"nofollow\">40 mg cialis</a>',0,'0','Mozilla/5.0 (Windows NT 5.1; rv:43.0) Gecko/20100101 Firefox/43.0','',0,0),(368,264,'Deanna Brady','znlawizbv@fsglimyhps.com','http://brt.st/5tc0','94.249.160.127','2017-03-11 03:57:50','2017-03-11 03:57:50','I was just looking at your golang websocket 编程  | Winter is coming website and see that your website has the potential to become very popular. I just want to tell you, In case you didn\'t already know... There is a website service which already has more than 16 million users, and the majority of the users are interested in websites like yours. By getting your website on this service you have a chance to get your site more popular than you can imagine. It is free to sign up and you can read more about it here: http://corta.co/a7F - Now, let me ask you... Do you need your website to be successful to maintain your way of life? Do you need targeted traffic who are interested in the services and products you offer? Are looking for exposure, to increase sales, and to quickly develop awareness for your website? If your answer is YES, you can achieve these things only if you get your site on the network I am talking about. This traffic service advertises you to thousands, while also giving you a chance to test the network before paying anything at all. All the popular blogs are using this service to boost their traffic and ad revenue! Why aren’t you? And what is better than traffic? It’s recurring traffic! That\'s how running a successful site works... Here\'s to your success! Find out more here: http://lis.ovh/is',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(369,495,'Vickie Figueroa','wkncwqjivop@eipopnyahs.com','http://bravohrgrp.com/bp','5.231.237.231','2017-03-16 14:29:10','2017-03-16 14:29:10','I was just looking at your 从源码角度分析 golang 协程 goroutines | Winter is coming website and see that your website has the potential to become very popular. I just want to tell you, In case you don\'t already know... There is a website network which already has more than 16 million users, and the majority of the users are interested in websites like yours. By getting your website on this service you have a chance to get your site more visitors than you can imagine. It is free to sign up and you can read more about it here: http://bravohrgrp.com/bp - Now, let me ask you... Do you need your site to be successful to maintain your business? Do you need targeted visitors who are interested in the services and products you offer? Are looking for exposure, to increase sales, and to quickly develop awareness for your site? If your answer is YES, you can achieve these things only if you get your site on the network I am describing. This traffic network advertises you to thousands, while also giving you a chance to test the network before paying anything at all. All the popular sites are using this network to boost their readership and ad revenue! Why aren’t you? And what is better than traffic? It’s recurring traffic! That\'s how running a successful website works... Here\'s to your success! Read more here: http://smpl.city/events/7Yypu',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(370,495,'Davidrak','davidvow@mail.ru','https://www.viagrasansordonnancefr.com/','46.119.121.170','2017-03-17 14:45:14','2017-03-17 14:45:14','Do you feel the pain of acid reflux? Do you feel a fire inside your chest? Are you miserable? Are you ready for the issues to stop? Continue reading to find out how. Keep reading to learn to control acid reflux for good and to end the misery for good. \r\n \r\nYou may need to balance out hydrochloric acid amounts in your body if you want to reduce acid reflux and its symptoms. You can do this, for instance, by using sea salt rather than table salt. Sea salt has chloride and minerals that are good for the stomach and prevent acid. \r\n \r\n \r\n \r\n \r\n<a href=\"https://www.viagrasansordonnancefr.com/viagra-feminin-forum-buy/\" rel=\"nofollow\">https://www.viagrasansordonnancefr.com/viagra-feminin-forum-buy/</a>',0,'0','Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36','',0,0),(371,335,'Billytrums','ian@web2web.stream','http://cialisonline2017.com','46.161.9.20','2017-03-21 08:03:32','2017-03-21 08:03:32','wh0cd893774 <a href=\"http://viagraprice2017.com/\" rel=\"nofollow\">viagra</a>',0,'0','Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36','',0,0),(372,495,'https://www.viagrasansordonnancefr.com/viagra-naturel-femme-fait-maison/','tory.chinnery@wildmail.com','https://www.viagrasansordonnancefr.com/viagra-naturel-femme-fait-maison/','178.137.95.251','2017-03-23 06:37:05','2017-03-23 06:37:05','Simply want to say your article is as amazing.\r\nThe clearness in your post is just cool and i could assume you are an expert on this subject.\r\nWell with your permission allow me to grab your RSS feed to keep updated with forthcoming post.\r\nThanks a million and please keep up the rewarding work.',0,'0','Opera/9.80 (Windows NT 6.2; Win64; x64) Presto/2.12.388 Version/12.17','',0,0),(373,298,'Tami Sandoval','luifvfeci@hlchjgovr.com','http://tiggi.es/1G','185.13.156.127','2017-03-25 23:19:13','2017-03-25 23:19:13','Hello my name is Tami Sandoval and I just wanted to send you a quick message here instead of calling you. I came to your golang之内存使用报告 | Winter is coming website and noticed you could have a lot more hits. I have found that the key to running a successful website is making sure the visitors you are getting are interested in your subject matter. There is a company that you can get keyword targeted visitors from and they let you try their service for free for 7 days. I managed to get over 300 targeted visitors to day to my site. https://brevis.tk/S',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(374,558,'Tami Sandoval','dhldgaiccxl@rniajyfcp.com','http://soheavyblog.com/1m','5.230.31.69','2017-03-30 06:31:29','2017-03-30 06:31:29','I was just looking at your git merge 的时候 | Winter is coming website and see that your website has the potential to get a lot of visitors. I just want to tell you, In case you don\'t already know... There is a website service which already has more than 16 million users, and most of the users are looking for websites like yours. By getting your site on this network you have a chance to get your site more popular than you can imagine. It is free to sign up and you can find out more about it here: http://wntdco.mx/vlyb4 - Now, let me ask you... Do you need your website to be successful to maintain your way of life? Do you need targeted traffic who are interested in the services and products you offer? Are looking for exposure, to increase sales, and to quickly develop awareness for your site? If your answer is YES, you can achieve these things only if you get your site on the network I am talking about. This traffic network advertises you to thousands, while also giving you a chance to test the service before paying anything. All the popular blogs are using this network to boost their traffic and ad revenue! Why aren’t you? And what is better than traffic? It’s recurring traffic! That\'s how running a successful site works... Here\'s to your success! Read more here: http://soheavyblog.com/1m',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(375,354,'https://www.viagrasansordonnancefr.com/citrate-sildenafil-naturel-zenegra/','tommymcdonough@t-online.de','https://www.viagrasansordonnancefr.com/citrate-sildenafil-naturel-zenegra/','37.115.189.177','2017-04-01 16:12:03','2017-04-01 16:12:03','Today, I went to the beachfront with my kids. I found a sea shell and gave it to my \r\n4 year old daughter and said \"You can hear the ocean if you put this to your ear.\" She put the \r\nshell to her ear and screamed. There was a hermit crab inside and it pinched her ear.\r\n\r\nShe never wants to go back! LoL I know this is totally off \r\ntopic but I had to tell someone!',0,'0','Opera/9.80 (Windows NT 6.2; Win64; x64) Presto/2.12.388 Version/12.17','',0,0),(376,495,'afasaFad2da','sacasfa2dfa@gmail.com','http://brothosonkonlonwon.ru','93.179.89.63','2017-04-02 16:41:51','2017-04-02 16:41:51','lgun5D http://brothosonkonlonwon.ru check link',0,'0','Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1072.0 Safari/536.3','',0,0),(377,495,'Tami Sandoval','vwsclifxxoj@zdlojytl.com','http://wntdco.mx/vlyb4','185.13.156.124','2017-04-05 03:41:32','2017-04-05 03:41:32','Hello my name is Tami Sandoval and I just wanted to send you a quick message here instead of calling you. I discovered your 从源码角度分析 golang 协程 goroutines | Winter is coming website and noticed you could have a lot more visitors. I have found that the key to running a successful website is making sure the visitors you are getting are interested in your website topic. There is a company that you can get keyword targeted visitors from and they let you try their service for free for 7 days. I managed to get over 300 targeted visitors to day to my website. http://wntdco.mx/vlyb4',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(378,405,'meilleur massage lyon','denicegentile35@moon.krabbed.com','http://www.sophiechassat.com','46.17.99.83','2017-04-07 12:49:27','2017-04-07 12:49:27','Et, pour vous le dire tout d\'abord, le socialisme n\'a la pretention de convertir personne, ni l\'Eglise, qui nie l\'interet, ni l\'economie politique,\r\nqui l\'affirme; d\'autant moins qu\'il est convaincu qu\'elles ont \r\nraison toutes deux. http://www.sophiechassat.com',0,'0','Mozilla/5.0 (X11; Linux i686; rv:17.0) Gecko/20100101 Firefox/17.0','',0,0),(379,405,'White Bunk Bed Costco','ednaackerman@rng.droidpic.com','http://aboutbeliveau.com/index.php/component/k2/itemlist/user/25877','109.230.218.126','2017-04-10 16:59:28','2017-04-10 16:59:28','Sustain the excellent job and bringing in the crowd! http://aboutbeliveau.com/index.php/component/k2/itemlist/user/25877',0,'0','Opera/9.80 (Windows NT 6.2; Win64; x64) Presto/2.12.388 Version/12.17','',0,0),(380,405,'http://pontoonsonly.com/','jamilaruyle@small.shamroad.com','http://pontoonsonly.com/user/profile/1408','193.107.202.6','2017-04-11 00:28:41','2017-04-11 00:28:41','You\'re a really beneficial internet site; couldn\'t make it \r\nwithout ya! http://pontoonsonly.com/user/profile/1408',0,'0','Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:34.0) Gecko/20100101 Firefox/34.0','',0,0),(381,495,'Lela Guzman','yzbatofhwl@hiixvfqsg.com','http://soheavyblog.com/1m','5.231.237.231','2017-04-11 10:23:53','2017-04-11 10:23:53','Hello my name is Lela Guzman and I just wanted to drop you a quick message here instead of calling you. I discovered your 从源码角度分析 golang 协程 goroutines | Winter is coming page and noticed you could have a lot more hits. I have found that the key to running a popular website is making sure the visitors you are getting are interested in your website topic. There is a company that you can get keyword targeted visitors from and they let you try their service for free for 7 days. I managed to get over 300 targeted visitors to day to my website. http://soheavyblog.com/1m',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(382,664,'Bablofil','admin@bablofil.ru','https://bablofil.ru','95.73.72.104','2017-04-13 07:36:09','2017-04-13 07:36:09','Thanks, great article.',0,'0','Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1866.237 Safari/537.36','',0,0),(383,495,'Philipvox','jackyapril@gmail.com','http://stemmeries.xyz','46.161.9.40','2017-04-14 19:34:38','2017-04-14 19:34:38','http://stemmeries.xyz <a href=\"http://stemmeries.xyz\" rel=\"nofollow\">norsk kasino</a> http://stemmeries.xyz - norsk kasino',0,'0','Mozilla/5.0 (Windows NT 10.0; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0','',0,0),(384,335,'Erickirona','lazyblackdog@umail4less.men','http://cialiscost2017.com','46.161.9.20','2017-04-15 21:45:07','2017-04-15 21:45:07','wh0cd713306 <a href=\"http://viagraprice2017.com/\" rel=\"nofollow\">viagra price</a>',0,'0','Mozilla/5.0 (Windows NT 6.1; rv:44.0) Gecko/20100101 Firefox/44.0','',0,0),(385,495,'Elisa Brown','oijavjdcuc@zogsebqn.com','http://tdil.co/3p','94.249.160.106','2017-04-18 22:36:15','2017-04-18 22:36:15','This is a message to the 从源码角度分析 golang 协程 goroutines | Winter is coming admin. Your website is missing out on at least 300 visitors per day. I have found a company which offers to dramatically increase your traffic to your website: http://r.rokapack.com/19 - They offer 500 free targeted visitors during their free trial period and I managed to get over 30,000 visitors per month using their services, you could also get lot more targeted visitors than you have now. Hope this helps :)',0,'0','Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko','',0,0),(386,664,'里海之谜','brenda_mceachern@gmail.com','http://www.xn--9iqu37eq6ul8e.com/','106.87.96.6','2017-04-21 11:43:31','2017-04-21 11:43:31','洛施花舍\r\n我可以这样认为网站访问量上去!   \r\nthis image  鼓舞人心\r\n迷人的。意见始终不同,终归好的东西,得到好评。',0,'0','Opera/9.80 (Windows NT 6.2; Win64; x64) Presto/2.12.388 Version/12.17','',0,0);
/*!40000 ALTER TABLE `wp_comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_links`
--

DROP TABLE IF EXISTS `wp_links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) NOT NULL DEFAULT '',
  `link_name` varchar(255) NOT NULL DEFAULT '',
  `link_image` varchar(255) NOT NULL DEFAULT '',
  `link_target` varchar(25) NOT NULL DEFAULT '',
  `link_description` varchar(255) NOT NULL DEFAULT '',
  `link_visible` varchar(20) NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) NOT NULL DEFAULT '',
  `link_notes` mediumtext NOT NULL,
  `link_rss` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_links`
--

LOCK TABLES `wp_links` WRITE;
/*!40000 ALTER TABLE `wp_links` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_options`
--

DROP TABLE IF EXISTS `wp_options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(64) NOT NULL DEFAULT '',
  `option_value` longtext NOT NULL,
  `autoload` varchar(20) NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`)
) ENGINE=MyISAM AUTO_INCREMENT=24513 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_options`
--

LOCK TABLES `wp_options` WRITE;
/*!40000 ALTER TABLE `wp_options` DISABLE KEYS */;
INSERT INTO `wp_options` VALUES (1,'siteurl','http://unasm.com','yes'),(2,'home','http://unasm.com','yes'),(3,'blogname','Winter is coming','yes'),(4,'blogdescription','Valar Morghulis','yes'),(5,'users_can_register','0','yes'),(6,'admin_email','unasm@sina.cn','yes'),(7,'start_of_week','1','yes'),(8,'use_balanceTags','0','yes'),(9,'use_smilies','1','yes'),(10,'require_name_email','1','yes'),(11,'comments_notify','1','yes'),(12,'posts_per_rss','10','yes'),(13,'rss_use_excerpt','0','yes'),(14,'mailserver_url','mail.example.com','yes'),(15,'mailserver_login','login@example.com','yes'),(16,'mailserver_pass','password','yes'),(17,'mailserver_port','110','yes'),(18,'default_category','1','yes'),(19,'default_comment_status','open','yes'),(20,'default_ping_status','open','yes'),(21,'default_pingback_flag','1','yes'),(22,'posts_per_page','10','yes'),(23,'date_format','F j, Y','yes'),(24,'time_format','g:i a','yes'),(25,'links_updated_date_format','F j, Y g:i a','yes'),(26,'comment_moderation','0','yes'),(27,'moderation_notify','1','yes'),(28,'permalink_structure','/%year%/%monthnum%/%post_id%/','yes'),(29,'gzipcompression','0','yes'),(30,'hack_file','0','yes'),(31,'blog_charset','UTF-8','yes'),(32,'moderation_keys','','no'),(33,'active_plugins','a:2:{i:0;s:19:\"akismet/akismet.php\";i:1;s:39:\"syntaxhighlighter/syntaxhighlighter.php\";}','yes'),(34,'category_base','','yes'),(35,'ping_sites','http://rpc.pingomatic.com/','yes'),(36,'advanced_edit','0','yes'),(37,'comment_max_links','2','yes'),(38,'gmt_offset','0','yes'),(39,'default_email_category','1','yes'),(40,'recently_edited','','no'),(41,'template','mh-magazine-lite','yes'),(42,'stylesheet','mh-magazine-lite','yes'),(43,'comment_whitelist','1','yes'),(44,'blacklist_keys','','no'),(45,'comment_registration','0','yes'),(46,'html_type','text/html','yes'),(47,'use_trackback','0','yes'),(48,'default_role','subscriber','yes'),(49,'db_version','29630','yes'),(50,'uploads_use_yearmonth_folders','1','yes'),(51,'upload_path','','yes'),(52,'blog_public','1','yes'),(53,'default_link_category','2','yes'),(54,'show_on_front','posts','yes'),(55,'tag_base','','yes'),(56,'show_avatars','1','yes'),(57,'avatar_rating','G','yes'),(58,'upload_url_path','','yes'),(59,'thumbnail_size_w','150','yes'),(60,'thumbnail_size_h','150','yes'),(61,'thumbnail_crop','1','yes'),(62,'medium_size_w','300','yes'),(63,'medium_size_h','300','yes'),(64,'avatar_default','mystery','yes'),(65,'large_size_w','1024','yes'),(66,'large_size_h','1024','yes'),(67,'image_default_link_type','file','yes'),(68,'image_default_size','','yes'),(69,'image_default_align','','yes'),(70,'close_comments_for_old_posts','0','yes'),(71,'close_comments_days_old','14','yes'),(72,'thread_comments','1','yes'),(73,'thread_comments_depth','5','yes'),(74,'page_comments','0','yes'),(75,'comments_per_page','50','yes'),(76,'default_comments_page','newest','yes'),(77,'comment_order','asc','yes'),(78,'sticky_posts','a:0:{}','yes'),(79,'widget_categories','a:4:{i:2;a:4:{s:5:\"title\";s:10:\"categories\";s:5:\"count\";i:1;s:12:\"hierarchical\";i:1;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;i:4;a:0:{}i:6;a:0:{}}','yes'),(80,'widget_text','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(81,'widget_rss','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(82,'uninstall_plugins','a:0:{}','no'),(83,'timezone_string','','yes'),(84,'page_for_posts','0','yes'),(85,'page_on_front','0','yes'),(86,'default_post_format','0','yes'),(87,'link_manager_enabled','0','yes'),(88,'initial_db_version','29630','yes'),(89,'wp_user_roles','a:5:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:62:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:9:\"add_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:34:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}}','yes'),(90,'widget_search','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(91,'widget_recent-posts','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(92,'widget_recent-comments','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(93,'widget_archives','a:2:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(94,'widget_meta','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(95,'sidebars_widgets','a:14:{s:19:\"wp_inactive_widgets\";a:1:{i:0;s:12:\"categories-4\";}s:7:\"sidebar\";a:6:{i:0;s:8:\"search-2\";i:1;s:12:\"categories-2\";i:2;s:14:\"recent-posts-2\";i:3;s:17:\"recent-comments-2\";i:4;s:6:\"meta-2\";i:5;s:10:\"archives-2\";}s:6:\"home-1\";a:0:{}s:6:\"home-2\";a:0:{}s:6:\"home-3\";a:0:{}s:6:\"home-4\";a:0:{}s:6:\"home-5\";a:0:{}s:7:\"posts-1\";a:0:{}s:7:\"posts-2\";a:0:{}s:8:\"footer-1\";a:0:{}s:8:\"footer-2\";a:0:{}s:8:\"footer-3\";a:0:{}s:8:\"footer-4\";a:0:{}s:13:\"array_version\";i:3;}','yes'),(96,'cron','a:7:{i:1493482599;a:3:{s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1493482705;a:1:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1493482849;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1493493180;a:1:{s:20:\"wp_maybe_auto_update\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1493503249;a:1:{s:29:\"akismet_schedule_cron_recheck\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:2:{s:8:\"schedule\";b:0;s:4:\"args\";a:0:{}}}}i:1493543993;a:1:{s:24:\"akismet_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}s:7:\"version\";i:2;}','yes'),(24184,'_transient_timeout_plugin_slugs','1492179614','no'),(24185,'_transient_plugin_slugs','a:3:{i:0;s:19:\"akismet/akismet.php\";i:1;s:9:\"hello.php\";i:2;s:39:\"syntaxhighlighter/syntaxhighlighter.php\";}','no'),(98,'_site_transient_update_core','O:8:\"stdClass\":4:{s:7:\"updates\";a:9:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:7:\"upgrade\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.7.4.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.7.4.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.7.4-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.7.4-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"4.7.4\";s:7:\"version\";s:5:\"4.7.4\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.7\";s:15:\"partial_version\";s:0:\"\";}i:1;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.7.4.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.7.4.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.7.4-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.7.4-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"4.7.4\";s:7:\"version\";s:5:\"4.7.4\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.7\";s:15:\"partial_version\";s:0:\"\";}i:2;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.6.5.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.6.5.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.6.5-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.6.5-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"4.6.5\";s:7:\"version\";s:5:\"4.6.5\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.7\";s:15:\"partial_version\";s:0:\"\";}i:3;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.5.8.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.5.8.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.5.8-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.5.8-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"4.5.8\";s:7:\"version\";s:5:\"4.5.8\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.7\";s:15:\"partial_version\";s:0:\"\";}i:4;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.4.9.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.4.9.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.4.9-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.4.9-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"4.4.9\";s:7:\"version\";s:5:\"4.4.9\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.7\";s:15:\"partial_version\";s:0:\"\";}i:5;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.3.10.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.3.10.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.3.10-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-4.3.10-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"4.3.10\";s:7:\"version\";s:6:\"4.3.10\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.7\";s:15:\"partial_version\";s:0:\"\";}i:6;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.2.14.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.2.14.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.2.14-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-4.2.14-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"4.2.14\";s:7:\"version\";s:6:\"4.2.14\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.7\";s:15:\"partial_version\";s:0:\"\";}i:7;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.1.17.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.1.17.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.1.17-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-4.1.17-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"4.1.17\";s:7:\"version\";s:6:\"4.1.17\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.7\";s:15:\"partial_version\";s:0:\"\";}i:8;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.0.17.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.0.17.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.0.17-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-4.0.17-new-bundled.zip\";s:7:\"partial\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.0.17-partial-0.zip\";s:8:\"rollback\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.0.17-rollback-0.zip\";}s:7:\"current\";s:6:\"4.0.17\";s:7:\"version\";s:6:\"4.0.17\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.7\";s:15:\"partial_version\";s:3:\"4.0\";}}s:12:\"last_checked\";i:1493481650;s:15:\"version_checked\";s:3:\"4.0\";s:12:\"translations\";a:0:{}}','yes'),(99,'_transient_random_seed','27c429e75db8f1169d5f9f41c983c02c','yes'),(104,'_site_transient_timeout_browser_911c38ec5b2406f6449b2faaa5df8ef4','1412093811','yes'),(105,'_site_transient_browser_911c38ec5b2406f6449b2faaa5df8ef4','a:9:{s:8:\"platform\";s:5:\"Linux\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"37.0.2062.94\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(24506,'_site_transient_timeout_theme_roots','1493483450','yes'),(24507,'_site_transient_theme_roots','a:1:{s:16:\"mh-magazine-lite\";s:7:\"/themes\";}','yes'),(106,'can_compress_scripts','1','yes'),(5236,'auto_core_update_notified','a:4:{s:4:\"type\";s:6:\"manual\";s:5:\"email\";s:13:\"unasm@sina.cn\";s:7:\"version\";s:5:\"4.7.1\";s:9:\"timestamp\";i:1484671068;}','yes'),(4867,'akismet_spam_count','332','yes'),(7158,'_site_transient_timeout_browser_f42b31ad79324a39a3686c9e84dca78f','1441787304','yes'),(7159,'_site_transient_browser_f42b31ad79324a39a3686c9e84dca78f','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"38.0.2125.122\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(2427,'_site_transient_timeout_browser_323693d9a6629ad0cbf835542deece21','1423540473','yes'),(2428,'_site_transient_browser_323693d9a6629ad0cbf835542deece21','a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"40.0.2214.93\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(2401,'_site_transient_timeout_browser_f226bac4ec3ff5d4470bb3265085b823','1423449454','yes'),(2402,'_site_transient_browser_f226bac4ec3ff5d4470bb3265085b823','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"38.0.2125.122\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(1421,'_site_transient_timeout_browser_bd68ee072619cc501ea72a8a85d99394','1418808219','yes'),(1422,'_site_transient_browser_bd68ee072619cc501ea72a8a85d99394','a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"39.0.2171.71\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(1612,'_site_transient_timeout_browser_55b6eafc563f3dc443484bb0b8cea5cd','1419615971','yes'),(1613,'_site_transient_browser_55b6eafc563f3dc443484bb0b8cea5cd','a:9:{s:8:\"platform\";s:5:\"Linux\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"39.0.2171.65\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(1079,'_site_transient_timeout_browser_ffe987f151e76f045b0ef6f83affd047','1416988671','yes'),(1080,'_site_transient_browser_ffe987f151e76f045b0ef6f83affd047','a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"38.0.2125.111\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(1154,'_site_transient_timeout_browser_6641d7bd411ba5c9be9196d65cfa91cf','1417405016','yes'),(1155,'_site_transient_browser_6641d7bd411ba5c9be9196d65cfa91cf','a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"39.0.2171.65\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(5354,'_site_transient_timeout_browser_dfee61178f8ecdf6fc9c62608f01c2e5','1438069563','yes'),(5355,'_site_transient_browser_dfee61178f8ecdf6fc9c62608f01c2e5','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"38.0.2125.122\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(4805,'_site_transient_timeout_browser_43d1522b603688bda36781305c878d46','1436425733','yes'),(4806,'_site_transient_browser_43d1522b603688bda36781305c878d46','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:4:\"38.0\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"16\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(544,'_site_transient_timeout_browser_ee2391300fef479023f7633884798e79','1414395841','yes'),(545,'_site_transient_browser_ee2391300fef479023f7633884798e79','a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"37.0.2062.124\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(1549,'recently_activated','a:0:{}','yes'),(162,'theme_mods_twentythirteen','a:3:{i:0;b:0;s:16:\"header_textcolor\";s:6:\"220e10\";s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1411616184;s:4:\"data\";a:3:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:7:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";i:6;s:12:\"categories-4\";}s:9:\"sidebar-2\";a:0:{}}}}','yes'),(163,'widget_pages','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(164,'widget_calendar','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(165,'widget_tag_cloud','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(174,'theme_mods_iconic-one','a:15:{i:0;b:0;s:16:\"background_color\";s:6:\"e8e8e8\";s:16:\"background_image\";s:0:\"\";s:17:\"background_repeat\";s:6:\"repeat\";s:21:\"background_position_x\";s:4:\"left\";s:21:\"background_attachment\";s:6:\"scroll\";s:13:\"themonic_logo\";s:0:\"\";s:13:\"textarea_copy\";s:14:\"Copyright 2013\";s:17:\"custom_text_right\";s:17:\"Custom Text Right\";s:26:\"iconic_one_social_activate\";s:0:\"\";s:11:\"twitter_url\";s:19:\"http://twitter.com/\";s:12:\"facebook_url\";s:20:\"http://facebook.com/\";s:8:\"plus_url\";s:23:\"http://plus.google.com/\";s:7:\"rss_url\";s:21:\"http://wordpress.org/\";s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1412497132;s:4:\"data\";a:2:{s:19:\"wp_inactive_widgets\";a:1:{i:0;s:12:\"categories-4\";}s:16:\"themonic-sidebar\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}}}}','yes'),(166,'widget_nav_menu','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(172,'theme_mods_twentyfourteen','a:1:{s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1411647886;s:4:\"data\";a:4:{s:19:\"wp_inactive_widgets\";a:1:{i:0;s:12:\"categories-4\";}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:9:\"sidebar-2\";a:0:{}s:9:\"sidebar-3\";a:0:{}}}}','yes'),(173,'theme_mods_mh-magazine-lite','a:6:{i:0;b:0;s:16:\"background_color\";s:0:\"\";s:16:\"background_image\";s:0:\"\";s:17:\"background_repeat\";s:6:\"repeat\";s:21:\"background_position_x\";s:4:\"left\";s:21:\"background_attachment\";s:6:\"scroll\";}','yes'),(16834,'_transient_timeout_mailserver_last_checked','1470798170','no'),(16835,'_transient_mailserver_last_checked','1','no'),(24174,'_transient_timeout_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1492136411','no'),(24175,'_transient_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1492093211','no'),(24511,'_site_transient_update_themes','O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1493481654;s:7:\"checked\";a:1:{s:16:\"mh-magazine-lite\";s:5:\"1.6.2\";}s:8:\"response\";a:1:{s:16:\"mh-magazine-lite\";a:4:{s:5:\"theme\";s:16:\"mh-magazine-lite\";s:11:\"new_version\";s:5:\"2.6.3\";s:3:\"url\";s:46:\"https://wordpress.org/themes/mh-magazine-lite/\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/theme/mh-magazine-lite.2.6.3.zip\";}}s:12:\"translations\";a:0:{}}','yes'),(24512,'_site_transient_update_plugins','O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1493481654;s:8:\"response\";a:1:{s:19:\"akismet/akismet.php\";O:8:\"stdClass\":8:{s:2:\"id\";s:21:\"w.org/plugins/akismet\";s:4:\"slug\";s:7:\"akismet\";s:6:\"plugin\";s:19:\"akismet/akismet.php\";s:11:\"new_version\";s:3:\"3.3\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/akismet/\";s:7:\"package\";s:54:\"https://downloads.wordpress.org/plugin/akismet.3.3.zip\";s:6:\"tested\";s:5:\"4.7.4\";s:13:\"compatibility\";a:0:{}}}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:2:{s:9:\"hello.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:25:\"w.org/plugins/hello-dolly\";s:4:\"slug\";s:11:\"hello-dolly\";s:6:\"plugin\";s:9:\"hello.php\";s:11:\"new_version\";s:3:\"1.6\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/hello-dolly/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/plugin/hello-dolly.1.6.zip\";}s:39:\"syntaxhighlighter/syntaxhighlighter.php\";O:8:\"stdClass\":8:{s:2:\"id\";s:31:\"w.org/plugins/syntaxhighlighter\";s:4:\"slug\";s:17:\"syntaxhighlighter\";s:6:\"plugin\";s:39:\"syntaxhighlighter/syntaxhighlighter.php\";s:11:\"new_version\";s:5:\"3.2.1\";s:3:\"url\";s:48:\"https://wordpress.org/plugins/syntaxhighlighter/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/syntaxhighlighter.zip\";s:6:\"tested\";s:5:\"4.5.5\";s:13:\"compatibility\";a:0:{}}}}','yes'),(117,'_transient_twentyfourteen_category_count','1','yes'),(121,'current_theme','MH Magazine lite','yes'),(122,'theme_mods_twentytwelve','a:2:{i:0;b:0;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1411615664;s:4:\"data\";a:4:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:9:\"sidebar-2\";a:0:{}s:9:\"sidebar-3\";a:0:{}}}}','yes'),(123,'theme_switched','','yes'),(24188,'category_children','a:0:{}','yes'),(1537,'_site_transient_timeout_browser_4e45a09aebcb119b166d6999669b59cf','1419388237','yes'),(1538,'_site_transient_browser_4e45a09aebcb119b166d6999669b59cf','a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"39.0.2171.95\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(135,'_site_transient_browser_00556b0801fc900830c4816319ef64ed','a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"37.0.2062.120\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(134,'_site_transient_timeout_browser_00556b0801fc900830c4816319ef64ed','1412140710','yes'),(15360,'_site_transient_timeout_wporg_theme_feature_list','1466507127','yes'),(15361,'_site_transient_wporg_theme_feature_list','a:4:{s:6:\"Colors\";a:15:{i:0;s:5:\"black\";i:1;s:4:\"blue\";i:2;s:5:\"brown\";i:3;s:4:\"gray\";i:4;s:5:\"green\";i:5;s:6:\"orange\";i:6;s:4:\"pink\";i:7;s:6:\"purple\";i:8;s:3:\"red\";i:9;s:6:\"silver\";i:10;s:3:\"tan\";i:11;s:5:\"white\";i:12;s:6:\"yellow\";i:13;s:4:\"dark\";i:14;s:5:\"light\";}s:6:\"Layout\";a:9:{i:0;s:12:\"fixed-layout\";i:1;s:12:\"fluid-layout\";i:2;s:17:\"responsive-layout\";i:3;s:10:\"one-column\";i:4;s:11:\"two-columns\";i:5;s:13:\"three-columns\";i:6;s:12:\"four-columns\";i:7;s:12:\"left-sidebar\";i:8;s:13:\"right-sidebar\";}s:8:\"Features\";a:20:{i:0;s:19:\"accessibility-ready\";i:1;s:8:\"blavatar\";i:2;s:10:\"buddypress\";i:3;s:17:\"custom-background\";i:4;s:13:\"custom-colors\";i:5;s:13:\"custom-header\";i:6;s:11:\"custom-menu\";i:7;s:12:\"editor-style\";i:8;s:21:\"featured-image-header\";i:9;s:15:\"featured-images\";i:10;s:15:\"flexible-header\";i:11;s:20:\"front-page-post-form\";i:12;s:19:\"full-width-template\";i:13;s:12:\"microformats\";i:14;s:12:\"post-formats\";i:15;s:20:\"rtl-language-support\";i:16;s:11:\"sticky-post\";i:17;s:13:\"theme-options\";i:18;s:17:\"threaded-comments\";i:19;s:17:\"translation-ready\";}s:7:\"Subject\";a:3:{i:0;s:7:\"holiday\";i:1;s:13:\"photoblogging\";i:2;s:8:\"seasonal\";}}','yes'),(321,'_site_transient_timeout_browser_09bf974da0437925889a226ba456ba86','1413424331','yes'),(322,'_site_transient_browser_09bf974da0437925889a226ba456ba86','a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"37.0.2062.124\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(1742,'_site_transient_timeout_browser_e2dac078614f265d81556be3b4171923','1420278716','yes'),(1743,'_site_transient_browser_e2dac078614f265d81556be3b4171923','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"39.0.2171.95\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(5216,'WPLANG','','yes'),(552,'widget_mh_affiliate','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(553,'widget_mh_custom_posts','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(554,'widget_mh_facebook','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(555,'widget_mh_slider_hp','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(556,'mh_options','a:11:{s:7:\"full_bg\";s:0:\"\";s:14:\"no_prettyphoto\";s:0:\"\";s:14:\"excerpt_length\";s:3:\"125\";s:12:\"excerpt_more\";s:5:\"[...]\";s:11:\"sb_position\";s:5:\"right\";s:10:\"author_box\";s:0:\"\";s:14:\"comments_pages\";s:0:\"\";s:8:\"post_nav\";s:0:\"\";s:13:\"related_posts\";s:0:\"\";s:10:\"custom_css\";s:0:\"\";s:13:\"tracking_code\";s:0:\"\";}','yes'),(5214,'_site_transient_timeout_available_translations','1437123556','yes'),(5215,'_site_transient_available_translations','a:41:{s:2:\"ar\";a:8:{s:8:\"language\";s:2:\"ar\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-04 15:44:04\";s:12:\"english_name\";s:6:\"Arabic\";s:11:\"native_name\";s:14:\"العربية\";s:7:\"package\";s:58:\"http://downloads.wordpress.org/translation/core/4.0/ar.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ar\";i:2;s:3:\"ara\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:16:\"المتابعة\";}}s:2:\"az\";a:8:{s:8:\"language\";s:2:\"az\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-10-01 13:29:39\";s:12:\"english_name\";s:11:\"Azerbaijani\";s:11:\"native_name\";s:16:\"Azərbaycan dili\";s:7:\"package\";s:58:\"http://downloads.wordpress.org/translation/core/4.0/az.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"az\";i:2;s:3:\"aze\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:5:\"Davam\";}}s:5:\"bg_BG\";a:8:{s:8:\"language\";s:5:\"bg_BG\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-10-08 11:17:50\";s:12:\"english_name\";s:9:\"Bulgarian\";s:11:\"native_name\";s:18:\"Български\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/bg_BG.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"bg\";i:2;s:3:\"bul\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:22:\"Продължение\";}}s:5:\"bs_BA\";a:8:{s:8:\"language\";s:5:\"bs_BA\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-04 15:47:16\";s:12:\"english_name\";s:7:\"Bosnian\";s:11:\"native_name\";s:8:\"Bosanski\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/bs_BA.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"bs\";i:2;s:3:\"bos\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Nastavi\";}}s:2:\"ca\";a:8:{s:8:\"language\";s:2:\"ca\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-10-19 13:59:46\";s:12:\"english_name\";s:7:\"Catalan\";s:11:\"native_name\";s:7:\"Català\";s:7:\"package\";s:58:\"http://downloads.wordpress.org/translation/core/4.0/ca.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ca\";i:2;s:3:\"cat\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continua\";}}s:2:\"cy\";a:8:{s:8:\"language\";s:2:\"cy\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-04 16:43:49\";s:12:\"english_name\";s:5:\"Welsh\";s:11:\"native_name\";s:7:\"Cymraeg\";s:7:\"package\";s:58:\"http://downloads.wordpress.org/translation/core/4.0/cy.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"cy\";i:2;s:3:\"cym\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Parhau\";}}s:5:\"da_DK\";a:8:{s:8:\"language\";s:5:\"da_DK\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-10-22 11:59:16\";s:12:\"english_name\";s:6:\"Danish\";s:11:\"native_name\";s:5:\"Dansk\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/da_DK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"da\";i:2;s:3:\"dan\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"Forts&#230;t\";}}s:5:\"de_DE\";a:8:{s:8:\"language\";s:5:\"de_DE\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-10-26 13:41:46\";s:12:\"english_name\";s:6:\"German\";s:11:\"native_name\";s:7:\"Deutsch\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/de_DE.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"de\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"Fortfahren\";}}s:5:\"en_AU\";a:8:{s:8:\"language\";s:5:\"en_AU\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-06 00:56:37\";s:12:\"english_name\";s:19:\"English (Australia)\";s:11:\"native_name\";s:19:\"English (Australia)\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/en_AU.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"en_GB\";a:8:{s:8:\"language\";s:5:\"en_GB\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-04 08:52:52\";s:12:\"english_name\";s:12:\"English (UK)\";s:11:\"native_name\";s:12:\"English (UK)\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/en_GB.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"en_CA\";a:8:{s:8:\"language\";s:5:\"en_CA\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-05 00:31:07\";s:12:\"english_name\";s:16:\"English (Canada)\";s:11:\"native_name\";s:16:\"English (Canada)\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/en_CA.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"es_CL\";a:8:{s:8:\"language\";s:5:\"es_CL\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-04 19:47:01\";s:12:\"english_name\";s:15:\"Spanish (Chile)\";s:11:\"native_name\";s:17:\"Español de Chile\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/es_CL.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"es\";i:2;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_PE\";a:8:{s:8:\"language\";s:5:\"es_PE\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-04 07:49:30\";s:12:\"english_name\";s:14:\"Spanish (Peru)\";s:11:\"native_name\";s:17:\"Español de Perú\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/es_PE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"es\";i:2;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_ES\";a:8:{s:8:\"language\";s:5:\"es_ES\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-04 17:40:25\";s:12:\"english_name\";s:15:\"Spanish (Spain)\";s:11:\"native_name\";s:8:\"Español\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/es_ES.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"es\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:2:\"eu\";a:8:{s:8:\"language\";s:2:\"eu\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-05 06:55:23\";s:12:\"english_name\";s:6:\"Basque\";s:11:\"native_name\";s:7:\"Euskara\";s:7:\"package\";s:58:\"http://downloads.wordpress.org/translation/core/4.0/eu.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"eu\";i:2;s:3:\"eus\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Jarraitu\";}}s:5:\"fa_IR\";a:8:{s:8:\"language\";s:5:\"fa_IR\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-05 15:58:20\";s:12:\"english_name\";s:7:\"Persian\";s:11:\"native_name\";s:10:\"فارسی\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/fa_IR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"fa\";i:2;s:3:\"fas\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"ادامه\";}}s:2:\"fi\";a:8:{s:8:\"language\";s:2:\"fi\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-10-06 08:32:55\";s:12:\"english_name\";s:7:\"Finnish\";s:11:\"native_name\";s:5:\"Suomi\";s:7:\"package\";s:58:\"http://downloads.wordpress.org/translation/core/4.0/fi.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"fi\";i:2;s:3:\"fin\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:5:\"Jatka\";}}s:5:\"fr_FR\";a:8:{s:8:\"language\";s:5:\"fr_FR\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-10-04 17:49:48\";s:12:\"english_name\";s:15:\"French (France)\";s:11:\"native_name\";s:9:\"Français\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/fr_FR.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"fr\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuer\";}}s:2:\"gd\";a:8:{s:8:\"language\";s:2:\"gd\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-05 17:37:43\";s:12:\"english_name\";s:15:\"Scottish Gaelic\";s:11:\"native_name\";s:9:\"Gàidhlig\";s:7:\"package\";s:58:\"http://downloads.wordpress.org/translation/core/4.0/gd.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"gd\";i:2;s:3:\"gla\";i:3;s:3:\"gla\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:15:\"Lean air adhart\";}}s:5:\"gl_ES\";a:8:{s:8:\"language\";s:5:\"gl_ES\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-04 01:18:12\";s:12:\"english_name\";s:8:\"Galician\";s:11:\"native_name\";s:6:\"Galego\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/gl_ES.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"gl\";i:2;s:3:\"glg\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"he_IL\";a:8:{s:8:\"language\";s:5:\"he_IL\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-04 22:57:38\";s:12:\"english_name\";s:6:\"Hebrew\";s:11:\"native_name\";s:16:\"עִבְרִית\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/he_IL.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"he\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"להמשיך\";}}s:2:\"hr\";a:8:{s:8:\"language\";s:2:\"hr\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-20 14:09:34\";s:12:\"english_name\";s:8:\"Croatian\";s:11:\"native_name\";s:8:\"Hrvatski\";s:7:\"package\";s:58:\"http://downloads.wordpress.org/translation/core/4.0/hr.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"hr\";i:2;s:3:\"hrv\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Nastavi\";}}s:5:\"hu_HU\";a:8:{s:8:\"language\";s:5:\"hu_HU\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-04 19:12:04\";s:12:\"english_name\";s:9:\"Hungarian\";s:11:\"native_name\";s:6:\"Magyar\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/hu_HU.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"hu\";i:2;s:3:\"hun\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Tovább\";}}s:5:\"id_ID\";a:8:{s:8:\"language\";s:5:\"id_ID\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-04 11:26:19\";s:12:\"english_name\";s:10:\"Indonesian\";s:11:\"native_name\";s:16:\"Bahasa Indonesia\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/id_ID.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"id\";i:2;s:3:\"ind\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Lanjutkan\";}}s:5:\"it_IT\";a:8:{s:8:\"language\";s:5:\"it_IT\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-10-02 08:24:03\";s:12:\"english_name\";s:7:\"Italian\";s:11:\"native_name\";s:8:\"Italiano\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/it_IT.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"it\";i:2;s:3:\"ita\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continua\";}}s:2:\"ja\";a:8:{s:8:\"language\";s:2:\"ja\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-10-21 06:30:27\";s:12:\"english_name\";s:8:\"Japanese\";s:11:\"native_name\";s:9:\"日本語\";s:7:\"package\";s:58:\"http://downloads.wordpress.org/translation/core/4.0/ja.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"ja\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"続ける\";}}s:5:\"ko_KR\";a:8:{s:8:\"language\";s:5:\"ko_KR\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-04 07:54:33\";s:12:\"english_name\";s:6:\"Korean\";s:11:\"native_name\";s:9:\"한국어\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/ko_KR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ko\";i:2;s:3:\"kor\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"계속\";}}s:5:\"my_MM\";a:8:{s:8:\"language\";s:5:\"my_MM\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-06 08:41:35\";s:12:\"english_name\";s:17:\"Myanmar (Burmese)\";s:11:\"native_name\";s:15:\"ဗမာစာ\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/my_MM.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"my\";i:2;s:3:\"mya\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:54:\"ဆက်လက်လုပ်ေဆာင်ပါ။\";}}s:5:\"nb_NO\";a:8:{s:8:\"language\";s:5:\"nb_NO\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-04 20:51:26\";s:12:\"english_name\";s:19:\"Norwegian (Bokmål)\";s:11:\"native_name\";s:13:\"Norsk bokmål\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/nb_NO.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nb\";i:2;s:3:\"nob\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Fortsett\";}}s:5:\"nl_NL\";a:8:{s:8:\"language\";s:5:\"nl_NL\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-17 06:23:19\";s:12:\"english_name\";s:5:\"Dutch\";s:11:\"native_name\";s:10:\"Nederlands\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/nl_NL.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nl\";i:2;s:3:\"nld\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Doorgaan\";}}s:5:\"pl_PL\";a:8:{s:8:\"language\";s:5:\"pl_PL\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-10-03 17:44:34\";s:12:\"english_name\";s:6:\"Polish\";s:11:\"native_name\";s:6:\"Polski\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/pl_PL.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"pl\";i:2;s:3:\"pol\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Kontynuuj\";}}s:5:\"pt_PT\";a:8:{s:8:\"language\";s:5:\"pt_PT\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-29 15:27:01\";s:12:\"english_name\";s:21:\"Portuguese (Portugal)\";s:11:\"native_name\";s:10:\"Português\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/pt_PT.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"pt\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"pt_BR\";a:8:{s:8:\"language\";s:5:\"pt_BR\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-10-30 13:29:44\";s:12:\"english_name\";s:19:\"Portuguese (Brazil)\";s:11:\"native_name\";s:20:\"Português do Brasil\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/pt_BR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"pt\";i:2;s:3:\"por\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"ru_RU\";a:8:{s:8:\"language\";s:5:\"ru_RU\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-10-21 12:32:07\";s:12:\"english_name\";s:7:\"Russian\";s:11:\"native_name\";s:14:\"Русский\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/ru_RU.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ru\";i:2;s:3:\"rus\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:20:\"Продолжить\";}}s:5:\"sk_SK\";a:8:{s:8:\"language\";s:5:\"sk_SK\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-20 13:05:09\";s:12:\"english_name\";s:6:\"Slovak\";s:11:\"native_name\";s:11:\"Slovenčina\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/sk_SK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sk\";i:2;s:3:\"slk\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"Pokračovať\";}}s:5:\"sr_RS\";a:8:{s:8:\"language\";s:5:\"sr_RS\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-04 15:37:38\";s:12:\"english_name\";s:7:\"Serbian\";s:11:\"native_name\";s:23:\"Српски језик\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/sr_RS.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sr\";i:2;s:3:\"srp\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:14:\"Настави\";}}s:5:\"sv_SE\";a:8:{s:8:\"language\";s:5:\"sv_SE\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-10-11 20:39:56\";s:12:\"english_name\";s:7:\"Swedish\";s:11:\"native_name\";s:7:\"Svenska\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/sv_SE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sv\";i:2;s:3:\"swe\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Fortsätt\";}}s:2:\"th\";a:8:{s:8:\"language\";s:2:\"th\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-10-09 03:43:17\";s:12:\"english_name\";s:4:\"Thai\";s:11:\"native_name\";s:9:\"ไทย\";s:7:\"package\";s:58:\"http://downloads.wordpress.org/translation/core/4.0/th.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"th\";i:2;s:3:\"tha\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:15:\"ต่อไป\";}}s:5:\"tr_TR\";a:8:{s:8:\"language\";s:5:\"tr_TR\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-05 17:57:59\";s:12:\"english_name\";s:7:\"Turkish\";s:11:\"native_name\";s:8:\"Türkçe\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/tr_TR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"tr\";i:2;s:3:\"tur\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:5:\"Devam\";}}s:5:\"zh_CN\";a:8:{s:8:\"language\";s:5:\"zh_CN\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-05 00:41:46\";s:12:\"english_name\";s:15:\"Chinese (China)\";s:11:\"native_name\";s:12:\"简体中文\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/zh_CN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"zh\";i:2;s:3:\"zho\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"继续\";}}s:5:\"zh_TW\";a:8:{s:8:\"language\";s:5:\"zh_TW\";s:7:\"version\";s:3:\"4.0\";s:7:\"updated\";s:19:\"2014-09-05 06:58:31\";s:12:\"english_name\";s:16:\"Chinese (Taiwan)\";s:11:\"native_name\";s:12:\"繁體中文\";s:7:\"package\";s:61:\"http://downloads.wordpress.org/translation/core/4.0/zh_TW.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"zh\";i:2;s:3:\"zho\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"繼續\";}}}','yes'),(2233,'_site_transient_timeout_browser_7926b9a496d31d06aab13b60974cb5e0','1422497764','yes'),(2234,'_site_transient_browser_7926b9a496d31d06aab13b60974cb5e0','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"38.0.2125.122\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(5241,'rewrite_rules','a:78:{s:47:\"category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:42:\"category/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:35:\"category/(.+?)/page/?([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:17:\"category/(.+?)/?$\";s:35:\"index.php?category_name=$matches[1]\";s:44:\"tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:39:\"tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:32:\"tag/([^/]+)/page/?([0-9]{1,})/?$\";s:43:\"index.php?tag=$matches[1]&paged=$matches[2]\";s:14:\"tag/([^/]+)/?$\";s:25:\"index.php?tag=$matches[1]\";s:45:\"type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:40:\"type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:33:\"type/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?post_format=$matches[1]&paged=$matches[2]\";s:15:\"type/([^/]+)/?$\";s:33:\"index.php?post_format=$matches[1]\";s:12:\"robots\\.txt$\";s:18:\"index.php?robots=1\";s:48:\".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$\";s:18:\"index.php?feed=old\";s:20:\".*wp-app\\.php(/.*)?$\";s:19:\"index.php?error=403\";s:18:\".*wp-register.php$\";s:23:\"index.php?register=true\";s:32:\"feed/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:27:\"(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:20:\"page/?([0-9]{1,})/?$\";s:28:\"index.php?&paged=$matches[1]\";s:41:\"comments/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:36:\"comments/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:44:\"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:39:\"search/(.+)/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:32:\"search/(.+)/page/?([0-9]{1,})/?$\";s:41:\"index.php?s=$matches[1]&paged=$matches[2]\";s:14:\"search/(.+)/?$\";s:23:\"index.php?s=$matches[1]\";s:47:\"author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:42:\"author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:35:\"author/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?author_name=$matches[1]&paged=$matches[2]\";s:17:\"author/([^/]+)/?$\";s:33:\"index.php?author_name=$matches[1]\";s:74:\"date/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:69:\"date/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:62:\"date/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]\";s:44:\"date/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$\";s:63:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]\";s:61:\"date/([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:56:\"date/([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:49:\"date/([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]\";s:31:\"date/([0-9]{4})/([0-9]{1,2})/?$\";s:47:\"index.php?year=$matches[1]&monthnum=$matches[2]\";s:48:\"date/([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:43:\"date/([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:36:\"date/([0-9]{4})/page/?([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&paged=$matches[2]\";s:18:\"date/([0-9]{4})/?$\";s:26:\"index.php?year=$matches[1]\";s:48:\"[0-9]{4}/[0-9]{1,2}/[0-9]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:58:\"[0-9]{4}/[0-9]{1,2}/[0-9]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:78:\"[0-9]{4}/[0-9]{1,2}/[0-9]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:73:\"[0-9]{4}/[0-9]{1,2}/[0-9]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:73:\"[0-9]{4}/[0-9]{1,2}/[0-9]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:45:\"([0-9]{4})/([0-9]{1,2})/([0-9]+)/trackback/?$\";s:66:\"index.php?year=$matches[1]&monthnum=$matches[2]&p=$matches[3]&tb=1\";s:65:\"([0-9]{4})/([0-9]{1,2})/([0-9]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:78:\"index.php?year=$matches[1]&monthnum=$matches[2]&p=$matches[3]&feed=$matches[4]\";s:60:\"([0-9]{4})/([0-9]{1,2})/([0-9]+)/(feed|rdf|rss|rss2|atom)/?$\";s:78:\"index.php?year=$matches[1]&monthnum=$matches[2]&p=$matches[3]&feed=$matches[4]\";s:53:\"([0-9]{4})/([0-9]{1,2})/([0-9]+)/page/?([0-9]{1,})/?$\";s:79:\"index.php?year=$matches[1]&monthnum=$matches[2]&p=$matches[3]&paged=$matches[4]\";s:60:\"([0-9]{4})/([0-9]{1,2})/([0-9]+)/comment-page-([0-9]{1,})/?$\";s:79:\"index.php?year=$matches[1]&monthnum=$matches[2]&p=$matches[3]&cpage=$matches[4]\";s:45:\"([0-9]{4})/([0-9]{1,2})/([0-9]+)(/[0-9]+)?/?$\";s:78:\"index.php?year=$matches[1]&monthnum=$matches[2]&p=$matches[3]&page=$matches[4]\";s:37:\"[0-9]{4}/[0-9]{1,2}/[0-9]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:47:\"[0-9]{4}/[0-9]{1,2}/[0-9]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:67:\"[0-9]{4}/[0-9]{1,2}/[0-9]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:62:\"[0-9]{4}/[0-9]{1,2}/[0-9]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:62:\"[0-9]{4}/[0-9]{1,2}/[0-9]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:56:\"([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:51:\"([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:44:\"([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]\";s:51:\"([0-9]{4})/([0-9]{1,2})/comment-page-([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&cpage=$matches[3]\";s:26:\"([0-9]{4})/([0-9]{1,2})/?$\";s:47:\"index.php?year=$matches[1]&monthnum=$matches[2]\";s:43:\"([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:38:\"([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:31:\"([0-9]{4})/page/?([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&paged=$matches[2]\";s:38:\"([0-9]{4})/comment-page-([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&cpage=$matches[2]\";s:13:\"([0-9]{4})/?$\";s:26:\"index.php?year=$matches[1]\";s:27:\".?.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\".?.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:20:\"(.?.+?)/trackback/?$\";s:35:\"index.php?pagename=$matches[1]&tb=1\";s:40:\"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:35:\"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:28:\"(.?.+?)/page/?([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&paged=$matches[2]\";s:35:\"(.?.+?)/comment-page-([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&cpage=$matches[2]\";s:20:\"(.?.+?)(/[0-9]+)?/?$\";s:47:\"index.php?pagename=$matches[1]&page=$matches[2]\";}','yes'),(24176,'_transient_timeout_feed_867bd5c64f85878d03a060509cd2f92c','1492136411','no'),(24177,'_transient_feed_867bd5c64f85878d03a060509cd2f92c','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:61:\"\n	\n	\n	\n	\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"WordPress Planet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"en\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"WordPress Planet - http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:50:{i:0;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"WPTavern: Hacked Home Routers are Launching Brute Force Attacks on WordPress Sites\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68715\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:93:\"https://wptavern.com/hacked-home-routers-are-launching-brute-force-attacks-on-wordpress-sites\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5930:\"<a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/04/fortune-cookie.jpg?ssl=1\"><img /></a>photo credit: Eduardo Mueses <a href=\"http://www.flickr.com/photos/38692570@N00/13082910524\">The Oracle</a> &#8211; <a href=\"https://creativecommons.org/licenses/by-nc-nd/2.0/\">(license)</a>\n<p>Security researchers at Wordfence are reporting that thousands of hacked home routers are <a href=\"https://www.wordfence.com/blog/2017/04/home-routers-attacking-wordpress/\" target=\"_blank\">attacking WordPress sites</a>. Wordfence firewall and malware scanner products are in use on more than 2 million WordPress sites and the company estimates that 6.7% of all attacks on these sites are coming from hacked home routers.</p>\n<p>&#8220;In the past month alone we have seen over 57,000 unique home routers being used to attack WordPress sites,&#8221; Wordfence CEO Mark Maunder said. &#8220;Those home networks are now being explored by hackers who have full access to them via the hacked home router. They can access workstations, mobile devices, wifi cameras, wifi climate control and any other devices that use the home WiFi network.&#8221;</p>\n<p>Maunder said his team has mostly seen brute force attacks targeting both wp-login.php (the traditional login endpoint for WordPress) and also XMLRPC login. They have also seen a small percentage of complex attacks. Wordfence has detected a total of 67 million individual attacks from the routers the company identified in March.</p>\n<p>While Wordfence researchers were creating their <a href=\"https://www.wordfence.com/blog/2017/04/march-2017-wordpress-attack-report/\" target=\"_blank\">monthly attack report</a>, they noticed that Algeria had jumped in rankings from position 60 to 24 in thier “Top Attacking Countries” list. Their review of attack data in Algeria revealed a &#8216;long tail&#8217; of more than 10,000 attacking IPs originating from an Algerian state owned ISP.</p>\n<p>A vulnerability known as &#8220;<a href=\"http://mis.fortunecook.ie/\" target=\"_blank\">misfortune cookie</a>&#8221; is being used in these attacks. It hijacks a service that ISP&#8217;s use to remotely manage home routers by listening on port number 7547. ISP&#8217;s should close general internet access to this port, but many have not.</p>\n<p>&#8220;It appears that attackers have exploited home routers on Algeria’s state owned telecommunications network and are using the exploited routers to attack WordPress websites globally,&#8221; Maunder said.</p>\n<p>Wordfence researchers scanned the devices to find out what services they are running and found that they are Zyxel routers usually used in a home internet setting. They found that many of them have a severe and well-known vulnerability in RomPager, the embedded web server from AllegroSoft.</p>\n<p>&#8220;We then dug deeper and discovered that many ISPs around the world have this same issue and those routers are attacking WordPress sites via brute force attacks,&#8221; Maunder said.</p>\n<p>I spoke with Tony Perez, CEO of <a href=\"https://sucuri.net/\" target=\"_blank\">Sucuri</a> to see if his team has detected anything similar. Sucuri also tracks <a href=\"https://sucuri.net/security-reports/brute-force/\" target=\"_blank\">WordPress brute force attempts</a>, but Perez said current numbers are not remarkable when compared historically to mid-2016.</p>\n<p>&#8220;I think the reason Sucuri and other companies are not seeing this is because it is a weak ranking signal for malicious behavior,&#8221; Maunder said. &#8220;As we point out in the <a href=\"https://www.wordfence.com/blog/2017/04/home-routers-attacking-wordpress/\" target=\"_blank\">report</a>, each of these IPs is only doing between 50 and 1000 attacks per month on sites. They also only attack for a few hours each. These combined are a very weak ranking signal for malicious behavior. That low frequency also makes the attacks more effective because they are less likely to be blocked.&#8221;</p>\n<p>This particular security issue is unusual in that the vulnerability is with the routers, not with WordPress itself. The attackers bulk hack thousands of devices, upload a WordPress attack script and a list of targets, and then they have thousands of routers under their control to attack WordPress sites.</p>\n<p>This type of botnet isn&#8217;t terribly uncommon, as <a href=\"https://blog.eset.ie/2017/04/06/sathurbot-distributed-wordpress-password-attack/\" target=\"_blank\">security researchers from from ESET recently uncovered a new malware called Sathurbot</a> that uses torrent files as a method of distributing coordinated brute-force attacks on WordPress sites. The vulnerability in this instance is not in the software but rather in weak WordPress administrator accounts.</p>\n<p>Protecting against brute force attacks starts with a strong administrator password. There are also many popular plugins, such as <a href=\"https://wordpress.org/plugins/wp-simple-firewall/\" target=\"_blank\">Shield Security</a>, the <a href=\"https://jetpack.com/support/security-features/\" target=\"_blank\">Jetpack Protect module</a>, <a href=\"https://wordpress.org/plugins/better-wp-security/\" target=\"_blank\">iThemes Security</a>, and <a href=\"https://wordpress.org/plugins/wordfence/\" target=\"_blank\">Wordfence</a>, which offer protection from brute force attacks.</p>\n<p>If you want to make sure your router is not vulnerable to being recruited for these attacks, Wordfence has created a <a href=\"https://www.wordfence.com/blog/2017/04/check-your-router/\" target=\"_blank\">tool</a> that makes it easy to check. It detects whether your home router has port 7547 open or if it’s running a vulnerable version of RomPager. If you find that your router is vulnerable or port 7547 is open, Wordfence has published <a href=\"https://www.wordfence.com/blog/2017/04/check-your-router/\" target=\"_blank\">instructions for how to secure your device</a>.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 13 Apr 2017 02:46:54 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"Matt: New Top 50 Restaurants\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"https://ma.tt/?p=47210\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:45:\"https://ma.tt/2017/04/new-top-50-restaurants/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1012:\"<p>There&#8217;s a new <a href=\"http://www.theworlds50best.com/\">&#8220;World&#8217;s 50 Best Restaurants&#8221; list</a> out! I follow the list and try to check out restaurants on it when I&#8217;m in the area, and as of last month had made it to 28 out of 50 of last year&#8217;s list. It&#8217;s a goal but in a rolling, gentle fashion: as the list changes every year I&#8217;ll probably never make it to 100%, but I enjoy exploring the highlighted folks and I&#8217;ve never had a bad meal at one. I was able to make it to <a href=\"https://www.elevenmadisonpark.com/\">Eleven Madison</a> last month and predicted they might take the top spot, which they did in a well-deserved win. As with any award, there are lots of detractors, but Scott Vogel at Houstonia has a great essay on <a href=\"https://www.houstoniamag.com/articles/2017/4/10/why-the-world-s-50-best-restaurants-list-matters\">Why the World&#8217;s 50 Best Restaurants List Matters</a>, which encapsulates nicely what the list represents to me.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 12 Apr 2017 17:44:09 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"HeroPress: A Bottomless World of Possibilities\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://heropress.com/?post_type=heropress-essays&p=1692\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://heropress.com/essays/bottomless-world-possibilities/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:6470:\"<img width=\"960\" height=\"480\" src=\"http://20094-presscdn.pagely.netdna-cdn.com/wp-content/uploads/2017/04/041217-min-1024x512.jpg\" class=\"attachment-large size-large wp-post-image\" alt=\"Pull Quote: I am quite lucky to wake up every morning and work, all on my own, in a country where 54% of the population are unemployed and over 70% are youth.\" /><p>I started playing with websites back in 2003. I was in secondary school and Internet was relatively new to Somalia. It arrived in 1998-99 but only very few people had internet in their homes. Luckily there were internet cafes and I was introduced to this guy who owned an internet cafe. He had a large collection of Somali music and wanted to upload to somewhere so he could share with other people. I put together a GeoCities website using Microsoft FrontPage.</p>\n<p>The site I built was literally a blank canvas with marquee at the top and links to the mp3 files.</p>\n<blockquote><p>The rest of the page was filled with animated gifs of waving flag, rotating globe and glittering stars.</p></blockquote>\n<p>I kept fiddling with FrontPage’s WYSIWYG tab. Every time I add new element to the visual tab I would immediately switch to the HTML tab and see how the generated code would look like. I have managed to teach myself some HTML this way, but I was still very uncomfortable with coding.</p>\n<h3>Buckling Down</h3>\n<p>After a while, I moved to Addis Ababa, Ethiopia and suddenly I had plenty of time so I decided to buy a web design book. It was basically an HTML tutorial and it helped me code table-based layouts without using a visual builder. This led me to discover CSS, PHP and, among other things, WordPress.</p>\n<blockquote><p>I would install and test almost every PHP-based CMS out there: Mambo, Joomla, Drupal and few others but I settled with WordPress.</p></blockquote>\n<p>WordPress was always user friendly and anyone with half-decent knowledge in HTML and CSS could open Kubrick (default theme until 2010) files in text editor and whip out something unique.</p>\n<h3>Leveling Up</h3>\n<p>It was around this time that I started to take freelance projects. My first WordPress project helped me buy a decent laptop, and suddenly other projects started to come. Most of my clients were people in Europe and United States.</p>\n<p>Getting paid was initially difficult. Most of international payment systems didn’t work in Somalia until very recently.</p>\n<blockquote><p>PayPal’s strict policy meant payment was one-way street: you can make payments but can’t receive or withdraw anything.</p></blockquote>\n<p>I managed to team up with someone in another country and we opened a shared account where we could receive the payments. My business partner would then transfer my slice to my local bank account. Things changed recently and although PayPal is still not an option, freelancers can get paid via international bank transfer or Payoneer.</p>\n<p>My experience with open source in general and WordPress in particular had positive impact in my life. I am quite lucky to wake up every morning and work, all on my own, in a country where <a href=\"http://www.undp.org/content/undp/en/home/librarypage/hdr/Somalia-human-development-report-2012.html\">54% of the population are unemployed and over 70% are youth</a>. This has prompted me to seek ways help other people to get into open source, creating hobbies and jobs for many young people who have a lot of time in their hands to learn, contribute and work with open source software.</p>\n<h3>Branching Out</h3>\n<p>Although the Internet keeps crushing physical borders and bureaucracy policies it doesn’t mean opportunities will magically come knocking on people’s doors. However, the advantage of investing in skills that allow the individual to go remote and tap a global market of design, development, copywriting or blogging, is that the individual is not dependent on the demand of the local market. Another advantage is that it helps the person connect to thousands of like-minded people from worldwide, whom you learn from and contribute to. It’s a bottomless world of possibilities.</p>\n<p>I have recently talked to few WordPress developers from different parts of Somalia and we were trying to figure out how we can organize a WordPress related event, preferably WordCamp Somalia. We didn’t set out time yet but it’s in our plans. Hopefully in 2018.</p>\n<div class=\"rtsocial-container rtsocial-container-align-right rtsocial-horizontal\"><div class=\"rtsocial-twitter-horizontal\"><div class=\"rtsocial-twitter-horizontal-button\"><a title=\"Tweet: A Bottomless World of Possibilities\" class=\"rtsocial-twitter-button\" href=\"https://twitter.com/share?text=A%20Bottomless%20World%20of%20Possibilities&via=heropress&url=https%3A%2F%2Fheropress.com%2Fessays%2Fbottomless-world-possibilities%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-fb-horizontal fb-light\"><div class=\"rtsocial-fb-horizontal-button\"><a title=\"Like: A Bottomless World of Possibilities\" class=\"rtsocial-fb-button rtsocial-fb-like-light\" href=\"https://www.facebook.com/sharer.php?u=https%3A%2F%2Fheropress.com%2Fessays%2Fbottomless-world-possibilities%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-linkedin-horizontal\"><div class=\"rtsocial-linkedin-horizontal-button\"><a class=\"rtsocial-linkedin-button\" href=\"https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fheropress.com%2Fessays%2Fbottomless-world-possibilities%2F&title=A+Bottomless+World+of+Possibilities\" rel=\"nofollow\" target=\"_blank\" title=\"Share: A Bottomless World of Possibilities\"></a></div></div><div class=\"rtsocial-pinterest-horizontal\"><div class=\"rtsocial-pinterest-horizontal-button\"><a class=\"rtsocial-pinterest-button\" href=\"https://pinterest.com/pin/create/button/?url=https://heropress.com/essays/bottomless-world-possibilities/&media=https://heropress.com/wp-content/uploads/2017/04/041217-min-150x150.jpg&description=A Bottomless World of Possibilities\" rel=\"nofollow\" target=\"_blank\" title=\"Pin: A Bottomless World of Possibilities\"></a></div></div><a rel=\"nofollow\" class=\"perma-link\" href=\"https://heropress.com/essays/bottomless-world-possibilities/\" title=\"A Bottomless World of Possibilities\"></a></div><p>The post <a rel=\"nofollow\" href=\"https://heropress.com/essays/bottomless-world-possibilities/\">A Bottomless World of Possibilities</a> appeared first on <a rel=\"nofollow\" href=\"https://heropress.com\">HeroPress</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 12 Apr 2017 12:00:38 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jamaal Jaamac\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:103:\"WPTavern: Advanced WordPress Facebook Group Moves to Curb Low Quality Content with Admin-Approved Posts\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68507\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:114:\"https://wptavern.com/advanced-wordpress-facebook-group-moves-to-curb-low-quality-content-with-admin-approved-posts\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5222:\"<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/04/Advanced-WordPress-Facebook-Group.jpg?ssl=1\"><img /></a></p>\n<p>The <a href=\"https://www.facebook.com/groups/advancedwp/\" target=\"_blank\">Advanced WordPress Facebook group</a> (AWP) is making a radical change. After three years of allowing members to post freely, the group&#8217;s administrators voted to restrict posting to admin-approved content only.</p>\n<p>The popular WordPress watering hole has amassed more than 28,000 members and plays host to many lively conversations. Over the years some have suggested the group switch to using a WordPress-powered site or forum, but Facebook&#8217;s infrastructure has proven to be a vital part of the community&#8217;s success. Most members are already tied into Facebook&#8217;s notification system for their personal accounts and posts receive much more exposure than if they were on a separate website.</p>\n<p>In more recent years, the group has struggled with a constant stream of low quality content, prompting admins to re-examine the group&#8217;s approach to posting.</p>\n<p>&#8220;Our current mode of moderation is reactive,&#8221; AWP admin Matt Cromwell said. &#8220;Every time a low-quality post gets posted to the group it adds to the noise, and sometimes it might be hours and hours or even a day until an admin removes it — which means thousands of people have experienced the group with more &#8216;noise&#8217; than it should have. Our only tools in the current setup of the group is for that noise to be added automatically, and the admins having to clean it up after the fact.&#8221;</p>\n<p>Cromwell said the group reached &#8220;a crisis moment&#8221; and several admins with experience in other large groups said content quality is much higher with admin-approved posts. The majority of the group&#8217;s 28 admins <a href=\"https://www.mattcromwell.com/awp-facebook-improving-content/\" target=\"_blank\">voted over the weekend to make the switch to admin-approved content only</a>. Cromwell said the vote breakdown included one abstention and six hesitant no votes.</p>\n<p>&#8220;Some might think that is a lot more work for admins, but the truth is that we’ll actually be able to focus less on moderating in a reactive way, moderating profiles and negativity, and instead admin in a proactive way, moderating content,&#8221; Cromwell said.</p>\n<p>AJ Zane is one of the six admins who voted against the new rule. He said he sees AWP as an extension of the physical San Diego AWP group where he and other members enjoy open-table discussions.</p>\n<p>&#8220;I’m voting ‘no’ because I think this group is about self moderation, open discussion, and letting the posts with good content bubble to the top,&#8221; Zane said. &#8220;If the physical AWP meetup was not a round table group of people sharing wins/bugs/discoveries/questions, but had curated presenters, I know I would not have been as excited to attend the sessions. You want curated content? Go to Torque, listen to WP Weekly. You want to share that you just realized a method you’ve been using for years has a parameter you never noticed, come to AWP.&#8221;</p>\n<p>Zane said he realizes that it is idealistic to say that &#8220;good content bubbles to the top,&#8221; since AWP wouldn&#8217;t have this problem if all the top posts were high quality.</p>\n<p>&#8220;Our group has grown to the size that we apparently need some guidance from the admins that care about a high caliber of content and a vibrant community, as opposed to the people trying to get quick fixes and actively malicious parties,&#8221; Zane said. He proposed that the group build a forum website where they could use Facebook&#8217;s authentication and set up curated and free-post rooms, but said he sees it as &#8220;a nice pipe dream,&#8221; since few people would have time to build it.</p>\n<p>Members <a href=\"https://www.facebook.com/groups/advancedwp/permalink/1461487913913418/\" target=\"_blank\">responded positively to the news</a> that posting is changing, with a few exceptions who are worried about moderators having conflicts of interest. Others expressed concerns about not receiving timely posts and replies if someone is in need of assistance. Admins reminded members that the purpose of the group is not for receiving personalized support on projects.</p>\n<p>Several members commented on the announcement, saying they were considering quitting the group because the negative posts and noise level had gotten so high. Many are hopeful that fewer posts will generate more engagement on the content.</p>\n<p>&#8220;We also would like to starting hosting new kinds of content,&#8221; Cromwell said. &#8220;With admin-approved posts we can better facilitate an AMA, or a Facebook Live, or any other type of content.&#8221;</p>\n<p>Cromwell said he expects there will be more work for admins in the first 4-8 weeks until members start to understand more intuitively what makes for a good post in the group. Members who are not sure if their content is appropriate can run it through the <a href=\"http://www.advancedwp.org/awp-contribution-wizard/\" target=\"_blank\">AWP Contribution Wizard</a>.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 11 Apr 2017 21:58:16 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"WPTavern: WordCamp for Publishers to be Held in Denver, August 17-19\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68564\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:78:\"https://wptavern.com/wordcamp-for-publishers-to-be-held-in-denver-august-17-19\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4385:\"<a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2016/01/coffee-newspaper.jpg?ssl=1\"><img /></a>Coffee Cup on Table &#8212; Image by © Michael Prince/CORBIS\n<p>The first ever <a href=\"https://2017-denver.journalist.wordcamp.org/\" target=\"_blank\">WordCamp for Publishers</a> will be held August 17-19 in Denver, Colorado. The niche WordCamp will be open to anyone who uses WordPress to manage a publication, no matter what size. Organizers submitted an application last November and received approval from WordCamp Central in February.</p>\n<blockquote class=\"twitter-tweet\">\n<p lang=\"en\" dir=\"ltr\">A huge thanks to <a href=\"https://twitter.com/wordcamp\">@wordcamp</a> for letting us try this out. It\'s the first national WordCamp focused on a specific topic/industry.</p>\n<p>&mdash; Adam Schweigert (@aschweig) <a href=\"https://twitter.com/aschweig/status/850040392812810241\">April 6, 2017</a></p></blockquote>\n<p></p>\n<p>In previous planning stages, the event was going to be called &#8220;WordCamp for Journalists,&#8221; but WordCamp for Publishers is more inclusive of the different types of professionals who are involved in managing publications. Organizers are planning to have tracks with content for engineering, product, and editorial teams. Attendees will work together to collaborate on open source tools for publishers and best practices.</p>\n<p><a href=\"https://twitter.com/crushgear\" target=\"_blank\">Steph Yiu</a> and <a href=\"https://twitter.com/aschweig\" target=\"_blank\">Adam Schweigert</a> are the lead organizers of the event. Schweigert used to run engineering at the Institute of Nonprofit News and also led a working group assembled by MIT and the Knight Foundation on CMS-related projects. Yiu was a part of that working group and most of the other 12 <a href=\"https://2017-denver.journalist.wordcamp.org/organizers/\" target=\"_blank\">organizers</a> came out of it. Others were found through a call for volunteers.</p>\n<p>&#8220;As a part of the working group we decided we wanted to pull together an event that was focused on WordPress, specifically helping improve the open source tools around publishing, and build a community around publishers that use WordPress,&#8221; Yiu said. &#8220;One thing that was very important to us was being able to reach smaller publishers, which is why, as part of the event, we are hoping to offer travel scholarships for folks who otherwise would not be able to attend.&#8221;</p>\n<p>After discussing a few different event types, Yiu said the team eventually settled on setting it up as a WordCamp because of the community and structure that WordCamp Central provides. However, unlike most WordCamps, the event will offer a mix of presentations and hands-on workshops. Organizers will soon open a call for both speakers and workshop facilitators.</p>\n<p>&#8220;It’s still early days for us since this is a first-time event,&#8221; Yiu said. &#8220;Our current goal is to have a mix of workshops aimed at people who contribute to the multiple areas of the publishing process (for example: developers, designers, product owners, and editorial staff) and multiple skill levels. We also hope to bring together people who maintain open source projects important to publishing to run workshops on both using and contributing with the goal of helping build up those projects for the long run.&#8221;</p>\n<p>WordCamp for Publishers will be held at <a href=\"http://www.denverpost.com/\" target=\"_blank\">The Denver Post</a>, a publication that runs on WordPress as a WordPress.com VIP customer.</p>\n<p>&#8220;Mateo Leyba, who works at Digital First Media, was a part of the original working group and suggested they could sponsor with a venue donation,&#8221; Yiu said. &#8220;That was very welcome as venues are usually the most expensive part of any event! Also, it’s a cool spot with a beautiful view.&#8221;</p>\n<p>The call for speakers and workshop leaders will open soon and will close in early May. Tickets for the event will be $40 and will go on sale in May. As it&#8217;s the first event of its kind, the organizers are keeping it small and are limiting it to 230 attendees. If you&#8217;re thinking about sponsoring or attending, sign up for email updates on the <a href=\"https://2017-denver.journalist.wordcamp.org/\" target=\"_blank\">WordCamp for Publishers</a> website.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 11 Apr 2017 03:12:50 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:111:\"WPTavern: WordPress Editor Experience Survey Shows 75% of Respondents Don’t Use Distraction-Free Writing Mode\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68566\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:118:\"https://wptavern.com/wordpress-editor-experience-survey-shows-75-of-respondents-dont-use-distraction-free-writing-mode\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3353:\"<p>The WordPress Editor Experience survey <a href=\"https://make.wordpress.org/core/2017/04/07/editor-experience-survey-results/\" target=\"_blank\">results</a> have been published with data from 2,563 participants, a significantly larger sampling than the 50 who responded to the recent <a href=\"https://wptavern.com/initial-customizer-survey-results-reveal-majority-of-respondents-dont-use-it\" target=\"_blank\">customizer survey</a>. Both the editor and the customizer are included in Matt Mullenweg&#8217;s three main focus areas for core development in 2017. The purpose of the surveys is to find out how WordPress users are using or not using the current features.</p>\n<p>More than half of the survey respondents (66%) identified themselves as developers (in addition to other roles). Since this category of users dominated the survey results, Mark Uraine decided to break it down further to display other categories developers selected.</p>\n<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/04/non-dev-vs-dev.png?ssl=1\"><img /></a></p>\n<p>Based on these results, it isn&#8217;t surprising that more than 85% of respondents use the markup text editor and 35% of those use it exclusively. Support for syntax highlighting is also a popular request.</p>\n<p>The distraction-free writing mode received quite a bit of feedback on the survey. More than 75% of respondents said they do not use it.</p>\n<p><a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/04/distraction-free.png?ssl=1\"><img /></a></p>\n<p>The current implementation of the distraction-free writing mode was introduced in WordPress 4.1 at the end of 2014. The idea was to minimize distractions without having to go through a clunky transition to access the admin menu or meta boxes. Moving the cursor to the right or left of the editor brings them back into view, but many people find the admin interface sliding in and out of view to be distracting. Several who commented suggested that the feature could use some major improvements.</p>\n<p>The survey also revealed that the majority of respondents (72%) install plugins that add features to the editor. These most commonly include shortcodes, Advanced TinyMCE, Tables, and Visual Composer. The results indicate that users often extend the editor to get more basic advanced layout capabilities for presenting their content.</p>\n<p><a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/04/popular-features.png?ssl=1\"><img /></a></p>\n<p>The Editor Experience survey was a good first start, but it doesn&#8217;t accurately represent WordPress&#8217; global user base. The results are heavily skewed towards developers&#8217; needs and experiences. Developers are users, too, but there has to be a way to get these surveys into the hands of a more diverse sampling of users. Reopening the survey and circulating it beyond the WordPress developer community might help to paint a more accurate picture of users&#8217; experiences with the editor.</p>\n<p>A more diverse sampling would reveal whether or not the vast majority of users have no use for the current implementation of the distraction-free writing mode, as developer feedback seems to suggest. It could also provide more feedback on the visual editor features that 35% of respondents to this survey never use.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 10 Apr 2017 21:10:28 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:94:\"WPTavern: New Twitter Bot Automatically Tweets Links to Trac Tickets Tagged as Good-First-Bugs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68613\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:105:\"https://wptavern.com/new-twitter-bot-automatically-tweets-links-to-trac-tickets-tagged-as-good-first-bugs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2991:\"<p>In 2014, WordPress Trac <a href=\"https://wptavern.com/wordpress-core-trac-gets-a-design-refresh-new-features-and-enhancements\">received a facelift</a> and one of the improvements was the “good-first-bug” tag. The goal of <a href=\"https://core.trac.wordpress.org/query?status=!closed&keywords=~good-first-bug\">good-first-bug tickets</a> is to get newcomers familiar with WordPress code, processes, and contributing patches.</p>\n<p>If you&#8217;d like to be notified of new tickets created on trac tagged good-first-bug on Twitter, check out the <a href=\"https://twitter.com/GoodFirstBugs\">@GoodFirstBugs</a> account created by <a href=\"https://twitter.com/ryanwelcher\">Ryan Welcher</a>. In three days since its creation, the account has accumulated nearly 100 followers.</p>\n<blockquote class=\"twitter-tweet\">\n<p lang=\"en\" dir=\"ltr\">I wrote a bot to tweet <a href=\"https://twitter.com/hashtag/goodfirstbugs?src=hash\">#goodfirstbugs</a> for <a href=\"https://twitter.com/hashtag/WordPress?src=hash\">#WordPress</a> core. Follow <a href=\"https://twitter.com/GoodFirstBugs\">@GoodFirstBugs</a> for great ways to start contributing!</p>\n<p>&mdash; Ryan Welcher (@ryanwelcher) <a href=\"https://twitter.com/ryanwelcher/status/850475993622032384\">April 7, 2017</a></p></blockquote>\n<p></p>\n<p>The bot uses predetermined phrases to describe tickets. However, the phrases don&#8217;t do much to explain what the ticket is about. For example, the ticket linked in the Tweet below has nothing to do with the <a href=\"https://codex.wordpress.org/Function_Reference/capital_P_dangit\">Capital P Dangit filter</a>. I&#8217;d like to see the first few words of the ticket&#8217;s title be used instead.</p>\n<blockquote class=\"twitter-tweet\">\n<p lang=\"in\" dir=\"ltr\">Capital P Dangit! <a href=\"https://t.co/KgoJiiN72C\">https://t.co/KgoJiiN72C</a> <a href=\"https://twitter.com/hashtag/GoodFirstBug?src=hash\">#GoodFirstBug</a></p>\n<p>&mdash; GoodFirstBugs (@GoodFirstBugs) <a href=\"https://twitter.com/GoodFirstBugs/status/851129959921930242\">April 9, 2017</a></p></blockquote>\n<p></p>\n<p>Many of the tickets linked have the has-patch keyword assigned as well. This means that a contributor has already submitted a patch and it needs to be reviewed and or tested before it can be committed to core. Scott Buscemi <a href=\"https://twitter.com/scottbuscemi/status/850514220277932032\">suggests</a> that the bot should ignore these tickets, an idea that Welcher may implement in future iterations.</p>\n<p>As I&#8217;ve highlighted <a href=\"https://wptavern.com/why-you-shouldnt-be-worried-about-screwing-up-when-contributing-to-wordpress\">in the past</a>, the tickets tagged good-first-bug help remove some of the fear and anxiety that comes with navigating Trac to contribute to WordPress. Using Twitter to <a href=\"https://twitter.com/GoodFirstBugs\">publish links</a> to these tickets will give them more exposure and may lead to quicker adoption from new contributors.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 10 Apr 2017 16:30:42 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:11:\"\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"HeroPress: HeroPress Geography: Oceania\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://heropress.com/?p=1689\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"https://heropress.com/heropress-geography-oceana/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3364:\"<img width=\"960\" height=\"444\" src=\"http://20094-presscdn.pagely.netdna-cdn.com/wp-content/uploads/2017/04/heropress_oceana-1024x474.jpg\" class=\"attachment-large size-large wp-post-image\" alt=\"Google map of Oceana with pins in Australia, New Zealand, and The Philippines\" /><p>This week&#8217;s HeroPress geography is from Oceania.  I&#8217;d love more people from that area, so if you know anyone who would be good for HeroPress, please encourage them to fill out the <a href=\"https://heropress.com/contribute/\">contributor form</a>.</p>\n<blockquote class=\"wp-embedded-content\"><p><a href=\"https://heropress.com/essays/actually-wordpress-didnt-change-life/\">Actually, WordPress didn’t change my life.</a></p></blockquote>\n<p></p>\n<blockquote class=\"wp-embedded-content\"><p><a href=\"https://heropress.com/essays/it-all-begins-with-a-thought/\">It All Begins With a Thought</a></p></blockquote>\n<p></p>\n<blockquote class=\"wp-embedded-content\"><p><a href=\"https://heropress.com/essays/when-life-throws-you-a-curveball-wordpress-is-there/\">When Life Throws You a Curveball, WordPress is There</a></p></blockquote>\n<p></p>\n<blockquote class=\"wp-embedded-content\"><p><a href=\"https://heropress.com/essays/wordpress-set-free/\">WordPress Set Me Free</a></p></blockquote>\n<p></p>\n<blockquote class=\"wp-embedded-content\"><p><a href=\"https://heropress.com/essays/love-your-work/\">Love your work</a></p></blockquote>\n<p></p>\n<div class=\"rtsocial-container rtsocial-container-align-right rtsocial-horizontal\"><div class=\"rtsocial-twitter-horizontal\"><div class=\"rtsocial-twitter-horizontal-button\"><a title=\"Tweet: HeroPress Geography: Oceania\" class=\"rtsocial-twitter-button\" href=\"https://twitter.com/share?text=HeroPress%20Geography%3A%20Oceania&via=heropress&url=https%3A%2F%2Fheropress.com%2Fheropress-geography-oceana%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-fb-horizontal fb-light\"><div class=\"rtsocial-fb-horizontal-button\"><a title=\"Like: HeroPress Geography: Oceania\" class=\"rtsocial-fb-button rtsocial-fb-like-light\" href=\"https://www.facebook.com/sharer.php?u=https%3A%2F%2Fheropress.com%2Fheropress-geography-oceana%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-linkedin-horizontal\"><div class=\"rtsocial-linkedin-horizontal-button\"><a class=\"rtsocial-linkedin-button\" href=\"https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fheropress.com%2Fheropress-geography-oceana%2F&title=HeroPress+Geography%3A+Oceania\" rel=\"nofollow\" target=\"_blank\" title=\"Share: HeroPress Geography: Oceania\"></a></div></div><div class=\"rtsocial-pinterest-horizontal\"><div class=\"rtsocial-pinterest-horizontal-button\"><a class=\"rtsocial-pinterest-button\" href=\"https://pinterest.com/pin/create/button/?url=https://heropress.com/heropress-geography-oceana/&media=https://heropress.com/wp-content/uploads/2017/04/heropress_oceana-150x150.jpg&description=HeroPress Geography: Oceania\" rel=\"nofollow\" target=\"_blank\" title=\"Pin: HeroPress Geography: Oceania\"></a></div></div><a rel=\"nofollow\" class=\"perma-link\" href=\"https://heropress.com/heropress-geography-oceana/\" title=\"HeroPress Geography: Oceania\"></a></div><p>The post <a rel=\"nofollow\" href=\"https://heropress.com/heropress-geography-oceana/\">HeroPress Geography: Oceania</a> appeared first on <a rel=\"nofollow\" href=\"https://heropress.com\">HeroPress</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 09 Apr 2017 02:47:36 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:103:\"WPTavern: Yoast SEO’s PHP Upgrade Nag is Producing a Significant Increase in Sites Upgrading to PHP 7\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68581\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:111:\"https://wptavern.com/yoast-seos-php-upgrade-nag-is-producing-a-significant-increase-in-sites-upgrading-to-php-7\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2889:\"<p>Less than three weeks ago <a href=\"https://wptavern.com/yoast-seo-4-5-urges-users-to-upgrade-to-php-7\" target=\"_blank\">Yoast SEO version 4.5 was released</a> with an ugly, non-dismissible notice for sites on PHP 5.2. The notice encourages the user to upgrade to PHP 7, explaining that it is faster and more secure. It includes links for getting started and example emails that users can send to their hosting companies.</p>\n<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/04/whip-php-notice.png?ssl=1\"><img /></a></p>\n<p>In the 18 days since shipping the plugin with the upgrade nag, Yoast SEO creator Joost de Valk has seen a dramatic uptick in sites moving from old, unsupported versions to PHP 7. From December to March, PHP 5.2 usage among Yoast SEO users decreased from 1.9% to 1.7%, a modest drop over three months. After adding the nag on March 21, PHP 5.2 usage dropped from 1.7% to 1.3% for those using Yoast SEO version 4.5. PHP 5.3 usage is also steadily decreasing since de Valk began the campaign to educate his plugin&#8217;s users about the benefits of upgrading.</p>\n<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/04/yoast-stats.png?ssl=1\"><img /></a></p>\n<p>According to de Valk&#8217;s stats, 22.2% of Yoast SEO users are on version 4.5 of the plugin. He estimates 1,443,000 sites on 4.5 out of 6.5 million users.</p>\n<p>&#8220;Assuming 0.5% updated their PHP versions, that&#8217;s 7K sites,&#8221; de Valk said. &#8220;And another 14-20k that updated from 5.3 to something more decent.&#8221;</p>\n<p>Many developers are hesitant to implement a nag in their plugins, but Yoast SEO is one of the largest plugins to prove that an ugly, non-dismissible notice can be an effective tool for getting users to take action.</p>\n<p>&#8220;One of the reasons I’m sharing is because I’d love others to join us,&#8221; de Valk said. &#8220;People don&#8217;t like nags, but we&#8217;ve had some truly great feedback from users who went from PHP 5.2 to 7 and were astonished by how fast their sites suddenly were. Negative feedback has been absolutely minimal.&#8221;</p>\n<p>The Yoast SEO team created a project called WHIP that makes it easy for plugin and theme developers to add notices that will nudge their users to upgrade their software versions, starting with PHP. The project also includes a filter for linking to the WordPress.org recommended hosting page, as an alternative to the Yoast.com hosting overview.</p>\n<p>De Valk said his team intends to push the notice to users on other PHP versions in the near future, starting with 5.3.</p>\n<p>&#8220;We&#8217;ve got a release coming next week (4.6), in which we won&#8217;t do it yet,&#8221; de Valk said. &#8220;If all goes well and continues to be mellow, 5.3 will be &#8216;nagged&#8217; as of 4.7, probably three weeks later.&#8221;</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 08 Apr 2017 03:56:44 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"WPTavern: Recommended Reading: Resilient Web Design, a Free e-Book from Jeremy Keith\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68253\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:93:\"https://wptavern.com/recommended-reading-resilient-web-design-a-free-e-book-from-jeremy-keith\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5538:\"<a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2016/08/typewriter.jpg?ssl=1\"><img /></a>photo credit: <a href=\"https://stocksnap.io/photo/4OURRGDU7Z\">Sergey Zolkin</a>\n<p>UK-based web developer <a href=\"https://adactio.com/\" target=\"_blank\">Jeremy Keith</a> published <a href=\"https://resilientwebdesign.com/\" target=\"_blank\">Resilient Web Design</a> as a free e-book in December 2016. Over the past few months, industry leaders have been raving about the book, so I decided to take an evening to find out what all the fuss is about. Keith has been blogging for more than 15 years at <a href=\"http://adactio.com\" target=\"_blank\">adactio.com</a>. He is an active contributor to the web standards movement, a popular conference speaker, and the author of <em>DOM Scripting</em>, <em>Bulletproof Ajax</em>, and <em>HTML5 For Web Designers</em>.</p>\n<p>After just a few pages in, I could see why so many have read Resilient Web Design all in one go. It lives up to all the excellent reviews. The book is divided into seven chapters and can be read in a couple hours. It is not a book on best practices, as one might expect, but rather a historical perspective on web standards and the evolution of responsive design. It provides a foundation for understanding technological progress and is essentially a primer on how breakthrough ideas happen and how resilient ideas endure.</p>\n<p>&#8220;The World Wide Web has been around for long enough now that we can begin to evaluate the twists and turns of its evolution,&#8221; Keith said. &#8220;I wrote this book to highlight some of the approaches to web design that have proven to be resilient. I didn’t do this purely out of historical interest (although I am fascinated by the already rich history of our young industry). In learning from the past, I believe we can better prepare for the future.&#8221;</p>\n<p>Keith&#8217;s brief history of web design recaptures some of the magic we felt at the dawn of the web. He said much of the subject matter has been included in his conference talks over the past couple of years but the book ended up taking some twists and turns that surprised him.</p>\n<p>&#8220;You won’t find any code in here to help you build better websites,&#8221; Keith said. &#8220;But you will find ideas and approaches. Ideas are more resilient than code. I’ve tried to combine the most resilient ideas from the history of web design into an approach for building the websites of the future.&#8221;</p>\n<p>Keith shares some thought-provoking ideas on design in chapter 3 that are particularly applicable to WordPress&#8217; <a href=\"https://wptavern.com/state-of-the-word-2016-mullenweg-pushes-calypso-as-future-of-wordpress-interface-proposes-major-changes-to-release-cycle\" target=\"_blank\">new structure for releases where design and user testing will lead the way</a> in building a new editing and customization experience. The closest thing you can have to predicting the future is an understanding of what has endured in the past and an idea for building on it. Keith&#8217;s book examines principles that have proven to be resilient over time.</p>\n<p>&#8220;Design adds clarity,&#8221; Keith said. &#8220;Using colour, typography, hierarchy, contrast, and all the other tools at their disposal, designers can take an unordered jumble of information and turn it into something that’s easy to use and pleasurable to behold. Like life itself, design can win a small victory against the entropy of the universe, creating pockets of order from the raw materials of chaos.&#8221;</p>\n<p>Keith said he wrote Resilient Web Design for people who create websites in any capacity. He released it under a <a href=\"https://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\">Creative Commons attribution share-alike license</a> and there are many ways to access the content:</p>\n<ul>\n<li>On the web at <a href=\"https://resilientwebdesign.com/\" target=\"_blank\">resilientwebdesign.com</a></li>\n<li><a href=\"https://resilientwebdesign.s3.amazonaws.com/downloads/ResilientWebDesign-portrait.pdf\" target=\"_blank\">PDF in portrait format</a> (7MB)</li>\n<li><a href=\"http://resilientwebdesign.s3.amazonaws.com/downloads/ResilientWebDesign-landscape.pdf\" target=\"_blank\">PDF in landscape format</a> (19.9MB)</li>\n<li><a href=\"https://resilientwebdesign.s3.amazonaws.com/downloads/ResilientWebDesign.epub\" target=\"_blank\">EPUB version</a> (4.4MB)</li>\n<li><a href=\"https://resilientwebdesign.s3.amazonaws.com/downloads/ResilientWebDesign.mobi\" target=\"_blank\">MOBI version</a> (10.4MB)</li>\n<li>Audio on <a href=\"https://itunes.apple.com/podcast/resilient-web-design/id1183700985\" target=\"_blank\">iTunes</a>,<br />\n <a href=\"http://www.stitcher.com/podcast/resilient-web-design\" target=\"_blank\">Stitcher</a>, or <a href=\"https://play.pocketcasts.com/web/podcasts/share?id=2432cc30-a380-0134-9123-3327a14bcdba\" target=\"_blank\">Pocket Casts</a></li>\n<li>Download <a href=\"http://resilientwebdesign.s3.amazonaws.com/downloads/ResilientWebDesign.mp3\" target=\"_blank\">one mp3 file</a> of the whole book</li>\n</ul>\n<p>Despite his experience of nearly two decades in the industry, Keith is still acutely aware of all the unknowns that cannot be predicted. We don&#8217;t know what the web will become, but Keith&#8217;s perspective on its history brings a few resilient ideas to light. If you have some spare time over the weekend and want to be inspired about the future of the web, I highly recommend reading Resilient Web Design.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 07 Apr 2017 20:29:55 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"WPTavern: New Userscript Restores Tabs to the WordPress Plugin Directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68488\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:83:\"https://wptavern.com/new-userscript-restores-tabs-to-the-wordpress-plugin-directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2745:\"<p>One of the most common complaints about the WordPress plugin directory&#8217;s redesign is the use of read more links instead of tabs. Plugin authors and users <a href=\"https://wptavern.com/wordpress-plugin-directory-redesign-why-so-many-people-feel-their-feedback-was-ignored#comment-217002\">contend</a> that tabs make information more accessible. The redesign requires visitors to scroll a one-page design and click on various read more links to discover more information.</p>\n<p>There is a <a href=\"https://meta.trac.wordpress.org/ticket/2278\">ticket on Trac</a> that suggests a jump section be included so that visitors can jump to specific sections of a plugin&#8217;s readme file. It&#8217;s unclear if this feature will be added but if you&#8217;d like to restore the tabbed layout to the plugin directory, check out <a href=\"https://openuserjs.org/scripts/nextgenthemes/Wordpress.org_Plugin_Directory_Tabs\">this Userscript</a> created by Nicolas Jonas.</p>\n<p>According <a href=\"https://openuserjs.org/about/Userscript-Beginners-HOWTO\">to OpenUserJS</a>, userscripts are open source add-ons for browsers that can modify webpages as they&#8217;re loaded. Using userscripts is roughly the same as installing WordPress plugins to restore lost functionality. Jonas&#8217; userscript <a href=\"https://openuserjs.org/scripts/nextgenthemes/Wordpress.org_Plugin_Directory_Tabs/source\">source code</a> contains a mix of CSS and jQuery to generate the tabs.</p>\n<p>To install the <a href=\"https://openuserjs.org/scripts/nextgenthemes/Wordpress.org_Plugin_Directory_Tabs/issues\">WordPress.org Plugin Directory Tabs</a> userscript in Firefox, you&#8217;ll first need to install the free <a href=\"https://openuserjs.org/about/Greasemonkey-for-Firefox\">Greasemonkey extension</a>. Greasemonkey is a Mozilla Add-on for Firefox that allows userscripts to run in the browser.</p>\n<img />Greasemonkey Firefox Add-on\n<p>Jonas developed the userscript in about 30 minutes and used CSS from a CSS button generator. The tabs have a blue background with white text on top. Jonas is open to suggestions and encourages those who want better designed buttons to <a href=\"https://openuserjs.org/scripts/nextgenthemes/Wordpress.org_Plugin_Directory_Tabs/issues\">create an issue</a> with the proper CSS code on his OpenUserJS page.</p>\n<img />Tabbed Layout\n<p>I tested the userscript on Firefox 52.0.2 and didn&#8217;t encounter any issues. After navigating the plugin directory with tabs, I can easily say I prefer it versus clicking read more links. I rarely have to scroll and the information I want to see is displayed front and center. Simply put, browsing a plugin&#8217;s page with tabs is a better user experience.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 07 Apr 2017 02:25:02 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:90:\"WPTavern: WordPress Plugin Directory Restores Stats and Links to Older Versions of Plugins\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68486\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:101:\"https://wptavern.com/wordpress-plugin-directory-restores-stats-and-links-to-older-versions-of-plugins\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1899:\"<p>Since the <a href=\"https://wptavern.com/wordpress-relaunches-plugin-directory-with-new-design-and-improved-search-algorithm\">launch</a> of the newly redesigned WordPress plugin directory, the Meta team has been hard at work fixing bugs and updating the design. The directory has undergone a series of visual updates that address some of the <a href=\"https://wptavern.com/wordpress-plugin-directory-redesign-why-so-many-people-feel-their-feedback-was-ignored\">concerns</a> readers expressed last week.</p>\n<p>Plugin stats are available to the public again and can be viewed by clicking the Advanced View link.&nbsp;<br />\n<img />Advanced View Link</p>\n<p><img />Stats For PluginsLinks to previous versions can also be found on the stats page along with a disclaimer that says older versions may not be stable or secure.</p>\n<p><img />Drop-down Menu to Download Older VersionsThe installation instructions have also returned as a drop-down section.</p>\n<p><img />Installation InstructionsThese changes bring the directory closer to the usefulness its predecessor provided. Some of the issues that remain include, <a href=\"https://meta.trac.wordpress.org/ticket/2278\">read more links</a>, distorted plugin banner images, and <a href=\"https://meta.trac.wordpress.org/ticket/1828\">screenshots</a> linking to a page instead of opening in a lightbox. Although some plugin banners are distorted, the Meta team does not recommend developers update them as the new dimensions have not been finalized.</p>\n<p>The plugin directory is a work in progress. To report a bug or enhancement, you can <a href=\"https://meta.trac.wordpress.org/newticket?component=Plugin+Directory\">create a ticket on Trac. </a>If you have any questions concerning the directory or would like to get more involved, visit <a href=\"https://wordpress.slack.com/messages/meta/\">#meta</a> on Slack.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 07 Apr 2017 02:18:27 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"WPTavern: WPWeekly Episode 270 – Going Camp Press With Mendel Kurland\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"https://wptavern.com?p=68536&preview=true&preview_id=68536\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:78:\"https://wptavern.com/wpweekly-episode-270-going-camp-press-with-mendel-kurland\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5914:\"<p>In this episode, <a href=\"http://marcuscouch.com/\">Marcus Couch</a> and I are joined by <a href=\"https://ifyouwillit.com/\">Mendel Kurland</a>, GoDaddy Evangelist, to discuss the news making headlines. We cover what&#8217;s new in WooCommerce 3.0, why WordCamp Netherlands may not happen this year, and the WordPress plugin directory redesign.</p>\n<p>Marcus announced that he is the new head WordPress editor for <a href=\"http://smashingmagazine.com/\">Smashing Mag</a>. Last but not least, Kurland provides insight into <a href=\"https://camp.press/\">Camp Press</a>, a social experiment focused on disconnecting from technology to strengthen one-on-one relationships.</p>\n<h2>Stories Discussed:</h2>\n<p><a href=\"https://wptavern.com/woocommerce-3-0-brings-major-improvements-to-product-gallery-introduces-crud-classes-and-a-new-cli\">WooCommerce 3.0 Brings Major Improvements to Product Gallery, Introduces CRUD Classes and a New CLI</a><br />\n<a href=\"https://wptavern.com/wordpress-community-support-shuts-down-wordcamp-netherlands-in-favor-of-city-based-wordcamps\">WordPress Community Support Shuts Down WordCamp Netherlands in Favor of City-Based WordCamps</a><br />\n<a href=\"https://wptavern.com/wordpress-plugin-directory-redesign-why-so-many-people-feel-their-feedback-was-ignored\">WordPress Plugin Directory Redesign: Why So Many People Feel Their Feedback Was Ignored</a><br />\n<a href=\"https://wptavern.com/disconnect-from-technology-at-camp-press-september-23-24-in-seminole-ok\">Disconnect From Technology at Camp Press September 23-24 in Seminole, OK</a></p>\n<h2>What&#8217;s On WordPress.tv</h2>\n<p><a href=\"https://blog.wordpress.tv/2017/04/03/wordpress-community-interview-with-bridget-willard/\">WordPress Community Interview with Bridget Willard</a> &#8211; <a href=\"https://profiles.wordpress.org/bridgetwillard\">Bridget Willard</a> is the Marketing Manager at<a href=\"https://wordimpress.com\"> WordImpress</a>. She started her career with office work, earned a teaching degree, but returned to the office where she carved out a career in social media and marketing.</p>\n<p>She is the co-host of<a href=\"https://www.wpwatercooler.com/wpblab/\"> WPblab</a> and co-organizer of<a href=\"http://womenwhowp.org\"> Women Who WP</a> meetup. In this interview, Willard talks about her role as a member of the WordPress Marketing Team the<a href=\"https://make.wordpress.org/marketing/2016/07/06/the-four-horsemen-of-wordpress-org-marketing/\"> Four Horseman of WordPress Marketing</a>.</p>\n<p><a href=\"http://wordpress.tv/2017/04/03/adam-silver-and-kyle-maurer-wpbattles-entrepreneurship-vs-employment/\">Adam Silver and Kyle Maurer: WPBattles – Entrepreneurship vs. Employment WordCamp Northeast Ohio 2016</a> &#8211; In this session, the duo takes a detailed look at working for yourself or for someone else.</p>\n<p>They share the pros and cons for each and break down the fundamental differences between starting a WordPress company and working for one. If you ever find yourself questioning whether you’re really doing what’s best for you, this session will help you understand which path to choose.</p>\n<p><a href=\"http://wordpress.tv/2017/04/04/manuela-van-prooijen-long-live-the-customer-how-to-get-more-out-of-your-wordpress-business/\">Manuela van Prooijen: Long live the customer – how to get more out of your WordPress business</a> &#8211; From WordCamp Geneva (Switzerland) &#8211; Many companies do not use the full potential of their existing customers. Too often those clients are considered a piece of furniture. The clients are there, but often overlooked and not being paid attention to.</p>\n<p>The constant struggle to acquire new customers however is 5 to 10 times more expensive than selling services and goods to existing clients. Manuela shares ten strategies to create a crowd of happy and loyal customers and as a result: more return (recurring) business.</p>\n<h2>Plugins Picked By Marcus:</h2>\n<p><a href=\"https://wordpress.org/plugins/wc-documents-tab/\">WC Documents Tab</a> adds a new tab into the product detail page with downloadable documents. You can use this for documentation, product brochures or anything else that you would need to provide a document for.</p>\n<p><a href=\"https://wordpress.org/plugins/rock-the-slackbot/\">Rock The Slackbot</a> can help you manage your websites, and stay on top of changes, by sending notifications (following numerous WordPress events) to your Slackbot who will pass them along to a channel or direct message in your Slack account. This triggers when posts are published, unpublished, deleted or updated. It&#8217;s also triggered for user roles, activity, theme, plugin modifications, and more.</p>\n<p><a href=\"https://wordpress.org/plugins/pdf-forms-for-contact-form-7/\">PDF Forms Filler for Contact Form 7</a> gives WordPress Admin Panel users the ability to add PDF attachments to email messages of Contact Form 7. If the PDF attachment has a PDF form, the plugin allows users to add fields onto the CF7 form that are mapped to fields in the PDF form. When a website visitor submits the CF7 form, the form in the PDF file is filled with CF7 form information and the resulting PDF file is attached to the CF7 email message.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, April 12th 3:00 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href=\"https://wptavern.com/feed/podcast\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #270:</strong><br />\n</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 06 Apr 2017 18:21:48 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:83:\"WPTavern: Blog Helper: An Alexa Skill for Managing a WordPress Blog with Your Voice\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68008\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:93:\"https://wptavern.com/blog-helper-an-alexa-skill-for-managing-a-wordpress-blog-with-your-voice\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3293:\"<a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/03/alexa.jpg?ssl=1\"><img /></a>photo credit: MjZ Photography <a href=\"http://www.flickr.com/photos/51590961@N04/16639251005\">IMG_8538-Edit.jpg</a> &#8211; <a href=\"https://creativecommons.org/licenses/by-nc-nd/2.0/\">(license)</a>\n<p>&#8220;Alexa, tell Blog Helper to create a new post called ‘Granny&#8217;s banana bread recipe.\'&#8221; Imagine logging a new draft on your WordPress site using only your voice while working in the kitchen. That&#8217;s what <a href=\"https://www.amazon.com/dp/product/B01N1O4M4G\" target=\"_blank\">Blog Helper</a>, an Alexa skill, enables for WordPress.com and self-hosted Jetpack users. It is available for free in Amazon&#8217;s catalog of Alexa skills.</p>\n<p>Automattic developer <a href=\"https://www.chrisfinke.com/\" target=\"_blank\">Christopher Finke</a> created the Alexa integration for WordPress after purchasing an Echo and some Dots for his house and experimenting with different ways for making them useful. He programmed Blog Helper to allow users to check WordPress.com notifications, moderate pending comments, and save blog post ideas as drafts.</p>\n<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/03/Screen-Shot-2017-03-27-at-10.17.11-PM-e1490671125329.png?ssl=1\"><img /></a></p>\n<p>Blog Helper relies on WordPress.com&#8217;s OAuth support, which Finke said self-hosted sites can get via Jetpack. After asking Alexa to enable Blog Helper, you will need to link your WordPress.com account and select the blog you want to access. Once you&#8217;re hooked up, you can say, &#8220;Alexa, ask Blog Helper for my notifications.&#8221; Alexa will read off new notifications one-by-one and mark them as read.</p>\n<p>Blog Helper also enables comment moderation with your voice, so you can take care of that while folding the laundry or doing dishes. If you ask, &#8220;Do I have any comments to moderate?&#8221;, Alexa will read them to you and you can approve, delete, or mark them as spam. Check out the quick demo video Finke created to hear it in action:</p>\n<div class=\"embed-wrap\"></div>\n<p>Scientific studies have proven that <a href=\"http://lifehacker.com/why-great-ideas-always-come-in-the-shower-and-how-to-h-1617303016\" target=\"_blank\">some of your best ideas come to you when your mind is relaxed and your body is distracted by routine tasks</a>. If you have an Alexa-enabled device, Blog Helper is a fun way to help you capture your creative ideas in WordPress before they get away. It allows you to create new drafts without having to pick up your phone or sit down to your desktop.</p>\n<p>Although Finke works for Automattic, he wrote Blog Helper in his free time and it doesn&#8217;t have any official affiliation with WordPress.com. His said his roadmap is to try and make as much of the core WordPress experience accessible by voice as possible. Blog Helper can be a big time-saver for those who want to manage their blogs without being tied down to a screen, but the voice interface can also be useful for those who have vision impairments. Blog Helper is GPL-licensed and <a href=\"https://github.com/cfinke/Blog-Helper\" target=\"_blank\">available on GitHub</a> if you want to contribute or follow for updates.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 06 Apr 2017 02:04:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:85:\"WPTavern: Jetpack 4.8 Introduces Settings Redesign, Adds Global WordPress.com Toolbar\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68255\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:95:\"https://wptavern.com/jetpack-4-8-introduces-settings-redesign-adds-global-wordpress-com-toolbar\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3338:\"<p><a href=\"https://jetpack.com/2017/04/04/settings-overhaul-redesign/\" target=\"_blank\">Jetpack 4.8</a> was released this week with a settings redesign that is a continuation of the <a href=\"https://wptavern.com/jetpack-4-3-released-features-new-react-js-powered-admin-interface\" target=\"_blank\">React.js-powered admin interface introduced last September</a>. The new settings screen has been completely rearranged under a more simplified menu.</p>\n<p>&#8220;We went through every setting on WordPress.com and Jetpack to make sure it was necessary to keep around, and to find a good, logical home for each one,&#8221; Jetpack designer Michael Arestad said. &#8220;We ended up mirroring the WordPress core settings groups for now — they are familiar to people, and things fit well there.&#8221;</p>\n<p>Arestad said he was inspired by the way mobile devices handle settings, especially how they rarely include a &#8220;Save&#8221; button unless it&#8217;s an option that isn&#8217;t a simple toggle. The Jetpack design team applied this to the settings screens so that most of them are now autosaved.</p>\n<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/04/autosave.gif?ssl=1\"><img /></a></p>\n<p>This release also introduces the ability to enable the WordPress.com Toolbar, a new feature that replaces the wp-admin toolbar with the My Sites menu, a link to the WordPress.com reader, a Write button that takes you to WordPress.com, and a notifications dropdown. It is essentially the same toolbar you see when working with a WordPress.com site.</p>\n<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/04/jetpack-wp-com-toolbar.png?ssl=1\"><img /></a></p>\n<p>Jetpack 4.8 includes several dozen improvements and bug fixes. A few of the highlights include the following:</p>\n<ul>\n<li>New MailChimp Subscribe Popup widget</li>\n<li>Sitemaps are faster and now support sites with a very large number of posts (1,000+)</li>\n<li>Contact Form now has a plain-text alternative and better avoids spam filters</li>\n<li>Debug form includes extra information to better prioritize support requests</li>\n<li>Photon can now be used within the dashboard and supports bbPress topics and replies</li>\n</ul>\n<h3>Jetpack 4.8.1 Fixes PHP Incompatibility Issue</h3>\n<p>Many users reported fatal errors and blank pages after updating to Jetpack 4.8. A temporary fix was to load an older version of Jetpack. In a convenient turn of events, the WordPress plugin directory restored the ability to download older versions of plugins today (found under the new Advanced View link).</p>\n<p>Jetpack 4.8 included PHP code that is incompatible with PHP versions lower than 5.4, which caused the fatal errors. The Sitemaps module also included an incompatibility with the WP Rocket plugin. Additionally, the release included many new translation files, which caused updates not to complete on sites that have limited resources for processing large files on updates.</p>\n<p><a href=\"https://jetpack.com/2017/04/05/jetpack-4-8-1-php-version-incompatibility-fix/\" target=\"_blank\">Jetpack 4.8.1</a> was released a few hours ago to correct these issues. The Jetpack development team recommends manually installing the plugin via FTP/SFTP if your site crashed and you are unable to update through the admin.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 05 Apr 2017 21:07:37 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"HeroPress: WordPress Flexibility\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://heropress.com/?post_type=heropress-essays&p=1680\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://heropress.com/essays/wordpress-flexibility/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5214:\"<img width=\"960\" height=\"480\" src=\"http://20094-presscdn.pagely.netdna-cdn.com/wp-content/uploads/2017/04/040517-min-1024x512.jpg\" class=\"attachment-large size-large wp-post-image\" alt=\"Pull Quote: WordPress gives me all the flexibility I need to be constantly learning and improving.\" /><p>When I was asked to describe myself and my interests for a bio at work I floundered. I felt the same way when sitting down to write this. Where do I even begin? For my bio, I decided instead of narrowing it down I’d go with “jill-of-all-trades.” I really like to do everything and if I don’t like something I only know that because I tried it first. I’ve been this way since I can remember. At school I got good grades in everything (except Chemistry), I liked everything (except Chemistry) and I wanted to do everything. Figuring out my career path was therefore a long process (I actually started out pre-med in college, but you know&#8230; Chemistry).</p>\n<p>After graduating college I started working in marketing and absolutely hated it &#8211; I did the same exact thing almost every day. It was miserable. I missed the old web content job I had during college, where I did SEO, product photography, email campaigns, basically anything website related. Right now I can’t believe there was a point in my life that I missed HTML emails, but I did. I missed the flexibility, doing something different every day, and most importantly, I missed the creative problem solving it entailed.</p>\n<blockquote><p>So I quit my stupid marketing job and attended a coding bootcamp.</p></blockquote>\n<p>It was a Front End Development track where I honed my HTML and CSS skills, learned JavaScript in a few forms (vanilla, jQuery, AngularJS), and learned other tools of the trade (git, task runners, bash, etc.). When I landed my first web development job I was excited &#8211; the company did all sorts of different projects: web apps, web sites, intranets, you name it. I knew that there was enough variety to keep me constantly moving and constantly learning. My first project was something I was familiar with, an AngularJS application, but my second project was something I’d never seen before &#8211; a WordPress site. Knowing zero PHP, I dove right in.</p>\n<p>I can’t say that I loved WordPress right off the bat. When I was still mostly developing pretty simple sites with it, I was afraid it was going to become monotonous. Today I know how wrong I was. Although the majority of the projects I work with involve WordPress, I can do something new and different with every site.</p>\n<p>Just this year I’ve worked on a WordPress theme with a headless React front end, a WordPress site with part of the admin area written in React, and a WordPress plugin with a front end built in Angular 2. Even traditional WordPress themes can be exciting. Each client has their own needs and with the flexibility of templates, post types, and widgets every site I build is a new challenge.</p>\n<blockquote><p>I’ve come a long way since drowning in monotony early in my career.</p></blockquote>\n<p>At home you might find me doing yard work, refinishing furniture, knitting, wood burning, or attempting to play the banjo. But at work, using WordPress gives me all the flexibility I need to be constantly learning and improving.</p>\n<div class=\"rtsocial-container rtsocial-container-align-right rtsocial-horizontal\"><div class=\"rtsocial-twitter-horizontal\"><div class=\"rtsocial-twitter-horizontal-button\"><a title=\"Tweet: WordPress Flexibility\" class=\"rtsocial-twitter-button\" href=\"https://twitter.com/share?text=WordPress%20Flexibility&via=heropress&url=https%3A%2F%2Fheropress.com%2Fessays%2Fwordpress-flexibility%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-fb-horizontal fb-light\"><div class=\"rtsocial-fb-horizontal-button\"><a title=\"Like: WordPress Flexibility\" class=\"rtsocial-fb-button rtsocial-fb-like-light\" href=\"https://www.facebook.com/sharer.php?u=https%3A%2F%2Fheropress.com%2Fessays%2Fwordpress-flexibility%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-linkedin-horizontal\"><div class=\"rtsocial-linkedin-horizontal-button\"><a class=\"rtsocial-linkedin-button\" href=\"https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fheropress.com%2Fessays%2Fwordpress-flexibility%2F&title=WordPress+Flexibility\" rel=\"nofollow\" target=\"_blank\" title=\"Share: WordPress Flexibility\"></a></div></div><div class=\"rtsocial-pinterest-horizontal\"><div class=\"rtsocial-pinterest-horizontal-button\"><a class=\"rtsocial-pinterest-button\" href=\"https://pinterest.com/pin/create/button/?url=https://heropress.com/essays/wordpress-flexibility/&media=https://heropress.com/wp-content/uploads/2017/04/040517-min-150x150.jpg&description=WordPress Flexibility\" rel=\"nofollow\" target=\"_blank\" title=\"Pin: WordPress Flexibility\"></a></div></div><a rel=\"nofollow\" class=\"perma-link\" href=\"https://heropress.com/essays/wordpress-flexibility/\" title=\"WordPress Flexibility\"></a></div><p>The post <a rel=\"nofollow\" href=\"https://heropress.com/essays/wordpress-flexibility/\">WordPress Flexibility</a> appeared first on <a rel=\"nofollow\" href=\"https://heropress.com\">HeroPress</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 05 Apr 2017 12:00:37 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Natalie Miller\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:16;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:109:\"WPTavern: WooCommerce 3.0 Brings Major Improvements to Product Gallery, Introduces CRUD Classes and a New CLI\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68232\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:119:\"https://wptavern.com/woocommerce-3-0-brings-major-improvements-to-product-gallery-introduces-crud-classes-and-a-new-cli\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4330:\"<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/04/woocommerce-3-0.png?ssl=1\"><img /></a></p>\n<p><a href=\"https://woocommerce.com/2017/04/woocommerce-3-0-release/\" target=\"_blank\">WooCommerce 3.0</a> “Bionic Butterfly” was released today with significant improvements to the product gallery and developer tools. This version, which was previously going to be <a href=\"https://woocommerce.wordpress.com/2017/03/13/important-update-regarding-the-upcoming-woocommerce-release-2-7-will-be-3-0-0/\" target=\"_blank\">2.7</a>, is the first major release since the plugin <a href=\"https://wptavern.com/woocommerce-3-0-0-scheduled-for-release-april-4th\" target=\"_blank\">switched to semantic versioning</a>. It was released after more than three months in beta and an extended RC testing period that allowed extension and theme developers enough time to get up to speed.</p>\n<p>The new product gallery has subtle improvements for galleries with multiple images. Clicking on a thumbnail updates the image without forcing it to open in a popup window. Galleries in 3.0 are also more intuitive on mobile with support for touch gestures, including swipe to scroll through the gallery, pinch to zoom, and swipe up to close the current image. These and several bug fixes and improvements deliver a much smoother experience of viewing product images.</p>\n<div class=\"embed-wrap\"></div>\n<p>This release includes significant performance improvements, thanks to the switch from post meta to taxonomies for features like product visibility, featured products, and out of stock products. WooCommerce contributors have also reduced the number of queries required to display related products and upsells.</p>\n<p><a href=\"https://woocommerce.wordpress.com/2016/10/27/the-new-crud-classes-in-woocommerce-2-7/\" target=\"_blank\">Version 3.0 introduces CRUD</a> (Create, Read, Update, Delete) classes for developers, making it easier to write and retrieve data from the database with less code.</p>\n<p>&#8220;High order volume is one of the best problems a store can have, but it can really slow down your site’s performance,&#8221; WooCommerce lead developer Mike Jolley said. &#8220;That’s why our team’s main focus this year is performance and scalability.&#8221; Scalability improvements are planned for the next several releases.</p>\n<p>Version 3.0 also <a href=\"https://woocommerce.wordpress.com/2016/12/12/2-7-a-new-cli-for-woocommerce/\" target=\"_blank\">introduces a new command line interface (CLI)</a> powered by the REST API. The previous CLI didn&#8217;t fully support the same functionality and was powered by its own separate code. The new CLI forks <a href=\"https://github.com/wp-cli/restful\" target=\"_blank\">Restful</a> to make REST API endpoints available as WP-CLI commands. It reduces the amount of code that WooCommerce has to maintain and ensures that the commands are always current as the project&#8217;s REST API is updated in the future.</p>\n<p>The <a href=\"https://wordpress.org/support/plugin/woocommerce/\" target=\"_blank\">WooCommerce support forums on WordPress.org</a> have been lighting up with requests after 3.0 was released. One particular issue pinned to the top of the forums is <a href=\"https://wordpress.org/support/topic/3-0-error-option-ajax-is-not-allowed-for-select2/\" target=\"_blank\">an incompatibility with Select2 v3</a>. The latest version of WooCommerce uses Select2 V4 and this may cause an issue with AJAX search inputs in plugins and themes loading an older version of Select2.</p>\n<p>Another issue users are having after upgrade is <a href=\"https://wordpress.org/support/topic/3-0-frontend-pages-refreshing/\" target=\"_blank\">frontend pages reloading endlessly</a>, which WooCommerce developers have identified as a problem with the geolocation setting. They are working on a fix for 3.0.1.</p>\n<p>Many users who are reporting issues after updating to 3.0 have discovered incompatibilities with themes or plugins. This release received more than 3,000 commits from 115 contributors. With this many changes packed into a major release, WooCommerce developers recommend testing on a staging site and making a backup before updating the plugin. This will give you the opportunity to make sure your theme and plugins are compatible with the update.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 05 Apr 2017 01:56:15 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:17;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"WPTavern: Disconnect From Technology at Camp Press September 23-24 in Seminole, OK\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68248\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:92:\"https://wptavern.com/disconnect-from-technology-at-camp-press-september-23-24-in-seminole-ok\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4477:\"<p>Readers may remember in 2015, <a href=\"https://wptavern.com/camppress-a-2-3-day-social-experience-for-geeks-and-creatives\">we highlighted</a> Camp Press, a conference devoted to disconnecting from technology to focus on strengthening bonds that encourage collaboration within the community.</p>\n<p>Mendel Kurland, who has spent the better part of two years organizing the event, <a href=\"https://camp.press/\">announced</a> that Camp Press will take place September 23-24, at Fry Lake in Seminole, OK. The event is a collaboration between Kurland, Aaron D. Campbell, and Christen Campbell</p>\n<p>Accommodations include tents, cabins, and RV hookups. Camp Press will take place on Camp Campbell, a plot of land owned by Campbell and his wife. Available activities include hiking, Geo-Caching, swimming, canoeing, fishing, sports, and more.</p>\n<img />A Lake Where Attendees Can Chill Out\n<p><span id=\"cch_fae57e021243ee\" class=\"_mh6 _wsc\"><span class=\"_3oh- _58nk\">&#8220;Many of us spend a lot of time online, but it’s the time we spend offline and disconnected one-on-one that’s often most important,&#8221; Kurland said. </span></span></p>\n<p><span id=\"cch_fae57e021243ee\" class=\"_mh6 _wsc\"><span class=\"_3oh- _58nk\">&#8220;Those one-on-one connections create lifelong bonds that lead to building better businesses, partnerships, and strategy. Camp Press is about fortifying those in-person bonds.&#8221;</span></span></p>\n<p>Kurland chose to host the event at Camp Campbell based on its size, number of available activities, and its remoteness.</p>\n<p>&#8220;It&#8217;s centrally located in the US, and remote enough to achieve the goal of disconnection. Additionally, Aaron&#8217;s family is pretty great too as it&#8217;s their land.&#8221;</p>\n<p><span id=\"cch_fae57e021243ee\" class=\"_mh6 _wsc\"><span class=\"_3oh- _58nk\">The nearest major airport is an hour away in Oklahoma City so renting a vehicle is recommended. Alternatively, attendees can coordinate rides through the #camp-press-rides channel on the Geek Adventures Slack team. Invitations to join the Slack group are emailed after <a href=\"https://camp.press/register/\">registering for the event</a>.</span></span></p>\n<p><span id=\"cch_fae57e021243ee\" class=\"_mh6 _wsc\"><span class=\"_3oh- _58nk\">There is internet connectivity on the property, but it&#8217;s for emergencies and can only be used by staff. There are places in and around the Camp Press area for those who need to check-in with family.</span></span></p>\n<p>General admission tickets to attend the event are $100 each but if you purchase them before April 14th, they&#8217;re $85. There are also tickets available for reserved cabins for 10 people, a shared cabin, and RV hookups.</p>\n<p><img /></p>\n<p>General admission tickets include the following amenities:</p>\n<ul>\n<li>Free tent camping</li>\n<li>Other camping options with add-on (if available)</li>\n<li>Full Camp Press event + service day (starting Thursday)</li>\n<li>Event t-shirt</li>\n<li>Cooking utensils</li>\n<li>Fire starting supplies</li>\n<li>Field and water activities</li>\n<li>Arts and crafts supplies</li>\n<li>Daily ice service</li>\n</ul>\n<p>Kurland wants the event to maintain a brand-free feeling and is asking for sponsors to adhere to a set of <a href=\"https://camp.press/sponsors/\">atypical guidelines</a>. The guidelines state that sponsors may not wear branded gear and that advertising must be hand-made on-site.</p>\n<p>&#8220;We realize these guidelines aren’t for everyone, but we’re looking for creativity rather than corporate branding for these sponsorships,&#8221; Kurland said.</p>\n<p>Sponsorship levels range from $1,500 to $3,000 and offer various perks.</p>\n<p>Those interested in attending are encouraged to review the event&#8217;s <a href=\"https://camp.press/code-of-conduct/\">Code of Conduct,</a> which is unique compared to an event held in a physical building. For example, it has a guideline for leaving no trace:</p>\n<blockquote><p>Our community respects the environment. We are committed to leaving no physical trace of our activities wherever we gather. We clean up after ourselves and endeavor, whenever possible, to leave such places in a better state than when we found them.</p></blockquote>\n<p>You don&#8217;t have to be involved with WordPress to attend the event. For more information and to purchase tickets, visit the <a href=\"https://camp.press/\">official Camp Press site</a>.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 04 Apr 2017 20:32:37 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:18;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"WPTavern: WP-CLI Names Alain Schlesser New Co-Maintainer\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68228\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://wptavern.com/wp-cli-names-alain-schlesser-new-co-maintainer\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5640:\"<p><a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2016/05/wp-cli.png?ssl=1\"><img /></a></p>\n<p>WP-CLI has hired <a href=\"https://www.alainschlesser.com/\" target=\"_blank\">Alain Schlesser</a> as a <a href=\"https://make.wordpress.org/cli/2017/04/03/new-co-maintainer-alain-thanks-2017-sponsors/\" target=\"_blank\">new part-time co-maintainer</a>. The position was made possible by sponsorships from Automattic, Bluehost, DreamHost, SiteGround, WP Engine, and more than 60 individuals who contributed to the project.</p>\n<p>&#8220;With Alain joining the project as a co-maintainer, the WP-CLI project is restoring capacity to meet current demands (e.g. support), and ramping up on new feature development and evangelization,&#8221; WP-CLI co-maintainer Daniel Bachhuber said. &#8220;We’ve already improved the build time by 33%!&#8221;</p>\n<p>Schlesser first became involved in the project after Bachhuber contacted him last March for input on solving some outstanding issues with Composer, which WP-CLI uses for external package management. Schlesser said he couldn&#8217;t afford the time to actively work on the issue at that time but tried to offer meaningful input for the right angle for solving the remaining issues.</p>\n<p>&#8220;This short collaboration changed my perception about WP-CLI and helped me realize that there is a push to use modern and modular code to improve the tool and prepare it for future requirements,&#8221; Schlesser said. &#8220;So, already at that point, I wanted to contribute to the project. However, I was already involved in a different part of WordPress contribution (which is now the <a href=\"https://make.wordpress.org/core/2017/02/22/nextgen-bootstrap/\" target=\"_blank\">Nextgen Bootstrap/Load Feature Project</a>), and I had to prioritize my volunteer work and keep a few hours left for paid client work as well.&#8221;</p>\n<p>Schlesser said taking on the role of a maintainer became an option once it was a paid position made possible by the project&#8217;s 2017 sponsors. Prior to that he would not have been able to financially afford the additional time investment that WP-CLI requires. The new role enables him to work for 5-10 hours per week on general user support, development of new and improved features, writing documentation, managing the issue backlog, reviewing pull requests and working on the project&#8217;s infrastructure.</p>\n<p>In joining WP-CLI as a co-maintainer, Schlesser brings a fresh perspective from developing for other platforms and years experience managing and contributing to <a href=\"https://www.alainschlesser.com/community/\" target=\"_blank\">dozens of open source projects</a>.</p>\n<p>&#8220;WP-CLI is in a unique place in terms of what it tries to achieve and how it does it (out of necessity),&#8221; Schlesser said. &#8220;For most other web platforms, the command line interface is a regular part of the core of the system itself, often building what is known as a <a href=\"http://alistair.cockburn.us/Hexagonal+architecture\" target=\"_blank\">Hexagonal Architecture</a>. WP-CLI, on the other hand, achieves most of the same benefits even though it has no direct control over the Core source code, and that source code is not meant to support such an architecture. Given the obstacles, the current results are quite an achievement!&#8221;</p>\n<p>After its 1.0.0 release, WP-CLI <a href=\"https://wptavern.com/wp-cli-1-1-0-released-project-shifts-to-expand-package-index\" target=\"_blank\">shifted to focus on its package ecosystem</a>. New features are now built as standalone packages instead of rolling everything into WP-CLI core. The eventual goal is to better distribute the project&#8217;s maintenance burden among package maintainers.</p>\n<p>&#8220;I think the most important change in the upcoming release is that all the bundled commands have been extracted into separate packages, and we&#8217;re currently in the process of getting rid of all the issues that this move has uncovered,&#8221; Schlesser said. &#8220;So, when it comes to making WP-CLI easily extensible and improving the tools and interfaces, we&#8217;re now eating our own dog food. In the longer term, I expect this change to have a significant impact on the onboarding experience for developers who want to create their own commands.&#8221;</p>\n<p>During his years contributing to open source projects, Schlesser said he has become well-acquainted with the unique challenges and emotional toll of maintainership, a topic that <a href=\"https://danielbachhuber.com/2016/06/26/my-condolences-youre-now-the-maintainer-of-a-popular-open-source-project/\" target=\"_blank\">Bachhuber has spoken about in the past</a>.</p>\n<p>&#8220;Maintenance of a popular open source project is at the intersection of the hard logic of technology and deeply human group dynamics,&#8221; Schlesser said. &#8220;I&#8217;ve become more aware of all the difficulties that come with such a role, but I wouldn&#8217;t necessarily state that I know anything more now on how to navigate around them. What I know for sure is that it is a burden that should be shared amongst several people when at all possible. It comes with constant pressure and churn, and doing this work as a single person puts both the project and the person at risk.&#8221;</p>\n<p>Schlesser plans to keep an eye out for any avoidable friction points in hopes of making the experience of maintainership as smooth as possible for all involved.</p>\n<p>&#8220;Daniel has already done a great job with this, and I can&#8217;t wait to see where the project will take us as a team,&#8221; Schlesser said.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 04 Apr 2017 17:19:50 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:19;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"BuddyPress: 2016 BuddyPress Survey Results\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"https://buddypress.org/?p=265117\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"https://buddypress.org/2017/04/2016-buddypress-survey-results/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:18896:\"<p><img class=\"alignnone size-full wp-image-265189\" src=\"https://buddypress.org/wp-content/uploads/1/2017/04/bp-countries-2016.png\" alt=\"61 country flags of survey participants\" width=\"765\" height=\"490\" /></p>\n<p>&nbsp;</p>\n<h2>Thank you!</h2>\n<p>This report presents the results from the 2016 BuddyPress Survey held from November 1 through December 31, 2016. Three hundred and two (302) respondents from 61 countries completed the survey and provided valuable and interesting feedback. Many thanks!</p>\n<p>&nbsp;</p>\n<h2>Survey Design/Method</h2>\n<p>The survey contained 36 questions geared towards <a href=\"https://bpdevel.wordpress.com/2016/07/13/priorities-for-the-next-12-months/\">Site Builders and WordPress Developers</a>. Adjusting to this more focused target audience compared to previous years&#8217;, I selected some questions from our BuddyPress <a href=\"https://buddypress.org/2013/09/2013-buddypress-codex-survey-results/\">2013</a>, <a href=\"https://buddypress.org/2014/03/2014-buddypress-survey-results/\">2014</a> and <a href=\"https://buddypress.org/2015/05/2015-buddypress-survey-results/\">2015</a> Surveys, combined/split/modified some of the questions, and added 15 new questions. The survey was designed to maximize responses and get snapshots of:<br />\n&#8211; basic demographic information<br />\n&#8211; versions of WordPress, BuddyPress, bbPress, and PHP used<br />\n&#8211; the types, languages, number of members in BP sites<br />\n&#8211; comfort levels with BuddyPress, BP theme compatibility, and BP Hooks<br />\n&#8211; development practices and tools<br />\n&#8211; respondents willing to share their BP use cases<br />\n&#8211; BuddyPress participation and contributions<br />\n&#8211; comments about BuddyPress, BP theme/plugin development, and the survey.</p>\n<p>The questionnaire was finalized after incorporating the feedback on the draft from the BP Lead/Core Developers last year. The survey was then promoted via Twitter, BP support forums, bpdevel.wordpress.com, and survey banners added by <a class=\"bp-suggestions-mention\" href=\"https://buddypress.org/members/johnjamesjacoby/\" rel=\"nofollow\">@johnjamesjacoby</a> at https://buddypress.org and https://codex.buddypress.org which helped a lot.</p>\n<p>&nbsp;</p>\n<h2>Key Findings</h2>\n<p>This section shows some of the highlights from the survey with short comments about each. All supporting graphs, tables, and user comments from this survey are available in the accessible and mobile-friendly webpage.<br />\n&nbsp;</p>\n<h3>A. What&#8217;s New</h3>\n<h4>1. PHP Versions Used</h4>\n<p><img class=\"alignnone size-full wp-image-265119\" src=\"https://buddypress.org/wp-content/uploads/1/2017/04/php-version.png\" alt=\"99% using PHP 5.3+\" width=\"800\" height=\"235\" /><br />\n<a href=\"https://codex.buddypress.org/getting-started/buddypress-2-8-will-require-php-5-3/\">BuddyPress 2.8 requires at least PHP 5.3</a>. It&#8217;s encouraging to learn that 99% of respondents&#8217; sites are on PHP version 5.3.x or better. Kudos to the 88% of respondents who are already using PHP 5.6.x or better for their sites.<br />\n&nbsp;</p>\n<h4>2. Years Using BuddyPress</h4>\n<p><img src=\"https://buddypress.org/wp-content/uploads/1/2017/04/using-buddypress.png\" alt=\"45% have using BuddyPress for a year or less\" width=\"800\" height=\"235\" class=\"alignnone size-full wp-image-265122\" /><br />\nProviding additional context for the results of this survey, a whopping 45% of respondents have been using BuddyPress for a year or less. Welcome!<br />\n&nbsp;</p>\n<h4>3. Testing BuddyPress</h4>\n<p><img class=\"alignnone size-full wp-image-265120\" src=\"https://buddypress.org/wp-content/uploads/1/2017/04/test-stable.png\" alt=\"58% test BudddyPress at Stable Release\" width=\"800\" height=\"235\" /><br />\nThe majority of builders/developers (58%) prefer to test their sites, themes, and plugins against BuddyPress stable releases while 27% do so a month after Stable release and 13% test sites at RC 1. Eleven percent (11%) do not test BuddyPress.<br />\n&nbsp;</p>\n<h4>4. Keep Updated with BuddyPress Development</h4>\n<p><img class=\"alignnone size-full wp-image-265121\" src=\"https://buddypress.org/wp-content/uploads/1/2017/04/keep-updated.png\" alt=\"66% read changelogs to keep updated\" width=\"800\" height=\"235\" /><br />\nFollowing the top-ranked preference of reading changelogs to keep updated with BuddyPress development, users ranked these preferences almost evenly: follow BP Twitter account/s (32%), subscribe to <a href=\"https://bpdevel.wordpress.com/\">bpdevel.wordpress.com</a> (32%), and checking <a href=\"https://buddypress.trac.wordpress.org\">buddypress.trac.wordpress.org </a> regularly (29%).<br />\n&nbsp;</p>\n<h4>5. BuddyPress Knowledge</h4>\n<table>\n<thead>\n<tr>\n<th scope=\"col\">Knowledge</th>\n<th scope=\"col\">BuddyPress</th>\n<th scope=\"col\">BP Themes</th>\n<th scope=\"col\">BP Hooks</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<th scope=\"row\">Beginner</th>\n<td>31%</td>\n<td>34%</td>\n<td>39%</td>\n</tr>\n<tr>\n<th scope=\"row\">Intermediate</th>\n<td>42%</td>\n<td>32%</td>\n<td>26%</td>\n</tr>\n<tr>\n<th scope=\"row\">Advanced</th>\n<td>19%</td>\n<td>13%</td>\n<td>11%</td>\n</tr>\n<tr>\n<th scope=\"row\">Expert</th>\n<td>8%</td>\n<td>7%</td>\n<td>8%</td>\n</tr>\n<tr>\n<th scope=\"row\">What _*_?</th>\n<td>n/a</td>\n<td>14%</td>\n<td>16%</td>\n</tr>\n</tbody>\n</table>\n<p>The table above is a compilation of the answers to three questions which sought to gauge the users&#8217; confidence or comfort levels with BuddyPress in general, BP Theme Compatibility, and BP Plugin development.<br />\n&nbsp;</p>\n<h4>6. BuddyPress Theme Dev</h4>\n<p><img src=\"https://buddypress.org/wp-content/uploads/1/2017/04/customize-theme-1.png\" alt=\"51% customize BP style sheets every time\" width=\"800\" height=\"235\" class=\"alignnone size-full wp-image-265196\" /><br />\nOn the other side of the equation: 27% sometimes customize style sheets while the remaining 22% never customize BP style sheets.<br />\n&nbsp;</p>\n<h4>7. BuddyPress Plugin Dev</h4>\n<p><img src=\"https://buddypress.org/wp-content/uploads/1/2017/04/customize-plugin-1.png\" alt=\"46% extend profile component sometimes\" width=\"800\" height=\"235\" class=\"alignnone size-full wp-image-265200\" /><br />\nAround a third of BP users extend the following components every time: Members, Extended Profiles, User Groups, and Activity.<br />\n&nbsp;</p>\n<h4>8. Number of Members</h4>\n<p><img class=\"alignnone size-full wp-image-265125\" src=\"https://buddypress.org/wp-content/uploads/1/2017/04/member-number.png\" alt=\"58% of sites have up to 500 members\" width=\"800\" height=\"235\" /><br />\nMost of the respondents who had up to 500 members are those using BP for 2 years or less, have BP installed in WP domain root, have sites on Shared hosting plans, on PHP 5.6 or better, test against BP Stable release, and on the latest versions of WordPress, BuddyPress, and bbPress.<br />\n&nbsp;</p>\n<h4>9. Local Development</h4>\n<p><img class=\"alignnone size-full wp-image-265126\" src=\"https://buddypress.org/wp-content/uploads/1/2017/04/local-dev.png\" alt=\"23% use LAMP for local development\" width=\"800\" height=\"235\" /><br />\nOut of the 70% who develop locally, the preferred local development environments after LAMP are: XAMPP (19%), MAMP (18%), WAMP (13%), and VVV (13%), among others.<br />\n&nbsp;</p>\n<h4>10. Sharing BuddyPress Use Cases</h4>\n<p><img src=\"https://buddypress.org/wp-content/uploads/1/2017/04/bp-share-use-cases.png\" alt=\"63 participants signed up to share their BP use cases\" width=\"800\" height=\"235\" class=\"alignnone size-full wp-image-265208\" /><br />\nExpect posts about how site builders or developers are using BuddyPress. Thank you to everyone who signed up!<br />\n&nbsp;</p>\n<h3>B. Trends</h3>\n<h4>1. Using BuddyPress</h4>\n<p><img class=\"alignnone size-full wp-image-265127\" src=\"https://buddypress.org/wp-content/uploads/1/2017/04/use-buddypress.png\" alt=\"62% use BuddyPress for own sites\" width=\"800\" height=\"235\" /><br />\nFor the fourth year in a row, &#8220;I use BuddyPress in My Own Site&#8221; ranks number one (62% in this survey), followed by &#8220;I build BuddyPress sites for others&#8221; at 37%. One participant commented &#8220;Also have a family BuddyPress site on a raspberry pi (in dev).&#8221;<br />\n&nbsp;</p>\n<h4>2. Languages of BuddyPress Sites</h4>\n<p><img class=\"alignnone size-full wp-image-265128\" src=\"https://buddypress.org/wp-content/uploads/1/2017/04/bp-lang-2016.jpg\" alt=\"Languages used in BuddyPress sites\" width=\"2444\" height=\"1543\" /><br />\nFor the third year (2013, 2015, 2016), the English language is used in most of the sites (69%). This is followed by Spanish (11%), German (10%), and French (9%), among many others.<br />\n&nbsp;</p>\n<h4>3. Types of BuddyPress Sites</h4>\n<p><img class=\"alignnone size-full wp-image-265129\" src=\"https://buddypress.org/wp-content/uploads/1/2017/04/bp-types-2016.jpg\" alt=\"Types of BuddyPress sites built\" width=\"2431\" height=\"1547\" /><br />\nFor the third year (2013, 2015, 2016), Generic (33%), Academic (29%), Sports (16%), Artistic (15%), and Gaming (12%) are the most common types of BuddyPress sites built. Generic and Academic types are consistently in the top two spots.<br />\n&nbsp;</p>\n<h4>4. BuddyPress Versions Used</h4>\n<p><img class=\"alignnone size-full wp-image-265130\" src=\"https://buddypress.org/wp-content/uploads/1/2017/04/buddypress-version.png\" alt=\"86% use BuddyPress 2.7 during survey\" width=\"800\" height=\"235\" /><br />\nEighty six percent (86%) are on BuddyPress 2.7+, followed by BP 2.6+ (23%), BP 2.5+ (6%), BP 2.4+ (4%), and BP 2.3+ (4%). Note: BP 2.7.x was the current release version during the survey period.<br />\n&nbsp;</p>\n<h4>5. WordPress Versions Used</h4>\n<p><img class=\"alignnone size-full wp-image-265131\" src=\"https://buddypress.org/wp-content/uploads/1/2017/04/wordpress-version.png\" alt=\"92% use WordPress 4.6+ during survey\" width=\"800\" height=\"235\" /><br />\nNinety two percent (92%) have WordPress 4.6+ installed, followed by WP 4.5+ (13%), WP 4.4+ (5%), WP 4.3+ (3%), and WP 4.2+ (3%). Note: WordPress 4.6 was the current major release version when the survey was launched.<br />\n&nbsp;</p>\n<h4>6. BuddyPress Setups</h4>\n<p><img class=\"alignnone size-full wp-image-265132\" src=\"https://buddypress.org/wp-content/uploads/1/2017/04/bp-install-in-wp.png\" alt=\"72% installed at WP domain root\" width=\"800\" height=\"235\" /><br />\nBuddyPress activated in a single WordPress installation continues to be popular with 72% of the respondents in 2016 as it was in the 2013 survey with 75%.<br />\n&nbsp;</p>\n<h4>7. BuddyPress Hosting</h4>\n<p><img src=\"https://buddypress.org/wp-content/uploads/1/2017/04/hosting-bp.png\" alt=\"48% use shared hosting for BP sites\" width=\"800\" height=\"235\" class=\"alignnone size-full wp-image-265134\" /><br />\nFor sites hosted on Shared Hosting plans: half have 500 members or less, 40% of the sites are on single WP in domain root, 47% on PHP 5.6 or better, almost half of the respondents have been using BuddyPress for a year or less, and a little more than a third use BuddyPress for their own sites.<br />\n&nbsp;</p>\n<h4>8. Other Software Evaluated</h4>\n<p><img src=\"https://buddypress.org/wp-content/uploads/1/2017/04/evaluated-none.png\" alt=\"54% chose BuddyPress without further ado\" width=\"800\" height=\"235\" class=\"alignnone size-full wp-image-265135\" /><br />\nFor the third year in a row, most of the users (54% for 2016) shared that they did not evaluate any other networking/membership plugin/software before selecting BuddyPress.<br />\n&nbsp;</p>\n<h4>9. Contributions to BuddyPress development</h4>\n<p><img src=\"https://buddypress.org/wp-content/uploads/1/2017/04/contribute-bp-dev.png\" alt=\"58% have not contributed to BP development\" width=\"800\" height=\"235\" class=\"alignnone size-full wp-image-265136\" /><br />\nNote: 26% of the 58% who indicated that they have not participated nor contributed to BuddyPress development have also checked that they: helped out in the BP forums,  reported bugs at BP Trac, submitted patches at BP Trac, among others.<br />\n&nbsp;</p>\n<h4>10. bbPress Versions Used</h4>\n<p><img src=\"https://buddypress.org/wp-content/uploads/1/2017/04/bbpress-version.png\" alt=\"89% use bbPress 2.5+\" width=\"800\" height=\"235\" class=\"alignnone size-full wp-image-265137\" /><br />\nConsistent with the vast majority using the latest versions of WordPress and BuddyPress at the time of this survey, 89% of respondents are using the latest version of bbPress which provides a <a href=\"https://bbpress.trac.wordpress.org/browser/trunk/src/includes/extend/buddypress\">tight integration with BuddyPress</a>.<br />\n&nbsp;</p>\n<h4>11. bbPress Setups in BuddyPress</h4>\n<p><img src=\"https://buddypress.org/wp-content/uploads/1/2017/04/bbpress-setup.png\" alt=\"66% use sitewide and group forums\" width=\"800\" height=\"235\" class=\"alignnone size-full wp-image-265138\" /><br />\nFor the third year in a row, the Sitewide and Group Forums setup is the most popular bbPress configuration at 60%, a big bump from its 49% first place ranking in 2015.<br />\n&nbsp;</p>\n<h3>C. Shifts</h3>\n<h4>1. Female Participation in Survey</h4>\n<p><img src=\"https://buddypress.org/wp-content/uploads/1/2017/04/female-gender-1.png\" alt=\"13% female developers and site builders\" width=\"800\" height=\"235\" class=\"alignnone size-full wp-image-265191\" /><br />\nThe number of female respondents increased from 8% (17) in 2015 to 13% (37) in this survey. Levels of BuddyPress knowledge range from Beginner through Expert.<br />\n&nbsp;</p>\n<h4>2. BuddyPress Sites Per Respondent</h4>\n<p><img src=\"https://buddypress.org/wp-content/uploads/1/2017/04/bp-sites-built.png\" alt=\"36% built 2 to 5 BuddyPress sites\" width=\"800\" height=\"235\" class=\"alignnone size-full wp-image-265142\" /><br />\nIn 2015, 41% of respondents (87) built or were responsible for one site followed by 38% (80) with 2 to 5 sites. For 2016, there were more developers who built or were responsible for 2 to 5 sites (99) than for only one site (95).<br />\n&nbsp;</p>\n<h4>3. Number of Survey Participants</h4>\n<p><img src=\"https://buddypress.org/wp-content/uploads/1/2017/04/302-participants-1.png\" alt=\"302 Participants for BuddyPress 2016 Survey\" width=\"800\" height=\"235\" class=\"alignnone size-full wp-image-265204\" /></p>\n<p>The number of respondents increased from 211 from 42 countries in the 2015 survey up to 302 respondents from 61 countries for the 2016 survey. We are grateful to everyone who took the time to take the survey.<br />\n&nbsp;</p>\n<h2>Acknowledgements</h2>\n<p><strong>Survey Participants</strong>: Net total of 302 who completed the survey<br />\n<strong>Online Survey Solution</strong>: <a href=\"https://polldaddy.com\">Polldaddy.com</a> and <a href=\"https://automattic.com/\">Automattic.com</a> for the corporate account<br />\n<strong>Survey Preparation</strong>: <a class=\"bp-suggestions-mention\" href=\"https://buddypress.org/members/mercime/\" rel=\"nofollow\">@mercime</a>, <a class=\"bp-suggestions-mention\" href=\"https://buddypress.org/members/johnjamesjacoby/\" rel=\"nofollow\">@johnjamesjacoby</a>, <a class=\"bp-suggestions-mention\" href=\"https://buddypress.org/members/boonebgorges/\" rel=\"nofollow\">@boonebgorges</a>, <a class=\"bp-suggestions-mention\" href=\"https://buddypress.org/members/djpaul/\" rel=\"nofollow\">@djpaul</a>, <a class=\"bp-suggestions-mention\" href=\"https://buddypress.org/members/r-a-y/\" rel=\"nofollow\">@r-a-y</a>, <a class=\"bp-suggestions-mention\" href=\"https://buddypress.org/members/imath/\" rel=\"nofollow\">@imath</a>, <a class=\"bp-suggestions-mention\" href=\"https://buddypress.org/members/dcavins/\" rel=\"nofollow\">@dcavins</a>, <a class=\"bp-suggestions-mention\" href=\"https://buddypress.org/members/hnla/\" rel=\"nofollow\">@hnla</a>, and <a class=\"bp-suggestions-mention\" href=\"https://buddypress.org/members/tw2113/\" rel=\"nofollow\">@tw2113</a><br />\n<strong>Survey Report</strong>: <a href=\"https://github.com/\">Github.com</a> (gh-pages), <a href=\"https://products.office.com/en-us/excel\">Microsoft Excel</a>, <a href=\"https://drive.google.com/drive/my-drive\">Google Documents &amp; Spreadsheets</a>, and <a href=\"http://www.tagxedo.com/app.html\">tagxedo.com</a>.<br />\n&nbsp;</p>\n<h2>Moving Forward</h2>\n<p>BuddyPress will be celebrating the <a href=\"https://buddypress.org/2009/04/buddypress-10-has-arrived/\">8th anniversary of the first stable release</a> on April 30, 2017. Thanks to @apeatling and the many contributors who brought that milestone to fruition. Looking at all the <a href=\"https://codex.buddypress.org/releases/\">major and minor releases</a> through the years led by <a class=\"bp-suggestions-mention\" href=\"https://buddypress.org/members/johnjamesjacoby/\" rel=\"nofollow\">@johnjamesjacoby</a>, <a class=\"bp-suggestions-mention\" href=\"https://buddypress.org/members/boonebgorges/\" rel=\"nofollow\">@boonebgorges</a>, and <a class=\"bp-suggestions-mention\" href=\"https://buddypress.org/members/djpaul/\" rel=\"nofollow\">@djpaul</a>, it&#8217;s amazing how much has been accomplished by the all-volunteer lead/core developers and contributors.</p>\n<p>The lead developers have set the <a href=\"https://bpdevel.wordpress.com/2016/07/13/priorities-for-the-next-12-months/\">priorities for this year</a> and we look forward to the bp-nouveau template pack and the BP REST API, among many other new features based on some of your comments/requests from this survey.</p>\n<p>All are welcome to <a href=\"https://codex.buddypress.org/participate-and-contribute/\">participate and contribute</a> to the development of BuddyPress. Keep abreast of the latest BuddyPress news at <a href=\"https://bpdevel.wordpress.com/\">bpdevel.wordpress.com/</a>, <a href=\"https://buddypress.trac.wordpress.org\">buddypress.trac.wordpress.org</a>, Twitter @buddypress @buddypressdev @bptrac, and/or weekly BuddyPress Dev Chats at the <a href=\"http://BuddyPress Dev Chats at #buddypress channe\">#buddypress channel</a> (<a href=\"https://make.wordpress.org/chat/\">WP Slack account required</a>).</p>\n<p>Finally, all supporting graphs, tables, and comments from this survey are available on the accessible and mobile-friendly <a href=\"http://mercime.github.io/BuddyPress-2016-survey-results/\">BuddyPress 2016 Survey Results webpage</a>. Where possible, data from the <a href=\"https://buddypress.org/2013/09/2013-buddypress-codex-survey-results/\">2013</a>, <a href=\"https://buddypress.org/2014/03/2014-buddypress-survey-results/\">2014</a> and <a href=\"https://buddypress.org/2015/05/2015-buddypress-survey-results/\">2015</a> surveys have been added to the charts for comparison. Some data from the older surveys have been recalculated when needed to fit in the format of the question in this survey and noted as such. </p>\n<p>Thank you.<br />\n&nbsp;<br />\n<a href=\"http://mercime.github.io/BuddyPress-2016-survey-results/\"><img class=\"alignnone size-full wp-image-17452\" src=\"https://buddypress.org/wp-content/uploads/1/2017/04/bp-2016-survey-results.png\" alt=\"BuddyPress 2016 Survey Results link\" width=\"1054\" height=\"836\" /></a></p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 04 Apr 2017 01:30:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"@mercime\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:20;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"WPTavern: Blog in a Box Project Integrates WordPress with Raspberry Pi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=66891\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:81:\"https://wptavern.com/blog-in-a-box-project-integrates-wordpress-with-raspberry-pi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:6437:\"<p><a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/03/blog-in-a-box.png?ssl=1\"><img /></a></p>\n<p>The original Raspberry Pi was released five years ago and the micro computer product line is still going strong. The Raspberry Pi Foundation <a href=\"https://www.raspberrypi.org/blog/ten-millionth-raspberry-pi-new-kit/\" target=\"_blank\">sold its ten millionth Pi</a> last year and just released the Pi Zero W in February 2017 with built-in WiFi and Bluetooth.</p>\n<p>If you are among the millions of Raspberry Pi owners who like to tinker with software, check out Automattic&#8217;s new <a href=\"https://inabox.blog/\" target=\"_blank\">Blog in a Box</a> project. It currently offers the easiest way of installing WordPress onto a Raspberry Pi.</p>\n<p>Although RaspberryPi.org has documentation for <a href=\"https://www.raspberrypi.org/learning/lamp-web-server-with-wordpress/\" target=\"_blank\">how to run WordPress as a local website on your Raspberry Pi</a>, its recommended method requires you to install and configure Apache, PHP, and MySQL to create a LAMP web server.</p>\n<p>Blog in a Box makes it simpler with a GUI <a href=\"https://github.com/Automattic/biab-installer\" target=\"_blank\">installer</a> that puts everything you need for installing WordPress onto an SD card. It comes bundled with PHP7, Nginx, and the latest version of WordPress. It automatically installs the <a href=\"https://github.com/Automattic/biab-plugin\" target=\"_blank\">Blog In A Box WordPress plugin</a>, which provides an interface for the Blog In A Box CLI tool and widgets for SenseHAT readings. It also includes a full Node development environment. The project&#8217;s creators call it &#8220;a complete system for interfacing Pi hardware with WordPress.&#8221;</p>\n<p>Blog in a Box enables users to publish data captured by the Raspberry Pi camera and SenseHAT, like photos or temperature readings, to a WordPress site that can be accessed on your local network at bloginabox.local. It is not yet capable of publishing to the web, but John Godley, an Automattic developer who worked on the project, said the team is open to adding this.</p>\n<p>&#8220;Part of the fun of a Pi is having this device in front of you that you can play and experiment with, and we wanted to have WordPress running right there inside the Pi too &#8211; it really is a blog in a box!&#8221; Godley said.</p>\n<p>&#8220;We hope that having it local will encourage people to tinker with WordPress and use it to learn programming, or to run experiments in classrooms.&#8221;</p>\n<p>There are currently no live examples of blogs on the web that are receiving posts from a Raspberry Pi. However, fellow Automattic developer and Pi enthusiast Nick Momrik has created a device called <a href=\"https://nick.blog/2017/03/14/blog-in-a-box-paparazzi/\" target=\"_blank\">Blog in a Box Paparazzi</a> that extends the project with additional sensors to take a photo when anyone walks past it. His circuit diagram and a full list of sensors and other electronic components are available on <a href=\"https://github.com/nickmomrik/biab-paparazzi\" target=\"_blank\">GitHub</a>. It&#8217;s one example of how Blog in a Box can be used as a base for other fun use cases.</p>\n<a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/03/paparazzi-fritzing.png?ssl=1\"><img /></a>image credit: Nick Momrik &#8211; <a href=\"https://github.com/nickmomrik/biab-paparazzi\">Blog in a Box Paparazzi GitHub repo</a>\n<p>Although the project doesn&#8217;t come packaged with functionality that would allow it to work as a livecam, Godley said it&#8217;s certainly a possibility.</p>\n<p>&#8220;We created a system to make it easy to interface the Pi hardware with WordPress &#8211; there&#8217;s a plugin and a set of server tools that are all extensible,&#8221; Godley said. &#8220;With a bit of work a livecam system could be added. If you add the sensor mentioned above you could livestream your cat whenever it’s nearby. Add some different sensors and you can see what affects a plant’s growth in a biology experiment and have the data ready to be viewed through WordPress, add a touchscreen and you have an interactive WordPress-powered display.&#8221;</p>\n<p>Since the system uses the REST API internally, Godley it wouldn&#8217;t be difficult to configure it to send data to a remote WordPress site. The team has looked at the possibility of doing this and may revisit it in the future if there&#8217;s enough interest.</p>\n<p>&#8220;Making it really easy to set up was a primary aim &#8211; we didn’t want people to have to setup MySQL and web servers and all the complexities involved in connecting this to Pi sensors. Just a few clicks and a fully working system is copied to an SD card,&#8221; Godley said. &#8220;Once you boot your Pi it appears on your local network and can be used immediately.&#8221;</p>\n<p>The site runs on the local network but the box ensures that WordPress and its plugins stay updated. The ability to run the box without an internet connection is one of the main advantages of Blog in a Box.</p>\n<p>&#8220;The fact you can run it without an internet connection means it can be used in situations where a remote WordPress may not be appropriate &#8212; in your home, in schools, etc,&#8221; Godley said. &#8220;If someone <a href=\"https://astro-pi.org/\" target=\"_blank\">sends WordPress into space on a rocket</a>, then we’d love to hear about it!&#8221;</p>\n<p>The project is an exciting example of how WordPress can be deeply integrated with various hardware components to automatically capture and publish environmental data in a way that&#8217;s easy to view. Godley and his team at Automattic hope that <a href=\"https://inabox.blog/\" target=\"_blank\">Blog in a Box</a> will put WordPress into the hands of more like-minded tinkerers. The entire project, including the <a href=\"https://github.com/Automattic/biab-installer\" target=\"_blank\">installer</a>, the companion WordPress <a href=\"https://github.com/Automattic/biab-theme\" target=\"_blank\">theme</a>, and the <a href=\"https://github.com/Automattic/biab-plugin\" target=\"_blank\">plugin</a>, are all open source.</p>\n<p>&#8220;As well as people connecting the real world to their Pi, we hope that just having a full web development environment ready to go will encourage people to tinker with WordPress and try out programming or theming,&#8221; Godley said.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 03 Apr 2017 21:34:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:21;a:6:{s:4:\"data\";s:11:\"\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"HeroPress: HeroPress Geography: The Middle East\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://heropress.com/?p=1675\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"https://heropress.com/heropress-geography-middle-east/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3588:\"<img width=\"960\" height=\"444\" src=\"http://20094-presscdn.pagely.netdna-cdn.com/wp-content/uploads/2017/04/heropress_middle_east-min-1024x474.png\" class=\"attachment-large size-large wp-post-image\" alt=\"HeroPress pins on a google map in the Middle East\" /><p>For a while now I&#8217;ve been thinking about how to best leverage older content on HeroPress. People who&#8217;ve been a fan of HeroPress for a year now have missed an entire year of essays. Also, older content gets very little traffic, and there&#8217;s some really great stuff in there.</p>\n<p>One idea I came up with is doing a blog post like this on the weekend, showcasing several essays from a particular geographic area. This week I chose the Middle East.</p>\n<p>Please enjoy!</p>\n<blockquote class=\"wp-embedded-content\"><p><a href=\"https://heropress.com/essays/how-to-become-a-reputable-wordpress-developer-on-your-own/\">How to Become a Reputable WordPress Developer, on Your Own!</a></p></blockquote>\n<p></p>\n<blockquote class=\"wp-embedded-content\"><p><a href=\"https://heropress.com/essays/growing-through-wordpress/\">Growing Through WordPress</a></p></blockquote>\n<p></p>\n<blockquote class=\"wp-embedded-content\"><p><a href=\"https://heropress.com/essays/ambition-persistence-self-motivation/\">Ambition, Persistence, and Self-Motivation</a></p></blockquote>\n<p></p>\n<blockquote class=\"wp-embedded-content\"><p><a href=\"https://heropress.com/essays/blogging-solopreneurship-terrorism/\">Blogging, Solopreneurship, &#038; Terrorism</a></p></blockquote>\n<p></p>\n<div class=\"rtsocial-container rtsocial-container-align-right rtsocial-horizontal\"><div class=\"rtsocial-twitter-horizontal\"><div class=\"rtsocial-twitter-horizontal-button\"><a title=\"Tweet: HeroPress Geography: The Middle East\" class=\"rtsocial-twitter-button\" href=\"https://twitter.com/share?text=HeroPress%20Geography%3A%20The%20Middle%20East&via=heropress&url=https%3A%2F%2Fheropress.com%2Fheropress-geography-middle-east%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-fb-horizontal fb-light\"><div class=\"rtsocial-fb-horizontal-button\"><a title=\"Like: HeroPress Geography: The Middle East\" class=\"rtsocial-fb-button rtsocial-fb-like-light\" href=\"https://www.facebook.com/sharer.php?u=https%3A%2F%2Fheropress.com%2Fheropress-geography-middle-east%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-linkedin-horizontal\"><div class=\"rtsocial-linkedin-horizontal-button\"><a class=\"rtsocial-linkedin-button\" href=\"https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fheropress.com%2Fheropress-geography-middle-east%2F&title=HeroPress+Geography%3A+The+Middle+East\" rel=\"nofollow\" target=\"_blank\" title=\"Share: HeroPress Geography: The Middle East\"></a></div></div><div class=\"rtsocial-pinterest-horizontal\"><div class=\"rtsocial-pinterest-horizontal-button\"><a class=\"rtsocial-pinterest-button\" href=\"https://pinterest.com/pin/create/button/?url=https://heropress.com/heropress-geography-middle-east/&media=https://heropress.com/wp-content/uploads/2017/04/heropress_middle_east-min-150x150.png&description=HeroPress Geography: The Middle East\" rel=\"nofollow\" target=\"_blank\" title=\"Pin: HeroPress Geography: The Middle East\"></a></div></div><a rel=\"nofollow\" class=\"perma-link\" href=\"https://heropress.com/heropress-geography-middle-east/\" title=\"HeroPress Geography: The Middle East\"></a></div><p>The post <a rel=\"nofollow\" href=\"https://heropress.com/heropress-geography-middle-east/\">HeroPress Geography: The Middle East</a> appeared first on <a rel=\"nofollow\" href=\"https://heropress.com\">HeroPress</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 01 Apr 2017 13:42:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:22;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:102:\"WPTavern: WordPress Community Support Shuts Down WordCamp Netherlands in Favor of City-Based WordCamps\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68144\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:113:\"https://wptavern.com/wordpress-community-support-shuts-down-wordcamp-netherlands-in-favor-of-city-based-wordcamps\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:10904:\"<p><a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/03/wordcamp-netherlands.png?ssl=1\"><img /></a></p>\n<p>The application for WordCamp Netherlands 2017 has been denied. The camp, which held its sixth edition in Utrecht last year with more than 425 attendees, was one of the most well-established WordPress events in Europe. Yesterday lead organizer Marcel Bootsman published a <a href=\"https://nl.wordpress.org/team/2017/03/30/het-einde-van-wordcamp-the-netherlands/\" target=\"_blank\">post</a> on the Dutch WordPress community site to explain why the camp has been cancelled.</p>\n<p>Bootsman&#8217;s post is written in Dutch but includes correspondence in English between the WCNL team and WordPress Community Support (WCS), formerly WordCamp Central. WCS is now pushing for all WordCamps to be city-based with the exception of regional camps, such as WordCamp US and WordCamp Europe, where the cities already have their own camps and do not prevent or detract from local communities launching their own camps.</p>\n<p>&#8220;WordCamp Netherlands has been held 6 times to date and&#8230;It has not inspired any local WordCamps (in fact, I think it’s probably fair to say that local camps have not been happening because people don’t see a need for them with the country-wide camp happening each year) and, with the exception of Nijmegen, which is still in the pre-planning phase, no cities in the Netherlands have their own WordCamps,&#8221; a WCS representative said. &#8220;With that in mind, we feel that the time has come for your community to move from the country-wide camp to running local camps. This has started happening with Nijmegen already and can easily start happening more with WordCamps in Utrecht, Rotterdam, Amsterdam and other cities.&#8221;</p>\n<p>The Netherlands is <a href=\"http://mapfight.appspot.com/nl-vs-us.md/netherlands-maryland-us-size-comparison\" target=\"_blank\">roughly the size of Maryland</a>, or twice the size of New Jersey, in terms of land space. One can drive across the country in two hours or less. The WCNL team contends that a country-wide WordCamp makes sense for geographical reasons and because of the locations of the organizers. The country already has an active meetup culture with 13 different meetups hosting an average of 100 attendees per event. Organizers do not see the need to have multiple smaller WordCamps fill the role that the local meetups are already doing.</p>\n<p>In response to the reasons WCNL organizers&#8217; outlined for not shutting down their event, the WCS representative replied, &#8220;I don’t think there’s really any benefit to responding to all of your points in the last email individually.&#8221; WCS reiterated its decision regarding the camp:</p>\n<blockquote><p>We will not be approving WordCamp The Netherlands 2017. We would like to see city-based WordCamps happening around the Netherlands – Nijmegen being a great start to that process.</p>\n<p>We’re confident that with the space that WCNL filled being vacated, we will see some of the meetup organizers around the country stepping up to fill that space for their local communities. The local city camps may be smaller, but in many ways that can be a much better than a single large camp.</p>\n<p>As I said before, we would be happy to look at doing WCNL again in a couple of years time once there are a few city-based camps around the country happening regularly. In that case, however, WCNL would be there to complement, and not replace, the city-based camps.</p></blockquote>\n<p>WordCamp Netherlands was the last remaining exception to this new rule that drops country-wide WordCamps in favor of city-based camps. The Dutch community and many of its supporters are <a href=\"https://twitter.com/roytanck/status/847365810506969089\" target=\"_blank\">now</a> <a href=\"https://twitter.com/jrf_nl/status/847470162496241664\" target=\"_blank\">in</a> <a href=\"https://twitter.com/nielsvr/status/847384382541148161\" target=\"_blank\">an</a> <a href=\"https://twitter.com/mchaste/status/847374014414704645\" target=\"_blank\">uproar</a> over the decision and organizers are at a crossroads. They can choose to rebrand the event as WordCamp Utrecht, with significant drawbacks, or move forward with an independent country-wide event without the use of WordCamp tools, branding and trademarks, or funding from the Global Community Sponsorship Program.</p>\n<h3>WordCamp Netherlands Conflict Highlights Cultural Differences Between the U.S. and Europe</h3>\n<p>Marcel Bootsman, who heads up the 13-person WordCamp Netherlands organization team, said they have been working since late December 2016 on the upcoming event. The team had added eight new members after the event grew 68% from 2015 to 2016.</p>\n<p>&#8220;Everybody was thrilled to start, and the news that we could not continue hit us hard,&#8221; Bootsman said. &#8220;We have officially stopped and I have thanked everyone for their enthusiasm and support, which was difficult because I wanted to let these people feel what it is to organize an event and see happy faces all over the place.&#8221;</p>\n<p>WordPress developer and Dutch community member Juliette Reinders Folmer said she doesn&#8217;t believe that more than one or perhaps two city-based WordCamps will get started in the Netherlands. Organizing a WordCamp is not an easy endeavor with a small pool of local organizers and volunteers. Folmer notes that since the WordPress Foundation doesn&#8217;t allow for compensating speakers for their out-of-pocket costs, the speaker pool is further limited.</p>\n<p>&#8220;A trend I&#8217;ve spotted over the last few years is that &#8216;local&#8217; WCs will have a mix of local, national and international speakers,&#8221; Folmer said. &#8220;While national speakers might still be prepared to go out of pocket, the only international speakers who can afford to do this are the ones who are sponsored by big companies which pay their travel and time to speak at those WCs.</p>\n<p>&#8220;Instead of creating a larger speaker group with new and interesting voices, we&#8217;re ending up with a corporate uniform message where the more innovative and sometimes dissident voices are few and far between. By forcing WCNL to break up into smaller more local groups, this trend will become even more persistent and insidious as the demands on the limited group of national speakers will increase unless they have corporate sponsoring. Even they will not able to afford the time and costs to attend and speak at the various local WCs.&#8221;</p>\n<p>Remkus de Vries, WordCamp Netherlands lead-organizer from 2009 to 2015, said the team has worked for years to see the local communities come together, and have seen people get involved with translations, forum moderation, and local meetups after attending the WordCamps.</p>\n<p>&#8220;Our idea from the get go for WordCamp Netherlands was to be as inclusive as possible, to unite the scattered Dutch WordPress community,&#8221; de Vries said. &#8220;The Dutch community consisted of little islands that didn&#8217;t really connect at all. We&#8217;ve been working very hard to unite our Dutch Community via WordCamp Netherlands and it was working perfectly.</p>\n<p>&#8220;Because of our inclusive approach we started getting international visitors and speakers from the early start as well, but more importantly, the event, as a national event, pulled everyone in from all corners of the Netherlands. Our community started and flourished because we started as a central entity.&#8221;</p>\n<p>Bootsman is not optimistic about the future of the Dutch WordPress community after receiving the decision from WCS. The conflict has highlighted a key difference between U.S. and European cultures when it comes to traveling. Whereas Americans might think a 4-5 hour drive to another city is a short road trip, Europe&#8217;s population is much more dense than the U.S. and traveling several hours to another city is not common.</p>\n<p>&#8220;When there is no WordCamp Netherlands, my personal belief is that this will break up the community,&#8221; Bootsman said. &#8220;Of course we will have central tools like Slack, nl.w.org and other ways to communicate, but that is nothing compared to an event where all these people can meet. People are busy and can&#8217;t find time to visit multiple WordCamps in the Netherlands. Distances are not that large in NL, that is not an issue, but time is. When you have a central WordCamp The Netherlands once a year you plan, so you are available to go. In the new situation, when there is a WordCamp Rotterdam, why visit a WordCamp in another town? This maybe hard to understand, but this is how it works for Dutch people. We&#8217;re too practical sometimes, and in this situation, it will not help the community.&#8221;</p>\n<h3>WordCamp Netherlands Organizers are Considering Hosting an Independent Event</h3>\n<p>Both de Vries and Bootsman are said they do not believe rules that make sense for the U.S. should be applied universally. They would prefer them to be guidelines that communities can follow or depart from if they express their preference for a country-wide WordCamp. WordPress communities in other countries like Denmark, Croatia, and Switzerland have expressed similar frustrations with the U.S.-centric rules.</p>\n<p>&#8220;WordCamp Netherlands was what started the local WordPress meetups and ended up being the glue between the WordPress Meetups,&#8221; de Vries said. &#8220;Forcing us to stop using WordCamp Netherlands is going to impact that as you could see by the outpouring of reactions yesterday on Twitter and Facebook. Renaming WordCamp Netherlands to WordCamp Utrecht, as suggested by many, could be a solution, but nobody of the organizing team lives in the city which means, per the WCS rules, we can&#8217;t do that. But more importantly, we would be losing &#8216;our glue.&#8217; We feel that our efforts of the last years have just been flushed down the toilet with this &#8216;one-size-fits-all&#8217; rule.&#8221;</p>\n<p>Although WCNL organizers were told in no uncertain terms that their camp is cancelled, a recent <a href=\"https://make.wordpress.org/community/2017/03/30/wordcamp-netherlands-today-the/\" target=\"_blank\">post</a> on the Community team blog indicates that representatives are considering feedback on the decision.</p>\n<p>The first two WordCamp Netherlands were not under the umbrella of WordCamp Central, and de Vries said they will find a way to have the camp if it comes to that. Organizers are currently examining their options.</p>\n<p>&#8220;It is too soon to announce things about this but let me say that we feel the Netherlands needs to have a countrywide WordPress event based on the experiences of the last years,&#8221; Bootsman said. &#8220;We are not going to let the Netherlands WordPress community down.&#8221;</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 31 Mar 2017 23:39:14 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:23;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"WPTavern: WordPress Plugin Directory Redesign: Why So Many People Feel Their Feedback Was Ignored\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68135\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:107:\"https://wptavern.com/wordpress-plugin-directory-redesign-why-so-many-people-feel-their-feedback-was-ignored\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:15523:\"<p>Earlier this week, the WordPress plugin directory <a href=\"https://wptavern.com/wordpress-relaunches-plugin-directory-with-new-design-and-improved-search-algorithm\">relaunched</a> with a new design and an improved search algorithm. Feedback has been rolling in <a href=\"https://wptavern.com/wordpress-relaunches-plugin-directory-with-new-design-and-improved-search-algorithm#comments\">from Tavern readers</a> and members of the <a href=\"https://www.facebook.com/groups/advancedwp/permalink/1446257985436411/?match=cGx1Z2luKyBkaXJlY3RvcnkscGx1Z2luIGRpcmVjdG9yeSxwbHVnaW5z\">Advanced WordPress Facebook group</a>.</p>\n<p>The improvements to search has received a number of positive comments in addition to people requesting the ability <a href=\"https://wptavern.com/wordpress-relaunches-plugin-directory-with-new-design-and-improved-search-algorithm#comment-216693\">to sort results</a>. The responsive design and aesthetics of the page have also received praise.</p>\n<p>There are a number of items that plugin developers and users have reported as downsides to the new design. Some of the most notable include:</p>\n<ul>\n<li>Plugin stats are only available to the plugin author by logging into the admin.</li>\n<li>Tabbed layout was replaced with a series of Read more links.</li>\n<li>Plugin banner images are distorted.</li>\n<li>The Installation tab which provided instructions on how to install the plugin is gone.</li>\n<li>Screenshots do not open in a lightbox, but open on a new page instead.</li>\n<li>Links to download older versions of plugins is missing.</li>\n</ul>\n<p>Many of the issues reported above are known and have been known for months. While it may seem like a lot of people are <a href=\"https://wptavern.com/wordpress-relaunches-plugin-directory-with-new-design-and-improved-search-algorithm#comment-216738\">suddenly complaining</a> and didn&#8217;t participate in the feedback loop, it&#8217;s important to look back to see how the plugin directory redesign reached this point.</p>\n<h2>From Prototypes to Open Beta</h2>\n<p>In May 2016, the WordPress Meta team <a href=\"https://wptavern.com/wordpress-meta-team-publishes-prototypes-of-the-plugin-directory-redesign\">published prototypes</a> of a new design for the WordPress plugin directory. The announcement generated <a href=\"https://make.wordpress.org/meta/2016/05/19/plugin-directory-prototypes/\">abundant feedback</a> with a strong push towards adding data instead of removing it.</p>\n<p>Many users <a href=\"https://make.wordpress.org/meta/2016/05/19/plugin-directory-prototypes/#comment-8151\">reported</a> that moving the plugin author, last updated, and active install information from the plugin&#8217;s listing page to the plugin&#8217;s details page was a downside. Samuel Sidler, Apollo Team Lead at Automattic, <a href=\"https://make.wordpress.org/meta/2016/05/19/plugin-directory-prototypes/#comment-8154\">responded</a> to the feedback explaining why he didn&#8217;t think showing the information to users was useful.</p>\n<blockquote><p>Author, as you said, is only really useful for insiders. The latter two, meanwhile, are already taken into account in the search results. If a plugin doesn’t have a recent compatible version, it will move down the list. If it’s too old, it won’t get shown at all (which is the case today).</p>\n<p>Active installs is more interesting, but we account for it weighting search results as-is. I actually find it refreshing to <em>not</em> show the active installs as it allows for less-popular plugins to get more downloads. Users will be less likely to click the popular plugins (outside of familiar names) and more likely to find the plugin they actually need.</p></blockquote>\n<p>There was also a lot of discussion on how to improve and display search results.</p>\n<p>In June 2016, at WordCamp Europe, Konstantin Obenland, WordPress core contributor, <a href=\"https://wptavern.com/new-wordpress-plugin-directory-now-in-open-beta\">announced</a> that the WordPress plugin directory redesign was in open beta. The team received feedback from Matt Mullenweg, co-creator of the WordPress project, on changing the direction and design of the page. “We’re really just at the beginning of design iterations,” Obenland said. “He thinks we can do better, which he’s right about. We can and we should.”</p>\n<p>Kevan <a href=\"https://wptavern.com/new-wordpress-plugin-directory-now-in-open-beta#comment-185077\">commented on the open beta</a> and pointed out many of the same issues that were reported with the prototypes. In July 2016, Obenland <a href=\"https://make.wordpress.org/meta/2016/07/12/plugin-directory-v3-open-beta/\">announced</a> version three of the open beta. The use of Read more links in favor of the tabbed interface was again <a href=\"https://make.wordpress.org/meta/2016/07/12/plugin-directory-v3-open-beta/#comment-8400\">brought up</a> in the comments by John Blackbourn.</p>\n<p>&#8220;I’m really concerned about the liberal use of &#8216;Read more&#8217; links on individual plugin pages,&#8221; Blackbourn said. &#8220;They’re being used in order to fix the information overload problem caused by placing all the information onto one page, instead of using the tabbed interface of the current directory.&#8221;</p>\n<p>In response to Blackbourn, <a href=\"https://make.wordpress.org/meta/2016/07/12/plugin-directory-v3-open-beta/#comment-8413\">Joy stated</a> that the issue of Read more links had already been discussed and that the feedback was ignored. The feeling of being ignored was also shared <a href=\"https://make.wordpress.org/meta/2016/07/12/plugin-directory-v3-open-beta/#comment-8476\">by Jon Brown</a>.</p>\n<p>&#8220;It’s hard to see feedback has been heard and in this case a lot of it doesn’t seem to have been taken into account (bring back tabs, no read more…).&#8221; Brown said. &#8220;I don’t see everything, or even much, so I could have certainly missed it.&#8221;</p>\n<p>Mika Epstein <a href=\"https://make.wordpress.org/meta/2016/07/12/plugin-directory-v3-open-beta/#comment-8418\">responded</a> that the feedback was not ignored and that Obenland was in the process of collecting and collating information.</p>\n<p>Four months ago, Kenshino <a href=\"https://meta.trac.wordpress.org/ticket/2328\">created a ticket</a> on WordPress Meta that outlined usability concerns with using Read more links instead of tabs.</p>\n<p>&#8220;Clicking on <span class=\"searchword0\">Read</span> <span class=\"searchword1\">more</span> &#8211; say on the change log requires me to scroll to the bottom before I&#8217;m able to reach the next section,&#8221; he said. &#8220;Essentially for me to go through all the sections, provided that they are long enough, I&#8217;d have to click, scroll a few pages, click, scroll a few pages etc until I get through all the sections.&#8221;</p>\n<p>The ticket was closed as a duplicate of <a href=\"https://meta.trac.wordpress.org/ticket/2278\">Greg Ross&#8217; ticket</a>. In it, he suggests a Jump section be added so users can navigate to specific sections of the Read Me without having to scroll through the entire page. The ticket has received minor support and recently had its milestone changed from version three to a future version.</p>\n<h2>WordPress Contributors Feel Ignored</h2>\n<p>In a <a href=\"https://wordpress.slack.com/archives/C02QB8GMM/p1490824833904957\">meeting held earlier this week</a> in the WordPress Meta Slack channel, Matt Cromwell, Head of Support and Community Outreach at WordImpress, <a href=\"https://wordpress.slack.com/archives/C02QB8GMM/p1490825538070889\">suggested</a> that the Meta team describe the process of collecting and acting on feedback in as much detail as possible in the <a href=\"https://make.wordpress.org/meta/2017/03/30/announcing-the-new-wordpress-plugin-directory/\">announcement post</a>.</p>\n<p>&#8220;I&#8217;ve chatted with a lot of developers and many feel like they provided actionable feedback about the direction of the plugin directory and all advice was ignored,&#8221; Cromwell said. &#8220;Whether or not that&#8217;s an accurate assessment, it&#8217;s a real feeling that is shared by many. I&#8217;ve been here most weeks and know well that feedback was received and acted on, but there&#8217;s still a strong perception.&#8221;</p>\n<p>Despite the concerns of using Read more links brought up during every phase of the project, they don&#8217;t appear to have been addressed. Other gripes expressed by members of the community at the outset of the redesign have largely remained. It&#8217;s no wonder that so many people feel like they&#8217;ve been ignored.</p>\n<p>Mullenweg <a href=\"https://wordpress.slack.com/archives/C02QB8GMM/p1490826336242943\">commented</a> in the meeting saying he, too, felt ignored, &#8220;For what it&#8217;s worth, I feel like my feedback was ignored as well,&#8221; he said. &#8220;I hope we can do another major iteration on the directory, because I’m not really a fan of the new one.</p>\n<p>&#8220;Perhaps the WordPress backend will make it easier to make incremental improvements in the future, as being on bbPress before was often cited as the reason things were slow to iterate previously.&#8221;</p>\n<p>Although Mullenweg&#8217;s feedback in June 2016, was not public, his recent comments indicate not much has changed between then and now.</p>\n<p>Alex Shiels, a member of Team Apollo at Automattic, <a href=\"https://wordpress.slack.com/archives/C02QB8GMM/p1490826698320557\">says</a> user feedback wasn&#8217;t ignored. &#8220;It’s not that anyone’s feedback has been ignored; just that we’ve had limited resources and a big back-end component to the project, and a lot of conflicting requests&#8221; he said. &#8220;I’ll make sure to give a clear invitation to provide feedback in the announcement post, and include something about future iteration.</p>\n<h2>The Inability to Measure the Impacts of the Redesign</h2>\n<p>Kevin Hoffman, who participated in discussions on trac about <a href=\"https://meta.trac.wordpress.org/ticket/1828\">how to display screenshots</a>, asked if there was any user data and feedback that the Meta team could share that led to some of the decisions and changes that were made. For example, changes to the UI or how often the Read more links are clicked. Shiels <a href=\"https://wordpress.slack.com/archives/C02QB8GMM/p1490826026176187\">responded</a> that the team does not have that data because they don&#8217;t have the tools to do it.</p>\n<p>&#8220;There is Google Analytics tracking, but access is very limited and from what I’ve seen of it (I don’t have direct access) it’s messy and hard to draw objective conclusions from,&#8221; Shiels said. &#8220;I absolutely agree that analytics and A/B testing would be great, but we just don’t have the tools for it right now. I think that needs to be considered a next step, but a separate project by itself really.&#8221;</p>\n<p>Hoffman stepped back from contributing to the redesign after receiving <a href=\"https://meta.trac.wordpress.org/ticket/1828#comment:41\">this response</a> seven months ago from Sidler on Trac where he says much of the feedback received was from plugin developers and not representative of users.</p>\n<blockquote><p>First, we&#8217;re building the site for users, not developers. Certainly some of our users are developers, but not the vast majority. One of the WordPress core philosophies is building first for the 80%, not the 20%, and that applies in this case as well.</p>\n<p>Second, almost all of the &#8216;overwhelming community feedback&#8217; we&#8217;ve received so far is from plugin authors who are (typically) developers. It&#8217;s all great feedback and we&#8217;re obviously listening closely. But it&#8217;s not necessarily representative of the users who visit the plugin directory regularly. We&#8217;ll certainly run user tests before launching, and we can probably run a more obvious beta, with a link from the current directory to the new one. But the directory isn&#8217;t yet ready for that.</p>\n<p>Third, this &#8216;self-imposted limitation&#8217; as you call it is not arbitrary. Rather, it&#8217;s the result of research and in-person discussion with a number of designers. Will it be the final design? I dunno. But since we haven&#8217;t tested it with real users (see the paragraph above), it&#8217;s hard to say right now. I think pursuing this direction is worthy for a number of reasons, which aren&#8217;t really worth rehashing here. First and foremost though, until we build out a product that can run through user tests, we won&#8217;t know if it&#8217;s the right direction.</p></blockquote>\n<p>How can the team know that the redesign is working or is the right direction if WordPress.org doesn&#8217;t have the tools necessary to measure its impacts? There&#8217;s also the question of what data was obtained or user testing done that supports the decisions that were made? Who are these users and how does the team know what the best user experience is for them?</p>\n<h2>Iteration Is the WordPress Way</h2>\n<p>Now that the <a href=\"https://make.wordpress.org/meta/2017/03/30/announcing-the-new-wordpress-plugin-directory/\">new directory</a> is publicly available, the Meta team is reviewing feedback, gathering bug reports, and organizing tickets on Trac.</p>\n<p>&#8220;If there are tickets that were closed or postponed during the project that you think need revisiting, then this would be a great time to start reviewing and re-opening them,&#8221; Shiels said. &#8220;We already have a bunch of tickets against the future milestone.</p>\n<p>&#8220;The new directory has been built with future maintainability and iterative enhancement in mind. We’re looking forward to hearing feedback from the whole WordPress community, and making regular improvements and additions.&#8221;</p>\n<p>To report a bug or enhancement with the plugin directory, you&#8217;re encouraged to <a href=\"https://meta.trac.wordpress.org/newticket?component=Plugin+Directory\">create a ticket on Trac. </a>If you have any questions concerning the directory or would like to get more involved, visit <a href=\"https://wordpress.slack.com/messages/meta/\">#meta</a> on Slack.</p>\n<h2>The Vocal Minority</h2>\n<p>There are a lot of people voicing their complaints about the WordPress Plugin Directory redesign and to <a href=\"https://wordpress.slack.com/archives/C02QB8GMM/p1490897847701262\">summarize them</a> as a vocal minority is unfair.</p>\n<p>&#8220;Let’s also not forget that one of WordPress’s philosophies is <a href=\"https://wordpress.org/about/philosophy/#minority\">The Vocal Minority</a>,&#8221; Aaron Jorbin, WordPress core contributor, said in a conversation on the Meta Slack channel concerning feedback. &#8220;Many people being loud on the internet isn’t a reason to do anything.&#8221;</p>\n<p>As I&#8217;ve documented above, the issues people are complaining about today are roughly the same as those reported during the prototype stage more than seven months ago.</p>\n<p>If months have passed and the issues brought up by members of the community who are part of the so-called vocal minority were not addressed before shipping to the public, can we blame them for complaining and feeling ignored? What about those who think that getting involved to be part of the solution was a waste of time? While the plugin directory design will undoubtedly improve with time, the complaints and concerns expressed by people this week are justified.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 31 Mar 2017 23:04:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:24;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:81:\"WPTavern: WordPress App for Android Adds Better Support for Jetpack-Enabled Sites\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68068\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:92:\"https://wptavern.com/wordpress-app-for-android-adds-better-support-for-jetpack-enabled-sites\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1764:\"<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2015/04/wordpress-for-android.jpg?ssl=1\"><img /></a></p>\n<p>Automattic’s mobile engineers <a href=\"https://jetpack.com/2017/03/29/full-android-support-for-jetpack/\" target=\"_blank\">released a major update to WordPress for Android</a> this week. Last year the app&#8217;s users saw a <a href=\"https://wptavern.com/wordpress-for-android-5-7-adds-path-to-upgrade-wordpress-com-plan\" target=\"_blank\">growing disparity</a> between the features available to self-hosted sites and those available to WordPress.com users. Not having the WP REST API in core was holding the app back from providing the same site management features that WordPress.com site owners already enjoy. The upcoming release narrows that gap with better support for Jetpack-enabled sites.</p>\n<p>Self-hosted WordPress sites owners will now have access to People Management, Site Settings, and Site Icons in the app. A complete re-write of the app&#8217;s network layer brings more performance improvements to Stats and other features.</p>\n<p>The Jetpack blog <a href=\"https://jetpack.com/2017/03/29/full-android-support-for-jetpack/\" target=\"_blank\">announced</a> the release but doesn&#8217;t mention that these features are not yet available to all users. If you manage a self-hosted site on your mobile device, you&#8217;ll need to wait until version 7.0 hits the <a href=\"https://play.google.com/store/apps/details?id=org.wordpress.android\" target=\"_blank\">Google Play Store</a>. According to Automattic mobile engineer Maxime Bias, version 7.0 is currently in staged rollout and not all users can update to get it yet. He said 7.0 should be fully rolled out soon but could not give an ETA.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 30 Mar 2017 19:53:48 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:25;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:78:\"WPTavern: Community Team Releases Plugin That Displays WordPress Events Nearby\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=67925\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:89:\"https://wptavern.com/community-team-releases-plugin-that-displays-wordpress-events-nearby\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3309:\"<p>Two weeks ago, I <a href=\"https://wptavern.com/how-to-view-upcoming-wordcamps-in-the-wordpress-dashboard\">highlighted a WordPress plugin</a> that displays upcoming WordCamps in the Dashboard. I&#8217;ve <a href=\"https://make.wordpress.org/community/2017/03/23/showing-upcoming-local-events-in-wp-admin/\">recently discovered</a> that the WordPress Community team is working on an official plugin that does something similar called <a href=\"https://wordpress.org/plugins/nearby-wp-events/\">Nearby WordPress Events</a>.</p>\n<p>The plugin attempts to detect a user&#8217;s location and displays upcoming events within the WordPress News dashboard widget. Events include WordCamps and <a href=\"https://www.meetup.com/topics/wordpress/\">Meetups</a> from Meetup.com. If the location detected is incorrect, users can click the pencil icon and change it to their city and state.</p>\n<img />Nearby WordPress Events Dashboard Widget\n<p>The bottom of the widget includes links to the <a href=\"https://www.meetup.com/pro/wordpress/\">WordPress Meetups landing page</a>, WordCamp schedule, and the official WordPress news blog. If your site has multiple users, each one can configure the widget to display events near their locations.</p>\n<p>According to Ian Dunn, the API includes any meetups that are within a 100 kilometer radius. For WordCamps, the radius is 350 kilometers.</p>\n<p>Here is what the radius looks like for WordPress Meetups.</p>\n<img />US WordPress Meetup Radius\n<p>Here is what the radius looks like for WordCamps.</p>\n<img />US WordCamp Radius\n<p>The distances can not be modified but, depending on feedback, they can be increased to be more accommodating.</p>\n<p>WordCamp data is gathered using an <a href=\"https://api.wordpress.org/events/1.0/\">API endpoint on</a> WordPress.org. The initial HTTP request is performed asynchronously so it doesn&#8217;t affect page loading times. The response is cached for 12 hours to avoid making unnecessary requests.</p>\n<p>The WordPress Community team created the plugin to generate more awareness of WordPress events.</p>\n<p>&#8220;The community that has been created around WordPress is one of its best features, and one of the primary reasons for its success, but many users are still unaware that it exists, and aren’t taking advantage of all of the resources that it makes available to them,&#8221; Dunn said.</p>\n<p>&#8220;Inviting more people to join the community will help to increase its overall health, diversity, and effectiveness, which in turn helps to ensure that WordPress will continue to thrive in the years to come.</p>\n<p>&#8220;We think that wp-admin is the perfect place to display these events, because that’s the place where almost all WordPress users are visiting already. Instead of expecting them to come to us, we can bring the relevant information directly to them.&#8221;</p>\n<p>I tested the plugin on WordPress 4.8 Alpha and didn&#8217;t encounter any issues. Users can report bugs on the <a href=\"https://wordpress.org/support/plugin/nearby-wp-events\">plugin&#8217;s support forums</a> or create an issue on the <a href=\"https://github.com/Automattic/nearby-wordpress-events/issues\">project&#8217;s GitHub page</a>. If you test the plugin, let us know what you think in the comments.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 30 Mar 2017 19:50:14 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:26;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"WPTavern: New WPstats.me Site Displays WordPress.org Plugin Download Stats\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68109\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:85:\"https://wptavern.com/new-wpstats-me-site-displays-wordpress-org-plugin-download-stats\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3202:\"<p>WordPress.org <a href=\"https://wptavern.com/wordpress-relaunches-plugin-directory-with-new-design-and-improved-search-algorithm\" target=\"_blank\">relaunched the plugin directory</a> this week with a new design and improvements to the search algorithm. The redesign spent more than six months in beta for feedback and testing, but many contributors on the project said they felt their feedback was not taken into account. The result is that the new design shipped but has not been well received by the community. Most users and developers welcome the changes to the search algorithm, but the new UI for the plugin pages has received quite a bit of negative feedback.</p>\n<p>One of the unpopular changes made during this refresh was the removal of individual plugin stats, which can now only be viewed by plugin admins. The decision may be temporary but depends on feedback from users.</p>\n<p>In the meantime, if you&#8217;re missing plugin stats after the redesign, check out the new <a href=\"http://wpstats.me/\" target=\"_blank\">wpstats.me</a> site. WordPress plugin developer <a href=\"https://wpartisan.me/\" target=\"_blank\">Edward Dakin</a> created it in just a few hours using the WordPress.org API&#8217;s. Visitors can enter a plugin&#8217;s slug and see recent and all-time download stats.</p>\n<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/03/wpstats.me_.png?ssl=1\"><img /></a></p>\n<p>&#8220;I like checking out plugin stats, seeing which are popular, how others are doing, etc, so I put together a quick something to do that and thought others might find it useful,&#8221; Dakin said. WPstats.me is essentially a one-page app so Dakin opted to host it on GitHub pages.</p>\n<p>&#8220;The CSS is done with <a href=\"http://tachyons.io/\" target=\"_blank\">Tachyons</a> (I’m super into function CSS at the moment), the JS is Backbone for the routing, jQuery for the ajax stuff, and Underscore for the templating,&#8221; Dakin said. He said the hardest part of putting the site together was finding the WordPress.org APIs, as the <a href=\"https://codex.wordpress.org/WordPress.org_API\" target=\"_blank\">documentation</a> is sparse and out of date.</p>\n<p>If the Meta team decides to bring stats back into the plugin page design, Dakin said he will consider leaving WPstats.me up anyway if people are finding it useful. Some users like to see how stats have changed over time and developers appreciate being able to check up on their competition.</p>\n<p>As a WordPress.org plugin developer, Dakin is directly affected by the changes to the directory. He is considering changing how he markets his plugins and is hoping for improvements to the UI that was shipped this week.</p>\n<p>&#8220;I like the improvements to the search a lot,&#8221; Dakin said. &#8220;In terms of the page redesign I like that they’re trying, but I don’t think it’s quite there yet. Like many others, I feel that the collapsing sections is a bit of a poor use of space. And yes, I haven’t done anything yet but I will be experimenting with restructuring plugin readme&#8217;s so the important points are immediately visible and not hidden on page load.&#8221;</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 30 Mar 2017 19:12:39 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:27;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:96:\"WPTavern: WordPress Polyglots Team Calls for Volunteers to Organize Global Translation Day Three\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68066\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:107:\"https://wptavern.com/wordpress-polyglots-team-calls-for-volunteers-to-organize-global-translation-day-three\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2111:\"<p>The WordPress Polyglots team is <a href=\"https://make.wordpress.org/polyglots/2017/03/29/global-wordpress-translation-day-3-call-for-organisers/\">asking for volunteers</a> to help organize <a href=\"https://wptranslationday.org/\">WordPress Global Translation Day Three</a>. The event may take place on September 30th, the same day as <a href=\"https://en.wikipedia.org/wiki/International_Translation_Day\">International Translation Day,</a> but the date is dependent on when organizing teams form.</p>\n<p>Global Translation Day is a 24-hour event that includes live streaming, local, and remote activities. The first Global Translation Day was held <a href=\"https://wptavern.com/global-wordpress-translation-day-draws-448-participants-from-105-countries\">in April, 2016</a> where 448 translators from 105 countries translated 40,350 new strings across 597 projects. These numbers increased to 780 translators with a total of 60,426 strings translated across 590 projects at the conclusion of Global Translation Day Two.</p>\n<p>Activities during Translation Day include, on boarding new contributors, sharing knowledge, and discussing topics related to translating. There are a variety of roles available for organizers to fill, including:</p>\n<ul>\n<li>Communication</li>\n<li>Design</li>\n<li>Outreach</li>\n<li>Website/admin volunteers</li>\n<li>Live Streaming</li>\n<li>Local events mentors</li>\n</ul>\n<p>These roles are open to anyone who is able to dedicate the time and effort needed to run a smooth event. &#8220;If you have a couple of hours a week to spare, the Polyglots team would really appreciate your help,&#8221; organizer Petya Raykovska said. &#8220;WordPress Translation Day has been essential for many local communities around the globe and each edition helps more people to understand us better.&#8221;</p>\n<p>For more information on what each role entails and to volunteer, check out the <a href=\"https://make.wordpress.org/polyglots/2017/03/29/global-wordpress-translation-day-3-call-for-organisers/\">official call for organizers</a> and leave a comment.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 29 Mar 2017 23:38:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:28;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:89:\"WPTavern: WPWeekly Episode 269 – Interview With Daniel Ha, CEO and Co-founder of Disqus\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"https://wptavern.com?p=68064&preview=true&preview_id=68064\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:95:\"https://wptavern.com/wpweekly-episode-269-interview-with-daniel-ha-ceo-and-co-founder-of-disqus\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2039:\"<p>In this episode, <a href=\"http://marcuscouch.com/\">Marcus Couch</a> and I are joined by <a href=\"https://twitter.com/danielha?lang=en\">Daniel Ha</a>, CEO and co-founder of <a href=\"https://disqus.com/\">Disqus</a>. Ha explains why he created the service, what his thoughts are on large sites disabling comments, and the state of comments on the web.</p>\n<p>We also discuss the company&#8217;s monetization strategies and what opportunities exist to generate revenue around comments. Ha shares what the company learned from its Sponsored Comments experiment and what it&#8217;s doing to improve communication with customers.</p>\n<h2>Plugins Picked By Marcus:</h2>\n<p><a href=\"https://wordpress.org/plugins/woo-cashback/\">Woo Cashback</a> provides each user with their own personal wallet with a way to purchase items from your store while using their wallet money or credit.</p>\n<p><a href=\"https://wordpress.org/plugins/export-comment-emails/\">Export Comment Emails</a> allows you to export the emails from comments to a CSV or XML file allowing you to import to MailChimp or ConvertKit.</p>\n<p><a href=\"https://wordpress.org/plugins/wp-monitor/\">WP Monitor</a> adds a dashboard to the WordPress backend that displays updates, site, and server information in one convenient place. You can monitor one or multiple websites on the go.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, April 5th 3:00 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href=\"https://wptavern.com/feed/podcast\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #269:</strong><br />\n</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 29 Mar 2017 23:24:56 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:29;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"WPTavern: Poopy.life Lets You Create Free, Unlimited WordPress Test Installs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68070\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:86:\"https://wptavern.com/poopy-life-lets-you-create-free-unlimited-wordpress-test-installs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5773:\"<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/03/poopy.life_.png?ssl=1\"><img /></a></p>\n<p>Just when you think all the best domain names have been gobbled up by bots and squatters, <a href=\"http://poopy.life/\" target=\"_blank\">Poopy.life</a> emerges as the fastest new way to spin up a WordPress test install. Joe Guilmette, team lead at <a href=\"http://www.wpallimport.com/\" target=\"_blank\">WP All Import</a>, opened up Poopy.life to the public today, offering free unlimited WordPress installs for anyone who needs a temporary site.</p>\n<p>After verifying that you&#8217;re not a robot, Poopy.life creates a test install and sends you to the admin where you can see credentials for logging in and sharing the site. The install expires after a week, unless manually extended with the button in the admin. It also allows you to create a sandbox template that can be shared via a URL so that others can quickly create a duplicate install.</p>\n<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/03/poopy-test-install.png?ssl=1\"><img /></a></p>\n<p>The platform also has a secret menu, like <a href=\"https://www.thrillist.com/eat/los-angeles/the-in-n-out-secret-menu-ranked\" target=\"_blank\">In-N-Out Burger</a>, that allows you to add URL parameters to spin up sites even faster with certain actions already taken:</p>\n<p><strong>No URL Parameters</strong><br />\n<code>http://poopy.life/create/</code></p>\n<p><strong>Copy an existing install</strong><br />\n?src=[Sandbox ID]&amp;key=[auth key]<br />\n<code>http://poopy.life/create?src=panicky-pheasant&key;=EuT9WPIm8122WCcq</code></p>\n<p><strong>Redirect URL</strong><br />\n?url=[redirect URL]<br />\n<code>http://poopy.life/create?url=/wp-admin/admin.php?page=sandbox</code></p>\n<p><strong>Send a welcome email</strong><br />\n?email=[email address]<br />\n<code>http://poopy.life/create?email=user@example.com</code></p>\n<p><strong>Activate Plugins</strong><br />\n?activate_plugins=[plugin_slug_1],[plugin_slug_2],[etc]<br />\n<code>http://poopy.life/create?activate_plugins=akismet,wordpress-importer</code></p>\n<h3>Poopy.life Platform Will Add a Commercial Tier at WPSandbox.io in the Near Future</h3>\n<p>Although Poopy.life is both memorable and amusing, the team chose the domain to prevent people from using it in their own product demos and support channels.</p>\n<p>&#8220;We chose poopy.life specifically because it is ridiculous and no one will be able to use it in a professional context,&#8221; Guilmette said. &#8220;Also it was shorter than the previous domain we were going to use &#8211; oxygen-is-really-amazing-and-everyone-loves-it.com.&#8221;</p>\n<p>Poopy.life runs on CloudLinux and Guilmette said it is hosted on &#8220;a handful of very powerful dedicated servers and ~10 smaller helper instances/load balancers, and duct tape.&#8221;</p>\n<p>WP All Import plans to introduce a commercial tier on wpsandbox.io to allow users to have installs on a custom domain, as well as control of the welcome notice and email. The poopy.life domain and landing page will live on, but Guilmette expects that it will soon be blacklisted by Google.</p>\n<p>&#8220;The WordPress installs are real WordPress installs and you can install any plugin on them,&#8221; Guilmette said. &#8220;You can install a PHP shell and dig around the server and run whatever weird spammy malware you want. There really isn’t any way to prevent it.&#8221;</p>\n<p>Guilmette estimates that Poopy.life is powering approximately 2,000 test installs right now. He doesn&#8217;t know how many their infrastructure can handle, but said they can easily scale it up.</p>\n<p>&#8220;We don’t really monitor or throttle usage so much as try to make sure that one user isn’t able to negatively impact another,&#8221; Guilmette said. &#8220;If the service grows in popularity, there will probably be some pain points that we’ll need to address. But we’ve been doing this for a long time and have worked out many of the kinks.&#8221;</p>\n<p>The team has been using a version of the Poopy.life platform on <a href=\"http://www.wpallimport.com/try/\" target=\"_blank\">wpallimport.com/try/</a> and <a href=\"http://www.oxygenapp.com/try/\" target=\"_blank\">oxygenapp.com/try/</a> for several years. In addition to being a fun, free tool they could offer to the public, the platform has also been critical to the success of the company. It allows users to test WP All Import and Oxygen products before purchasing.</p>\n<p>&#8220;Poopy.life is basically magical golden dogfood we’ve been eating for years,&#8221; Guilmette said. &#8220;This platform is huge for us. Back before we got serious about this we were hosting it on a VPS at MediaTemple, just kind of hacking it together. It would go down all the time, and whenever it did it would throw our support channel into disarray and sales would drop by 50%.&#8221;</p>\n<p>Guilmette said the most important thing WP All Import customers want to know is if the product will be able to import their files. The testing platform drives sales for the company and reduces refunds and buyer&#8217;s remorse, because customers know exactly what they are getting. It also has proven to reduce support requests.</p>\n<p>&#8220;We get way fewer simple questions about the UI, because people can just try it,&#8221; Guilmette said. &#8220;So that clears support up for people who have real problems. It also makes those support requests easier, because the user can reproduce the problem on a debug install, and we can poke at it without worrying about breaking their site.&#8221;</p>\n<p>Guilmette said the team is working on launching the commercial tier and may have something ready within a couple of weeks or sooner with the help of testers.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 29 Mar 2017 19:36:21 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:30;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"HeroPress: WordPress: A Tool for Success\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://heropress.com/?post_type=heropress-essays&p=1672\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"https://heropress.com/essays/wordpress-tool-success/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:12379:\"<img width=\"960\" height=\"480\" src=\"http://20094-presscdn.pagely.netdna-cdn.com/wp-content/uploads/2017/03/032917-min-1024x512.jpg\" class=\"attachment-large size-large wp-post-image\" alt=\"Pull Quote: I was not an obvious choice for a successful web person, but WordPress helped me reach my goals.\" /><p>I was a college teacher for most of my life. When my fourth baby arrived, I gave up a travel-heavy university job and took a “mommy job” as a bookstore manager. I chose books, held teacher workshops, and read stories to children for 15 years. As the internet became important, we put up a website and I became the manager of that site. 18 months later, the bookstore’s owners went bankrupt and closed the store.</p>\n<p>My initial reaction was, “They can’t do that – we’re #2 on Google!” We’d also gone from zero ecommerce sales to $5,000 a month. We had visitors to our blog from 192 different countries. Online, we were a success. But it was 2008, and lots of small businesses were going under. Lots of people were unemployed. I was unemployed for the first time in my life.</p>\n<p>Being #2 or even #1 on Google had a different meaning in those days, before customized search results. For me, it meant that I had become skilled with SEO and content marketing, but I figured I’d have to return to the classroom when my job ended.</p>\n<blockquote><p>“We couldn’t have done this without you,” the owner of the bookstore said. “There are other businesses that would benefit from your skills. Why don’t you go into business helping them?”</p></blockquote>\n<p>I scoffed bitterly. I had kids in college and two more getting ready to finish high school. I clearly needed a higher level of security than self-employment could offer.</p>\n<p>What’s more, I had already discovered that people who found out what I did with computers invariably looked at me oddly and said, “You don’t look like a computer guy.” They were right, although we now have a much more open minded idea of what computer guys can look like. Back then, though, I looked like someone’s mom. I was someone’s mom. This caused a high level of cognitive dissonance for some people, I knew.</p>\n<p>But I was bold enough to do a little bit of helping other businesses while I looked for work. I wrote an essay at the site that was then SEOMoz and got a job offer in the comments. I picked up a couple of local clients, and then through an online marketplace found some international clients. I went to job interviews, of course, and was offered jobs managing various things. But nothing I was offered was as fun as the work I was doing online. I turned down all the offers I received.</p>\n<h3>The Web People</h3>\n<p>I clearly remember my last job interview. It was Halloween 2008. I was talking with the vice chancellor at a medical school about his online needs. This was my first IRL tech job interview and the vice chancellor had told me I was his favorite candidate. The secretary came to the door and said, “We need to take Rebecca down to the basement to meet the Web People.”</p>\n<p>She was dressed as a witch. The hallways were full of cotton spider webs and spooky decorations. She was taking me down to the basement to meet the Web People. I was the only one who laughed.</p>\n<p>You see the humor, right? They did not. I realized that I didn’t really want to go back to academia, I didn’t want to manage things, and I didn’t want to sit in a cubicle proofreading. I wanted to have fun with websites.</p>\n<p>I talked with my family about the possibility of going into business for myself, and the possibility that I could fail and limit their college choices. My youngest son said, “You’ve always done what’s best for us. You should do what’s best for you.”<br />\nI have great kids.</p>\n<blockquote><p>At that point, I reviewed my income figures, saw that I was earning twice as much as I had earned as a bookstore manager, and decided that I would carry on as an independent Web Person.</p></blockquote>\n<p>As a freelance web writer and SEO, I never met a CMS I couldn’t make friends with. If there wasn’t a CMS at a website, I used Dreamweaver. Drupal, Joomla, Mango, sticks and clay tablets, I didn’t care. I used WordPress along with all the other options my clients wanted. In 2009, after being featured in the Wall Street Journal, my freelance business boomed. I teamed up with designers and built websites in addition to writing for web designers and agencies and businesses on four continents.</p>\n<p>My eldest daughter, Rosie, saw that I needed some help and came to work with me. “Saw that I needed some help” may be too kind a way to put it. I have some useful skills, but my main goal for my business was not to starve in the gutter and my main goal for accounting was to keep out of jail. We met with the local Small Business Association rep a couple of months after Rosie joined me and he said to me, kindly but firmly, “You’d be in trouble without her.”</p>\n<p>But with Rosie as my partner, I was able to build a thriving business. In 2010 we built a WordPress site for K-12 teachers just in time for our first WordCamp. We needed a lab site, and I had just finished writing a bunch of lesson plans with the Kennedy Center for the Performing Arts. In the course of that project I had discovered how limited online STEM (science, tech, engineering, and math) options for K-12 teachers were. We built a website called FreshPlans to help fill that need and had a functioning WordPress site for WordCamp.</p>\n<h3>0 to 8,000 in six months</h3>\n<p>Six months later, Rosie and I were looking at the stats for FreshPlans – 8,000 visits a month – and she said, “Why aren’t we doing this for our own website? Why aren’t we doing this for all our clients?”</p>\n<p>I didn’t have a good answer for why we weren’t doing it, but we went ahead and switched our business site to WordPress. We convinced our designer to give WordPress a chance and built WordPress websites for clients who needed new sites. We saw how much more sense the websites made to our clients. We saw how much more quickly we could build the sites and how much more value we could provide for our clients without the cost of bringing in a developer. We found that we were able to streamline our process for the clients whose blogging and social media we look after. We saw impressive results for our clients, too; not every website can go from 0 to 8,000 visits in six months, but we definitely see better results with WordPress than without it.</p>\n<p>Within a year, we went from platform agnostic to a dedicated WordPress shop. It worked better for us. It worked better for the people whose sites we built and managed. We were also beginning to see the value of open source and to appreciate the WordPress community.</p>\n<p>After that first WordCamp, I spoke at a couple of camps every year and our company sponsors and helps organize a couple of WordCamps nearly every year. Last year I spoke at three and I hope to continue expanding that service. WordPress has been good to us and we want to give back to the awesome WordPress community.</p>\n<h3>WordPress Success</h3>\n<p>Our business has grown. My eldest son graduated from college and joined the family business. My second daughter left us to work for Automattic. We’ve had some rough times, as every business does, but we can be proud of the work we do.</p>\n<p>We have the privilege of working with awesome clients, both locally and around the world. They can share their brands and their bigger messages in ways that would have been difficult and costly just a decade ago. We’re able to get great results for them – with hard work and WordPress.</p>\n<blockquote><p>WordPress is not a magic pixie dust you can sprinkle on your website for instant success.</p></blockquote>\n<p>But there are some things about WordPress that set you up for success:</p>\n<ul>\n<li>It may not be true (okay, it isn’t true) that you can master WordPress with no tech skills, training, or effort. But you don’t have to be a programmer to get the results you want and need in WordPress. If you have something to say, you can get it published more easily in WordPress than with other platforms.</li>\n<li>There’s no quality tradeoff. We usually build custom websites with talented and trained designers, but I’ve built dozens myself with pre-made themes and my own HTML and CSS skills (and great photos – the secret weapon for non-artists who want to create beautiful WordPress websites). Either way, you’re not limited by WordPress as you are by drag-and-drop sitebuilding tools.</li>\n<li>Because updating and adding content is so easy with WordPress, you can accomplish the essentials of content marketing more easily. You can focus on your message with less worry about the medium. You and your Web People can shape the web experience you want for your visitors efficiently.</li>\n<li>WordPress has the most supportive community you can find. We’re friends with local companies that we could also call competitors, because we spend time together in Meetups and WordCamp organizing meetings. We also have a large network of WordPress folks we respect and admire. It’s great to see them in person at WordCamps, but we also have the opportunity to get to know them better virtually. We help them and they help us.</li>\n</ul>\n<p>I can say from experience that WordPress has made a big difference in my life. I’m still a mom – in fact, I’m now a grandmother. But I’m also the owner of a successful web firm and a successful educational website. I write for and care for a number of websites I can be proud of.</p>\n<p>Last year at WordCamp Kansas City a man came up to show me his new website. I had spoken the year before about how to get started with a WordPress website, and he had been able to build a site for his fantasy hockey league. He was excited to show it to me, and I was excited to see it. That capacity to help other people achieve their goals with WordPress means a lot to me.</p>\n<p>If you’re just starting with WordPress, let my story encourage you. I was not an obvious choice for a successful Web Person, but WordPress helped me reach my goals. If you’re already a success with WordPress, find opportunities to help others reach their success, too.</p>\n<p>It’s the WordPress way.</p>\n<div class=\"rtsocial-container rtsocial-container-align-right rtsocial-horizontal\"><div class=\"rtsocial-twitter-horizontal\"><div class=\"rtsocial-twitter-horizontal-button\"><a title=\"Tweet: WordPress: A Tool for Success\" class=\"rtsocial-twitter-button\" href=\"https://twitter.com/share?text=WordPress%3A%20A%20Tool%20for%20Success&via=heropress&url=https%3A%2F%2Fheropress.com%2Fessays%2Fwordpress-tool-success%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-fb-horizontal fb-light\"><div class=\"rtsocial-fb-horizontal-button\"><a title=\"Like: WordPress: A Tool for Success\" class=\"rtsocial-fb-button rtsocial-fb-like-light\" href=\"https://www.facebook.com/sharer.php?u=https%3A%2F%2Fheropress.com%2Fessays%2Fwordpress-tool-success%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-linkedin-horizontal\"><div class=\"rtsocial-linkedin-horizontal-button\"><a class=\"rtsocial-linkedin-button\" href=\"https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fheropress.com%2Fessays%2Fwordpress-tool-success%2F&title=WordPress%3A+A+Tool+for+Success\" rel=\"nofollow\" target=\"_blank\" title=\"Share: WordPress: A Tool for Success\"></a></div></div><div class=\"rtsocial-pinterest-horizontal\"><div class=\"rtsocial-pinterest-horizontal-button\"><a class=\"rtsocial-pinterest-button\" href=\"https://pinterest.com/pin/create/button/?url=https://heropress.com/essays/wordpress-tool-success/&media=https://heropress.com/wp-content/uploads/2017/03/032917-min-150x150.jpg&description=WordPress: A Tool for Success\" rel=\"nofollow\" target=\"_blank\" title=\"Pin: WordPress: A Tool for Success\"></a></div></div><a rel=\"nofollow\" class=\"perma-link\" href=\"https://heropress.com/essays/wordpress-tool-success/\" title=\"WordPress: A Tool for Success\"></a></div><p>The post <a rel=\"nofollow\" href=\"https://heropress.com/essays/wordpress-tool-success/\">WordPress: A Tool for Success</a> appeared first on <a rel=\"nofollow\" href=\"https://heropress.com\">HeroPress</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 29 Mar 2017 11:30:02 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Rebecca Haden\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:31;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:93:\"WPTavern: Poedit 2 Introduces Direct Connection to WordPress, Adds Support for Twig Templates\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68041\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:103:\"https://wptavern.com/poedit-2-introduces-direct-connection-to-wordpress-adds-support-for-twig-templates\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2392:\"<p><a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/03/poedit.png?ssl=1\"><img /></a></p>\n<p><a href=\"https://poedit.net/news/introducing-poedit2\" target=\"_blank\">Poedit 2</a> was released today after two years in development. The app has a refreshed interface for translating .PO files, which Poedit creator Václav Slavík said was created by a professional designer. It is also the first paid upgrade for Pro users since the app <a href=\"https://wptavern.com/poedit-adds-pro-support-for-wordpress-theme-and-plugin-translation\" target=\"_blank\">added support for WordPress theme and plugin translations</a> in 2013.</p>\n<p>Poedit 2 introduces direct connectivity support for WordPress, allowing developers to connect directly to the server instead of working with unpackaged plugins/themes locally.</p>\n<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/03/wordpress_connect@2x.png?ssl=1\"><img /></a><br />\n&#8220;Putting translation files on the server was the most common source of problems in Poedit (too many things can go wrong if you’re not yet very familiar with WP) and this feature should help a lot with that,&#8221; Slavík said.</p>\n<p>This release adds support for <a href=\"http://twig.sensiolabs.org/\" target=\"_blank\">Twig templates</a> and <a href=\"https://upstatement.com/timber/\" target=\"_blank\">Timber</a>. In the past, users had difficulty extracting strings from Twig templates, requiring some fragile workarounds. Slavík said some users resorted to setting up Poedit to treat them as Python files. Poedit 2 has a new built-in extractor for Twig.</p>\n<p>Poedit 2 also introduces a new pre-translation feature that allows for batch pre-translation of the entire PO file at once using Poedit&#8217;s online database and machine translation. After this has processed, users can then read through and correct any errors. Slavík said this feature saves a lot of time for many WordPress-related translations, such as themes, where a lot of strings are often repeated.</p>\n<p>Poedit used to be available from the Mac App Store but is now distributed exclusively from the <a href=\"https://poedit.net/\" target=\"_blank\">Poedit.net</a> website. The latest release drops support for older operating systems and requires users to be on Windows 7 or newer, macOS 10.10 Yosemite, or a modern Linux distribution.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 29 Mar 2017 01:02:04 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:32;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:105:\"WPTavern: Data From Theme Reviews Shows Authors Need More Education on Developing Secure WordPress Themes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=67987\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:116:\"https://wptavern.com/data-from-theme-reviews-shows-authors-need-more-education-on-developing-secure-wordpress-themes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4489:\"<p>Last week, we <a href=\"https://wptavern.com/wordpress-theme-review-team-making-progress-on-clearing-out-1000-review-backlog\">highlighted the progress</a> being made by the Theme Review Team in clearing out a 1K+ review backlog. In an effort to determine common problems with themes discovered by reviewers, Carolina Nymark, a member of the Theme Review Team, <a href=\"https://make.wordpress.org/themes/2017/03/25/review-statistics/\">reviewed 100 tickets</a> from 531 themes that were closed and marked not approved between December and February. Nymark cautions that the data does not assure statistical accuracy and is not representative of the entire directory.</p>\n<p>Her assessment shows that the most common problems discovered by reviewers were:</p>\n<ul>\n<li>Missing escaping or using the wrong functions: 23 themes</li>\n<li>Text that is not translation ready: 21 themes</li>\n<li>Missing prefix: 20 themes</li>\n<li>Scripts or styles are not enqueued: 18 themes</li>\n<li>PHP notices, errors or warnings: 12 themes</li>\n<li>Style tags does not correspond with theme functionality, or are deprecated: 10 themes</li>\n</ul>\n<p>Nymark also reviewed 100 out of 177 new themes that went live between December and February. Out of these themes, the most common problems were:</p>\n<ul>\n<li>Missing escaping or using the wrong functions: 51 Themes</li>\n<li>Text that is not translation ready: 44 Themes</li>\n<li>Missing prefix: 39 Themes</li>\n<li>Missing license or copyright information for included assets: 34 Themes</li>\n<li>Unused code or files: 25 Themes</li>\n<li>PHP notices, errors or warnings: 20 Themes</li>\n<li>Missing sanitization, or using the wrong functions: 18 Themes</li>\n<li>Options in the customizer that are not working: 18 Themes</li>\n</ul>\n<p>Last Friday, Jose Castaneda, Ulrich Pogson, and Nymark participated in a <a href=\"https://make.wordpress.org/themes/2017/03/27/chat-with-matt-about-the-future-of-theme-repo/\">voice chat</a> with Matt Mullenweg, co-creator of the WordPress project, to discuss the future of the theme directory. The team discussed ideas around automation, improving the theme preview experience, and content portability. One of the experiments Mullenweg proposed is to remove the manual review process and rely more on user feedback. Feedback could include, tags, reviews, and other meta data.</p>\n<p>&#8220;As we are not sure if the process will function without manual reviews, we will start working on getting better user feedback on themes,&#8221; Pogson said. &#8220;Once we have a good infrastructure in place we can experiment with how the repository reacts with no manual reviews.</p>\n<p>&#8220;We discussed the process we would go about making decisions on changes to the theme repository and came to the consensus that a direct democracy is too fragile and representative democracy would be a better solution.&#8221;</p>\n<p>Security, code errors, and prefixing, were also mentioned in the conversation as the most common issues encountered with themes. The team was given a series of tasks to complete and will report the results to Mullenweg at a later date.</p>\n<h2>New Theme Check Plugin Will Detect Common Security Issues</h2>\n<p>The <a href=\"https://make.wordpress.org/themes/handbook/about/\">Theme Handbook</a> doesn&#8217;t have a chapter on security but it does link to a series of articles on writing secure themes in the <a href=\"https://make.wordpress.org/themes/handbook/review/resources/\">resources section</a>. Justin Tadlock, Key Reviewer, says work is underway on a new <a href=\"https://github.com/WPTRT/WordPress-Coding-Standards\">Theme Check</a> plugin that will automatically detect security issues commonly seen during the manual review process. These include escaping and data sanitization.</p>\n<p>&#8220;If we could get the greater theme developer community to pitch in and help get this finished, it would be awesome,&#8221; Tadlock said. &#8220;Even outside of WordPress.org, ThemeForest and commercial theme shops could really use this.&#8221;</p>\n<p>Members of the TRT are testing the plugin behind the scenes and are working to eliminate false-positives. The best way to get involved in the project is to view the<a href=\"https://github.com/WPTRT/WordPress-Coding-Standards/issues\"> Issue tracker</a> and submit pull requests. Once the new theme check plugin is live, it will give authors another tool at their disposal for developing more secure WordPress themes.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 28 Mar 2017 22:52:21 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:33;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:93:\"WPTavern: WordPress Relaunches Plugin Directory with New Design and Improved Search Algorithm\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=68018\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:104:\"https://wptavern.com/wordpress-relaunches-plugin-directory-with-new-design-and-improved-search-algorithm\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5396:\"<p>The new <a href=\"https://wordpress.org/plugins/\" target=\"_blank\">WordPress Plugin Directory</a> went live today. Contributors have been working for the past year on rebuilding the directory with a new design and better capabilities for searching through the 45K+ available plugins.</p>\n<p>The new landing page displays a search bar prominently at the top, followed by sections for featured plugins, popular plugins, and beta plugins.</p>\n<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/03/wordpress-plugin-directory.png?ssl=1\"><img /></a></p>\n<p>The design changes to the individual plugin pages have received <a href=\"https://www.facebook.com/groups/advancedwp/permalink/1446257985436411/?match=YWR2YW5jZWQgd29yZHByZXNzLHdvcmRwcmVzcy5vcmcsd29yZHByZXNzLGFkdmFuY2Vk\" target=\"_blank\">mixed feedback from members of Advanced WordPress Facebook.</a> The screenshots slider and FAQ accordion UI are welcome improvements, but many are not fond of how the new single plugin display ditches the previous tabbed interface in favor of truncated sections with numerous &#8220;read more&#8221; links. This requires the visitor to click and scroll repeatedly through a massive wall of text. The experience of doing this to find information is much less efficient than the previous tabbed UI.</p>\n<p>Many of the plugin header images appear to be stretched now with the new wider content area, but this may encourage developers to update their listings. Several users have commented that they are disappointed with the removal of stats, which are now viewable for admins only. Plugin team member Mika Epstein said they are waiting for more feedback from end users (not plugin developers) on whether to make them publicly viewable again.</p>\n<p>The new design matches <a href=\"https://wptavern.com/wordpress-org-launches-homepage-redesign\" target=\"_blank\">WordPress.org&#8217;s homepage redesign</a>, which went from sketches to prototype to live during the last few weeks of December 2016. The most exciting improvements, however, are found under the hood.</p>\n<p>The plugin directory is now powered by WordPress, instead of bbPress, making it easier for plugin developers and reviewers to manage plugins, tags/categories, and committers. The submission and review process has also been streamlined so the plugin team will no longer reject plugins after 7 days. They also have to ability to rename plugin slugs prior to approval for easier handling of typos.</p>\n<h3>New Plugin Search Algorithm Delivers More Relevant Results</h3>\n<p>The most significant user-facing improvement in the redesign is better search relevance. <a href=\"https://make.wordpress.org/meta/2016/08/30/initial-analysis-of-plugin-search-logs/\" target=\"_blank\">Analysis of plugin search logs</a> in August 2016 showed the directory handles 100,000 searches per day and receives more than 500k unique search queries per month.</p>\n<p>Greg Ichneumon Brown, a Data Wrangler at Automattic, published an in-depth <a href=\"https://data.blog/2017/03/15/improving-relevance-and-elasticsearch-query-patterns/\" target=\"_blank\">article</a> on how he and contributors improved search fidelity for the new plugin directory. The eye-opening account explains just how opinionated search algorithms need to be in order to give users the best experience at this scale.</p>\n<p>&#8220;In improving the fidelity of search results, it’s not just a question of how we satisfy a single user’s search query, but how we satisfy thousands of users for each unique search term: which plugins will support that volume of users and their requests for support?&#8221; Brown said. &#8220;Which are most likely to give all of these users a great WordPress experience?&#8221;</p>\n<p>The new search algorithm delivers results based on this premise. Brown added a calculation for the lowest/highest ratio of active_installs to the number of times the search was performed. However, this isn&#8217;t the only factor that influences whether or not a users will have a good experience with the top results. The algorithm also includes signals that Brown said plugin authors have a lot more control over:</p>\n<ul>\n<li>Resolving support threads</li>\n<li>Keeping the plugin update to date</li>\n<li>Testing the plugin on the latest versions of WordPress</li>\n</ul>\n<p>Brown&#8217;s <a href=\"https://data.blog/2017/03/15/improving-relevance-and-elasticsearch-query-patterns/\" target=\"_blank\">post</a> breaks down the Elasticsearch query he developed for the directory and explains how text matching works to find relevant results for author searches, queries that include operators, and partial-word boosting.</p>\n<p>The plugin directory relaunch has several known issues that the plugin team noted in the <a href=\"https://make.wordpress.org/plugins/2017/03/28/the-new-directory-is-mostly-live/\" target=\"_blank\">announcement</a> today. Users are noticing many broken links, problems with SVN, and other bugs when navigating around the new directory. The team has a list of tickets on <a href=\"https://meta.trac.wordpress.org/query?status=reopened&status=assigned&status=reviewing&status=new&status=accepted&group=status&milestone=Plugin+Directory+v3.0\" target=\"_blank\">Meta Trac</a> that they are working through and feedback is welcome. Plugin submissions are temporarily disabled while the transition is completed.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 28 Mar 2017 21:59:33 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:34;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:85:\"WPTavern: UK Home Secretary Amber Rudd Links WordPress.com to the Spread of Terrorism\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=67968\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:96:\"https://wptavern.com/uk-home-secretary-amber-rudd-links-wordpress-com-to-the-spread-of-terrorism\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:7298:\"<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/03/wordpresscom-logo.jpg?ssl=1\"><img /></a></p>\n<p>UK government officials are targeting online service providers after terrorist Khalid Masood killed four people and injured more than two dozen in an attack in Westminster last week. In an <a href=\"http://www.telegraph.co.uk/news/2017/03/26/amber-rudd-social-media-firms-must-do-stop-terror/\" target=\"_blank\">article</a> published on the Telegraph Sunday morning, British Home Secretary Amber Rudd called on Google, Twitter, and Facebook to take action on extremist content. She also identified Telegram, Justpaste.it, and WordPress.com as smaller platforms through which terrorist activity is spreading.</p>\n<p>&#8220;There should be no place for terrorists to hide,&#8221; Rudd told Andrew Marr in an <a href=\"http://www.bbc.co.uk/programmes/p04y2cnh\" target=\"_blank\">interview</a> over the weekend. &#8220;We need to make sure organizations like WhatsApp, and there are plenty of others like that, don’t provide a secret place for terrorists to communicate with each other.&#8221;</p>\n<p>Last week&#8217;s attack in London also seems to have reignited the UK government&#8217;s war on encryption, as Rudd said that the security agencies&#8217; inability to crack encrypted messages during an investigation is &#8220;completely unacceptable.&#8221; Masood allegedly used WhatsApp to communicate shortly before the attack.</p>\n<p>The Home Secretary has summoned representatives from a list of online service providers, including Google, Twitter, Facebook, and smaller companies, to a meeting this week to discuss combatting terrorist abuse of these platforms. Automattic would not confirm whether the company has been summoned but it seems likely given that WordPress.com was one of the platforms Rudd highlighted over the weekend.</p>\n<p>The Telegraph article strongly linked WordPress.com to terrorism, citing several claims from the Counter Extremism Project that the Washington Post <a href=\"https://www.washingtonpost.com/news/the-switch/wp/2017/03/01/how-alleged-isis-videos-are-creating-a-headache-for-wordpress/?utm_term=.bb8acba3d6ff\" target=\"_blank\">published</a> earlier this month:</p>\n<blockquote><p>But most such sites are publicly available and used to spread content. According to US think tank the Counter Extremism Project, WordPress.com sites have played host to beheading videos, firing squads, and a video of a man being shot in the head, emblazoned with the words &#8216;This In the Enemy Of Allah.&#8217;</p></blockquote>\n<p>Historically, WordPress.com has been a strong supporter of free speech but posting terrorist propaganda is a violation of its terms of service. The site has a dedicated page outlining the platform&#8217;s stance on <a href=\"https://en.support.wordpress.com/terrorist-activity/\" target=\"_blank\">terrorist activity</a>:</p>\n<blockquote><p>While our service is designed to enable users to freely express their ideas and opinions, however controversial, safety is important to us. As such, we don’t allow websites of known terrorist groups or genuine calls for violence against individuals or groups on WordPress.com.</p></blockquote>\n<p>WordPress.com users can <a href=\"https://en.support.wordpress.com/report-blogs/\" target=\"_blank\">report sites</a> they find to be suspicious but the page also emphasizes the platform&#8217;s commitment to free speech:</p>\n<blockquote><p>Please note that the team behind WordPress.com strongly believes in freedom of speech. WordPress.com has a vast audience spread across many cultures, countries and backgrounds with varying values and our service is designed to let internet users freely express any ideas and opinions without us censoring or endorsing them.</p>\n<p>We take all reports seriously, but we won’t remove sites just because they are offensive.</p></blockquote>\n<p>WordPress.com also denies use to individuals, groups, or entities on the <a href=\"https://www.treasury.gov/ofac/downloads/sdnlist.pdf\" target=\"_blank\">Specially Designated Nationals</a> list, maintained by the U.S. Department of the Treasury’s Office of Foreign Assets Control.</p>\n<p>It&#8217;s not yet clear what Home Secretary Rudd is calling for in summoning global tech company representatives to a meeting, but her comments on the Andrew Marr show indicate the government may request closer monitoring.</p>\n<p>&#8220;What I&#8217;m saying is the best people &#8211; who understand the technology, who understand the necessary hashtags to stop this stuff even being put up, not just taking it down, but stopping it being put up in the first place &#8211; are going to be them,&#8221; Rudd said. She also said she is in conversations with the U.S. government to help get all of these companies around the table to agree to stop this kind of content from being published in the first place.</p>\n<p>Automattic would not provide a comment at this time regarding its position on the UK government attempting to curb online extremism by targeting online services. However, the company has a long history of actively pushing back against requests that violate users&#8217; freedom of speech. In 2010, Automattic <a href=\"http://en.blog.wordpress.com/2010/07/01/support-the-first-amendment-with-1-for-all/\" target=\"_blank\">demonstrated its support for freedom of speech by raising awareness about the First Amendment</a>. Automattic&#8217;s General Counsel Paul Sieminski wrote about the company&#8217;s commitment to <a href=\"https://en.blog.wordpress.com/2013/11/21/striking-back-against-censorship/\" target=\"_blank\">strike back against censorship</a> in 2013 after taking to the courts to stand with users against DMCA abuse. In 2014, when tech companies all over the world joined forces to <a href=\"https://thedaywefightback.org/\" target=\"_blank\">protest NSA surveillance</a>, Automattic was among them.</p>\n<p>If Rudd&#8217;s call for tech companies to take &#8220;a more proactive role&#8221; in tackling terrorist abuse ultimately means introducing monitoring that violates users&#8217; privacy and gives government more access, she will be hard-pressed to get cooperation. American companies like Automattic and Apple have already demonstrated they are willing to go to court to protect users&#8217; freedoms and privacy.</p>\n<blockquote class=\"twitter-tweet\">\n<p lang=\"en\" dir=\"ltr\">To help keep our streets safe, we need to rise up against companies like <a href=\"https://twitter.com/hashtag/Apple?src=hash\">#Apple</a> and <a href=\"https://twitter.com/hashtag/Whattsapp?src=hash\">#Whattsapp</a> who provide space and comfort to terrorists</p>\n<p>&mdash; Nadine Dorries (@NadineDorriesMP) <a href=\"https://twitter.com/NadineDorriesMP/status/846267877435035648\">March 27, 2017</a></p></blockquote>\n<p></p>\n<p>The anti-encryption rhetoric surrounding this issue seems manufactured to allow UK government officials to capitalize on a public tragedy in order to push a political agenda. Rudd is unlikely to find many companies in the tech industry that are eager to hand over users&#8217; freedoms and private communications, but hopefully the summit will serve to educate government officials on why it&#8217;s dangerous to legislate backdoors into consumer products.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 27 Mar 2017 22:30:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:35;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"WPTavern: WordCamp Miami 2017 Will Livestream All Sessions this Weekend\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=67929\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"https://wptavern.com/wordcamp-miami-2017-will-livestream-all-sessions-this-weekend\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1577:\"<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/02/wordcamp-miami-2017.png?ssl=1\"><img /></a></p>\n<p><a href=\"https://2017.miami.wordcamp.org/\" target=\"_blank\">WordCamp Miami</a> kicked off today with its ancillary workshops for beginners, freelancers, and BuddyPress enthusiasts. The WordCamp is entering its 9th year and organizers are expecting more than 800 attendees. Tickets are once again sold out, but latecomers hoping to attend can sign up for the <a href=\"http://davidbisset.us6.list-manage.com/subscribe?u=8f9242549d66d09eceb714b54&id=6685084fbd\" target=\"_blank\">wait list</a>.</p>\n<p>WordCamp Miami is one of the most well-established WordPress events and is known for having high quality sessions. This year&#8217;s <a href=\"https://2017.miami.wordcamp.org/schedule/\" target=\"_blank\">schedule</a> includes 60+ local and international speakers, a JavaScript learning track, and new AMA spots, featuring prominent people in the community. If you are unable to attend but want to join in remotely, the camp will be <a href=\"https://2017.miami.wordcamp.org/live/\" target=\"_blank\">live streaming</a> all sessions on Saturday and Sunday for free. There is no registration for the <a href=\"https://2017.miami.wordcamp.org/live/\" target=\"_blank\">live stream</a> and organizer David Bisset said it doesn&#8217;t have a limit on the number of people who can watch simultaneously. Participants can join in on Twitter with the <a href=\"https://twitter.com/hashtag/wcmia?src=hash\" target=\"_blank\">#wcmia</a> hashtag.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 24 Mar 2017 21:52:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:36;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"WPTavern: Medium Aims to Fix ‘Broken’ Media with New $5 Subscription Program\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=67900\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"https://wptavern.com/medium-aims-to-fix-broken-media-with-new-5-subscription-program\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:6399:\"<p><a href=\"https://i2.wp.com/wptavern.com/wp-content/uploads/2017/03/medium.jpg?ssl=1\"><img /></a></p>\n<p>Nearly three months after <a href=\"https://blog.medium.com/renewing-mediums-focus-98f374a960be#.xij39212w\" target=\"_blank\">laying off a third of its staff</a> and publicly admitting that its previous ad-based revenue model was broken, Medium has introduced a new <a href=\"https://blog.medium.com/upgrade-your-medium-924b74c36552#.8qjmspkzj\" target=\"_blank\">$5 per month subscription program</a>. The internet speculated freely about Medium&#8217;s next move after CEO Ev Williams said the company would be taking “a different, bolder approach” to the problem of driving payment for quality content.</p>\n<p>It turns out the &#8220;bolder approach&#8221; he referenced is a subscription-based model, one that <a href=\"https://thenextweb.com/opinion/2017/03/23/ev-williams-lost-goddamn-mind/#.tnw_zZrtqFcj\" target=\"_blank\">skeptics</a> are already eager to <a href=\"https://www.theregister.co.uk/2017/03/24/medium_five_bucks_a_month_for_nothing/\" target=\"_blank\">tear apart</a> as many media organizations have struggled to find success with paywalls. Early subscribers will receive access to curated content, a new reading experience, ad-free browsing, and an offline reading list. Medium will be using the subscription revenue to pay writers for content, some of which will be restricted to members only.</p>\n<p>&#8220;We will be routing 100% of the revenue from founding members (those who sign up in the first few months) to writers and independent publishers who have important work to do,&#8221; Williams said. &#8220;Those who have hard-won expertise, do exhaustive research, and think deeply. Those who make us all smarter. Those who maximize our understanding of the world but don’t necessarily maximize clicks — and, therefore, are at a disadvantage amongst the highly optimized algorithm chum being slung by the truckload by low-cost content purveyors.&#8221;</p>\n<p>Medium&#8217;s new curated content stream will surface the most worthwhile articles from its network, which grew from 1.9 million posts in 2015 to 7.5 million in 2016 posts. Williams identified the types of content members can expect with their subscriptions in a <a href=\"https://blog.medium.com/our-approach-to-member-only-content-cfce188261d1#.ciyj1nlir\" target=\"_blank\">followup post</a> viewable only to subscribers:</p>\n<ul>\n<li>Politics. What’s happening behind the headlines. How to think about it. What to do about it.</li>\n<li>Work. Lessons in business, startups, leadership, management, and money.</li>\n<li>Self. Smart takes on how to be your best you — happier, healthier, more productive.</li>\n<li>Future. Where the world is going — technology, trends, what it all means.</li>\n</ul>\n<p>For those who have long regarded Medium as the home of hot takes, open letters, and scintillating rants, the new curated content will feature pieces from those who Williams describes as &#8220;doing important work.&#8221; The list above indicates the platform will be promoting a hefty does of spoon-fed thought and self-improvement topics. In order to make money from the people who have it to spend, the blogging silo must focus on helping those with too much information and not enough time to figure out &#8220;how to think about&#8221; important issues.</p>\n<p>Medium is currently <a href=\"https://medium.com/@adamhodgkin/medium-needs-a-business-model-550d3e2ff2ab#.f0ld2suga\" target=\"_blank\">soliciting writers via email</a>, according to one recipient, Adam Hodgkin. This move marks a change in the company where it is essentially becoming a publisher in addition to an aggregator, commissioning content that will deliver that trademark Medium flavor.</p>\n<p>Authors should be aware that articles published behind Medium&#8217;s paywall will lose their potential to go viral. In addition to trading site and content ownership for convenience, those who agree to write for Medium&#8217;s members will be limiting the potential reach their content may have had if it was published in the open.</p>\n<p>&#8220;Media is broken,&#8221; Williams said. &#8220;And we need to fix it. I’m super passionate about this. Though we’ve changed our approach recently, this has been Medium’s mission from day one. We saw the feedback loops for publishing content to be a major problem, and we set out to build a new model. We’ve come a long way since — establishing ourselves as the platform for thoughtfulness, depth, and insight from independent thinkers. But the greater challenge — changing the incentives that drive our consumption of media online — has become even more pressing. It’s time to double-down.&#8221;</p>\n<p>If there&#8217;s something new about this economic model, we have yet to see it. Spotify, Netflix, the Financial Times, the Wall Street Journal, and many other businesses have successfully implemented the subscription model. Using it to fund the type of content that Medium aims to highlight may not be feasible, however, as consumers tend to gravitate towards free content and news that is read and shared in the open.</p>\n<p>If Medium&#8217;s only option for exiting the <a href=\"http://readwrite.com/2007/03/01/attention_economy_overview/\" target=\"_blank\">attention economy</a> is to further lock down users&#8217; content inside its proprietary silo, the remedy is worse than the disease. Instead of seeing ads on articles available to everyone, subscribers now pay to read content that is selected by and owned by Medium, a company that still needs to find a way to keep the lights on once all the VC money is gone.</p>\n<p>Medium tried the ad-driven publishing model without success and then declared that it was a broken system. Was the model broken because it didn&#8217;t bring Medium enough money to keep paddling on? Or is it fundamentally broken because it &#8220;incentivizes the wrong behaviors,&#8221; as Williams put it? His newfound idealism behind the push to leave the domain of &#8220;ad buyers and social media echo chambers&#8221; appears to be a mask for the lack of a concrete monetization strategy.</p>\n<p>Williams&#8217; closing appeal says everything: &#8220;Join us early, and help us figure it out.&#8221; Medium is still experimenting on publishers to find a way to stay afloat.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 24 Mar 2017 21:24:49 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:37;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"WPTavern: How to Find the Age of a Plugin Hosted in the WordPress Plugin Directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=67923\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:93:\"https://wptavern.com/how-to-find-the-age-of-a-plugin-hosted-in-the-wordpress-plugin-directory\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1554:\"<p>The <a href=\"https://wordpress.org/plugins/\">WordPress plugin directory</a> provides information such as version requirements, compatibility, last updated, and active installs for plugins. What it doesn&#8217;t tell you is how old a plugin is. A new site called<a href=\"http://pluginage.ahmadawais.com/\"> Age WP Plugin</a> created by <a href=\"https://AhmadAwais.com\">Ahmad Awais</a> and <a href=\"https://maedahbatool.com/\">Maedah Batool</a> makes finding this information easy. Simply type in a plugin&#8217;s slug into the search box and hit enter.</p>\n<img />Hello Dolly is 8 Years Old\n<p>Awais created the site after Batool inquired about the age of a plugin for an article she was writing. Using the WordPress.org API, Awais discovered that one of the data points was a plugin&#8217;s submission date. In addition to displaying a plugin&#8217;s age, the site also shows the number of downloads it has. In early 2015, the <a href=\"https://wptavern.com/wordpress-plugin-directory-launches-new-design\">plugin directory was redesigned</a> and replaced the download count with the number of active installs.</p>\n<p>The site has <a href=\"https://www.facebook.com/groups/advancedwp/permalink/1441868299208713/\">received positive feedback</a> from plugin authors in the Advanced WordPress Facebook group. Something I&#8217;d like to see added is a list of 10 or 25 of the oldest plugins in the directory. Awais plans to redesign the site using a different color scheme and fix styling issues reported by testers.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 24 Mar 2017 19:12:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:38;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"WPTavern: PHP 5.6 Is Now the Most Widely Used PHP Version\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=67851\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"https://wptavern.com/php-5-6-is-now-the-most-widely-used-php-version\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2510:\"<p>PHP 5.6 usage has steadily increased over the past year and has now overtaken versions 5.3 and 5.4 to be the most widely used version, according to <a href=\"https://w3techs.com/technologies/history_details/pl-php/5\" target=\"_blank\">W3Techs&#8217; stats</a>. PHP is used by 82.6% of all the websites for which W3Techs can detect a server-side programming language. PHP 7 accounts for 3.1% of these websites and PHP 5.x makes up 95.3%, with version 5.6 usage at the top end.</p>\n<p><a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/03/php-version-usage.png?ssl=1\"><img /></a></p>\n<p><a href=\"http://php.net/usage.php\" target=\"_blank\">PHP.net&#8217;s usage stats</a> page hasn&#8217;t been updated sine 2013 but the project recommends W3Techs&#8217; stats for viewing PHP market share by version. W3Techs&#8217; methodology takes the top 10 million websites, according to Alexa rankings, to offer a representative sample of established sites without including domain spammers.</p>\n<p>PHP 5.6 overtaking older versions is a significant milestone for the PHP community, since it still receives <a href=\"http://php.net/supported-versions.php\" target=\"_blank\">support for critical security issues</a> until December 31, 2018. The older versions that previously dominated usage reached End of Life in 2015 and 2016 and are no longer receiving security updates.</p>\n<p>Adoption of supported PHP versions is somewhat slower in the WordPress community. According to the project&#8217;s <a href=\"https://wordpress.org/about/stats/\" target=\"_blank\">stats</a>, more than half of all WordPress sites (55.6%) are using unsupported versions of PHP (versions 5.2 &#8211; 5.5).</p>\n<p>In early December 2016, WordPress updated its <a href=\"https://wordpress.org/about/requirements/\" target=\"_blank\">hosting recommendation</a> to PHP 7+, which should help new users who are approaching hosts to request their sites be put on newer versions of PHP. In addition to these recommendations, WordPress&#8217; strategy in the past has been to cultivate relationships with hosts to help improve host configurations for users. The project recently launched the <a href=\"https://make.wordpress.org/hosting/\" target=\"_blank\">Make WordPress Hosting</a> community to facilitate collaboration among those with hosting experience. Participants are currently working on documenting best practices, including recommendations for PHP versions offered, and providing tools for the community.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 23 Mar 2017 19:15:29 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:39;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"Matt: On the James Altucher Show\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"https://ma.tt/?p=47188\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"https://ma.tt/2017/03/on-the-james-altucher-show/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:450:\"<p>I <a href=\"http://www.jamesaltucher.com/2017/03/matt-mullenweg/\">joined in for the James Altucher podcast in an episode that covered a lot of ground</a>. One clarification was the point of the story about my Dad not making much at his old job was that companies should be thoughtful about compensation especially for the people who stay with them the longest, not that loyalty is a myth or something to be avoided. It just needs to be two-way.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 23 Mar 2017 16:29:13 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:40;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:115:\"WPTavern: WPWeekly Episode 268 – Behind the Scenes of WordPress Development Course, Up and Running Second Edition\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"https://wptavern.com?p=67846&preview=true&preview_id=67846\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:121:\"https://wptavern.com/wpweekly-episode-268-behind-the-scenes-of-wordpress-development-course-up-and-running-second-edition\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2416:\"<p>On this episode, <a href=\"http://www.marcuscouch.com/\">Marcus Couch</a> and I are joined by <a href=\"https://alexdenning.com/\">Alex Denning</a>, <a href=\"https://pressupinc.com/\">Fred Meyer, and David Hayes</a> of <a href=\"https://wpshout.com/\">WPShout</a> to discuss their WordPress Development course, <a href=\"https://wpshout.com/up-and-running/\">Up and Running Second Edition</a>. We learn why the trio created the course and who it&#8217;s geared towards.</p>\n<p>Later in the show, we have a great conversation surrounding the REST API and its potential impacts on WordPress. Near the end of the interview, we get their thoughts on the state of WordPress education.</p>\n<h2>Stories Discussed:</h2>\n<p><a href=\"https://wptavern.com/godaddy-acquires-sucuri\">GoDaddy Acquires Sucuri</a></p>\n<h2>Plugins Picked By Marcus:</h2>\n<p><a href=\"https://wordpress.org/plugins/wp-multisite-user-sync/\">WP Multisite User Sync</a> lets you Sync/unsync users from one site (blog) to other sites (blogs) in a WordPress Multisite network.</p>\n<p><a href=\"https://wordpress.org/plugins/woo-save-abandoned-carts/\">WooCommerce Live Checkout Field Capture</a> plugin saves all activity in the WooCommerce checkout form before it is submitted. This enables you to see who has abandoned their shopping carts with the ability to contact them and remind about the abandoned cart.</p>\n<p><a href=\"https://wordpress.org/plugins/after-comment-redirector/\">After Comment Redirector</a> lets you redirect to a custom page after commenting for all or new commentators. This is a handy way to say thank you to your most engaging readers. You can also give out a coupon, special e-book, or secret content when someone leaves a comment.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, March 29th 3:00 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href=\"https://wptavern.com/feed/podcast\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #268:</strong><br />\n</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 23 Mar 2017 01:39:19 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:41;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WPTavern: GoDaddy Acquires Sucuri\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=67826\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"https://wptavern.com/godaddy-acquires-sucuri\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5541:\"<p>GoDaddy <a href=\"https://www.godaddy.com/garage/godaddy/sucuri-godaddy-team-protect-websites/\">has announced</a> that it has entered into an agreement to acquire <a href=\"https://sucuri.net/\">Sucuri Security</a>. Sucuri, founded by Daniel Cid and co-founded by Tony Perez in 2010, is a website security platform that helps clean and protect websites. Details of the deal were not disclosed.</p>\n<p>Like <a href=\"https://wptavern.com/godaddy-acquires-wordpress-site-management-service-managewp\">ManageWP</a>, Sucuri will operate as a separate entity under the GoDaddy umbrella. Sucuri employees will transfer to GoDaddy while remaining under the leadership of Perez and Cid.</p>\n<p>Out of all the companies that Sucuri could have chosen to be acquired by, why GoDaddy?</p>\n<p>&#8220;Over the years we&#8217;ve seen them live up to their words to be a customer and product centric company,&#8221; Perez said. &#8220;As a product company it give us an opportunity to scale our product from a few hundred thousand domains, to millions. It&#8217;s something that we only ever dreamed of.&#8221;</p>\n<p>The acquisition comes a few weeks after <a href=\"https://www.siteground.com/blog/sg-site-scanner-powered-sucuri/\">SiteGround announced</a> its partnership with Sucuri and renamed its site scanner SG Site Scanner. It&#8217;s too soon to determine how this acquisition will affect Sucuri&#8217;s partnerships with hosting companies.</p>\n<p>&#8220;I can&#8217;t speak for our partners, but I truly hope they will trust in us, Sucuri, and in me personally,&#8221; Perez said. &#8220;If we can work to deploy our technology for GoDaddy, at their scale, then I have nothing but confidence we can do this for every other partner out there.</p>\n<p>&#8220;GoDaddy made this investment because they believe in what we have built as a team at Sucuri, the product solves problems, that doesn&#8217;t go away and I hope all our customers and partners will give us time to prove this in our actions.&#8221;</p>\n<p>Both companies acknowledged that nothing changes for existing Sucuri customers and that they can expect to see numerous improvements in the near future. Perez and Cid see the acquisition as version 2.0 of the company.</p>\n<p>Aaron Campbell, WordPress Security Team Lead who is sponsored by GoDaddy to work on WordPress full-time, says the move should help make more sites secure.</p>\n<p>&#8220;GoDaddy is committed to offering great services to its clients,&#8221; Campbell said. &#8220;You know as well as I do that Sucuri is exactly that; we&#8217;ve seen them be quite an asset to the WordPress community over the years.</p>\n<p>&#8220;They&#8217;re going to remain a standalone product, but I&#8217;m excited to see them become part of the GoDaddy team to make some great stuff together. Keeping as many WordPress users secure as possible is obviously my goal and I really think this will help accomplish that.&#8221;</p>\n<p>Reactions to the news on Twitter have mostly been positive with many congratulating Sucuri and its founders.</p>\n<p>On the <a href=\"https://www.facebook.com/groups/advancedwp/?ref=group_cover\">Advanced WordPress Facebook group</a>, reactions to <a href=\"https://www.facebook.com/groups/advancedwp/permalink/1440220396040170/\">the news</a> are a mix between congratulatory and fears of Sucuri&#8217;s service declining. These are among the same grievances and fears expressed by ManageWP customers when <a href=\"https://managewp.com/managewp-joins-godaddy\">GoDaddy acquired it</a>.</p>\n<h2>ManageWP Customers Report No Noticeable Decline in Service</h2>\n<p>Since being acquired, ManageWP has maintained and improved service levels while continuing to add features. Its most recent feature gives customers the opportunity to create backups, restore, and clone <a href=\"https://managewp.com/multisite-websites-in-managewp\">multisite websites</a>.</p>\n<p>Bob Dunn, of <a href=\"https://bobwp.com/\">BobWP</a>, says the service has been stellar before and after the transition.</p>\n<p>&#8220;To be honest, their services were great before and still are,&#8221; Dunn said. &#8220;I don’t manage a ton of sites, but for my needs, it has been rock solid since I first became a customer.&#8221;</p>\n<p>Scott Buscemi, co-founder of <a href=\"https://lumenfoundry.com/\">Lumen Foundry</a>, has had a similar experience.</p>\n<p>&#8220;In all honesty, I haven&#8217;t noticed much of anything since they were acquired &#8211; and that&#8217;s a &#8216;win&#8217; in my opinion,&#8221; Buscemi said.</p>\n<p>&#8220;I&#8217;ve seen them push out a pleasant list of bug fixes and features that don&#8217;t affect me, so it&#8217;s great to still see active development on the primary system. GoDaddy has been working hard to get on the good side of developers and agency owners like me, so I can&#8217;t imagine they would go through the effort of the acquisition only to spoil the experience and turn things negative.&#8221;</p>\n<p>Even those skeptical with the acquisition have reported no noticeable decline in the quality of service.</p>\n<blockquote class=\"twitter-tweet\">\n<p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/jeffr0\">@jeffr0</a> Me, I haven’t really noticed any change in the quality of the service (and I was skeptical)</p>\n<p>&mdash; \"so called\" Jim Cook (@jm_cook) <a href=\"https://twitter.com/jm_cook/status/844657355035938816\">March 22, 2017</a></p></blockquote>\n<p></p>\n<p>GoDaddy has not announced how it plans to integrate Sucuri into its products and services.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 23 Mar 2017 00:53:46 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:42;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"BuddyPress: BuddyPress at WordCamp London 2017 Contributor Day\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"https://buddypress.org/?p=264902\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"https://buddypress.org/2017/03/buddypress-at-wordcamp-london-2017-contributor-day/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1688:\"<p>Contributor Day is a big part of WordCamp London. This year it was held on Friday 17th March at London Metropolitan University. 100 contributors descended on the venue each aiming to make WordPress better in some wonderful way.</p>\n<img src=\"https://buddypress.org/wp-content/uploads/1/2017/03/room-back.jpg\" alt=\"A room full of people\" />Contributors at WordCamp London 2017. Photo by <a href=\"https://wpism.com\" rel=\"nofollow\" target=\"_blank\">Pradeep Singh</a>.\n<p>Attendees were asked to choose an area of interest. The options were Accessibility, BuddyPress, Community, Core, Design &amp; Flow, Documentation, Polyglots, Support and Themes. 5 of the 100 contributors chose BuddyPress. 2 of the 5 were new to contributing in general but all had used, or had at least heard of, BuddyPress at some point.</p>\n<p>After a quick refill of coffee the team convened and began discussing how to get the most from the next 8 hours. Due to a diverse range of skills available within the group, we were able to focus on documentation, coding and localisation.</p>\n<img src=\"https://buddypress.org/wp-content/uploads/1/2017/03/buddypress-table.jpg\" alt=\"People using laptops\" />BuddyPress contributors. Photo by <a href=\"https://wpism.com\" rel=\"nofollow\" target=\"_blank\">Pradeep Singh</a>.\n<p>As a team we managed to identify an issue related to colour contrast in the Twenty Seventeen theme. <a href=\"https://buddypress.trac.wordpress.org/ticket/7471\" target=\"_blank\">#7471</a> was opened and a patch was submitted. We were also able to translate all remaining strings into Italian.</p>\n<p>The day was a huge success and all team members indicated they will contribute again going forward.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 22 Mar 2017 21:26:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Henry Wright\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:43;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"WPTavern: Foxhound Is the First REST API Powered Theme on WordPress.org\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=65646\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"https://wptavern.com/foxhound-is-the-first-rest-api-powered-theme-on-wordpress-org\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3281:\"<p><a href=\"https://wordpress.org/themes/foxhound/\" target=\"_blank\">Foxhound</a> made its debut on WordPress.org yesterday. The React-based theme is the first in the directory to use the REST API endpoints included in WordPress 4.7. Foxhound sports a tasteful blog design with single-page app functionality that loads posts instantly. Check out the <a href=\"https://themes.redradar.net/foxhound/\" target=\"_blank\">live demo</a> to see how fast the content loads.</p>\n<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/02/foxhound.png?ssl=1\"><img /></a></p>\n<p>The theme was designed and developed by <a href=\"https://themes.redradar.net/\" target=\"_blank\">Kelly Dwan and Mel Choyce</a>, who have collaborated on several free themes hosted on WordPress.org. They recommend installing the <a href=\"https://wordpress.org/plugins/wp-api-menus/\" target=\"_blank\">WP-API Menus</a> plugin, as the REST API does not yet support menus. After installing Foxhound, there are only two things required to make it look like the demo: Set the front page to display the latest posts and set up a menu. There are no additional customization settings.</p>\n<p>Kelly Dwan notes on <a href=\"https://github.com/ryelle/Foxhound\" target=\"_blank\">Foxhound&#8217;s GitHub repository</a> that the theme should be considered &#8220;experimental&#8221; and users can expect a few restrictions:</p>\n<ul>\n<li>The theme does not display anything if javascript is disabled. (Should not affect SEO or accessibility)</li>\n<li>The API cannot be blocked by a security plugin. Some plugins recommend blocking the users endpoint, but that is required to show the author archive. If you need to block the user endpoint, the rest of the theme should work but might be unstable if anyone tries to visit an author archive.</li>\n<li>Permalinks for pages and archives are changed by this theme. They will be reset if/when you deactivate the theme. You might want to set up redirects using something like <a href=\"https://wordpress.org/plugins/safe-redirect-manager/\" target=\"_blank\">Safe Redirect Manager</a>.</li>\n<li>This theme does not support hierarchical category archives &#8211; only parent category archive pages can be displayed. This <a href=\"https://github.com/ryelle/Foxhound/issues/30\" target=\"_blank\">may be fixed in a later version</a> of the theme.\n<li>Plugins may not work as expected, especially if they add content to the front end of the site. Most Jetpack features do still work.</li>\n</ul>\n<p>Because Foxhound is so different from traditional WordPress themes, it could not go through the usual theme review process. Themes that require the WP REST API are currently reviewed outside of WordPress.org when a theme author pings the Theme Review team. They apply a &#8220;Special Case&#8221; tag that allows the theme to bypass Theme Check. (The tag is also used for other themes that break the rules in innovative ways.)</p>\n<p>&#8220;We don&#8217;t have a lot to go on yet with those types of themes,&#8221; Key Reviewer Justin Tadlock said. &#8220;Foxhound was the first. We&#8217;re supposed to be looking over another soon. As more of these types of themes come in, we&#8217;ll be able to figure out ways of making it easier to submit them.&#8221;</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 22 Mar 2017 19:21:50 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:44;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"HeroPress: A Blissful Driving Force\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://heropress.com/?post_type=heropress-essays&p=1658\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"https://heropress.com/essays/blissful-driving-force/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:9085:\"<img width=\"960\" height=\"480\" src=\"http://20094-presscdn.pagely.netdna-cdn.com/wp-content/uploads/2017/03/032217-1024x512.jpg\" class=\"attachment-large size-large wp-post-image\" alt=\"Pull Quote: WordPress successfully justified my choice of not joining the job placement drive at college.\" /><p>As a college guy, I believed in being different and outperforming the best of my lot. Coming from a modest family background, the realization of achievement dawned over me. I never favored being a 9 to 5 corporate professional and a having a ‘boss’ was simply not my cup of coffee. I was never interested in the classes held in the college because I was being more productive at the ‘reality’ front of the life. I envisioned getting involved in tasks that were strongest at the core.</p>\n<h3>Where It All Started</h3>\n<p>Computer technology was in its nascent state in India the time I started my tryst with web pages. I began with designing my own college’s alumni website while pursuing MCA at Banaras Hindu University, Varanasi. Eventually, I was assigned the task of the event websites too. I was happy because all this brought about a sense of power to me. Though not initially refine, my work still appealed to many and it also made me realize the power technology had.</p>\n<h3>The Seed of Seriousness</h3>\n<p>The very first seed of the idea of taking this up as a serious profession was sown by a friend who told me about how creating web pages and blogging could be a source of monetization. Google pages was my first shot as a techie, wherein I started with contributing content through blogs to several clients.</p>\n<h3>Saw and Attempted</h3>\n<p>I can still recollect the time I received my first pay cheque. Initially, I had tested all Content management systems and had started with Joomla and Drupal. With absolutely no knowledge about coding, I went forward to scale the web designing mountain. WordPress came and was well recognized as a blogging platform; suitable to what I worked on. I bumped into WordPress in 2009 and like many other users, utilized it for my blogging endeavors. Little did I know that someday it would be the answer to my ‘coding gap’. I remember working on a 6-month project for my MCA final where I took up WordPress as the core subject and in there I talked about custom plugins and themes. The teacher was happy to receive the unique project and awarded me good grades for my sense of initiation with new approach.</p>\n<h3>That Leap of Faith</h3>\n<p>Now, I knew how I had to take this WordPress awesomeness forward. With a little exposure to learning new technology, I was baffled for a while but had the will to scale this one too. 6 months, and I thoroughly decoded the WordPress codex for me. This was a giant step forward where my future lay in my own hands.</p>\n<p>Personally, I feel that WordPress does not constrict you to a certain limit or a line of functionalities. If you have a core foundation, you can toy with it and make awesome end results. WordPress was now my pillar of strength. WordPress successfully justified my choice of not joining the job placement drive at the college.</p>\n<h3>The Break-Out</h3>\n<p>Now was the time to materialize my skills and have a material turnaround for the work I was capable of doing. After a 4-month hunt for some serious web designing projects with not a single task at hand, disappointment gripped me. The lack of proper work infrastructure due to poor Internet connectivity and local electricity supply were some of the other reasons I had to plan withdrawing my resources from Varanasi. I could have fallen or would have made a leap; it was about to be my choice for the rest of my life.</p>\n<h3>Hello to New Beginnings</h3>\n<p>It was frustrating because Varanasi had been my abode for 7 good years and leaving the place was a huge decision to make. I mustered up my wits to start afresh by withdrawing my base from Varanasi and shifted to Lucknow, India in order to try out seeking new opportunities yet again.</p>\n<p>The work stars favored me and with the help of elance-oDesk (now, Upwork) and other freelancing platforms, I received many life-changing projects of my life. Things moved forward and with many clients in a row, another year went by. I collaborated with more people who were willing to join me on the platform – people who wanted to leave a mark; never to look back. What remained constant throughout these years was my capability to work hard each day.</p>\n<h3>A Better Picture/ Wbcom Designs</h3>\n<p>I upfront admire WordPress because it has been a driving force for my existence. Time has moved slowly and with 6+ years of experience and self-discovery, I now run a fully-fledged WordPress based company <a href=\"https://wbcomdesigns.com/\" target=\"_blank\">Wbcom Designs</a> that has many developers and freelancers onboard with me.</p>\n<p>While additionally serving <a href=\"https://www.buddyboss.com/\" target=\"_blank\">BuddyBoss</a> as a Product and Support Manager, now I plan to infuse new changes in the pattern we operate at base as well as the firm through strategic planning. It’s time to give back to the WordPress community through the development of free plugins, theme customization and spreading the WordPress fandom at local level.</p>\n<p>I recently took the <a href=\"https://2016.nashik.wordcamp.org/wbcomdesigns-is-our-bronze-sponsor/\">opportunity to sponsor</a> <a href=\"https://2016.nashik.wordcamp.org/\">‘Nashik WordCamp’ 2016</a>, <a href=\"https://2017.pune.wordcamp.org/sponsors/\">WordCamp Pune 2017</a>, <a href=\"https://2017.udaipur.wordcamp.org/sponsors/\">WordCamp Udaipur 2017</a>, and <a href=\"https://2017.kochi.wordcamp.org/sponsors/\">WordCamp Kochi 2017</a>. I am glad I was able to take a step forward in my plans to pay back to the WordPress community. To set the ball rolling at local level, I have recently come up with a local <a href=\"https://www.meetup.com/Lucknow-WordPress-Meetup/\">MeetUp</a> group at Lucknow, India so that locally organized, face to face events can be organized that will accelerate the understanding of the WordPress CMS among the masses. I also plan to bring about WordPress awareness at the school and college level in my zone so that more and more young people know why this CMS is so amazing.</p>\n<p>To this day, my first love is my work desk. Whenever in an emotional or professional fix, I seek recluse through this amazing platform. Unlike others, working destresses me. There is a long way to go with this ideal because I want people to know how powerfully stable the WordPress is.</p>\n<p>Like they say,</p>\n<blockquote><p>“Coming together is a beginning; keeping together is progress; working together is success.”</p></blockquote>\n<p>I want to see the developer community going for heights that have never been achieved before and I want to be a part of this huge step-up.</p>\n<p>I am all open up for this WordPress community for contribution and assistance. For WordPress enthusiasts, I want to tell them that sky is not the limit. WordPress has accepted me as its own and it’s time for me and others to give back in the best possible manner.</p>\n<div class=\"rtsocial-container rtsocial-container-align-right rtsocial-horizontal\"><div class=\"rtsocial-twitter-horizontal\"><div class=\"rtsocial-twitter-horizontal-button\"><a title=\"Tweet: A Blissful Driving Force\" class=\"rtsocial-twitter-button\" href=\"https://twitter.com/share?text=A%20Blissful%20Driving%20Force&via=heropress&url=https%3A%2F%2Fheropress.com%2Fessays%2Fblissful-driving-force%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-fb-horizontal fb-light\"><div class=\"rtsocial-fb-horizontal-button\"><a title=\"Like: A Blissful Driving Force\" class=\"rtsocial-fb-button rtsocial-fb-like-light\" href=\"https://www.facebook.com/sharer.php?u=https%3A%2F%2Fheropress.com%2Fessays%2Fblissful-driving-force%2F\" rel=\"nofollow\" target=\"_blank\"></a></div></div><div class=\"rtsocial-linkedin-horizontal\"><div class=\"rtsocial-linkedin-horizontal-button\"><a class=\"rtsocial-linkedin-button\" href=\"https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fheropress.com%2Fessays%2Fblissful-driving-force%2F&title=A+Blissful+Driving+Force\" rel=\"nofollow\" target=\"_blank\" title=\"Share: A Blissful Driving Force\"></a></div></div><div class=\"rtsocial-pinterest-horizontal\"><div class=\"rtsocial-pinterest-horizontal-button\"><a class=\"rtsocial-pinterest-button\" href=\"https://pinterest.com/pin/create/button/?url=https://heropress.com/essays/blissful-driving-force/&media=https://heropress.com/wp-content/uploads/2017/03/032217-150x150.jpg&description=A Blissful Driving Force\" rel=\"nofollow\" target=\"_blank\" title=\"Pin: A Blissful Driving Force\"></a></div></div><a rel=\"nofollow\" class=\"perma-link\" href=\"https://heropress.com/essays/blissful-driving-force/\" title=\"A Blissful Driving Force\"></a></div><p>The post <a rel=\"nofollow\" href=\"https://heropress.com/essays/blissful-driving-force/\">A Blissful Driving Force</a> appeared first on <a rel=\"nofollow\" href=\"https://heropress.com\">HeroPress</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 22 Mar 2017 12:00:33 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Varun Dubey\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:45;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"WPTavern: Help Jesse Petersen and His Family by Donating to His Medical Leave Fund\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=67746\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:93:\"https://wptavern.com/help-jesse-petersen-and-his-family-by-donating-to-his-medical-leave-fund\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2774:\"<p><a href=\"https://www.petersenmediagroup.com/\">Jesse Petersen</a>, a longtime member of the WordPress community and founder of <a href=\"https://www.genesisthe.me/\">Genesis The.me</a>, needs <a href=\"https://www.newlungsfor.me/medical-leave-fund-for-jesses-double-lung-transplant/\">our help</a>. Petersen is battling <a href=\"http://www.cffatboy.com/what-is-cystic-fibrosis/\">Cystic Fibrosis</a> and earlier this year after visiting a clinic, discovered that his lung function was at 22%.</p>\n<p>Due to decrease lung function, Petersen missed five weeks of work, required home IVs, and visited many doctors. He is currently on a double-lung transplant list with a <a href=\"https://en.wikipedia.org/wiki/Lung_allocation_score\">lung allocation score</a> of 38.859.</p>\n<p>According to the <a href=\"https://www.unos.org/wp-content/uploads/unos/lung_allocation_score.pdf\">United Network for Organ Sharing</a>, the LAS is a score used to prioritize waiting list candidates based on a combination of wait list urgency and post-transplant survival.</p>\n<p>In order to maintain his health for a transplant, doctors have recommended that he work a maximum of two hours per day with quality rest.</p>\n<p>His family has a small emergency fund available that they thought would allow Petersen to work up until his transplant surgery. However, there&#8217;s no estimated time frame for when a transplant will be available.</p>\n<p>Outside of his product based business, Petersen is a work-from-home freelancer with contract work that needs to be completed. He and his wife have two adopted children. His wife volunteered to get another job to supplement their income but relatives rejected the idea as she is his primary support person.</p>\n<p>Petersen has <a href=\"https://my.genesisthe.me/downloads/genesistheme-developer-starter/\">two products</a> for sale on GenesisThe.me with two more ready for launch by the end of March.</p>\n<p>His family is <a href=\"https://www.newlungsfor.me/medical-leave-fund-for-jesses-double-lung-transplant/\">asking for $20K </a>to help pay for expenses and allow Petersen to take an extended medical leave to focus on his health. So far, the campaign has raised $5,075 or about a quarter of the amount needed.</p>\n<p>You can donate as much as you&#8217;re able to or choose from one of five predetermined amounts ranging from $25 to $1K. You can also choose to donate monthly in six month increments.</p>\n<p>Petersen is no stranger to the WordPress community&#8217;s generosity. In 2016, it helped him raise nearly $20K to help pay for costs associated with <a href=\"https://surpriseadoption.com/\">adopting his second son</a>. If you are able, please consider donating to Petersen&#8217;s medical leave fund.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 22 Mar 2017 10:35:52 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:46;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"WPTavern: Adding Images to WordPress Sidebars Is About to Get a Lot Easier\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=67667\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:85:\"https://wptavern.com/adding-images-to-wordpress-sidebars-is-about-to-get-a-lot-easier\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4041:\"<p>Adding images to sidebars in WordPress is a cumbersome task that requires users to upload an image to the Media Library, find the URL, copy it, and paste it into a Text widget along with additional HTML. Nearly two years ago, Mel Choyce <a href=\"https://core.trac.wordpress.org/ticket/32417\">opened a ticket</a> on WordPress Trac proposing that a media widget be added to core. This widget would allow users to easily add images to sidebars.</p>\n<p>Throughout the discussion, the idea of creating a catch-all media widget was brought up that would allow users to add images, audio, or video to a sidebar. After developers spoke to Matt Mullenweg about the direction of the project, the team decided to create three separate widgets to handle each media type. Choyce outlined the benefits this approach provides:</p>\n<ul>\n<li>We can focus on creating more tailored experiences for each widget.</li>\n<li>We&#8217;ll be able to launch new widgets without having to worry about constantly updating one central widget, or potentially breaking anything.</li>\n<li>It&#8217;ll be easier for people to discover new media types since they won&#8217;t be buried within one widget.</li>\n<li>This will more closely mimic the approach we&#8217;re taking to content blocks in the future, which should provide an easier transition.</li>\n</ul>\n<p>Out of the three core widgets in development, the Image one is nearly complete ready for user testing. To test, first download and activate the <a href=\"https://wordpress.org/plugins/wp-core-media-widgets/\">Core Media Widgets</a> plugin. Once activated, navigate to Appearance &gt; Widgets in the WordPress backend and in the available widgets section, locate the Image widget.</p>\n<img />Core Image Widget UI\n<p>Clicking the Select Image button displays the media library modal where you can either select or upload an image. Once an image is selected, click the Add to Widget button in the bottom-right corner. This is what the widget looks like after an image is added.</p>\n<img />Core Image Widget With an Image\n<p>Here is what the widget looks like on a page using the <a href=\"https://wordpress.org/themes/twentyseventeen/\">Twenty Seventeen</a> default theme.</p>\n<img />Core Image Widget in Action\n<p>The core image widget is incredibly easy to set up and is a significant improvement over the Text widget approach. The user interface is much simpler compared to the <a href=\"https://jetpack.com/support/extra-sidebar-widgets/image-widget/\">image widget</a> supplied by Jetpack. Jetpack&#8217;s image widget UI doesn&#8217;t take advantage of the media library modal and instead, requires the user to know the image&#8217;s URL.</p>\n<img />Jetpack Image Widget UI\n<p>Many of the fields are the same as what&#8217;s provided by the media library modal. Not surprisingly, WordPress.com <a href=\"https://en.support.wordpress.com/widgets/image-widget/\">uses the same interface</a> and requires the user to know the image URL.</p>\n<h2>Core Image Widget May Be Ready in Time for WordPress 4.7.4</h2>\n<p>The team is specifically seeking feedback from those who use image widgets provided by plugins on WordPress.org. Once the image widget is merged into core, the video and audio widgets will be added to the <a href=\"https://wordpress.org/plugins/wp-core-media-widgets/\">Core Media Widgets</a> plugin. Users can leave the plugin enabled until all three widgets are added to core.</p>\n<p>&#8220;Once a widget has been thoroughly tested by users, we can then copy it into core for a release while then also disabling the widget in the plugin,&#8221; Ruter said.</p>\n<p>If you encounter a bug or discover an incompatibility with a plugin or theme, please <a href=\"https://github.com/xwp/wp-core-media-widgets/issues\">create an issue</a> on the project&#8217;s GitHub page. According to Ruter, the team is working hard to get the widget to a point where it can be merged into core. Depending on how testing goes, it could be merged into core as early as WordPress 4.7.4.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 22 Mar 2017 01:18:28 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:47;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:91:\"WPTavern: WordPress Theme Review Team Making Progress on Clearing Out 1,000+ Review Backlog\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=67582\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:100:\"https://wptavern.com/wordpress-theme-review-team-making-progress-on-clearing-out-1000-review-backlog\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:6259:\"<a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2016/12/planning.jpg?ssl=1\"><img /></a>photo credit: <a href=\"https://stocksnap.io/photo/5ZMT04MIW6\">Oli Dale</a>\n<p>The WordPress Theme Review team (TRT) has turned a corner and is approaching a major milestone of getting the <a href=\"https://themes.trac.wordpress.org/report/2\" target=\"_blank\">review queue</a> under 100 themes. As of today, 189 themes are lined up in what was previously a 1,000+ backlog. Key reviewers are confident that number will be closer to zero in the near future.</p>\n<p>Emil Uzelac, one of the key reviewers, shared the <a href=\"https://themes.trac.wordpress.org/ticketgraph\" target=\"_blank\">ticketgraph</a> for the backlog on Twitter today, demonstrating that the team is in a better place where new theme submission isn&#8217;t causing overload issues as it did before. Themes continue to flow in but are not significantly affecting the queue.</p>\n<p><a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/03/theme-review-ticketgraph.png?ssl=1\"><img /></a></p>\n<p>In 2015 the TRT hit a wall with an influx of themes flooding into a legacy review system that wasn&#8217;t working. The team couldn&#8217;t keep up and was forced to spend much of 2016 changing the review process to better handle the large number of themes coming in. The TRT is working hard to make 2017 the year they get back on track.</p>\n<p>Uzelac identified a few of the measures that have helped in taming the queue:</p>\n<ul>\n<li>One theme submission per author</li>\n<li>More reviewers</li>\n<li>A new guideline where reviewers close the ticket if the review surfaces more than <a href=\"https://make.wordpress.org/themes/2016/08/23/meeting-summary-2016-23-08/\" target=\"_blank\">5 distinct issues</a></li>\n</ul>\n<p>&#8220;Around Christmas was when many on the team started seeing a tiny sliver of light at the end of a long tunnel,&#8221; Key Reviewer Justin Tadlock said. &#8220;In the past few days, seeing the queue get below 200 themes has been a high point.  Folks on the team are excited because our ideas are paying off.&#8221;</p>\n<p>Tadlock can&#8217;t say when exactly the team turned a corner but describes it as more of an iterative process that started with small ideas they could implement themselves. This has significantly reduced the wait time from 7 or 8 months a year ago to two months today. Themes also go through an admin queue that adds a bit to the review time but Tadlock said they hope to tackle that in the next Review Shindig, which happens on the first weekend of every month.</p>\n<p>&#8220;That number is shrinking,&#8221; Tadlock said. &#8220;By the end of April, we could be looking at 3-4 weeks. I&#8217;m a bit optimistic, so don&#8217;t hold me to that. It could be May or June in reality.&#8221;</p>\n<p>Tadlock said once the team gets to the 50-100 range they will be at the place where they&#8217;re really only handling new themes that are coming in, instead of working the backlog. Once they reach that milestone, they will be able to more accurately track how long it takes for a theme to make it through the review process.</p>\n<p>&#8220;That&#8217;s where we&#8217;ll need to really start refining the process so that it works even better in the future,&#8221; Tadlock said. &#8220;A well-coded theme could potentially make it through the process in 2 months right now. Another theme might be 4-5 months. There are a lot of factors to consider. It&#8217;s my hope that we eliminate many of those factors that are holding up the process.&#8221;</p>\n<p>The new rule that limited authors to submitting one theme at a time has had a significant impact on cutting down the queue. The rule was meant to be temporary and will be up for reevaluation when the queue is under 100 themes. Tadlock said the team will likely pull the rule, but it has been instrumental in rooting out copies that contained only minor changes to the original.</p>\n<p>&#8220;For most authors, this [rule] is not a huge problem,&#8221; Tadlock said. &#8220;It definitely hurts a few of the more prolific authors in the short term. However, it helps stop the flow of theme companies who are just copying/pasting the same theme with minor changes. We&#8217;ve had theme companies with as many as 17 themes in the queue that were just copies.  This new rule has helped us find those and put a stop to the practice.&#8221; The team was able to track down an entire ring of theme authors with multiple accounts with dozens and dozens of themes.</p>\n<p>Tadlock said most of the issues the team deals with in reviews are related to security. The content portability issues that were highlighted in the recent <a href=\"https://wptavern.com/zerif-lite-returns-to-wordpress-org-after-5-month-suspension-and-63-decline-in-revenue\" target=\"_blank\">Zerif Lite suspension</a> are more uncommon.</p>\n<p>&#8220;The &#8216;draconian stuff&#8217; people talk about probably represents 1% of the issue,&#8221; Tadlock said, referencing Matt Mullenweg&#8217;s recent <a href=\"https://wptavern.com/zerif-lite-returns-to-wordpress-org-after-5-month-suspension-and-63-decline-in-revenue#comment-210935\" target=\"_blank\">comments</a> on the current requirements. &#8220;99% of the issues are the things people don&#8217;t talk about.&#8221; Tadlock has been speaking with theme authors about how they can &#8220;create&#8221; content within the guidelines, as there are ways to do it that are both future-proof and portable.</p>\n<p>The team is currently spending a lot of time reviewing code that shouldn&#8217;t need to be manually reviewed. The next item on the TRT roadmap is incorporating better automation into the review process.</p>\n<p>&#8220;The big thing we&#8217;re working on now is the new Theme Check plugin,&#8221; Tadlock said. &#8220;It&#8217;s going to solve lots of problems.  It&#8217;s based off the code sniffer (PHPCS, I believe). It&#8217;ll help theme authors start submitting better coded and more secure themes right off the bat. Humans easily miss those things looking through it with their eyes. This will definitely make theme authors better coders and users will have even more secure themes. Then, we can focus on those 1% issues.&#8221;</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 21 Mar 2017 21:53:04 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:48;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"WPTavern: Yoast SEO 4.5 Urges Users to Upgrade to PHP 7\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=67676\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:66:\"https://wptavern.com/yoast-seo-4-5-urges-users-to-upgrade-to-php-7\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4770:\"<p><a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/03/yoast-logo.jpg?ssl=1\"><img /></a></p>\n<p><a href=\"https://yoast.com/yoast-seo-4-5/\" target=\"_blank\">Yoast SEO 4.5</a> was released today with a handful of improvements and, most notably, a big push for users to upgrade to PHP 7.</p>\n<p>&#8220;In Yoast SEO 4.5, we are urging site owners whose sites run on servers with an outdated version of PHP to update to a more recent version,&#8221; Joost de Valk said. &#8220;To move the web forward, we need to take a stand against old, slow, and unsafe software.&#8221;</p>\n<p>WordPress&#8217; minimum PHP requirement is still at <a href=\"https://wordpress.org/about/requirements/\" target=\"_blank\">5.2.4</a>, six years after PHP 5.2 <a href=\"http://php.net/eol.php\" target=\"_blank\">reached end of life in 2011</a>. This version is now <a href=\"https://www.cvedetails.com/vulnerability-list.php?vendor_id=74&product_id=128&version_id=106044&page=1&hasexp=0&opdos=0&opec=0&opov=0&opcsrf=0&opgpriv=0&opsqli=0&opxss=0&opdirt=0&opmemc=0&ophttprs=0&opbyp=0&opfileinc=0&opginf=0&cvssscoremin=0&cvssscoremax=0&year=0&month=0&cweid=0&order=4&trc=39\" target=\"_blank\">vulnerable to many security issues</a>. Current usage stats show 5.4% of WordPress sites are running on PHP 5.2. As this likely represents millions of users, WordPress&#8217; core leadership is reluctant to bump the minimum requirements. Only 8% of sites are on PHP 7+, as hosting companies are slowly adding support.</p>\n<p><a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/03/wordpress-php-versions-march-2017-1.png?ssl=1\"><img /></a></p>\n<p>“Because web hosts are not upgrading PHP, we have decided to start pushing this from within plugins,&#8221; de Valk said. He contends that the WordPress ecosystem is losing good developers because the project is moving too slowly. He also makes the case for security and speed.</p>\n<p>&#8220;WordPress is sometimes said to be slow, but it actually doesn’t have to be slow at all,&#8221; de Valk said. &#8220;If it’s running on old versions of PHP, however, it is, most certainly, slow. PHP 5.2 is more than 100% slower than PHP 5.6, and a whopping <a href=\"https://www.phpclasses.org/blog/post/493-php-performance-evolution.html\" target=\"_blank\">400% slower than PHP 7</a>.&#8221;</p>\n<p>De Valk decided to throw the weight of Yoast SEO, which he estimates to be 6.5 million active installs, behind the movement to push hosts to upgrade their customers to PHP 7. The latest release of the plugin displays a notice to WordPress administrators running sites on PHP 5.2, urging them to upgrade to PHP 7. The notice is &#8220;big, ugly, and non-dismissible,&#8221; de Valk said. It is generated by an error that auto-resolves when the user fixes their outdated PHP version.</p>\n<p>&#8220;The notice will also encourage people to contact their host if they don’t know how to upgrade their PHP,&#8221; de Valk said. &#8220;Yes, this could be painful for some hosts. This notice is deliberately intended to make them work.&#8221;</p>\n<p>De Valk said the plugin will start displaying the notices for PHP 5.2 and will add 5.6 as soon as it is no longer supported. Through experience with his customers, de Valk has found that outdated, slower versions of PHP are damaging Yoast SEO and WordPress&#8217; reputations, as neither are optimized for PHP 5.2. Although older versions are not holding the plugin back from new features, it makes it difficult for the team to clean up the code.</p>\n<p>&#8220;There aren&#8217;t many features I cannot build right now, but code quality is suffering because we can&#8217;t use namespaces, short array notation, etc,&#8221; de Valk said.</p>\n<p>The Yoast SEO team has created <a href=\"https://github.com/Yoast/whip\" target=\"_blank\">WHIP</a>, a WordPress package to nudge users to upgrade their software versions and made it open source for plugin and theme developers to implement in their own extensions. The project includes a filter for linking to the WordPress.org hosting page, which includes a selection of hosts that offer PHP 7.</p>\n<p>Most of the large hosting companies already have documentation for upgrading PHP versions. Ultimately, it&#8217;s the end users who will have the power to get more hosting companies on board. De Valk said he doesn&#8217;t know how big the impact will be but encourages users to vote with their pocketbooks by leaving hosts that are unwilling to assist in upgrading PHP.</p>\n<p>&#8220;It might be entirely possible that your host is not willing to work with you,&#8221; de Valk said. &#8220;If so, think about moving web hosts. A web host provides the engine your site runs on and that better be a damn good engine.&#8221;</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 21 Mar 2017 19:56:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:49;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:119:\"WPTavern: PressShack Forks Edit Flow to Create PublishPress, Aims to Improve Multi-User Editorial Workflow in WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wptavern.com/?p=67574\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:129:\"https://wptavern.com/pressshack-forks-edit-flow-to-create-publishpress-aims-to-improve-multi-user-editorial-workflow-in-wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:6808:\"<p><a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/03/publish-press.png?ssl=1\"><img /></a></p>\n<p>Last week Steve Burge and the team at <a href=\"https://pressshack.com/\" target=\"_blank\">PressShack</a> released <a href=\"https://wordpress.org/plugins/publishpress/\" target=\"_blank\">PublishPress</a>, a fork of Automattic&#8217;s <a href=\"https://wordpress.org/plugins/edit-flow/\" target=\"_blank\">Edit Flow</a> plugin. PressShack is operated by the same team behind <a href=\"http://ostraining.com/\" target=\"_blank\">OSTraining</a> with a focus on creating publishing plugins for larger organizations.</p>\n<p><a href=\"https://wordpress.org/plugins/edit-flow/\" target=\"_blank\">Edit Flow</a> has more than 10,000 active installs but is updated sporadically and is not very well supported. The PressShack creators saw an opportunity to fork the plugin and sell commercial support and add-ons. <a href=\"https://wordpress.org/plugins/publishpress/\" target=\"_blank\">PublishPress</a> is now available on WordPress.org with a seamless <a href=\"https://pressshack.com/publishpress/docs/migrate/\" target=\"_blank\">migration for Edit Flow users</a>.</p>\n<p><a href=\"https://i1.wp.com/wptavern.com/wp-content/uploads/2017/03/edit-flow-publishpress-migration.png?ssl=1\"><img /></a></p>\n<p>The first release offers the same features as Edit Flow along with a complete face lift, making interaction with the plugin&#8217;s settings more user-friendly. The new tabbed interface puts all the settings on one screen. PressShack has also tweaked the language of the plugin, changing Story Budget” to “Overview”, and simplifying other terms.</p>\n<p><a href=\"https://i0.wp.com/wptavern.com/wp-content/uploads/2017/03/publishpress-ui.png?ssl=1\"><img /></a></p>\n<p>PublishPress introduces a few changes to the calendar, allowing users to click anywhere on a date to add content. It exposes the iCal or Google Calendar feed and uses icons to show post statuses, saving space for other information.</p>\n<p>Burge said that PublishPress will be making a fresh start and will not be following and incorporating updates from Edit Flow. The team plans to add a host of new features that improve the publishing workflow to handle multiple users:</p>\n<ul>\n<li><strong>Multisite and multiple site support</strong>: Content creators log into one site but can publish to multiple sites</li>\n<li><strong>Pre-publishing checklists</strong>: For example, featured image, word count, Yoast SEO green light</li>\n<li><strong>More use cases beyond media sites</strong>: In addition to magazine-style user groups for reporting, PublishPress plans to add more use cases, such as WooCommerce products, EDD downloads, bbPress topics, and The Events Calendar listings</li>\n<li><strong>Multiple authors</strong>: Assign multiple author bylines to a story</li>\n</ul>\n<p>Most of these feature are slated for release in mid-2017 and will be <a href=\"https://pressshack.com/publishpress/\" target=\"_blank\">offered as commercial add-ons</a>. The team is currently still focused on writing unit tests for the core plugin and adding improvements to it on WordPress.org.</p>\n<h3>PressShack Takes Inspiration from Drupal for Expanding Content Workflows</h3>\n<p>PressShack&#8217;s creators also work closely with other open source publishing platforms. Burge said the team took some inspiration from the Drupal ecosystem, which offers more advanced features for modifying editorial workflows.</p>\n<p>&#8220;In Drupal, the workflow features are being demanded and developed by large organizations that use the platform,&#8221; Burge said. &#8220;As a result, Drupal does have a very big head start in this area. &#8220;In Drupal 7, the main workflow module was called <a href=\"https://www.drupal.org/project/workbench\" target=\"_blank\">Workbench</a>. It was built to meet the needs of large customers such as universities, media outlets, and government agencies who have many different content managers.&#8221;</p>\n<p>Prior to having editorial workflow tools available, Burge said that Drupal agencies kept losing projects to rivals such as Adobe and OpenText, because they had publishing workflows built for multiple users. Building better publishing tools became a necessity for Drupal agencies that wanted to win projects from large organizations.</p>\n<p>Drupal 8 moves many of these editorial workflow improvements into core. Drupal 8.3, which is slated for April 2017, will <a href=\"http://buytaert.net/moving-the-drupal-8-workflow-initiative-along\" target=\"_blank\">introduce the ability to create multiple types of content workflows</a>.</p>\n<p>&#8220;What’s really interesting about the Drupal 8 implementation is that they are thinking beyond just content publishing,&#8221; Burge said. &#8220;It will soon be possible to put whole sections of your site into a workflow. The demand for these features is still coming from enterprise customers: much of the work is being done by a team of Drupal developers inside Pfizer.&#8221;</p>\n<p>Burge cited a few examples of typical users requiring more elaborate publishing workflows:</p>\n<ul>\n<li>A university with 50+ academic departments and several hundred content creators</li>\n<li>A pharmaceutical company with hundreds of products and a micro-site for each one</li>\n<li>A newspaper that employs writers and at least one layer of editors</li>\n<li>A publicly-listed company that needs approval from several staff members to ensure that the content it publishes is 110% accurate</li>\n</ul>\n<p>WordPress core is tailored to a single-author blog workflow, and there are relatively few plugins that modify the default editorial workflow for large teams. <a href=\"https://wptavern.com/coschedule-a-viable-alternative-to-the-edit-flow-wordpress-plugin\" target=\"_blank\">CoSchedule is one alternative to Edit Flow</a> and PublishPress that has 10,000 active installs. It takes a SaaS approach and has more of a content marketing slant. Burge said he thinks the WordPress ecosystem&#8217;s scarcity of options for extending publishing workflows may be due to current limitations in core.</p>\n<p>&#8220;It’s possible there are some technical hurdles: for example, WordPress core has fairly limited user permissions,&#8221; he said. &#8220;It’s also possible that now is the right time for WordPress to start adding these features.&#8221;</p>\n<p>&#8220;WordPress agencies are building more enterprise sites and these demands are popping-up,&#8221; Burge said. &#8220;Matt just announced the <a href=\"https://ma.tt/2017/03/wordpress-collaborative-editing/\" target=\"_blank\">Google Docs integration</a> as a quick way to bring some collaborative features into WordPress. I think we’ll see more and more tools available for teams, rather than single authors.&#8221;</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 20 Mar 2017 21:21:19 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:10:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Thu, 13 Apr 2017 14:20:11 GMT\";s:12:\"content-type\";s:8:\"text/xml\";s:14:\"content-length\";s:6:\"295299\";s:10:\"connection\";s:5:\"close\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:13:\"last-modified\";s:29:\"Thu, 13 Apr 2017 14:00:12 GMT\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:4:\"x-nc\";s:11:\"HIT lax 249\";s:13:\"accept-ranges\";s:5:\"bytes\";}s:5:\"build\";s:14:\"20150717070447\";}','no'),(24178,'_transient_timeout_feed_mod_867bd5c64f85878d03a060509cd2f92c','1492136412','no'),(24179,'_transient_feed_mod_867bd5c64f85878d03a060509cd2f92c','1492093212','no'),(24180,'_transient_timeout_feed_b9388c83948825c1edaef0d856b7b109','1492136414','no'),(24181,'_transient_feed_b9388c83948825c1edaef0d856b7b109','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:49:\"\n	\n	\n	\n	\n	\n	\n	\n	\n	\n	\n		\n		\n		\n		\n		\n		\n		\n		\n		\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"Popular — WordPress Plugins\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://wordpress.org/plugins\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"Plugins extend and expand the functionality of WordPress.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:13:\"lastBuildDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 13 Apr 2017 14:14:16 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"https://wordpress.org/?v=4.8-alpha-40416\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:10:{i:0;a:6:{s:4:\"data\";s:39:\"\n		\n		\n		\n		\n		\n		\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Contact Form 7\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:45:\"https://wordpress.org/plugins/contact-form-7/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/plugins/contact-form-7/#respond\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 02 Aug 2007 12:43:39 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"https://wordpress.org/plugins-wp/contact-form-7/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"Just another contact form plugin. Simple but flexible.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Takayuki Miyoshi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:5382:\"<p><!--section=description--></p>\n<p>Contact Form 7 can manage multiple contact forms, plus you can customize the form and the mail contents flexibly with simple markup. The form supports Ajax-powered submitting, CAPTCHA, Akismet spam filtering and so on.</p>\n<h4>Docs &amp; Support</h4>\n<p>You can find <a href=\"https://contactform7.com/docs/\" rel=\"nofollow\">docs</a>, <a href=\"https://contactform7.com/faq/\" rel=\"nofollow\">FAQ</a> and more detailed information about Contact Form 7 on <a href=\"https://contactform7.com/\" rel=\"nofollow\">contactform7.com</a>. If you were unable to find the answer to your question on the FAQ or in any of the documentation, you should check the <a href=\"https://wordpress.org/support/plugin/contact-form-7/\" rel=\"nofollow\">support forum</a> on WordPress.org. If you can&#8217;t locate any topics that pertain to your particular issue, post a new topic for it.</p>\n<h4>Contact Form 7 Needs Your Support</h4>\n<p>It is hard to continue development and support for this free plugin without contributions from users like you. If you enjoy using Contact Form 7 and find it useful, please consider <a href=\"https://contactform7.com/donate/\" rel=\"nofollow\"><strong>making a donation</strong></a>. Your donation will help encourage and support the plugin&#8217;s continued development and better user support.</p>\n<h4>Recommended Plugins</h4>\n<p>The following plugins are recommended for Contact Form 7 users:</p>\n<ul>\n<li><a href=\"https://wordpress.org/plugins/flamingo/\">Flamingo</a> by Takayuki Miyoshi &#8211; With Flamingo, you can save submitted messages via contact forms in the database.</li>\n<li><a href=\"https://wordpress.org/plugins/postman-smtp/\">Postman</a> by<br />\nJason Hendriks &#8211; Postman is a next-generation SMTP Mailer, software that assists in the delivery of email generated by your WordPress site.</li>\n<li><a href=\"https://wordpress.org/plugins/bogo/\">Bogo</a> by Takayuki Miyoshi &#8211; Bogo is a straight-forward multilingual plugin that doesn&#8217;t cause headaches.</li>\n</ul>\n<h4>Translations</h4>\n<p>You can <a href=\"https://contactform7.com/translating-contact-form-7/\" rel=\"nofollow\">translate Contact Form 7</a> on <a href=\"https://translate.wordpress.org/projects/wp-plugins/contact-form-7\" rel=\"nofollow\"><strong>translate.wordpress.org</strong></a>.</p>\n<p><!--section=faq--></p>\n<p>Do you have questions or issues with Contact Form 7? Use these support channels appropriately.</p>\n<ol>\n<li><a href=\"https://contactform7.com/docs/\" rel=\"nofollow\">Docs</a></li>\n<li><a href=\"https://contactform7.com/faq/\" rel=\"nofollow\">FAQ</a></li>\n<li><a href=\"https://wordpress.org/support/plugin/contact-form-7/\" rel=\"nofollow\">Support Forum</a></li>\n</ol>\n<p><a href=\"https://contactform7.com/support/\" rel=\"nofollow\">Support</a></p>\n<dl>\n<dt>Installation Instructions</dt>\n<dd>\n<ol>\n<li>Upload the entire <code>contact-form-7</code> folder to the <code>/wp-content/plugins/</code> directory.</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress.</li>\n</ol>\n<p>You will find &#8216;Contact&#8217; menu in your WordPress admin panel.</p>\n<p>For basic usage, you can also have a look at the <a href=\"https://contactform7.com/\" rel=\"nofollow\">plugin web site</a>.</p>\n</dd>\n</dl>\n<p><!--section=changelog--></p>\n<p>For more information, see <a href=\"https://contactform7.com/category/releases/\" rel=\"nofollow\">Releases</a>.</p>\n<h4>4.7</h4>\n<ul>\n<li>Added REST API custom endpoints to manipulate contact form data.</li>\n<li>Config Validator: Added test items for field names and attachment file paths.</li>\n<li>Added custom DOM events: <code>wpcf7invalid</code>, <code>wpcf7spam</code>, <code>wpcf7mailsent</code>, <code>wpcf7mailfailed</code> and <code>wpcf7submit</code>.</li>\n<li>New action hook: <code>wpcf7_after_flamingo</code>.</li>\n<li>Added <code>size</code> option to <code>select</code> and <code>select*</code> form-tag types.</li>\n<li>Made it possible to use the 3rd parameter of <code>wpcf7_add_form_tag()</code> to specify &#8220;features&#8221; of the form-tag type.</li>\n</ul>\n<h4>4.6.1</h4>\n<ul>\n<li>Fixed: &#8220;0&#8221; input could pass the <code>minlength</code> validation.</li>\n<li>Fixed: <code>exclude_blank</code> option was applied to all mail fields, not only to the message body.</li>\n<li>Fixed: <code>wpcf7_autop()</code> incorrectly inserted <code>&lt;br /&gt;</code> around hidden and block-type form-tags.</li>\n<li>Fixed: Applying <code>strtolower()</code> to uploaded file names was unnecessary and could cause troubles in a non-English environment.</li>\n</ul>\n<h4>4.6</h4>\n<ul>\n<li>Ajax loader: HTML markup changed to <code>&lt;span&gt;</code> to be easily customizable with CSS.</li>\n<li>Appends a proper header and footer to HTML mail content automatically.</li>\n<li><code>[_serial_number]</code> special mail-tag.</li>\n<li>New form-tag type for hidden fields.</li>\n<li><code>default:shortcode_attr</code> form-tag option.</li>\n<li><code>WPCF7_Shortcode</code>, <code>WPCF7_ShortcodeManager</code>, <code>wpcf7_add_shortcode()</code>, <code>wpcf7_scan_shortcode()</code>, and some other classes and functions have become deprecated.</li>\n<li>Removed all language files from the <em>languages</em> folder. Translations have moved to <a href=\"https://translate.wordpress.org/projects/wp-plugins/contact-form-7\" rel=\"nofollow\">translate.wordpress.org</a>.</li>\n</ul>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"https://wordpress.org/plugins/contact-form-7/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:39:\"\n		\n		\n		\n		\n		\n		\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Akismet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"https://wordpress.org/plugins/akismet/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"https://wordpress.org/plugins/akismet/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 20 Oct 2005 08:57:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"https://wordpress.org/plugins-wp/akismet/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:103:\"Akismet checks your comments and contact form submissions against our global database of spam to&#8230;\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Automattic\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:17428:\"<p><!--section=description--></p>\n<p>Akismet checks your comments and contact form submissions against our global database of spam to prevent your site from publishing malicious content. You can review the comment spam it catches on your blog&#8217;s &#8220;Comments&#8221; admin screen.</p>\n<p>Major features in Akismet include:</p>\n<ul>\n<li>Automatically checks all comments and filters out the ones that look like spam.</li>\n<li>Each comment has a status history, so you can easily see which comments were caught or cleared by Akismet and which were spammed or unspammed by a moderator.</li>\n<li>URLs are shown in the comment body to reveal hidden or misleading links.</li>\n<li>Moderators can see the number of approved comments for each user.</li>\n<li>A discard feature that outright blocks the worst spam, saving you disk space and speeding up your site.</li>\n</ul>\n<p>PS: You&#8217;ll need an <a href=\"https://akismet.com/get/\" rel=\"nofollow\">Akismet.com API key</a> to use it.  Keys are free for personal blogs; paid subscriptions are available for businesses and commercial sites.</p>\n<p><!--section=changelog--></p>\n<h4>3.3</h4>\n<p><em>Release Date &#8211; 23 February 2017</em></p>\n<ul>\n<li>Updated the Akismet admin pages with a new clean design.</li>\n<li>Fixed bugs preventing the <code>akismet_add_comment_nonce</code> and <code>akismet_update_alert</code> wrapper functions from working properly.</li>\n<li>Fixed bug preventing the loading indicator from appearing when re-checking all comments for spam.</li>\n<li>Added a progress indicator to the &#8220;Check for Spam&#8221; button.</li>\n<li>Added a success message after manually rechecking the Pending queue for spam.</li>\n</ul>\n<h4>3.2</h4>\n<p><em>Release Date &#8211; 6 September 2016</em></p>\n<ul>\n<li>Added a WP-CLI module. You can now check comments and recheck the moderation queue from the command line.</li>\n<li>Stopped using the deprecated jQuery function <code>.live()</code>.</li>\n<li>Fixed a bug in <code>remove_comment_author_url()</code> and <code>add_comment_author_url()</code> that could generate PHP notices.</li>\n<li>Fixed a bug that could cause an infinite loop for sites with very very very large comment IDs.</li>\n<li>Fixed a bug that could cause the Akismet widget title to be blank.</li>\n</ul>\n<h4>3.1.11</h4>\n<p><em>Release Date &#8211; 12 May 2016</em></p>\n<ul>\n<li>Fixed a bug that could cause the &#8220;Check for Spam&#8221; button to skip some comments.</li>\n<li>Fixed a bug that could prevent some spam submissions from being sent to Akismet.</li>\n<li>Updated all links to use https:// when possible.</li>\n<li>Disabled Akismet debug logging unless WP_DEBUG and WP_DEBUG_LOG are both enabled.</li>\n</ul>\n<h4>3.1.10</h4>\n<p><em>Release Date &#8211; 1 April 2016</em></p>\n<ul>\n<li>Fixed a bug that could cause comments caught as spam to be placed in the Pending queue.</li>\n<li>Fixed a bug that could have resulted in comments that were caught by the core WordPress comment blacklist not to have a corresponding History entry.</li>\n<li>Fixed a bug that could have caused avoidable PHP warnings in the error log.</li>\n</ul>\n<h4>3.1.9</h4>\n<p><em>Release Date &#8211; 28 March 2016</em></p>\n<ul>\n<li>Add compatibility with Jetpack so that Jetpack can automatically configure Akismet settings when appropriate.</li>\n<li>Fixed a bug preventing some comment data from being sent to Akismet.</li>\n</ul>\n<h4>3.1.8</h4>\n<p><em>Release Date &#8211; 4 March 2016</em></p>\n<ul>\n<li>Fixed a bug preventing Akismet from being used with some plugins that rewrite admin URLs.</li>\n<li>Reduced the amount of bandwidth used on Akismet API calls</li>\n<li>Reduced the amount of space Akismet uses in the database</li>\n<li>Fixed a bug that could cause comments caught as spam to be placed in the Pending queue.</li>\n</ul>\n<h4>3.1.7</h4>\n<p><em>Release Date &#8211; 4 January 2016</em></p>\n<ul>\n<li>Added documentation for the &#8216;akismet_comment_nonce&#8217; filter.</li>\n<li>The post-install activation button is now accessible to screen readers and keyboard-only users.</li>\n<li>Fixed a bug that was preventing the &#8220;Remove author URL&#8221; feature from working in WordPress 4.4</li>\n</ul>\n<h4>3.1.6</h4>\n<p><em>Release Date &#8211; 14 December 2015</em></p>\n<ul>\n<li>Improve the notices shown after activating Akismet.</li>\n<li>Update some strings to allow for the proper plural forms in all languages.</li>\n</ul>\n<h4>3.1.5</h4>\n<p><em>Release Date &#8211; 13 October 2015</em></p>\n<ul>\n<li>Closes a potential XSS vulnerability.</li>\n</ul>\n<h4>3.1.4</h4>\n<p><em>Release Date &#8211; 24 September 2015</em></p>\n<ul>\n<li>Fixed a bug that was preventing some users from automatically connecting using Jetpack if they didn&#8217;t have a current Akismet subscription.</li>\n<li>Fixed a bug that could cause comments caught as spam to be placed in the Pending queue.</li>\n<li>Error messages and instructions have been simplified to be more understandable.</li>\n<li>Link previews are enabled for all links inside comments, not just the author&#8217;s website link.</li>\n</ul>\n<h4>3.1.3</h4>\n<p><em>Release Date &#8211; 6 July 2015</em></p>\n<ul>\n<li>Notify users when their account status changes after previously being successfully set up. This should help any users who are seeing blank Akismet settings screens.</li>\n</ul>\n<h4>3.1.2</h4>\n<p><em>Release Date &#8211; 7 June 2015</em></p>\n<ul>\n<li>Reduced the amount of space Akismet uses in the commentmeta table.</li>\n<li>Fixed a bug where some comments with quotes in the author name weren&#8217;t getting history entries</li>\n<li>Pre-emptive security improvements to ensure that the Akismet plugin can&#8217;t be used by attackers to compromise a WordPress installation.</li>\n<li>Better UI for the key entry field: allow whitespace to be included at the beginning or end of the key and strip it out automatically when the form is submitted.</li>\n<li>When deactivating the plugin, notify the Akismet API so the site can be marked as inactive.</li>\n<li>Clearer error messages.</li>\n</ul>\n<h4>3.1.1</h4>\n<p><em>Release Date &#8211; 17th March, 2015</em></p>\n<ul>\n<li>Improvements to the &#8220;Remove comment author URL&#8221; JavaScript</li>\n<li>Include the pingback pre-check from the 2.6 branch.</li>\n</ul>\n<h4>3.1</h4>\n<p><em>Release Date &#8211; 11th March, 2015</em></p>\n<ul>\n<li>Use HTTPS by default for all requests to Akismet.</li>\n<li>Fix for a situation where Akismet might strip HTML from a comment.</li>\n</ul>\n<h4>3.0.4</h4>\n<p><em>Release Date &#8211; 11th December, 2014</em></p>\n<ul>\n<li>Fix to make .htaccess compatible with Apache 2.4.</li>\n<li>Fix to allow removal of https author URLs.</li>\n<li>Fix to avoid stripping part of the author URL when removing and re-adding.</li>\n<li>Removed the &#8220;Check for Spam&#8221; button from the &#8220;Trash&#8221; and &#8220;Approved&#8221; queues, where it would have no effect.</li>\n<li>Allow automatic API key configuration when Jetpack is installed and connected to a WordPress.com account</li>\n</ul>\n<h4>3.0.3</h4>\n<p><em>Release Date &#8211; 3rd November, 2014</em></p>\n<ul>\n<li>Fix for sending the wrong data to delete_comment action that could have prevented old spam comments from being deleted.</li>\n<li>Added a filter to disable logging of Akismet debugging information.</li>\n<li>Added a filter for the maximum comment age when deleting old spam comments.</li>\n<li>Added a filter for the number per batch when deleting old spam comments.</li>\n<li>Removed the &#8220;Check for Spam&#8221; button from the Spam folder.</li>\n</ul>\n<h4>3.0.2</h4>\n<p><em>Release Date &#8211; 18th August, 2014</em></p>\n<ul>\n<li>Performance improvements.</li>\n<li>Fixed a bug that could truncate the comment data being sent to Akismet for checking.</li>\n</ul>\n<h4>3.0.1</h4>\n<p><em>Release Date &#8211; 9th July, 2014</em></p>\n<ul>\n<li>Removed dependency on PHP&#8217;s fsockopen function</li>\n<li>Fix spam/ham reports to work when reported outside of the WP dashboard, e.g., from Notifications or the WP app</li>\n<li>Remove jQuery dependency for comment form JavaScript</li>\n<li>Remove unnecessary data from some Akismet comment meta</li>\n<li>Suspended keys will now result in all comments being put in moderation, not spam.</li>\n</ul>\n<h4>3.0.0</h4>\n<p><em>Release Date &#8211; 15th April, 2014</em></p>\n<ul>\n<li>Move Akismet to Settings menu</li>\n<li>Drop Akismet Stats menu</li>\n<li>Add stats snapshot to Akismet settings</li>\n<li>Add Akismet subscription details and status to Akismet settings</li>\n<li>Add contextual help for each page</li>\n<li>Improve Akismet setup to use Jetpack to automate plugin setup</li>\n<li>Fix &#8220;Check for Spam&#8221; to use AJAX to avoid page timing out</li>\n<li>Fix Akismet settings page to be responsive</li>\n<li>Drop legacy code</li>\n<li>Tidy up CSS and Javascript</li>\n<li>Replace the old discard setting with a new &#8220;discard pervasive spam&#8221; feature.</li>\n</ul>\n<h4>2.6.0</h4>\n<p><em>Release Date &#8211; 18th March, 2014</em></p>\n<ul>\n<li>Add ajax paging to the check for spam button to handle large volumes of comments</li>\n<li>Optimize javascript and add localization support </li>\n<li>Fix bug in link to spam comments from right now dashboard widget</li>\n<li>Fix bug with deleting old comments to avoid timeouts dealing with large volumes of comments</li>\n<li>Include X-Pingback-Forwarded-For header in outbound WordPress pingback verifications</li>\n<li>Add pre-check for pingbacks, to stop spam before an outbound verification request is made</li>\n</ul>\n<h4>2.5.9</h4>\n<p><em>Release Date &#8211; 1st August, 2013</em></p>\n<ul>\n<li>Update &#8216;Already have a key&#8217; link to redirect page rather than depend on javascript</li>\n<li>Fix some non-translatable strings to be translatable</li>\n<li>Update Activation banner in plugins page to redirect user to Akismet config page</li>\n</ul>\n<h4>2.5.8</h4>\n<p><em>Release Date &#8211; 20th January, 2013</em></p>\n<ul>\n<li>Simplify the activation process for new users</li>\n<li>Remove the reporter_ip parameter</li>\n<li>Minor preventative security improvements</li>\n</ul>\n<h4>2.5.7</h4>\n<p><em>Release Date &#8211; 13th December, 2012</em></p>\n<ul>\n<li>FireFox Stats iframe preview bug</li>\n<li>Fix mshots preview when using https</li>\n<li>Add .htaccess to block direct access to files</li>\n<li>Prevent some PHP notices</li>\n<li>Fix Check For Spam return location when referrer is empty</li>\n<li>Fix Settings links for network admins</li>\n<li>Fix prepare() warnings in WP 3.5</li>\n</ul>\n<h4>2.5.6</h4>\n<p><em>Release Date &#8211; 26th April, 2012</em></p>\n<ul>\n<li>Prevent retry scheduling problems on sites where wp_cron is misbehaving</li>\n<li>Preload mshot previews</li>\n<li>Modernize the widget code</li>\n<li>Fix a bug where comments were not held for moderation during an error condition</li>\n<li>Improve the UX and display when comments are temporarily held due to an error</li>\n<li>Make the Check For Spam button force a retry when comments are held due to an error</li>\n<li>Handle errors caused by an invalid key</li>\n<li>Don&#8217;t retry comments that are too old</li>\n<li>Improve error messages when verifying an API key</li>\n</ul>\n<h4>2.5.5</h4>\n<p><em>Release Date &#8211; 11th January, 2012</em></p>\n<ul>\n<li>Add nonce check for comment author URL remove action</li>\n<li>Fix the settings link</li>\n</ul>\n<h4>2.5.4</h4>\n<p><em>Release Date &#8211; 5th January, 2012</em></p>\n<ul>\n<li>Limit Akismet CSS and Javascript loading in wp-admin to just the pages that need it</li>\n<li>Added author URL quick removal functionality</li>\n<li>Added mShot preview on Author URL hover</li>\n<li>Added empty index.php to prevent directory listing</li>\n<li>Move wp-admin menu items under Jetpack, if it is installed</li>\n<li>Purge old Akismet comment meta data, default of 15 days</li>\n</ul>\n<h4>2.5.3</h4>\n<p><em>Release Date &#8211; 8th Febuary, 2011</em></p>\n<ul>\n<li>Specify the license is GPL v2 or later</li>\n<li>Fix a bug that could result in orphaned commentmeta entries</li>\n<li>Include hotfix for WordPress 3.0.5 filter issue</li>\n</ul>\n<h4>2.5.2</h4>\n<p><em>Release Date &#8211; 14th January, 2011</em></p>\n<ul>\n<li>Properly format the comment count for author counts</li>\n<li>Look for super admins on multisite installs when looking up user roles</li>\n<li>Increase the HTTP request timeout</li>\n<li>Removed padding for author approved count</li>\n<li>Fix typo in function name</li>\n<li>Set Akismet stats iframe height to fixed 2500px.  Better to have one tall scroll bar than two side by side.</li>\n</ul>\n<h4>2.5.1</h4>\n<p><em>Release Date &#8211; 17th December, 2010</em></p>\n<ul>\n<li>Fix a bug that caused the &#8220;Auto delete&#8221; option to fail to discard comments correctly</li>\n<li>Remove the comment nonce form field from the &#8216;Akismet Configuration&#8217; page in favor of using a filter, akismet_comment_nonce</li>\n<li>Fixed padding bug in &#8220;author&#8221; column of posts screen</li>\n<li>Added margin-top to &#8220;cleared by &#8230;&#8221; badges on dashboard</li>\n<li>Fix possible error when calling akismet_cron_recheck()</li>\n<li>Fix more PHP warnings</li>\n<li>Clean up XHTML warnings for comment nonce</li>\n<li>Fix for possible condition where scheduled comment re-checks could get stuck</li>\n<li>Clean up the comment meta details after deleting a comment</li>\n<li>Only show the status badge if the comment status has been changed by someone/something other than Akismet</li>\n<li>Show a &#8216;History&#8217; link in the row-actions</li>\n<li>Translation fixes</li>\n<li>Reduced font-size on author name</li>\n<li>Moved &#8220;flagged by&#8230;&#8221; notification to top right corner of comment container and removed heavy styling</li>\n<li>Hid &#8220;flagged by&#8230;&#8221; notification while on dashboard</li>\n</ul>\n<h4>2.5.0</h4>\n<p><em>Release Date &#8211; 7th December, 2010</em></p>\n<ul>\n<li>Track comment actions under &#8216;Akismet Status&#8217; on the edit comment screen</li>\n<li>Fix a few remaining deprecated function calls ( props Mike Glendinning ) </li>\n<li>Use HTTPS for the stats IFRAME when wp-admin is using HTTPS</li>\n<li>Use the WordPress HTTP class if available</li>\n<li>Move the admin UI code to a separate file, only loaded when needed</li>\n<li>Add cron retry feature, to replace the old connectivity check</li>\n<li>Display Akismet status badge beside each comment</li>\n<li>Record history for each comment, and display it on the edit page</li>\n<li>Record the complete comment as originally submitted in comment_meta, to use when reporting spam and ham</li>\n<li>Highlight links in comment content</li>\n<li>New option, &#8220;Show the number of comments you&#8217;ve approved beside each comment author.&#8221;</li>\n<li>New option, &#8220;Use a nonce on the comment form.&#8221;</li>\n</ul>\n<h4>2.4.0</h4>\n<p><em>Release Date &#8211; 23rd August, 2010</em></p>\n<ul>\n<li>Spell out that the license is GPLv2</li>\n<li>Fix PHP warnings</li>\n<li>Fix WordPress deprecated function calls</li>\n<li>Fire the delete_comment action when deleting comments</li>\n<li>Move code specific for older WP versions to legacy.php</li>\n<li>General code clean up</li>\n</ul>\n<h4>2.3.0</h4>\n<p><em>Release Date &#8211; 5th June, 2010</em></p>\n<ul>\n<li>Fix &#8220;Are you sure&#8221; nonce message on config screen in WPMU</li>\n<li>Fix XHTML compliance issue in sidebar widget</li>\n<li>Change author link; remove some old references to WordPress.com accounts</li>\n<li>Localize the widget title (core ticket #13879)</li>\n</ul>\n<h4>2.2.9</h4>\n<p><em>Release Date &#8211; 2nd June, 2010</em></p>\n<ul>\n<li>Eliminate a potential conflict with some plugins that may cause spurious reports</li>\n</ul>\n<h4>2.2.8</h4>\n<p><em>Release Date &#8211; 27th May, 2010</em></p>\n<ul>\n<li>Fix bug in initial comment check for ipv6 addresses</li>\n<li>Report comments as ham when they are moved from spam to moderation</li>\n<li>Report comments as ham when clicking undo after spam</li>\n<li>Use transition_comment_status action when available instead of older actions for spam/ham submissions</li>\n<li>Better diagnostic messages when PHP network functions are unavailable</li>\n<li>Better handling of comments by logged-in users</li>\n</ul>\n<h4>2.2.7</h4>\n<p><em>Release Date &#8211; 17th December, 2009</em></p>\n<ul>\n<li>Add a new AKISMET_VERSION constant</li>\n<li>Reduce the possibility of over-counting spam when another spam filter plugin is in use</li>\n<li>Disable the connectivity check when the API key is hard-coded for WPMU</li>\n</ul>\n<h4>2.2.6</h4>\n<p><em>Release Date &#8211; 20th July, 2009</em></p>\n<ul>\n<li>Fix a global warning introduced in 2.2.5</li>\n<li>Add changelog and additional readme.txt tags</li>\n<li>Fix an array conversion warning in some versions of PHP</li>\n<li>Support a new WPCOM_API_KEY constant for easier use with WordPress MU</li>\n</ul>\n<h4>2.2.5</h4>\n<p><em>Release Date &#8211; 13th July, 2009</em></p>\n<ul>\n<li>Include a new Server Connectivity diagnostic check, to detect problems caused by firewalls</li>\n</ul>\n<h4>2.2.4</h4>\n<p><em>Release Date &#8211; 3rd June, 2009</em></p>\n<ul>\n<li>Fixed a key problem affecting the stats feature in WordPress MU</li>\n<li>Provide additional blog information in Akismet API calls</li>\n</ul>\n<p><!--section=faq--></p>\n<dl>\n<dt>Installation Instructions</dt>\n<dd>\n<p>Upload the Akismet plugin to your blog, Activate it, then enter your <a href=\"https://akismet.com/get/\" rel=\"nofollow\">Akismet.com API key</a>.</p>\n<p>1, 2, 3: You&#8217;re done!</p>\n</dd>\n</dl>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"https://wordpress.org/plugins/akismet/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:30:\"\n		\n		\n		\n		\n		\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Yoast SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"https://wordpress.org/plugins/wordpress-seo/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 11 Oct 2010 20:55:35 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"https://wordpress.org/plugins-wp/wordpress-seo/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:90:\"WordPress out of the box is already technically quite a good platform for SEO. This&#8230;\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:13068:\"<p><!--section=description--></p>\n<p>WordPress out of the box is already technically quite a good platform for SEO. This was true when Joost wrote his original <a href=\"https://yoast.com/articles/wordpress-seo/\" rel=\"nofollow\">WordPress SEO</a> article in 2008 (updated every few months) and it&#8217;s still true today, but that doesn&#8217;t mean you can&#8217;t improve it further! This plugin is written from the ground up by Joost de Valk and his team at <a href=\"https://yoast.com/\" rel=\"nofollow\">Yoast</a> to improve your site&#8217;s SEO on <em>all</em> needed aspects. While this <a href=\"https://yoast.com/wordpress/plugins/seo/\" rel=\"nofollow\">Yoast SEO plugin</a> goes the extra mile to take care of all the technical optimization, more on that below, it first and foremost helps you write better content.  Yoast SEO forces you to choose a focus keyword when you&#8217;re writing your articles, and then makes sure you use that focus keyword everywhere.</p>\n<blockquote>\n<p><strong>Premium Support</strong><br />\n  The Yoast team does not always provide active support for the Yoast SEO plugin on the WordPress.org forums. One-on-one email support is available to people who bought the <a href=\"https://yoast.com/wordpress/plugins/seo-premium/\" rel=\"nofollow\">Premium Yoast SEO plugin</a> only.<br />\n  Note that the Premium SEO plugin has several extra features too, including the option to have multiple focus keywords and a redirect manager, so it might be well worth your investment!</p>\n<p>You should also check out the <a href=\"https://yoast.com/wordpress/plugins/local-seo/\" rel=\"nofollow\">Yoast Local SEO</a>, <a href=\"https://yoast.com/wordpress/plugins/news-seo/\" rel=\"nofollow\">Yoast News SEO</a> and <a href=\"https://yoast.com/wordpress/plugins/video-seo/\" rel=\"nofollow\">Yoast Video SEO</a> extensions to Yoast SEO. These of course come with support too.</p>\n<p><strong>Bug Reports</strong><br />\n  Bug reports for Yoast SEO are <a href=\"https://github.com/Yoast/wordpress-seo\" rel=\"nofollow\">welcomed on GitHub</a>. Please note GitHub is <em>not</em> a support forum, and issues that aren&#8217;t properly qualified as bugs will be closed.</p>\n</blockquote>\n<h4>Write better content with Yoast SEO</h4>\n<p>Using the snippet preview, you can see a rendering of what your post or page will look like in the search results, whether your title is too long or too short, and whether your meta description makes sense in the context of a search result. This way the plugin will help you not only increase rankings but also increase the click through rate for organic search results.</p>\n<h4>Page Analysis</h4>\n<p>The Yoast SEO plugins <a href=\"https://yoast.com/content-seo-wordpress-linkdex/\" rel=\"nofollow\">Page Analysis</a> functionality checks simple things you&#8217;re bound to forget. It checks, for instance, if you have images in your post and whether they have an alt tag containing the focus keyword for that post. It also checks whether your posts are long enough, whether you&#8217;ve written a meta description and if that meta description contains your focus keyword, if you&#8217;ve used any subheadings within your post, etc. etc.</p>\n<p>The plugin alsgruo allows you to write meta titles and descriptions for all your category, tag and custom taxonomy archives, giving you the option to further optimize those pages.</p>\n<p>Combined, this plugin makes sure that your content is the type of content search engines will love!</p>\n<h4>Technical WordPress Search Engine Optimization</h4>\n<p>While out of the box WordPress is pretty good for SEO, it needs some tweaks here and there. This Yoast SEO plugin guides you through some of the settings needed, for instance by reminding you to enable pretty permalinks. But it also goes beyond that, by automatically optimizing and inserting the meta tags and link elements that Google and other search engines like so much:</p>\n<h4>Meta &amp; Link Elements</h4>\n<p>With the Yoast SEO plugin you can control which pages Google shows in its search results and which pages it doesn&#8217;t show. By default, it will tell search engines to index all of your pages, including category and tag archives, but to only show the first pages in the search results. It&#8217;s not very useful for a user to end up on the third page of your &#8220;personal&#8221; category, right?</p>\n<p>WordPress itself only shows canonical link elements on single pages, but Yoast SEO makes it output canonical link elements everywhere. Google has recently announced they would also use <code>rel=\"next\"</code> and <code>rel=\"prev\"</code> link elements in the <code>head</code> section of your paginated archives. This plugin adds those automatically. See <a href=\"https://yoast.com/rel-next-prev-paginated-archives/\" rel=\"nofollow\">this post</a> for more info.</p>\n<h4>XML Sitemaps</h4>\n<p>The Yoast SEO plugin has the most advanced XML Sitemaps functionality in any WordPress plugin. Once you check the box, it automatically creates XML sitemaps and notifies Google &amp; Bing of the sitemaps&#8217; existence. These XML sitemaps include the images in your posts &amp; pages too, so that your images may be found better in the search engines too.</p>\n<p>These XML Sitemaps will even work on large sites, because of how they&#8217;re created, using one index sitemap that links to sub-sitemaps for each 1,000 posts. They will also work with custom post types and custom taxonomies automatically, while giving you the option to remove those from the XML sitemap should you wish to.</p>\n<p>Because of using <a href=\"https://yoast.com/xsl-stylesheet-xml-sitemap/\" rel=\"nofollow\">XSL stylesheets for these XML Sitemaps</a>, the XML sitemaps are easily readable for the human eye too, so you can spot things that shouldn&#8217;t be in there.</p>\n<h4>RSS Optimization</h4>\n<p>Are you being outranked by scrapers? Instead of cursing at them, use them to your advantage! By automatically adding a link to your RSS feed pointing back to the original article, you&#8217;re telling the search engine where they should be looking for the original. This way, the Yoast SEO plugin increases your own chance of ranking for your chosen keywords and gets rid of scrapers in one go!</p>\n<h4>Breadcrumbs</h4>\n<p>If your theme is compatible, and themes based on for instance Genesis or by WooThemes often are, you can use the built-in Breadcrumbs functionality. This allows you to create an easy navigation that is great for both users and search engines, and will support the search engines in understanding the structure of your site.</p>\n<p>Making your theme compatible isn&#8217;t hard either, check <a href=\"https://kb.yoast.com/kb/implement-wordpress-seo-breadcrumbs/\" rel=\"nofollow\">these instructions</a>.</p>\n<h4>Edit your .htaccess and robots.txt file</h4>\n<p>Using the built-in file editor, you can edit your WordPress blog&#8217;s <code>.htaccess</code> and <code>robots.txt</code> file, giving you direct access to the two most powerful files, from an SEO perspective, in your WordPress install.</p>\n<h4>Social Integration</h4>\n<p>SEO and Social Media are heavily intertwined. That&#8217;s why this plugin also comes with a Facebook OpenGraph implementation and will soon also support Google+ sharing tags.</p>\n<h4>Multi-Site Compatible</h4>\n<p>The Yoast SEO plugin, unlike some others, is fully Multi-Site compatible. The XML Sitemaps work fine in all setups and you even have the option, in the Network settings, to copy the settings from one blog to another, or make blogs default to the settings for a specific blog.</p>\n<h4>Import &amp; Export functionality</h4>\n<p>If you have multiple blogs, setting up plugins like this one on all of them might seem like a daunting task. Except that it&#8217;s not, because what you can do is simple: you set up the plugin once. You then export your settings and simply import them on all your other sites. It&#8217;s that simple!</p>\n<h4>Import functionality for other WordPress SEO plugins</h4>\n<p>If you&#8217;ve used All In One SEO Pack or HeadSpace2 before using this plugin, you might want to import all your old titles and descriptions. You can do that easily using the built-in import functionality. There&#8217;s also import functionality for some of the older Yoast plugins, like Robots Meta and RSS footer.</p>\n<p>Should you have a need to import from another SEO plugin to Yoast SEO, or from a theme like Genesis or Thesis, you can use the <a href=\"https://wordpress.org/extend/plugins/seo-data-transporter/\" rel=\"nofollow\">SEO Data Transporter</a> plugin, which will easily convert your SEO meta data from and to a whole set of plugins like Platinum SEO, SEO Ultimate, Greg&#8217;s High Performance SEO, and themes like Headway, Hybrid, WooFramework, Catalyst etc.</p>\n<p>Read <a href=\"https://yoast.com/all-in-one-seo-pack-migration/\" rel=\"nofollow\">this migration guide</a> if you still have questions about migrating from another SEO plugin to Yoast SEO.</p>\n<h4>Yoast SEO Plugin in your Language!</h4>\n<p>Currently a huge translation project is underway, translating Yoast SEO in as much as 24 languages. So far, the translations for French and Dutch are complete, but we still need help on a lot of other languages, so if you&#8217;re good at translating, please join us at <a href=\"http://translate.yoast.com\" rel=\"nofollow\">translate.yoast.com</a>.</p>\n<h4>News SEO</h4>\n<p>Be sure to also check out the premium <a href=\"https://yoast.com/wordpress/plugins/news-seo/\" rel=\"nofollow\">News SEO module</a> if you need Google News Sitemaps. It tightly integrates with Yoast SEO to give you the combined power of News Sitemaps and full Search Engine Optimization.</p>\n<h4>Further Reading</h4>\n<p>For more info, check out the following articles:</p>\n<ul>\n<li>The <a href=\"https://kb.yoast.com/kb/category/yoast-seo/\" rel=\"nofollow\">Yoast SEO Knowledgebase</a>.</li>\n<li><a href=\"https://yoast.com/articles/wordpress-seo/\" rel=\"nofollow\">WordPress SEO &#8211; The definitive Guide by Yoast</a>.</li>\n<li>Once you have great SEO, you&#8217;ll need the <a href=\"https://yoast.com/articles/wordpress-hosting/\" rel=\"nofollow\">best WordPress Hosting</a>.</li>\n<li>The <a href=\"https://yoast.com/wordpress/plugins/seo/\" rel=\"nofollow\">Yoast SEO Plugin</a> official homepage.</li>\n<li>Other <a href=\"https://yoast.com/wordpress/plugins/\" rel=\"nofollow\">WordPress Plugins</a> by the same team.</li>\n<li>Follow Yoast on <a href=\"https://facebook.com/yoast\" rel=\"nofollow\">Facebook</a> &amp; <a href=\"http://twitter.com/yoast\" rel=\"nofollow\">Twitter</a>.</li>\n</ul>\n<h3>From within WordPress</h3>\n<ol>\n<li>Visit &#8216;Plugins &gt; Add New&#8217;</li>\n<li>Search for &#8216;Yoast SEO&#8217;</li>\n<li>Activate Yoast SEO from your Plugins page.</li>\n<li>Go to &#8220;after activation&#8221; below.</li>\n</ol>\n<h3>Manually</h3>\n<ol>\n<li>Upload the <code>wordpress-seo</code> folder to the <code>/wp-content/plugins/</code> directory</li>\n<li>Activate the Yoast SEO plugin through the &#8216;Plugins&#8217; menu in WordPress</li>\n<li>Go to &#8220;after activation&#8221; below.</li>\n</ol>\n<h3>After activation</h3>\n<ol>\n<li>You should see (a notice to start) the Yoast SEO configuration wizard.</li>\n<li>Go through the configuration wizard and set up the plugin for your site.</li>\n<li>You&#8217;re done!</li>\n</ol>\n<p><!--section=faq--></p>\n<p>You&#8217;ll find answers to many of your questions on <a href=\"https://kb.yoast.com/kb/category/yoast-seo/\" rel=\"nofollow\">kb.yoast.com</a>.</p>\n<p><!--section=changelog--></p>\n<h4>4.6.0</h4>\n<p>Release Date: April 11th, 2017</p>\n<ul>\n<li>\n<p>Enhancements</p>\n<ul>\n<li>Improves a language string, props <a href=\"https://github.com/Soean\" rel=\"nofollow\">Sören Wrede</a>.</li>\n<li>Improves the configuration wizard with clear information about the configuration.</li>\n<li>Adds the ability to mark posts as cornerstone content.</li>\n</ul>\n</li>\n<li>\n<p>Bugfixes</p>\n<ul>\n<li>Fixes an issue in combination with WooCommerce 3.0 where the plugins would load incompatible select2 versions.</li>\n</ul>\n</li>\n</ul>\n<h4>4.5.0</h4>\n<p>Release Date: March 21st, 2017</p>\n<ul>\n<li>\n<p>Additions</p>\n<ul>\n<li>Adds a message about the PHP version for WordPress installations that run on PHP 5.2. The warning also has pointers on how to address this situation. <a href=\"https://yoa.st/x6\" rel=\"nofollow\">We have an article about why we are doing this on yoast.com</a>.</li>\n</ul>\n</li>\n<li>\n<p>Bugfixes</p>\n<ul>\n<li>Adds a check for the breadcrumbs-home option to prevent a blank entry being added to the crumbs array, props <a href=\"https://github.com/codemonkeynorth\" rel=\"nofollow\">codemonkeynorth</a></li>\n</ul>\n</li>\n<li>\n<p>Enhancements</p>\n<ul>\n<li>Throws a warning in the admin for the RS Head Cleaner plugin, because the plugin cloaks.</li>\n<li>Improves copy about Yoast SEO Premium benefits.</li>\n<li>Adds link to our knowledge base article about connecting your website to Google Search Console.</li>\n</ul>\n</li>\n</ul>\n<h4>Earlier versions</h4>\n<p>For the changelog of earlier versions, please refer to the separate changelog.txt file.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:39:\"\n		\n		\n		\n		\n		\n		\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Jetpack by WordPress.com\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"https://wordpress.org/plugins/jetpack/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"https://wordpress.org/plugins/jetpack/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 20 Jan 2011 02:21:38 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"https://wordpress.org/plugins-wp/jetpack/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:112:\"The one plugin you need for stats, related posts, search engine optimization, social sharing, protection,&#8230;\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Automattic\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:34607:\"<p><!--section=description--></p>\n<p>Keep any WordPress site secure, increase traffic, and engage your readers.</p>\n<h4>Traffic and SEO Tools</h4>\n<p>Traffic is the lifeblood of any website. Jetpack includes:</p>\n<ul>\n<li>[free] Site stats and analytics</li>\n<li>[free] Automatic sharing on Facebook, Twitter, LinkedIn, Tumblr, Reddit, and WhatsApp</li>\n<li>[free] Related posts</li>\n<li>[paid] Search engine optimization tools for Google, Bing, Twitter, Facebook, and WordPress.com</li>\n<li>[paid] Advertising program that includes the best of AdSense, Facebook Ads, AOL, Amazon, Google AdX, and Yahoo</li>\n</ul>\n<h4>Security and Backup Services</h4>\n<p>Stop worrying about data loss, downtime, and hacking. Jetpack provides:</p>\n<ul>\n<li>[free] Brute force attack protection</li>\n<li>[free] Downtime and uptime monitoring</li>\n<li>[free] Secured logins and two-factor authentication</li>\n<li>[paid] Malware scanning, code scanning, and threat resolution</li>\n<li>[paid] Site backups, restores, and migrations</li>\n</ul>\n<h4>Content Creation</h4>\n<p>Add rich, beautifully-presented media &#8212; no graphic design expertise necessary:</p>\n<ul>\n<li>[free] A high-speed CDN for your images</li>\n<li>[free] Carousels, slideshows, and tiled galleries</li>\n<li>[free] Simple embeds from YouTube, Google Documents, Spotify and more</li>\n<li>[free] Sidebar customization including Facebook, Twitter, and RSS feeds</li>\n<li>[free] Extra sidebar widgets including blog stats, calendar, and author widgets</li>\n<li>[paid] High-speed, ad-free, and high-definition video hosting</li>\n</ul>\n<h4>Discussion and Community</h4>\n<p>Create a connection with your readers and keep them coming back to your site with:</p>\n<ul>\n<li>[free] Email subscriptions</li>\n<li>[free] Comment login with Facebook, Twitter, and Google</li>\n<li>[free] Fully-customizable contact forms</li>\n<li>[free] Infinite scroll for your posts</li>\n</ul>\n<h4>Expert Support</h4>\n<p>We have an entire team of Happiness Engineers ready to help you. Ask your questions in the support forum, or <a href=\"https://jetpack.com/contact-support\" rel=\"nofollow\">contact us directly</a>.</p>\n<h4>Paid Services</h4>\n<p>Most of Jetpack&#8217;s features and services are free. Jetpack also provides advanced security and backup services, video hosting, site monetization, priority support, and more SEO tools in three <a href=\"https://jetpack.com/pricing?from=wporg\" rel=\"nofollow\">simple and affordable plans</a>.</p>\n<h4>Get Started</h4>\n<p>Installation is free, quick, and easy. Set up <a href=\"https://jetpack.com/install?from=wporg\" rel=\"nofollow\">the free plan</a> in minutes.</p>\n<p><!--section=faq--></p>\n<dl>\n<dt>Installation Instructions</dt>\n<dd>\n<h4>Automated Installation</h4>\n<p>Installation is free, quick, and easy. <a href=\"https://jetpack.com/install?from=wporg\" rel=\"nofollow\">Install Jetpack from our site</a> in minutes.</p>\n<h4>Manual Alternatives</h4>\n<p>Alternatively, install Jetpack via the plugin directory, or upload the files manually to your server and follow the on-screen instructions. If you need additional help <a href=\"http://jetpack.com/support/installing-jetpack/\" rel=\"nofollow\">read our detailed instructions</a>.</p>\n</dd>\n<dt>Is Jetpack Free?</dt>\n<dd>\n<p>Yes! Jetpack&#8217;s core features are and always will be free.</p>\n<p>These include: <a href=\"https://jetpack.com/features/traffic/site-stats\" rel=\"nofollow\">site stats</a>, a <a href=\"https://jetpack.com/features/writing/content-delivery-network/\" rel=\"nofollow\">high-speed CDN</a> for images, <a href=\"https://jetpack.com/features/traffic/related-posts\" rel=\"nofollow\">related posts</a>, <a href=\"https://jetpack.com/features/security/downtime-monitoring\" rel=\"nofollow\">downtime monitoring</a>, brute force <a href=\"https://jetpack.com/features/security/brute-force-attack-protection\" rel=\"nofollow\">attack protection</a>, <a href=\"https://jetpack.com/features/traffic/automatic-publishing/\" rel=\"nofollow\">automated sharing</a> to social networks, <a href=\"https://jetpack.com/features/writing/sidebar-customization/\" rel=\"nofollow\">sidebar customization</a>, and many more.</p>\n</dd>\n<dt>Should I purchase a paid plan?</dt>\n<dd>\n<p>Jetpack&#8217;s paid services include automated backups, security scanning, spam filtering, video hosting, site monetization, SEO tools, and priority support.</p>\n<p>If you&#8217;re interested in learning more about the extra layers of protection and advanced tools available, learn more about our <a href=\"https://jetpack.com/pricing?from=wporg\" rel=\"nofollow\">paid plans</a>.</p>\n</dd>\n<dt>Why do I need a WordPress.com account?</dt>\n<dd>\n<p>Since Jetpack and its services are provided and hosted by WordPress.com, a WordPress.com account is required for Jetpack to function.</p>\n</dd>\n<dt>I already have a WordPress account, but Jetpack isn&#8217;t working. What&#8217;s going on?</dt>\n<dd>\n<p>A WordPress.com account is different from the account you use to log into your self-hosted WordPress. If you can log into <a href=\"https://wordpress.com\" rel=\"nofollow\">WordPress.com</a>, then you already have a WordPress.com account. If you can&#8217;t, you can easily create one <a href=\"https://jetpack.com/install?from=wporg\" rel=\"nofollow\">during installation</a>.</p>\n</dd>\n<dt>How do I view my stats?</dt>\n<dd>\n<p>Once you&#8217;ve installed Jetpack your stats will be available on <a href=\"https://wordpress.com/stats\" rel=\"nofollow\">WordPress.com/Stats</a>, on the official <a href=\"https://apps.wordpress.com/mobile/\" rel=\"nofollow\">WordPress mobile apps</a>, and on your Jetpack dashboard.</p>\n</dd>\n<dt>How do I contribute to Jetpack?</dt>\n<dd>\n<p>There are opportunities for developers at all levels to contribute. <a href=\"https://jetpack.com/contribute\" rel=\"nofollow\">Learn more about contributing to Jetpack</a> or consider <a href=\"https://jetpack.com/beta\" rel=\"nofollow\">joining our beta program</a>.</p>\n</dd>\n</dl>\n<p><!--section=changelog--></p>\n<h4>4.8.2</h4>\n<ul>\n<li>Release date: April 7th, 2017</li>\n<li>Release post: http://wp.me/p1moTy-4P0</li>\n</ul>\n<p><strong>Bug Fixes</strong></p>\n<ul>\n<li>Fixed a bug that prevented activating/deactivating of some features in PHP versions below 5.4.</li>\n<li>Removed an unused function that was also incompatible with PHP versions below 5.4.</li>\n<li>Fixed a bug that was causing a blank Jetpack admin area.</li>\n</ul>\n<h4>4.8.1</h4>\n<ul>\n<li>Release date: April 5th, 2017</li>\n<li>Release post: http://wp.me/p1moTy-4N5</li>\n</ul>\n<p><strong>Bug Fixes</strong></p>\n<ul>\n<li>An incompatibility with PHP versions lower than 5.4 was introduced in the last release, causing a fatal error and we&#8217;ve immediately fixed this.</li>\n<li>Sitemaps: Some plugins were relying on a function that was removed in the last release, which has been fixed.</li>\n<li>General: Clicking on the info icon in the settings area will no longer jump to the top of the page.</li>\n<li>General: The Anti-spam card will always display the correct status in the Jetpack dashboard.</li>\n</ul>\n<h4>4.8</h4>\n<ul>\n<li>Release date: April 4th, 2017</li>\n<li>Release post: http://wp.me/p1moTy-4gA</li>\n</ul>\n<p><strong>Major Enhancements</strong></p>\n<ul>\n<li>Easier to navigate Jetpack&#8217;s feature settings in your dashboard and WordPress.com.</li>\n<li>New WordPress.com Toolbar provides quick access to site management, stats, and other services.</li>\n<li>New MailChimp Subscribe Popup widget.</li>\n<li>Sitemaps are faster and now support sites with a very large amount of posts.</li>\n<li>Contact Form now has a plain-text alternative and better avoids spam filters.</li>\n<li>Debug form includes extra information to better prioritize your support requests.</li>\n<li>Photon can now be used within the dashboard, and supports bbPress topics and replies.</li>\n</ul>\n<p><strong>Slightly Less Exciting Enhancements</strong></p>\n<ul>\n<li>Improved previously confusing wording in Stats dashboard, and Featured Content options.</li>\n<li>You can now embed Apple Keynotes straight from icloud.com in your posts and pages.</li>\n<li>Changed Infinite Scroll button text on taxonomy page and added a new filter to short-circuit the <code>is_last_batch()</code> method.</li>\n<li>Open Graph now uses transients to save image IDs.</li>\n<li>You can now use full URLs in the Social Media Icons widget.</li>\n<li>Milestone widget now allows custom links to open in a new window.</li>\n<li>VideoPress videos can be used as headers in themes that support it, like Twenty Seventeen.</li>\n<li>Extracted the timezone offset method from the Upcoming Events widget so it can be used by other features.</li>\n</ul>\n<p><strong>Performance Improvements</strong></p>\n<ul>\n<li>Database load is reduced during updates on large sites with multiple servers by retaining hashes for current and current-1 versions.</li>\n<li>Disk storage is reduced on large multisite networks by storing the <code>jetpack_file_data</code> option in the <code>wp_sitemeta</code> table.</li>\n<li>Jetpack plan data now uses the WordPress.com REST API.</li>\n<li>Slovakian language files now rely on WordPress.org&#8217;s language packs.</li>\n</ul>\n<p><strong>Accessibility Improvements</strong></p>\n<ul>\n<li>Improved post details clipping for better screen reader support.</li>\n<li>Updated custom language packs for multiple languages.</li>\n</ul>\n<p><strong>Security Improvements</strong></p>\n<ul>\n<li>We now avoid path disclosure via cookies in PHP error messages.</li>\n</ul>\n<p><strong>Compatibility Improvements</strong></p>\n<ul>\n<li>Removed deprecated functions <code>get_theme</code> and <code>get_current_theme</code>.</li>\n<li>Publicize now works with third-party plugins like WP Recipe Maker.</li>\n<li>Open Graph Meta Tags are now enabled when you use the &#8220;Head, Footer and Post Injections&#8221; plugin.</li>\n<li>Better support for WooCommerce data sync and backup.</li>\n<li>We now also sync the <code>sync_via_cron</code> setting, the user&#8217;s chosen language, and WP Super Cache&#8217;s globals and constants.</li>\n<li>We no longer sync post types from the WordPress Automatic Plugin and RSS AutoPilot to avoid synchronization issues.</li>\n<li>Sync settings can now be edited from the WordPress.com REST API to better troubleshoot sync issues.</li>\n</ul>\n<p><strong>Bug Fixes</strong></p>\n<ul>\n<li>Gravatar is always displayed in Settings.</li>\n<li>Submenu items always use relative links.</li>\n<li>Contact Form avoids PHP notices when using the form in a Text widget.</li>\n<li>Content Options now correctly displays single characters word count on sites with multibyte languages.</li>\n<li>Administrator area translations fixed for several languages.</li>\n<li>Added proper support for Formal/Informal translation versions for languages that support them.</li>\n<li>Site Icons are always used as fallback Open Graph Image tags.</li>\n<li>Protect removes port number when server returns a port alongside a stored IP address.</li>\n<li>Filters ensure that more than 1,024 posts can be excluded from Related Posts.</li>\n<li>When the email is already subscribed we now show the correct notification in the subscription form.</li>\n<li>When using the Email sharing button, we now avoid syntax errors due to unexpected characters in the from name.</li>\n<li>Remove deprecated <code>jetpack_publicize_post</code> action.</li>\n<li>VideoPress now avoids PHP Notices when fetching video information.</li>\n<li>Instagram base URL now uses <code>www</code> in the Social Media Icons widget.</li>\n<li>All values entered in Facebook Page Plugin widget settings are now escaped.</li>\n<li>Widget Visibility now avoids memory issues on sites with a lot of registered users.</li>\n</ul>\n<h4>4.7.1</h4>\n<ul>\n<li>Release date: March 14th, 2017</li>\n<li>Release post: http://wp.me/p1moTy-48Y</li>\n</ul>\n<p><strong>Bug Fixes</strong></p>\n<ul>\n<li>Carousel: avoid javascript errors that may cause issues with Slideshows or Tiled Galleries.</li>\n<li>Markdown: always enable Markdown for posts whenever the module is active.</li>\n<li>Sharing: make sure that sharing buttons open in a small pop-up instead of a separate window.</li>\n<li>SSO: Avoid token or nonce errors when trying to log in to your site via the Secure Sign On option.</li>\n<li>VideoPress: add in the ability to get video thumbnails from the WordPress.com REST API.</li>\n<li>Widgets: improve rendering of the Image Widget via Photon.</li>\n<li>Widget Visibility: avoid empty widget visibility rules after updating to Jetpack 4.7.</li>\n<li>Widget Visibility: restore the option to make widgets appear on archive pages of different Custom Post Types.</li>\n<li>Widget Visibility: migrate widget visibility settings to the new major Page rule for Custom Post Types.</li>\n<li>Widget Visibility: add missing CSS for widget visibility settings on sites using an RTL language.</li>\n</ul>\n<h4>4.7</h4>\n<ul>\n<li>Release date: March 7th, 2017</li>\n<li>Release post: http://wp.me/p1moTy-46L</li>\n</ul>\n<p><strong>Enhancements</strong></p>\n<ul>\n<li>Quickly jump to post specific stats on WordPress.com with a new link.</li>\n<li>We&#8217;ve added more information to our debug tools to improve your support experience.</li>\n<li>New HTML5 versions of our house ads are out.</li>\n<li>Display custom copyright EXIF information in the Carousel with this new filter.</li>\n<li>We&#8217;ve highlighted the ability to export Contact Form feedback as it was being overlooked.</li>\n<li>If you have images on WordPress.com we&#8217;re going to skip using Photon when the images include resize parameters.</li>\n<li>It is now possible to use the Sharing filter to customize the emails sent from the Email Sharing button.</li>\n<li>We&#8217;ve updated the library powering the Print link in the Recipe shortcode.</li>\n<li>Customize the speed and display of your slideshows with new Slideshow shortcode filters.</li>\n<li>The Twitch.tv shortcode now uses Twitch&#8217;s new embedded player.</li>\n<li>Social Menus now come with the option to use SVG icons.</li>\n<li>Customize the content of the Display Posts Widget with a new filter.</li>\n<li>We&#8217;ve added a new email field to the Contact Info Widget.</li>\n<li>The Image and the Text widgets now use Photon if it is enabled.</li>\n<li>The WordPress.com REST API got several updates including using <code>register_rest_route()</code> consistently for registering, new date and time format settings, a filter for theme info results, new links and endpoints, and more.</li>\n<li>We cleaned up the Google+ Shortcode JS library and added a way to filter the SlideShare shortcode.</li>\n</ul>\n<p><strong>Performance Improvements</strong></p>\n<ul>\n<li>Experience better performance with single page load caching of the media summary.</li>\n<li>We made some improvements to avoid slow queries on sites with thousands of images.</li>\n<li>The Top Posts widget now utilizes an endpoint from the WP.com REST API improving performance.</li>\n<li>Improve development mode performance by only calling <code>site_url()</code> once.</li>\n<li>We rewrote the way major/minor rules lists are generated to save bandwidth, and memory for sites using Widget Visibility.</li>\n<li>We&#8217;ve removed sync options that weren&#8217;t needed to save memory during the sync process.</li>\n</ul>\n<p><strong>Accessibility</strong></p>\n<ul>\n<li>We&#8217;ve improved the highlight of the stats range for a better visual experience and to make it consistent with other areas of the dashboard.</li>\n<li>Added a missing label to one of the fields in the Email sharing dialog.</li>\n<li>We&#8217;ve enabled keyboard focus styling in the new admin interface.</li>\n<li>Increased padding to sharing buttons on mobile to avoid usability issues.</li>\n<li>We&#8217;ve replaced Widget Visibility text labels with icons to improve usability on smaller devices.</li>\n</ul>\n<p><strong>Slightly Less Exciting Enhancements:</strong></p>\n<ul>\n<li>We&#8217;ve added a filter to allow you to remove the Comment Form title.</li>\n<li>The Development Mode notice got an update to include all possible options to activate Development mode.</li>\n<li>Jetpack registration function got an update and cleanup.</li>\n<li>A notice displayed to WooCommerce store owners now detects when WooCommerce Services is installed, but not active.</li>\n<li>We&#8217;ve removed the Holiday Snow settings until you need them.</li>\n<li>Improved Infinite Scroll settings to reduce confusion.</li>\n<li>The HTML classes <code>infinite-scroll</code> and <code>neverending</code> are now applied using JS instead of PHP.</li>\n<li>We&#8217;ve updated the support link appearing when you&#8217;re locked out of your site.</li>\n<li>New Unit Tests were added to make sure Publicize doesn&#8217;t break when making changes to the Publicize process.</li>\n<li>We&#8217;ve added a sync filter to allow customizing timeout.</li>\n<li>The Top Posts widget now supports non-square image sizes.</li>\n<li>Added the Video GUID to the media API endpoint.</li>\n</ul>\n<p><strong>Improved Compatibility</strong></p>\n<ul>\n<li>Fixed some W3C validation errors in Comments.</li>\n<li>Infinite Scroll now works beautifully with the Twenty Seventeen Theme.</li>\n<li>Translate new terms easier with an improvement to the translator comments.</li>\n<li>We switched to use Core functions to retrieve the list of sites in a multisite network for more accurate results.</li>\n<li>We added Product visibility to post meta whitelist, for better control of products displayed in Related Posts.</li>\n<li>We no longer sync specific post meta data added by Postman or WP RSS Mutli Importer to avoid performance issues during the sync process.</li>\n<li>We&#8217;re now avoiding conflicts with plugins adding the core Video upload library to the post editor.</li>\n<li>Removed deprecated compatibility code for older versions of WordPress.</li>\n<li>We had some Shortcode conflicts with WordPress Post embeds, but that&#8217;s been fixed.</li>\n</ul>\n<p><strong>Bug Fixes</strong></p>\n<ul>\n<li>The Carousel <code>jp_carousel_load_for_images_linked_to_file</code> filter wasn&#8217;t working well with Photon, this has been fixed.</li>\n<li>Carousel is now working well when loaded from infinite scroll.</li>\n<li>We removed double slashes from file paths in the Contact Form to avoid errors in specific server environments.</li>\n<li>Fixed a problem where CSS was being stripped when migrating from Jetpack&#8217;s Custom CSS to Core&#8217;s CSS editor.</li>\n<li>Our Debug Tool is now reporting the correct URL when WordPress lives in a subdirectory.</li>\n<li>Found and fixed a PHP error when uninstalling Jetpack.</li>\n<li>Infinite Scroll is no longer buggy when displaying the last page, and is more compatible with certain themes that were returning posts when there were none left to show.</li>\n<li>We&#8217;re now skipping Photon for .ashx files.</li>\n<li>The Twitter character counter in Publicize got a fix to display info correctly.</li>\n<li>Related Posts are now displaying correctly for everyone, and we brought back the <code>jetpack_sharing_headline_html</code> filter.</li>\n<li>We&#8217;ve improved Sharing to render custom sharing services correctly, include Open Graph Meta Tags, and avoid JavaScript errors when jQuery is enqueued in the footer.</li>\n<li>Synchronization scheduling issues have been resolved.</li>\n<li>We&#8217;re now trimming spaces in URLs for Image and Display Posts Widgets.</li>\n<li>Widget Visibility wasn&#8217;t playing nice on taxonomy pages, this is no longer the case.</li>\n<li>The WordPress.com REST API received a couple of fixes to remove PHP errors when editing via the WordPress.com interface, authentication errors when using third-party apps, and permission errors when trying to preview edited posts in the WordPress.com editor.</li>\n</ul>\n<h4>4.6</h4>\n<ul>\n<li>Release date: February 7, 2017</li>\n<li>Release post: http://wp.me/p1moTy-40g</li>\n</ul>\n<p><strong>New Features and Improvements</strong></p>\n<ul>\n<li>Enable Google Analytics without touching a line of code with this new Jetpack feature.</li>\n</ul>\n<p><strong>Performance Improvements</strong></p>\n<ul>\n<li>We&#8217;ve updated all outbound links to use HTTPS to improve performance and security.</li>\n<li>Photon now leverages a new WordPress core function to improve performance a bit.</li>\n</ul>\n<p><strong>Enhancements</strong></p>\n<ul>\n<li>Keep an eye out for a note from WooCommerce on how your e-commerce store may benefit from our new USPS and CanadaPost shipping functionality.</li>\n<li>We&#8217;ve added an error message if Publicize isn&#8217;t functioning as it should be.</li>\n<li>The Twitter Widget timeline now displays the tweet limit count as 20, prior to this it appeared to have no limit.</li>\n</ul>\n<p><strong>Slightly Less Exciting Enhancements:</strong></p>\n<ul>\n<li>In an effort to help us better understand features that are being used, Twitter&#8217;s timeline widget and Twitter&#8217;s shortcodes now pass Jetpack&#8217;s partner ID.</li>\n<li>We&#8217;ve added new API endpoints allowing us to enable translation auto-updates and pull post rows and metadata for backups.</li>\n<li>We&#8217;re now retrieving all feature settings in the readable <code>/settings</code> endpoint.</li>\n</ul>\n<p><strong>Improved Compatibility</strong></p>\n<ul>\n<li>We&#8217;ve eliminated some notices and warnings when using Jetpack on a server running PHP 7.1 or on servers where <code>print_r()</code> is disabled.</li>\n<li>Photon now avoids PHP notices when your site is using plugins that do srcset CDN replacement.</li>\n<li>When the sharing options appear to be incorrect due to site configuration issues we force it to retrieve the right options avoiding potential fatal errors.</li>\n<li>We&#8217;ve added some shortcode CSS and widget class names prefixes to avoid conflicts with other plugins.</li>\n</ul>\n<p><strong>Bug Fixes</strong></p>\n<ul>\n<li>Some sites were using illegal multibyte characters and failing to sync posts, this has been fixed.</li>\n<li>IE11 was giving our admin layout a bit of a problem but we rectified that.</li>\n<li>There were some PHP notices popping up when a site has no posts so we got rid of them.</li>\n<li>The new Jetpack Ads feature will auto disable itself if your Jetpack plan doesn&#8217;t support the feature.</li>\n<li>We fixed a few PHP notices and warnings related to the Custom CSS feature.</li>\n<li>The connection banner&#8217;s &#8220;dismiss&#8221; icon was giving us a little trouble, but we got it fixed right up.</li>\n<li>The Likes feature was showing a PHP notice when there was no $post object, this has been fixed.</li>\n<li>We&#8217;ve brought back the Twitter Widget &#8220;noscrollbar&#8221; option.</li>\n<li>We&#8217;re now forcing only Photon URLs to HTTPS as your custom CDN URLs may use a different protocol.</li>\n<li>If a Publicize connection is not shared with all users on the site, do not trigger Publicize for the other users.</li>\n<li>Publicize was having trouble working with scheduled posts, this should be fixed now.</li>\n<li>SSO may not have been displaying the login form when using JSON API authorization.  Sorry about that, we&#8217;ve fixed it.</li>\n<li>We&#8217;ve eliminated some PHP notices that were showing with some Shortcodes.</li>\n<li>There was a Top Posts Widget image size issue when using list layouts, but is no longer causing issues.</li>\n<li>We fixed some notices and warnings when updating data from the WordPress.com central interface.</li>\n</ul>\n<h4>4.5</h4>\n<ul>\n<li>Release date: January 17, 2017</li>\n<li>Release post: http://wp.me/p1moTy-3Kc</li>\n</ul>\n<p>This release introduces a brand-new module, Jetpack Ads, a brand-new VideoPress feature, and a lot of new shortcodes and widgets.</p>\n<p><strong>Exciting New Features and Improvements:</strong></p>\n<ul>\n<li>Generate revenue from your site with an all-new WordAds feature, which when enabled displays high-quality ads for your visitors.</li>\n<li>Today we are proud to release a fully redesigned VideoPress interface for easy uploading, management, and add-free playback of your fantastic videos now fully integrated with your Jetpack Premium or Professional plans.</li>\n<li>Spice up your sidebar with new widgets that display blog stats, author info, &#8220;Follow my blog&#8221; buttons, and even an event countdown.</li>\n<li>Embed your amazing 360° photos with the VR shortcode</li>\n<li>Link your visitors to your Tumblr or Twitch pages using the new icons in the Social Media Icons Widget.</li>\n</ul>\n<p><strong>Enhancements</strong></p>\n<ul>\n<li>Use the beautiful Jetpack carousel feature to display single images.</li>\n<li>Turn on and update Related Posts right from the Customizer.</li>\n<li>Customize the output of the Related Posts headline using a new filter.</li>\n</ul>\n<p><strong>Performance and Security Improvements:</strong></p>\n<ul>\n<li>Your Custom CSS will now be served in a separate stylesheet when it is more than 2,000 characters.</li>\n<li>Your Stats queries are now always being made over HTTPS.</li>\n<li>Holiday Snow files now load in the footer, but rest assured the snow still falls from above.</li>\n<li>We have improved Jetpack&#8217;s synchronization process to support more plugins and use less resources.</li>\n<li>The jQuery Cycle script used by slideshow galleries is now minified, resulting in faster loading times.</li>\n</ul>\n<p><strong>Slightly Less Exciting Enhancements:</strong></p>\n<ul>\n<li>The JSON API now allows updating translations and alternative theme installation methods.</li>\n<li>Public Custom Post Types are now automatically available via the WordPress.com REST API.</li>\n<li>We&#8217;ve added a token-based authentication mechanism to the REST API in order for the site to be able to receive authenticated requests from WordPress.com.</li>\n<li>Use <code>sync</code> commands in Jetpack&#8217;s WP CLI.</li>\n<li>You can now set the value for options directly in the Contact Form shortcode.</li>\n<li>Updated some verbiage around IP Whitelisting on the Protect settings screen.</li>\n<li>Custom sharing buttons got some new variables.</li>\n<li>RIP blip.tv — we&#8217;ve removed your shortcode.</li>\n<li>Improved Image and Display Posts Widget settings to provide more explanation and better error messages.</li>\n<li>We&#8217;ve added a few new Content Options to the Customizer for supported themes.</li>\n<li>Improved the Facebook Widget to avoid confusion when editing width and height settings.</li>\n<li>Added and improved a few shortcodes.</li>\n</ul>\n<p><strong>Improved Compatibility:</strong></p>\n<ul>\n<li>If your server is misconfigured and we can&#8217;t get an IP address we&#8217;re going to deactivate Protect and send you a notice so you&#8217;re in the loop.</li>\n<li>The WPML compatibility file wasn&#8217;t loading at the right time, but we&#8217;ve fixed that.</li>\n<li>We&#8217;ve improved compatibility with tools like Cavalcade to avoid stuck Cron jobs.</li>\n<li>Some selected WooCommerce data (order items and order item meta) are now syncing to WordPress.com.</li>\n</ul>\n<p><strong>Bug Fixes</strong></p>\n<ul>\n<li>You&#8217;ll notice numerous design improvements to the Jetpack UI.</li>\n<li>Accessibility is important to us so we&#8217;ve made some improvements there.</li>\n<li>Missing attachments in the Carousel were causing an infinite loop, but we&#8217;ve corrected that.</li>\n<li>Eliminated a PHP Notice when running the CLI <code>wp jetpack</code> command.</li>\n<li>PHP warnings in the Restaurant Menu Post type have seen their last day with us.</li>\n<li>Fixed a bug that displayed the wrong connected user for up to 24 hours after they disconnected.</li>\n<li>Removed a deprecated function to prevent notices when using Infinite Scroll in the Customizer.</li>\n<li>Long titles in Jetpack widgets weren&#8217;t looking so great, so we cleaned them up.</li>\n<li>Before now you weren&#8217;t able to create a child category from WordPress.com. Now you can!</li>\n<li>Rogue colons were showing up in the related posts area on sites with the Twenty Fourteen and Twenty Sixteen themes.</li>\n<li>Fixed a ReCaptcha error on the Email sharing button.</li>\n<li>Confirmed Instagram embeds actually load when using Infinite Scroll.</li>\n<li>Site Icons now display on the WordPress.com site management interface.</li>\n<li>Set a default time limit of 30 seconds when sending sync requests via Cron.</li>\n<li>Synchronized supported shortcodes on a site.</li>\n<li>Fixed an issue where empty categories weren&#8217;t showing with the Widget Visibility feature dropdown.</li>\n<li>Fixed various little bugs when working with multiple widgets in the Customizer and in the Widgets admin screen.</li>\n<li>Added a Translate Widget default title in case you haven&#8217;t defined one.</li>\n<li>The Top Posts Widget now avoids layout issues when using the Grid layout while displaying a post without an image.</li>\n</ul>\n<h4>4.4.2</h4>\n<ul>\n<li>Release date: December 6, 2016</li>\n<li>Release post: http://wp.me/p1moTy-3JR</li>\n</ul>\n<p>This release improves Jetpack compatibility with WordPress 4.7.</p>\n<p><strong>Compatibility changes</strong></p>\n<ul>\n<li>Custom CSS: Made the Custom CSS feature of Jetpack compatible with the CSS Customizer editor in WordPress 4.7.</li>\n<li>Sync: improved compatibility with the wp-missed-schedule plugin.</li>\n</ul>\n<p><strong>Bug Fixes</strong></p>\n<ul>\n<li>Featured Content: made sure there is no infinite loop when removing the featured tag from the tag list.</li>\n<li>Admin: made sure help tabs are not being hidden.</li>\n<li>Admin: made At a Glance page work nicely when there is no backup data yet.</li>\n<li>Sync: now making sure that needed classes are loaded, preventing errors.</li>\n<li>Sync: cleared out unneeded scheduled jobs.</li>\n</ul>\n<h4>4.4.1</h4>\n<ul>\n<li>Release date: November 22, 2016</li>\n<li>Release post: http://wp.me/p1moTy-3JR</li>\n</ul>\n<p><strong>Bug Fixes</strong></p>\n<ul>\n<li>Fixed an issue where some users with slower servers would get an error on the Jetpack dashboard when <code>WP_DEBUG</code> was enabled.</li>\n<li>Fixed an issue where users on a Jetpack Professional plan who were paying monthly (as opposed to annually) wouldn’t be able to enable SEO Tools.</li>\n</ul>\n<h4>4.4</h4>\n<ul>\n<li>Release date: November 21, 2016</li>\n<li>Release post: http://wp.me/p1moTy-3FE</li>\n</ul>\n<p><strong>Enhancements</strong></p>\n<ul>\n<li>Additional unit tests have been added to improve Jetpack&#8217;s development process and stability.</li>\n<li>Custom post types have been added to the WP REST API output.</li>\n<li>Many of the screenshots throughout the plugin have been replaced by SVGs in order to make Jetpack smaller.</li>\n<li>New endpoints have been added to allow the installation of plugin and theme zip files via the API.</li>\n<li>Twelve new filters to make Jetpack more extensible!  See: http://wp.me/p1moTy-3FE.</li>\n<li>New widget: &#8220;Google Translate&#8221; to allow users to translate your site into their own language.</li>\n<li>New widget: &#8220;My Community&#8221; where you can see who recently interacted with your site.</li>\n<li>One of the biggest issues facing Jetpack users for years now has been difficulties in moving sites from one domain name to another. This update makes strides towards improving that process.</li>\n<li>Photon now uses HTTPS by default. Secure all the things!</li>\n<li>There are now helpful hints throughout the admin interface to make Jetpack easier to use.</li>\n<li>We now allow you to embed pins, boards and profiles from Pinterest.</li>\n<li>We&#8217;ve added a new feature: SEO Tools, available to Jetpack Professional subscribers. You can read more about our plans here: https://jetpack.com/features/</li>\n<li>We&#8217;ve made numerous improvements to the data sync process.</li>\n</ul>\n<p><strong>Bug Fixes:</strong></p>\n<ul>\n<li>Fixed link to Akismet settings.</li>\n<li>Improved compatibility between Infinite Scroll and WPML.</li>\n<li>Move email notification settings back with the other email settings in the Discussion Settings.</li>\n<li>Various minor performance/compatibility fixes.</li>\n</ul>\n<h4>4.3.2</h4>\n<ul>\n<li>Release date: October 13, 2016</li>\n</ul>\n<p><strong>Enhancements</strong></p>\n<ul>\n<li>Unsaved changes were getting lost when users were navigating away from settings so we put in a confirmation message to prevent this from happening.</li>\n<li>We&#8217;ve stopped counting carousel views in stats by default, you can use the <code>jetpack_enable_carousel_stats</code> filter to enable counting them again.</li>\n<li>Stats are now responding faster.</li>\n<li>There were several improvements and repairs made to sync including additional endpoints, performance enhancements, whitelisted data, better decision making around when to sync information, and more.</li>\n<li>Markdown now has a CSS class on footnotes.</li>\n</ul>\n<p><strong>Improved Compatibility:</strong></p>\n<ul>\n<li>We&#8217;ve improved compatibility with Kinsta by automatically turning on Staging Mode for Jetpack when in a staging environment.</li>\n</ul>\n<p><strong>Bug Fixes:</strong></p>\n<ul>\n<li>Several fixes have been made to sync to repair issues with Publicize, Notifications, and Subscriptions.</li>\n<li>We removed PHP warnings by checking to make sure json language files like jetpack-en_US.json are readable before we load them.</li>\n<li>We found an unused option in Gravatar Hovercard settings and removed it.</li>\n<li>The correct support link is now being used to make it easier for you to connect with the Jetpack team if you need us.</li>\n<li>The permissions check for plugin information retrieval was fixed as well.</li>\n<li>Some plugins were adding content on outbound http requests causing an infinite loop we fixed this right up.</li>\n<li>We removed some warnings that were occurring when translations didn&#8217;t exist by adding a fallback.</li>\n<li>We&#8217;ve added Moroccan Arabic translations, and switched to language packs for Croatian, Spanish (Chile) and Greek.</li>\n<li>Sync was running into issues so we&#8217;ve limited dequeue time to 1/3 of PHP&#8217;s max execution time, which has unclogged the problem.</li>\n<li>We&#8217;re now sending full and incremental queues separately so that a failure in one doesn&#8217;t block the other.</li>\n<li>There was a JavaScript enqueuing error with our Sharing feature that has been repaired.</li>\n<li>The Top Posts widget now includes the ability to list attachment (media) pages.</li>\n<li>We weren&#8217;t building CPT links correctly resulting in bad navigation, which is now fixed.</li>\n<li>We removed the form legend for default Tiled Gallery settings as it doesn&#8217;t relate.</li>\n<li>With shortcodes we now return early from processing them if no string is passed, as they are required.</li>\n</ul>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"https://wordpress.org/plugins/jetpack/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:33:\"\n		\n		\n		\n		\n				\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"WordPress Importer\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"https://wordpress.org/plugins/wordpress-importer/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 20 May 2010 18:48:47 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Uncategorized\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"https://wordpress.org/plugins-wp/wordpress-importer/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:101:\"Import posts, pages, comments, custom fields, categories, tags and more from a WordPress export file.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Brian Colinger\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:4618:\"<p><!--section=description--></p>\n<p>The WordPress Importer will import the following content from a WordPress export file:</p>\n<ul>\n<li>Posts, pages and other custom post types</li>\n<li>Comments</li>\n<li>Custom fields and post meta</li>\n<li>Categories, tags and terms from custom taxonomies</li>\n<li>Authors</li>\n</ul>\n<p>For further information and instructions please see the <a href=\"https://codex.wordpress.org/Importing_Content#WordPress\" rel=\"nofollow\">Codex page on Importing Content</a></p>\n<h3>Filters</h3>\n<p>The importer has a couple of filters to allow you to completely enable/block certain features:</p>\n<ul>\n<li><code>import_allow_create_users</code>: return false if you only want to allow mapping to existing users</li>\n<li><code>import_allow_fetch_attachments</code>: return false if you do not wish to allow importing and downloading of attachments</li>\n<li><code>import_attachment_size_limit</code>: return an integer value for the maximum file size in bytes to save (default is 0, which is unlimited)</li>\n</ul>\n<p>There are also a few actions available to hook into:</p>\n<ul>\n<li><code>import_start</code>: occurs after the export file has been uploaded and author import settings have been chosen</li>\n<li><code>import_end</code>: called after the last output from the importer</li>\n</ul>\n<p><!--section=faq--></p>\n<dl>\n<dt>Installation Instructions</dt>\n<dd>\n<p>The quickest method for installing the importer is:</p>\n<ol>\n<li>Visit Tools -&gt; Import in the WordPress dashboard</li>\n<li>Click on the WordPress link in the list of importers</li>\n<li>Click &#8220;Install Now&#8221;</li>\n<li>Finally click &#8220;Activate Plugin &amp; Run Importer&#8221;</li>\n</ol>\n<p>If you would prefer to do things manually then follow these instructions:</p>\n<ol>\n<li>Upload the <code>wordpress-importer</code> folder to the <code>/wp-content/plugins/</code> directory</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress</li>\n<li>Go to the Tools -&gt; Import screen, click on WordPress</li>\n</ol>\n</dd>\n<dt>Help! I&#8217;m getting out of memory errors or a blank screen.</dt>\n<dd>\n<p>If your exported file is very large, the import script may run into your host&#8217;s configured memory limit for PHP.</p>\n<p>A message like &#8220;Fatal error: Allowed memory size of 8388608 bytes exhausted&#8221; indicates that the script can&#8217;t successfully import your XML file under the current PHP memory limit. If you have access to the php.ini file, you can manually increase the limit; if you do not (your WordPress installation is hosted on a shared server, for instance), you might have to break your exported XML file into several smaller pieces and run the import script one at a time.</p>\n<p>For those with shared hosting, the best alternative may be to consult hosting support to determine the safest approach for running the import. A host may be willing to temporarily lift the memory limit and/or run the process directly from their end.</p>\n<p>&#8212; <a href=\"https://codex.wordpress.org/Importing_Content#Before_Importing\" rel=\"nofollow\">WordPress Codex: Importing Content</a></p>\n</dd>\n</dl>\n<p><!--section=changelog--></p>\n<h4>0.6.3</h4>\n<ul>\n<li>Add support for import term metadata.</li>\n<li>Fix bug that caused slashes to be stripped from imported content.</li>\n<li>Fix bug that caused characters to be stripped inside of CDATA in some cases.</li>\n<li>Fix PHP notices.</li>\n</ul>\n<h4>0.6.2</h4>\n<ul>\n<li>Add wp_import_existing_post filter. See: https://core.trac.wordpress.org/ticket/33721</li>\n</ul>\n<h4>0.6</h4>\n<ul>\n<li>Support for WXR 1.2 and multiple CDATA sections</li>\n<li>Post aren&#8217;t duplicates if their post_type&#8217;s are different</li>\n</ul>\n<h4>0.5.2</h4>\n<ul>\n<li>Double check that the uploaded export file exists before processing it. This prevents incorrect error messages when<br />\nan export file is uploaded to a server with bad permissions and WordPress 3.3 or 3.3.1 is being used.</li>\n</ul>\n<h4>0.5</h4>\n<ul>\n<li>Import comment meta (requires export from WordPress 3.2)</li>\n<li>Minor bugfixes and enhancements</li>\n</ul>\n<h4>0.4</h4>\n<ul>\n<li>Map comment user_id where possible</li>\n<li>Import attachments from <code>wp:attachment_url</code></li>\n<li>Upload attachments to correct directory</li>\n<li>Remap resized image URLs correctly</li>\n</ul>\n<h4>0.3</h4>\n<ul>\n<li>Use an XML Parser if possible</li>\n<li>Proper import support for nav menus</li>\n<li>&#8230; and much more, see <a href=\"https://core.trac.wordpress.org/ticket/15197\" rel=\"nofollow\">Trac ticket #15197</a></li>\n</ul>\n<h4>0.1</h4>\n<ul>\n<li>Initial release</li>\n</ul>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:39:\"\n		\n		\n		\n		\n		\n		\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"All in One SEO Pack\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"https://wordpress.org/plugins/all-in-one-seo-pack/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"https://wordpress.org/plugins/all-in-one-seo-pack/#respond\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 30 Mar 2007 19:30:03 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/plugins-wp/all-in-one-seo-pack/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:83:\"The original SEO plugin for WordPress, downloaded over 30,000,000 times since 2007.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"uberdose\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:4934:\"<p><!--section=description--></p>\n<p>Use <strong>All in One SEO Pack</strong> to optimize your WordPress site for SEO. It&#8217;s easy and works out of the box for beginners, and has advanced features and an API for developers.</p>\n<p><strong><a href=\"http://semperplugins.com/plugins/all-in-one-seo-pack-pro-version/?loc=readme_utpv\" rel=\"nofollow\">Upgrade to Pro Version</a></strong></p>\n<p><a href=\"http://semperplugins.com/support/?loc=readme_ps\" rel=\"nofollow\">Premium Support</a></p>\n<p>First created in 2007, see why AIOSEO is one of the all time most downloaded plugins for WordPress.</p>\n<ul>\n<li>XML Sitemap support &#8211; submit your sitemap to Google and Bing and improve your SEO</li>\n<li>Google AMP support (Accelerated Mobile Pages)</li>\n<li>Google Analytics support</li>\n<li>Support for SEO on Custom Post Types</li>\n<li>Advanced Canonical URLs</li>\n<li>Redirect attachment pages to parent post</li>\n<li>Automatically notifies search engines like Google and Bing about changes to your site</li>\n<li>Built-in API so other plugins/themes can access and extend functionality</li>\n<li>ONLY free plugin to provide SEO Integration for e-Commerce sites, including WooCommerce</li>\n<li>Nonce Security built into All in One SEO Pack</li>\n<li>Automatically optimizes your <strong>titles</strong> for Google and other search engines</li>\n<li>Generates <strong>META tags automatically</strong></li>\n<li>Avoids the typical duplicate content found on WordPress blogs</li>\n<li>For beginners, you don&#8217;t even have to look at the options, it works out-of-the-box. Just install.</li>\n<li>For advanced users, you can fine-tune everything to optimize your SEO</li>\n<li>You can override any title and set any META description and any META keywords you want.</li>\n<li>Compatibility with many other plugins</li>\n<li>Translated into 57 languages</li>\n<li>PHP 7 100% Compatible</li>\n</ul>\n<p>Follow me on Twitter to keep up with the latest updates <a href=\"http://twitter.com/michaeltorbert/\" rel=\"nofollow\">Michael<br />\nTorbert</a></p>\n<p><iframe class=\'youtube-player\' type=\'text/html\' width=\'640\' height=\'390\' src=\'https://www.youtube.com/embed/46MR4FboMaA?version=3&#038;rel=1&#038;fs=1&#038;autohide=2&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;wmode=transparent\' allowfullscreen=\'true\' style=\'border:0;\'></iframe></p>\n<h4>Tags</h4>\n<p>seo, SEO, All in One, google, meta, meta description, search engine optimization, xml sitemap, xml sitemaps, google sitemap, sitemap, sitemaps, robots meta, rss, rss footer, yahoo, bing, widget, Post, plugin, admin, posts, shortcode, sidebar, twitter, page, images, comments, image, news sitemaps, XML News Sitemaps, WordPress SEO, multisite, canonical, nofollow, noindex, keywords, meta keywords, description, webmaster tools, google webmaster tools, seo pack, schema.org, search engines, custom post types, custom taxonomies, canonical</p>\n<p><!--section=faq--></p>\n<p>Please visit our complete <strong><a href=\"http://semperplugins.com/documentation/\" rel=\"nofollow\">Documentation</a></strong> before requesting support for SEO from the<br />\n<strong><a href=\"http://semperplugins.com/support/\" rel=\"nofollow\">All in One SEO Pack Support Forum</a></strong></p>\n<p><a href=\"http://semperfiwebdesign.com/documentation/all-in-one-seo-pack/translations-for-all-in-one-seo-pack/\" rel=\"nofollow\">Translations</a></p>\n<dl>\n<dt>General Settings</dt>\n<dd>\n<p><iframe class=\'youtube-player\' type=\'text/html\' width=\'640\' height=\'390\' src=\'https://www.youtube.com/embed/uGt6CVbA5bI?version=3&#038;rel=1&#038;fs=1&#038;autohide=2&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;wmode=transparent\' allowfullscreen=\'true\' style=\'border:0;\'></iframe></p>\n</dd>\n<dt>XML Sitemaps</dt>\n<dd>\n<p><iframe class=\'youtube-player\' type=\'text/html\' width=\'640\' height=\'390\' src=\'https://www.youtube.com/embed/zvNU92Low8A?version=3&#038;rel=1&#038;fs=1&#038;autohide=2&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;wmode=transparent\' allowfullscreen=\'true\' style=\'border:0;\'></iframe></p>\n</dd>\n<dt>Social Meta</dt>\n<dd>\n<p><iframe class=\'youtube-player\' type=\'text/html\' width=\'640\' height=\'390\' src=\'https://www.youtube.com/embed/Dfe49FiiAog?version=3&#038;rel=1&#038;fs=1&#038;autohide=2&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;wmode=transparent\' allowfullscreen=\'true\' style=\'border:0;\'></iframe></p>\n</dd>\n<dt>Performance</dt>\n<dd>\n<p><iframe class=\'youtube-player\' type=\'text/html\' width=\'640\' height=\'390\' src=\'https://www.youtube.com/embed/A0VKinM5s00?version=3&#038;rel=1&#038;fs=1&#038;autohide=2&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;wmode=transparent\' allowfullscreen=\'true\' style=\'border:0;\'></iframe></p>\n</dd>\n</dl>\n<p><!--section=changelog--></p>\n<p>All in One SEO Pack <a href=\"http://semperfiwebdesign.com/documentation/all-in-one-seo-pack/all-in-one-seo-pack-release-history/\" rel=\"nofollow\">Changelog</a></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"https://wordpress.org/plugins/all-in-one-seo-pack/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:39:\"\n		\n		\n		\n		\n		\n		\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"WooCommerce\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"https://wordpress.org/plugins/woocommerce/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"https://wordpress.org/plugins/woocommerce/#respond\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 27 Sep 2011 15:32:48 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:45:\"https://wordpress.org/plugins-wp/woocommerce/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"WooCommerce is a powerful, extendable eCommerce plugin that helps you sell anything. Beautifully.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"WooThemes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:25733:\"<p><!--section=description--></p>\n<p>WooCommerce is a free eCommerce plugin that allows you to sell anything, beautifully. Built to integrate seamlessly with WordPress, WooCommerce is the world’s favorite eCommerce solution that gives both store owners and developers complete control.</p>\n<p>With endless flexibility and access to hundreds of free and premium WordPress extensions, WooCommerce now powers 30% of all online stores &#8212; more than any other platform.</p>\n<iframe class=\'youtube-player\' type=\'text/html\' width=\'640\' height=\'390\' src=\'https://www.youtube.com/embed/1KahlicghaE?version=3&#038;rel=1&#038;fs=1&#038;autohide=2&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;wmode=transparent\' allowfullscreen=\'true\' style=\'border:0;\'></iframe>\n<h4>Sell anything, anywhere</h4>\n<p>With WooCommerce, you can sell both physical and digital goods in all shapes and sizes, offer product variations, multiple configurations, and instant downloads to shoppers, and even sell affiliate goods from online marketplaces.</p>\n<p>With premium extensions, you can offer bookings, memberships, and recurring subscriptions. Perhaps you’d like to sell monthly subscriptions for physical goods, or offer your members a discount on digital downloads? It’s all possible.</p>\n<h4>Ship wherever you like</h4>\n<p>Offer free shipping, flat rate shipping, or make real-time calculations. Limit your shipments to specific countries, or open your store up to the world. Shipping is highly configurable, and WooCommerce even supports drop shipping.</p>\n<h4>Extensive payment options</h4>\n<p>WooCommerce comes bundled with the ability to accept major credit cards, PayPal, BACS (bank transfers), and cash on delivery. Need additional options? More than 140 region-specific gateways integrate with WooCommerce, including popular choices like Stripe, Authorize.Net, and Amazon Payments.</p>\n<h4>You control it all &#8212; forever</h4>\n<p>WooCommerce gives you complete control of your store, from taxes to stock levels to customer accounts. Add and remove extensions, change your design, and switch settings as you please. It’s all under your control.</p>\n<p>One of the biggest risks of using a hosted eCommerce platform is what happens to your store if the provider closes up shop. With WooCommerce, you have complete control, so there’s never any reason to worry. Your data belongs to you &#8212; and it’s kept secure, thanks to regular audits by industry leaders.</p>\n<h4>Define your style with Storefront</h4>\n<p><a href=\"https://wordpress.org/themes/storefront/\" rel=\"nofollow\">Storefront</a> is a free WordPress theme available to any WooCommerce store. Along with deep WooCommerce integration, Storefront prioritizes speed and uptime while eliminating theme and plugin conflicts during major updates.</p>\n<p>Define your style even further by customizing Storefront to your liking or choosing from one of our several <a href=\"https://woocommerce.com/product-category/themes/storefront-child-theme-themes/\" rel=\"nofollow\">Storefront child themes</a>. It’s all up to you, and all open source.</p>\n<h4>Built with developers in mind</h4>\n<p>Extendable, adaptable, and open source &#8212; WooCommerce was created with developers in mind. With its strong, robust framework, you can scale your client’s store all the way from basic to high-end (infinity and beyond).</p>\n<p>Built with a REST API, WooCommerce can integrate with virtually any service. Your store’s data can be accessed anywhere, anytime, 100% securely. WooCommerce allows developers to easily create, modify, and grow a store that meets their specifications.</p>\n<p>No matter the size of the store you want to build, WooCommerce will scale to meet your requirements. With a growing collection of more than 300 extensions, you can enhance each store’s features to meet your client’s unique needs &#8212; or even create your own solution.</p>\n<p>If security is a concern, rest easy. WooCommerce is audited by a dedicated team of developers working around the clock to identify and patch any and all discovered bugs.</p>\n<p>We also support WooCommerce and all its extensions with comprehensive, easily-accessible documentation. With our docs, you’ll learn how to create the exact site your client needs.</p>\n<h4>Extensions galore</h4>\n<p>WordPress.org is home to some amazing extensions for WooCommerce, including:</p>\n<ul>\n<li><a href=\"https://wordpress.org/plugins/woocommerce-google-analytics-integration/\">Google Analytics</a></li>\n<li><a href=\"https://wordpress.org/plugins/woocommerce-delivery-notes/\">Delivery Notes</a></li>\n<li><a href=\"https://wordpress.org/plugins/woocommerce-pdf-invoices-packing-slips/\">PDF Invoices and Packing Slips</a></li>\n<li><a href=\"https://wordpress.org/plugins/affiliates-woocommerce-light/\">Affiliates Integration Light</a></li>\n<li><a href=\"https://wordpress.org/plugins/woocommerce-new-product-badge/\">New Product Badges</a></li>\n</ul>\n<p>Keen to see them all? Search WordPress.org for ‘WooCommerce’ to dive in.</p>\n<p>If you’re looking for something endorsed and maintained by the developers who built WooCommerce, there are a plethora of premium eCommerce extensions, the most popular of which include:</p>\n<ul>\n<li><a href=\"https://woocommerce.com/products/woocommerce-subscriptions/\" rel=\"nofollow\">WooCommerce Subscriptions</a></li>\n<li><a href=\"https://woocommerce.com/products/woocommerce-memberships/\" rel=\"nofollow\">WooCommerce Memberships</a></li>\n<li><a href=\"https://woocommerce.com/products/woocommerce-bookings/\" rel=\"nofollow\">WooCommerce Bookings</a></li>\n<li><a href=\"https://woocommerce.com/products/dynamic-pricing/\" rel=\"nofollow\">Dynamic Pricing</a></li>\n<li><a href=\"https://woocommerce.com/products/table-rate-shipping/\" rel=\"nofollow\">Table Rate Shipping</a></li>\n<li><a href=\"https://woocommerce.com/products/product-csv-import-suite/\" rel=\"nofollow\">Product CSV Import Suite</a></li>\n</ul>\n<p>And there’s plenty more where they came from. Visit our <a href=\"https://woocommerce.com/product-category/woocommerce-extensions/\" rel=\"nofollow\">extensions page</a> to find out everything you’re capable of and all that&#8217;s possible with premium WooCommerce extensions.</p>\n<h4>Join our growing community</h4>\n<p>When you download WooCommerce, you join a community of more than a million store owners, developers, and WordPress enthusiasts. We’re one of the fastest-growing open source communities online, and whether you’re a n00b or a Ninja, we’d love to have you!</p>\n<p>If you’re interested in contributing to WooCommerce we’ve got more than 350 contributors, and there’s always room for more. Head over to the <a href=\"https://github.com/woocommerce/woocommerce\" rel=\"nofollow\">WooCommerce GitHub Repository</a> to find out how you can pitch in.</p>\n<p>Want to add a new language to WooCommerce? Swell! You can contribute via <a href=\"https://translate.wordpress.org/projects/wp-plugins/woocommerce\" rel=\"nofollow\">translate.wordpress.org</a>.</p>\n<p>And, finally, consider joining or spearheading a WooCommerce Meetup locally, more about those <a href=\"https://woocommerce.com/woocommerce/meetups/\" rel=\"nofollow\">here</a>.</p>\n<p><!--section=faq--></p>\n<dl>\n<dt>Installation Instructions</dt>\n<dd>\n<h4>Minimum Requirements</h4>\n<ul>\n<li>PHP version 5.2.4 or greater (PHP 5.6 or greater is recommended)</li>\n<li>MySQL version 5.0 or greater (MySQL 5.6 or greater is recommended)</li>\n<li>Some payment gateways require fsockopen support (for IPN access)</li>\n<li>WooCommerce 2.5 requires WordPress 4.1+</li>\n<li>WooCommerce 2.6 requires WordPress 4.4+</li>\n</ul>\n<p>Visit the <a href=\"https://docs.woocommerce.com/document/server-requirements/\" rel=\"nofollow\">WooCommerce server requirements documentation</a> for a detailed list of server requirements.</p>\n<h4>Automatic installation</h4>\n<p>Automatic installation is the easiest option as WordPress handles the file transfers itself and you don’t need to leave your web browser. To do an automatic install of WooCommerce, log in to your WordPress dashboard, navigate to the Plugins menu and click Add New.</p>\n<p>In the search field type “WooCommerce” and click Search Plugins. Once you’ve found our eCommerce plugin you can view details about it such as the point release, rating and description. Most importantly of course, you can install it by simply clicking “Install Now”.</p>\n<h4>Manual installation</h4>\n<p>The manual installation method involves downloading our eCommerce plugin and uploading it to your webserver via your favourite FTP application. The WordPress codex contains <a href=\"https://codex.wordpress.org/Managing_Plugins#Manual_Plugin_Installation\" rel=\"nofollow\">instructions on how to do this here</a>.</p>\n<h4>Updating</h4>\n<p>Automatic updates should work like a charm; as always though, ensure you backup your site just in case.</p>\n<p>If on the off-chance you do encounter issues with the shop/category pages after an update you simply need to flush the permalinks by going to WordPress &gt; Settings &gt; Permalinks and hitting &#8216;save&#8217;. That should return things to normal.</p>\n<h4>Dummy data</h4>\n<p>WooCommerce comes with some dummy data you can use to see how products look; either import dummy_data.xml via the <a href=\"https://wordpress.org/plugins/wordpress-importer/\">WordPress importer</a> or use our <a href=\"https://woocommerce.com/products/product-csv-import-suite/\" rel=\"nofollow\">CSV Import Suite plugin</a> to import dummy_data.csv and dummy_data_variations.csv.</p>\n</dd>\n<dt>Where can I find WooCommerce documentation and user guides?</dt>\n<dd>\n<p>For help setting up and configuring WooCommerce please refer to our <a href=\"https://docs.woocommerce.com/documentation/plugins/woocommerce/getting-started/\" rel=\"nofollow\">user guide</a></p>\n<p>For extending or theming WooCommerce, see our <a href=\"https://docs.woocommerce.com/documentation/plugins/woocommerce/woocommerce-codex/\" rel=\"nofollow\">codex</a>.</p>\n</dd>\n<dt>Where can I get support or talk to other users?</dt>\n<dd>\n<p>If you get stuck, you can ask for help in the <a href=\"https://wordpress.org/support/plugin/woocommerce\" rel=\"nofollow\">WooCommerce Plugin Forum</a>.</p>\n<p>For help with premium extensions from WooThemes, use <a href=\"https://support.woothemes.com/\" rel=\"nofollow\">our helpdesk</a>.</p>\n</dd>\n<dt>Will WooCommerce work with my theme?</dt>\n<dd>\n<p>Yes; WooCommerce will work with any theme, but may require some styling to make it match nicely. Please see our <a href=\"https://docs.woocommerce.com/documentation/plugins/woocommerce/woocommerce-codex/\" rel=\"nofollow\">codex</a> for help. If you&#8217;re looking for a theme with built in WooCommerce integration we recommend <a href=\"https://woocommerce.com/storefront/\" rel=\"nofollow\">Storefront</a>.</p>\n</dd>\n<dt>Where can I request new features, eCommerce themes and extensions?</dt>\n<dd>\n<p>You can vote on and request new features and extensions in our <a href=\"http://ideas.woothemes.com/forums/133476-woocommerce\" rel=\"nofollow\">WooIdeas board</a></p>\n</dd>\n<dt>Where can I report bugs or contribute to the project?</dt>\n<dd>\n<p>Bugs can be reported either in our support forum or preferably on the <a href=\"https://github.com/woocommerce/woocommerce/issues\" rel=\"nofollow\">WooCommerce GitHub repository</a>.</p>\n</dd>\n<dt>Where can I find the REST API documentation?</dt>\n<dd>\n<p>You can find the documentation of our REST API on the <a href=\"https://woocommerce.github.io/woocommerce-rest-api-docs/\" rel=\"nofollow\">WooCommerce REST API Docs</a>.</p>\n</dd>\n<dt>WooCommerce is awesome! Can I contribute?</dt>\n<dd>\n<p>Yes you can! Join in on our <a href=\"http://github.com/woocommerce/woocommerce/\" rel=\"nofollow\">GitHub repository</a> <img src=\"https://s.w.org/images/core/emoji/2.2.1/72x72/1f642.png\" alt=\"','no'),(24051,'_site_transient_timeout_browser_a7e3bf3cf3d3f0ce159b37e99d7180f1','1492399474','yes'),(24052,'_site_transient_browser_a7e3bf3cf3d3f0ce159b37e99d7180f1','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"45.0.2454.101\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(8414,'_site_transient_timeout_browser_fdd63ae7feaac497a6883e417824e5e1','1445424634','yes'),(8415,'_site_transient_browser_fdd63ae7feaac497a6883e417824e5e1','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"45.0.2454.101\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(24172,'_transient_timeout_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca','1492136411','no'),(24173,'_transient_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:49:\"\n	\n	\n	\n	\n	\n	\n	\n	\n	\n	\n		\n		\n		\n		\n		\n		\n		\n		\n		\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"https://wordpress.org/news\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:13:\"lastBuildDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 10 Mar 2017 18:14:55 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"https://wordpress.org/?v=4.8-alpha-40416\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:10:{i:0;a:6:{s:4:\"data\";s:39:\"\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"WordPress 4.7.3 Security and Maintenance Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"https://wordpress.org/news/2017/03/wordpress-4-7-3-security-and-maintenance-release/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 06 Mar 2017 17:53:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.7\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=4696\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:396:\"WordPress 4.7.3 is now available. This is a security release for all previous versions and we strongly encourage you to update your sites immediately. WordPress versions 4.7.2 and earlier are affected by six security issues: Cross-site scripting (XSS) via media file metadata.  Reported by Chris Andrè Dale, Yorick Koster, and Simon P. Briggs. Control characters can trick redirect [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"James Nylen\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:6191:\"<p>WordPress 4.7.3 is now available. This is a <strong>security release</strong> for all previous versions and we strongly encourage you to update your sites immediately.</p>\n<p>WordPress versions 4.7.2 and earlier are affected by six security issues:</p>\n<ol>\n<li>Cross-site scripting (XSS) via media file metadata.  Reported by <a href=\"https://www.securesolutions.no/\">Chris Andrè Dale</a>, <a href=\"https://twitter.com/yorickkoster\">Yorick Koster</a>, and Simon P. Briggs.</li>\n<li>Control characters can trick redirect URL validation.  Reported by <a href=\"http://www.danielchatfield.com/\">Daniel Chatfield</a>.</li>\n<li>Unintended files can be deleted by administrators using the plugin deletion functionality.  Reported by <a href=\"https://hackerone.com/triginc\">TrigInc</a> and <a href=\"http://b.360.cn/\">xuliang</a>.</li>\n<li>Cross-site scripting (XSS) via video URL in YouTube embeds.  Reported by <a href=\"https://twitter.com/marcs0h\">Marc Montpas</a>.</li>\n<li>Cross-site scripting (XSS) via taxonomy term names.  Reported by <a href=\"https://profiles.wordpress.org/deltamgm2\">Delta</a>.</li>\n<li>Cross-site request forgery (CSRF) in Press This leading to excessive use of server resources.  Reported by Sipke Mellema.</li>\n</ol>\n<p>Thank you to the reporters for practicing <a href=\"https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/\">responsible disclosure</a>.</p>\n<p>In addition to the security issues above, WordPress 4.7.3 contains 39 maintenance fixes to the 4.7 release series. For more information, see the <a href=\"https://codex.wordpress.org/Version_4.7.3\">release notes</a> or consult the <a href=\"https://core.trac.wordpress.org/query?status=closed&amp;milestone=4.7.3&amp;group=component&amp;col=id&amp;col=summary&amp;col=component&amp;col=status&amp;col=owner&amp;col=type&amp;col=priority&amp;col=keywords&amp;order=priority\">list of changes</a>.</p>\n<p><a href=\"https://wordpress.org/download/\">Download WordPress 4.7.3</a> or venture over to Dashboard → Updates and simply click “Update Now.” Sites that support automatic background updates are already beginning to update to WordPress 4.7.3.</p>\n<p>Thanks to everyone who contributed to 4.7.3: <a href=\"https://profiles.wordpress.org/aaroncampbell/\">Aaron D. Campbell</a>, <a href=\"https://profiles.wordpress.org/adamsilverstein/\">Adam Silverstein</a>, <a href=\"https://profiles.wordpress.org/xknown/\">Alex Concha</a>, <a href=\"https://profiles.wordpress.org/afercia/\">Andrea Fercia</a>, <a href=\"https://profiles.wordpress.org/azaozz/\">Andrew Ozz</a>, <a href=\"https://profiles.wordpress.org/asalce/\">asalce</a>, <a href=\"https://profiles.wordpress.org/blobfolio/\">blobfolio</a>, <a href=\"https://profiles.wordpress.org/gitlost/\">bonger</a>, <a href=\"https://profiles.wordpress.org/boonebgorges/\">Boone Gorges</a>, <a href=\"https://profiles.wordpress.org/bor0/\">Boro Sitnikovski</a>, <a href=\"https://profiles.wordpress.org/bradyvercher/\">Brady Vercher</a>, <a href=\"https://profiles.wordpress.org/drrobotnik/\">Brandon Lavigne</a>, <a href=\"https://profiles.wordpress.org/bhargavbhandari90/\">Bunty</a>, <a href=\"https://profiles.wordpress.org/ccprog/\">ccprog</a>, <a href=\"https://profiles.wordpress.org/ketuchetan/\">chetansatasiya</a>, <a href=\"https://profiles.wordpress.org/davidakennedy/\">David A. Kennedy</a>, <a href=\"https://profiles.wordpress.org/dlh/\">David Herrera</a>, <a href=\"https://profiles.wordpress.org/dhanendran/\">Dhanendran</a>, <a href=\"https://profiles.wordpress.org/dd32/\">Dion Hulse</a>, <a href=\"https://profiles.wordpress.org/ocean90/\">Dominik Schilling (ocean90)</a>, <a href=\"https://profiles.wordpress.org/drivingralle/\">Drivingralle</a>, <a href=\"https://profiles.wordpress.org/iseulde/\">Ella Van Dorpe</a>, <a href=\"https://profiles.wordpress.org/pento/\">Gary Pendergast</a>, <a href=\"https://profiles.wordpress.org/iandunn/\">Ian Dunn</a>, <a href=\"https://profiles.wordpress.org/ipstenu/\">Ipstenu (Mika Epstein)</a>, <a href=\"https://profiles.wordpress.org/jnylen0/\">James Nylen</a>, <a href=\"https://profiles.wordpress.org/jazbek/\">jazbek</a>, <a href=\"https://profiles.wordpress.org/jeremyfelt/\">Jeremy Felt</a>, <a href=\"https://profiles.wordpress.org/jpry/\">Jeremy Pry</a>, <a href=\"https://profiles.wordpress.org/joehoyle/\">Joe Hoyle</a>, <a href=\"https://profiles.wordpress.org/joemcgill/\">Joe McGill</a>, <a href=\"https://profiles.wordpress.org/johnbillion/\">John Blackbourn</a>, <a href=\"https://profiles.wordpress.org/johnjamesjacoby/\">John James Jacoby</a>, <a href=\"https://profiles.wordpress.org/desrosj/\">Jonathan Desrosiers</a>, <a href=\"https://profiles.wordpress.org/ryelle/\">Kelly Dwan</a>, <a href=\"https://profiles.wordpress.org/markoheijnen/\">Marko Heijnen</a>, <a href=\"https://profiles.wordpress.org/matheusgimenez/\">MatheusGimenez</a>, <a href=\"https://profiles.wordpress.org/mnelson4/\">Mike Nelson</a>, <a href=\"https://profiles.wordpress.org/mikeschroder/\">Mike Schroder</a>, <a href=\"https://profiles.wordpress.org/codegeass/\">Muhammet Arslan</a>, <a href=\"https://profiles.wordpress.org/celloexpressions/\">Nick Halsey</a>, <a href=\"https://profiles.wordpress.org/swissspidy/\">Pascal Birchler</a>, <a href=\"https://profiles.wordpress.org/pbearne/\">Paul Bearne</a>, <a href=\"https://profiles.wordpress.org/pavelevap/\">pavelevap</a>, <a href=\"https://profiles.wordpress.org/peterwilsoncc/\">Peter Wilson</a>, <a href=\"https://profiles.wordpress.org/rachelbaker/\">Rachel Baker</a>, <a href=\"https://profiles.wordpress.org/reldev/\">reldev</a>, <a href=\"https://profiles.wordpress.org/sanchothefat/\">Robert O&#8217;Rourke</a>, <a href=\"https://profiles.wordpress.org/welcher/\">Ryan Welcher</a>, <a href=\"https://profiles.wordpress.org/sanketparmar/\">Sanket Parmar</a>, <a href=\"https://profiles.wordpress.org/seanchayes/\">Sean Hayes</a>, <a href=\"https://profiles.wordpress.org/sergeybiryukov/\">Sergey Biryukov</a>, <a href=\"https://profiles.wordpress.org/netweb/\">Stephen Edgar</a>, <a href=\"https://profiles.wordpress.org/triplejumper12/\">triplejumper12</a>, <a href=\"https://profiles.wordpress.org/westonruter/\">Weston Ruter</a>, and <a href=\"https://profiles.wordpress.org/wpfo/\">wpfo</a>.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"4696\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:39:\"\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"WordPress 4.7.2 Security Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"https://wordpress.org/news/2017/01/wordpress-4-7-2-security-release/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 26 Jan 2017 19:34:02 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.7\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=4676\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:357:\"WordPress 4.7.2 is now available. This is a security release for all previous versions and we strongly encourage you to update your sites immediately. WordPress versions 4.7.1 and earlier are affected by three security issues: The user interface for assigning taxonomy terms in Press This is shown to users who do not have permissions to use it. [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Aaron D. Campbell\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:2142:\"<p>WordPress 4.7.2 is now available. This is a <strong>security release</strong> for all previous versions and we strongly encourage you to update your sites immediately.</p>\n<p>WordPress versions 4.7.1 and earlier are affected by three security issues:</p>\n<ol>\n<li>The user interface for assigning taxonomy terms in Press This is shown to users who do not have permissions to use it. Reported by David Herrera of <a href=\"https://www.alleyinteractive.com/\">Alley Interactive</a>.</li>\n<li><code>WP_Query</code> is vulnerable to a SQL injection (SQLi) when passing unsafe data. WordPress core is not directly vulnerable to this issue, but we&#8217;ve added hardening to prevent plugins and themes from accidentally causing a vulnerability. Reported by <a href=\"https://github.com/mjangda\">Mo Jangda</a> (batmoo).</li>\n<li>A cross-site scripting (XSS) vulnerability was discovered in the posts list table. Reported by <a href=\"https://iandunn.name/\">Ian Dunn</a> of the WordPress Security Team.</li>\n<li>An unauthenticated privilege escalation vulnerability was discovered in a REST API endpoint. Reported by <a href=\"https://twitter.com/MarcS0h\">Marc-Alexandre Montpas</a> of Sucuri Security. *</li>\n</ol>\n<p>Thank you to the reporters of these issues for practicing <a href=\"https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/\">responsible disclosure</a>.</p>\n<p><a href=\"https://wordpress.org/download/\">Download WordPress 4.7.2</a> or venture over to Dashboard → Updates and simply click “Update Now.” Sites that support automatic background updates are already beginning to update to WordPress 4.7.2.</p>\n<p>Thanks to everyone who contributed to 4.7.2.</p>\n<p>* Update: An additional serious vulnerability was fixed in this release and public disclosure was delayed. For more information on this vulnerability, additional mitigation steps taken, and an explanation for why disclosure was delayed, please read <a href=\"https://make.wordpress.org/core/2017/02/01/disclosure-of-additional-security-fix-in-wordpress-4-7-2/\">Disclosure of Additional Security Fix in WordPress 4.7.2</a>.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"4676\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:39:\"\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"WordPress 4.7.1 Security and Maintenance Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"https://wordpress.org/news/2017/01/wordpress-4-7-1-security-and-maintenance-release/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 11 Jan 2017 03:53:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.7\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=4650\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:375:\"WordPress 4.7 has been downloaded over 10 million times since its release on December 6, 2016 and we are pleased to announce the immediate availability of WordPress 4.7.1. This is a security release for all previous versions and we strongly encourage you to update your sites immediately. WordPress versions 4.7 and earlier are affected by eight security issues: [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Aaron D. Campbell\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:6520:\"<p>WordPress 4.7 has been <a href=\"https://wordpress.org/download/counter/\">downloaded over 10 million times</a> since its release on December 6, 2016 and we are pleased to announce the immediate availability of WordPress 4.7.1. This is a <strong>security release</strong> for all previous versions and we strongly encourage you to update your sites immediately.</p>\n<p>WordPress versions 4.7 and earlier are affected by eight security issues:</p>\n<ol>\n<li>Remote code execution (RCE) in PHPMailer &#8211; <em>No specific issue appears to affect WordPress</em> or any of the major plugins we investigated but, out of an abundance of caution, we updated PHPMailer in this release. This issue was fixed in PHPMailer thanks to <a href=\"https://legalhackers.com/\">Dawid Golunski</a> and <a href=\"https://twitter.com/Zenexer\">Paul Buonopane</a>.</li>\n<li>The REST API exposed user data for all users who had authored a post of a public post type. WordPress 4.7.1 limits this to only post types which have specified that they should be shown within the REST API. Reported by <a href=\"https://poststatus.com/\">Krogsgard</a> and <a href=\"https://ithemes.com/\">Chris Jean</a>.</li>\n<li>Cross-site scripting (XSS) via the plugin name or version header on <code>update-core.php</code>. Reported by <a href=\"https://dominikschilling.de/\">Dominik Schilling</a> of the WordPress Security Team.</li>\n<li>Cross-site request forgery (CSRF) bypass via uploading a Flash file. Reported by <a href=\"https://twitter.com/Abdulahhusam\">Abdullah Hussam</a>.</li>\n<li>Cross-site scripting (XSS) via theme name fallback. Reported by <a href=\"https://pentest.blog/\">Mehmet Ince</a>.</li>\n<li>Post via email checks <code>mail.example.com</code> if default settings aren&#8217;t changed. Reported by John Blackbourn of the WordPress Security Team.</li>\n<li>A cross-site request forgery (CSRF) was discovered in the accessibility mode of widget editing. Reported by <a href=\"https://dk.linkedin.com/in/ronni-skansing-36143b65\">Ronnie Skansing</a>.</li>\n<li>Weak cryptographic security for multisite activation key. Reported by <a href=\"https://itsjack.cc/\">Jack</a>.</li>\n</ol>\n<p>Thank you to the reporters for practicing <a href=\"https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/\">responsible disclosure</a>.</p>\n<p>In addition to the security issues above, WordPress 4.7.1 fixes 62 bugs from 4.7. For more information, see the <a href=\"https://codex.wordpress.org/Version_4.7.1\">release notes</a> or consult the <a href=\"https://core.trac.wordpress.org/query?milestone=4.7.1\">list of changes</a>.</p>\n<p><a href=\"https://wordpress.org/download/\">Download WordPress 4.7.1</a> or venture over to Dashboard → Updates and simply click “Update Now.” Sites that support automatic background updates are already beginning to update to WordPress 4.7.1.</p>\n<p>Thanks to everyone who contributed to 4.7.1: <a href=\"https://profiles.wordpress.org/aaroncampbell/\">Aaron D. Campbell</a>, <a href=\"https://profiles.wordpress.org/jorbin/\">Aaron Jorbin</a>, <a href=\"https://profiles.wordpress.org/adamsilverstein/\">Adam Silverstein</a>, <a href=\"https://profiles.wordpress.org/afercia/\">Andrea Fercia</a>, <a href=\"https://profiles.wordpress.org/azaozz/\">Andrew Ozz</a>, <a href=\"https://profiles.wordpress.org/gitlost/\">bonger</a>, <a href=\"https://profiles.wordpress.org/boonebgorges/\">Boone Gorges</a>, <a href=\"https://profiles.wordpress.org/chandrapatel/\">Chandra Patel</a>, <a href=\"https://profiles.wordpress.org/christian1012/\">Christian Chung</a>, <a href=\"https://profiles.wordpress.org/dlh/\">David Herrera</a>, <a href=\"https://profiles.wordpress.org/dshanske/\">David Shanske</a>, <a href=\"https://profiles.wordpress.org/dd32/\">Dion Hulse</a>, <a href=\"https://profiles.wordpress.org/ocean90/\">Dominik Schilling (ocean90)</a>, <a href=\"https://profiles.wordpress.org/dreamon11/\">DreamOn11</a>, <a href=\"https://profiles.wordpress.org/chopinbach/\">Edwin Cromley</a>, <a href=\"https://profiles.wordpress.org/iseulde/\">Ella van Dorpe</a>, <a href=\"https://profiles.wordpress.org/pento/\">Gary Pendergast</a>, <a href=\"https://profiles.wordpress.org/hristo-sg/\">Hristo Pandjarov</a>, <a href=\"https://profiles.wordpress.org/jnylen0/\">James Nylen</a>, <a href=\"https://profiles.wordpress.org/jblz/\">Jeff Bowen</a>, <a href=\"https://profiles.wordpress.org/jeremyfelt/\">Jeremy Felt</a>, <a href=\"https://profiles.wordpress.org/jpry/\">Jeremy Pry</a>, <a href=\"https://profiles.wordpress.org/joehoyle/\">Joe Hoyle</a>, <a href=\"https://profiles.wordpress.org/joemcgill/\">Joe McGill</a>, <a href=\"https://profiles.wordpress.org/johnbillion/\">John Blackbourn</a>, <a href=\"https://profiles.wordpress.org/kkoppenhaver/\">Keanan Koppenhaver</a>, <a href=\"https://profiles.wordpress.org/obenland/\">Konstantin Obenland</a>, <a href=\"https://profiles.wordpress.org/laurelfulford/\">laurelfulford</a>, <a href=\"https://profiles.wordpress.org/tyxla/\">Marin Atanasov</a>, <a href=\"https://profiles.wordpress.org/mattyrob/\">mattyrob</a>, <a href=\"https://profiles.wordpress.org/monikarao/\">monikarao</a>, <a href=\"https://profiles.wordpress.org/natereist/\">Nate Reist</a>, <a href=\"https://profiles.wordpress.org/celloexpressions/\">Nick Halsey</a>, <a href=\"https://profiles.wordpress.org/nikschavan/\">Nikhil Chavan</a>, <a href=\"https://profiles.wordpress.org/nullvariable/\">nullvariable</a>, <a href=\"https://profiles.wordpress.org/sirbrillig/\">Payton Swick</a>, <a href=\"https://profiles.wordpress.org/peterwilsoncc/\">Peter Wilson</a>, <a href=\"https://profiles.wordpress.org/presskopp/\">Presskopp</a>, <a href=\"https://profiles.wordpress.org/rachelbaker/\">Rachel Baker</a>, <a href=\"https://profiles.wordpress.org/rmccue/\">Ryan McCue</a>, <a href=\"https://profiles.wordpress.org/sanketparmar/\">Sanket Parmar</a>, <a href=\"https://profiles.wordpress.org/sebastianpisula/\">Sebastian Pisula</a>, <a href=\"https://profiles.wordpress.org/sfpt/\">sfpt</a>, <a href=\"https://profiles.wordpress.org/shazahm1hotmailcom/\">shazahm1</a>, <a href=\"https://profiles.wordpress.org/sstoqnov/\">Stanimir Stoyanov</a>, <a href=\"https://profiles.wordpress.org/stevenkword/\">Steven Word</a>, <a href=\"https://profiles.wordpress.org/szaqal21/\">szaqal21</a>, <a href=\"https://profiles.wordpress.org/timph/\">timph</a>, <a href=\"https://profiles.wordpress.org/voldemortensen/\">voldemortensen</a>, <a href=\"https://profiles.wordpress.org/vortfu/\">vortfu</a>, and <a href=\"https://profiles.wordpress.org/westonruter/\">Weston Ruter</a>.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"4650\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n				\n\n		\n		\n				\n	\n\n\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"WordPress 4.7 “Vaughan”\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"https://wordpress.org/news/2016/12/vaughan/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 06 Dec 2016 19:27:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=4596\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:240:\"Version 4.7 of WordPress, named “Vaughan” in honor of legendary jazz vocalist Sarah \"Sassy\" Vaughan, is available for download or update in your WordPress dashboard. New features in 4.7 help you get your site set up the way you want it.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"enclosure\";a:3:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:3:\"url\";s:60:\"https://wordpress.org/news/files/2016/12/starter-content.mp4\";s:6:\"length\";s:7:\"3736020\";s:4:\"type\";s:9:\"video/mp4\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:3:\"url\";s:59:\"https://wordpress.org/news/files/2016/12/edit-shortcuts.mp4\";s:6:\"length\";s:7:\"1127483\";s:4:\"type\";s:9:\"video/mp4\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:3:\"url\";s:58:\"https://wordpress.org/news/files/2016/12/video-headers.mp4\";s:6:\"length\";s:7:\"1549803\";s:4:\"type\";s:9:\"video/mp4\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Helen Hou-Sandi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:45506:\"<p>Version 4.7 of WordPress, named “Vaughan” in honor of legendary jazz vocalist Sarah &#8220;Sassy&#8221; Vaughan, is available for download or update in your WordPress dashboard. New features in 4.7 help you get your site set up the way you want it.</p>\n<div id=\"v-AHz0Ca46-1\" class=\"video-player\"><video id=\"v-AHz0Ca46-1-video\" width=\"632\" height=\"354\" poster=\"https://videos.files.wordpress.com/AHz0Ca46/wp4-7-vaughan-r8-mastered_scruberthumbnail_0.jpg\" controls=\"true\" preload=\"metadata\" dir=\"ltr\" lang=\"en\"><source src=\"https://videos.files.wordpress.com/AHz0Ca46/wp4-7-vaughan-r8-mastered_dvd.mp4\" type=\"video/mp4; codecs=&quot;avc1.64001E, mp4a.40.2&quot;\" /><source src=\"https://videos.files.wordpress.com/AHz0Ca46/wp4-7-vaughan-r8-mastered_fmt1.ogv\" type=\"video/ogg; codecs=&quot;theora, vorbis&quot;\" /><div><img alt=\"Introducing WordPress 4.7\" src=\"https://i1.wp.com/videos.files.wordpress.com/AHz0Ca46/wp4-7-vaughan-r8-mastered_scruberthumbnail_0.jpg?resize=632%2C354&#038;ssl=1\" data-recalc-dims=\"1\" /></div><p>Introducing WordPress 4.7</p></video></div>\n<hr />\n<h2 style=\"text-align:center\">Presenting Twenty Seventeen</h2>\n<p>A brand new default theme brings your site to life with immersive featured images and video headers.</p>\n<p><img class=\"alignnone wp-image-4618 size-large\" src=\"https://i2.wp.com/wordpress.org/news/files/2016/12/4.7-—-Twenty-Seventeen-1.jpg?resize=632%2C356&#038;ssl=1\" srcset=\"https://i2.wp.com/wordpress.org/news/files/2016/12/4.7-—-Twenty-Seventeen-1.jpg?resize=1024%2C576&amp;ssl=1 1024w, https://i2.wp.com/wordpress.org/news/files/2016/12/4.7-—-Twenty-Seventeen-1.jpg?resize=300%2C169&amp;ssl=1 300w, https://i2.wp.com/wordpress.org/news/files/2016/12/4.7-—-Twenty-Seventeen-1.jpg?resize=768%2C432&amp;ssl=1 768w, https://i2.wp.com/wordpress.org/news/files/2016/12/4.7-—-Twenty-Seventeen-1.jpg?w=1600&amp;ssl=1 1600w, https://i2.wp.com/wordpress.org/news/files/2016/12/4.7-—-Twenty-Seventeen-1.jpg?w=1264&amp;ssl=1 1264w\" sizes=\"(max-width: 632px) 100vw, 632px\" data-recalc-dims=\"1\" /></p>\n<p>Twenty Seventeen focuses on business sites and features a customizable front page with multiple sections. Personalize it with widgets, navigation, social menus, a logo, custom colors, and more. Our default theme for 2017 works great in many languages, on any device, and for a wide range of users.</p>\n<hr />\n<h2 style=\"text-align:center\">Your Site, Your Way</h2>\n<p>WordPress 4.7 adds new features to the customizer to help take you through the initial setup of a theme, with non-destructive live previews of all your changes in one uninterrupted workflow.</p>\n<h3>Theme Starter Content</h3>\n<div style=\"width: 632px;\" class=\"wp-video\"><!--[if lt IE 9]><script>document.createElement(\'video\');</script><![endif]-->\n<video class=\"wp-video-shortcode\" id=\"video-4596-1\" width=\"632\" height=\"346\" loop=\"1\" autoplay=\"1\" preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"https://wordpress.org/news/files/2016/12/starter-content.mp4?_=1\" /><a href=\"https://wordpress.org/news/files/2016/12/starter-content.mp4\">https://wordpress.org/news/files/2016/12/starter-content.mp4</a></video></div>\n<p>To help give you a solid base to build from, individual themes can provide starter content that appears when you go to customize your brand new site. This can range from placing a business information widget in the best location to providing a sample menu with social icon links to a static front page complete with beautiful images. Don’t worry &#8211; nothing new will appear on the live site until you’re ready to save and publish your initial theme setup.</p>\n<div style=\"float: left;width: 48%;margin: 0\">\n<h3>Edit Shortcuts</h3>\n<div style=\"width: 300px;\" class=\"wp-video\"><video class=\"wp-video-shortcode\" id=\"video-4596-2\" width=\"300\" height=\"173\" poster=\"https://wordpress.org/news/files/2016/12/4.7-—-Edit-Shortcuts.jpg\" loop=\"1\" autoplay=\"1\" preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"https://wordpress.org/news/files/2016/12/edit-shortcuts.mp4?_=2\" /><a href=\"https://wordpress.org/news/files/2016/12/edit-shortcuts.mp4\">https://wordpress.org/news/files/2016/12/edit-shortcuts.mp4</a></video></div>\n<p>Visible icons appear to show you which parts of your site can be customized while live previewing. Click on a shortcut and get straight to editing. Paired with starter content, getting started with customizing your site is faster than ever.</p>\n</div>\n<div style=\"float: right;width: 48%;margin: 0\">\n<h3>Video Headers</h3>\n<div style=\"width: 300px;\" class=\"wp-video\"><video class=\"wp-video-shortcode\" id=\"video-4596-3\" width=\"300\" height=\"173\" poster=\"https://wordpress.org/news/files/2016/12/4.7-—-Header-Video.jpg\" loop=\"1\" autoplay=\"1\" preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"https://wordpress.org/news/files/2016/12/video-headers.mp4?_=3\" /><a href=\"https://wordpress.org/news/files/2016/12/video-headers.mp4\">https://wordpress.org/news/files/2016/12/video-headers.mp4</a></video></div>\n<p>Sometimes a big atmospheric video as a moving header image is just what you need to showcase your wares; go ahead and try it out with Twenty Seventeen. Need some video inspiration? Try searching for sites with video headers available for download and use.</p>\n</div>\n<div style=\"clear: both\"></div>\n<div style=\"float: left;width: 48%;margin: 0\">\n<h3>Smoother Menu Building</h3>\n<p><img class=\"wp-image-4606 size-medium alignright\" src=\"https://i1.wp.com/wordpress.org/news/files/2016/12/4.7-—-Nav.jpg?resize=300%2C158&#038;ssl=1\" srcset=\"https://i1.wp.com/wordpress.org/news/files/2016/12/4.7-—-Nav.jpg?resize=300%2C158&amp;ssl=1 300w, https://i1.wp.com/wordpress.org/news/files/2016/12/4.7-—-Nav.jpg?w=760&amp;ssl=1 760w\" sizes=\"(max-width: 300px) 100vw, 300px\" data-recalc-dims=\"1\" /></p>\n<p>Many menus for sites contain links to the pages of your site, but what happens when you don’t have any pages yet? Now you can add new pages while building menus instead of leaving the customizer and abandoning your changes. Once you’ve published your customizations, you’ll have new pages ready for you to fill with content.</p>\n</div>\n<div style=\"float: right;width: 48%;margin: 0\">\n<h3>Custom CSS</h3>\n<p><img class=\"wp-image-4607 size-medium alignright\" src=\"https://i1.wp.com/wordpress.org/news/files/2016/12/4.7-—-CSS.jpg?resize=300%2C158&#038;ssl=1\" srcset=\"https://i1.wp.com/wordpress.org/news/files/2016/12/4.7-—-CSS.jpg?resize=300%2C158&amp;ssl=1 300w, https://i1.wp.com/wordpress.org/news/files/2016/12/4.7-—-CSS.jpg?w=760&amp;ssl=1 760w\" sizes=\"(max-width: 300px) 100vw, 300px\" data-recalc-dims=\"1\" /></p>\n<p>Sometimes you just need a few visual tweaks to make your site perfect. WordPress 4.7 allows you to add custom CSS and instantly see how your changes affect your site. The live preview allows you to work quickly without page refreshes slowing you down.</p>\n</div>\n<div style=\"clear: both\"></div>\n<hr />\n<div style=\"float: left;width: 48%;margin: 0\">\n<h3>PDF Thumbnail Previews</h3>\n<p><img class=\"wp-image-4609 size-medium alignright\" src=\"https://i1.wp.com/wordpress.org/news/files/2016/12/4.7-—-PDF.jpg?resize=300%2C158&#038;ssl=1\" srcset=\"https://i1.wp.com/wordpress.org/news/files/2016/12/4.7-—-PDF.jpg?resize=300%2C158&amp;ssl=1 300w, https://i1.wp.com/wordpress.org/news/files/2016/12/4.7-—-PDF.jpg?w=760&amp;ssl=1 760w\" sizes=\"(max-width: 300px) 100vw, 300px\" data-recalc-dims=\"1\" /></p>\n<p>Managing your document collection is easier with WordPress 4.7. Uploading PDFs will generate thumbnail images so you can more easily distinguish between all your documents.</p>\n</div>\n<div style=\"float: right;width: 48%;margin: 0\">\n<h3>Dashboard in your language</h3>\n<p><img class=\"wp-image-4608 size-medium alignright\" src=\"https://i2.wp.com/wordpress.org/news/files/2016/12/4.7-—-Language.jpg?resize=300%2C158&#038;ssl=1\" srcset=\"https://i2.wp.com/wordpress.org/news/files/2016/12/4.7-—-Language.jpg?resize=300%2C158&amp;ssl=1 300w, https://i2.wp.com/wordpress.org/news/files/2016/12/4.7-—-Language.jpg?w=760&amp;ssl=1 760w\" sizes=\"(max-width: 300px) 100vw, 300px\" data-recalc-dims=\"1\" /></p>\n<p>Just because your site is in one language doesn’t mean that everybody helping manage it prefers that language for their admin. Add more languages to your site and a user language option will show up in your user’s profiles.</p>\n</div>\n<div style=\"clear: both\"></div>\n<hr />\n<h2 style=\"text-align:center\">Introducing REST API Content Endpoints</h2>\n<p>WordPress 4.7 comes with REST API endpoints for posts, comments, terms, users, meta, and settings.</p>\n<p><img class=\"size-large wp-image-4600 alignnone\" src=\"https://i2.wp.com/wordpress.org/news/files/2016/12/4.7-—-API.jpg?resize=632%2C205&#038;ssl=1\" alt=\"\" srcset=\"https://i2.wp.com/wordpress.org/news/files/2016/12/4.7-—-API.jpg?resize=1024%2C332&amp;ssl=1 1024w, https://i2.wp.com/wordpress.org/news/files/2016/12/4.7-—-API.jpg?resize=300%2C97&amp;ssl=1 300w, https://i2.wp.com/wordpress.org/news/files/2016/12/4.7-—-API.jpg?resize=768%2C249&amp;ssl=1 768w, https://i2.wp.com/wordpress.org/news/files/2016/12/4.7-—-API.jpg?w=1264&amp;ssl=1 1264w, https://i2.wp.com/wordpress.org/news/files/2016/12/4.7-—-API.jpg?w=1896&amp;ssl=1 1896w\" sizes=\"(max-width: 632px) 100vw, 632px\" data-recalc-dims=\"1\" /></p>\n<p>Content endpoints provide machine-readable external access to your WordPress site with a clear, standards-driven interface, paving the way for new and innovative methods of interacting with sites through plugins, themes, apps, and beyond. Ready to get started with development? <a href=\"https://developer.wordpress.org/rest-api/reference/\">Check out the REST API reference.</a></p>\n<hr />\n<h2 style=\"text-align:center\">Even More Developer Happiness <img src=\"https://s.w.org/images/core/emoji/2.2.1/72x72/1f60a.png\" alt=\"','no'),(24182,'_transient_timeout_feed_mod_b9388c83948825c1edaef0d856b7b109','1492136414','no'),(24183,'_transient_feed_mod_b9388c83948825c1edaef0d856b7b109','1492093214','no'),(24186,'_transient_timeout_dash_4077549d03da2e451c8b5f002294ff51','1492136414','no'),(24187,'_transient_dash_4077549d03da2e451c8b5f002294ff51','<div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'https://wordpress.org/news/2017/03/wordpress-4-7-3-security-and-maintenance-release/\'>WordPress 4.7.3 Security and Maintenance Release</a> <span class=\"rss-date\">March 6, 2017</span><div class=\"rssSummary\">WordPress 4.7.3 is now available. This is a security release for all previous versions and we strongly encourage you to update your sites immediately. WordPress versions 4.7.2 and earlier are affected by six security issues: Cross-site scripting (XSS) via media file metadata.  Reported by Chris Andrè Dale, Yorick Koster, and Simon P. Briggs. Control characters can trick redirect [&hellip;]</div></li></ul></div><div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'https://wptavern.com/hacked-home-routers-are-launching-brute-force-attacks-on-wordpress-sites\'>WPTavern: Hacked Home Routers are Launching Brute Force Attacks on WordPress Sites</a></li><li><a class=\'rsswidget\' href=\'https://ma.tt/2017/04/new-top-50-restaurants/\'>Matt: New Top 50 Restaurants</a></li><li><a class=\'rsswidget\' href=\'https://heropress.com/essays/bottomless-world-possibilities/\'>HeroPress: A Bottomless World of Possibilities</a></li></ul></div><div class=\"rss-widget\"><ul><li class=\'dashboard-news-plugin\'><span>Popular Plugin:</span> <a href=\'https://wordpress.org/plugins/jetpack/\' class=\'dashboard-news-plugin-link\'>Jetpack by WordPress.com</a>&nbsp;<span>(<a href=\'plugin-install.php?tab=plugin-information&amp;plugin=jetpack&amp;_wpnonce=1b8ab850e5&amp;TB_iframe=true&amp;width=600&amp;height=800\' class=\'thickbox\' title=\'Jetpack by WordPress.com\'>Install</a>)</span></li></ul></div>','no');
/*!40000 ALTER TABLE `wp_options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_postmeta`
--

DROP TABLE IF EXISTS `wp_postmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=MyISAM AUTO_INCREMENT=1858 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_postmeta`
--

LOCK TABLES `wp_postmeta` WRITE;
/*!40000 ALTER TABLE `wp_postmeta` DISABLE KEYS */;
INSERT INTO `wp_postmeta` VALUES (1,2,'_wp_page_template','default'),(2,4,'_edit_last','1'),(3,4,'_edit_lock','1411615838:1'),(7,8,'_edit_lock','1415003096:1'),(6,8,'_edit_last','1'),(11,10,'_edit_lock','1422935782:1'),(10,10,'_edit_last','1'),(17,14,'_edit_lock','1413002151:1'),(16,14,'_edit_last','1'),(20,2,'_edit_lock','1411969030:1'),(132,74,'_edit_lock','1415697253:1'),(131,74,'_edit_last','1'),(26,19,'_edit_lock','1412059731:1'),(25,19,'_edit_last','1'),(30,22,'_edit_lock','1413883587:1'),(29,22,'_edit_last','1'),(34,24,'_edit_lock','1412616381:1'),(33,24,'_edit_last','1'),(39,26,'_edit_lock','1412821902:1'),(38,26,'_edit_last','1'),(44,28,'_edit_lock','1412941385:1'),(43,28,'_edit_last','1'),(48,28,'_oembed_c3346fde342ba16b5118e1aab73559e3','{{unknown}}'),(49,28,'_oembed_49128c240f3149874abdd43b620d500d','{{unknown}}'),(50,32,'_edit_last','1'),(51,32,'_edit_lock','1413002186:1'),(137,76,'_edit_lock','1416384778:1'),(136,76,'_edit_last','1'),(57,37,'_edit_last','1'),(58,37,'_edit_lock','1413131930:1'),(63,39,'_edit_lock','1413343959:1'),(62,39,'_edit_last','1'),(68,41,'_edit_lock','1413373439:1'),(67,41,'_edit_last','1'),(69,41,'_wp_page_template','default'),(74,50,'_edit_lock','1413883494:1'),(73,50,'_edit_last','1'),(79,52,'_edit_lock','1413906546:1'),(78,52,'_edit_last','1'),(87,55,'_edit_last','1'),(86,55,'_oembed_07978f2cf69b83a3116ef3659bca4aef','{{unknown}}'),(93,57,'_edit_lock','1414153510:1'),(92,57,'_edit_last','1'),(91,55,'_edit_lock','1413952168:1'),(98,60,'_edit_lock','1414655478:1'),(97,60,'_edit_last','1'),(103,62,'_edit_lock','1414750261:1'),(102,62,'_edit_last','1'),(108,64,'_edit_lock','1415007747:1'),(107,64,'_edit_last','1'),(116,67,'_edit_lock','1415025767:1'),(121,69,'_edit_lock','1415071971:1'),(115,67,'_edit_last','1'),(120,69,'_edit_last','1'),(126,71,'_edit_lock','1415091655:1'),(125,71,'_edit_last','1'),(127,71,'_oembed_9b507cf71eb8f0a2d141e22095b3bec6','{{unknown}}'),(139,80,'_edit_lock','1416387693:1'),(138,80,'_edit_last','1'),(140,81,'_edit_last','1'),(141,81,'_edit_lock','1416892705:1'),(149,85,'_edit_lock','1416804336:1'),(150,85,'_oembed_8c713ec7113f88ee3dc9c62ac4c5a43e','{{unknown}}'),(148,85,'_edit_last','1'),(151,85,'_oembed_a9eaae8233d49604a7825c4584f1e686','{{unknown}}'),(155,81,'_oembed_b0f16f193f3bbf6a663b9b559382bf36','{{unknown}}'),(156,81,'_oembed_10c353a0730cab80504cf45461bdfd29','{{unknown}}'),(161,90,'_edit_lock','1417109714:1'),(160,90,'_edit_last','1'),(169,93,'_edit_lock','1418206464:1'),(174,96,'_edit_lock','1418783751:1'),(168,93,'_edit_last','1'),(173,96,'_edit_last','1'),(182,101,'_edit_lock','1418827066:1'),(189,105,'_edit_last','1'),(181,101,'_edit_last','1'),(190,105,'_edit_lock','1418874590:1'),(191,106,'_edit_last','1'),(192,106,'_edit_lock','1418884131:1'),(197,110,'_edit_lock','1419012428:1'),(196,110,'_edit_last','1'),(207,115,'_edit_last','1'),(208,115,'_edit_lock','1419230951:1'),(213,119,'_edit_lock','1421205950:1'),(212,119,'_edit_last','1'),(214,119,'_oembed_44db9cafd851c304335571d4c3cc1205','{{unknown}}'),(215,119,'_oembed_5fb5c14384f75ce4bbf5f2fd03b2bf99','{{unknown}}'),(216,119,'_oembed_9fbc5a0b8d8be172b725854a8339016c','{{unknown}}'),(217,119,'_oembed_4f6f3cf4e860285ff389691ea84d97a5','{{unknown}}'),(222,121,'_edit_lock','1419856375:1'),(221,121,'_edit_last','1'),(232,123,'_edit_last','1'),(244,127,'_edit_lock','1420029030:1'),(243,127,'_edit_last','1'),(236,123,'_edit_lock','1419907037:1'),(246,130,'_edit_last','1'),(247,130,'_edit_lock','1420359994:1'),(252,132,'_edit_lock','1420516434:1'),(251,132,'_edit_last','1'),(278,142,'_edit_last','1'),(271,10,'_oembed_77f37519b1ad7e944cd32b2384d4dcef','{{unknown}}'),(279,142,'_edit_lock','1421229454:1'),(289,146,'_edit_last','1'),(290,146,'_edit_lock','1426863368:1'),(369,175,'_edit_last','1'),(370,175,'_edit_lock','1429090125:1'),(362,173,'_edit_lock','1425526362:1'),(361,173,'_edit_last','1'),(335,161,'_edit_lock','1422206165:1'),(334,161,'_edit_last','1'),(343,164,'_edit_lock','1422849507:1'),(359,170,'_edit_lock','1423744193:1'),(342,164,'_edit_last','1'),(353,168,'_edit_last','1'),(354,168,'_edit_lock','1423625303:1'),(358,170,'_edit_last','1'),(379,177,'_edit_last','1'),(380,177,'_edit_lock','1425266853:1'),(462,207,'_edit_lock','1426477438:1'),(396,186,'_edit_last','1'),(397,186,'_edit_lock','1425636237:1'),(411,189,'_edit_lock','1426091657:1'),(410,189,'_edit_last','1'),(425,195,'_edit_lock','1427106037:1'),(424,195,'_edit_last','1'),(457,205,'_edit_lock','1429089720:1'),(456,205,'_edit_last','1'),(461,207,'_edit_last','1'),(486,216,'_edit_last','1'),(479,213,'_edit_lock','1426786131:1'),(478,213,'_edit_last','1'),(487,216,'_edit_lock','1432522598:1'),(542,235,'_edit_last','1'),(513,225,'_edit_lock','1427354592:1'),(512,225,'_edit_last','1'),(523,228,'_edit_last','1'),(524,228,'_edit_lock','1427894681:1'),(534,231,'_edit_last','1'),(535,231,'_edit_lock','1428973946:1'),(543,235,'_edit_lock','1428995871:1'),(562,243,'_edit_lock','1430291196:1'),(557,240,'_edit_lock','1429187502:1'),(556,240,'_edit_last','1'),(561,243,'_edit_last','1'),(563,243,'_oembed_64ed103a071257f997a3891d30da3bff','{{unknown}}'),(568,245,'_edit_lock','1430817747:1'),(567,245,'_edit_last','1'),(768,312,'_oembed_1b252b4fe6665390a807a644a32556c1','{{unknown}}'),(764,312,'_edit_lock','1434511281:1'),(763,312,'_edit_last','1'),(582,251,'_edit_last','1'),(583,251,'_edit_lock','1432259487:1'),(584,251,'_wp_page_template','default'),(585,253,'_edit_last','1'),(634,266,'_edit_last','1'),(589,253,'_edit_lock','1432884129:1'),(629,264,'_edit_last','1'),(630,264,'_edit_lock','1436853243:1'),(635,266,'_edit_lock','1436853138:1'),(722,296,'_edit_lock','1432990655:1'),(648,272,'_edit_last','1'),(649,272,'_edit_lock','1432781723:1'),(721,296,'_edit_last','1'),(704,288,'_edit_last','1'),(705,288,'_edit_lock','1432889388:1'),(730,298,'_edit_lock','1436853116:1'),(777,318,'_edit_last','1'),(729,298,'_edit_last','1'),(744,303,'_edit_lock','1436864605:1'),(743,303,'_edit_last','1'),(770,315,'_edit_lock','1435040720:1'),(769,315,'_edit_last','1'),(778,318,'_edit_lock','1435235282:1'),(783,320,'_edit_lock','1435800895:1'),(782,320,'_edit_last','1'),(784,320,'_oembed_cfd30367a41cbde9605133a5a4747b38','{{unknown}}'),(850,335,'_syntaxhighlighter_encoded','1'),(827,335,'_edit_last','1'),(828,335,'_edit_lock','1438342244:1'),(885,354,'_edit_lock','1439453017:1'),(884,354,'_edit_last','1'),(886,354,'_syntaxhighlighter_encoded','1'),(905,363,'_edit_lock','1437117213:1'),(899,361,'_edit_last','1'),(900,361,'_edit_lock','1437113096:1'),(904,363,'_edit_last','1'),(944,363,'_oembed_0ec982dbacd7bf3d7f7fb774ba047b21','{{unknown}}'),(909,363,'_syntaxhighlighter_encoded','1'),(943,363,'_oembed_122d7c3b62810008ce2275a65972d11d','{{unknown}}'),(945,363,'_oembed_779409b8d902162ff3a17c7cc1b81639','{{unknown}}'),(1020,389,'_syntaxhighlighter_encoded','1'),(1018,389,'_edit_last','1'),(1019,389,'_edit_lock','1437112930:1'),(1030,394,'_edit_last','1'),(1031,394,'_edit_lock','1438933393:1'),(1047,394,'_syntaxhighlighter_encoded','1'),(1079,405,'_edit_lock','1438659406:1'),(1083,409,'_edit_last','1'),(1084,409,'_syntaxhighlighter_encoded','1'),(1075,405,'_edit_last','1'),(1085,409,'_edit_lock','1438342242:1'),(1093,412,'_edit_lock','1438157057:1'),(1108,418,'_oembed_df8f6cac2d52ea1a8663cfdcca25703e','{{unknown}}'),(1092,412,'_edit_last','1'),(1107,418,'_edit_lock','1438572271:1'),(1106,418,'_edit_last','1'),(1109,418,'_syntaxhighlighter_encoded','1'),(1229,418,'_post_restored_from','a:3:{s:20:\"restored_revision_id\";i:420;s:16:\"restored_by_user\";i:1;s:13:\"restored_time\";i:1438572264;}'),(1233,452,'_edit_lock','1438592958:1'),(1234,452,'_syntaxhighlighter_encoded','1'),(1232,452,'_edit_last','1'),(1347,489,'_edit_lock','1439180447:1'),(1263,464,'_edit_lock','1439448205:1'),(1262,464,'_edit_last','1'),(1346,489,'_edit_last','1'),(1273,464,'_syntaxhighlighter_encoded','1'),(1348,489,'_oembed_0a824d812fc1df2e55e5b47b420d5916','{{unknown}}'),(1382,495,'_oembed_322cdfc192bf28ee5fd625cbf6642752','{{unknown}}'),(1367,495,'_edit_last','1'),(1368,495,'_edit_lock','1439969847:1'),(1378,495,'_syntaxhighlighter_encoded','1'),(1451,512,'_syntaxhighlighter_encoded','1'),(1431,512,'_edit_last','1'),(1432,512,'_edit_lock','1440405317:1'),(1479,526,'_edit_last','1'),(1480,526,'_edit_lock','1440495116:1'),(1490,526,'_oembed_b0cf232f5cb6d5fb8d7f536df5e1fee6','{{unknown}}'),(1595,565,'_oembed_11c055cb35d9e2fb16324d82f65d65c5','{{unknown}}'),(1494,526,'_syntaxhighlighter_encoded','1'),(1596,565,'_edit_last','1'),(1576,558,'_edit_last','1'),(1577,558,'_edit_lock','1444824369:1'),(1588,562,'_edit_lock','1447143886:1'),(1563,552,'_edit_last','1'),(1564,552,'_edit_lock','1443617288:1'),(1597,565,'_edit_lock','1454082687:1'),(1572,555,'_edit_lock','1443618979:1'),(1571,555,'_edit_last','1'),(1587,562,'_edit_last','1'),(1602,567,'_edit_lock','1454590556:1'),(1601,567,'_edit_last','1'),(1731,623,'_edit_last','1'),(1615,572,'_edit_last','1'),(1616,572,'_edit_lock','1465196321:1'),(1637,579,'_edit_lock','1465821813:1'),(1636,579,'_edit_last','1'),(1723,620,'_edit_last','1'),(1724,620,'_edit_lock','1474618844:1'),(1721,619,'_edit_last','1'),(1722,619,'_edit_lock','1473345112:1'),(1732,623,'_edit_lock','1474701855:1'),(1804,647,'_edit_lock','1480509188:1'),(1799,644,'_edit_lock','1478344125:1'),(1798,644,'_edit_last','1'),(1794,642,'_edit_lock','1477845915:1'),(1793,642,'_edit_last','1'),(1803,647,'_edit_last','1'),(1809,651,'_edit_lock','1481546396:1'),(1808,651,'_edit_last','1'),(1814,654,'_edit_lock','1492135698:1'),(1813,654,'_edit_last','1'),(1819,658,'_edit_lock','1490210663:1'),(1818,658,'_edit_last','1'),(1824,661,'_edit_lock','1490932221:1'),(1823,661,'_edit_last','1'),(1829,664,'_edit_lock','1491794900:1'),(1828,664,'_edit_last','1'),(1837,666,'_edit_lock','1492151848:1'),(1836,666,'_edit_last','1');
/*!40000 ALTER TABLE `wp_postmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_posts`
--

DROP TABLE IF EXISTS `wp_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext NOT NULL,
  `post_title` text NOT NULL,
  `post_excerpt` text NOT NULL,
  `post_status` varchar(20) NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) NOT NULL DEFAULT 'open',
  `post_password` varchar(20) NOT NULL DEFAULT '',
  `post_name` varchar(200) NOT NULL DEFAULT '',
  `to_ping` text NOT NULL,
  `pinged` text NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=MyISAM AUTO_INCREMENT=673 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_posts`
--

LOCK TABLES `wp_posts` WRITE;
/*!40000 ALTER TABLE `wp_posts` DISABLE KEYS */;
INSERT INTO `wp_posts` VALUES (1,1,'2014-09-23 16:07:29','2014-09-23 16:07:29','Welcome to WordPress. This is your first post. Edit or delete it, then start blogging!','Hello world!','','publish','open','open','','hello-world','','','2014-09-23 16:07:29','2014-09-23 16:07:29','',0,'http://unasm.sinaapp.com/?p=1',0,'post','',0),(2,1,'2014-09-23 16:07:29','2014-09-23 16:07:29','This is an example page. It\'s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:\n\n<blockquote>Hi there! I\'m a bike messenger by day, aspiring actor by night, and this is my blog. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin\' caught in the rain.)</blockquote>\n\n...or something like this:\n\n<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>\n\nAs a new WordPress user, you should go to <a href=\"http://unasm.sinaapp.com/wp-admin/\">your dashboard</a> to delete this page and create new pages for your content. Have fun!','Sample Page','','publish','open','open','','sample-page','','','2014-09-23 16:07:29','2014-09-23 16:07:29','',0,'http://unasm.sinaapp.com/?page_id=2',0,'page','',0),(4,1,'2014-09-23 16:34:07','2014-09-23 16:34:07','    一直以为redis可以完全取代mc,mc的hash完全可以由redis的hash取代，同时redis提供了list，string，set，zset这几种相当不错的数据结构，完全没有使用mc的必要，但是今天写了几个测试脚本之后，感觉mc的hash和redis的hash还是有很大不同的，\r\n    首先第一点，就是mc的hash value可以是数组，一个key对应的是一整个数组，而这一点，redis尚且做不到。不过mc这样有一个缺陷，就是如果脱离php，而使用python类似的其他的语言，会面临兼容性的问题，毕竟php本身的数组不是正规意义上的数组。\r\n    其次就是redis的骄傲，落地这一点，这是一个非常好的理念，但是具体实现的时候，却通过快照的方式来实现具体数据的备份，这点在数据很大的时候，就会面临一次快照时间太久，以至于影响了性能的问题，如果这样的话，落地的功能就是鸡肋了','redis缓存和memcache的简单对比','','publish','open','open','','redis%e7%bc%93%e5%ad%98%e5%92%8cmemcache%e7%9a%84%e7%ae%80%e5%8d%95%e5%af%b9%e6%af%94','','','2014-09-23 16:34:07','2014-09-23 16:34:07','',0,'http://unasm.sinaapp.com/?p=4',0,'post','',0),(5,1,'2014-09-23 16:22:14','2014-09-23 16:22:14','<p style=\"text-align: left;\">sdfsdfad 分sdfasdf</p>\r\n粉丝地方dfadf','redis缓存和memcache的简单对比','','inherit','open','open','','4-revision-v1','','','2014-09-23 16:22:14','2014-09-23 16:22:14','',4,'http://unasm.sinaapp.com/?p=5',0,'revision','',0),(6,1,'2014-09-23 16:34:07','2014-09-23 16:34:07','    一直以为redis可以完全取代mc,mc的hash完全可以由redis的hash取代，同时redis提供了list，string，set，zset这几种相当不错的数据结构，完全没有使用mc的必要，但是今天写了几个测试脚本之后，感觉mc的hash和redis的hash还是有很大不同的，\r\n    首先第一点，就是mc的hash value可以是数组，一个key对应的是一整个数组，而这一点，redis尚且做不到。不过mc这样有一个缺陷，就是如果脱离php，而使用python类似的其他的语言，会面临兼容性的问题，毕竟php本身的数组不是正规意义上的数组。\r\n    其次就是redis的骄傲，落地这一点，这是一个非常好的理念，但是具体实现的时候，却通过快照的方式来实现具体数据的备份，这点在数据很大的时候，就会面临一次快照时间太久，以至于影响了性能的问题，如果这样的话，落地的功能就是鸡肋了','redis缓存和memcache的简单对比','','inherit','open','open','','4-revision-v1','','','2014-09-23 16:34:07','2014-09-23 16:34:07','',4,'http://unasm.sinaapp.com/?p=6',0,'revision','',0),(7,1,'2014-09-23 16:36:09','2014-09-23 16:36:09','一直以为redis可以完全取代mc,mc的hash完全可以由redis的hash取代，同时redis提供了list，string，set，zset这几种相当不错的数据结构，完全没有使用mc的必要，但是今天写了几个测试脚本之后，感觉mc的hash和redis的hash还是有很大不同的，\n首先第一点，就是mc的hash value可以是数组，一个key对应的是一整个数组，而这一点，redis尚且做不到。不过mc这样有一个缺陷，就是如果脱离php，而使用python类似的其他的语言，会面临兼容性的问题，毕竟php本身的数组不是正规意义上的数组。\n其次就是redis的骄傲，落地这一点，这是一个非常好的理念，但是具体实现的时候，却通过快照的方式来实现具体数据的备份，这点在数据很大的时候，就会面临一次快照时间太久，以至于影响了性能的问题，如果这样的话，落地的功能就是鸡肋了','redis缓存和memcache的简单对比','','inherit','open','open','','4-autosave-v1','','','2014-09-23 16:36:09','2014-09-23 16:36:09','',4,'http://unasm.sinaapp.com/?p=7',0,'revision','',0),(8,1,'2014-09-25 03:24:11','2014-09-25 03:24:11','<code>\r\n$redis-&gt;set($key , \"1\");\r\n$redis-&gt;get(key);\r\n$redis-&gt;set($i , \"hello,world\");\r\n$redis-&gt;set($i + 1, \"hello,world\");\r\n$redis-&gt;set($i + 2, \"hello,world\");\r\n$redis-&gt;set($i + 3, \"hello,world\");\r\n</code>\r\n\r\n<code>\r\n$redis-&gt;-&gt;multi()-&gt;set($key , \"1\")\r\n-&gt;get($key)\r\n-&gt;set($i , \"hello,world\")\r\n-&gt;set($i + 1, \"hello,world\")\r\n-&gt;set($i + 2, \"hello,world\")\r\n-&gt;set($i + 3, \"hello,world\")\r\n-&gt;exec();\r\n</code>\r\n上面两种测试用例是可以达到相同目的的，都可以通过redis进行一些set，get操作，但是内部实现不同，第二种通过pipeline信道的方式传递信息，减少了命令连接传输的消耗，所以相对的效率高一些，具体效率高出来多少，测试一下。\r\n\r\n重复执行100的结果是 第一种548ms，第二种是419ms，大约高出20%的样子。\r\n\r\n重复执行10000的结果是 第一种54743ms，第二种是41221ms，依旧大约高出20%的样子。\r\n\r\n从上述的测试可以看到多个连续的redis请求的时候，可以通过multi_exec的方式来提高效率，每个命令的返回值会以数组的形式返回，每个命令在multi_exec结构中第几个位置，数组对应的下标就是几。','redis的multi_exec结构与独立事件之间的效率对比','','publish','open','open','','redis%e7%9a%84multi_exec%e7%bb%93%e6%9e%84%e4%b8%8e%e7%8b%ac%e7%ab%8b%e4%ba%8b%e4%bb%b6%e4%b9%8b%e9%97%b4%e7%9a%84%e6%95%88%e7%8e%87%e5%af%b9%e6%af%94','','','2014-09-25 03:24:11','2014-09-25 03:24:11','',0,'http://unasm.sinaapp.com/?p=8',0,'post','',0),(9,1,'2014-09-25 03:24:11','2014-09-25 03:24:11','<code>\r\n$redis-&gt;set($key , \"1\");\r\n$redis-&gt;get(key);\r\n$redis-&gt;set($i , \"hello,world\");\r\n$redis-&gt;set($i + 1, \"hello,world\");\r\n$redis-&gt;set($i + 2, \"hello,world\");\r\n$redis-&gt;set($i + 3, \"hello,world\");\r\n</code>\r\n\r\n<code>\r\n$redis-&gt;-&gt;multi()-&gt;set($key , \"1\")\r\n-&gt;get($key)\r\n-&gt;set($i , \"hello,world\")\r\n-&gt;set($i + 1, \"hello,world\")\r\n-&gt;set($i + 2, \"hello,world\")\r\n-&gt;set($i + 3, \"hello,world\")\r\n-&gt;exec();\r\n</code>\r\n上面两种测试用例是可以达到相同目的的，都可以通过redis进行一些set，get操作，但是内部实现不同，第二种通过pipeline信道的方式传递信息，减少了命令连接传输的消耗，所以相对的效率高一些，具体效率高出来多少，测试一下。\r\n\r\n重复执行100的结果是 第一种548ms，第二种是419ms，大约高出20%的样子。\r\n\r\n重复执行10000的结果是 第一种54743ms，第二种是41221ms，依旧大约高出20%的样子。\r\n\r\n从上述的测试可以看到多个连续的redis请求的时候，可以通过multi_exec的方式来提高效率，每个命令的返回值会以数组的形式返回，每个命令在multi_exec结构中第几个位置，数组对应的下标就是几。','redis的multi_exec结构与独立事件之间的效率对比','','inherit','open','open','','8-revision-v1','','','2014-09-25 03:24:11','2014-09-25 03:24:11','',8,'http://unasm.sinaapp.com/?p=9',0,'revision','',0),(10,1,'2014-09-25 17:36:34','2014-09-25 17:36:34','这个是为活动系统设计的一套动态分表的策略，活动数据的特点是每个活动之间的数据彼此独立，单个活动的的数据不算很大，几乎没有活动数据可以占据单独的一个表，\r\n\r\n首先在缓存中建立一个列表，标记还可以插入数据的表的集合，而在集合之外的其他的表已经是历史数据，至少不会有新的活动是数据插入，具体实现方式如下：\r\n\r\n<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/%E6%A1%B6%E6%B1%A0%E7%9A%84%E8%AE%BE%E8%AE%A1.jpg\" alt=\"\" width=\"556\" height=\"627\" />\r\n\r\n最上面的是一个一个的表，真正插入数据的地方\r\n\r\nActor 指活动，首先从列表中得到所有桶的信息，所谓桶，就是还可以插入数据的表，\r\n\r\n桶信息包括两种：表的名字，和已经插入该表的活动列表。根据这些可以获得当前每个表的数据量，以及为正在添加的活动预留的空间。\r\n\r\n因为获取的数据量是根据确实添加了的数据，之前为其他的已经结束的活动多预留的空间在这里可以重复利用。\r\n\r\n剩余的空间不足以容纳一个新的活动的时候，就放弃这个表，\r\n\r\n同时每个表的活动数量也可以一定程度的反应写压力，虽然不是很精确，但是两者存在一定的关联，如果严格的区分写压力，可以根据joyList中过去一定时间内插入的数据量来比较精确的反应写压力，然后将插入数据量放到桶信息里面，作为判断的依据，从而达到每个表的读写压力不至于过大的目的。从所有的桶中选择最优的，作为新的活动的存储地址。\r\n\r\n这样有几个好处：\r\n\r\n第一：保证了每个活动一个表的基本原则。\r\n\r\n第二：在不出现很奇葩的情况时候，保证了每个表的数据量都在一个设置的常量上下，比如200w，不会因为每个活动数据太少造成空间浪费。\r\n\r\n第三：动态创建表，可以保证数据的长期运行\r\n\r\n第四：为真正分担读写压力预留了扩展空间。\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n<code>\r\nclass DataModel  \r\n{\r\n    //存储桶池状态的set key\r\n    const KEY = \'jiaminJoyTest\';\r\n    //每个桶里面放的最多的活动数，考虑写压力,-1 表示不理会\r\n    const MAXEACHBUCKET = 3;\r\n    //每个活动预估的数字,20w\r\n    const EACHJOYNUM = 200000;\r\n    //每个表里面存储数据最多的基准值,200w\r\n    const MAXTABNUM = 2000000;\r\n\r\n    /**\r\n     *  添加新的桶，或者把活动添加到一个指定桶里面\r\n     *\r\n     *  之所以把修改和添加放在一起，是为了方便维护bucket里面的结构一直\r\n     *  只能有select 触发\r\n     *  @param  array   $bucket \r\n     **/\r\n    protected static function  addBucket($jid , $state = array())\r\n    {\r\n        $redis = new myRedis();\r\n        if(empty($state)){\r\n           //这里加入日志，提示创建了表 \r\n            $state = array(\r\n                \'name\' => UdataModel::createTab() ,\r\n                \'joyNum\' => 1,\r\n                \'joyList\' => array($jid)\r\n            );\r\n        } else {\r\n            if($redis->sRem(self::KEY , json_encode($state))){\r\n                $state[\'joyNum\'] += 1;\r\n                array_push($state[\'joyList\'] , $jid);\r\n            } else {\r\n                Common::debug(\'删除桶池失败\');\r\n                Message::showError(\'删除更新桶失败\');\r\n            }\r\n\r\n        }\r\n        if($redis->sAdd(self::KEY , json_encode($state))){\r\n            return $state[\'name\'];\r\n        }\r\n        //这里报警,添加失败，丢失了桶\r\n        Common::debug(\'添加桶信息进入set 失败\');\r\n        return false;\r\n    }\r\n    \r\n\r\n    /**\r\n     * 从桶池中选择当前可以插入的表\r\n     * 就是从目前的bucket 中找一个最优的，\r\n     * 然后插入，如果都不满足条件，创建一个新的，如果超出了最大的桶池数就报警，\r\n     * 同时，创建成功\r\n     *\r\n     **/\r\n    public static function select($jid)\r\n    {\r\n        //查找所有符合条件的，然后得到一个负载最小的\r\n        $redis = new myRedis();\r\n        $data = $redis->sMembers(self::KEY);\r\n        $target = array();\r\n        if(count($data) === 0){\r\n            self::testAdd();\r\n        }\r\n        foreach($data as $bucket){\r\n            Common::Debug(\'bucket : \' . $bucket);\r\n            $state = json_decode($bucket , true) ;\r\n            // 桶里面已经存储的总量\r\n            $storedInTab = UdataModel::getNumByName($state[\'name\']); \r\n            if($storedInTab === 0){\r\n                BaseModelCommon::debug(\"no data in \". $state[\'name\']);\r\n            }\r\n\r\n            if($state[\'joyNum\'] !== count( $state[\'joyList\']) ){\r\n                //发送报警邮件，严重错误\r\n            }\r\n            //目前在桶里面的活动已经填充了的数据\r\n            $activeData = UdataModel::getDataNum($state[\'name\'], $state[\'joyList\']);\r\n            BaseModelCommon::Debug(\'activeData : \' . $activeData) ;\r\n            //需要为桶里面的活动预留的空间,\r\n            //预估的每个活动的记录数 * 活动的数目 - 已经存储了的数据 = 接来下还要占据的记录数\r\n            $activeNeedSpace = self::EACHJOYNUM * $state[\'joyNum\'] - $activeData;\r\n            BaseModelCommon::Debug(\'activeNeedSpace : \' . $activeNeedSpace) ;\r\n            //发送报警邮件，告知管理员,同时这个桶池不再添加活动,避免进一步增加上限\r\n            if($activeNeedSpace < 0){\r\n                continue;\r\n            }\r\n            // 剩余的空间为每个表的最大数据数 - (已经存储的数据 + 还将要存储的数据数）\r\n            $leave = self::MAXTABNUM - ($storedInTab + $activeNeedSpace);\r\n\r\n            BaseModelCommon::Debug(\'leave : \' . $leave) ;\r\n            // 如果剩下的空间还有就插入，进入备用列表,200w已经很保守了，没有必要降到200w以下\r\n            if($leave > 0){\r\n                if(empty($target)){\r\n                    $target = $state;\r\n                } else {\r\n                    //就根据插入的活动数量来判断负载, 不是最科学的，但是也是有相当道理\r\n                    if($target[\'joyNum\'] > $state[\'joyNum\']){\r\n                        $target = $state;\r\n                    }\r\n                }\r\n            }\r\n            Common::Debug(\'target : \' . json_encode($target));\r\n        }\r\n        //return self::addBucket($jid , $target);\r\n    }\r\n\r\n    /**\r\n     *  测试添加addBucket\r\n     *  @return     array ()    添加的桶的信息，名字等等\r\n     **/\r\n    public static function testAdd()\r\n    {\r\n        $states = array(\r\n            //name : 表名\r\n            //joyNum : 已经插入的活动数目\r\n            //joyList : 该表里面 正在插入的joy id列表\r\n            array(\'name\' => \'udata_1\', \'joyNum\' => 3, \'joyList\' => array( 3,2,4 )),\r\n            array(\'name\' => \'udata_2\', \'joyNum\' => 0, \'joyList\' => array()),\r\n            array(\'name\' => \'udata_3\', \'joyNum\' => 1, \'joyList\' => array(7)),\r\n        );\r\n        $redis = new myRedis;\r\n        if($redis->sCard(self::KEY) === 0){\r\n            //灌数据\r\n            foreach($states as $state){\r\n                $redis->sAdd(self::KEY , json_encode($state));\r\n            }\r\n        }\r\n        //echo self::addBucket();\r\n    }  \r\n    \r\n    /**\r\n     * 监测程序的运行\r\n     *\r\n     * 程序员应该实时知道自己程序的运行状况\r\n     * @return array\r\n     **/\r\n    public static function inspect()\r\n    {\r\n        //array(\'name\' => \'udata_1\', \'joyNum\' => 2, \'joyList\' => array( 3,2,4 )),\r\n        $redis = new myRedis;\r\n        $data = $redis->sMembers(self::KEY);\r\n        header(\"Cache-Control:no-cache\");\r\n        echo \"<table style = \'text-align:center\'>\r\n            <thead><tr>\r\n            <th>当前正在插入表 </th>\r\n            <th>表内项目数</th>\r\n            <th>表内数据量</th>\r\n            <th>详情</th>\r\n            </tr></thead>\";\r\n        foreach($data as $state){\r\n            $bucket = json_decode($state , true);\r\n            echo \"<tr style = \'border-bottom:2px\'><td>{$bucket[\'name\']}</td> <td>{$bucket[\'joyNum\']}</td>\";\r\n            echo \"<td>\" . UdataModel::getNumByName($bucket[\'name\']) . \"</td>\"; \r\n            echo \"<td><table>\";\r\n            foreach($bucket[\'joyList\'] as $joy){\r\n                echo \"<tr>joy id 为{$joy}数量\" . UdataModel::getDataNum($bucket[\'name\'], $joy) . \"<br/></tr>\";\r\n            }\r\n            echo \"</table></td></tr>\";\r\n        }\r\n        echo \"</table>\";\r\n    }\r\n\r\n    /**\r\n     * 清除数据\r\n     * 开发的时候用\r\n     **/\r\n    public static function clear()\r\n    {\r\n        $redis = new myRedis();\r\n        $data = $redis->sMembers(self::KEY);\r\n        foreach($data as $state){\r\n            $redis->sRem(self::KEY, $state);\r\n        }\r\n        $data = $redis->sMembers(self::KEY);\r\n        if(!count($data)) {\r\n            echo \"it is clear<br/>\";\r\n        } else {\r\n            echo \"no clear<br/>\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清除bucket\r\n     *\r\n     * 当表里的数据已经达到200w的时候，就把这个表对应的桶删除\r\n     * 定时脚本,定期清理过期的数据\r\n     **/\r\n    public static function delBucket()\r\n    {\r\n        $data = $redis->sMembers(self::KEY);\r\n        foreach($data as $bucket){\r\n            $state = json_decode($bucket , true) ;\r\n            //数据已经满了的话，就从桶池里面删除，不再插入数据\r\n            if(UdataModel::getNumByName($state[\'name\']) >= self::MAXTABNUM){\r\n                $redis->sRem(self::KEY , $bucket)  ;\r\n            }\r\n        }\r\n    }\r\n\r\n    function __construct(){}\r\n}\r\n</code>','mysql 分表之桶池','','publish','open','open','','mysql-%e5%88%86%e8%a1%a8%e7%9a%84%e6%80%9d%e8%80%83','','','2015-02-03 03:56:21','2015-02-03 03:56:21','',0,'http://unasm.sinaapp.com/?p=10',0,'post','',0),(11,1,'2014-09-25 17:36:34','2014-09-25 17:36:34','数据分表是一个大问题,尤其是在这个号称大数据的时代。只是具体怎么分表，一直是人讨论的问题。\r\n\r\n可以严格按照时间分，一个表，一个表的填充，满了，达到200w的级别之后，接着去下一个表。还有一个方案，就是预先估计好大概可能有的数据量，分好对应的N个表，然后按照一定的规则，将数据尽量均匀的散布在所有的表中。\r\n\r\n第一种的优点是数据按照一定的规则插入，将来在找数据的时候，是可以有一定规则的，比较轻松的可以找到对应的数据，方便后续的处理，缺点是写的压力集中在一台服务器上面的一个表上面，因为锁的原因，插入会比较慢，而且，刚刚插入的数据往往成为热数据，读的压力也会相应的集中在一个表上面，在面临高并发的时候，往往数据库扛不住这个压力而崩溃，有人说，可以拿redis或者是memcache来抵消这个压力，不能不说，这个也是一个办法，只是说，到底缓存可以多大程度的缓解这个压力有待商榷，其次，业务上也面临问题，刚刚用户输入的数据，需要在缓存轮番插入数据库之后，才可以从数据库中获得，对于用户来说，这个消除缓存等待时间到底可以接受与否，要根据业务来分析了，如果将缓存中的数据和数据库中的数据 合并，共同呈现给用户，这个时候又面临数据融合和主从同步的一致性以及编码的复杂度等问题。\r\n\r\n第二种是将数据，用户，访问的压力，平均的分散开来，每一张表上面都会有读和写，因为将压力分散开来，这个时候就不会面临写入和读取的性能问题，分布式解决，毫无压力。但是这样的缺点就是首先数据的分布是无序的，后续如果想从数据中得到信息，会是很麻烦的事情，其次，如果万一自己当初的猜想设计不对，那就面临着数据压力和修改底层的风险。\r\n\r\n我这里有一种方案，就是可以尽可能的优化这两种方案，算是两个方法的中和。\r\n\r\n就是设置一个桶池，标记正在进行插入操作的表，如果有新的数据，就寻找是否有空闲的桶没有事情，如果一旦有某个表满了，就需要将表的表池取出对应表，同时加入新的表。\r\n\r\n这样就也可以缓解写的压力，还可以使数据有一定规则，将来查找使用','mysql 分表的思考','','inherit','open','open','','10-revision-v1','','','2014-09-25 17:36:34','2014-09-25 17:36:34','',10,'http://unasm.sinaapp.com/?p=11',0,'revision','',0),(12,1,'2015-01-07 10:07:07','2015-01-07 10:07:07','这个是为活动系统设计的一套动态分表的策略，活动数据的特点是每个活动之间的数据彼此独立，单个活动的的数据不算很大，几乎没有活动数据可以占据单独的一个表，\n\n首先在缓存中建立一个列表，标记还可以插入数据的表的集合，而在集合之外的其他的表已经是历史数据，至少不会有新的活动是数据插入，具体实现方式如下：\n\n<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/%E6%A1%B6%E6%B1%A0%E7%9A%84%E8%AE%BE%E8%AE%A1.jpg\" alt=\"\" width=\"556\" height=\"627\" />\n\n最上面的是一个一个的表，真正插入数据的地方\n\nActor 指活动，首先从列表中得到所有桶的信息，所谓桶，就是还可以插入数据的表，\n\n桶信息包括两种：表的名字，和已经插入该表的活动列表。根据这些可以获得当前每个表的数据量，以及为正在添加的活动预留的空间。\n\n因为获取的数据量是根据确实添加了的数据，之前为其他的已经结束的活动多预留的空间在这里可以重复利用。\n\n剩余的空间不足以容纳一个新的活动的时候，就放弃这个表，\n\n同时每个表的活动数量也可以一定程度的反应写压力，虽然不是很精确，但是两者存在一定的关联，如果严格的区分写压力，可以根据joyList中过去一定时间内插入的数据量来比较精确的反应写压力，然后将插入数据量放到桶信息里面，这样pa，从而达到每个表的读写压力不至于过大的目的。从所有的桶中选择最优的，作为新的活动的存储地址。\n\n这样有几个好处：\n\n第一：保证了每个活动一个表的基本原则。\n\n第二：在不出现很奇葩的情况时候，保证了每个表的数据量都在一个设置的常量上下，比如200w，不会因为每个活动数据太少造成空间浪费。\n\n第三：动态创建表，可以保证数据的长期运行\n\n第四：为真正分担读写压力预留了扩展空间。','mysql 分表之桶池','','inherit','open','open','','10-autosave-v1','','','2015-01-07 10:07:07','2015-01-07 10:07:07','',10,'http://unasm.sinaapp.com/?p=12',0,'revision','',0),(139,1,'2015-01-07 10:07:26','2015-01-07 10:07:26','这个是为活动系统设计的一套动态分表的策略，活动数据的特点是每个活动之间的数据彼此独立，单个活动的的数据不算很大，几乎没有活动数据可以占据单独的一个表，\r\n\r\n首先在缓存中建立一个列表，标记还可以插入数据的表的集合，而在集合之外的其他的表已经是历史数据，至少不会有新的活动是数据插入，具体实现方式如下：\r\n\r\n<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/%E6%A1%B6%E6%B1%A0%E7%9A%84%E8%AE%BE%E8%AE%A1.jpg\" alt=\"\" width=\"556\" height=\"627\" />\r\n\r\n最上面的是一个一个的表，真正插入数据的地方\r\n\r\nActor 指活动，首先从列表中得到所有桶的信息，所谓桶，就是还可以插入数据的表，\r\n\r\n桶信息包括两种：表的名字，和已经插入该表的活动列表。根据这些可以获得当前每个表的数据量，以及为正在添加的活动预留的空间。\r\n\r\n因为获取的数据量是根据确实添加了的数据，之前为其他的已经结束的活动多预留的空间在这里可以重复利用。\r\n\r\n剩余的空间不足以容纳一个新的活动的时候，就放弃这个表，\r\n\r\n同时每个表的活动数量也可以一定程度的反应写压力，虽然不是很精确，但是两者存在一定的关联，如果严格的区分写压力，可以根据joyList中过去一定时间内插入的数据量来比较精确的反应写压力，然后将插入数据量放到桶信息里面，作为判断的依据，从而达到每个表的读写压力不至于过大的目的。从所有的桶中选择最优的，作为新的活动的存储地址。\r\n\r\n这样有几个好处：\r\n\r\n第一：保证了每个活动一个表的基本原则。\r\n\r\n第二：在不出现很奇葩的情况时候，保证了每个表的数据量都在一个设置的常量上下，比如200w，不会因为每个活动数据太少造成空间浪费。\r\n\r\n第三：动态创建表，可以保证数据的长期运行\r\n\r\n第四：为真正分担读写压力预留了扩展空间。','mysql 分表之桶池','','inherit','open','open','','10-revision-v1','','','2015-01-07 10:07:26','2015-01-07 10:07:26','',10,'http://unasm.sinaapp.com/?p=139',0,'revision','',0),(138,1,'2015-01-07 09:32:09','2015-01-07 09:32:09','这个是为活动系统设计的一套动态分表的策略，首先在缓存中建立一个列表，标记还可以插入数据的表的集合，而在集合之外的其他的表已经是历史数据，至少不会有新的活动是数据插入，具体实现方式如下：\r\n\r\n<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/%E6%A1%B6%E6%B1%A0%E7%9A%84%E8%AE%BE%E8%AE%A1.jpg\" alt=\"\" width=\"556\" height=\"627\" />\r\n\r\n最上面的是一个一个的表，真正插入数据的地方\r\n\r\nActor 指活动，首先从列表中得到所有桶的信息，所有还可以插入数据的表的集合以及对应的每个活动的id，从而可以获得当前每个表的数据量，以及正在添加活动的数据量，我们会为每个活动预留一定的空间，所以预留的空间不足以容纳一个新的活动的时候，就放弃这个表，因为检查数据是实时的，之前多预留的空间在这里可以重复利用。\r\n\r\n同时每个表的活动数量也可以一定程度的反应写压力，虽然不是很精确，但是两者存在一定的关联，如果严格的区分写压力，可以根据joyList中过去一定时间内插入的数据量来比较精确的反应写压力，从而达到每个表的读写压力不至于过大的目的。从所有的桶中选择最优的，作为新的活动的存储地址。\r\n\r\n这样有几个好处：\r\n\r\n第一：保证了每个活动一个表的基本原则。\r\n\r\n第二：在不出现很奇葩的情况时候，保证了每个表的数据量都在一个设置的常量上下，比如200w，不会因为每个活动数据太少造成空间浪费。\r\n\r\n第三：动态创建表，可以保证数据的长期运行\r\n\r\n第四：为真正分担读写压力预留了扩展空间。','mysql 分表之桶池','','inherit','open','open','','10-revision-v1','','','2015-01-07 09:32:09','2015-01-07 09:32:09','',10,'http://unasm.sinaapp.com/?p=138',0,'revision','',0),(13,1,'2014-09-26 03:09:24','2014-09-26 03:09:24','数据分表是一个大问题,尤其是在这个号称大数据的时代。只是具体怎么分表，一直是人讨论的问题。\r\n\r\n可以严格按照时间分，一个表，一个表的填充，满了，达到200w的级别之后，接着去下一个表。还有一个方案，就是预先估计好大概可能有的数据量，分好对应的N个表，然后按照一定的规则，将数据尽量均匀的散布在所有的表中。\r\n\r\n第一种的优点是数据按照一定的规则插入，将来在找数据的时候，是可以有一定规则的，比较轻松的可以找到对应的数据，方便后续的处理，缺点是写的压力集中在一台服务器上面的一个表上面，因为锁的原因，插入会比较慢，而且，刚刚插入的数据往往成为热数据，读的压力也会相应的集中在一个表上面，在面临高并发的时候，往往数据库扛不住这个压力而崩溃，有人说，可以拿redis或者是memcache来抵消这个压力，不能不说，这个也是一个办法，只是说，到底缓存可以多大程度的缓解这个压力有待商榷，其次，业务上也面临问题，刚刚用户输入的数据，需要在缓存轮番插入数据库之后，才可以从数据库中获得，对于用户来说，这个消除缓存等待时间到底可以接受与否也是问题，有一位朋友放弃github的静态博客的原因就是无法接受长达一天才可以生效的等待时间，要根据业务来分析了，如果将缓存中的数据和数据库中的数据 合并，共同呈现给用户，这个时候又面临数据融合和主从同步的一致性以及编码的复杂度等问题。\r\n\r\n第二种是将数据，用户，访问的压力，平均的分散开来，每一张表上面都会有读和写，因为将压力分散开来，这个时候就不会面临写入和读取的性能问题，分布式解决，毫无压力。但是这样的缺点就是首先数据的分布是无序的，后续如果想从数据中得到信息，会是很麻烦的事情，其次，如果万一自己当初的猜想设计不对，那就面临着数据压力和修改底层的风险。\r\n\r\n我这里有一种方案，就是可以尽可能的优化这两种方案，算是两个方法的中和。\r\n\r\n就是设置一个桶池，标记正在进行插入操作的表，就是说，目前有是个表正在插入数据，其他的表已经是历史数据，只是起到查询保存数据的作用，将要更新的数据按照一定的规则插入到桶池里面，比如取模，或者是根据业务尽量平均的划分数据到桶里面，如果某一个表已经达到了规定的数据量，则停止向里面写入进去，同时将表从桶池中剔除，加入一个新建的表。\r\n\r\n这样就也可以缓解写的压力，还可以使数据有一定规则，将来查找虽然不可以像单表查询那样高效，但是带来的时间增加也是有限的，比起上百千个表带来的查找效率是差数量级的，通过控制桶池的大小，可以控制写入压力，压力大的时候，就增大桶池，压力小的时候，就减小桶池，数据没有达到预期不会增加表的数量，数据超出了预期，也可以无限制增加表的数量，具有很强的扩展性，因为将写的压力平均的分散了，所以读写的效率也会高出来很多。\r\n\r\n具体效果如何，还需要检验。','mysql 分表的思考','','inherit','open','open','','10-revision-v1','','','2014-09-26 03:09:24','2014-09-26 03:09:24','',10,'http://unasm.sinaapp.com/?p=13',0,'revision','',0),(14,1,'2014-09-26 09:20:23','2014-09-26 09:20:23','简单的来说，黑名单就是把一堆的数字存起来，然后检查其中是否存在某一个数字，而这个查询可以做到nlogn级别的，一般来说现实中话虽如此，也许黑名单查询会面临着很多歌用户，都需要查询他们是否在黑名单中的情况，这个时候，依旧采用每次nlogn级别的算法，就会遇到性能问题。\r\n\r\n如果采用类似归并的算法，将全部的黑名单id取出来排序，然后全部的用户id取出来，两个数组各自排序，然后从前到后m+n的扫，判断用户id是否存在在黑名单里面。这样就可以将时间从m *nlog(n) 降到max(m+n , nlog(n) , mlog(m))。\r\n<code>\r\nfunction blackList()\r\n{\r\n//做一些初始化的工作\r\nif(!$this-&gt;redis-&gt;get(\'flag\')){\r\n$this-&gt;redis-&gt;set(\"flag\" , 1);\r\nfor($i = 0;$i &lt; self::$MAX;$i++){\r\n$tmp = rand(1,10000000);\r\n$this-&gt;redis-&gt;zAdd(self::$REDISKEY , $tmp , $tmp);\r\n}\r\n}\r\n$arr = array();\r\nfor($i = 0;$i &lt; self::$CASE ; $i++){\r\n$arr[] = rand(1,10000000);\r\n}\r\n$begin = microtime(true) * 10000;\r\n$this-&gt;origin($arr);\r\n$end = microtime(true) * 10000;\r\n$end = $end - $begin;\r\necho \"一共用时{$end}&lt;br/&gt;\";\r\n$begin = microtime(true) * 10000;\r\n$this-&gt;secd($arr);\r\n$end = microtime(true) * 10000 - $begin;\r\necho \"一共用时{$end}&lt;br/&gt;\";\r\n</code>\r\n\r\n这里是调用的地方的函数\r\n<code>\r\nprotected function origin(&amp;$arr)\r\n{\r\n//计数，是否存在zset中\r\n$cnt = 0;\r\nfor($i = 0, $len = count($arr);$i &lt; $len;$i++){\r\n$tmp = $this-&gt;redis-&gt;zScore(self::$REDISKEY , $arr[$i]);\r\nif(!empty($tmp)){\r\n$cnt++;\r\n}\r\n}\r\necho \"一共有{$cnt}个数字在黑名单中&lt;br/&gt;\";\r\n}\r\n</code>\r\n这里是通过第一种方法，即每次通过向redis查询是否存在对应的id的方法\r\n<code>\r\nprotected function secd(&amp;$arr)\r\n{\r\n$blacklist = $this-&gt;redis-&gt;zRange(self::$REDISKEY , 0 , -1);\r\n$alen = count($arr);\r\n$pointer = 0;\r\n$cnt = 0;\r\nsort($arr , SORT_NUMERIC);\r\nfor($i = 0 , $len = count($blacklist);$i &lt; $len;$i++){\r\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\r\nif($arr[$pointer] == $blacklist[$i]){\r\n$cnt ++;\r\n}\r\n$pointer ++;\r\n}\r\n}\r\necho \"一共有{$cnt}个数字在黑名单中\r\n\";\r\n}\r\n</code>\r\n这里是我提出的，将所有的id获取，然后通过m+n的方式获取。\r\n下面是最关键的环节，具体性能影响如何？\r\n当用户有10w个，黑名单长为1w的时候，第一种方法84587.099609375ms，第二种方法2603.099609375ms，性能优化大约是40倍\r\n因为可以进行这种大规模查询的人都是编辑，而非用户，所以2s的等待时间应该是可以接受的\r\n\r\n通过类似的思路，可以对hash和zset以及mc进行一个对比\r\n\r\n$blacklist = array();\r\nfor($i = 0;$i &lt; self::$MAX;$i++){\r\n$blacklist[] = $this-&gt;memcache-&gt;get(self::$mc_prefix . $i);\r\n}\r\n$alen = count($arr);\r\n$pointer = 0;\r\n$cnt = 0;\r\nsort($arr , SORT_NUMERIC);\r\nsort($blacklist , SORT_NUMERIC);\r\nfor($i = 0 , $len = count($blacklist);$i &lt; $len;$i++){\r\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\r\nif($arr[$pointer] == $blacklist[$i]){\r\n$cnt ++;\r\n}\r\n$pointer ++;\r\n}\r\n}\r\necho \"一共有{$cnt}个数字在黑名单中&lt;br/&gt;\";\r\n\r\n这里是通过mc存放uid的方式进行的，效率么19783.2421875要比第一种方法大约快4倍单式依旧比第二种方法慢10倍的样子。\r\n\r\nredis还有另外一种数据结构，就是hash，理论上来说是可以做到O(1)的插入和查找，对于这种kv结构来说最是合适，因此添加对hash的判断，依旧是第一种方法，第二种方法的测试.\r\n\r\npublic function redisHash($arr)\r\n{\r\n$len = count($arr);\r\n$cnt = 0;\r\nfor($i = 0;$i &lt; $len;$i++){\r\n//$this-&gt;redis = new BaseModelRedis(SINASRV_REDIS_HOST);\r\n$tmp = $this-&gt;redis-&gt;hGet(self::$redisHash , $arr[$i]);\r\n//if(!empty($tmp)){\r\nif($tmp){\r\n$cnt++;\r\n}\r\n}\r\necho \"一共有{$cnt}个数字在黑名单中\\n\";\r\n}\r\n\r\n这个时候测得的用时是86803ms\r\n\r\npublic function redisHashSort(&amp;$arr)\r\n{\r\n$begin = microtime(true) * 10000;\r\n$blacklist = $this-&gt;redis-&gt;hKeys(self::$redisHash);\r\n$middle = microtime(true) * 10000 - $begin;\r\n$len = count($blacklist);\r\n$alen = count($arr);\r\n$pointer = 0;\r\n$cnt = 0;\r\nsort($arr , SORT_NUMERIC);\r\nsort($blacklist , SORT_NUMERIC);\r\n\r\n$middle = microtime(true) * 10000 - $begin;\r\necho \"排序之后的是时间是 : \" . $middle . \"ms的时间&lt;br/&gt;\";\r\nfor($i = 0 ;$i &lt; $len;$i++){\r\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\r\nif($arr[$pointer] == $blacklist[$i]){\r\n$cnt ++;\r\n}\r\n$pointer ++;\r\n}\r\n}\r\necho \"一共有{$cnt}个数字在黑名单中&lt;br/&gt;\";\r\n$end = microtime(true) * 10000 - $begin;\r\necho \"redis hashGetall 后sort一共用时{$end}&lt;br/&gt;&lt;br/&gt;\";\r\n}\r\n\r\n首先读取所有的数据，然后再排序，得到的时间是3000ms，这个效率差异原因，主要是集中在了二次排序上面，zset去得的数据是不需要排序的，而hash是需要排序的\r\n\r\n如果正式的模拟单次用户查询，每次都需要连接的时候，20W的用户，10000的黑名单，需要耗费时间是250000ms，就算是减小一个数量级，时间大概是25000，线性的增加','黑名单的设计与实现','','publish','open','open','','%e9%bb%91%e5%90%8d%e5%8d%95%e7%9a%84%e8%ae%be%e8%ae%a1%e4%b8%8e%e5%ae%9e%e7%8e%b0','','','2014-09-29 08:19:21','2014-09-29 08:19:21','',0,'http://unasm.sinaapp.com/?p=14',0,'post','',0),(15,1,'2014-09-26 09:20:23','2014-09-26 09:20:23','简单的来说，黑名单就是把一堆的数字存起来，然后检查其中是否存在某一个数字，而这个查询可以做到nlogn级别的，一般来说现实中话虽如此，也许黑名单查询会面临着很多歌用户，都需要查询他们是否在黑名单中的情况，这个时候，依旧采用每次nlogn级别的算法，就会遇到性能问题。\r\n\r\n如果采用类似归并的算法，将全部的黑名单id取出来排序，然后全部的用户id取出来，两个数组各自排序，然后从前到后m+n的扫，判断用户id是否存在在黑名单里面。这样就可以将时间从m *nlog(n) 降到max(m+n , nlog(n) , mlog(m))。\r\n<code>\r\nfunction blackList()\r\n{\r\n//做一些初始化的工作\r\nif(!$this-&gt;redis-&gt;get(\'flag\')){\r\n$this-&gt;redis-&gt;set(\"flag\" , 1);\r\nfor($i = 0;$i &lt; self::$MAX;$i++){\r\n$tmp = rand(1,10000000);\r\n$this-&gt;redis-&gt;zAdd(self::$REDISKEY , $tmp , $tmp);\r\n}\r\n}\r\n$arr = array();\r\nfor($i = 0;$i &lt; self::$CASE ; $i++){\r\n$arr[] = rand(1,10000000);\r\n}\r\n$begin = microtime(true) * 10000;\r\n$this-&gt;origin($arr);\r\n$end = microtime(true) * 10000;\r\n$end = $end - $begin;\r\necho \"一共用时{$end}&lt;br/&gt;\";\r\n$begin = microtime(true) * 10000;\r\n$this-&gt;secd($arr);\r\n$end = microtime(true) * 10000 - $begin;\r\necho \"一共用时{$end}&lt;br/&gt;\";\r\n</code>\r\n\r\n这里是调用的地方的函数\r\n<code>\r\nprotected function origin(&amp;$arr)\r\n{\r\n//计数，是否存在zset中\r\n$cnt = 0;\r\nfor($i = 0, $len = count($arr);$i &lt; $len;$i++){\r\n$tmp = $this-&gt;redis-&gt;zScore(self::$REDISKEY , $arr[$i]);\r\nif(!empty($tmp)){\r\n$cnt++;\r\n}\r\n}\r\necho \"一共有{$cnt}个数字在黑名单中&lt;br/&gt;\";\r\n}\r\n</code>\r\n这里是通过第一种方法，即每次通过向redis查询是否存在对应的id的方法\r\n<code>\r\nprotected function secd(&amp;$arr)\r\n{\r\n$blacklist = $this-&gt;redis-&gt;zRange(self::$REDISKEY , 0 , -1);\r\n$alen = count($arr);\r\n$pointer = 0;\r\n$cnt = 0;\r\nsort($arr , SORT_NUMERIC);\r\nfor($i = 0 , $len = count($blacklist);$i &lt; $len;$i++){\r\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\r\nif($arr[$pointer] == $blacklist[$i]){\r\n$cnt ++;\r\n}\r\n$pointer ++;\r\n}\r\n}\r\necho \"一共有{$cnt}个数字在黑名单中\r\n\";\r\n}\r\n</code>\r\n这里是我提出的，将所有的id获取，然后通过m+n的方式获取。\r\n下面是最关键的环节，具体性能影响如何？\r\n当用户有10w个，黑名单长为1w的时候，第一种方法84587.099609375ms，第二种方法2703.099609375ms，性能优化大约是40倍\r\n因为可以进行这种大规模查询的人都是编辑，而非用户，所以2s的等待时间应该是可以接受的','黑名单的设计与实现','','inherit','open','open','','14-revision-v1','','','2014-09-26 09:20:23','2014-09-26 09:20:23','',14,'http://unasm.sinaapp.com/?p=15',0,'revision','',0),(17,1,'2014-09-29 08:18:19','2014-09-29 08:18:19','简单的来说，黑名单就是把一堆的数字存起来，然后检查其中是否存在某一个数字，而这个查询可以做到nlogn级别的，一般来说现实中话虽如此，也许黑名单查询会面临着很多歌用户，都需要查询他们是否在黑名单中的情况，这个时候，依旧采用每次nlogn级别的算法，就会遇到性能问题。\n\n如果采用类似归并的算法，将全部的黑名单id取出来排序，然后全部的用户id取出来，两个数组各自排序，然后从前到后m+n的扫，判断用户id是否存在在黑名单里面。这样就可以将时间从m *nlog(n) 降到max(m+n , nlog(n) , mlog(m))。\n<code>\nfunction blackList()\n{\n//做一些初始化的工作\nif(!$this-&gt;redis-&gt;get(\'flag\')){\n$this-&gt;redis-&gt;set(\"flag\" , 1);\nfor($i = 0;$i &lt; self::$MAX;$i++){\n$tmp = rand(1,10000000);\n$this-&gt;redis-&gt;zAdd(self::$REDISKEY , $tmp , $tmp);\n}\n}\n$arr = array();\nfor($i = 0;$i &lt; self::$CASE ; $i++){\n$arr[] = rand(1,10000000);\n}\n$begin = microtime(true) * 10000;\n$this-&gt;origin($arr);\n$end = microtime(true) * 10000;\n$end = $end - $begin;\necho \"一共用时{$end}&lt;br/&gt;\";\n$begin = microtime(true) * 10000;\n$this-&gt;secd($arr);\n$end = microtime(true) * 10000 - $begin;\necho \"一共用时{$end}&lt;br/&gt;\";\n</code>\n\n这里是调用的地方的函数\n<code>\nprotected function origin(&amp;$arr)\n{\n//计数，是否存在zset中\n$cnt = 0;\nfor($i = 0, $len = count($arr);$i &lt; $len;$i++){\n$tmp = $this-&gt;redis-&gt;zScore(self::$REDISKEY , $arr[$i]);\nif(!empty($tmp)){\n$cnt++;\n}\n}\necho \"一共有{$cnt}个数字在黑名单中&lt;br/&gt;\";\n}\n</code>\n这里是通过第一种方法，即每次通过向redis查询是否存在对应的id的方法\n<code>\nprotected function secd(&amp;$arr)\n{\n$blacklist = $this-&gt;redis-&gt;zRange(self::$REDISKEY , 0 , -1);\n$alen = count($arr);\n$pointer = 0;\n$cnt = 0;\nsort($arr , SORT_NUMERIC);\nfor($i = 0 , $len = count($blacklist);$i &lt; $len;$i++){\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\nif($arr[$pointer] == $blacklist[$i]){\n$cnt ++;\n}\n$pointer ++;\n}\n}\necho \"一共有{$cnt}个数字在黑名单中\n\";\n}\n</code>\n这里是我提出的，将所有的id获取，然后通过m+n的方式获取。\n下面是最关键的环节，具体性能影响如何？\n当用户有10w个，黑名单长为1w的时候，第一种方法84587.099609375ms，第二种方法2603.099609375ms，性能优化大约是40倍\n因为可以进行这种大规模查询的人都是编辑，而非用户，所以2s的等待时间应该是可以接受的\n\n通过类似的思路，可以对hash和zset以及mc进行一个对比\n\n$blacklist = array();\nfor($i = 0;$i &lt; self::$MAX;$i++){\n$blacklist[] = $this-&gt;memcache-&gt;get(self::$mc_prefix . $i);\n}\n$alen = count($arr);\n$pointer = 0;\n$cnt = 0;\nsort($arr , SORT_NUMERIC);\nsort($blacklist , SORT_NUMERIC);\nfor($i = 0 , $len = count($blacklist);$i &lt; $len;$i++){\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\nif($arr[$pointer] == $blacklist[$i]){\n$cnt ++;\n}\n$pointer ++;\n}\n}\necho \"一共有{$cnt}个数字在黑名单中&lt;br/&gt;\";\n\n这里是通过mc存放uid的方式进行的，效率么19783.2421875要比第一种方法大约快4倍单式依旧比第二种方法慢10倍的样子。\n\nredis还有另外一种数据结构，就是hash，理论上来说是可以做到O(1)的插入和查找，对于这种kv结构来说最是合适，因此添加对hash的判断，依旧是第一种方法，第二种方法的测试.\n\npublic function redisHash($arr)\n{\n$len = count($arr);\n$cnt = 0;\nfor($i = 0;$i &lt; $len;$i++){\n//$this-&gt;redis = new BaseModelRedis(SINASRV_REDIS_HOST);\n$tmp = $this-&gt;redis-&gt;hGet(self::$redisHash , $arr[$i]);\n//if(!empty($tmp)){\nif($tmp){\n$cnt++;\n}\n}\necho \"一共有{$cnt}个数字在黑名单中\\n\";\n}\n\n这个时候测得的用时是86803ms\n\npublic function redisHashSort(&amp;$arr)\n{\n$begin = microtime(true) * 10000;\n$blacklist = $this-&gt;redis-&gt;hKeys(self::$redisHash);\n$middle = microtime(true) * 10000 - $begin;\n$len = count($blacklist);\n$alen = count($arr);\n$pointer = 0;\n$cnt = 0;\nsort($arr , SORT_NUMERIC);\nsort($blacklist , SORT_NUMERIC);\n\n$middle = microtime(true) * 10000 - $begin;\necho \"排序之后的是时间是 : \" . $middle . \"ms的时间&lt;br/&gt;\";\nfor($i = 0 ;$i &lt; $len;$i++){\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\nif($arr[$pointer] == $blacklist[$i]){\n$cnt ++;\n}\n$pointer ++;\n}\n}\necho \"一共有{$cnt}个数字在黑名单中&lt;br/&gt;\";\n$end = microtime(true) * 10000 - $begin;\necho \"redis hashGetall 后sort一共用时{$end}&lt;br/&gt;&lt;br/&gt;\";\n}\n\n首先读取所有的数据，然后再排序，得到的时间是3000ms，这个效率差异原因，主要是集中在了二次排序上面，zset去得的数据是不需要排序的，而hash是需要排序的\n\n如果正式的模拟单次用户查询，每次都需要连接的时候，20W的用户，10000的黑名单，需要耗费时间是25000ms','黑名单的设计与实现','','inherit','open','open','','14-autosave-v1','','','2014-09-29 08:18:19','2014-09-29 08:18:19','',14,'http://unasm.sinaapp.com/?p=17',0,'revision','',0),(18,1,'2014-09-29 08:19:21','2014-09-29 08:19:21','简单的来说，黑名单就是把一堆的数字存起来，然后检查其中是否存在某一个数字，而这个查询可以做到nlogn级别的，一般来说现实中话虽如此，也许黑名单查询会面临着很多歌用户，都需要查询他们是否在黑名单中的情况，这个时候，依旧采用每次nlogn级别的算法，就会遇到性能问题。\r\n\r\n如果采用类似归并的算法，将全部的黑名单id取出来排序，然后全部的用户id取出来，两个数组各自排序，然后从前到后m+n的扫，判断用户id是否存在在黑名单里面。这样就可以将时间从m *nlog(n) 降到max(m+n , nlog(n) , mlog(m))。\r\n<code>\r\nfunction blackList()\r\n{\r\n//做一些初始化的工作\r\nif(!$this-&gt;redis-&gt;get(\'flag\')){\r\n$this-&gt;redis-&gt;set(\"flag\" , 1);\r\nfor($i = 0;$i &lt; self::$MAX;$i++){\r\n$tmp = rand(1,10000000);\r\n$this-&gt;redis-&gt;zAdd(self::$REDISKEY , $tmp , $tmp);\r\n}\r\n}\r\n$arr = array();\r\nfor($i = 0;$i &lt; self::$CASE ; $i++){\r\n$arr[] = rand(1,10000000);\r\n}\r\n$begin = microtime(true) * 10000;\r\n$this-&gt;origin($arr);\r\n$end = microtime(true) * 10000;\r\n$end = $end - $begin;\r\necho \"一共用时{$end}&lt;br/&gt;\";\r\n$begin = microtime(true) * 10000;\r\n$this-&gt;secd($arr);\r\n$end = microtime(true) * 10000 - $begin;\r\necho \"一共用时{$end}&lt;br/&gt;\";\r\n</code>\r\n\r\n这里是调用的地方的函数\r\n<code>\r\nprotected function origin(&amp;$arr)\r\n{\r\n//计数，是否存在zset中\r\n$cnt = 0;\r\nfor($i = 0, $len = count($arr);$i &lt; $len;$i++){\r\n$tmp = $this-&gt;redis-&gt;zScore(self::$REDISKEY , $arr[$i]);\r\nif(!empty($tmp)){\r\n$cnt++;\r\n}\r\n}\r\necho \"一共有{$cnt}个数字在黑名单中&lt;br/&gt;\";\r\n}\r\n</code>\r\n这里是通过第一种方法，即每次通过向redis查询是否存在对应的id的方法\r\n<code>\r\nprotected function secd(&amp;$arr)\r\n{\r\n$blacklist = $this-&gt;redis-&gt;zRange(self::$REDISKEY , 0 , -1);\r\n$alen = count($arr);\r\n$pointer = 0;\r\n$cnt = 0;\r\nsort($arr , SORT_NUMERIC);\r\nfor($i = 0 , $len = count($blacklist);$i &lt; $len;$i++){\r\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\r\nif($arr[$pointer] == $blacklist[$i]){\r\n$cnt ++;\r\n}\r\n$pointer ++;\r\n}\r\n}\r\necho \"一共有{$cnt}个数字在黑名单中\r\n\";\r\n}\r\n</code>\r\n这里是我提出的，将所有的id获取，然后通过m+n的方式获取。\r\n下面是最关键的环节，具体性能影响如何？\r\n当用户有10w个，黑名单长为1w的时候，第一种方法84587.099609375ms，第二种方法2603.099609375ms，性能优化大约是40倍\r\n因为可以进行这种大规模查询的人都是编辑，而非用户，所以2s的等待时间应该是可以接受的\r\n\r\n通过类似的思路，可以对hash和zset以及mc进行一个对比\r\n\r\n$blacklist = array();\r\nfor($i = 0;$i &lt; self::$MAX;$i++){\r\n$blacklist[] = $this-&gt;memcache-&gt;get(self::$mc_prefix . $i);\r\n}\r\n$alen = count($arr);\r\n$pointer = 0;\r\n$cnt = 0;\r\nsort($arr , SORT_NUMERIC);\r\nsort($blacklist , SORT_NUMERIC);\r\nfor($i = 0 , $len = count($blacklist);$i &lt; $len;$i++){\r\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\r\nif($arr[$pointer] == $blacklist[$i]){\r\n$cnt ++;\r\n}\r\n$pointer ++;\r\n}\r\n}\r\necho \"一共有{$cnt}个数字在黑名单中&lt;br/&gt;\";\r\n\r\n这里是通过mc存放uid的方式进行的，效率么19783.2421875要比第一种方法大约快4倍单式依旧比第二种方法慢10倍的样子。\r\n\r\nredis还有另外一种数据结构，就是hash，理论上来说是可以做到O(1)的插入和查找，对于这种kv结构来说最是合适，因此添加对hash的判断，依旧是第一种方法，第二种方法的测试.\r\n\r\npublic function redisHash($arr)\r\n{\r\n$len = count($arr);\r\n$cnt = 0;\r\nfor($i = 0;$i &lt; $len;$i++){\r\n//$this-&gt;redis = new BaseModelRedis(SINASRV_REDIS_HOST);\r\n$tmp = $this-&gt;redis-&gt;hGet(self::$redisHash , $arr[$i]);\r\n//if(!empty($tmp)){\r\nif($tmp){\r\n$cnt++;\r\n}\r\n}\r\necho \"一共有{$cnt}个数字在黑名单中\\n\";\r\n}\r\n\r\n这个时候测得的用时是86803ms\r\n\r\npublic function redisHashSort(&amp;$arr)\r\n{\r\n$begin = microtime(true) * 10000;\r\n$blacklist = $this-&gt;redis-&gt;hKeys(self::$redisHash);\r\n$middle = microtime(true) * 10000 - $begin;\r\n$len = count($blacklist);\r\n$alen = count($arr);\r\n$pointer = 0;\r\n$cnt = 0;\r\nsort($arr , SORT_NUMERIC);\r\nsort($blacklist , SORT_NUMERIC);\r\n\r\n$middle = microtime(true) * 10000 - $begin;\r\necho \"排序之后的是时间是 : \" . $middle . \"ms的时间&lt;br/&gt;\";\r\nfor($i = 0 ;$i &lt; $len;$i++){\r\nwhile($pointer &lt; $alen &amp;&amp; $arr[$pointer] &lt;= $blacklist[$i]){\r\nif($arr[$pointer] == $blacklist[$i]){\r\n$cnt ++;\r\n}\r\n$pointer ++;\r\n}\r\n}\r\necho \"一共有{$cnt}个数字在黑名单中&lt;br/&gt;\";\r\n$end = microtime(true) * 10000 - $begin;\r\necho \"redis hashGetall 后sort一共用时{$end}&lt;br/&gt;&lt;br/&gt;\";\r\n}\r\n\r\n首先读取所有的数据，然后再排序，得到的时间是3000ms，这个效率差异原因，主要是集中在了二次排序上面，zset去得的数据是不需要排序的，而hash是需要排序的\r\n\r\n如果正式的模拟单次用户查询，每次都需要连接的时候，20W的用户，10000的黑名单，需要耗费时间是250000ms，就算是减小一个数量级，时间大概是25000，线性的增加','黑名单的设计与实现','','inherit','open','open','','14-revision-v1','','','2014-09-29 08:19:21','2014-09-29 08:19:21','',14,'http://unasm.sinaapp.com/?p=18',0,'revision','',0),(19,1,'2014-09-30 06:49:06','2014-09-30 06:49:06','使用zsh自动补全svn的时候的报错   _arguments:comparguments:208: invalid argument: ARG  ，这样在zsh下面使用svn是没有办法自动补全的，这就是很大程度上失去了zsh本来的优势，解决方法是在/usr/share/zsh/x.x.x/functions/_subversion  文件中修改33行和121行的arg/:arg: 替换成为(arg|ARG)/:arg: ，然后重新使用zsh就可以了，svn 的自动补全毫无压力了','zsh 无法自动补全svn的问题','','publish','open','open','','zsh-%e6%97%a0%e6%b3%95%e8%87%aa%e5%8a%a8%e8%a1%a5%e5%85%a8svn%e7%9a%84%e9%97%ae%e9%a2%98','','','2014-09-30 06:49:06','2014-09-30 06:49:06','',0,'http://unasm.sinaapp.com/?p=19',0,'post','',0),(20,1,'2014-09-30 06:49:06','2014-09-30 06:49:06','使用zsh自动补全svn的时候的报错   _arguments:comparguments:208: invalid argument: ARG  ，这样在zsh下面使用svn是没有办法自动补全的，这就是很大程度上失去了zsh本来的优势，解决方法是在/usr/share/zsh/x.x.x/functions/_subversion  文件中修改33行和121行的arg/:arg: 替换成为(arg|ARG)/:arg: ，然后重新使用zsh就可以了，svn 的自动补全毫无压力了','zsh 无法自动补全svn的问题','','inherit','open','open','','19-revision-v1','','','2014-09-30 06:49:06','2014-09-30 06:49:06','',19,'http://unasm.sinaapp.com/?p=20',0,'revision','',0),(22,1,'2014-10-05 08:12:38','2014-10-05 08:12:38','好几天没有更新博客了，这样不行的，要养成习惯。\r\n\r\nredis的底层我还没有研究透彻，只能说研究 了一部分，本来打算看完了之后在写的，不过，为了养成习惯，也为了预防可能的惰性和迷失。\r\n\r\nredis 的字符串有点意思，对于运行在服务器上面的信息来说，弱类型很多时候是难免的，所以redis中处理字符的情况远远要大于处理int的情况，所以字符的操作必须优化，而众所周知，c的char[]可是不怎么强大的，有两个操作比较消耗资源，一个是append 字符的时候，一个是计算长度的时候，redis提出了一个叫做sds的东西，就是一个结构体，里面包含三个值,一个记录当前字符的长度length，一个是char数组中还剩下空闲的长度free，一个是字符存储地址，里面包含两种东西，一个是申请了，但是空闲的空间，由free标记，一个是已经存储了的字符长度，由length标记，这样，就可以将字符操作比较消耗资源的两个操作以比较小的代价给解决了。free标记的是空闲的内存，也就是说每次申请内存的时候，redis不会按照刚刚好来申请，而是根据一定的策略申请了多余的内存，这样的优点是以后再次需要内存的时候u，很大的可能性就是不会再次申请了，加快执行的效率，append的时候申请内存是按照用了的字符长度，length的二倍的大小申请的，如果已经使用的内存超过了1MB，那么以后每次申请的内存就是1MB，min（1MB,length），这样内存分配也有的放矢了，sds的使用遍布了redis的底层。\r\n\r\n第二个是ziplist 压缩列表，本来以为是很神奇的东西，结果发现跟我毕业设计差不多，简而言之，就是通过一系列精确到位的二进制定义保存字符串列表。开头zlbytes zltail zllen构成ziplist的头，zlbytes，zltail四个字节，zllen两个字节，这十个字节构成了ziplist的头，用来统计和查找表尾节点，zlbytes是表示ziplist目前占用的字节数，zltails到达表尾节点的偏移量，可以不用遍历整个ziplist的时候，找到表尾节点，zllen记录了ziplist的节点数。之后接着的位就是每个节点的具体内容，每个节点里头包括了pre_entry_length ,coding,length,content几个,pre_entype_length记录了前一个节点的长度，是为了方便调转到上一个节点,encoding表示在content里面记录的是整形还是char，什么类型的char，length记录了content的长度，类似于sds的length，最后就是保存内容的content。\r\n\r\n还有一个就是让人难以评判的结构，就是整数集和set，应用场景是元素全部是整数，且数量不是很多的时候（512个，可以通过配置修改）。简而言之，把int拆开使用，一共用来存储三种数据，int16,int32,int64 ，这样就节省了空间，一个int64就可以存储4个或者是2个数据了，添加数据的时候，按照有序数组来，需要O(n)的将插入位置之后的数据向后移动一个位置，因为总共的数量不会超过512个，所以是效率时间不会是太大的问题，当元素不再是整数的时候，或者是超过512的时候，存储结构就变成hash。','redis底层实现第一步','','publish','open','open','','redis%e5%ba%95%e5%b1%82%e5%ae%9e%e7%8e%b0%e7%ac%ac%e4%b8%80%e6%ad%a5','','','2014-10-21 09:06:19','2014-10-21 09:06:19','',0,'http://unasm.sinaapp.com/?p=22',0,'post','',0),(23,1,'2014-10-05 08:12:38','2014-10-05 08:12:38','好几天没有更新博客了，这样不行的，要养成习惯。\r\n\r\nredis的底层我还没有研究透彻，只能说研究 了一部分，本来打算看完了之后在写的，不过，为了养成习惯，也为了预防可能的惰性和迷失。\r\n\r\nredis 的字符串有点意思，对于运行在服务器上面的信息来说，弱类型很多时候是难免的，所以redis中处理字符的情况远远要大于处理int的情况，所以字符的操作必须优化，而众所周知，c的char[]可是不怎么强大的，有两个操作比较消耗资源，一个是append 字符的时候，一个是计算长度的时候，redis提出了一个叫做sds的东西，就是一个结构体，里面包含三个值,一个记录当前字符的长度length，一个是char数组中还剩下空闲的长度free，一个是字符存储地址，里面包含两种东西，一个是申请了，但是空闲的空间，由free标记，一个是已经存储了的字符长度，由length标记，这样，就可以将字符操作比较消耗资源的两个操作以比较小的代价给解决了，而且因为append的时候申请内存是按照用了的字符长度的二倍申请的，这样内存分配也有的放矢了，sds的使用遍布了正则redis的底层。\r\n\r\n第二个是ziplist 压缩列表，本来以为是很神奇的东西，结果发现跟我毕业设计差不多，简而言之，就是通过一系列精确到位的二进制定义保存字符串列表。开头zlbytes zltail zllen构成ziplist的头，zlbytes，zltail四个字节，zllen两个字节，这十个字节构成了ziplist的头，用来统计和查找表尾节点，zlbytes是表示ziplist目前占用的字节数，zltails到达表尾节点的偏移量，可以不用遍历整个ziplist的时候，找到表尾节点，zllen记录了ziplist的节点数。之后接着的位就是每个节点的具体内容，每个节点里头包括了pre_entry_length ,coding,length,content几个,pre_entype_length记录了前一个节点的长度，是为了方便调转到上一个节点,encoding表示在content里面记录的是整形还是char，什么类型的char，length记录了content的长度，类似于sds的length，最后就是保存内容的content。\r\n\r\n还有一个就是让人难以评判的结构，就是整数集和，应用场景是元素全部是整数，且数量不是很多的时候。简而言之，就是把int型的每个字节8位看成一个单位，用来存放内容，比如一个int64,就可以拆分为8个数字的存储地，或者是四个数字的存储地，当这些数据集和中最大的那个小于8位数字，那就可以用一个int存储8个集合中元素，如果最大的那个元素是8-16位的，那就可以用一个int64存储四个元素，节省了空间，不过效率和应用场景有待商榷','redis底层实现第一步','','inherit','open','open','','22-revision-v1','','','2014-10-05 08:12:38','2014-10-05 08:12:38','',22,'http://unasm.sinaapp.com/?p=23',0,'revision','',0),(24,1,'2014-10-06 17:26:32','2014-10-06 17:26:32','redis是会阻塞的，当一个list pop但是list却为空的时候，就会发生阻塞，redis会阻塞客户端，直到有新元素进入list，或者是超时，或者是断电重启等强制性的结束，这个时候才会解除数据库对应的key的阻塞。\r\n\r\n解除阻塞也很简单，就是redis 所有的阻塞的key都会在一个db[i]-&gt;block_keys这个数组中，i表示阻塞的数据库编号，block_keys存放被阻塞的key，然后再通过链表实现一个阻塞的客户端的列表，当新元素入list的时候，就会新建立一个ready_list，存放db编号和key，然后redis开始对ready_list 作一个事件列表，一个一个的将list key对应的阻塞了的客户端进行处理返回阻塞原语，直到列表为空，解除block_keys的阻塞状态，将ready_list表头元素出队列，然后处理ready_list中的下一个元素。','redis的阻塞机制','','publish','open','open','','redis%e7%9a%84%e9%98%bb%e5%a1%9e%e6%9c%ba%e5%88%b6','','','2014-10-06 17:26:32','2014-10-06 17:26:32','',0,'http://unasm.sinaapp.com/?p=24',0,'post','',0),(25,1,'2014-10-06 17:26:32','2014-10-06 17:26:32','redis是会阻塞的，当一个list pop但是list却为空的时候，就会发生阻塞，redis会阻塞客户端，直到有新元素进入list，或者是超时，或者是断电重启等强制性的结束，这个时候才会解除数据库对应的key的阻塞。\r\n\r\n解除阻塞也很简单，就是redis 所有的阻塞的key都会在一个db[i]-&gt;block_keys这个数组中，i表示阻塞的数据库编号，block_keys存放被阻塞的key，然后再通过链表实现一个阻塞的客户端的列表，当新元素入list的时候，就会新建立一个ready_list，存放db编号和key，然后redis开始对ready_list 作一个事件列表，一个一个的将list key对应的阻塞了的客户端进行处理返回阻塞原语，直到列表为空，解除block_keys的阻塞状态，将ready_list表头元素出队列，然后处理ready_list中的下一个元素。','redis的阻塞机制','','inherit','open','open','','24-revision-v1','','','2014-10-06 17:26:32','2014-10-06 17:26:32','',24,'http://unasm.sinaapp.com/?p=25',0,'revision','',0),(26,1,'2014-10-09 02:32:43','2014-10-09 02:32:43','redis的事件分为两种，文本事件和时间事件，文本事件和更新文本有关，aof和rdb的数据保存和文本追加都会用到文本事件，对客户端的读和写也是通过文本事件来完成的。\r\n\r\n时间事件主要是通过链表的方式，通过在链表里面保存时间戳，然后定时扫描链表来完成一些特定的时间类型的工作，比如定期清理过期的键，更新内存的数据，或者是统计日志，等等吧','redis的事件机制','','publish','open','open','','redis%e7%9a%84%e4%ba%8b%e4%bb%b6%e6%9c%ba%e5%88%b6','','','2014-10-09 02:32:43','2014-10-09 02:32:43','',0,'http://unasm.sinaapp.com/?p=26',0,'post','',0),(27,1,'2014-10-09 02:32:43','2014-10-09 02:32:43','redis的事件分为两种，文本事件和时间事件，文本事件和更新文本有关，aof和rdb的数据保存和文本追加都会用到文本事件，对客户端的读和写也是通过文本事件来完成的。\r\n\r\n时间事件主要是通过链表的方式，通过在链表里面保存时间戳，然后定时扫描链表来完成一些特定的时间类型的工作，比如定期清理过期的键，更新内存的数据，或者是统计日志，等等吧','redis的事件机制','','inherit','open','open','','26-revision-v1','','','2014-10-09 02:32:43','2014-10-09 02:32:43','',26,'http://unasm.sinaapp.com/?p=27',0,'revision','',0),(28,1,'2014-10-09 13:30:46','2014-10-09 13:30:46','跳跃表，又名skiplist，是一种虽然不如红黑树，AVL树等自平衡树强大，却可以在查找，删除，增加达到（logn）^2的效率的一种表，并且可以O(n)的实现区间数据的范围查找获取，性能上不属于平衡树，编码却很更加简单，可以称得上是一种物美价廉的数据结构。我曾经手写一次红黑树，只是完成了插入，查找的功能，已经是160行代码量了，加上删除，估计要230左右的代码量吧。还是有点复杂的。\r\n\r\n常见的两种数据集合结构，一种是链表，一种是数组，前者在查找上的效率无法忍受，却在添加上很方便，后者可以做到随机查找，但是增删数据却是很麻烦，跳跃表可以理解为是链表的增强版，通过多个维度的有序链表实现查询上的优化，具体结构定义如下。\r\n\r\nclass SkipListNode{\r\n\r\nElement data;//用来存储数据\r\n\r\nSkipListNode forward[];//用来存储指针节点\r\n\r\nSkipListNode(Element d , int level)\r\n\r\n{\r\n\r\ndata = d;\r\n\r\nforward = new skipListNode[level+1];\r\n\r\n}\r\n\r\n}\r\n\r\nclass SkipList{\r\n\r\nint maxLevel;\r\n\r\nSkipListNode header;\r\n\r\nSkipListNode tail;\r\n\r\nSkipList(int maxLev)\r\n\r\n{\r\n\r\nmaxLevel = maxLev;\r\n\r\nheaer = new SkipListNode(null , maxLevel);\r\n\r\ntail = new SkipListNode(maxValue , maxLevel);\r\n\r\nfor(int i = 0; i &lt;= maxLevel;i++){\r\n\r\nheader.forward[i] = tail;\r\n\r\n}\r\n\r\n}\r\n\r\n}\r\n\r\n由以上可以看到，跳跃表是在header和tail之间构成一个区间，一个链表构成的区间，就像两堵墙 ， 这个链表是有序的，保证链表的最小的值都比header开头的大，最大的数组也不会超过maxValue，这样加上header,tail在一起，是一个完整的链表，而以后无论节点如何添加，都不会大于tail，都不会小于header，这点很重要。\r\n\r\n在上面的class中可以看到，  forward = new skipListNode[level+1]，forward指针纵向的构成一个结构体数组，而forward中每一个节点指向的结构体节点本身也有forward指向下一个结构体节点，这样就可以和header以及tail构成横向的链表，查找的时候，会在maxLevel开始查找，如果你把它理解成墙的话，就是在墙头开始查找，因为是从墙头，这个时候遍历的节点数目是统计意义上的(1/2)^Level * k (k是元素个数，level是所处的节点数)，在上层找到一个区间，然后进入下一层，根据在上一层的时候找到的已经缩小了的区间，在第二层的链表中，进一步缩小空间，一直进入到最后一层，唯一确定找到的节点。\r\n\r\n插入的方式很奇葩，也很让人意外，第一次遇到这种统计意义上的效率，理解上多少有点难以接受。根据上面的内容，找到具体要插入的位置，然后具体这个节点层级是多少，是通过摇色子来决定的，具体算法如下\r\n\r\nint generateRandomLevel(){\r\n\r\nint level = 0;\r\n\r\nwhile(newlevel &lt; maxLevel &amp;&amp; Math.random() &lt; 0.5) level++;\r\n\r\nreturn level;\r\n\r\n}\r\n\r\n这个就是那篇英文文档最后留下的如何确定新插入节点的算法，就是摇色子，当时不理解，想骂娘。其实是对的。从概率上来说，当前一共有k个节点，那么，最底层的链表长度就是k嘛，然后第一层链表长度，就应该是1/2 * k ，第二层长度就应该是(1/2)^2 *ｋ，而这个生成函数，可以再概率上保证每一层的链表的长度是对的，剩下的，就是要求这些链表的分布尽量的均匀离散，跳跃表没有保证掘对的离散平均，这点让我在个人揣测的时候百思不得其解到底如何做到绝对的离散，实际上，保证绝对的分布均匀是需要很大的代价的，需要向平衡树那样，跳跃表保证了统计意义上的均匀，因为统计意义上的个数毫无规律的分布在整个区间内，本身就是符合统计意义上离散的。\r\n\r\n&nbsp;\r\n\r\n==========================\r\n\r\n改天上图，整理\r\n\r\n=========================\r\n\r\n&nbsp;\r\n\r\n它的最底层，和我们大众所知的单向链表没有什么区别，第二层\r\n\r\n为了看这个skiplist，找了一篇10多页的英文文档啃，结果前5页没看懂说什么，后几页还不错，把查找讲的很透彻，插入却一句带过，fuck，顿时想骂娘，最后还是找人博客看明白怎么回事。算法太弱了，一怒之下将麻省的算法课全部下载下来，争取一两个月内啃完','redis之zset的底层结构-->跳跃表','','publish','open','open','','redis%e4%b9%8bzset%e7%9a%84%e5%ba%95%e5%b1%82%e7%bb%93%e6%9e%84-%e8%b7%b3%e8%b7%83%e8%a1%a8','','','2014-10-09 13:30:46','2014-10-09 13:30:46','',0,'http://unasm.sinaapp.com/?p=28',0,'post','',0),(29,1,'2014-10-09 13:30:46','2014-10-09 13:30:46','跳跃表，又名skiplist，是一种虽然不如红黑树，AVL树等自平衡树强大，却可以在查找，删除，增加达到（logn）^2的效率的一种表，并且可以O(n)的实现区间数据的范围查找获取，性能上不属于平衡树，编码却很更加简单，可以称得上是一种物美价廉的数据结构。我曾经手写一次红黑树，只是完成了插入，查找的功能，已经是160行代码量了，加上删除，估计要230左右的代码量吧。还是有点复杂的。\r\n\r\n常见的两种数据集合结构，一种是链表，一种是数组，前者在查找上的效率无法忍受，却在添加上很方便，后者可以做到随机查找，但是增删数据却是很麻烦，跳跃表可以理解为是链表的增强版，通过多个维度的有序链表实现查询上的优化，具体结构定义如下。\r\n\r\nclass SkipListNode{\r\n\r\nElement data;//用来存储数据\r\n\r\nSkipListNode forward[];//用来存储指针节点\r\n\r\nSkipListNode(Element d , int level)\r\n\r\n{\r\n\r\ndata = d;\r\n\r\nforward = new skipListNode[level+1];\r\n\r\n}\r\n\r\n}\r\n\r\nclass SkipList{\r\n\r\nint maxLevel;\r\n\r\nSkipListNode header;\r\n\r\nSkipListNode tail;\r\n\r\nSkipList(int maxLev)\r\n\r\n{\r\n\r\nmaxLevel = maxLev;\r\n\r\nheaer = new SkipListNode(null , maxLevel);\r\n\r\ntail = new SkipListNode(maxValue , maxLevel);\r\n\r\nfor(int i = 0; i &lt;= maxLevel;i++){\r\n\r\nheader.forward[i] = tail;\r\n\r\n}\r\n\r\n}\r\n\r\n}\r\n\r\n由以上可以看到，跳跃表是在header和tail之间构成一个区间，一个链表构成的区间，就像两堵墙 ， 这个链表是有序的，保证链表的最小的值都比header开头的大，最大的数组也不会超过maxValue，这样加上header,tail在一起，是一个完整的链表，而以后无论节点如何添加，都不会大于tail，都不会小于header，这点很重要。\r\n\r\n在上面的class中可以看到，  forward = new skipListNode[level+1]，forward指针纵向的构成一个结构体数组，而forward中每一个节点指向的结构体节点本身也有forward指向下一个结构体节点，这样就可以和header以及tail构成横向的链表，查找的时候，会在maxLevel开始查找，如果你把它理解成墙的话，就是在墙头开始查找，因为是从墙头，这个时候遍历的节点数目是统计意义上的(1/2)^Level * k (k是元素个数，level是所处的节点数)，在上层找到一个区间，然后进入下一层，根据在上一层的时候找到的已经缩小了的区间，在第二层的链表中，进一步缩小空间，一直进入到最后一层，唯一确定找到的节点。\r\n\r\n插入的方式很奇葩，也很让人意外，第一次遇到这种统计意义上的效率，理解上多少有点难以接受。根据上面的内容，找到具体要插入的位置，然后具体这个节点层级是多少，是通过摇色子来决定的，具体算法如下\r\n\r\nint generateRandomLevel(){\r\n\r\nint level = 0;\r\n\r\nwhile(newlevel &lt; maxLevel &amp;&amp; Math.random() &lt; 0.5) level++;\r\n\r\nreturn level;\r\n\r\n}\r\n\r\n这个就是那篇英文文档最后留下的如何确定新插入节点的算法，就是摇色子，当时不理解，想骂娘。其实是对的。从概率上来说，当前一共有k个节点，那么，最底层的链表长度就是k嘛，然后第一层链表长度，就应该是1/2 * k ，第二层长度就应该是(1/2)^2 *ｋ，而这个生成函数，可以再概率上保证每一层的链表的长度是对的，剩下的，就是要求这些链表的分布尽量的均匀离散，跳跃表没有保证掘对的离散平均，这点让我在个人揣测的时候百思不得其解到底如何做到绝对的离散，实际上，保证绝对的分布均匀是需要很大的代价的，需要向平衡树那样，跳跃表保证了统计意义上的均匀，因为统计意义上的个数毫无规律的分布在整个区间内，本身就是符合统计意义上离散的。\r\n\r\n&nbsp;\r\n\r\n==========================\r\n\r\n改天上图，整理\r\n\r\n=========================\r\n\r\n&nbsp;\r\n\r\n它的最底层，和我们大众所知的单向链表没有什么区别，第二层\r\n\r\n为了看这个skiplist，找了一篇10多页的英文文档啃，结果前5页没看懂说什么，后几页还不错，把查找讲的很透彻，插入却一句带过，fuck，顿时想骂娘，最后还是找人博客看明白怎么回事。算法太弱了，一怒之下将麻省的算法课全部下载下来，争取一两个月内啃完','redis之zset的底层结构-->跳跃表','','inherit','open','open','','28-revision-v1','','','2014-10-09 13:30:46','2014-10-09 13:30:46','',28,'http://unasm.sinaapp.com/?p=29',0,'revision','',0),(30,1,'2014-10-10 11:16:59','2014-10-10 11:16:59','跳跃表，又名skiplist，是一种虽然不如红黑树，AVL树等自平衡树强大，却可以在查找，删除，增加达到（logn）^2的效率的一种表，并且可以O(n)的实现区间数据的范围查找获取，性能上不属于平衡树，编码却很更加简单，可以称得上是一种物美价廉的数据结构。我曾经手写一次红黑树，只是完成了插入，查找的功能，已经是160行代码量了，加上删除，估计要230左右的代码量吧。还是有点复杂的。\n\n常见的两种数据集合结构，一种是链表，一种是数组，前者在查找上的效率无法忍受，却在添加上很方便，后者可以做到随机查找，但是增删数据却是很麻烦，跳跃表可以理解为是链表的增强版，通过多个维度的有序链表实现查询上的优化，具体结构定义如下。\n\nclass SkipListNode{\n\nElement data;//用来存储数据\n\nSkipListNode forward[];//用来存储指针节点.\n\nSkipListNode(Element d , int level)\n\n{\n\ndata = d;\n\nforward = new skipListNode[level+1];\n\n}\n\n}\n\nclass SkipList{\n\nint maxLevel;\n\nSkipListNode header;\n\nSkipListNode tail;\n\nSkipList(int maxLev)\n\n{\n\nmaxLevel = maxLev;\n\nheaer = new SkipListNode(null , maxLevel);\n\ntail = new SkipListNode(maxValue , maxLevel);\n\nfor(int i = 0; i &lt;= maxLevel;i++){\n\nheader.forward[i] = tail;\n\n}\n\n}\n\n}\n\n由以上可以看到，跳跃表是在header和tail之间构成一个区间，一个链表构成的区间，就像两堵墙 ， 这个链表是有序的，保证链表的最小的值都比header开头的大，最大的数组也不会超过maxValue，这样加上header,tail在一起，是一个完整的链表，而以后无论节点如何添加，都不会大于tail，都不会小于header，这点很重要。<img class=\"alignnone\" src=\"http://unasm-unasm.stor.sinaapp.com/sk.PNG\" alt=\"skip list struct table\" width=\"948\" height=\"170\" />\n\n在上面的class中可以看到，  forward = new skipListNode[level+1]，forward指针纵向的构成一个结构体数组，而forward中每一个节点指向的结构体节点本身也有forward指向下一个结构体节点，这样就可以和header以及tail构成横向的链表，查找的时候，会在maxLevel开始查找，如果你把它理解成墙的话，就是在墙头开始查找，因为是从墙头，这个时候遍历的节点数目是统计意义上的(1/2)^Level * k (k是元素个数，level是所处的节点数)，在上层找到一个区间，然后进入下一层，根据在上一层的时候找到的已经缩小了的区间，在第二层的链表中，进一步缩小空间，一直进入到最后一层，唯一确定找到的节点。\n\n插入的方式很奇葩，也很让人意外，第一次遇到这种统计意义上的效率，理解上多少有点难以接受。根据上面的内容，找到具体要插入的位置，然后具体这个节点层级是多少，是通过摇色子来决定的，具体算法如下\n\nint generateRandomLevel(){\n\nint level = 0;\n\nwhile(newlevel &lt; maxLevel &amp;&amp; Math.random() &lt; 0.5) level++;\n\nreturn level;\n\n}\n\n这个就是那篇英文文档最后留下的如何确定新插入节点的算法，就是摇色子，当时不理解，想骂娘。其实是对的。从概率上来说，当前一共有k个节点，那么，最底层的链表长度就是k嘛，然后第一层链表长度，就应该是1/2 * k ，第二层长度就应该是(1/2)^2 *ｋ，而这个生成函数，可以再概率上保证每一层的链表的长度是对的，剩下的，就是要求这些链表的分布尽量的均匀离散，跳跃表没有保证掘对的离散平均，这点让我在个人揣测的时候百思不得其解到底如何做到绝对的离散，实际上，保证绝对的分布均匀是需要很大的代价的，需要向平衡树那样，跳跃表保证了统计意义上的均匀，因为统计意义上的个数毫无规律的分布在整个区间内，本身就是符合统计意义上离散的。\n\n&nbsp;\n\n==========================\n\n&nbsp;\n\n=========================\n\n&nbsp;\n\n它的最底层，和我们大众所知的单向链表没有什么区别，第二层\n\n为了看这个skiplist，找了一篇10多页的英文文档啃，结果前5页没看懂说什么，后几页还不错，把查找讲的很透彻，插入却一句带过，fuck，顿时想骂娘，最后还是找人博客看明白怎么回事。算法太弱了，一怒之下将麻省的算法课全部下载下来，争取一两个月内啃完','redis之zset的底层结构-->跳跃表','','inherit','open','open','','28-autosave-v1','','','2014-10-10 11:16:59','2014-10-10 11:16:59','',28,'http://unasm.sinaapp.com/?p=30',0,'revision','',0),(60,1,'2014-10-30 07:53:39','2014-10-30 07:53:39','沟通是一个大问题，尤其是大家在一起创造一个全新的东西的时候，每当提出一些全新的理念和实现方案的时候，对方的理解，自己的描述，实现的可行性分析，各种方案的对比等等，总之，会是一件很麻烦的事情。\r\n\r\nso.脾气好是必须的，心平气和，不急不躁，不断理解具象别人说的内容，概念，场景，以及确认自己认知的正确，然后尽可能逻辑清晰的完整的，以平和的口吻来描述自己的理解，想法，担心等等，无论是描述，还是反驳，都最好带着场景来，太虚幻的东西都不好理解，具体的情形总是方便理解的。\r\n\r\n必要的工具总是很好的，比如xmind，axure，workbench，把自己的想法按照一种极其富有逻辑的概念，比如e-r图，虽然不是很直观，但是的确可以富有逻辑的描述数据库的设计，axure在演示交互的时候，尤其得天独厚的优势，最近我在设计e-r图的时候，觉得首先在workbench中设计好，然后在axure中添加备注解释，感觉不错，至少开始有人试图去解读了。','关于项目开发中的沟通问题','','publish','open','open','','%e5%85%b3%e4%ba%8e%e9%a1%b9%e7%9b%ae%e5%bc%80%e5%8f%91%e4%b8%ad%e7%9a%84%e6%b2%9f%e9%80%9a%e9%97%ae%e9%a2%98','','','2014-10-30 07:53:39','2014-10-30 07:53:39','',0,'http://unasm.sinaapp.com/?p=60',0,'post','',0),(32,1,'2014-10-11 04:29:52','2014-10-11 04:29:52','连接mysql 遇到2002的错误，就是未连接的意思，问题是处在数据库上面了，可以通过mysql -u的命令行的方式连接数据库，也就是说，mysql本身是没有问题的，而问题是出在mysqld上面了，mysql的连接客户端。\r\n\r\n直接/etc/init.d/mysqld restart 报错说是/tmp/mysql.sock已经存在了，不行，删除/tmp/mysql.sock ，运行/etc/init.d/mysqld 也不行，一直卡死在了start上面，touch mysql.sock 也不行，有人说是mysql.sock默认应该放在/var/lib/mysql/mysql.sock ，放在mysql.sock中会找不到，于是修改my.cnf将socket修改成为/var/lib/mysql/mysql.sock 依旧是不行\r\n\r\n通过查看/etc/init.d/mysqld status 得到的结果是  mysqld dead but subsys locked  ，也就是说，mysqld 挂掉了，但是因为subsys已经锁上了，所以肯定无法重启，so      <span class=\"pln\">rm </span><span class=\"pun\">/</span><span class=\"kwd\">var</span><span class=\"pun\">/</span><span class=\"kwd\">lock</span><span class=\"pun\">/</span><span class=\"pln\">subsys</span><span class=\"pun\">/</span><span class=\"pln\">mysqld   然后kill掉ps中的mysql进程 运行/etc/init.d/mysqld restart 不可以，kill掉ps中的mysq进程，运行/etc/init.d/mysql restart 然后发现就可以了</span>\r\n\r\n总的来说，这次的故障原因恐怕是mysqld因为意外退出运行了，因为mysql和mysqld是分别独立的，所以mysql还是在运行，只是说，因为没有了mysqld这个程序和mysql的中间层，所以报错说是no connect ，而mysql和mysqld的关系应该是mysql首先启动运行初始化环境，然后是mysql创建mysql.sock 然后mysqld启动，双方通过socket套字节通信，所以如果单独启动mysqld就会遇到mysql.sock已经存在的报错，kill掉 mysql的进程，让mysql也挂掉，然后重启mysql ，就是一切从头开始的意思，让mysql重新开始初始化欢迎，让他启动mysqld，创建他们约定的.sock文件，这样就可以又愉快的开始工作了。\r\n\r\n想解决问题，还是要理解他们的运行过程和机制啊。','记一次 mysql 2002 error ','','publish','open','open','','%e8%ae%b0%e4%b8%80%e6%ac%a1-mysql-2002-error','','','2014-10-11 04:29:52','2014-10-11 04:29:52','',0,'http://unasm.sinaapp.com/?p=32',0,'post','',0),(33,1,'2014-10-11 04:29:52','2014-10-11 04:29:52','连接mysql 遇到2002的错误，就是未连接的意思，问题是处在数据库上面了，可以通过mysql -u的命令行的方式连接数据库，也就是说，mysql本身是没有问题的，而问题是出在mysqld上面了，mysql的连接客户端。\r\n\r\n直接/etc/init.d/mysqld restart 报错说是/tmp/mysql.sock已经存在了，不行，删除/tmp/mysql.sock ，运行/etc/init.d/mysqld 也不行，一直卡死在了start上面，touch mysql.sock 也不行，有人说是mysql.sock默认应该放在/var/lib/mysql/mysql.sock ，放在mysql.sock中会找不到，于是修改my.cnf将socket修改成为/var/lib/mysql/mysql.sock 依旧是不行\r\n\r\n通过查看/etc/init.d/mysqld status 得到的结果是  mysqld dead but subsys locked  ，也就是说，mysqld 挂掉了，但是因为subsys已经锁上了，所以肯定无法重启，so      <span class=\"pln\">rm </span><span class=\"pun\">/</span><span class=\"kwd\">var</span><span class=\"pun\">/</span><span class=\"kwd\">lock</span><span class=\"pun\">/</span><span class=\"pln\">subsys</span><span class=\"pun\">/</span><span class=\"pln\">mysqld   然后kill掉ps中的mysql进程 运行/etc/init.d/mysqld restart 不可以，kill掉ps中的mysq进程，运行/etc/init.d/mysql restart 然后发现就可以了</span>\r\n\r\n总的来说，这次的故障原因恐怕是mysqld因为意外退出运行了，因为mysql和mysqld是分别独立的，所以mysql还是在运行，只是说，因为没有了mysqld这个程序和mysql的中间层，所以报错说是no connect ，而mysql和mysqld的关系应该是mysql首先启动运行初始化环境，然后是mysql创建mysql.sock 然后mysqld启动，双方通过socket套字节通信，所以如果单独启动mysqld就会遇到mysql.sock已经存在的报错，kill掉 mysql的进程，让mysql也挂掉，然后重启mysql ，就是一切从头开始的意思，让mysql重新开始初始化欢迎，让他启动mysqld，创建他们约定的.sock文件，这样就可以又愉快的开始工作了。\r\n\r\n想解决问题，还是要理解他们的运行过程和机制啊。','记一次 mysql 2002 error ','','inherit','open','open','','32-revision-v1','','','2014-10-11 04:29:52','2014-10-11 04:29:52','',32,'http://unasm.sinaapp.com/?p=33',0,'revision','',0),(74,1,'2014-11-11 09:16:35','2014-11-11 09:16:35','php 的 class_exists在执行的时候，会首先已经存在的对象里面进行查找，如果查找到的话，就停止，如果没有，会在autolaod中尝试着去加载新的对象，如果可以加载对应的对象，则include进来，如果没有对应对象加载，则返回FALSE','class_exists 的执行流程备忘','','publish','open','open','','class_exists-%e7%9a%84%e6%89%a7%e8%a1%8c%e6%b5%81%e7%a8%8b%e5%a4%87%e5%bf%98','','','2014-11-11 09:16:35','2014-11-11 09:16:35','',0,'http://unasm.sinaapp.com/?p=74',0,'post','',0),(37,1,'2014-10-12 16:41:10','2014-10-12 16:41:10','很多时候用单例模式的时候，需要一个判断，比如instanceof instace  或者是if...有时候会给__construct 加上一个private的属性，通过静态的方式调用，\r\n\r\n但是有一种情况，就会让人很纠结，就是必须在__construct中将自己的实例化变量复制，但是却不能通过new的方式来赋值，比如A 对象 __construct中调用了一些函数，而这些函数中需要调用A对象的实例化对象，这个时候就会很纠结，比如今天我首先通过让子对象继承了父对象，然后在子函数的__construct中执行父函数的__construct然后子函数中调用了父函数的一些属性，这个时候因为__construct 没有完成，在父函数中new自身，然后判断是否已经实例化了的方式就行不同了，会陷入死循环，也不能__cosntruct 设置 private了，因为必须有构建函数的执行，这个时候有一种比较好的写法 $instance = &amp;$this;这个语句是可以用到__construct中的，而不会进入死循环，然后子对象和其他的函数，就可以引用$instance 变量了，这样就很完美的解决了单例 __construct 无法判断自身的问题','单例模式指自我指向','','publish','open','open','','%e5%8d%95%e4%be%8b%e6%a8%a1%e5%bc%8f%e6%8c%87%e8%87%aa%e6%88%91%e6%8c%87%e5%90%91','','','2014-10-12 16:41:10','2014-10-12 16:41:10','',0,'http://unasm.sinaapp.com/?p=37',0,'post','',0),(38,1,'2014-10-12 16:41:10','2014-10-12 16:41:10','很多时候用单例模式的时候，需要一个判断，比如instanceof instace  或者是if...有时候会给__construct 加上一个private的属性，通过静态的方式调用，\r\n\r\n但是有一种情况，就会让人很纠结，就是必须在__construct中将自己的实例化变量复制，但是却不能通过new的方式来赋值，比如A 对象 __construct中调用了一些函数，而这些函数中需要调用A对象的实例化对象，这个时候就会很纠结，比如今天我首先通过让子对象继承了父对象，然后在子函数的__construct中执行父函数的__construct然后子函数中调用了父函数的一些属性，这个时候因为__construct 没有完成，在父函数中new自身，然后判断是否已经实例化了的方式就行不同了，会陷入死循环，也不能__cosntruct 设置 private了，因为必须有构建函数的执行，这个时候有一种比较好的写法 $instance = &amp;$this;这个语句是可以用到__construct中的，而不会进入死循环，然后子对象和其他的函数，就可以引用$instance 变量了，这样就很完美的解决了单例 __construct 无法判断自身的问题','单例模式指自我指向','','inherit','open','open','','37-revision-v1','','','2014-10-12 16:41:10','2014-10-12 16:41:10','',37,'http://unasm.sinaapp.com/?p=38',0,'revision','',0),(39,1,'2014-10-15 03:34:59','2014-10-15 03:34:59','本篇是从从MYSQL性能调优与架构设计108页摘录的，因为觉得很重要，所以放到博客里面。\r\n\r\n说道Explain ,肯定很多读者之前都已经用过了 ，Mysql Query Optimizer 通过我们让它执行EXPLAIN命令来告诉我们它将使用一个怎么样的执行计划来优化我们的Query。所以，可以说，Explain是在优化Query时最直接有效的验证我们想法的工具。在本章前部分我就说过，一个好的SQL Performance Tuner在手动优化一个Query之前，头脑中就已经有了一个好的执行计划，后面的优化工作，只是为实现该执行计划而做出各种调整。\r\n\r\n在我们对某个Query优化过程中，需要不断的使用Explain来验证我们的各种调整是否有效。就像本书之前的很多实例都会通过Explain来验证和展示结果一样，所有的Query 优化都应该充分的利用他。\r\n\r\n我们先看一下在MySQL Explain功能中给我们展示的各种信息的解释：\r\n<ol>\r\n	<li>ID： Query Optimizer 所选定的执行计划中查询的序列号</li>\r\n	<li>Select_type： 所使用的查询类型，主要有这几种查询类型</li>\r\n</ol>\r\n<ul>\r\n	<li>DEPENDENT SUBQUERY :子查询中内层的第一个SELECT，依赖于外部查询的结果集；</li>\r\n	<li>DEPENDENT UNION : 子查询中的UNION，且为UNION中从第二个SELECT开始的后面所有的SLEECT ，同样依赖于外部查询的结果集合。</li>\r\n	<li>PRIMARY:子查询中的最外层查询，注意并不是主键查询</li>\r\n	<li>SIMPLE ：除了子查询或者是UNION之外的其他查询</li>\r\n	<li>SUBQUERY：子查询内层查询的第一个SELECT，结果并不一类与外部的查询结果集合；</li>\r\n	<li>UNCACHEABLE SUBQUERY：结果集无法缓存的子查询</li>\r\n	<li>UNION:UNION语句中第二个SELECT开始的后面所有的SELECT，第一个SELECT为PRIMARY。</li>\r\n	<li>UNION RESULT ：UNION中的合并结果。</li>\r\n</ul>\r\n<p style=\"padding-left: 30px;\">3. Table： 显示这一步所访问的数据库表的名称</p>\r\n<p style=\"padding-left: 30px;\">4.Type:告诉我们对表所使用的访问方式，主要包含如下集合中的类型</p>\r\n\r\n<ul>\r\n	<li>all: 全表扫描</li>\r\n	<li>const：读常量，且最多只有一条记录匹配，由于是常量，同时实际上只需要读取一次，（ps：通过主键读取一般会给这个）</li>\r\n	<li>eq_ref:最多只会有一条匹配的结果，一般是通过主键或者是唯一索引来访问</li>\r\n	<li>fulltext：（ps:没有）</li>\r\n	<li>index:全索引扫描</li>\r\n	<li>index_merge: 查询中同时使用两个索引，然后对索引结果进行merge之后再读取。</li>\r\n	<li>index_subquery: 子查询中的返回结果字段组合是一个索引（或索引组合）但不是主键或者是唯一索引</li>\r\n	<li>range：索引范围扫描</li>\r\n	<li>ref：Join 语句中被驱动表索引引用查询</li>\r\n	<li>ref_or_null: 与ref的唯一区别就是在使用索引之外再增加一个空值的查询</li>\r\n	<li>system： 系统表，表中只有一个一样数据</li>\r\n	<li>unique_subquery:子查询中的返回结果字段组合是主键或者是唯一约束</li>\r\n</ul>\r\n<p style=\"padding-left: 30px;\">5. Possible_keys: 该查询可以利用的索引，如果没有任何索引可以使用，就是显示成null，这一项内容对优化的时候索引的调整非常重要</p>\r\n<p style=\"padding-left: 30px;\">6. Key：MySQL Query Optimizer 从possible_keys中所选择使用的索引</p>\r\n<p style=\"padding-left: 30px;\">7. Key_len:  被所选中使用的索引的索引键长度</p>\r\n<p style=\"padding-left: 30px;\">8: Ref：列出通过常量，还是某个表的某个字段来过滤的</p>\r\n<p style=\"padding-left: 30px;\">9：Rows: MySQL Query Optimizer 通过系统收集到的统计信息估算出来的结果集记录条数，</p>\r\n<p style=\"padding-left: 30px;\">10：Extra：查询中每一步实现的额外细节信息，主要可能会是一下的内容</p>\r\n\r\n<ul>\r\n	<li>Distinct：查找distinct值，所以当mysql找到第一个匹配的结果之后，将停止该值的查询而转为后面其他值的查询</li>\r\n	<li>Full scan on NULL key:子查询中的一种优化方式，主要是遇到无法通过所以访问null值的时候使用。</li>\r\n	<li>Impossible Where noticed after reading const tables：MySQL Query Optimizer通过收集到的统计信息判断出不可能存在的结果</li>\r\n	<li>No tables：Query语句使用的From dual 或者不包含任何from字句</li>\r\n	<li>Not exists: 在某些做链接中的Mysql Query Optimizer 所通过改变原有的Query的组成而使用的办法，可以不犯减少数据访问的次数（ps：表示怀疑）</li>\r\n	<li>Range checked for each record:通过Mysql官方手册描述，当MySQL Query Optimizer 没有发现好的可以使用的索引的时候，如果发现如果来自前面的表的列值已知，可以部分所以可以使用,对前面的表的每个行进行组合，MySQL检查是否可以使用range，index_merge访问方法来索取行</li>\r\n	<li>Select tables optimized away ：当我们使用的某些聚合函数来访问存在索引的某个字段的时候，MySQL Query Optimizer 会通过索引而直接一次定位到所需的数据行完成整个查询。当然，前提是在Query中不能有GROUP BY操作。如使用min（）或者是max（）的时候</li>\r\n	<li>Using filesort ：当我们的Query中包含ORDER BY操作，而且无法利用索引完成排序操作的时候，MySQL Query Optimizer不得不选择相应的排序算法来实现。</li>\r\n	<li>Using index:所需要的数据只需要在Index即可获得而不需要到表中取数据。</li>\r\n	<li>Using index for group-by ：数据访问和Using index 一样，所需要的数据读取索引即可。而当Query中使用了GROUP BY或者是DISTINCT子句的时候，如果分组字段也索引中，Extra中的信息就会使using index for group-by</li>\r\n	<li>Using temporary： 当MYSQL在某些操作中必须使用临时表的时候，在Extra信息中就会出现Using temporary .主要常见于GROUP BY 和 ORDER BY等操作中。</li>\r\n	<li>Using where : 如果我们不是读取标的所有的数据，或者不仅仅是通过索引就可以获取所需要的数据，就会出现Using where 信息。</li>\r\n	<li>Using where with pushed condition： 这是一个仅仅在NDCluster存储引擎中才会出现的信息，而且还需要通过打开Condition Pushdown优化才可能被使用，控制参数为engine_condition_pushdown。</li>\r\n</ul>\r\n&nbsp;','explain的含义和使用','','publish','open','open','','explain%e7%9a%84%e5%90%ab%e4%b9%89%e5%92%8c%e4%bd%bf%e7%94%a8','','','2014-10-15 03:34:59','2014-10-15 03:34:59','',0,'http://unasm.sinaapp.com/?p=39',0,'post','',0),(40,1,'2014-10-15 03:34:59','2014-10-15 03:34:59','本篇是从从MYSQL性能调优与架构设计108页摘录的，因为觉得很重要，所以放到博客里面。\r\n\r\n说道Explain ,肯定很多读者之前都已经用过了 ，Mysql Query Optimizer 通过我们让它执行EXPLAIN命令来告诉我们它将使用一个怎么样的执行计划来优化我们的Query。所以，可以说，Explain是在优化Query时最直接有效的验证我们想法的工具。在本章前部分我就说过，一个好的SQL Performance Tuner在手动优化一个Query之前，头脑中就已经有了一个好的执行计划，后面的优化工作，只是为实现该执行计划而做出各种调整。\r\n\r\n在我们对某个Query优化过程中，需要不断的使用Explain来验证我们的各种调整是否有效。就像本书之前的很多实例都会通过Explain来验证和展示结果一样，所有的Query 优化都应该充分的利用他。\r\n\r\n我们先看一下在MySQL Explain功能中给我们展示的各种信息的解释：\r\n<ol>\r\n	<li>ID： Query Optimizer 所选定的执行计划中查询的序列号</li>\r\n	<li>Select_type： 所使用的查询类型，主要有这几种查询类型</li>\r\n</ol>\r\n<ul>\r\n	<li>DEPENDENT SUBQUERY :子查询中内层的第一个SELECT，依赖于外部查询的结果集；</li>\r\n	<li>DEPENDENT UNION : 子查询中的UNION，且为UNION中从第二个SELECT开始的后面所有的SLEECT ，同样依赖于外部查询的结果集合。</li>\r\n	<li>PRIMARY:子查询中的最外层查询，注意并不是主键查询</li>\r\n	<li>SIMPLE ：除了子查询或者是UNION之外的其他查询</li>\r\n	<li>SUBQUERY：子查询内层查询的第一个SELECT，结果并不一类与外部的查询结果集合；</li>\r\n	<li>UNCACHEABLE SUBQUERY：结果集无法缓存的子查询</li>\r\n	<li>UNION:UNION语句中第二个SELECT开始的后面所有的SELECT，第一个SELECT为PRIMARY。</li>\r\n	<li>UNION RESULT ：UNION中的合并结果。</li>\r\n</ul>\r\n<p style=\"padding-left: 30px;\">3. Table： 显示这一步所访问的数据库表的名称</p>\r\n<p style=\"padding-left: 30px;\">4.Type:告诉我们对表所使用的访问方式，主要包含如下集合中的类型</p>\r\n\r\n<ul>\r\n	<li>all: 全表扫描</li>\r\n	<li>const：读常量，且最多只有一条记录匹配，由于是常量，同时实际上只需要读取一次，（ps：通过主键读取一般会给这个）</li>\r\n	<li>eq_ref:最多只会有一条匹配的结果，一般是通过主键或者是唯一索引来访问</li>\r\n	<li>fulltext：（ps:没有）</li>\r\n	<li>index:全索引扫描</li>\r\n	<li>index_merge: 查询中同时使用两个索引，然后对索引结果进行merge之后再读取。</li>\r\n	<li>index_subquery: 子查询中的返回结果字段组合是一个索引（或索引组合）但不是主键或者是唯一索引</li>\r\n	<li>range：索引范围扫描</li>\r\n	<li>ref：Join 语句中被驱动表索引引用查询</li>\r\n	<li>ref_or_null: 与ref的唯一区别就是在使用索引之外再增加一个空值的查询</li>\r\n	<li>system： 系统表，表中只有一个一样数据</li>\r\n	<li>unique_subquery:子查询中的返回结果字段组合是主键或者是唯一约束</li>\r\n</ul>\r\n<p style=\"padding-left: 30px;\">5. Possible_keys: 该查询可以利用的索引，如果没有任何索引可以使用，就是显示成null，这一项内容对优化的时候索引的调整非常重要</p>\r\n<p style=\"padding-left: 30px;\">6. Key：MySQL Query Optimizer 从possible_keys中所选择使用的索引</p>\r\n<p style=\"padding-left: 30px;\">7. Key_len:  被所选中使用的索引的索引键长度</p>\r\n<p style=\"padding-left: 30px;\">8: Ref：列出通过常量，还是某个表的某个字段来过滤的</p>\r\n<p style=\"padding-left: 30px;\">9：Rows: MySQL Query Optimizer 通过系统收集到的统计信息估算出来的结果集记录条数，</p>\r\n<p style=\"padding-left: 30px;\">10：Extra：查询中每一步实现的额外细节信息，主要可能会是一下的内容</p>\r\n\r\n<ul>\r\n	<li>Distinct：查找distinct值，所以当mysql找到第一个匹配的结果之后，将停止该值的查询而转为后面其他值的查询</li>\r\n	<li>Full scan on NULL key:子查询中的一种优化方式，主要是遇到无法通过所以访问null值的时候使用。</li>\r\n	<li>Impossible Where noticed after reading const tables：MySQL Query Optimizer通过收集到的统计信息判断出不可能存在的结果</li>\r\n	<li>No tables：Query语句使用的From dual 或者不包含任何from字句</li>\r\n	<li>Not exists: 在某些做链接中的Mysql Query Optimizer 所通过改变原有的Query的组成而使用的办法，可以不犯减少数据访问的次数（ps：表示怀疑）</li>\r\n	<li>Range checked for each record:通过Mysql官方手册描述，当MySQL Query Optimizer 没有发现好的可以使用的索引的时候，如果发现如果来自前面的表的列值已知，可以部分所以可以使用,对前面的表的每个行进行组合，MySQL检查是否可以使用range，index_merge访问方法来索取行</li>\r\n	<li>Select tables optimized away ：当我们使用的某些聚合函数来访问存在索引的某个字段的时候，MySQL Query Optimizer 会通过索引而直接一次定位到所需的数据行完成整个查询。当然，前提是在Query中不能有GROUP BY操作。如使用min（）或者是max（）的时候</li>\r\n	<li>Using filesort ：当我们的Query中包含ORDER BY操作，而且无法利用索引完成排序操作的时候，MySQL Query Optimizer不得不选择相应的排序算法来实现。</li>\r\n	<li>Using index:所需要的数据只需要在Index即可获得而不需要到表中取数据。</li>\r\n	<li>Using index for group-by ：数据访问和Using index 一样，所需要的数据读取索引即可。而当Query中使用了GROUP BY或者是DISTINCT子句的时候，如果分组字段也索引中，Extra中的信息就会使using index for group-by</li>\r\n	<li>Using temporary： 当MYSQL在某些操作中必须使用临时表的时候，在Extra信息中就会出现Using temporary .主要常见于GROUP BY 和 ORDER BY等操作中。</li>\r\n	<li>Using where : 如果我们不是读取标的所有的数据，或者不仅仅是通过索引就可以获取所需要的数据，就会出现Using where 信息。</li>\r\n	<li>Using where with pushed condition： 这是一个仅仅在NDCluster存储引擎中才会出现的信息，而且还需要通过打开Condition Pushdown优化才可能被使用，控制参数为engine_condition_pushdown。</li>\r\n</ul>\r\n&nbsp;','explain的含义和使用','','inherit','open','open','','39-revision-v1','','','2014-10-15 03:34:59','2014-10-15 03:34:59','',39,'http://unasm.sinaapp.com/?p=40',0,'revision','',0),(41,1,'2014-10-15 11:42:01','2014-10-15 11:42:01','<p style=\"padding-left: 30px;\">之所以取这个名字，我想是因为我想到了史瑜老师的缘故吧，但是为什么又想到了她呢？我想也许是因为太久不见的缘故吧，但是也可能是因为高三毕业之前，她给我写的留言吧。</p>\r\n\r\n<div style=\"padding-left: 30px;\">我很喜欢她。我从小学到高中，11年的语文生涯中遇到过两个自己喜欢的语文老师，一个是初中，是李新建李老师，还有就是她了。</div>\r\n<div style=\"padding-left: 30px;\">但是今天写这些东西却不是为了纪念，慢慢的，我渐渐的不再回想以前的人了，也不想再想起以前的时光，逝者逝矣，来日方长。我只是想为自己树立一块标志罢了。</div>\r\n<div>几天之前，我决定放弃自己投入了一年多时间研究的acm，原因有很多，缺钱，没有成就都是原因，whatever，it doesn\'t matter。重要的是我现在投入到了一个新的事....中。</div>\r\n<div>回想过去，我想自从16岁之后，我走的就是自己选择的路。很多人干涉过，但是方向始终是自己的选择。在李志勇的博客中发现了一句自己觉得很可笑的话，大概就是说一些自己偶然的，无意识的决定影响了自己的人生。在我看来不过是说葡萄酸罢了。</div>\r\n<div style=\"padding-left: 30px;\">acm ,电子设计都是自己的决定，放弃也是没有人干涉的，决定不再做一个好学生，抛弃学习也是自己的决定，虽有干涉，无怨无悔，亦不曾改变。</div>\r\n<div>现在决定投入到做网站中，也是我的决定，为什么，无所谓，这个不重要，重要的是我投入到了这项可以作为事业的事情中了，而且决定全力以赴。</div>\r\n<div>为什么没有去找一个游戏工作室？我想也许是因为亚奇的话吧，也或许是因为李欣明吧。还或许是因为自己不涉足网络游戏吧。还或者是因为那个太慢了吧。我需要钱。很需要钱。按照某某人的说法，我就是被钱绑架了，而且还无怨无悔。</div>\r\n<div> <wbr />  <wbr /> 啊，留下一条路等改日再走，但我知道路径绵绵无尽头，我恐怕难以再回返。</div>\r\n<div>啊，我放弃了acm，自己曾经多美好的憧憬。一年以来的专心无二的投入，到最后居然就是黯然的离开，无所谓服役，也就无所谓退役了。</div>\r\n<div style=\"padding-left: 30px;\">我知道你是一个有思想的孩子，老师相信将来你一定会有所成就。</div>\r\n<div style=\"padding-left: 30px;\">放弃思考就是放弃人生，接受思考，也是接受迷茫。有思想......</div>\r\n<div style=\"padding-left: 30px;\">木有如此，人何以堪。</div>','为了忘却的纪念','','publish','open','open','','%e4%b8%ba%e4%ba%86%e5%bf%98%e5%8d%b4%e7%9a%84%e7%ba%aa%e5%bf%b5','','','2014-10-15 11:42:01','2014-10-15 11:42:01','',0,'http://unasm.sinaapp.com/?page_id=41',0,'page','',0),(42,1,'2014-10-15 11:42:01','2014-10-15 11:42:01','<p style=\"padding-left: 30px;\">之所以取这个名字，我想是因为我想到了史瑜老师的缘故吧，但是为什么又想到了她呢？我想也许是因为太久不见的缘故吧，但是也可能是因为高三毕业之前，她给我写的留言吧。</p>\r\n\r\n<div style=\"padding-left: 30px;\">我很喜欢她。我从小学到高中，11年的语文生涯中遇到过两个自己喜欢的语文老师，一个是初中，是李新建李老师，还有就是她了。</div>\r\n<div style=\"padding-left: 30px;\">但是今天写这些东西却不是为了纪念，慢慢的，我渐渐的不再回想以前的人了，也不想再想起以前的时光，逝者逝矣，来日方长。我只是想为自己树立一块标志罢了。</div>\r\n<div>几天之前，我决定放弃自己投入了一年多时间研究的acm，原因有很多，缺钱，没有成就都是原因，whatever，it doesn\'t matter。重要的是我现在投入到了一个新的事....中。</div>\r\n<div>回想过去，我想自从16岁之后，我走的就是自己选择的路。很多人干涉过，但是方向始终是自己的选择。在李志勇的博客中发现了一句自己觉得很可笑的话，大概就是说一些自己偶然的，无意识的决定影响了自己的人生。在我看来不过是说葡萄酸罢了。</div>\r\n<div style=\"padding-left: 30px;\">acm ,电子设计都是自己的决定，放弃也是没有人干涉的，决定不再做一个好学生，抛弃学习也是自己的决定，虽有干涉，无怨无悔，亦不曾改变。</div>\r\n<div>现在决定投入到做网站中，也是我的决定，为什么，无所谓，这个不重要，重要的是我投入到了这项可以作为事业的事情中了，而且决定全力以赴。</div>\r\n<div>为什么没有去找一个游戏工作室？我想也许是因为亚奇的话吧，也或许是因为李欣明吧。还或许是因为自己不涉足网络游戏吧。还或者是因为那个太慢了吧。我需要钱。很需要钱。按照某某人的说法，我就是被钱绑架了，而且还无怨无悔。</div>\r\n<div> <wbr />  <wbr /> 啊，留下一条路等改日再走，但我知道路径绵绵无尽头，我恐怕难以再回返。</div>\r\n<div>啊，我放弃了acm，自己曾经多美好的憧憬。一年以来的专心无二的投入，到最后居然就是黯然的离开，无所谓服役，也就无所谓退役了。</div>\r\n<div style=\"padding-left: 30px;\">我知道你是一个有思想的孩子，老师相信将来你一定会有所成就。</div>\r\n<div style=\"padding-left: 30px;\">放弃思考就是放弃人生，接受思考，也是接受迷茫。有思想......</div>\r\n<div style=\"padding-left: 30px;\">木有如此，人何以堪。</div>','为了忘却的纪念','','inherit','open','open','','41-revision-v1','','','2014-10-15 11:42:01','2014-10-15 11:42:01','',41,'http://unasm.sinaapp.com/?p=42',0,'revision','',0),(76,1,'2014-11-19 08:12:57','0000-00-00 00:00:00','vim 通过命令:%s/\"/\'这么简单的命令，就可以将全文的所有的双引号替换成为单引号，如果只是想替换一部分而已，就在visual模式下选择对应的行，然后输入:%s/\"/\'替换即可','vim的替换功能','','draft','open','open','','','','','2014-11-19 08:12:57','2014-11-19 08:12:57','',0,'http://unasm.sinaapp.com/?p=76',0,'post','',0),(48,1,'2014-10-21 09:05:26','2014-10-21 09:05:26','好几天没有更新博客了，这样不行的，要养成习惯。\n\nredis的底层我还没有研究透彻，只能说研究 了一部分，本来打算看完了之后在写的，不过，为了养成习惯，也为了预防可能的惰性和迷失。\n\nredis 的字符串有点意思，对于运行在服务器上面的信息来说，弱类型很多时候是难免的，所以redis中处理字符的情况远远要大于处理int的情况，所以字符的操作必须优化，而众所周知，c的char[]可是不怎么强大的，有两个操作比较消耗资源，一个是append 字符的时候，一个是计算长度的时候，redis提出了一个叫做sds的东西，就是一个结构体，里面包含三个值,一个记录当前字符的长度length，一个是char数组中还剩下空闲的长度free，一个是字符存储地址，里面包含两种东西，一个是申请了，但是空闲的空间，由free标记，一个是已经存储了的字符长度，由length标记，这样，就可以将字符操作比较消耗资源的两个操作以比较小的代价给解决了。free标记的是空闲的内存，也就是说每次申请内存的时候，redis不会按照刚刚好来申请，而是根据一定的策略申请了多余的内存，这样的优点是以后再次需要内存的时候u，很大的可能性就是不会再次申请了，加快执行的效率，append的时候申请内存是按照用了的字符长度，length的二倍的大小申请的，如果已经使用的内存超过了1MB，那么以后每次申请的内存就是1MB，min（1MB,length），这样内存分配也有的放矢了，sds的使用遍布了redis的底层。\n\n第二个是ziplist 压缩列表，本来以为是很神奇的东西，结果发现跟我毕业设计差不多，简而言之，就是通过一系列精确到位的二进制定义保存字符串列表。开头zlbytes zltail zllen构成ziplist的头，zlbytes，zltail四个字节，zllen两个字节，这十个字节构成了ziplist的头，用来统计和查找表尾节点，zlbytes是表示ziplist目前占用的字节数，zltails到达表尾节点的偏移量，可以不用遍历整个ziplist的时候，找到表尾节点，zllen记录了ziplist的节点数。之后接着的位就是每个节点的具体内容，每个节点里头包括了pre_entry_length ,coding,length,content几个,pre_entype_length记录了前一个节点的长度，是为了方便调转到上一个节点,encoding表示在content里面记录的是整形还是char，什么类型的char，length记录了content的长度，类似于sds的length，最后就是保存内容的content。\n\n还有一个就是让人难以评判的结构，就是整数集和set，应用场景是元素全部是整数，且数量不是很多的时候（512个，可以通过配置修改）。简而言之，把int拆开使用，一共用来存储三种数据，int16,int32,int64 ，这样就节省了空间，一个int64就可以存储4个或者是2个数据了，添加数据的时候，按照有序数组来，需要O(n)的将插入位置之后的s因为总共的数量不会超过512个，所以是效率时间不会是太大的问题，因为','redis底层实现第一步','','inherit','open','open','','22-autosave-v1','','','2014-10-21 09:05:26','2014-10-21 09:05:26','',22,'http://unasm.sinaapp.com/?p=48',0,'revision','',0),(49,1,'2014-10-21 09:06:19','2014-10-21 09:06:19','好几天没有更新博客了，这样不行的，要养成习惯。\r\n\r\nredis的底层我还没有研究透彻，只能说研究 了一部分，本来打算看完了之后在写的，不过，为了养成习惯，也为了预防可能的惰性和迷失。\r\n\r\nredis 的字符串有点意思，对于运行在服务器上面的信息来说，弱类型很多时候是难免的，所以redis中处理字符的情况远远要大于处理int的情况，所以字符的操作必须优化，而众所周知，c的char[]可是不怎么强大的，有两个操作比较消耗资源，一个是append 字符的时候，一个是计算长度的时候，redis提出了一个叫做sds的东西，就是一个结构体，里面包含三个值,一个记录当前字符的长度length，一个是char数组中还剩下空闲的长度free，一个是字符存储地址，里面包含两种东西，一个是申请了，但是空闲的空间，由free标记，一个是已经存储了的字符长度，由length标记，这样，就可以将字符操作比较消耗资源的两个操作以比较小的代价给解决了。free标记的是空闲的内存，也就是说每次申请内存的时候，redis不会按照刚刚好来申请，而是根据一定的策略申请了多余的内存，这样的优点是以后再次需要内存的时候u，很大的可能性就是不会再次申请了，加快执行的效率，append的时候申请内存是按照用了的字符长度，length的二倍的大小申请的，如果已经使用的内存超过了1MB，那么以后每次申请的内存就是1MB，min（1MB,length），这样内存分配也有的放矢了，sds的使用遍布了redis的底层。\r\n\r\n第二个是ziplist 压缩列表，本来以为是很神奇的东西，结果发现跟我毕业设计差不多，简而言之，就是通过一系列精确到位的二进制定义保存字符串列表。开头zlbytes zltail zllen构成ziplist的头，zlbytes，zltail四个字节，zllen两个字节，这十个字节构成了ziplist的头，用来统计和查找表尾节点，zlbytes是表示ziplist目前占用的字节数，zltails到达表尾节点的偏移量，可以不用遍历整个ziplist的时候，找到表尾节点，zllen记录了ziplist的节点数。之后接着的位就是每个节点的具体内容，每个节点里头包括了pre_entry_length ,coding,length,content几个,pre_entype_length记录了前一个节点的长度，是为了方便调转到上一个节点,encoding表示在content里面记录的是整形还是char，什么类型的char，length记录了content的长度，类似于sds的length，最后就是保存内容的content。\r\n\r\n还有一个就是让人难以评判的结构，就是整数集和set，应用场景是元素全部是整数，且数量不是很多的时候（512个，可以通过配置修改）。简而言之，把int拆开使用，一共用来存储三种数据，int16,int32,int64 ，这样就节省了空间，一个int64就可以存储4个或者是2个数据了，添加数据的时候，按照有序数组来，需要O(n)的将插入位置之后的数据向后移动一个位置，因为总共的数量不会超过512个，所以是效率时间不会是太大的问题，当元素不再是整数的时候，或者是超过512的时候，存储结构就变成hash。','redis底层实现第一步','','inherit','open','open','','22-revision-v1','','','2014-10-21 09:06:19','2014-10-21 09:06:19','',22,'http://unasm.sinaapp.com/?p=49',0,'revision','',0),(50,1,'2014-10-21 09:27:01','2014-10-21 09:27:01','<div id=\"sina_keyword_ad_area2\" class=\"articalContent   \">\r\n<div>找了好久，发现找不到这种vim内置函数的功能表，怒翻译之</div>\r\n<div></div>\r\n<div>nr2char() 获得一个字符的ASC2码值</div>\r\n<div>char2nr()  <wbr />获得字符的ASC1码值</div>\r\n<div>str2nr() 将字符串转化成数字;</div>\r\n<div>str2float 将字符转化成浮点数</div>\r\n<div>printf 根据%内容输出格式化的内容</div>\r\n<div>escape 去掉字符串中的转义\\</div>\r\n<div>shellesdcape 通过shell命令去除字符串</div>\r\n<div>fnameescape 通过vim命令去除字符串</div>\r\n<div>tr  <wbr />翻译字符</div>\r\n<div>strtrans 将字符串转成可输出的字符</div>\r\n<div>tolower</div>\r\n<div>toupper</div>\r\n<div>match 返回字符串中符合正则表达式的起始位置</div>\r\n<div>matchend 返回字符串中符合正则表达式的结束位置</div>\r\n<div>matchstr 检验字符串的格式</div>\r\n<div>matchlist 和matchstr差不多，返回字串</div>\r\n<div>stridx() 一个长字符串中一个短字符串的索引（位置？）</div>\r\n<div>strlen <wbr /></div>\r\n<div>sbustitute  <wbr />根据正则替换字符串</div>\r\n<div>submatch 获得substitude 中的匹配模式？（不理解）</div>\r\n<div>expand（） 添加字符串</div>\r\n<div>iconv 转码</div>\r\n<div>byteidx 应该是字节长度</div>\r\n<div>repeat 重复一个字符串多次</div>\r\n<div>eval</div>\r\n<div>列操作</div>\r\n<div>get 不报错的获得一项</div>\r\n<div>len 一个序列的列数</div>\r\n<div>empty 检查一个序列是否是空</div>\r\n<div>insert 向列中插入一项</div>\r\n<div>append 在结尾处添加一项</div>\r\n<div>add 向列中添加一项</div>\r\n<div>copy 制作一个影子copy数组</div>\r\n<div>deepcopy 拷贝全部数组</div>\r\n<div>filter 移除选定的项</div>\r\n<div>map 修改每一个列的项</div>\r\n<div>sort   排序</div>\r\n<div>reverse 翻转数组</div>\r\n<div>split 分割数组中的一个字符串</div>\r\n<div>join 将数组中的项和字符串合并</div>\r\n<div>range 返回一个数组的序列号</div>\r\n<div>string 将数组转化成字符串</div>\r\n<div>call 调用一个函数，以数组为参数</div>\r\n<div>index 一个数组的健值</div>\r\n<div>min <wbr /></div>\r\n<div>max</div>\r\n<div>count 计算一个值出现多少次</div>\r\n<div>repeat 重复一个数组多次</div>\r\n</div>\r\n<div id=\"share\" class=\"shareUp\"></div>','vim内置函数列表','','publish','open','open','','vim%e5%86%85%e7%bd%ae%e5%87%bd%e6%95%b0%e5%88%97%e8%a1%a8','','','2014-10-21 09:27:01','2014-10-21 09:27:01','',0,'http://unasm.sinaapp.com/?p=50',0,'post','',0),(51,1,'2014-10-21 09:27:01','2014-10-21 09:27:01','<div id=\"sina_keyword_ad_area2\" class=\"articalContent   \">\r\n<div>找了好久，发现找不到这种vim内置函数的功能表，怒翻译之</div>\r\n<div></div>\r\n<div>nr2char() 获得一个字符的ASC2码值</div>\r\n<div>char2nr()  <wbr />获得字符的ASC1码值</div>\r\n<div>str2nr() 将字符串转化成数字;</div>\r\n<div>str2float 将字符转化成浮点数</div>\r\n<div>printf 根据%内容输出格式化的内容</div>\r\n<div>escape 去掉字符串中的转义\\</div>\r\n<div>shellesdcape 通过shell命令去除字符串</div>\r\n<div>fnameescape 通过vim命令去除字符串</div>\r\n<div>tr  <wbr />翻译字符</div>\r\n<div>strtrans 将字符串转成可输出的字符</div>\r\n<div>tolower</div>\r\n<div>toupper</div>\r\n<div>match 返回字符串中符合正则表达式的起始位置</div>\r\n<div>matchend 返回字符串中符合正则表达式的结束位置</div>\r\n<div>matchstr 检验字符串的格式</div>\r\n<div>matchlist 和matchstr差不多，返回字串</div>\r\n<div>stridx() 一个长字符串中一个短字符串的索引（位置？）</div>\r\n<div>strlen <wbr /></div>\r\n<div>sbustitute  <wbr />根据正则替换字符串</div>\r\n<div>submatch 获得substitude 中的匹配模式？（不理解）</div>\r\n<div>expand（） 添加字符串</div>\r\n<div>iconv 转码</div>\r\n<div>byteidx 应该是字节长度</div>\r\n<div>repeat 重复一个字符串多次</div>\r\n<div>eval</div>\r\n<div>列操作</div>\r\n<div>get 不报错的获得一项</div>\r\n<div>len 一个序列的列数</div>\r\n<div>empty 检查一个序列是否是空</div>\r\n<div>insert 向列中插入一项</div>\r\n<div>append 在结尾处添加一项</div>\r\n<div>add 向列中添加一项</div>\r\n<div>copy 制作一个影子copy数组</div>\r\n<div>deepcopy 拷贝全部数组</div>\r\n<div>filter 移除选定的项</div>\r\n<div>map 修改每一个列的项</div>\r\n<div>sort   排序</div>\r\n<div>reverse 翻转数组</div>\r\n<div>split 分割数组中的一个字符串</div>\r\n<div>join 将数组中的项和字符串合并</div>\r\n<div>range 返回一个数组的序列号</div>\r\n<div>string 将数组转化成字符串</div>\r\n<div>call 调用一个函数，以数组为参数</div>\r\n<div>index 一个数组的健值</div>\r\n<div>min <wbr /></div>\r\n<div>max</div>\r\n<div>count 计算一个值出现多少次</div>\r\n<div>repeat 重复一个数组多次</div>\r\n</div>\r\n<div id=\"share\" class=\"shareUp\"></div>','vim内置函数列表','','inherit','open','open','','50-revision-v1','','','2014-10-21 09:27:01','2014-10-21 09:27:01','',50,'http://unasm.sinaapp.com/?p=51',0,'revision','',0),(52,1,'2014-10-21 15:32:27','2014-10-21 15:32:27','php 的函数static 会影响函数的作用域，如果在class内部使用static修饰函数，那么$this-&gt;就不可以在static函数内部使用，因为static已经不在class内部作用域了，所以标志着属于函数内部属性的$this就无法使用了，static函数还是需要通过：：的方式访问比较好','php static的使用','','publish','open','open','','52','','','2014-10-21 15:51:23','2014-10-21 15:51:23','',0,'http://unasm.sinaapp.com/?p=52',0,'post','',0),(53,1,'2014-10-21 15:32:27','2014-10-21 15:32:27','php 的函数static 会影响函数的作用域，如果在class内部使用static修饰函数，那么$this-&gt;就不可以在static函数内部使用，因为static已经不在class内部作用域了，所以标志着属于函数内部属性的$this就无法使用了，static函数还是需要通过：：的方式访问比较好','','','inherit','open','open','','52-revision-v1','','','2014-10-21 15:32:27','2014-10-21 15:32:27','',52,'http://unasm.sinaapp.com/?p=53',0,'revision','',0),(54,1,'2014-10-21 15:51:23','2014-10-21 15:51:23','php 的函数static 会影响函数的作用域，如果在class内部使用static修饰函数，那么$this-&gt;就不可以在static函数内部使用，因为static已经不在class内部作用域了，所以标志着属于函数内部属性的$this就无法使用了，static函数还是需要通过：：的方式访问比较好','php static的使用','','inherit','open','open','','52-revision-v1','','','2014-10-21 15:51:23','2014-10-21 15:51:23','',52,'http://unasm.sinaapp.com/?p=54',0,'revision','',0),(55,1,'2014-10-22 04:31:48','2014-10-22 04:31:48','<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/libevent.png\" alt=\"\" width=\"576\" height=\"917\" />','libevent代码结构','','publish','open','open','','libevent%e4%bb%a3%e7%a0%81%e7%bb%93%e6%9e%84','','','2014-10-22 04:31:48','2014-10-22 04:31:48','',0,'http://unasm.sinaapp.com/?p=55',0,'post','',0),(56,1,'2014-10-22 04:31:48','2014-10-22 04:31:48','<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/libevent.png\" alt=\"\" width=\"576\" height=\"917\" />','libevent代码结构','','inherit','open','open','','55-revision-v1','','','2014-10-22 04:31:48','2014-10-22 04:31:48','',55,'http://unasm.sinaapp.com/?p=56',0,'revision','',0),(57,1,'2014-10-24 12:27:30','2014-10-24 12:27:30','<strong>指针允许以更简洁的方式引用大的数据结构，程序中的数据结构可以任意打，但是无论如何增长，数据结构总是位于计算机内存中，因此必然会有地址。利用指针，就可以使用地址作为一个完整的值的速记符。因为一个内存地址在内部表示为一个整数。当数据结构很大的时候，这种策略能够节约大量的内存空间。</strong>\r\n\r\n指针是程序的不同部分可以共享数据，如果将某一个数据值的地址从一个函数传递到另一个函数，两个函数，就可以使用同一个数据。\r\n\r\n利用指针，可以在程序执行过程中预留新的内存空间 ，在很多应用中，如果程序能够在运行的时候获得新的内存空间，并让指针指向这一个内存更加方便。\r\n\r\n指针可以用来记录数据项之间的关系，在高级程序设计应用中，指针被广泛的用于构造单个数据项之间的联系。比如通常可以在第一个数据的内部表示中包含指向下一个内存项的指针','指针的意义','','publish','open','open','','%e6%8c%87%e9%92%88%e7%9a%84%e6%84%8f%e4%b9%89','','','2014-10-24 12:27:30','2014-10-24 12:27:30','',0,'http://unasm.sinaapp.com/?p=57',0,'post','',0),(58,1,'2014-10-24 12:27:30','2014-10-24 12:27:30','<strong>指针允许以更简洁的方式引用大的数据结构，程序中的数据结构可以任意打，但是无论如何增长，数据结构总是位于计算机内存中，因此必然会有地址。利用指针，就可以使用地址作为一个完整的值的速记符。因为一个内存地址在内部表示为一个整数。当数据结构很大的时候，这种策略能够节约大量的内存空间。</strong>\r\n\r\n指针是程序的不同部分可以共享数据，如果将某一个数据值的地址从一个函数传递到另一个函数，两个函数，就可以使用同一个数据。\r\n\r\n利用指针，可以在程序执行过程中预留新的内存空间 ，在很多应用中，如果程序能够在运行的时候获得新的内存空间，并让指针指向这一个内存更加方便。\r\n\r\n指针可以用来记录数据项之间的关系，在高级程序设计应用中，指针被广泛的用于构造单个数据项之间的联系。比如通常可以在第一个数据的内部表示中包含指向下一个内存项的指针','指针的意义','','inherit','open','open','','57-revision-v1','','','2014-10-24 12:27:30','2014-10-24 12:27:30','',57,'http://unasm.sinaapp.com/?p=58',0,'revision','',0),(61,1,'2014-10-30 07:53:39','2014-10-30 07:53:39','沟通是一个大问题，尤其是大家在一起创造一个全新的东西的时候，每当提出一些全新的理念和实现方案的时候，对方的理解，自己的描述，实现的可行性分析，各种方案的对比等等，总之，会是一件很麻烦的事情。\r\n\r\nso.脾气好是必须的，心平气和，不急不躁，不断理解具象别人说的内容，概念，场景，以及确认自己认知的正确，然后尽可能逻辑清晰的完整的，以平和的口吻来描述自己的理解，想法，担心等等，无论是描述，还是反驳，都最好带着场景来，太虚幻的东西都不好理解，具体的情形总是方便理解的。\r\n\r\n必要的工具总是很好的，比如xmind，axure，workbench，把自己的想法按照一种极其富有逻辑的概念，比如e-r图，虽然不是很直观，但是的确可以富有逻辑的描述数据库的设计，axure在演示交互的时候，尤其得天独厚的优势，最近我在设计e-r图的时候，觉得首先在workbench中设计好，然后在axure中添加备注解释，感觉不错，至少开始有人试图去解读了。','关于项目开发中的沟通问题','','inherit','open','open','','60-revision-v1','','','2014-10-30 07:53:39','2014-10-30 07:53:39','',60,'http://unasm.sinaapp.com/?p=61',0,'revision','',0),(62,1,'2014-10-31 10:08:34','2014-10-31 10:08:34','之所以回头去看C的内容，是因为自己学习php的过程中遇到了瓶颈，或者说是遇到了困难，以前翻阅php源码的时候，就感觉有问题，看的不太懂,很多c的内容搞不清楚，最近看libevent，这种感觉更加严重，于是去看看吧，翻阅一下c的基础，首选就是很久之前朋友推荐的《征服C指针》\r\n\r\n我没有找到完整版的，目前的版本只有73页，不过还是解答了我的一些疑惑的，比如函数指针的使用，int(*func)(double)这种声明的函数指针可以被函数赋值，然后以后可以通过这个指针调用这个函数，其实我想看void指针，一种函数指针的声明，可以被几种类型的函数根据判断条件赋值，这样的话，就可以执行不同的流程，这个用处比较大。\r\n\r\n关于结构体的内存的分配，其实一直都有两种方案，我挺好奇c是哪种方案的，一种是长度类型不确定通过特殊的控制字符找到对应的内容，一种是长度确定，宁可丢失一部分空间，也要保证内存是整块整块的，前者在很多时候会节省内存，后者会因为有规律的保存，可以加快索引的速度，c采用的是后者，果然效率优先，比如char ,double共存在一个结构体的时候，消耗的内存肯定不是1+8，而是4+8，因为要保证是4的倍数，加快速度。而结构体数据的命名，我想应该会像mysql的表那样，满足一个一对多的关系，一个表里面存储变量的名字，或许还有类型，其他的存储数据的地方保存了第一个表的地址，以后通过这个访问变量的名字和类型。\r\n\r\n还有重新复习了c函数指针的堆栈的概念','征服C指针中解答的疑惑','','publish','open','open','','%e5%be%81%e6%9c%8dc%e6%8c%87%e9%92%88%e4%b8%ad%e8%a7%a3%e7%ad%94%e7%9a%84%e7%96%91%e6%83%91','','','2014-10-31 10:08:34','2014-10-31 10:08:34','',0,'http://unasm.sinaapp.com/?p=62',0,'post','',0),(63,1,'2014-10-31 10:08:34','2014-10-31 10:08:34','之所以回头去看C的内容，是因为自己学习php的过程中遇到了瓶颈，或者说是遇到了困难，以前翻阅php源码的时候，就感觉有问题，看的不太懂,很多c的内容搞不清楚，最近看libevent，这种感觉更加严重，于是去看看吧，翻阅一下c的基础，首选就是很久之前朋友推荐的《征服C指针》\r\n\r\n我没有找到完整版的，目前的版本只有73页，不过还是解答了我的一些疑惑的，比如函数指针的使用，int(*func)(double)这种声明的函数指针可以被函数赋值，然后以后可以通过这个指针调用这个函数，其实我想看void指针，一种函数指针的声明，可以被几种类型的函数根据判断条件赋值，这样的话，就可以执行不同的流程，这个用处比较大。\r\n\r\n关于结构体的内存的分配，其实一直都有两种方案，我挺好奇c是哪种方案的，一种是长度类型不确定通过特殊的控制字符找到对应的内容，一种是长度确定，宁可丢失一部分空间，也要保证内存是整块整块的，前者在很多时候会节省内存，后者会因为有规律的保存，可以加快索引的速度，c采用的是后者，果然效率优先，比如char ,double共存在一个结构体的时候，消耗的内存肯定不是1+8，而是4+8，因为要保证是4的倍数，加快速度。而结构体数据的命名，我想应该会像mysql的表那样，满足一个一对多的关系，一个表里面存储变量的名字，或许还有类型，其他的存储数据的地方保存了第一个表的地址，以后通过这个访问变量的名字和类型。\r\n\r\n还有重新复习了c函数指针的堆栈的概念','征服C指针中解答的疑惑','','inherit','open','open','','62-revision-v1','','','2014-10-31 10:08:34','2014-10-31 10:08:34','',62,'http://unasm.sinaapp.com/?p=63',0,'revision','',0),(64,1,'2014-11-03 09:39:06','2014-11-03 09:39:06','mysql 就像一个excel ，可以用来存储kv形式的数据，可以开几个字段，每个字段存储对应的数值，就像excel中的列一样。\r\n\r\n我们现在面临的一个问题，就是一个页面上有很多的数据，有些数据在这个页面有，下一个页面一样级别的页面没有，有些数据或许有很大可能性的根据之后情况的变化随机添加，基本上可以说是在变化中存在基础的不变情况。\r\n\r\n一般的来说，有三种方案。\r\n\r\n第一种，为所有可能的情况建立字段，每条数据一个字段，如果没有添加，就为空，如果出现了之前没有对应字段的数据，就修改mysql，添加新字段，添加新的表。这个的优点是加快了查找的速度，保证了每个页面，一条纪录，而且，逻辑结构简单，方便理解，代码层面也容易的很多，只是维护上的困难比较大一些，可能出现频频修改mysql表的情况，也许最后字段数目之多，已经达到了无法容忍的地步，存储空间的浪费，也是很大的问题，总之可扩展性和维护性是很大的问题。\r\n\r\n第二种就在可扩展性和可维护性上做的不错，简而言之，就是将所有的这些或许有，或许无的数据，以及将来添加的数据，通过序列化的方式保存在一个text中，将那些必须有的，通过创建对应的字段的方式保存，优点是无论添加多少类型的数据，都可以有对应的存储的地方，缺点是不能对应的查找，因为想获取对应的数据，必须将数据解析出来，然后才可以有对应的操作。\r\n\r\n第三种是在第二种基础上进行了一个升级，本来通过kv的形式序列化存储到text中的数据，目前就通过创建一个单独的表的方式，然后将kv的数据存储起来，value就提供一个text或者是varchar存储，保证所有的内容都可以保存到字段里面，如果以后查找的时候，可以通过key查找，也可以在不用解压数据的情况下，直接在sql中查找，满足了扩展性维护性的同时，避免了无法查找的问题，缺点是编码有些复杂，不过应该是目前看起来最好的方案','mysql存储变化数据的三种方案','','publish','open','open','','mysql%e5%ad%98%e5%82%a8%e6%95%b0%e6%8d%ae%e7%9a%84%e4%b8%89%e7%a7%8d%e6%96%b9%e5%bc%8f','','','2014-11-03 09:44:50','2014-11-03 09:44:50','',0,'http://unasm.sinaapp.com/?p=64',0,'post','',0),(65,1,'2014-11-03 09:39:06','2014-11-03 09:39:06','mysql 就像一个excel ，可以用来存储kv形式的数据，可以开几个字段，每个字段存储对应的数值，就像excel中的列一样。\r\n\r\n我们现在面临的一个问题，就是一个页面上有很多的数据，有些数据在这个页面有，下一个页面一样级别的页面没有，有些数据或许有很大可能性的根据之后情况的变化随机添加，基本上可以说是在变化中存在基础的不变情况。\r\n\r\n一般的来说，有三种方案。\r\n\r\n第一种，为所有可能的情况建立字段，每条数据一个字段，如果没有添加，就为空，如果出现了之前没有对应字段的数据，就修改mysql，添加新字段，添加新的表。这个的优点是加快了查找的速度，保证了每个页面，一条纪录，而且，逻辑结构简单，方便理解，代码层面也容易的很多，只是维护上的困难比较大一些，可能出现频频修改mysql表的情况，也许最后字段数目之多，已经达到了无法容忍的地步，存储空间的浪费，也是很大的问题，总之可扩展性和维护性是很大的问题。\r\n\r\n第二种就在可扩展性和可维护性上做的不错，简而言之，就是将所有的这些或许有，或许无的数据，以及将来添加的数据，通过序列化的方式保存在一个text中，将那些必须有的，通过创建对应的字段的方式保存，优点是无论添加多少类型的数据，都可以有对应的存储的地方，缺点是不能对应的查找，因为想获取对应的数据，必须将数据解析出来，然后才可以有对应的操作。\r\n\r\n第三种是在第二种基础上进行了一个升级，本来通过kv的形式序列化存储到text中的数据，目前就通过创建一个单独的表的方式，然后将kv的数据存储起来，value就提供一个text或者是varchar存储，保证所有的内容都可以保存到字段里面，如果以后查找的时候，可以通过key查找，也可以在不用解压数据的情况下，直接在sql中查找，满足了扩展性维护性的同时，避免了无法查找的问题，缺点是编码有些复杂，不过应该是目前看起来最好的方案','mysql存储数据的三种方式','','inherit','open','open','','64-revision-v1','','','2014-11-03 09:39:06','2014-11-03 09:39:06','',64,'http://unasm.sinaapp.com/?p=65',0,'revision','',0),(66,1,'2014-11-03 09:44:50','2014-11-03 09:44:50','mysql 就像一个excel ，可以用来存储kv形式的数据，可以开几个字段，每个字段存储对应的数值，就像excel中的列一样。\r\n\r\n我们现在面临的一个问题，就是一个页面上有很多的数据，有些数据在这个页面有，下一个页面一样级别的页面没有，有些数据或许有很大可能性的根据之后情况的变化随机添加，基本上可以说是在变化中存在基础的不变情况。\r\n\r\n一般的来说，有三种方案。\r\n\r\n第一种，为所有可能的情况建立字段，每条数据一个字段，如果没有添加，就为空，如果出现了之前没有对应字段的数据，就修改mysql，添加新字段，添加新的表。这个的优点是加快了查找的速度，保证了每个页面，一条纪录，而且，逻辑结构简单，方便理解，代码层面也容易的很多，只是维护上的困难比较大一些，可能出现频频修改mysql表的情况，也许最后字段数目之多，已经达到了无法容忍的地步，存储空间的浪费，也是很大的问题，总之可扩展性和维护性是很大的问题。\r\n\r\n第二种就在可扩展性和可维护性上做的不错，简而言之，就是将所有的这些或许有，或许无的数据，以及将来添加的数据，通过序列化的方式保存在一个text中，将那些必须有的，通过创建对应的字段的方式保存，优点是无论添加多少类型的数据，都可以有对应的存储的地方，缺点是不能对应的查找，因为想获取对应的数据，必须将数据解析出来，然后才可以有对应的操作。\r\n\r\n第三种是在第二种基础上进行了一个升级，本来通过kv的形式序列化存储到text中的数据，目前就通过创建一个单独的表的方式，然后将kv的数据存储起来，value就提供一个text或者是varchar存储，保证所有的内容都可以保存到字段里面，如果以后查找的时候，可以通过key查找，也可以在不用解压数据的情况下，直接在sql中查找，满足了扩展性维护性的同时，避免了无法查找的问题，缺点是编码有些复杂，不过应该是目前看起来最好的方案','mysql存储变化数据的三种方案','','inherit','open','open','','64-revision-v1','','','2014-11-03 09:44:50','2014-11-03 09:44:50','',64,'http://unasm.sinaapp.com/?p=66',0,'revision','',0),(67,1,'2014-11-03 14:33:20','2014-11-03 14:33:20','如果将一段utf8的内容存储在mysql，就会遇到控制字符，然后就会发现自己想要保存的数据没有完全录入就停止了，所以这个时候，需要base64_encode一下，将内容转义','utf8存储的问题','','publish','open','open','','utf8%e5%ad%98%e5%82%a8%e7%9a%84%e9%97%ae%e9%a2%98','','','2014-11-03 14:33:20','2014-11-03 14:33:20','',0,'http://unasm.sinaapp.com/?p=67',0,'post','',0),(68,1,'2014-11-03 14:33:20','2014-11-03 14:33:20','如果将一段utf8的内容存储在mysql，就会遇到控制字符，然后就会发现自己想要保存的数据没有完全录入就停止了，所以这个时候，需要base64_encode一下，将内容转义','utf8存储的问题','','inherit','open','open','','67-revision-v1','','','2014-11-03 14:33:20','2014-11-03 14:33:20','',67,'http://unasm.sinaapp.com/?p=68',0,'revision','',0),(69,1,'2014-11-04 03:32:26','2014-11-04 03:32:26','<strong>以下内容来自sina DBA建议</strong>\r\n<ol>\r\n	<li>表字符集选择UTF8（必须，ps：应该和内部环境有关系）</li>\r\n	<li>存储引擎使用innodb（强烈建议）</li>\r\n	<li>使用varbinary存储变长字符串（建议）</li>\r\n	<li>不在数据库中存储图片，文件等（强烈建议）</li>\r\n	<li>单张表的数据量控制在5000w一下（建议，ps：一般来说，我们会在500w以下的级别）</li>\r\n</ol>\r\n<h3>字符类的规范</h3>\r\n<ol>\r\n	<li>所有的字段均定义为not null（ps:出于存储空间的考虑）</li>\r\n	<li>使用unsigned 存储非负整数（必须）</li>\r\n	<li>使用timestamp存储时间（强烈建议）</li>\r\n	<li>使用varchar存储变长字符串（建议）</li>\r\n	<li>使用unsigned int存储ipv4的地址，而不是char（15）（必须）</li>\r\n	<li>使用tinyint来代替enum，set类型</li>\r\n	<li>少用并尽可能的拆分text，blob类型字符串(建议）</li>\r\n	<li>使用decimal存储精确浮点数（必须）</li>\r\n	<li>将字符串转为数字（建议）</li>\r\n	<li>尽可能的节省空间</li>\r\n</ol>\r\n<h3>索引的规范</h3>\r\n<ol>\r\n	<li>单个索引中的字段数不超过5个</li>\r\n	<li>单张表的索引数量不超过5个</li>\r\n	<li>字符串使用前缀索引，前缀长度不超过8个字符</li>\r\n	<li>对特殊字段，增加crc32或者md5的伪列并建立索引</li>\r\n	<li>区分度大的字段放在前面</li>\r\n	<li>核心的sql优先考虑非覆盖索引（建议）</li>\r\n	<li>避免冗余的索引</li>\r\n	<li>能不建立索引，尽量不建立索引（建议，平局数据密度和分布，查询更新的比例）</li>\r\n</ol>\r\n<h4>主键的索引</h4>\r\n<ol>\r\n	<li>不使用更新频繁的列</li>\r\n	<li>尽量不选择字符串列</li>\r\n	<li>不适用uuid md5 hash</li>\r\n	<li>默认使用非空的唯一键</li>\r\n	<li>建议选择自增或者是发号器</li>\r\n</ol>\r\n<h4>索引的禁忌</h4>\r\n<ol>\r\n	<li>不要在低基数列上建立索引，（ps：比如数据重复率15%以上）</li>\r\n	<li>不要再索引上进行数学运算和函数运算（必须）</li>\r\n	<li>尽量不要使用外键</li>\r\n	<li>不使用%前导的查询，例如like “%abc”（必须）</li>\r\n	<li>不在null列上加索引</li>\r\n	<li>不使用select　×（必须，减少ｃｐｕ和ｉｏ消耗网络带宽，无法使用覆盖索引，减少表结构带来的影响，ｓｅｌｅｃｔ／ｊｏｉｎ可能产生临时表，ｐｓ：不过在开发时期，可以使用这个，避免频繁更改）</li>\r\n	<li>不使用负向查询，例如 not in , != , not like(建议，无法使用索引，导致全表扫面，引起buffer pool利用率降低）</li>\r\n</ol>\r\n<h4>适用预编译语句</h4>\r\n<ol>\r\n	<li>一次解析，多次使用</li>\r\n	<li>只传递参数，比传递sql更有效率</li>\r\n	<li>可以避免sql注入</li>\r\n	<li>会导致索引失效</li>\r\n	<li>必须是最左前缀</li>\r\n	<li>不可能用到两个范围条件。</li>\r\n</ol>\r\n避免使用存储过程，触发器，函数等，降低业务的耦合度，避开bug\r\n\r\n避免使用大表的join，join消耗较多的内存，会产生临时表，mysql最擅长的是大表的主键/索引查询，不擅长数学运算\r\n\r\n尽量减少和数据库的交互次数\r\n\r\n合理的使用分页\r\n\r\nupate ，delete 语句不使用limit（必须）\r\n\r\n拒绝大的sql，拆分成小的sql ， 充分利用query cache，充分利用多核cpu\r\n\r\n同一个字段，将or 改成in，建议in小于500个，or的效率为O(n),in的效率为O（Log n）\r\n\r\n不同的字段，将or 改为union all','mysql 使用规范','','publish','open','open','','mysql-%e4%bd%bf%e7%94%a8%e8%a7%84%e8%8c%83','','','2014-11-04 03:32:26','2014-11-04 03:32:26','',0,'http://unasm.sinaapp.com/?p=69',0,'post','',0),(70,1,'2014-11-04 03:32:26','2014-11-04 03:32:26','<strong>以下内容来自sina DBA建议</strong>\r\n<ol>\r\n	<li>表字符集选择UTF8（必须，ps：应该和内部环境有关系）</li>\r\n	<li>存储引擎使用innodb（强烈建议）</li>\r\n	<li>使用varbinary存储变长字符串（建议）</li>\r\n	<li>不在数据库中存储图片，文件等（强烈建议）</li>\r\n	<li>单张表的数据量控制在5000w一下（建议，ps：一般来说，我们会在500w以下的级别）</li>\r\n</ol>\r\n<h3>字符类的规范</h3>\r\n<ol>\r\n	<li>所有的字段均定义为not null（ps:出于存储空间的考虑）</li>\r\n	<li>使用unsigned 存储非负整数（必须）</li>\r\n	<li>使用timestamp存储时间（强烈建议）</li>\r\n	<li>使用varchar存储变长字符串（建议）</li>\r\n	<li>使用unsigned int存储ipv4的地址，而不是char（15）（必须）</li>\r\n	<li>使用tinyint来代替enum，set类型</li>\r\n	<li>少用并尽可能的拆分text，blob类型字符串(建议）</li>\r\n	<li>使用decimal存储精确浮点数（必须）</li>\r\n	<li>将字符串转为数字（建议）</li>\r\n	<li>尽可能的节省空间</li>\r\n</ol>\r\n<h3>索引的规范</h3>\r\n<ol>\r\n	<li>单个索引中的字段数不超过5个</li>\r\n	<li>单张表的索引数量不超过5个</li>\r\n	<li>字符串使用前缀索引，前缀长度不超过8个字符</li>\r\n	<li>对特殊字段，增加crc32或者md5的伪列并建立索引</li>\r\n	<li>区分度大的字段放在前面</li>\r\n	<li>核心的sql优先考虑非覆盖索引（建议）</li>\r\n	<li>避免冗余的索引</li>\r\n	<li>能不建立索引，尽量不建立索引（建议，平局数据密度和分布，查询更新的比例）</li>\r\n</ol>\r\n<h4>主键的索引</h4>\r\n<ol>\r\n	<li>不使用更新频繁的列</li>\r\n	<li>尽量不选择字符串列</li>\r\n	<li>不适用uuid md5 hash</li>\r\n	<li>默认使用非空的唯一键</li>\r\n	<li>建议选择自增或者是发号器</li>\r\n</ol>\r\n<h4>索引的禁忌</h4>\r\n<ol>\r\n	<li>不要在低基数列上建立索引，（ps：比如数据重复率15%以上）</li>\r\n	<li>不要再索引上进行数学运算和函数运算（必须）</li>\r\n	<li>尽量不要使用外键</li>\r\n	<li>不使用%前导的查询，例如like “%abc”（必须）</li>\r\n	<li>不在null列上加索引</li>\r\n	<li>不使用select　×（必须，减少ｃｐｕ和ｉｏ消耗网络带宽，无法使用覆盖索引，减少表结构带来的影响，ｓｅｌｅｃｔ／ｊｏｉｎ可能产生临时表，ｐｓ：不过在开发时期，可以使用这个，避免频繁更改）</li>\r\n	<li>不使用负向查询，例如 not in , != , not like(建议，无法使用索引，导致全表扫面，引起buffer pool利用率降低）</li>\r\n</ol>\r\n<h4>适用预编译语句</h4>\r\n<ol>\r\n	<li>一次解析，多次使用</li>\r\n	<li>只传递参数，比传递sql更有效率</li>\r\n	<li>可以避免sql注入</li>\r\n	<li>会导致索引失效</li>\r\n	<li>必须是最左前缀</li>\r\n	<li>不可能用到两个范围条件。</li>\r\n</ol>\r\n避免使用存储过程，触发器，函数等，降低业务的耦合度，避开bug\r\n\r\n避免使用大表的join，join消耗较多的内存，会产生临时表，mysql最擅长的是大表的主键/索引查询，不擅长数学运算\r\n\r\n尽量减少和数据库的交互次数\r\n\r\n合理的使用分页\r\n\r\nupate ，delete 语句不使用limit（必须）\r\n\r\n拒绝大的sql，拆分成小的sql ， 充分利用query cache，充分利用多核cpu\r\n\r\n同一个字段，将or 改成in，建议in小于500个，or的效率为O(n),in的效率为O（Log n）\r\n\r\n不同的字段，将or 改为union all','mysql 使用规范','','inherit','open','open','','69-revision-v1','','','2014-11-04 03:32:26','2014-11-04 03:32:26','',69,'http://unasm.sinaapp.com/?p=70',0,'revision','',0),(71,1,'2014-11-04 09:00:59','2014-11-04 09:00:59','在前端的一个自定义的组件，在后台需要对应的支持，可以定义如下规范：\r\n\r\n这样就可以定义了一个前端的样式，交互的时候，后台对应的api等等，所有的验证，数据交互，显示文字等等，都可以在一个数组中搞定，以后有具体的页面样式，就可以直接写配置输入，而不是再手写一遍，\r\n\r\n突然感觉，自己以前的很多工作都是白白浪费了，做了很多无用功，这种表单，完全没有必要手写\r\n<p style=\"text-align: justify;\">其实图片中的还是不够强大的，比如，我们可以定义键值为   blur =&gt; \"userCheck\"   约定前端在某一个input框blur的时候和后台的交互动作，change定义change的时候和后台的交互动作，样式有一套规定的组件，通过type来确定，通过这样实现组件化和规范化，尽可能的实现代码复用</p>\r\n\r\n\r\n[caption id=\"\" align=\"alignnone\" width=\"1256\"]<img class=\"\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/QQ%E5%9B%BE%E7%89%8720141104162204.jpg\" alt=\"\" width=\"1256\" height=\"828\" /> 自定义表单[/caption]','前端一个表单的','','publish','open','open','','%e5%89%8d%e7%ab%af%e4%b8%80%e4%b8%aa%e8%a1%a8%e5%8d%95%e7%9a%84','','','2014-11-04 09:00:59','2014-11-04 09:00:59','',0,'http://unasm.sinaapp.com/?p=71',0,'post','',0),(72,1,'2014-11-04 09:00:59','2014-11-04 09:00:59','在前端的一个自定义的组件，在后台需要对应的支持，可以定义如下规范：\r\n\r\n这样就可以定义了一个前端的样式，交互的时候，后台对应的api等等，所有的验证，数据交互，显示文字等等，都可以在一个数组中搞定，以后有具体的页面样式，就可以直接写配置输入，而不是再手写一遍，\r\n\r\n突然感觉，自己以前的很多工作都是白白浪费了，做了很多无用功，这种表单，完全没有必要手写\r\n<p style=\"text-align: justify;\">其实图片中的还是不够强大的，比如，我们可以定义键值为   blur =&gt; \"userCheck\"   约定前端在某一个input框blur的时候和后台的交互动作，change定义change的时候和后台的交互动作，样式有一套规定的组件，通过type来确定，通过这样实现组件化和规范化，尽可能的实现代码复用</p>\r\n\r\n\r\n[caption id=\"\" align=\"alignnone\" width=\"1256\"]<img class=\"\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/QQ%E5%9B%BE%E7%89%8720141104162204.jpg\" alt=\"\" width=\"1256\" height=\"828\" /> 自定义表单[/caption]','前端一个表单的','','inherit','open','open','','71-revision-v1','','','2014-11-04 09:00:59','2014-11-04 09:00:59','',71,'http://unasm.sinaapp.com/?p=72',0,'revision','',0),(75,1,'2014-11-11 09:16:35','2014-11-11 09:16:35','php 的 class_exists在执行的时候，会首先已经存在的对象里面进行查找，如果查找到的话，就停止，如果没有，会在autolaod中尝试着去加载新的对象，如果可以加载对应的对象，则include进来，如果没有对应对象加载，则返回FALSE','class_exists 的执行流程备忘','','inherit','open','open','','74-revision-v1','','','2014-11-11 09:16:35','2014-11-11 09:16:35','',74,'http://unasm.sinaapp.com/?p=75',0,'revision','',0),(90,1,'2014-11-27 17:30:32','2014-11-27 17:30:32','不同的网页，编码格式很可能不同，但是对应的数据库却只有一种，也就是存储的编码只有一种，怎么办呢？可以在不改变原来编码的情况下，base64之后，存储，然后将来需要的时候base64_decode了就可以了','抓取网页时候的保存问题','','publish','open','open','','%e6%8a%93%e5%8f%96%e7%bd%91%e9%a1%b5%e6%97%b6%e5%80%99%e7%9a%84%e4%bf%9d%e5%ad%98%e9%97%ae%e9%a2%98','','','2014-11-27 17:30:48','2014-11-27 17:30:48','',0,'http://unasm.sinaapp.com/?p=90',0,'post','',0),(79,1,'2014-11-19 08:12:57','2014-11-19 08:12:57','vim 通过命令:%s/\"/\'这么简单的命令，就可以将全文的所有的双引号替换成为单引号，如果只是想替换一部分而已，就在visual模式下选择对应的行，然后输入:%s/\"/\'替换即可','vim的替换功能','','inherit','open','open','','76-revision-v1','','','2014-11-19 08:12:57','2014-11-19 08:12:57','',76,'http://unasm.sinaapp.com/?p=79',0,'revision','',0),(80,1,'2014-11-19 09:01:33','0000-00-00 00:00:00','%s/\"/\'  %的意义是全文替换，在整个buffer内进行，如果不想全文，只是想选择范围内进行，可以去掉%','vim的替换功能','','draft','open','open','','','','','2014-11-19 09:01:33','2014-11-19 09:01:33','',0,'http://unasm.sinaapp.com/?p=80',0,'post','',0),(81,1,'2014-11-19 09:11:11','2014-11-19 09:11:11','vim的替换功能是非常赞的，可以轻松的将全文或者是一段文字内的的特定的字符串替换成另外的字符串，而且是通过正则进行的，就给了替换非常强的扩展空间，不过，通常作为下意识就可以使用的功能来说，一定要非常简单，vim在这个做的非常好。\r\n<h3>1.选择模式下</h3>\r\n如下图 ，在选择模式下直接按：(冒号)会默认添加出来 <strong><code>\'&lt;,\'&gt;</code></strong>， 不太清楚什么意思，不过，不能去掉，它的功能是标注出选择的行范围，在这种情况下，不删除 <strong><code>\'&lt;,\'&gt;  </code></strong> 然后输入s/\\\"/\\\'就会将8行里面的“全部替换成单引号，注意，是8行全部，即使第一行的第一个双引号没有被选择，也会被替换，这个是要注意的\r\n\r\n如果删除了 <strong><code>\'&lt;,\'&gt;  </code></strong>结果是之后被选择的第一行内容被替换了，就是下面行里面的<code> \"&lt;div class=\"row\"&gt;</code>被替换，其他被选择的行没有任何影响，这要注意\r\n\r\n&nbsp;\r\n\r\n<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/vimchose.jpg\" alt=\"\" width=\"524\" height=\"158\" />\r\n<h3>2.全文替换</h3>\r\n如果是想全文，整个buffer内的替换，就可以:%s/\"/\' 来完成，非常容易\r\n<h3>3.上下文替换</h3>\r\n首先要说的是，vim有一个非常好的插件，叫做numbers.vim ，可以标注出当前行，具体上下行的具体差距，然后配合number + j/k是非常好用的，具体演示效果如下<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/number.jpg\" alt=\"\" width=\"400\" height=\"323\" />\r\n\r\n可以看到，当前行是21行，具体templateObj有11行，在正常模式下（不确定当前什么模式，直接按esc就是normal模式了）11k就可以直接跳转到上面的第11行了，非常方便，\r\n\r\n如下命令 <code><strong>：21，+6s/\\\"/\\\'</strong></code> 可以实现，21行及其向下6行内的双引号替换成单引号，<code><strong>：21，6+s/\\\"/\\\'</strong></code> 则可以实现21行及其向上6行内的双引号替换成单引号，注意两者的差别，仅仅是一个+好的位置不同而已。\r\n\r\n还有一种方式，也可以实现上下文的引号替换，命令如下<code><strong> ：.,.+6s/\\\"/\\\' </strong></code> 注意，这里有相对坐标的概念， 点号 .表示光标所在行.+6表示光标所在行的向下六行，同理.6+应该是表示光标所在行的向上六行，通过相对坐标实现双引号和单引号的替换','vim的:s替换功能','','publish','open','open','','vim%e7%9a%84s%e6%9b%bf%e6%8d%a2%e5%8a%9f%e8%83%bd','','','2014-11-25 03:41:54','2014-11-25 03:41:54','',0,'http://unasm.sinaapp.com/?p=81',0,'post','',0),(82,1,'2014-11-19 09:01:33','2014-11-19 09:01:33','%s/\"/\'  %的意义是全文替换，在整个buffer内进行，如果不想全文，只是想选择范围内进行，可以去掉%','vim的替换功能','','inherit','open','open','','80-revision-v1','','','2014-11-19 09:01:33','2014-11-19 09:01:33','',80,'http://unasm.sinaapp.com/?p=82',0,'revision','',0),(119,1,'2014-12-27 10:39:27','2014-12-27 10:39:27','我有一个不是很好的习惯，就是太喜欢快捷键，更喜欢xfce而不是unity或者是win的原因，就是xfce的自定义快捷键更多，如今切换到Mac下，感觉有一些常用快捷键定义的不是很合理，网上却找不到修改快捷键的介绍，好像大家都不修改似的。\r\n\r\n下面介绍我摸索来的修改自定义快捷键的方式。\r\n\r\n第一部，打开系统偏好设置，然后点击键盘，选择快捷键\r\n\r\n<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/macshortfirst.png\" alt=\"\" width=\"1332\" height=\"954\" />\r\n\r\n&nbsp;\r\n\r\n下面是我之前已经定义的快捷键，估计很多人都已经猜到怎么做了，\r\n\r\n&nbsp;\r\n\r\n<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/macshortlast.png\" alt=\"\" width=\"1292\" height=\"1134\" />\r\n\r\n点击左下角的+号 弹出的页面里面，最上面选择快捷键控制的应用，如果想要控制的快捷键是全局的，就选择默认的全局的，如果不是就选择一个自己想控制的，然后在其他地方打开想控制的应用，比如，我下面演示的是如何修改终端的Zoom ,我首先打开了终端，然后在  控制栏 --&gt; Window 查看 ，发现系统控制缩放的窗口缩放的命令是Zoom ,目前对应的快捷键还没有，如果想修改的是tab页的切换，那对应的命令就是Show Next Tab 把这个命令写到第二个输入框里面，第三个输入框是输入想要的快捷键，比如我想要Command + Shift + Enter ，我同时按这三个键，就得到了想要的输入，注意，这个框不是一个字母一个字母输入的\r\n\r\n<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/choseName.png\" alt=\"\" width=\"850\" height=\"564\" />\r\n\r\n<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/Screen%20Shot%202014-12-27%20at%206.31.29%20PM.png\" alt=\"\" width=\"1306\" height=\"1126\" />\r\n\r\n然后点击添加，这样随便打开一个应用，同时按Command + Shift + Enter ，就可以看看效果了','Mac 修改  快捷键','','publish','open','open','','mac-%e4%bf%ae%e6%94%b9-%e5%bf%ab%e6%8d%b7%e9%94%ae','','','2014-12-27 10:39:27','2014-12-27 10:39:27','',0,'http://unasm.sinaapp.com/?p=119',0,'post','',0),(84,1,'2014-11-19 09:11:11','2014-11-19 09:11:11','vim的替换功能是非常赞的，可以轻松的将全文或者是一段文字内的的特定的字符串替换成另外的字符串，而且是通过正则进行的，就给了替换非常强的扩展空间，不过，通常作为下意识就可以使用的功能来说，一定要非常简单，vim在这个做的非常好。\r\n\r\n：s/\"/\' 这四个字符，就可以完成选择区域内的双引号替换成单引号的功能，如果是想全文，整个buffer内的替换，就可以:%s/\"/\' 来完成，非常容易','vim的:s替换功能','','inherit','open','open','','81-revision-v1','','','2014-11-19 09:11:11','2014-11-19 09:11:11','',81,'http://unasm.sinaapp.com/?p=84',0,'revision','',0),(85,1,'2014-11-24 04:47:53','2014-11-24 04:47:53','vim里面在visual模式下，选择对应的文本，然后按下y是将选择的文本进行复制，之后可以在想要的地方p(paste)就可以将内容复制到指定的位置了，\r\n\r\nY在normal模式下，直接按Y，不用选择文本，就可以实现本行内容的复制，然后如果按p的话，就是直接整行内容的粘贴，\r\n\r\n最神奇的是这样，也是今天记录笔记的原因，在visual模式下，选择了几行，但是没有最上面一样没有在最开头，最后一行没有在最结尾，即visual模式下，没有全选择<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/biji.PNG\" alt=\"\" width=\"646\" height=\"93\" />\r\n\r\n这个时候，如果选择按Y，可以做到直接将四行代码直接全部复制下来','vim使用技巧之复制Y/y','','publish','open','open','','vim%e4%bd%bf%e7%94%a8%e6%8a%80%e5%b7%a7%e4%b9%8b%e5%a4%8d%e5%88%b6yy','','','2014-11-24 04:47:53','2014-11-24 04:47:53','',0,'http://unasm.sinaapp.com/?p=85',0,'post','',0),(86,1,'2014-11-24 04:47:53','2014-11-24 04:47:53','vim里面在visual模式下，选择对应的文本，然后按下y是将选择的文本进行复制，之后可以在想要的地方p(paste)就可以将内容复制到指定的位置了，\r\n\r\nY在normal模式下，直接按Y，不用选择文本，就可以实现本行内容的复制，然后如果按p的话，就是直接整行内容的粘贴，\r\n\r\n最神奇的是这样，也是今天记录笔记的原因，在visual模式下，选择了几行，但是没有最上面一样没有在最开头，最后一行没有在最结尾，即visual模式下，没有全选择<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/biji.PNG\" alt=\"\" width=\"646\" height=\"93\" />\r\n\r\n这个时候，如果选择按Y，可以做到直接将四行代码直接全部复制下来','vim使用技巧之复制Y/y','','inherit','open','open','','85-revision-v1','','','2014-11-24 04:47:53','2014-11-24 04:47:53','',85,'http://unasm.sinaapp.com/?p=86',0,'revision','',0),(87,1,'2014-11-25 03:41:27','2014-11-25 03:41:27','vim的替换功能是非常赞的，可以轻松的将全文或者是一段文字内的的特定的字符串替换成另外的字符串，而且是通过正则进行的，就给了替换非常强的扩展空间，不过，通常作为下意识就可以使用的功能来说，一定要非常简单，vim在这个做的非常好。\n<h3>1.选择模式下</h3>\n如下图 ，在选择模式下直接按：(冒号)会默认添加出来 <strong><code>\'&lt;,\'&gt;</code></strong>， 不太清楚什么意思，不过，不能去掉，它的功能是标注出选择的行范围，在这种情况下，不删除 <strong><code>\'&lt;,\'&gt;  </code></strong> 然后输入s/\\\"/\\\'就会将8行里面的“全部替换成单引号，注意，是8行全部，即使第一行的第一个双引号没有被选择，也会被替换，这个是要注意的\n\n如果删除了 <strong><code>\'&lt;,\'&gt;  </code></strong>结果是之后被选择的第一行内容被替换了，就是下面行里面的<code> \"&lt;div class=\"row\"&gt;</code>被替换，其他被选择的行没有任何影响，这要注意\n\n&nbsp;\n\n<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/vimchose.jpg\" alt=\"\" width=\"524\" height=\"158\" />\n<h3>2.全文替换</h3>\n如果是想全文，整个buffer内的替换，就可以:%s/\"/\' 来完成，非常容易\n<h3>3.上下文替换</h3>\n首先要说的是，vim有一个非常好的插件，叫做numbers.vim ，可以标注出当前行，具体上下行的具体差距，然后配合number + j/k是非常好用的，具体演示效果如下<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/number.jpg\" alt=\"\" width=\"400\" height=\"323\" />\n\n可以看到，当前行是21行，具体templateObj有11行，在正常模式下（不确定当前什么模式，直接按esc就是normal模式了）11k就可以直接跳转到上面的第11行了，非常方便，\n\n如下命令 <code><strong>：21，+6s/\\\"/\\\'</strong></code> 可以实现，21行及其向下6行内的双引号替换成单引号，<code><strong>：21，6+s/\\\"/\\\'</strong></code> 则可以实现21行及其向上6行内的双引号替换成单引号，注意两者的差别，仅仅是一个+好的位置不同而已。\n\n还有一种方式，也可以实现上下文的引号替换，命令如下<code><strong> ：.,.+6s/\\\"/\\\' </strong></code>  注意，这里有相对坐标的概念， 点号 .表示光标所在行.+6表示光标所在行的向下六行，同理.6+应该是表示光标所在行的向上六行','vim的:s替换功能','','inherit','open','open','','81-autosave-v1','','','2014-11-25 03:41:27','2014-11-25 03:41:27','',81,'http://unasm.sinaapp.com/?p=87',0,'revision','',0),(88,1,'2014-11-25 03:41:54','2014-11-25 03:41:54','vim的替换功能是非常赞的，可以轻松的将全文或者是一段文字内的的特定的字符串替换成另外的字符串，而且是通过正则进行的，就给了替换非常强的扩展空间，不过，通常作为下意识就可以使用的功能来说，一定要非常简单，vim在这个做的非常好。\r\n<h3>1.选择模式下</h3>\r\n如下图 ，在选择模式下直接按：(冒号)会默认添加出来 <strong><code>\'&lt;,\'&gt;</code></strong>， 不太清楚什么意思，不过，不能去掉，它的功能是标注出选择的行范围，在这种情况下，不删除 <strong><code>\'&lt;,\'&gt;  </code></strong> 然后输入s/\\\"/\\\'就会将8行里面的“全部替换成单引号，注意，是8行全部，即使第一行的第一个双引号没有被选择，也会被替换，这个是要注意的\r\n\r\n如果删除了 <strong><code>\'&lt;,\'&gt;  </code></strong>结果是之后被选择的第一行内容被替换了，就是下面行里面的<code> \"&lt;div class=\"row\"&gt;</code>被替换，其他被选择的行没有任何影响，这要注意\r\n\r\n&nbsp;\r\n\r\n<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/vimchose.jpg\" alt=\"\" width=\"524\" height=\"158\" />\r\n<h3>2.全文替换</h3>\r\n如果是想全文，整个buffer内的替换，就可以:%s/\"/\' 来完成，非常容易\r\n<h3>3.上下文替换</h3>\r\n首先要说的是，vim有一个非常好的插件，叫做numbers.vim ，可以标注出当前行，具体上下行的具体差距，然后配合number + j/k是非常好用的，具体演示效果如下<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/number.jpg\" alt=\"\" width=\"400\" height=\"323\" />\r\n\r\n可以看到，当前行是21行，具体templateObj有11行，在正常模式下（不确定当前什么模式，直接按esc就是normal模式了）11k就可以直接跳转到上面的第11行了，非常方便，\r\n\r\n如下命令 <code><strong>：21，+6s/\\\"/\\\'</strong></code> 可以实现，21行及其向下6行内的双引号替换成单引号，<code><strong>：21，6+s/\\\"/\\\'</strong></code> 则可以实现21行及其向上6行内的双引号替换成单引号，注意两者的差别，仅仅是一个+好的位置不同而已。\r\n\r\n还有一种方式，也可以实现上下文的引号替换，命令如下<code><strong> ：.,.+6s/\\\"/\\\' </strong></code> 注意，这里有相对坐标的概念， 点号 .表示光标所在行.+6表示光标所在行的向下六行，同理.6+应该是表示光标所在行的向上六行，通过相对坐标实现双引号和单引号的替换','vim的:s替换功能','','inherit','open','open','','81-revision-v1','','','2014-11-25 03:41:54','2014-11-25 03:41:54','',81,'http://unasm.sinaapp.com/?p=88',0,'revision','',0),(91,1,'2014-11-27 17:30:32','2014-11-27 17:30:32','不同的网页，编码格式很可能不同，但是对应的数据库却只有一种，也就是存储的编码只有一种，怎么办呢？可以在不改变原来编码的情况下，base64之后，存储，然后将来需要的时候base64_decode了就可以了','抓取网页时候的保存问题','','inherit','open','open','','90-revision-v1','','','2014-11-27 17:30:32','2014-11-27 17:30:32','',90,'http://unasm.sinaapp.com/?p=91',0,'revision','',0),(93,1,'2014-12-10 10:11:30','2014-12-10 10:11:30','在网站设计中mvc是最流行的，但是在具体操作的时候，这个结构却是见仁见智的，v的划分是很清晰的，c和m的权限划分，却不是这么明确，从整个设计结构上来说，model是用来控制数据的，在最初的操作中，我是把model用来操作表，每个model class用来控制一个表，controller就像胶水一样，用来处理来自页面的接口，json的，xml的，页面的，ajax的，每个controller 对一个页面负责，不同页面之间的复用部分，放在lib里面，不同的controller里面调用library 来实现代码复用，好处是减少了层级，mvc三个级别+一个lib附属级别。\r\n\r\n但是遇到的问题是 lib 和 controller的职能划分问题，很多时候是写一段代码的时候，首先放在controller里面，然后发现其他的页面也需要这个功能，就把这段代码复制到了library里面，然后两处调用这个，这个还算好的，如果开发者不是同一个人的话，就会遇到两个人实现了相同的逻辑，然后谁也没有放到lib里面，或者是放在lib里面之后，放在什么地方的问题，重新命名一个文件，还是添加在某个类里面，这些都是值得思考和商榷的问题，约定里面模糊的地方。\r\n\r\n最新接触了一种新的理想，可以称之为mmvc，剥离了之前的lib附属级别，框架里面提供的工具lib保留，这个在使用框架的时候应该都清楚这些类的存在的，在自己添加的代码里面不再增加这些类，在mvc三层的基础上增加model类，编程modeldb + model + controller + view 四层级别，mdoeldb和我之前定义的每个model  class 控制操作一个表一样，controller被削弱，只是负责接收从页面外部发起的请求数据，然后检验这些数据，调用model 返回数据，\r\n\r\nmodeldb ，controller之间不能存在互叼，model之间可以，感觉是强制性的把lib的功能划分进入了mvc的层级里面，至于效果，拭目以待','论mvc补充之mmvc','','publish','open','open','','%e8%ae%bamvc%e8%a1%a5%e5%85%85%e4%b9%8bmmvc','','','2014-12-10 10:11:30','2014-12-10 10:11:30','',0,'http://unasm.sinaapp.com/?p=93',0,'post','',0),(94,1,'2014-12-10 10:11:30','2014-12-10 10:11:30','在网站设计中mvc是最流行的，但是在具体操作的时候，这个结构却是见仁见智的，v的划分是很清晰的，c和m的权限划分，却不是这么明确，从整个设计结构上来说，model是用来控制数据的，在最初的操作中，我是把model用来操作表，每个model class用来控制一个表，controller就像胶水一样，用来处理来自页面的接口，json的，xml的，页面的，ajax的，每个controller 对一个页面负责，不同页面之间的复用部分，放在lib里面，不同的controller里面调用library 来实现代码复用，好处是减少了层级，mvc三个级别+一个lib附属级别。\r\n\r\n但是遇到的问题是 lib 和 controller的职能划分问题，很多时候是写一段代码的时候，首先放在controller里面，然后发现其他的页面也需要这个功能，就把这段代码复制到了library里面，然后两处调用这个，这个还算好的，如果开发者不是同一个人的话，就会遇到两个人实现了相同的逻辑，然后谁也没有放到lib里面，或者是放在lib里面之后，放在什么地方的问题，重新命名一个文件，还是添加在某个类里面，这些都是值得思考和商榷的问题，约定里面模糊的地方。\r\n\r\n最新接触了一种新的理想，可以称之为mmvc，剥离了之前的lib附属级别，框架里面提供的工具lib保留，这个在使用框架的时候应该都清楚这些类的存在的，在自己添加的代码里面不再增加这些类，在mvc三层的基础上增加model类，编程modeldb + model + controller + view 四层级别，mdoeldb和我之前定义的每个model  class 控制操作一个表一样，controller被削弱，只是负责接收从页面外部发起的请求数据，然后检验这些数据，调用model 返回数据，\r\n\r\nmodeldb ，controller之间不能存在互叼，model之间可以，感觉是强制性的把lib的功能划分进入了mvc的层级里面，至于效果，拭目以待','论mvc补充之mmvc','','inherit','open','open','','93-revision-v1','','','2014-12-10 10:11:30','2014-12-10 10:11:30','',93,'http://unasm.sinaapp.com/?p=94',0,'revision','',0),(96,1,'2014-12-11 17:30:36','2014-12-11 17:30:36','并不是想做一个日历的空间，而是用js判断当前时间的星期，月份和日期，以及前后几天时间，月份，日期的功能，如果自己去手写，不断考虑30还是31天的话，会有点麻烦，虽然阳历的时间变化小一些，但是还是挺麻烦的，可以new Date的时候，指定特定时刻的时间戳，然后js的Date函数会自动监测出来那个时刻的日期，月份等等\r\n\r\n&nbsp;\r\n<pre>var myDate = new Date;\r\nvar tomorrow = new Date( myDate.valueOf() + 86400000 );\r\n</pre>\r\n这样就可以判断出来明天的时间，而不用再去模数字，判断今天的日期，星期等等\r\n\r\n<hr />\r\n\r\n&nbsp;\r\n\r\n上面有个地方不够优雅的，是 myDate 只是为tomorrow提供偏移量的基准的，没有其他的用处，单独用一个变量保存起来没有什么必要，所以可以考虑去掉，比如写成这样\r\n<pre>\r\n<code>\r\nvar tomorrow = new Date( new Date().valueOf() + 86400000 );\r\n</code>\r\n</pre>\r\n简单优雅了很多，节省了代码和内存\r\n&nbsp;','关于js 实现日历的功能','','publish','open','open','','%e5%85%b3%e4%ba%8ejs-%e5%ae%9e%e7%8e%b0%e6%97%a5%e5%8e%86%e7%9a%84%e5%8a%9f%e8%83%bd','','','2014-12-17 02:37:12','2014-12-17 02:37:12','',0,'http://unasm.sinaapp.com/?p=96',0,'post','',0),(97,1,'2014-12-11 17:30:36','2014-12-11 17:30:36','并不是想做一个日历的空间，而是用js判断当前时间的星期，月份和日期，以及前后几天时间，月份，日期的功能，如果自己去手写，不断考虑30还是31天的话，会有点麻烦，虽然阳历的时间变化小一些，但是还是挺麻烦的，可以new Date的时候，指定特定时刻的时间戳，然后js的Date函数会自动监测出来那个时刻的日期，月份等等\r\n\r\n&nbsp;\r\n<pre>var myDate = new Date;\r\nvar tomorrow = new Date( myDate.valueOf() + 86400000 );\r\n</pre>\r\n这样就可以判断出来明天的时间，而不用再去模数字，判断今天的日期，星期等等','关于js 实现日历的功能','','inherit','open','open','','96-revision-v1','','','2014-12-11 17:30:36','2014-12-11 17:30:36','',96,'http://unasm.sinaapp.com/?p=97',0,'revision','',0),(98,1,'2014-12-17 02:35:31','2014-12-17 02:35:31','并不是想做一个日历的空间，而是用js判断当前时间的星期，月份和日期，以及前后几天时间，月份，日期的功能，如果自己去手写，不断考虑30还是31天的话，会有点麻烦，虽然阳历的时间变化小一些，但是还是挺麻烦的，可以new Date的时候，指定特定时刻的时间戳，然后js的Date函数会自动监测出来那个时刻的日期，月份等等\n\n&nbsp;\n<pre>var myDate = new Date;\nvar tomorrow = new Date( myDate.valueOf() + 86400000 );\n</pre>\n这样就可以判断出来明天的时间，而不用再去模数字，判断今天的日期，星期等等\n\n<hr />\n\n&nbsp;\n\n上面有个地方不够优雅的，是 myDate 只是为tomorrow提供偏移量的基准的，没有其他的用处，单独用一个变量保存起来没有什么必要，所以可以考虑去掉，比如写成这样\n<pre>\n<code>\nvar tomorrow = new Date( myDate.valueOf() + 86400000 );\n</code>\n</pre>\n\n&nbsp;','关于js 实现日历的功能','','inherit','open','open','','96-autosave-v1','','','2014-12-17 02:35:31','2014-12-17 02:35:31','',96,'http://unasm.sinaapp.com/?p=98',0,'revision','',0),(99,1,'2014-12-17 02:37:12','2014-12-17 02:37:12','并不是想做一个日历的空间，而是用js判断当前时间的星期，月份和日期，以及前后几天时间，月份，日期的功能，如果自己去手写，不断考虑30还是31天的话，会有点麻烦，虽然阳历的时间变化小一些，但是还是挺麻烦的，可以new Date的时候，指定特定时刻的时间戳，然后js的Date函数会自动监测出来那个时刻的日期，月份等等\r\n\r\n&nbsp;\r\n<pre>var myDate = new Date;\r\nvar tomorrow = new Date( myDate.valueOf() + 86400000 );\r\n</pre>\r\n这样就可以判断出来明天的时间，而不用再去模数字，判断今天的日期，星期等等\r\n\r\n<hr />\r\n\r\n&nbsp;\r\n\r\n上面有个地方不够优雅的，是 myDate 只是为tomorrow提供偏移量的基准的，没有其他的用处，单独用一个变量保存起来没有什么必要，所以可以考虑去掉，比如写成这样\r\n<pre>\r\n<code>\r\nvar tomorrow = new Date( new Date().valueOf() + 86400000 );\r\n</code>\r\n</pre>\r\n简单优雅了很多，节省了代码和内存\r\n&nbsp;','关于js 实现日历的功能','','inherit','open','open','','96-revision-v1','','','2014-12-17 02:37:12','2014-12-17 02:37:12','',96,'http://unasm.sinaapp.com/?p=99',0,'revision','',0),(101,1,'2014-12-17 14:25:58','2014-12-17 14:25:58','C语言里面，在函数内部使用指针的时候，必须要给指针指针在声明的时候，赋值，分配内存，不然编译器是不会给指针分配内存的，以后给指针赋值的时候，也会出错。比如\r\n<pre><code>\r\n#include <stdio.h>\r\n#include <malloc.h>\r\nint *find(int n) {\r\n     int *pt  = malloc(sizeof(int));\r\n	 *pt = n + n;\r\n	 return (pt);\r\n }\r\n\r\n int main(void)\r\n {\r\n     int *p ;\r\n     int m;\r\n     scanf(\"%d\",&m);\r\n     p=find(m);\r\n	 printf(\"%d\\n\"  , *p);\r\n     return 0;\r\n }\r\n </code></pre>\r\n在指针函数find里面，如果写成<code> int *pt； </code>这样就会出现问题，因为如果不初始化，编辑器是不会给 pt指针分配内存的，不过，main函数里面的 int *p; 即使不初始化也是可以的，不会出现没内存的情况，我想归根结底，在与系统处理find和main的时候，机制是不同的，main是静态函数，find却要放到栈里面','c的指针函数','','publish','open','open','','c%e7%9a%84%e6%8c%87%e9%92%88%e5%87%bd%e6%95%b0','','','2014-12-17 14:40:00','2014-12-17 14:40:00','',0,'http://unasm.sinaapp.com/?p=101',0,'post','',0),(103,1,'2014-12-17 14:40:00','2014-12-17 14:40:00','C语言里面，在函数内部使用指针的时候，必须要给指针指针在声明的时候，赋值，分配内存，不然编译器是不会给指针分配内存的，以后给指针赋值的时候，也会出错。比如\r\n<pre><code>\r\n#include <stdio.h>\r\n#include <malloc.h>\r\nint *find(int n) {\r\n     int *pt  = malloc(sizeof(int));\r\n	 *pt = n + n;\r\n	 return (pt);\r\n }\r\n\r\n int main(void)\r\n {\r\n     int *p ;\r\n     int m;\r\n     scanf(\"%d\",&m);\r\n     p=find(m);\r\n	 printf(\"%d\\n\"  , *p);\r\n     return 0;\r\n }\r\n </code></pre>\r\n在指针函数find里面，如果写成<code> int *pt； </code>这样就会出现问题，因为如果不初始化，编辑器是不会给 pt指针分配内存的，不过，main函数里面的 int *p; 即使不初始化也是可以的，不会出现没内存的情况，我想归根结底，在与系统处理find和main的时候，机制是不同的，main是静态函数，find却要放到栈里面','c的指针函数','','inherit','open','open','','101-revision-v1','','','2014-12-17 14:40:00','2014-12-17 14:40:00','',101,'http://unasm.sinaapp.com/?p=103',0,'revision','',0),(102,1,'2014-12-17 14:25:58','2014-12-17 14:25:58','C语言里面，在函数内部使用指针的时候，必须要给指针指针在声明的时候，赋值，分配内存，不然编译器是不会给指针分配内存的，以后给指针赋值的时候，也会出错。比如\r\n<pre><code>\r\n#include <stdio.h>\r\n#include <malloc.h>\r\nint *find(int n) {\r\n     int *pt  = NULL;\r\n     //int *pt  = malloc(sizeof(int));\r\n	 *pt = n + n;\r\n	 return (pt);\r\n }\r\n\r\n int main(void)\r\n {\r\n     int *p ;\r\n     int m;\r\n     scanf(\"%d\",&m);\r\n     p=find(m);\r\n	 printf(\"%d\\n\"  , *p);\r\n     return 0;\r\n }\r\n </code></pre>\r\n在指针函数find里面，如果写成<code> int *pt； </code>这样就会出现问题，因为如果不初始化，编辑器是不会给 pt指针分配内存的，或者写成<code> int *pt = malloc(sizeof(int))</code> 这样也是可以的，不过，main函数里面的 int *p; 即使不初始化也是可以的，不会出现没内存的情况，我想归根结底，在与系统处理find和main的时候，机制是不同的，main是静态函数，find却要放到栈里面','c的指针函数','','inherit','open','open','','101-revision-v1','','','2014-12-17 14:25:58','2014-12-17 14:25:58','',101,'http://unasm.sinaapp.com/?p=102',0,'revision','',0),(105,1,'2014-12-18 03:49:50','0000-00-00 00:00:00','','linux 命令行值 grep 的使用','','draft','open','open','','','','','2014-12-18 03:49:50','2014-12-18 03:49:50','',0,'http://unasm.sinaapp.com/?p=105',0,'post','',0),(106,1,'2014-12-18 06:28:30','2014-12-18 06:28:30','grep 是一个好东西，可以快速的从一堆文本里面找到自己想要的东西，比如我想找自己特定的内容，搜索特定的字符串，\r\ngrep transaction 就是搜索 transaction 这个单词，\r\ngrep -R ./* 就是在当前目录下面递归搜索 -R 表示递归搜索 ./* 表示当前目录下， 如果不加-R 就是表示在当前目录下，但是不递归，本目录下的文件夹里面的文本是不会匹配搜索的，\r\ngrep transaction -i  就表示不计较大小写，各种版本的 trAnsactIoN 都可以匹配搜索到\r\ngrep -v 表示不包含某个字符串的，这个一般配合信道使用，比如 grep TRANSACTION -i ./* | grep -v \'.svn\' 首先通过正常的匹配获取到大量的信息，然后从这些包含信息里面，剔除自己不想要的信息，不断定位缩小范畴，\r\ngrep -l  表示显示的只是匹配的文件名，而不是匹配的内容，正常情况下，会高亮出来匹配的文本和上下文的。','linux 命令行值 grep 的使用','','publish','open','open','','linux-%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%80%bc-grep-%e7%9a%84%e4%bd%bf%e7%94%a8','','','2014-12-18 06:28:30','2014-12-18 06:28:30','',0,'http://unasm.sinaapp.com/?p=106',0,'post','',0),(107,1,'2014-12-18 06:28:30','2014-12-18 06:28:30','grep 是一个好东西，可以快速的从一堆文本里面找到自己想要的东西，比如我想找自己特定的内容，搜索特定的字符串，\r\ngrep transaction 就是搜索 transaction 这个单词，\r\ngrep -R ./* 就是在当前目录下面递归搜索 -R 表示递归搜索 ./* 表示当前目录下， 如果不加-R 就是表示在当前目录下，但是不递归，本目录下的文件夹里面的文本是不会匹配搜索的，\r\ngrep transaction -i  就表示不计较大小写，各种版本的 trAnsactIoN 都可以匹配搜索到\r\ngrep -v 表示不包含某个字符串的，这个一般配合信道使用，比如 grep TRANSACTION -i ./* | grep -v \'.svn\' 首先通过正常的匹配获取到大量的信息，然后从这些包含信息里面，剔除自己不想要的信息，不断定位缩小范畴，\r\ngrep -l  表示显示的只是匹配的文件名，而不是匹配的内容，正常情况下，会高亮出来匹配的文本和上下文的。','linux 命令行值 grep 的使用','','inherit','open','open','','106-revision-v1','','','2014-12-18 06:28:30','2014-12-18 06:28:30','',106,'http://unasm.sinaapp.com/?p=107',0,'revision','',0),(130,1,'2015-01-04 08:28:54','2015-01-04 08:28:54','需要向mysql中灌入大量的数据，mysql的响应时间应该会很长，首先在代码中加入set_time_limit(0),延长时间，目测无效，之后再浏览器中输入url，\r\n\r\n得到响应结果为\r\n<pre><code>\r\nProxy Error\r\n\r\nThe proxy server received an invalid response from an upstream server.\r\nThe proxy server could not handle the request GET /.\r\n\r\nReason: Error reading from remote server\r\n</code>\r\n</pre>\r\n同时在mysql中检测插入状况，发现及时在给出Error 之后 依旧在执行插入，\r\n\r\n原因猜测有2：第一mysql本身有队列，php在插入队列之后就得到响应结果，所以在nginx报错，终止了php之后，mysql依旧在执行时间队列中的内容，蚕食这个可能性很小，\r\n\r\n第二个原因：nginx报错之后，并没有停止php的执行，只是断开了和客户端的连接','NGINX 灌入数据之现象','','publish','open','open','','nginx-%e7%81%8c%e5%85%a5%e6%95%b0%e6%8d%ae%e4%b9%8b%e7%8e%b0%e8%b1%a1','','','2015-01-04 08:28:54','2015-01-04 08:28:54','',0,'http://unasm.sinaapp.com/?p=130',0,'post','',0),(110,1,'2014-12-19 17:56:36','2014-12-19 17:56:36','<pre><code>\r\n#include&lt;stdlib.h&gt; \r\n#include&lt;stdio.h&gt; \r\n#include&lt;unistd.h&gt; \r\n#include&lt;pthread.h&gt; \r\n// typedef 相当于宏，可以让定义的变量脱离平台的限制\r\n// 在typedef char* PCHAR 的时候 PCAHR pa,pb可以将pa,pb都定义成指针，也就是将 char * 变成了真正的数据类型\r\ntypedef struct ct_sum{ int sum;  \r\n	//声明一个互斥锁\r\n	pthread_mutex_t lock;  \r\n}ct_sum;  \r\nvoid * add1(void *cnt)  {       \r\n	//将互斥锁进行上锁\r\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	for(int i = 0; i &lt; 10; i++){ 		\r\n            printf(\"%d\\n\" , i); 		\r\n            (*(ct_sum*)cnt).sum+=i;   	\r\n        }   	\r\n        //解除互斥锁 	\r\n        pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	pthread_exit(NULL);  \r\n	return 0;  \r\n}  \r\nvoid * add2(void *cnt){       \r\n	cnt = (ct_sum*)cnt;  \r\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	for(int i = 50; i &lt; 60; i++) {\r\n      		printf(\"%d\\n\" , i);\r\n  		(*(ct_sum*)cnt).sum+=i;\r\n   	}\r\n   	pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	pthread_exit(NULL);  \r\n	return 0;  \r\n}  \r\n\r\n\r\nint main(void)  { \r\n	//声明两个线程\r\n	pthread_t ptid1,ptid2;  \r\n	ct_sum cnt;  \r\n	//对互斥锁进行初始化\r\n	pthread_mutex_init(&amp;(cnt.lock),NULL);  \r\n	cnt.sum=0;  \r\n\r\n	//绑定线程和对应的执行函数\r\n	pthread_create(&amp;ptid1,NULL,add1,&amp;cnt);  \r\n	pthread_create(&amp;ptid2,NULL,add2,&amp;cnt);  \r\n	//这里的执行顺序，通常在第一个和第二个之间，从来没有出现第三个执行的情况,为什么呢？\r\n	//如果放在create 之前，就永远是第一个执行，add1和add2的顺序不确定\r\n	//如果放在join之间，则出现在第二，第三个执行,从未第一个\r\n	//放在join之后，则永远出现在第三个执行，\r\n\r\n	pthread_join(ptid2,NULL);  \r\n	pthread_mutex_lock(&amp;(cnt.lock));  \r\n	printf(\"sum %d\\n\",cnt.sum);  \r\n	pthread_mutex_unlock(&amp;(cnt.lock));  \r\n\r\n	//回收现成的资源\r\n	//用来等待一个线程的结束,当函数返回时，被等待线程的资源被收回\r\n	//代码中如果没有pthread_join主线程会很快结束从而使整个进程结束，从而使创建的线程没有机会开始执行就结束了。加入pthread_join后，主线程会一直等待直到等待的线程结束自己才结束，使创建的线程有机会执行。\r\n	pthread_join(ptid1,NULL);  \r\n\r\n	//销毁互斥锁\r\n	pthread_mutex_destroy(&amp;(cnt.lock));  \r\n	return 0;  \r\n}  \r\n</code>\r\n</pre>','对一个多线程代码的解读','','publish','open','open','','%e5%af%b9%e4%b8%80%e4%b8%aa%e5%a4%9a%e7%ba%bf%e7%a8%8b%e4%bb%a3%e7%a0%81%e7%9a%84%e8%a7%a3%e8%af%bb','','','2014-12-19 18:07:39','2014-12-19 18:07:39','',0,'http://unasm.sinaapp.com/?p=110',0,'post','',0),(111,1,'2014-12-19 17:56:36','2014-12-19 17:56:36','<pre><code>\r\n#include  \r\n#include  \r\n#include  \r\n#include  \r\n// typedef 相当于宏，可以让定义的变量脱离平台的限制\r\n// 在typedef char* PCHAR 的时候 PCAHR pa,pb可以将pa,pb都定义成指针，也就是将 char * 变成了真正的数据类型\r\ntypedef struct ct_sum{ int sum;  \r\n	//声明一个互斥锁\r\n	pthread_mutex_t lock;  \r\n}ct_sum;  \r\nvoid * add1(void *cnt)  {       \r\n	//将互斥锁进行上锁\r\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	for(int i = 0; i &lt; 10; i++){ 		printf(\"%d\\n\" , i); 		(*(ct_sum*)cnt).sum+=i;   	}   	//解除互斥锁 	pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	pthread_exit(NULL);  \r\n	return 0;  \r\n}  \r\nvoid * add2(void *cnt){       \r\n	cnt = (ct_sum*)cnt;  \r\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	for(int i = 50; i &lt; 60; i++) {     		printf(\"%d\\n\" , i); 		(*(ct_sum*)cnt).sum+=i;   	}   	pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	pthread_exit(NULL);  \r\n	return 0;  \r\n}  \r\n\r\n\r\nint main(void)  { \r\n	//声明两个线程\r\n	pthread_t ptid1,ptid2;  \r\n	ct_sum cnt;  \r\n	//对互斥锁进行初始化\r\n	pthread_mutex_init(&amp;(cnt.lock),NULL);  \r\n	cnt.sum=0;  \r\n\r\n	//绑定线程和对应的执行函数\r\n	pthread_create(&amp;ptid1,NULL,add1,&amp;cnt);  \r\n	pthread_create(&amp;ptid2,NULL,add2,&amp;cnt);  \r\n	//这里的执行顺序，通常在第一个和第二个之间，从来没有出现第三个执行的情况,为什么呢？\r\n	//如果放在create 之前，就永远是第一个执行，add1和add2的顺序不确定\r\n	//如果放在join之间，则出现在第二，第三个执行,从未第一个\r\n	//放在join之后，则永远出现在第三个执行，\r\n\r\n	pthread_join(ptid2,NULL);  \r\n	pthread_mutex_lock(&amp;(cnt.lock));  \r\n	printf(\"sum %d\\n\",cnt.sum);  \r\n	pthread_mutex_unlock(&amp;(cnt.lock));  \r\n\r\n	//回收现成的资源\r\n	//用来等待一个线程的结束,当函数返回时，被等待线程的资源被收回\r\n	//代码中如果没有pthread_join主线程会很快结束从而使整个进程结束，从而使创建的线程没有机会开始执行就结束了。加入pthread_join后，主线程会一直等待直到等待的线程结束自己才结束，使创建的线程有机会执行。\r\n	pthread_join(ptid1,NULL);  \r\n\r\n	//销毁互斥锁\r\n	pthread_mutex_destroy(&amp;(cnt.lock));  \r\n	return 0;  \r\n}  \r\n</code>\r\n</pre>','对一个多线程代码的解读','','inherit','open','open','','110-revision-v1','','','2014-12-19 17:56:36','2014-12-19 17:56:36','',110,'http://unasm.sinaapp.com/?p=111',0,'revision','',0),(112,1,'2014-12-19 17:57:27','2014-12-19 17:57:27','<pre><code>\r\n#include&lt;stdlib.h&gt; \r\n#include&lt;stdio.h&gt; \r\n#include&lt;unistd.h&gt; \r\n#include&lt;pthread.h&gt; \r\n// typedef 相当于宏，可以让定义的变量脱离平台的限制\r\n// 在typedef char* PCHAR 的时候 PCAHR pa,pb可以将pa,pb都定义成指针，也就是将 char * 变成了真正的数据类型\r\ntypedef struct ct_sum{ int sum;  \r\n	//声明一个互斥锁\r\n	pthread_mutex_t lock;  \r\n}ct_sum;  \r\nvoid * add1(void *cnt)  {       \r\n	//将互斥锁进行上锁\r\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	for(int i = 0; i &lt; 10; i++){ 		printf(\"%d\\n\" , i); 		(*(ct_sum*)cnt).sum+=i;   	}   	//解除互斥锁 	pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	pthread_exit(NULL);  \r\n	return 0;  \r\n}  \r\nvoid * add2(void *cnt){       \r\n	cnt = (ct_sum*)cnt;  \r\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	for(int i = 50; i &lt; 60; i++) {     		printf(\"%d\\n\" , i); 		(*(ct_sum*)cnt).sum+=i;   	}   	pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	pthread_exit(NULL);  \r\n	return 0;  \r\n}  \r\n\r\n\r\nint main(void)  { \r\n	//声明两个线程\r\n	pthread_t ptid1,ptid2;  \r\n	ct_sum cnt;  \r\n	//对互斥锁进行初始化\r\n	pthread_mutex_init(&amp;(cnt.lock),NULL);  \r\n	cnt.sum=0;  \r\n\r\n	//绑定线程和对应的执行函数\r\n	pthread_create(&amp;ptid1,NULL,add1,&amp;cnt);  \r\n	pthread_create(&amp;ptid2,NULL,add2,&amp;cnt);  \r\n	//这里的执行顺序，通常在第一个和第二个之间，从来没有出现第三个执行的情况,为什么呢？\r\n	//如果放在create 之前，就永远是第一个执行，add1和add2的顺序不确定\r\n	//如果放在join之间，则出现在第二，第三个执行,从未第一个\r\n	//放在join之后，则永远出现在第三个执行，\r\n\r\n	pthread_join(ptid2,NULL);  \r\n	pthread_mutex_lock(&amp;(cnt.lock));  \r\n	printf(\"sum %d\\n\",cnt.sum);  \r\n	pthread_mutex_unlock(&amp;(cnt.lock));  \r\n\r\n	//回收现成的资源\r\n	//用来等待一个线程的结束,当函数返回时，被等待线程的资源被收回\r\n	//代码中如果没有pthread_join主线程会很快结束从而使整个进程结束，从而使创建的线程没有机会开始执行就结束了。加入pthread_join后，主线程会一直等待直到等待的线程结束自己才结束，使创建的线程有机会执行。\r\n	pthread_join(ptid1,NULL);  \r\n\r\n	//销毁互斥锁\r\n	pthread_mutex_destroy(&amp;(cnt.lock));  \r\n	return 0;  \r\n}  \r\n</code>\r\n</pre>','对一个多线程代码的解读','','inherit','open','open','','110-revision-v1','','','2014-12-19 17:57:27','2014-12-19 17:57:27','',110,'http://unasm.sinaapp.com/?p=112',0,'revision','',0),(113,1,'2014-12-19 18:06:51','2014-12-19 18:06:51','<pre><code>\n#include&lt;stdlib.h&gt; \n#include&lt;stdio.h&gt; \n#include&lt;unistd.h&gt; \n#include&lt;pthread.h&gt; \n// typedef 相当于宏，可以让定义的变量脱离平台的限制\n// 在typedef char* PCHAR 的时候 PCAHR pa,pb可以将pa,pb都定义成指针，也就是将 char * 变成了真正的数据类型\ntypedef struct ct_sum{ int sum;  \n	//声明一个互斥锁\n	pthread_mutex_t lock;  \n}ct_sum;  \nvoid * add1(void *cnt)  {       \n	//将互斥锁进行上锁\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \n	for(int i = 0; i &lt; 10; i++){ 		\n            printf(\"%d\\n\" , i); 		\n         (*(ct_sum*)cnt).sum+=i;   	\n     }   	//解除互斥锁 	pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \n	pthread_exit(NULL);  \n	return 0;  \n}  \nvoid * add2(void *cnt){       \n	cnt = (ct_sum*)cnt;  \n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \n	for(int i = 50; i &lt; 60; i++) {     		printf(\"%d\\n\" , i); 		(*(ct_sum*)cnt).sum+=i;   	}   	pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \n	pthread_exit(NULL);  \n	return 0;  \n}  \n\n\nint main(void)  { \n	//声明两个线程\n	pthread_t ptid1,ptid2;  \n	ct_sum cnt;  \n	//对互斥锁进行初始化\n	pthread_mutex_init(&amp;(cnt.lock),NULL);  \n	cnt.sum=0;  \n\n	//绑定线程和对应的执行函数\n	pthread_create(&amp;ptid1,NULL,add1,&amp;cnt);  \n	pthread_create(&amp;ptid2,NULL,add2,&amp;cnt);  \n	//这里的执行顺序，通常在第一个和第二个之间，从来没有出现第三个执行的情况,为什么呢？\n	//如果放在create 之前，就永远是第一个执行，add1和add2的顺序不确定\n	//如果放在join之间，则出现在第二，第三个执行,从未第一个\n	//放在join之后，则永远出现在第三个执行，\n\n	pthread_join(ptid2,NULL);  \n	pthread_mutex_lock(&amp;(cnt.lock));  \n	printf(\"sum %d\\n\",cnt.sum);  \n	pthread_mutex_unlock(&amp;(cnt.lock));  \n\n	//回收现成的资源\n	//用来等待一个线程的结束,当函数返回时，被等待线程的资源被收回\n	//代码中如果没有pthread_join主线程会很快结束从而使整个进程结束，从而使创建的线程没有机会开始执行就结束了。加入pthread_join后，主线程会一直等待直到等待的线程结束自己才结束，使创建的线程有机会执行。\n	pthread_join(ptid1,NULL);  \n\n	//销毁互斥锁\n	pthread_mutex_destroy(&amp;(cnt.lock));  \n	return 0;  \n}  \n</code>\n</pre>','对一个多线程代码的解读','','inherit','open','open','','110-autosave-v1','','','2014-12-19 18:06:51','2014-12-19 18:06:51','',110,'http://unasm.sinaapp.com/?p=113',0,'revision','',0),(114,1,'2014-12-19 18:07:39','2014-12-19 18:07:39','<pre><code>\r\n#include&lt;stdlib.h&gt; \r\n#include&lt;stdio.h&gt; \r\n#include&lt;unistd.h&gt; \r\n#include&lt;pthread.h&gt; \r\n// typedef 相当于宏，可以让定义的变量脱离平台的限制\r\n// 在typedef char* PCHAR 的时候 PCAHR pa,pb可以将pa,pb都定义成指针，也就是将 char * 变成了真正的数据类型\r\ntypedef struct ct_sum{ int sum;  \r\n	//声明一个互斥锁\r\n	pthread_mutex_t lock;  \r\n}ct_sum;  \r\nvoid * add1(void *cnt)  {       \r\n	//将互斥锁进行上锁\r\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	for(int i = 0; i &lt; 10; i++){ 		\r\n            printf(\"%d\\n\" , i); 		\r\n            (*(ct_sum*)cnt).sum+=i;   	\r\n        }   	\r\n        //解除互斥锁 	\r\n        pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	pthread_exit(NULL);  \r\n	return 0;  \r\n}  \r\nvoid * add2(void *cnt){       \r\n	cnt = (ct_sum*)cnt;  \r\n	pthread_mutex_lock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	for(int i = 50; i &lt; 60; i++) {\r\n      		printf(\"%d\\n\" , i);\r\n  		(*(ct_sum*)cnt).sum+=i;\r\n   	}\r\n   	pthread_mutex_unlock(&amp;(((ct_sum*)cnt)-&gt;lock));  \r\n	pthread_exit(NULL);  \r\n	return 0;  \r\n}  \r\n\r\n\r\nint main(void)  { \r\n	//声明两个线程\r\n	pthread_t ptid1,ptid2;  \r\n	ct_sum cnt;  \r\n	//对互斥锁进行初始化\r\n	pthread_mutex_init(&amp;(cnt.lock),NULL);  \r\n	cnt.sum=0;  \r\n\r\n	//绑定线程和对应的执行函数\r\n	pthread_create(&amp;ptid1,NULL,add1,&amp;cnt);  \r\n	pthread_create(&amp;ptid2,NULL,add2,&amp;cnt);  \r\n	//这里的执行顺序，通常在第一个和第二个之间，从来没有出现第三个执行的情况,为什么呢？\r\n	//如果放在create 之前，就永远是第一个执行，add1和add2的顺序不确定\r\n	//如果放在join之间，则出现在第二，第三个执行,从未第一个\r\n	//放在join之后，则永远出现在第三个执行，\r\n\r\n	pthread_join(ptid2,NULL);  \r\n	pthread_mutex_lock(&amp;(cnt.lock));  \r\n	printf(\"sum %d\\n\",cnt.sum);  \r\n	pthread_mutex_unlock(&amp;(cnt.lock));  \r\n\r\n	//回收现成的资源\r\n	//用来等待一个线程的结束,当函数返回时，被等待线程的资源被收回\r\n	//代码中如果没有pthread_join主线程会很快结束从而使整个进程结束，从而使创建的线程没有机会开始执行就结束了。加入pthread_join后，主线程会一直等待直到等待的线程结束自己才结束，使创建的线程有机会执行。\r\n	pthread_join(ptid1,NULL);  \r\n\r\n	//销毁互斥锁\r\n	pthread_mutex_destroy(&amp;(cnt.lock));  \r\n	return 0;  \r\n}  \r\n</code>\r\n</pre>','对一个多线程代码的解读','','inherit','open','open','','110-revision-v1','','','2014-12-19 18:07:39','2014-12-19 18:07:39','',110,'http://unasm.sinaapp.com/?p=114',0,'revision','',0),(115,1,'2014-12-22 06:51:31','2014-12-22 06:51:31','以下内容摘录自《LINUX 高级程序设计（第二版）》\r\n\r\n首先，在编译的时候，需要在gcc参数中加入-g，才可以调试，假定生成的可执行文件为main\r\n<ul>\r\n	<li><code>gdb  main  开始调试，</code></li>\r\n	<li>命令l，你没有看错，就是一个l，表示显示程序源代码，这里应该是参考了ls命令吧</li>\r\n	<li>break  6,表示在第六行设置断点，这里最好和vim set ruler配置，轻松知道文件行数，</li>\r\n	<li>info break，查看断点信息，</li>\r\n	<li>p  i 表示输出i变量,p  print 的意思吧</li>\r\n	<li>next 继续执行到接下来的端点</li>\r\n	<li>finish 退出程序，并得到相应的报告</li>\r\n	<li>quit 退出程序</li>\r\n</ul>','gdb 使用','','publish','open','open','','gdb-%e4%bd%bf%e7%94%a8','','','2014-12-22 06:51:31','2014-12-22 06:51:31','',0,'http://unasm.sinaapp.com/?p=115',0,'post','',0),(116,1,'2014-12-22 06:51:31','2014-12-22 06:51:31','以下内容摘录自《LINUX 高级程序设计（第二版）》\r\n\r\n首先，在编译的时候，需要在gcc参数中加入-g，才可以调试，假定生成的可执行文件为main\r\n<ul>\r\n	<li><code>gdb  main  开始调试，</code></li>\r\n	<li>命令l，你没有看错，就是一个l，表示显示程序源代码，这里应该是参考了ls命令吧</li>\r\n	<li>break  6,表示在第六行设置断点，这里最好和vim set ruler配置，轻松知道文件行数，</li>\r\n	<li>info break，查看断点信息，</li>\r\n	<li>p  i 表示输出i变量,p  print 的意思吧</li>\r\n	<li>next 继续执行到接下来的端点</li>\r\n	<li>finish 退出程序，并得到相应的报告</li>\r\n	<li>quit 退出程序</li>\r\n</ul>','gdb 使用','','inherit','open','open','','115-revision-v1','','','2014-12-22 06:51:31','2014-12-22 06:51:31','',115,'http://unasm.sinaapp.com/?p=116',0,'revision','',0),(120,1,'2014-12-27 10:39:27','2014-12-27 10:39:27','我有一个不是很好的习惯，就是太喜欢快捷键，更喜欢xfce而不是unity或者是win的原因，就是xfce的自定义快捷键更多，如今切换到Mac下，感觉有一些常用快捷键定义的不是很合理，网上却找不到修改快捷键的介绍，好像大家都不修改似的。\r\n\r\n下面介绍我摸索来的修改自定义快捷键的方式。\r\n\r\n第一部，打开系统偏好设置，然后点击键盘，选择快捷键\r\n\r\n<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/macshortfirst.png\" alt=\"\" width=\"1332\" height=\"954\" />\r\n\r\n&nbsp;\r\n\r\n下面是我之前已经定义的快捷键，估计很多人都已经猜到怎么做了，\r\n\r\n&nbsp;\r\n\r\n<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/macshortlast.png\" alt=\"\" width=\"1292\" height=\"1134\" />\r\n\r\n点击左下角的+号 弹出的页面里面，最上面选择快捷键控制的应用，如果想要控制的快捷键是全局的，就选择默认的全局的，如果不是就选择一个自己想控制的，然后在其他地方打开想控制的应用，比如，我下面演示的是如何修改终端的Zoom ,我首先打开了终端，然后在  控制栏 --&gt; Window 查看 ，发现系统控制缩放的窗口缩放的命令是Zoom ,目前对应的快捷键还没有，如果想修改的是tab页的切换，那对应的命令就是Show Next Tab 把这个命令写到第二个输入框里面，第三个输入框是输入想要的快捷键，比如我想要Command + Shift + Enter ，我同时按这三个键，就得到了想要的输入，注意，这个框不是一个字母一个字母输入的\r\n\r\n<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/choseName.png\" alt=\"\" width=\"850\" height=\"564\" />\r\n\r\n<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/Screen%20Shot%202014-12-27%20at%206.31.29%20PM.png\" alt=\"\" width=\"1306\" height=\"1126\" />\r\n\r\n然后点击添加，这样随便打开一个应用，同时按Command + Shift + Enter ，就可以看看效果了','Mac 修改  快捷键','','inherit','open','open','','119-revision-v1','','','2014-12-27 10:39:27','2014-12-27 10:39:27','',119,'http://unasm.sinaapp.com/?p=120',0,'revision','',0),(121,1,'2014-12-29 12:29:41','2014-12-29 12:29:41','PHP 的 CLI模式下，可以帮我们在不修改源文件的情况下，测试一些代码，自己想要的结果，而且，命令行模式下权限更大一些\r\n\r\nphp -f 或者没有 ，直接加文件名，php引擎就会解析这个脚本，并得到对应的结果\r\n\r\nphp -r  \'\'可以直接跟对应的语句，不过，我在测试的时候，发现必须外面是单引号，里面是双引号，否则解析会出问题，','PHP CLI','','publish','open','open','','php-cli','','','2014-12-29 12:35:17','2014-12-29 12:35:17','',0,'http://unasm.sinaapp.com/?p=121',0,'post','',0),(122,1,'2014-12-29 12:29:41','2014-12-29 12:29:41','PHP 的 CLI模式下，可以帮我们在不修改源文件的情况下，测试一些代码，自己想要的结果，而且，命令行模式下权限更大一些\r\n\r\nphp -f 或者没有 ，直接加文件名，php引擎就会解析这个脚本，并得到对应的结果\r\n\r\nphp -r  \'\'可以直接跟对应的语句，不过，我在测试的时候，发现必须外面是单引号，里面是双引号，否则解析会出问题，','PHP CLI','','inherit','open','open','','121-revision-v1','','','2014-12-29 12:29:41','2014-12-29 12:29:41','',121,'http://unasm.sinaapp.com/?p=122',0,'revision','',0),(123,1,'2014-12-30 02:29:15','2014-12-30 02:29:15','&nbsp;\r\n<code>\r\n/*************************************************************************\r\n* memcache LRU 算法，摘录自《PHP核心技术与最佳实践》 362页\r\n* File Name : memcacheLru.c\r\n* Author : unasm\r\n* Mail : unasm@sina.cn\r\n* Last_Modified: 2014-12-30 10:08:48\r\n************************************************************************/\r\n\r\n//申请内存\r\nit = slabs_alloc(ntotal, id);\r\n\r\n//返回值为0，表示没有申请到\r\nif(it == 0){\r\nint tries = 50;\r\n...\r\n//清除没有被引用的数据\r\nfor(search = tail[id]; tries &gt; 0 &amp;&amp; search != NULL; tries-- , search = search-&gt;prev){\r\nif(search-&gt;refcount == 0){\r\n...\r\ndo_item_link(search);\r\nbreak;\r\n}\r\n}\r\n//再次申请内存，\r\nit = slabs_alloc(ntotal, id);\r\nif(it == 0){\r\ntries = 50;\r\n// 查找三个小时以内都没有被访问的数据，淘汰掉\r\nfor(search = tail[id]; tries &gt; 0 &amp;&amp; search != NULL; tries--, search = search-&gt;prev){\r\nif (search-&gt;refcount != 0 &amp;&amp; search-&gt;time + 10800 &lt; current_time) {\r\nsearch-&gt;refcount = 0;\r\ndo_item_link(search);\r\nbreak;\r\n}\r\n}\r\n//再次申请分配内存\r\nit = slabs_alloc(ntotal, id);\r\nif(it == 0){\r\nreturn NULL;\r\n}\r\n}\r\n}\r\n</code>','memcached LRU 算法淘汰数据','','publish','open','open','','memcached-lru-%e7%ae%97%e6%b3%95%e6%b7%98%e6%b1%b0%e6%95%b0%e6%8d%ae','','','2014-12-30 02:30:40','2014-12-30 02:30:40','',0,'http://unasm.sinaapp.com/?p=123',0,'post','',0),(124,1,'2014-12-30 02:29:15','2014-12-30 02:29:15','/*************************************************************************\r\n* memcache LRU 算法，摘录自《PHP核心技术与最佳实践》 362页\r\n* File Name : memcacheLru.c\r\n* Author : unasm\r\n* Mail : unasm@sina.cn\r\n* Last_Modified: 2014-12-30 10:08:48\r\n************************************************************************/\r\n\r\n//申请内存\r\nit = slabs_alloc(ntotal, id);\r\n\r\n//返回值为0，表示没有申请到\r\nif(it == 0){\r\nint tries = 50;\r\n...\r\n//清除没有被引用的数据\r\nfor(search = tail[id]; tries &gt; 0 &amp;&amp; search != NULL; tries-- , search = search-&gt;prev){\r\nif(search-&gt;refcount == 0){\r\n...\r\ndo_item_link(search);\r\nbreak;\r\n}\r\n}\r\n//再次申请内存，\r\nit = slabs_alloc(ntotal, id);\r\nif(it == 0){\r\ntries = 50;\r\n// 查找三个小时以内都没有被访问的数据，淘汰掉\r\nfor(search = tail[id]; tries &gt; 0 &amp;&amp; search != NULL; tries--, search = search-&gt;prev){\r\nif (search-&gt;refcount != 0 &amp;&amp; search-&gt;time + 10800 &lt; current_time) {\r\nsearch-&gt;refcount = 0;\r\ndo_item_link(search);\r\nbreak;\r\n}\r\n}\r\n//再次申请分配内存\r\nit = slabs_alloc(ntotal, id);\r\nif(it == 0){\r\nreturn NULL;\r\n}\r\n}\r\n}','memcached LRU 算法淘汰数据','','inherit','open','open','','123-revision-v1','','','2014-12-30 02:29:15','2014-12-30 02:29:15','',123,'http://unasm.sinaapp.com/?p=124',0,'revision','',0),(125,1,'2014-12-30 02:29:53','2014-12-30 02:29:53','&lt;code&gt;\r\n\r\n/*************************************************************************\r\n* memcache LRU 算法，摘录自《PHP核心技术与最佳实践》 362页\r\n* File Name : memcacheLru.c\r\n* Author : unasm\r\n* Mail : unasm@sina.cn\r\n* Last_Modified: 2014-12-30 10:08:48\r\n************************************************************************/\r\n\r\n//申请内存\r\nit = slabs_alloc(ntotal, id);\r\n\r\n//返回值为0，表示没有申请到\r\nif(it == 0){\r\nint tries = 50;\r\n...\r\n//清除没有被引用的数据\r\nfor(search = tail[id]; tries &gt; 0 &amp;&amp; search != NULL; tries-- , search = search-&gt;prev){\r\nif(search-&gt;refcount == 0){\r\n...\r\ndo_item_link(search);\r\nbreak;\r\n}\r\n}\r\n//再次申请内存，\r\nit = slabs_alloc(ntotal, id);\r\nif(it == 0){\r\ntries = 50;\r\n// 查找三个小时以内都没有被访问的数据，淘汰掉\r\nfor(search = tail[id]; tries &gt; 0 &amp;&amp; search != NULL; tries--, search = search-&gt;prev){\r\nif (search-&gt;refcount != 0 &amp;&amp; search-&gt;time + 10800 &lt; current_time) {\r\nsearch-&gt;refcount = 0;\r\ndo_item_link(search);\r\nbreak;\r\n}\r\n}\r\n//再次申请分配内存\r\nit = slabs_alloc(ntotal, id);\r\nif(it == 0){\r\nreturn NULL;\r\n}\r\n}\r\n}\r\n\r\n&lt;/code&gt;','memcached LRU 算法淘汰数据','','inherit','open','open','','123-revision-v1','','','2014-12-30 02:29:53','2014-12-30 02:29:53','',123,'http://unasm.sinaapp.com/?p=125',0,'revision','',0),(126,1,'2014-12-30 02:30:40','2014-12-30 02:30:40','&nbsp;\r\n<code>\r\n/*************************************************************************\r\n* memcache LRU 算法，摘录自《PHP核心技术与最佳实践》 362页\r\n* File Name : memcacheLru.c\r\n* Author : unasm\r\n* Mail : unasm@sina.cn\r\n* Last_Modified: 2014-12-30 10:08:48\r\n************************************************************************/\r\n\r\n//申请内存\r\nit = slabs_alloc(ntotal, id);\r\n\r\n//返回值为0，表示没有申请到\r\nif(it == 0){\r\nint tries = 50;\r\n...\r\n//清除没有被引用的数据\r\nfor(search = tail[id]; tries &gt; 0 &amp;&amp; search != NULL; tries-- , search = search-&gt;prev){\r\nif(search-&gt;refcount == 0){\r\n...\r\ndo_item_link(search);\r\nbreak;\r\n}\r\n}\r\n//再次申请内存，\r\nit = slabs_alloc(ntotal, id);\r\nif(it == 0){\r\ntries = 50;\r\n// 查找三个小时以内都没有被访问的数据，淘汰掉\r\nfor(search = tail[id]; tries &gt; 0 &amp;&amp; search != NULL; tries--, search = search-&gt;prev){\r\nif (search-&gt;refcount != 0 &amp;&amp; search-&gt;time + 10800 &lt; current_time) {\r\nsearch-&gt;refcount = 0;\r\ndo_item_link(search);\r\nbreak;\r\n}\r\n}\r\n//再次申请分配内存\r\nit = slabs_alloc(ntotal, id);\r\nif(it == 0){\r\nreturn NULL;\r\n}\r\n}\r\n}\r\n</code>','memcached LRU 算法淘汰数据','','inherit','open','open','','123-revision-v1','','','2014-12-30 02:30:40','2014-12-30 02:30:40','',123,'http://unasm.sinaapp.com/?p=126',0,'revision','',0),(127,1,'2014-12-31 12:32:52','0000-00-00 00:00:00','2014 对我来说，是很重要的一年，从某种意义上来说，也是丰富多彩的一年。\r\n\r\n上半年刚刚开始的时候，自己在2013的后半年辛苦创建的队伍解散了，开始了找工作，过程略微曲折，几番变化，最终确定下了新浪，在搞定毕业设计之后，开始了大学最后的狂欢：毕业旅行。毕业后来到北京，开始进入社会，正式工作。在公司的工作总体来说是轻松的，抛开最初被闲置的两个月，其他时间是有事情做，但是一直不算紧张，组长经验丰富且平易近人，能学到不少东西。业余时间相比大学来说，丰富了不少，羽毛球水平得到长足的发展，简而言之，波折而丰富，且进步的一年。\r\n\r\n年初是辛酸且失望的，一番辛苦，最终化为须有，一个阳光明媚，负责技术的三个人，几番讨论，最终还是决定退出项目，原因有点复杂，','2014的总结','','draft','open','open','','','','','2014-12-31 12:32:52','2014-12-31 12:32:52','',0,'http://unasm.sinaapp.com/?p=127',0,'post','',0),(128,1,'2014-12-31 12:32:52','2014-12-31 12:32:52','2014 对我来说，是很重要的一年，从某种意义上来说，也是丰富多彩的一年。\r\n\r\n上半年刚刚开始的时候，自己在2013的后半年辛苦创建的队伍解散了，开始了找工作，过程略微曲折，几番变化，最终确定下了新浪，在搞定毕业设计之后，开始了大学最后的狂欢：毕业旅行。毕业后来到北京，开始进入社会，正式工作。在公司的工作总体来说是轻松的，抛开最初被闲置的两个月，其他时间是有事情做，但是一直不算紧张，组长经验丰富且平易近人，能学到不少东西。业余时间相比大学来说，丰富了不少，羽毛球水平得到长足的发展，简而言之，波折而丰富，且进步的一年。\r\n\r\n年初是辛酸且失望的，一番辛苦，最终化为须有，一个阳光明媚，负责技术的三个人，几番讨论，最终还是决定退出项目，原因有点复杂，','2014的总结','','inherit','open','open','','127-revision-v1','','','2014-12-31 12:32:52','2014-12-31 12:32:52','',127,'http://unasm.sinaapp.com/?p=128',0,'revision','',0),(131,1,'2015-01-04 08:28:54','2015-01-04 08:28:54','需要向mysql中灌入大量的数据，mysql的响应时间应该会很长，首先在代码中加入set_time_limit(0),延长时间，目测无效，之后再浏览器中输入url，\r\n\r\n得到响应结果为\r\n<pre><code>\r\nProxy Error\r\n\r\nThe proxy server received an invalid response from an upstream server.\r\nThe proxy server could not handle the request GET /.\r\n\r\nReason: Error reading from remote server\r\n</code>\r\n</pre>\r\n同时在mysql中检测插入状况，发现及时在给出Error 之后 依旧在执行插入，\r\n\r\n原因猜测有2：第一mysql本身有队列，php在插入队列之后就得到响应结果，所以在nginx报错，终止了php之后，mysql依旧在执行时间队列中的内容，蚕食这个可能性很小，\r\n\r\n第二个原因：nginx报错之后，并没有停止php的执行，只是断开了和客户端的连接','NGINX 灌入数据之现象','','inherit','open','open','','130-revision-v1','','','2015-01-04 08:28:54','2015-01-04 08:28:54','',130,'http://unasm.sinaapp.com/?p=131',0,'revision','',0),(132,1,'2015-01-06 03:29:53','2015-01-06 03:29:53','测试表的字段id为主键，max(id) 和count(*)的效果在不删除记录的情况下应该是一样的，一下是不同sql写法之间的效率对比\r\n<ol>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">select count(*) from udata_1;   </span></p>\r\n<code>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n</code>\r\n然后该sql语句得到\r\n<code>\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n</code>\r\n从这里可以看到 rows为115806 ，几乎将表遍历得到的数据</li>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">select count(id) from udata_1;</span></p>\r\n<code>\r\n+-----------+\r\n| count(id) |\r\n+-----------+\r\n| 115651 |\r\n+-----------+\r\n1 row in set (0.03 sec)\r\n</code>\r\nexplain select count(id) from udata_1\r\n<code>\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n</code>\r\n可见在效率上结果上并没有任何差异</li>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">explain<span class=\"Apple-converted-space\">  </span>select max(id) from udata_1 where id &gt; 0; 因为id是从1开始自增的，所以和之前的sql应该没有任何差异</span></p>\r\n<code>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n1 row in set (0.05 sec)\r\n</code>\r\n结果上的确没有任何差异\r\n\r\nexplain select count(*) from udata_1 where id &gt; 0;\r\n<code>\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| 1 | SIMPLE | udata_1 | range | PRIMARY | PRIMARY | 4 | NULL | 57903 | Using where; Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n</code>\r\n这个结果有点意外，因为id是主键，应该是因为这个，从而可以判定之前的count(*)的时候，并没有根据主键来进行优化，而这里因为where 的原因，启动了主键查找，一定程度提供了效率。</li>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">select max(id) from udata_1;</span></p>\r\n<code>\r\n+---------+\r\n| max(id) |\r\n+---------+\r\n| 115651 |\r\n+---------+\r\n1 row in set (0.00 sec)\r\n</code>\r\n和count(*) 一样的结果，虽然只有10w+的测试数据，时间上还是可以看出优越的。\r\n\r\nexplain select max(id) from udata_1;\r\n<code>\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| 1 | SIMPLE | NULL | NULL | NULL | NULL | NULL | NULL | NULL | Select tables optimized away |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n</code>\r\n这个结果也有点意外，根据b+树的特点，以为需要logN级别的时间，而不是常量级别，也许是mysql针对max做了特定的优化</li>\r\n</ol>\r\n由以上对比可以看出，在count(*)和max 之间，效率上的差异是很明显的','mysql select max(id) 与 select count(*) 性能对比','','publish','open','open','','mysql-select-maxid-%e4%b8%8e-select-count-%e6%80%a7%e8%83%bd%e5%af%b9%e6%af%94','','','2015-01-06 03:54:12','2015-01-06 03:54:12','',0,'http://unasm.sinaapp.com/?p=132',0,'post','',0),(133,1,'2015-01-06 03:29:53','2015-01-06 03:29:53','测试表的字段id为主键，max(id) 和count(*)的效果在不删除记录的情况下应该是一样的，一下是不同sql写法之间的效率对比\r\n<ol>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">select count(*) from udata_1;   </span></p>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n\r\n然后该sql语句得到\r\n\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n\r\n从这里可以看到 rows为115806 ，几乎将表遍历得到的数据</li>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">select count(id) from udata_1;</span></p>\r\n+-----------+\r\n| count(id) |\r\n+-----------+\r\n| 115651 |\r\n+-----------+\r\n1 row in set (0.03 sec)\r\n\r\nexplain select count(id) from udata_1\r\n\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n可见在效率上结果上并没有任何差异</li>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">explain<span class=\"Apple-converted-space\">  </span>select max(id) from udata_1 where id &gt; 0; 因为id是从1开始自增的，所以和之前的sql应该没有任何差异</span></p>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n1 row in set (0.05 sec)\r\n结果上的确没有任何差异\r\n\r\nexplain select count(*) from udata_1 where id &gt; 0;\r\n\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| 1 | SIMPLE | udata_1 | range | PRIMARY | PRIMARY | 4 | NULL | 57903 | Using where; Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n\r\n这个结果有点意外，因为id是主键，应该是因为这个，从而可以判定之前的count(*)的时候，并没有根据主键来进行优化，而这里因为where 的原因，启动了主键查找，一定程度提供了效率。</li>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">select max(id) from udata_1;</span></p>\r\n+---------+\r\n| max(id) |\r\n+---------+\r\n| 115651 |\r\n+---------+\r\n1 row in set (0.00 sec)\r\n和count(*) 一样的结果，虽然只有10w+的测试数据，时间上还是可以看出优越的。\r\n\r\nexplain select max(id) from udata_1;\r\n\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| 1 | SIMPLE | NULL | NULL | NULL | NULL | NULL | NULL | NULL | Select tables optimized away |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n这个结果也有点意外，根据b+树的特点，以为需要logN级别的时间，而不是常量级别，也许是mysql针对max做了特定的优化</li>\r\n</ol>\r\n由以上对比可以看出，在count(*)和max 之间，效率上的差异是很明显的','mysql select max(id) 与 select count(*) 性能对比','','inherit','open','open','','132-revision-v1','','','2015-01-06 03:29:53','2015-01-06 03:29:53','',132,'http://unasm.sinaapp.com/?p=133',0,'revision','',0),(134,1,'2015-01-06 03:32:16','2015-01-06 03:32:16','测试表的字段id为主键，max(id) 和count(*)的效果在不删除记录的情况下应该是一样的，一下是不同sql写法之间的效率对比\r\n<ol>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">select count(*) from udata_1;   </span></p>\r\n<code>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n</code>\r\n然后该sql语句得到\r\n\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n\r\n从这里可以看到 rows为115806 ，几乎将表遍历得到的数据</li>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">select count(id) from udata_1;</span></p>\r\n+-----------+\r\n| count(id) |\r\n+-----------+\r\n| 115651 |\r\n+-----------+\r\n1 row in set (0.03 sec)\r\n\r\nexplain select count(id) from udata_1\r\n\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n可见在效率上结果上并没有任何差异</li>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">explain<span class=\"Apple-converted-space\">  </span>select max(id) from udata_1 where id &gt; 0; 因为id是从1开始自增的，所以和之前的sql应该没有任何差异</span></p>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n1 row in set (0.05 sec)\r\n结果上的确没有任何差异\r\n\r\nexplain select count(*) from udata_1 where id &gt; 0;\r\n\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| 1 | SIMPLE | udata_1 | range | PRIMARY | PRIMARY | 4 | NULL | 57903 | Using where; Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n\r\n这个结果有点意外，因为id是主键，应该是因为这个，从而可以判定之前的count(*)的时候，并没有根据主键来进行优化，而这里因为where 的原因，启动了主键查找，一定程度提供了效率。</li>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">select max(id) from udata_1;</span></p>\r\n+---------+\r\n| max(id) |\r\n+---------+\r\n| 115651 |\r\n+---------+\r\n1 row in set (0.00 sec)\r\n和count(*) 一样的结果，虽然只有10w+的测试数据，时间上还是可以看出优越的。\r\n\r\nexplain select max(id) from udata_1;\r\n\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| 1 | SIMPLE | NULL | NULL | NULL | NULL | NULL | NULL | NULL | Select tables optimized away |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n这个结果也有点意外，根据b+树的特点，以为需要logN级别的时间，而不是常量级别，也许是mysql针对max做了特定的优化</li>\r\n</ol>\r\n由以上对比可以看出，在count(*)和max 之间，效率上的差异是很明显的','mysql select max(id) 与 select count(*) 性能对比','','inherit','open','open','','132-revision-v1','','','2015-01-06 03:32:16','2015-01-06 03:32:16','',132,'http://unasm.sinaapp.com/?p=134',0,'revision','',0),(135,1,'2015-01-06 03:41:44','2015-01-06 03:41:44','测试表的字段id为主键，max(id) 和count(*)的效果在不删除记录的情况下应该是一样的，一下是不同sql写法之间的效率对比\n<ol>\n	<li>\n<p class=\"p1\"><span class=\"s1\">select count(*) from udata_1;   </span></p>\n<code>\n+----------+\n| count(*) |\n+----------+\n| 115651 |\n+----------+\n</code>\n然后该sql语句得到\n<cod>\n\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\n\n</code>\n从这里可以看到 rows为115806 ，几乎将表遍历得到的数据</li>\n	<li>\n<p class=\"p1\"><span class=\"s1\">select count(id) from udata_1;</span></p>\n<code>\n+-----------+\n| count(id) |\n+-----------+\n| 115651 |\n+-----------+\n1 row in set (0.03 sec)\n</code>\nexplain select count(id) from udata_1\n<code>\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\n</code>\n可见在效率上结果上并没有任何差异</li>\n	<li>\n<p class=\"p1\"><span class=\"s1\">explain<span class=\"Apple-converted-space\">  </span>select max(id) from udata_1 where id &gt; 0; 因为id是从1开始自增的，所以和之前的sql应该没有任何差异</span></p>\n+----------+\n| count(*) |\n+----------+\n| 115651 |\n+----------+\n1 row in set (0.05 sec)\n结果上的确没有任何差异\n\nexplain select count(*) from udata_1 where id &gt; 0;\n\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\n| 1 | SIMPLE | udata_1 | range | PRIMARY | PRIMARY | 4 | NULL | 57903 | Using where; Using index |\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\n\n这个结果有点意外，因为id是主键，应该是因为这个，从而可以判定之前的count(*)的时候，并没有根据主键来进行优化，而这里因为where 的原因，启动了主键查找，一定程度提供了效率。</li>\n	<li>\n<p class=\"p1\"><span class=\"s1\">select max(id) from udata_1;</span></p>\n+---------+\n| max(id) |\n+---------+\n| 115651 |\n+---------+\n1 row in set (0.00 sec)\n和count(*) 一样的结果，虽然只有10w+的测试数据，时间上还是可以看出优越的。\n\nexplain select max(id) from udata_1;\n\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\n| 1 | SIMPLE | NULL | NULL | NULL | NULL | NULL | NULL | NULL | Select tables optimized away |\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\n这个结果也有点意外，根据b+树的特点，以为需要logN级别的时间，而不是常量级别，也许是mysql针对max做了特定的优化</li>\n</ol>\n由以上对比可以看出，在count(*)和max 之间，效率上的差异是很明显的','mysql select max(id) 与 select count(*) 性能对比','','inherit','open','open','','132-autosave-v1','','','2015-01-06 03:41:44','2015-01-06 03:41:44','',132,'http://unasm.sinaapp.com/?p=135',0,'revision','',0),(136,1,'2015-01-06 03:43:06','2015-01-06 03:43:06','测试表的字段id为主键，max(id) 和count(*)的效果在不删除记录的情况下应该是一样的，一下是不同sql写法之间的效率对比\r\n<ol>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">select count(*) from udata_1;   </span></p>\r\n<code>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n</code>\r\n然后该sql语句得到\r\n<cod>\r\n\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n\r\n</code>\r\n从这里可以看到 rows为115806 ，几乎将表遍历得到的数据</li>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">select count(id) from udata_1;</span></p>\r\n<code>\r\n+-----------+\r\n| count(id) |\r\n+-----------+\r\n| 115651 |\r\n+-----------+\r\n1 row in set (0.03 sec)\r\n</code>\r\nexplain select count(id) from udata_1\r\n<code>\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n</code>\r\n可见在效率上结果上并没有任何差异</li>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">explain<span class=\"Apple-converted-space\">  </span>select max(id) from udata_1 where id &gt; 0; 因为id是从1开始自增的，所以和之前的sql应该没有任何差异</span></p>\r\n<code>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n1 row in set (0.05 sec)\r\n</code>\r\n结果上的确没有任何差异\r\n\r\nexplain select count(*) from udata_1 where id &gt; 0;\r\n<code>\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| 1 | SIMPLE | udata_1 | range | PRIMARY | PRIMARY | 4 | NULL | 57903 | Using where; Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n</code>\r\n这个结果有点意外，因为id是主键，应该是因为这个，从而可以判定之前的count(*)的时候，并没有根据主键来进行优化，而这里因为where 的原因，启动了主键查找，一定程度提供了效率。</li>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">select max(id) from udata_1;</span></p>\r\n<code>\r\n+---------+\r\n| max(id) |\r\n+---------+\r\n| 115651 |\r\n+---------+\r\n1 row in set (0.00 sec)\r\n</code>\r\n和count(*) 一样的结果，虽然只有10w+的测试数据，时间上还是可以看出优越的。\r\n\r\nexplain select max(id) from udata_1;\r\n<code>\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| 1 | SIMPLE | NULL | NULL | NULL | NULL | NULL | NULL | NULL | Select tables optimized away |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n</code>\r\n这个结果也有点意外，根据b+树的特点，以为需要logN级别的时间，而不是常量级别，也许是mysql针对max做了特定的优化</li>\r\n</ol>\r\n由以上对比可以看出，在count(*)和max 之间，效率上的差异是很明显的','mysql select max(id) 与 select count(*) 性能对比','','inherit','open','open','','132-revision-v1','','','2015-01-06 03:43:06','2015-01-06 03:43:06','',132,'http://unasm.sinaapp.com/?p=136',0,'revision','',0),(137,1,'2015-01-06 03:45:34','2015-01-06 03:45:34','测试表的字段id为主键，max(id) 和count(*)的效果在不删除记录的情况下应该是一样的，一下是不同sql写法之间的效率对比\r\n<ol>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">select count(*) from udata_1;   </span></p>\r\n<code>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n</code>\r\n然后该sql语句得到\r\n<code>\r\n\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n\r\n</code>\r\n从这里可以看到 rows为115806 ，几乎将表遍历得到的数据</li>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">select count(id) from udata_1;</span></p>\r\n<code>\r\n+-----------+\r\n| count(id) |\r\n+-----------+\r\n| 115651 |\r\n+-----------+\r\n1 row in set (0.03 sec)\r\n</code>\r\nexplain select count(id) from udata_1\r\n<code>\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n| 1 | SIMPLE | udata_1 | index | NULL | PRIMARY | 4 | NULL | 115806 | Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+\r\n</code>\r\n可见在效率上结果上并没有任何差异</li>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">explain<span class=\"Apple-converted-space\">  </span>select max(id) from udata_1 where id &gt; 0; 因为id是从1开始自增的，所以和之前的sql应该没有任何差异</span></p>\r\n<code>\r\n+----------+\r\n| count(*) |\r\n+----------+\r\n| 115651 |\r\n+----------+\r\n1 row in set (0.05 sec)\r\n</code>\r\n结果上的确没有任何差异\r\n\r\nexplain select count(*) from udata_1 where id &gt; 0;\r\n<code>\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n| 1 | SIMPLE | udata_1 | range | PRIMARY | PRIMARY | 4 | NULL | 57903 | Using where; Using index |\r\n+----+-------------+---------+-------+---------------+---------+---------+------+-------+--------------------------+\r\n</code>\r\n这个结果有点意外，因为id是主键，应该是因为这个，从而可以判定之前的count(*)的时候，并没有根据主键来进行优化，而这里因为where 的原因，启动了主键查找，一定程度提供了效率。</li>\r\n	<li>\r\n<p class=\"p1\"><span class=\"s1\">select max(id) from udata_1;</span></p>\r\n<code>\r\n+---------+\r\n| max(id) |\r\n+---------+\r\n| 115651 |\r\n+---------+\r\n1 row in set (0.00 sec)\r\n</code>\r\n和count(*) 一样的结果，虽然只有10w+的测试数据，时间上还是可以看出优越的。\r\n\r\nexplain select max(id) from udata_1;\r\n<code>\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n| 1 | SIMPLE | NULL | NULL | NULL | NULL | NULL | NULL | NULL | Select tables optimized away |\r\n+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+\r\n</code>\r\n这个结果也有点意外，根据b+树的特点，以为需要logN级别的时间，而不是常量级别，也许是mysql针对max做了特定的优化</li>\r\n</ol>\r\n由以上对比可以看出，在count(*)和max 之间，效率上的差异是很明显的','mysql select max(id) 与 select count(*) 性能对比','','inherit','open','open','','132-revision-v1','','','2015-01-06 03:45:34','2015-01-06 03:45:34','',132,'http://unasm.sinaapp.com/?p=137',0,'revision','',0),(198,1,'2015-03-23 10:09:43','2015-03-23 10:09:43','1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心\n\n2.检测编码的时候，mb_check_encoding基本是没有用的，检查不出当前的字符串编码格式\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s2\">if</span> <span class=\"s3\">(</span><span class=\"s4\">3</span> <span class=\"s2\">!==</span> <span class=\"s5\">strlen</span><span class=\"s3\">(</span><span class=\"s1\">\'</span><span class=\"s4\">✓</span><span class=\"s1\">\'</span><span class=\"s3\">))</span> <span class=\"s3\">{</span><span class=\"s1\"><span class=\"Apple-converted-space\">                                                                                                                                            </span></span></p>\n<p class=\"p2\"><span class=\"s8\"><span class=\"Apple-converted-space\">          </span></span><span class=\"s9\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s8\">throw</span> <span class=\"s11\">new</span><span class=\"s9\"> \\</span><span class=\"s12\">DomainException</span><span class=\"s11\">(</span><span class=\"s9\">\'</span><span class=\"s13\">Bad encoding, length of unicode character ✓ should be 3. Ensure charset UTF-8 and check ini val  mbstring.func_autoload</span><span class=\"s9\">\'</span><span class=\"s11\">)</span><span class=\"s9\">; <span class=\"Apple-converted-space\">         </span></span><span class=\"s13\">    </span> <span class=\"s13\"> </span></p>\n<p class=\"p2\"><span class=\"s11\">}</span><span class=\"s13\">                                                                                                                                                                  </span></p>\n<p class=\"p2\">这个方法不错，可以判断是不是utf-8编码</p>\n<p class=\"p2\">3.php静态变量的问题。奇葩问题。</p>\n<p class=\"p2\">   从mc中读取缓存，如果读取次数太多，也会出现效率问题，一个更加优化的办法是保存在静态变量里面，或者是变量里面，这样会得到更高的效率。</p>\n<p class=\"p2\">这样做的前提条件是，数据量不能够过大，php的静态变量中不能保存太多的东西，最近遇到一个问题，</p>\n<p class=\"p2\">一个数组，长度为9，存储在mc中的，每个变量的长度是一个长度48的数组，如下,其中只有四条是有用的，如果我将这个9 * 48</p>\n\n<pre>的数组存在静态变量里面，页面是无法显示出来的，如果将长度为48的数组替换成想要的长度为4的数组，就可以毫无压力的显示数据，由此可见静态变量无法保存这个9 * 48 的数组，不过有点奇怪的是，使用 memory_get_usage 测试，耗费内存是2.4mb，不再变化。\n\n&lt;!--------------------------------------------------------------------------&gt;\n实测证明，不是因为静态变量大，将此长度为48数组单独保存，for循环复制给一个静态变量，，发现在循环到1000，程序执行如常，因为担心引用造成的复用，\n每次循环中修改数组中的变量，形成数组脏数组，避免php的内部数据引用，结果依旧证明，不是因为静态变量造成的。</pre>\n<pre>4.</pre>','PHP 的坑','','inherit','open','open','','195-autosave-v1','','','2015-03-23 10:09:43','2015-03-23 10:09:43','',195,'http://unasm.sinaapp.com/?p=198',0,'revision','',0),(142,1,'2015-01-14 09:34:28','2015-01-14 09:34:28','php 解析 json 的函数 json_decode 使用的时候会遇到的bug\r\n<code>$arr = array(\r\n12 =&gt; array(\"test\"),\r\n11 =&gt; array(\"link\"),\r\n);\r\n$arr = json_encode($arr);\r\n</code>\r\n这样解析的时候，如果使用json_decode($arr, true)将json还原成为一个数组的时候，<code> 12 =&gt; array(\'test\')</code> 就会丢失，结果会变成<code>\r\narray(\r\n11 =&gt; array(\"link\"),\r\n);</code>\r\n这个bug可以概述为如果大的整数下标在小整数下标之前，在decode时候，前面大的会丢失，如果调整了顺序，就不会出现这种情况，比如上面\r\n<code>$arr = array(\r\n11 =&gt; array(\"link\"),\r\n12 =&gt; array(\"test\"),\r\n);\r\n</code>就不会出现问题了。\r\n当然，还有另外一种解决办法，就是去掉true，变成<code>$arr = json_decode($arr);</code>转化称为一个对象，结果就对了','php json_decode 的一个bug','','publish','open','open','','php-json_decode-%e7%9a%84%e4%b8%80%e4%b8%aabug','','','2015-01-14 09:38:12','2015-01-14 09:38:12','',0,'http://unasm.sinaapp.com/?p=142',0,'post','',0),(143,1,'2015-01-14 09:34:28','2015-01-14 09:34:28','php 解析 json 的函数 json_decode 使用的时候会遇到的bug\r\n<code>\r\n$arr = array(\r\n12 =&gt; array(\"test\"),\r\n11 =&gt; array(\"link\"),\r\n);\r\n$arr = json_encode($arr);\r\n</code>\r\n这样解析的时候，如果使用json_decode($arr, true)将json还原成为一个数组的时候，<code> 12 =&gt; array(\'test\')</code> 就会丢失\r\n结果会变成<code>\r\narray(\r\n11 =&gt; array(\"link\"),\r\n);</code>\r\n这个bug可以概述为如果大的整数下标在小整数下标之前，在decode时候，前面大的会丢失，如果调整了顺序，就不会出现这种情况，比如上面\r\n<code>\r\n$arr = array(\r\n11 =&gt; array(\"link\"),\r\n12 =&gt; array(\"test\"),\r\n);\r\n</code>就不会出现问题了。\r\n当然，还有另外一种解决办法，就是去掉true，变成<code>$arr = json_decode($arr);</code>转化称为一个对象，结果就对了','php json_decode 的一个bug','','inherit','open','open','','142-revision-v1','','','2015-01-14 09:34:28','2015-01-14 09:34:28','',142,'http://unasm.sinaapp.com/?p=143',0,'revision','',0),(144,1,'2015-01-14 09:37:44','2015-01-14 09:37:44','php 解析 json 的函数 json_decode 使用的时候会遇到的bug\r\n<code>\r\n$arr = array(\r\n12 =&gt; array(\"test\"),\r\n11 =&gt; array(\"link\"),\r\n);\r\n$arr = json_encode($arr);\r\n</code>\r\n这样解析的时候，如果使用json_decode($arr, true)将json还原成为一个数组的时候，<code> 12 =&gt; array(\'test\')</code> 就会丢失，结果会变成<code>\r\narray(\r\n11 =&gt; array(\"link\"),\r\n);</code>\r\n这个bug可以概述为如果大的整数下标在小整数下标之前，在decode时候，前面大的会丢失，如果调整了顺序，就不会出现这种情况，比如上面\r\n<code>$arr = array(\r\n11 =&gt; array(\"link\"),\r\n12 =&gt; array(\"test\"),\r\n);\r\n</code>就不会出现问题了。\r\n当然，还有另外一种解决办法，就是去掉true，变成<code>$arr = json_decode($arr);</code>转化称为一个对象，结果就对了','php json_decode 的一个bug','','inherit','open','open','','142-revision-v1','','','2015-01-14 09:37:44','2015-01-14 09:37:44','',142,'http://unasm.sinaapp.com/?p=144',0,'revision','',0),(145,1,'2015-01-14 09:38:12','2015-01-14 09:38:12','php 解析 json 的函数 json_decode 使用的时候会遇到的bug\r\n<code>$arr = array(\r\n12 =&gt; array(\"test\"),\r\n11 =&gt; array(\"link\"),\r\n);\r\n$arr = json_encode($arr);\r\n</code>\r\n这样解析的时候，如果使用json_decode($arr, true)将json还原成为一个数组的时候，<code> 12 =&gt; array(\'test\')</code> 就会丢失，结果会变成<code>\r\narray(\r\n11 =&gt; array(\"link\"),\r\n);</code>\r\n这个bug可以概述为如果大的整数下标在小整数下标之前，在decode时候，前面大的会丢失，如果调整了顺序，就不会出现这种情况，比如上面\r\n<code>$arr = array(\r\n11 =&gt; array(\"link\"),\r\n12 =&gt; array(\"test\"),\r\n);\r\n</code>就不会出现问题了。\r\n当然，还有另外一种解决办法，就是去掉true，变成<code>$arr = json_decode($arr);</code>转化称为一个对象，结果就对了','php json_decode 的一个bug','','inherit','open','open','','142-revision-v1','','','2015-01-14 09:38:12','2015-01-14 09:38:12','',142,'http://unasm.sinaapp.com/?p=145',0,'revision','',0),(146,1,'2015-01-16 09:26:29','2015-01-16 09:26:29','<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href=\"http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/\">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href=\"http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n5. pid - 这个意义不大，主要是说以后这个.pdf文件里面的id号归这个进程使用，算是固定下来运行时候的pid号码吧\r\n\r\n6.  <span class=\"s1\">request_</span><span class=\"s2\">terminate</span><span class=\"s1\">_timeout = 30   请求的最大终止时间，默认单位为妙</span>\r\n\r\n如果file_get_contents请求的远程资源如果反应过慢，file_get_contents就会一直卡在那里不会超时，我们知道php.ini 里面max_execution_time 可以设置 PHP 脚本的最大执行时间，但是，在 php-cgi(php-fpm) 中，该参数不会起效。真正能够控制 PHP 脚本最大执行时间的是 php-fpm.conf 配置文件中的request_terminate_timeout参数。\r\n\r\nrequest_terminate_timeout默认值为 0 秒，也就是说，PHP 脚本会一直执行下去。这样，当所有的 php-cgi 进程都卡在 file_get_contents() 函数时，这台 Nginx+PHP 的 WebServer 已经无法再处理新的 PHP 请求了，Nginx 将给用户返回“502 Bad Gateway”。修改该参数，设置一个 PHP 脚本最大执行时间是必要的，但是，治标不治本。例如改成 30s，如果发生 file_get_contents() 获取网页内容较慢的情况，这就意味着 150 个 php-cgi 进程，每秒钟只能处理 5 个请求，WebServer 同样很难避免\"502 Bad Gateway\"。解决办法是request_terminate_timeout设置为10s或者一个合理的值，或者给file_get_contents加一个超时参数。\r\n\r\n7.   <span class=\"s1\">process</span><span class=\"s2\">_control_timeout = 0   ，除了官方的翻译之后，未见到任何解释</span>\r\n\r\n8. syslog_facility (注释翻译)\r\n\r\nsyslog  工具 是用来明确如何记录日志信息的，使syslogd可以处理来自不同程序下的不同日志信息,syslog可能的值有（ex  daemon equiv LOG_DAEMON）,默认选择了daemon。\r\n\r\nsyslogd 是linux下面的处理日志信息的软件/命令 <a title=\" Linux / Unix Command: syslogd\" href=\"http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm\">http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm</a> ，syslog应该是和syslogd进行交互的，处理日志信息的。\r\n\r\n这里的facility具体是指LOG_AUTH(安全/授权消息)，LOG_AUTHPRIV(安全/授权消息（私用）)，LOG_CRON（cron守护进程），LOG_DAEMON（系统守护进程），LOG_FTP（FTP守护进程）,LOG_KERN（内核进程），LOG_LOCAL0(本地使用)，LOG_LPR(行式打印机系统)，LOG_MAIL(邮件系统)，LOG_NEWS(网络新闻系统)，LOG_SYSLOG(SYSLOG内部产生的消息)，LOG_USER(任意的用户消息)，LOG_UUCP(UUCP系统)（摘自UNIX网络编程第一卷第三版313页）\r\n\r\n9.syslog_ident  是追加在所有的信息之前的，如果你在同一台服务器上面，有多个fpm实例运行，可以修改这个名字，满足需求。\r\n\r\n10.Log_level 可能的值是alert,error,warning,notice,debug,默认值notice.\r\n\r\n11,emergency_restart_threshold 如果一定时间内以SIGSEGV或者SIGBUS状态退出的子进程达到该值的两，fpm就会重启，0表示关闭。\r\n\r\n&nbsp;','php-fpm.conf 参数详解','','publish','open','open','','php-fpm-conf-%e5%8f%82%e6%95%b0%e8%af%a6%e8%a7%a3','','\nhttp://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/','2015-03-20 14:58:29','2015-03-20 14:58:29','',0,'http://unasm.sinaapp.com/?p=146',0,'post','',0),(147,1,'2015-01-16 09:26:29','2015-01-16 09:26:29','<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\r\n\r\n&nbsp;','php-fpm.conf 参数详解','','inherit','open','open','','146-revision-v1','','','2015-01-16 09:26:29','2015-01-16 09:26:29','',146,'http://unasm.sinaapp.com/?p=147',0,'revision','',0),(148,1,'2015-03-20 13:06:46','2015-03-20 13:06:46','<code>user = www</code>\n\ngroup = www\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\n\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href=\"http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/\">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\n\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href=\"http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\n\n4. pm (直接翻译的配置文件的注释)\n选择如何控制子进程的数量\n<ul>\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\n<ul>\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\n</ul>\n</li>\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\n<ul>\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\n</ul>\n</li>\n</ul>\n5. pid - 这个意义不大，主要是说以后这个.pdf文件里面的id号归这个进程使用，算是固定下来运行时候的pid号码吧\n\n6.  <span class=\"s1\">request_</span><span class=\"s2\">terminate</span><span class=\"s1\">_timeout = 30   请求的最大终止时间，默认单位为妙</span>\n\n如果file_get_contents请求的远程资源如果反应过慢，file_get_contents就会一直卡在那里不会超时，我们知道php.ini 里面max_execution_time 可以设置 PHP 脚本的最大执行时间，但是，在 php-cgi(php-fpm) 中，该参数不会起效。真正能够控制 PHP 脚本最大执行时间的是 php-fpm.conf 配置文件中的request_terminate_timeout参数。\n\nrequest_terminate_timeout默认值为 0 秒，也就是说，PHP 脚本会一直执行下去。这样，当所有的 php-cgi 进程都卡在 file_get_contents() 函数时，这台 Nginx+PHP 的 WebServer 已经无法再处理新的 PHP 请求了，Nginx 将给用户返回“502 Bad Gateway”。修改该参数，设置一个 PHP 脚本最大执行时间是必要的，但是，治标不治本。例如改成 30s，如果发生 file_get_contents() 获取网页内容较慢的情况，这就意味着 150 个 php-cgi 进程，每秒钟只能处理 5 个请求，WebServer 同样很难避免\"502 Bad Gateway\"。解决办法是request_terminate_timeout设置为10s或者一个合理的值，或者给file_get_contents加一个超时参数。\n\n7.   <span class=\"s1\">process</span><span class=\"s2\">_control_timeout = 0   ，除了官方的翻译之后，未见到任何解释</span>\n\n8. syslog_facility (注释翻译)\n\nsyslog  工具 是用来明确如何记录日志信息的，使syslogd可以处理来自不同程序下的不同日志信息,syslog可能的值有（ex  daemon equiv LOG_DAEMON）,默认选择了daemon。\n\nsyslogd 是linux下面的处理日志信息的软件/命令 <a title=\" Linux / Unix Command: syslogd\" href=\"http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm\">http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm</a> ，syslog应该是和syslogd进行交互的，处理日志信息的。\n\n这里的facility具体是指LOG_AUTH(安全/授权消息)，LOG_AUTHPRIV(安全/授权消息（私用）)，LOG_CRON（cron守护进程），LOG_DAEMON（系统守护进程），LOG_FTP（FTP守护进程）,LOG_KERN（内核进程），LOG_LOCAL0(本地使用)，LOG_LPR(行式打印机系统)，LOG_MAIL(邮件系统)，LOG_NEWS(网络新闻系统)，LOG_SYSLOG(SYSLOG内部产生的消息)，LOG_USER(任意的用户消息)，LOG_UUCP(UUCP系统)（摘自UNIX网络编程第一卷第三版313页）\n\n9.syslog_ident  是追加在所有的信息之前的，如果你在同一台服务器上面，有多个fpm实例运行，可以修改这个名字，满足需求。\n\n10.Log_level 可能的值是alert,error,warning,notice,debug,默认值notice.\n\n11,emergency_restart_threshold 如果一定时间内以SIGSEGV或者SIGBUS状态退出的子进程达到该值的两，fpm就会重启，0表示关闭。\n\n&nbsp;','php-fpm.conf 参数详解','','inherit','open','open','','146-autosave-v1','','','2015-03-20 13:06:46','2015-03-20 13:06:46','',146,'http://unasm.sinaapp.com/?p=148',0,'revision','',0),(153,1,'2015-01-16 10:16:56','2015-01-16 10:16:56','<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href=\"http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/\">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href=\"http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>','php-fpm.conf 参数详解','','inherit','open','open','','146-revision-v1','','','2015-01-16 10:16:56','2015-01-16 10:16:56','',146,'http://unasm.sinaapp.com/?p=153',0,'revision','',0),(152,1,'2015-01-16 10:12:17','2015-01-16 10:12:17','<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>','php-fpm.conf 参数详解','','inherit','open','open','','146-revision-v1','','','2015-01-16 10:12:17','2015-01-16 10:12:17','',146,'http://unasm.sinaapp.com/?p=152',0,'revision','',0),(150,1,'2015-01-16 10:09:59','2015-01-16 10:09:59','<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n\r\npm = dynamic\r\n\r\n选择如何控制子进程的数量\r\n可选的值有\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>','php-fpm.conf 参数详解','','inherit','open','open','','146-revision-v1','','','2015-01-16 10:09:59','2015-01-16 10:09:59','',146,'http://unasm.sinaapp.com/?p=150',0,'revision','',0),(149,1,'2015-01-16 10:07:25','2015-01-16 10:07:25','<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n\r\npm = dynamic\r\n\r\n选择如何控制子进程的数量\r\n可选的值有\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<code>\r\n; Choose how the process manager will control the number of child processes.\r\n; Possible Values:\r\n;  static - a fixed number (pm.max_children) of child processes;\r\n; dynamic - the number of child processes are set dynamically based on the\r\n; following directives. With this process management, there will be\r\n; always at least 1 children.\r\n; pm.max_children - the maximum number of children that can\r\n; be alive at the same time.\r\n; pm.start_servers - the number of children created on startup.\r\n; pm.min_spare_servers - the minimum number of children in \'idle\'\r\n; state (waiting to process). If the number\r\n; of \'idle\' processes is less than this\r\n; number then some children will be created.\r\n; pm.max_spare_servers - the maximum number of children in \'idle\'\r\n; state (waiting to process). If the number\r\n; of \'idle\' processes is greater than this\r\n; number then some children will be killed.\r\n; ondemand - no children are created at startup. Children will be forked when\r\n; new requests will connect. The following parameter are used:\r\n; pm.max_children - the maximum number of children that\r\n; can be alive at the same time.\r\n; pm.process_idle_timeout - The number of seconds after which\r\n; an idle process will be killed.\r\n; Note: This value is mandatory.\r\npm = dynamic\r\n</code>','php-fpm.conf 参数详解','','inherit','open','open','','146-revision-v1','','','2015-01-16 10:07:25','2015-01-16 10:07:25','',146,'http://unasm.sinaapp.com/?p=149',0,'revision','',0),(151,1,'2015-01-16 10:11:42','2015-01-16 10:11:42','<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n可选的值有\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>','php-fpm.conf 参数详解','','inherit','open','open','','146-revision-v1','','','2015-01-16 10:11:42','2015-01-16 10:11:42','',146,'http://unasm.sinaapp.com/?p=151',0,'revision','',0),(154,1,'2015-01-16 10:44:27','2015-01-16 10:44:27','<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href=\"http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/\">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href=\"http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n5. pid - 这个意义不大，主要是说以后这个.pdf文件里面的id号归这个进程使用，算是固定下来运行时候的pid号码吧','php-fpm.conf 参数详解','','inherit','open','open','','146-revision-v1','','','2015-01-16 10:44:27','2015-01-16 10:44:27','',146,'http://unasm.sinaapp.com/?p=154',0,'revision','',0),(155,1,'2015-01-16 11:16:17','2015-01-16 11:16:17','<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href=\"http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/\">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href=\"http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n5. pid - 这个意义不大，主要是说以后这个.pdf文件里面的id号归这个进程使用，算是固定下来运行时候的pid号码吧\r\n\r\n6.  <span class=\"s1\">request_</span><span class=\"s2\">terminate</span><span class=\"s1\">_timeout = 30   请求的最大终止时间，默认单位为妙</span>\r\n\r\n如果file_get_contents请求的远程资源如果反应过慢，file_get_contents就会一直卡在那里不会超时，我们知道php.ini 里面max_execution_time 可以设置 PHP 脚本的最大执行时间，但是，在 php-cgi(php-fpm) 中，该参数不会起效。真正能够控制 PHP 脚本最大执行时间的是 php-fpm.conf 配置文件中的request_terminate_timeout参数。\r\n\r\nrequest_terminate_timeout默认值为 0 秒，也就是说，PHP 脚本会一直执行下去。这样，当所有的 php-cgi 进程都卡在 file_get_contents() 函数时，这台 Nginx+PHP 的 WebServer 已经无法再处理新的 PHP 请求了，Nginx 将给用户返回“502 Bad Gateway”。修改该参数，设置一个 PHP 脚本最大执行时间是必要的，但是，治标不治本。例如改成 30s，如果发生 file_get_contents() 获取网页内容较慢的情况，这就意味着 150 个 php-cgi 进程，每秒钟只能处理 5 个请求，WebServer 同样很难避免\"502 Bad Gateway\"。解决办法是request_terminate_timeout设置为10s或者一个合理的值，或者给file_get_contents加一个超时参数。\r\n\r\n7.   <span class=\"s1\">process</span><span class=\"s2\">_control_timeout = 0   ，除了官方的翻译之后，未见到任何解释</span>','php-fpm.conf 参数详解','','inherit','open','open','','146-revision-v1','','','2015-01-16 11:16:17','2015-01-16 11:16:17','',146,'http://unasm.sinaapp.com/?p=155',0,'revision','',0),(156,1,'2015-01-18 10:07:47','2015-01-18 10:07:47','<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href=\"http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/\">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href=\"http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n5. pid - 这个意义不大，主要是说以后这个.pdf文件里面的id号归这个进程使用，算是固定下来运行时候的pid号码吧\r\n\r\n6.  <span class=\"s1\">request_</span><span class=\"s2\">terminate</span><span class=\"s1\">_timeout = 30   请求的最大终止时间，默认单位为妙</span>\r\n\r\n如果file_get_contents请求的远程资源如果反应过慢，file_get_contents就会一直卡在那里不会超时，我们知道php.ini 里面max_execution_time 可以设置 PHP 脚本的最大执行时间，但是，在 php-cgi(php-fpm) 中，该参数不会起效。真正能够控制 PHP 脚本最大执行时间的是 php-fpm.conf 配置文件中的request_terminate_timeout参数。\r\n\r\nrequest_terminate_timeout默认值为 0 秒，也就是说，PHP 脚本会一直执行下去。这样，当所有的 php-cgi 进程都卡在 file_get_contents() 函数时，这台 Nginx+PHP 的 WebServer 已经无法再处理新的 PHP 请求了，Nginx 将给用户返回“502 Bad Gateway”。修改该参数，设置一个 PHP 脚本最大执行时间是必要的，但是，治标不治本。例如改成 30s，如果发生 file_get_contents() 获取网页内容较慢的情况，这就意味着 150 个 php-cgi 进程，每秒钟只能处理 5 个请求，WebServer 同样很难避免\"502 Bad Gateway\"。解决办法是request_terminate_timeout设置为10s或者一个合理的值，或者给file_get_contents加一个超时参数。\r\n\r\n7.   <span class=\"s1\">process</span><span class=\"s2\">_control_timeout = 0   ，除了官方的翻译之后，未见到任何解释</span>\r\n\r\n8. syslog_facility (注释翻译)\r\n\r\nsyslog  工具 是用来明确如何记录日志信息的，使syslogd可以处理来自不同程序下的不同日志信息,syslog可能的值有（ex  daemon equiv LOG_DAEMON）,默认选择了daemon。\r\n\r\nsyslogd 是linux下面的处理日志信息的软件/命令 <a title=\" Linux / Unix Command: syslogd\" href=\"http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm\">http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm</a> ，syslog应该是和syslogd进行交互的，处理日志信息的。','php-fpm.conf 参数详解','','inherit','open','open','','146-revision-v1','','','2015-01-18 10:07:47','2015-01-18 10:07:47','',146,'http://unasm.sinaapp.com/?p=156',0,'revision','',0),(173,1,'2015-02-26 04:15:41','2015-02-26 04:15:41','目前的版本是PHPUnit 3.6.12 by Sebastian Bergmann. phpunit 在针对的检测，并没有提供一种好的方法，比如我运行一段代码，然后运行结束之后die或者exit，die或者exit之前有内容输出，这个在php代码中很常见，但是phpunit却没提供一种很好的检测机制，多个case，几乎每个case都有exit或者die的情况，这个时候，如果采用多线程的方式，是不可以的，因为不存在像nodejs那种回调，一旦多线程开了，虽然可以让代码在exit的时候执行，但是却无法获取exit之前的输出，也就是还是缺少汇总，\r\n\r\n目前的折中方案，就是通过curl，发起http请求的方式来测试具体有exit的api，获取exit之前的结果和输出','phpunit 实践','','publish','open','open','','phpunit-%e5%ae%9e%e8%b7%b5','','','2015-03-05 03:32:40','2015-03-05 03:32:40','',0,'http://unasm.sinaapp.com/?p=173',0,'post','',0),(160,1,'2015-01-22 02:24:45','2015-01-22 02:24:45','<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href=\"http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/\">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href=\"http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n5. pid - 这个意义不大，主要是说以后这个.pdf文件里面的id号归这个进程使用，算是固定下来运行时候的pid号码吧\r\n\r\n6.  <span class=\"s1\">request_</span><span class=\"s2\">terminate</span><span class=\"s1\">_timeout = 30   请求的最大终止时间，默认单位为妙</span>\r\n\r\n如果file_get_contents请求的远程资源如果反应过慢，file_get_contents就会一直卡在那里不会超时，我们知道php.ini 里面max_execution_time 可以设置 PHP 脚本的最大执行时间，但是，在 php-cgi(php-fpm) 中，该参数不会起效。真正能够控制 PHP 脚本最大执行时间的是 php-fpm.conf 配置文件中的request_terminate_timeout参数。\r\n\r\nrequest_terminate_timeout默认值为 0 秒，也就是说，PHP 脚本会一直执行下去。这样，当所有的 php-cgi 进程都卡在 file_get_contents() 函数时，这台 Nginx+PHP 的 WebServer 已经无法再处理新的 PHP 请求了，Nginx 将给用户返回“502 Bad Gateway”。修改该参数，设置一个 PHP 脚本最大执行时间是必要的，但是，治标不治本。例如改成 30s，如果发生 file_get_contents() 获取网页内容较慢的情况，这就意味着 150 个 php-cgi 进程，每秒钟只能处理 5 个请求，WebServer 同样很难避免\"502 Bad Gateway\"。解决办法是request_terminate_timeout设置为10s或者一个合理的值，或者给file_get_contents加一个超时参数。\r\n\r\n7.   <span class=\"s1\">process</span><span class=\"s2\">_control_timeout = 0   ，除了官方的翻译之后，未见到任何解释</span>\r\n\r\n8. syslog_facility (注释翻译)\r\n\r\nsyslog  工具 是用来明确如何记录日志信息的，使syslogd可以处理来自不同程序下的不同日志信息,syslog可能的值有（ex  daemon equiv LOG_DAEMON）,默认选择了daemon。\r\n\r\nsyslogd 是linux下面的处理日志信息的软件/命令 <a title=\" Linux / Unix Command: syslogd\" href=\"http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm\">http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm</a> ，syslog应该是和syslogd进行交互的，处理日志信息的。\r\n\r\n这里的facility具体是指LOG_AUTH(安全/授权消息)，LOG_AUTHPRIV(安全/授权消息（私用）)，LOG_CRON（cron守护进程），LOG_DAEMON（系统守护进程），LOG_FTP（FTP守护进程）,LOG_KERN（内核进程），LOG_LOCAL0(本地使用)，LOG_LPR(行式打印机系统)，LOG_MAIL(邮件系统)，LOG_NEWS(网络新闻系统)，LOG_SYSLOG(SYSLOG内部产生的消息)，LOG_USER(任意的用户消息)，LOG_UUCP(UUCP系统)（摘自UNIX网络编程第一卷第三版313页）','php-fpm.conf 参数详解','','inherit','open','open','','146-revision-v1','','','2015-01-22 02:24:45','2015-01-22 02:24:45','',146,'http://unasm.sinaapp.com/?p=160',0,'revision','',0),(161,1,'2015-01-25 14:13:51','2015-01-25 14:13:51','1.   fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;\r\n\r\n$document_root 指代上面的root配置变量，如果这里的document_root替换成具体的路径，则上面的root失效','nginx conf 配置参数详解','','publish','open','open','','nginx-conf-%e9%85%8d%e7%bd%ae%e5%8f%82%e6%95%b0%e8%af%a6%e8%a7%a3','','','2015-01-25 15:00:33','2015-01-25 15:00:33','',0,'http://unasm.sinaapp.com/?p=161',0,'post','',0),(162,1,'2015-01-25 14:13:51','2015-01-25 14:13:51','1.   fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;\r\n\r\n$document_root 指代上面的root配置变量，如果这里的document_root替换成具体的路径，则上面的root失效','nginx conf 配置参数详解','','inherit','open','open','','161-revision-v1','','','2015-01-25 14:13:51','2015-01-25 14:13:51','',161,'http://unasm.sinaapp.com/?p=162',0,'revision','',0),(164,1,'2015-02-02 03:27:19','2015-02-02 03:27:19','最近要做一个分页系统，页数可能有多，数据有点大，如果每次都去数据库重新查找数据，虽然是后台，但是也会对数据库和编辑的体验造成很大的影响，比较好的办法就是添加缓存，可以强制刷新获取最新数据，也可以从缓存中获取几分钟之前的数据。\r\n\r\n所有要呈现的数据从数据库里面检索出来之后是一个大数组，然后对数组进行整理，形成按用户成仙的数组格式，考虑到效率，在缓存中保存整理之后的数据比较好，也就是以用户的id为下表的数组。\r\n\r\n如何保存，有三种方案。\r\n\r\n一个是将整个大数组进行序列化打包，然后存储字符串，比较简单方便，真正读取数据的时候，先获取全部的，然后根据下表显示指定的数据。而且还有一个担心，就是redis的字符串最大长度是512mb，在用户为1百万的时候，每个用户只有500+字节，显然不够用，虽然1百万用户的情况比较少，但是不可不防。\r\n\r\n第二是将数组进行拆分，以用户的id为单元存储,或者是插入的时间+id进行存储，然后每次显示的时候根据uid或者时间时间进行展示。\r\n\r\n还有第三种办法，就是按页进行保存，优点是高效，直接获取全部所有的想要展示的，缺点是一旦数据更新，需要更新全部数据，用不好，反而效率不高，这个时候，需要优雅降级。\r\n\r\n第一个降级的办法是，一定时间内更新全部的页数据，也是有一定压力的，而且，首页数据就已经不是实时的了。\r\n\r\n其实还有另外一种降级的办法，就是刷增量，每次更新page之后，保存一个最新的数据插入时间戳，用户访问的时候，查询数据库里面时间戳大于这个时间点的数据，整理，表明这些数据是最新的，不在page缓存中的，然后将这些数据作为首页将要呈现的数据，如果不足一页，从page缓存中的首页得到一页的数据，抽调其中一部分，补充，作为新的首页数据，然后配合定时刷新全部page页数据的部分，这样在保持效率的同时，保证了第一页，最重要 的部分始终是最新的数据，当然，第二页的数据就可能面临刷新时间间隔，不同步的问题。\r\n\r\n&nbsp;','分页系统的设计与实现','','publish','open','open','','%e5%88%86%e9%a1%b5%e7%b3%bb%e7%bb%9f%e7%9a%84%e8%ae%be%e8%ae%a1%e4%b8%8e%e5%ae%9e%e7%8e%b0','','','2015-02-02 04:00:48','2015-02-02 04:00:48','',0,'http://unasm.sinaapp.com/?p=164',0,'post','',0),(165,1,'2015-02-02 03:27:19','2015-02-02 03:27:19','最近要做一个分页系统，页数可能有多，数据有点大，如果每次都去数据库重新查找数据，虽然是后台，但是也会对数据库和编辑的体验造成很大的影响，比较好的办法就是添加缓存，可以强制刷新获取最新数据，也可以从缓存中获取几分钟之前的数据。\r\n\r\n所有要呈现的数据从数据库里面检索出来之后是一个大数组，然后对数组进行整理，形成按用户成仙的数组格式，考虑到效率，在缓存中保存整理之后的数据比较好，也就是以用户的id为下表的数组。\r\n\r\n如何保存，有三种方案。\r\n\r\n一个是将整个大数组进行序列化打包，然后存储字符串，比较简单方便，真正读取数据的时候，先获取全部的，然后根据下表显示指定的数据。而且还有一个担心，就是redis的字符串最大长度是512mb，在用户为1百万的时候，每个用户只有500+字节，显然不够用，虽然1百万用户的情况比较少，但是不可不防。\r\n\r\n第二是将数组进行拆分，以用户的id为单元存储,或者是插入的时间+id进行存储，然后每次显示的时候根据uid或者时间时间进行展示。\r\n\r\n还有第三种办法，就是按页进行保存，优点是高效，直接获取全部所有的想要展示的，缺点是一旦数据更新，需要更新全部数据，用不好，反而效率不高，这个时候，需要优雅降级。\r\n\r\n第一个降级的办法是，一定时间内更新全部的页数据，也是有一定压力的，而且，首页数据就已经不是实时的了。\r\n\r\n其实还有另外一种降级的办法，就是刷增量，每次更新page之后，保存一个最新的数据插入时间戳，用户访问的时候，查询数据库里面时间戳大于这个时间点的数据，整理，表明这些数据是最新的，不在page缓存中的，然后将这些数据作为首页将要呈现的数据，如果不足一页，从page缓存中的首页得到一页的数据，抽调其中一部分，补充，作为新的首页数据，然后配合定时刷新全部page页数据的部分，这样在保持效率的同时，保证了第一页，最重要 的部分始终是最新的数据，当然，第二页的数据就可能面临刷新时间间隔，不同步的问题。\r\n\r\n&nbsp;','分页系统的设计与实现','','inherit','open','open','','164-revision-v1','','','2015-02-02 03:27:19','2015-02-02 03:27:19','',164,'http://unasm.sinaapp.com/?p=165',0,'revision','',0),(166,1,'2015-02-03 03:56:21','2015-02-03 03:56:21','这个是为活动系统设计的一套动态分表的策略，活动数据的特点是每个活动之间的数据彼此独立，单个活动的的数据不算很大，几乎没有活动数据可以占据单独的一个表，\r\n\r\n首先在缓存中建立一个列表，标记还可以插入数据的表的集合，而在集合之外的其他的表已经是历史数据，至少不会有新的活动是数据插入，具体实现方式如下：\r\n\r\n<img class=\"alignnone\" src=\"https://api.sinas3.com/v1/SAE_unasm/unasm/%E6%A1%B6%E6%B1%A0%E7%9A%84%E8%AE%BE%E8%AE%A1.jpg\" alt=\"\" width=\"556\" height=\"627\" />\r\n\r\n最上面的是一个一个的表，真正插入数据的地方\r\n\r\nActor 指活动，首先从列表中得到所有桶的信息，所谓桶，就是还可以插入数据的表，\r\n\r\n桶信息包括两种：表的名字，和已经插入该表的活动列表。根据这些可以获得当前每个表的数据量，以及为正在添加的活动预留的空间。\r\n\r\n因为获取的数据量是根据确实添加了的数据，之前为其他的已经结束的活动多预留的空间在这里可以重复利用。\r\n\r\n剩余的空间不足以容纳一个新的活动的时候，就放弃这个表，\r\n\r\n同时每个表的活动数量也可以一定程度的反应写压力，虽然不是很精确，但是两者存在一定的关联，如果严格的区分写压力，可以根据joyList中过去一定时间内插入的数据量来比较精确的反应写压力，然后将插入数据量放到桶信息里面，作为判断的依据，从而达到每个表的读写压力不至于过大的目的。从所有的桶中选择最优的，作为新的活动的存储地址。\r\n\r\n这样有几个好处：\r\n\r\n第一：保证了每个活动一个表的基本原则。\r\n\r\n第二：在不出现很奇葩的情况时候，保证了每个表的数据量都在一个设置的常量上下，比如200w，不会因为每个活动数据太少造成空间浪费。\r\n\r\n第三：动态创建表，可以保证数据的长期运行\r\n\r\n第四：为真正分担读写压力预留了扩展空间。\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n<code>\r\nclass DataModel  \r\n{\r\n    //存储桶池状态的set key\r\n    const KEY = \'jiaminJoyTest\';\r\n    //每个桶里面放的最多的活动数，考虑写压力,-1 表示不理会\r\n    const MAXEACHBUCKET = 3;\r\n    //每个活动预估的数字,20w\r\n    const EACHJOYNUM = 200000;\r\n    //每个表里面存储数据最多的基准值,200w\r\n    const MAXTABNUM = 2000000;\r\n\r\n    /**\r\n     *  添加新的桶，或者把活动添加到一个指定桶里面\r\n     *\r\n     *  之所以把修改和添加放在一起，是为了方便维护bucket里面的结构一直\r\n     *  只能有select 触发\r\n     *  @param  array   $bucket \r\n     **/\r\n    protected static function  addBucket($jid , $state = array())\r\n    {\r\n        $redis = new myRedis();\r\n        if(empty($state)){\r\n           //这里加入日志，提示创建了表 \r\n            $state = array(\r\n                \'name\' => UdataModel::createTab() ,\r\n                \'joyNum\' => 1,\r\n                \'joyList\' => array($jid)\r\n            );\r\n        } else {\r\n            if($redis->sRem(self::KEY , json_encode($state))){\r\n                $state[\'joyNum\'] += 1;\r\n                array_push($state[\'joyList\'] , $jid);\r\n            } else {\r\n                Common::debug(\'删除桶池失败\');\r\n                Message::showError(\'删除更新桶失败\');\r\n            }\r\n\r\n        }\r\n        if($redis->sAdd(self::KEY , json_encode($state))){\r\n            return $state[\'name\'];\r\n        }\r\n        //这里报警,添加失败，丢失了桶\r\n        Common::debug(\'添加桶信息进入set 失败\');\r\n        return false;\r\n    }\r\n    \r\n\r\n    /**\r\n     * 从桶池中选择当前可以插入的表\r\n     * 就是从目前的bucket 中找一个最优的，\r\n     * 然后插入，如果都不满足条件，创建一个新的，如果超出了最大的桶池数就报警，\r\n     * 同时，创建成功\r\n     *\r\n     **/\r\n    public static function select($jid)\r\n    {\r\n        //查找所有符合条件的，然后得到一个负载最小的\r\n        $redis = new myRedis();\r\n        $data = $redis->sMembers(self::KEY);\r\n        $target = array();\r\n        if(count($data) === 0){\r\n            self::testAdd();\r\n        }\r\n        foreach($data as $bucket){\r\n            Common::Debug(\'bucket : \' . $bucket);\r\n            $state = json_decode($bucket , true) ;\r\n            // 桶里面已经存储的总量\r\n            $storedInTab = UdataModel::getNumByName($state[\'name\']); \r\n            if($storedInTab === 0){\r\n                BaseModelCommon::debug(\"no data in \". $state[\'name\']);\r\n            }\r\n\r\n            if($state[\'joyNum\'] !== count( $state[\'joyList\']) ){\r\n                //发送报警邮件，严重错误\r\n            }\r\n            //目前在桶里面的活动已经填充了的数据\r\n            $activeData = UdataModel::getDataNum($state[\'name\'], $state[\'joyList\']);\r\n            BaseModelCommon::Debug(\'activeData : \' . $activeData) ;\r\n            //需要为桶里面的活动预留的空间,\r\n            //预估的每个活动的记录数 * 活动的数目 - 已经存储了的数据 = 接来下还要占据的记录数\r\n            $activeNeedSpace = self::EACHJOYNUM * $state[\'joyNum\'] - $activeData;\r\n            BaseModelCommon::Debug(\'activeNeedSpace : \' . $activeNeedSpace) ;\r\n            //发送报警邮件，告知管理员,同时这个桶池不再添加活动,避免进一步增加上限\r\n            if($activeNeedSpace < 0){\r\n                continue;\r\n            }\r\n            // 剩余的空间为每个表的最大数据数 - (已经存储的数据 + 还将要存储的数据数）\r\n            $leave = self::MAXTABNUM - ($storedInTab + $activeNeedSpace);\r\n\r\n            BaseModelCommon::Debug(\'leave : \' . $leave) ;\r\n            // 如果剩下的空间还有就插入，进入备用列表,200w已经很保守了，没有必要降到200w以下\r\n            if($leave > 0){\r\n                if(empty($target)){\r\n                    $target = $state;\r\n                } else {\r\n                    //就根据插入的活动数量来判断负载, 不是最科学的，但是也是有相当道理\r\n                    if($target[\'joyNum\'] > $state[\'joyNum\']){\r\n                        $target = $state;\r\n                    }\r\n                }\r\n            }\r\n            Common::Debug(\'target : \' . json_encode($target));\r\n        }\r\n        //return self::addBucket($jid , $target);\r\n    }\r\n\r\n    /**\r\n     *  测试添加addBucket\r\n     *  @return     array ()    添加的桶的信息，名字等等\r\n     **/\r\n    public static function testAdd()\r\n    {\r\n        $states = array(\r\n            //name : 表名\r\n            //joyNum : 已经插入的活动数目\r\n            //joyList : 该表里面 正在插入的joy id列表\r\n            array(\'name\' => \'udata_1\', \'joyNum\' => 3, \'joyList\' => array( 3,2,4 )),\r\n            array(\'name\' => \'udata_2\', \'joyNum\' => 0, \'joyList\' => array()),\r\n            array(\'name\' => \'udata_3\', \'joyNum\' => 1, \'joyList\' => array(7)),\r\n        );\r\n        $redis = new myRedis;\r\n        if($redis->sCard(self::KEY) === 0){\r\n            //灌数据\r\n            foreach($states as $state){\r\n                $redis->sAdd(self::KEY , json_encode($state));\r\n            }\r\n        }\r\n        //echo self::addBucket();\r\n    }  \r\n    \r\n    /**\r\n     * 监测程序的运行\r\n     *\r\n     * 程序员应该实时知道自己程序的运行状况\r\n     * @return array\r\n     **/\r\n    public static function inspect()\r\n    {\r\n        //array(\'name\' => \'udata_1\', \'joyNum\' => 2, \'joyList\' => array( 3,2,4 )),\r\n        $redis = new myRedis;\r\n        $data = $redis->sMembers(self::KEY);\r\n        header(\"Cache-Control:no-cache\");\r\n        echo \"<table style = \'text-align:center\'>\r\n            <thead><tr>\r\n            <th>当前正在插入表 </th>\r\n            <th>表内项目数</th>\r\n            <th>表内数据量</th>\r\n            <th>详情</th>\r\n            </tr></thead>\";\r\n        foreach($data as $state){\r\n            $bucket = json_decode($state , true);\r\n            echo \"<tr style = \'border-bottom:2px\'><td>{$bucket[\'name\']}</td> <td>{$bucket[\'joyNum\']}</td>\";\r\n            echo \"<td>\" . UdataModel::getNumByName($bucket[\'name\']) . \"</td>\"; \r\n            echo \"<td><table>\";\r\n            foreach($bucket[\'joyList\'] as $joy){\r\n                echo \"<tr>joy id 为{$joy}数量\" . UdataModel::getDataNum($bucket[\'name\'], $joy) . \"<br/></tr>\";\r\n            }\r\n            echo \"</table></td></tr>\";\r\n        }\r\n        echo \"</table>\";\r\n    }\r\n\r\n    /**\r\n     * 清除数据\r\n     * 开发的时候用\r\n     **/\r\n    public static function clear()\r\n    {\r\n        $redis = new myRedis();\r\n        $data = $redis->sMembers(self::KEY);\r\n        foreach($data as $state){\r\n            $redis->sRem(self::KEY, $state);\r\n        }\r\n        $data = $redis->sMembers(self::KEY);\r\n        if(!count($data)) {\r\n            echo \"it is clear<br/>\";\r\n        } else {\r\n            echo \"no clear<br/>\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清除bucket\r\n     *\r\n     * 当表里的数据已经达到200w的时候，就把这个表对应的桶删除\r\n     * 定时脚本,定期清理过期的数据\r\n     **/\r\n    public static function delBucket()\r\n    {\r\n        $data = $redis->sMembers(self::KEY);\r\n        foreach($data as $bucket){\r\n            $state = json_decode($bucket , true) ;\r\n            //数据已经满了的话，就从桶池里面删除，不再插入数据\r\n            if(UdataModel::getNumByName($state[\'name\']) >= self::MAXTABNUM){\r\n                $redis->sRem(self::KEY , $bucket)  ;\r\n            }\r\n        }\r\n    }\r\n\r\n    function __construct(){}\r\n}\r\n</code>','mysql 分表之桶池','','inherit','open','open','','10-revision-v1','','','2015-02-03 03:56:21','2015-02-03 03:56:21','',10,'http://unasm.sinaapp.com/?p=166',0,'revision','',0),(168,1,'2015-02-11 03:30:44','2015-02-11 03:30:44','高速缓存的抖动就不解释了，为什么做一些填充之后，就可以是引用的块映射到到不同的组呢？','高速缓存抖动解决方案的原理','','publish','open','open','','%e9%ab%98%e9%80%9f%e7%bc%93%e5%ad%98%e6%8a%96%e5%8a%a8%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88%e7%9a%84%e5%8e%9f%e7%90%86','','','2015-02-11 03:30:44','2015-02-11 03:30:44','',0,'http://unasm.sinaapp.com/?p=168',0,'post','',0),(169,1,'2015-02-11 03:30:44','2015-02-11 03:30:44','高速缓存的抖动就不解释了，为什么做一些填充之后，就可以是引用的块映射到到不同的组呢？','高速缓存抖动解决方案的原理','','inherit','open','open','','168-revision-v1','','','2015-02-11 03:30:44','2015-02-11 03:30:44','',168,'http://unasm.sinaapp.com/?p=169',0,'revision','',0),(170,1,'2015-02-12 12:32:16','0000-00-00 00:00:00','在项目中，我们可能会选择性的人为的记录一些信息,这些信息','日志的记录位置考虑','','draft','open','open','','','','','2015-02-12 12:32:16','2015-02-12 12:32:16','',0,'http://unasm.sinaapp.com/?p=170',0,'post','',0),(171,1,'2015-02-12 12:32:16','2015-02-12 12:32:16','在项目中，我们可能会选择性的人为的记录一些信息,这些信息','日志的记录位置考虑','','inherit','open','open','','170-revision-v1','','','2015-02-12 12:32:16','2015-02-12 12:32:16','',170,'http://unasm.sinaapp.com/?p=171',0,'revision','',0),(185,1,'2015-03-05 03:32:40','2015-03-05 03:32:40','目前的版本是PHPUnit 3.6.12 by Sebastian Bergmann. phpunit 在针对的检测，并没有提供一种好的方法，比如我运行一段代码，然后运行结束之后die或者exit，die或者exit之前有内容输出，这个在php代码中很常见，但是phpunit却没提供一种很好的检测机制，多个case，几乎每个case都有exit或者die的情况，这个时候，如果采用多线程的方式，是不可以的，因为不存在像nodejs那种回调，一旦多线程开了，虽然可以让代码在exit的时候执行，但是却无法获取exit之前的输出，也就是还是缺少汇总，\r\n\r\n目前的折中方案，就是通过curl，发起http请求的方式来测试具体有exit的api，获取exit之前的结果和输出','phpunit 实践','','inherit','open','open','','173-revision-v1','','','2015-03-05 03:32:40','2015-03-05 03:32:40','',173,'http://unasm.sinaapp.com/?p=185',0,'revision','',0),(174,1,'2015-02-26 04:15:41','2015-02-26 04:15:41','目前的版本是PHPUnit 3.6.12 by Sebastian Bergmann. phpunit 在针对的检测，并没有提供一种好的方法，比如我运行一段代码，然后运行结束之后die或者exit，die或者exit之前有内容输出，这个在php代码中很常见，但是phpunit却没提供一种很好的检测机制可以通过缓冲来做\r\n\r\n<code>\r\nob_start();\r\nMessage::showSucc(\'succ\');\r\n$output = ob_get_contents();\r\nob_end_clean();</code>\r\n\r\n<code>\r\nob_start();\r\nCdataModel::set();\r\n$code_output = ob_get_contents();\r\nob_end_clean();</code>\r\n\r\n上面两段，在Message::showSucc里面exit了，set函数里面也exit了，通过这样，可以得到想要的输出，运行的时候的输出，然后将$output 和 $code_output 对比，就可以知道在die的情况下得到die之前的输出，然后对比','phpunit 实践','','inherit','open','open','','173-revision-v1','','','2015-02-26 04:15:41','2015-02-26 04:15:41','',173,'http://unasm.sinaapp.com/?p=174',0,'revision','',0),(175,1,'2015-02-27 02:04:18','2015-02-27 02:04:18','<ol>\r\n	<li>一个表里面所有的varchar 字段加起来<strong>必须</strong>不能超过65532字节，推荐不超过8098个，因为一旦超过8098，占用的磁盘大小超过了一页,innodb会使用未压缩的blob页来保存，数据页会被用来保存偏移量，varchar越大，使用的blob越多，所以从效率和节省空间角度来说，不推荐超过8098.</li>\r\n	<li>char也被当做变成处理，根据字符集决定，比如同一个表，存入\'a\' 和\'他\'占用的字节是不同的</li>\r\n	<li>innodb的range 分区 查询，只能针对YEAR,TO_DAYS,TO_SECONDS,UNIX_TIMESTAMP等函数进行搜索优化，比如YEAR(date) + MONTH(date)的时候，优化器是不会搜索优化的</li>\r\n	<li>Mysql 5.5版本之前 索引的添加或者删除操作过程是这样的\r\n<ul>\r\n	<li>先创建一个临时表，表结构为alter table之后的新定义的结构</li>\r\n	<li>把原来的数据导入临时表</li>\r\n	<li>删除原表</li>\r\n	<li>把临时表重命名为原来的表</li>\r\n</ul>\r\n</li>\r\n	<li>Got error 28 from storage engine,这就是一个很无辜的错误了，或者是属于dba范畴的，磁盘空间满了，没有空间写数据了</li>\r\n</ol>','mysql 基础知识集锦','','publish','open','open','','mysql-%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86%e9%9b%86%e9%94%a6','','','2015-04-15 09:28:07','2015-04-15 09:28:07','',0,'http://unasm.sinaapp.com/?p=175',0,'post','',0),(176,1,'2015-02-27 02:04:18','2015-02-27 02:04:18','<ol>\r\n	<li>一个表里面所有的varchar 字段加起来不能超过65532字节</li>\r\n</ol>','mysql 基础知识集锦','','inherit','open','open','','175-revision-v1','','','2015-02-27 02:04:18','2015-02-27 02:04:18','',175,'http://unasm.sinaapp.com/?p=176',0,'revision','',0),(177,1,'2015-03-02 03:04:10','2015-03-02 03:04:10','','innodb 内存管理','','publish','open','open','','innodb-%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86','','','2015-03-02 03:04:10','2015-03-02 03:04:10','',0,'http://unasm.sinaapp.com/?p=177',0,'post','',0),(178,1,'2015-03-02 03:04:10','2015-03-02 03:04:10','','innodb 内存管理','','inherit','open','open','','177-revision-v1','','','2015-03-02 03:04:10','2015-03-02 03:04:10','',177,'http://unasm.sinaapp.com/?p=178',0,'revision','',0),(179,1,'2015-04-15 09:26:08','2015-04-15 09:26:08','<ol>\n<ol>\n<ol>\n	<li>一个表里面所有的varchar 字段加起来<strong>必须</strong>不能超过65532字节，推荐不超过8098个，因为一旦超过8098，占用的磁盘大小超过了一页,innodb会使用未压缩的blob页来保存，数据页会被用来保存偏移量，varchar越大，使用的blob越多，所以从效率和节省空间角度来说，不推荐超过8098.</li>\n	<li>char也被当做变成处理，根据字符集决定，比如同一个表，存入\'a\' 和\'他\'占用的字节是不同的</li>\n	<li>innodb的range 分区 查询，只能针对YEAR,TO_DAYS,TO_SECONDS,UNIX_TIMESTAMP等函数进行搜索优化，比如YEAR(date) + MONTH(date)的时候，优化器是不会搜索优化的</li>\n	<li>Mysql 5.5版本之前 索引的添加或者删除操作过程是这样的\n<ul>\n	<li>先创建一个临时表，表结构为alter table之后的新定义的结构</li>\n	<li>把原来的数据导入临时表</li>\n	<li>删除原表</li>\n	<li>把临时表重命名为原来的表</li>\n</ul>\n</li>\n</ol>\n</ol>\n</ol>','mysql 基础知识集锦','','inherit','open','open','','175-autosave-v1','','','2015-04-15 09:26:08','2015-04-15 09:26:08','',175,'http://unasm.sinaapp.com/?p=179',0,'revision','',0),(180,1,'2015-03-02 05:13:11','2015-03-02 05:13:11','<ol>\r\n	<li>一个表里面所有的varchar 字段加起来<strong>必须</strong>不能超过65532字节，推荐不超过8098个，因为一旦超过8098，占用的磁盘大小超过了一页,innodb会使用未压缩的blob页来保存，数据页会被用来保存偏移量，varchar越大，使用的blob越多</li>\r\n</ol>','mysql 基础知识集锦','','inherit','open','open','','175-revision-v1','','','2015-03-02 05:13:11','2015-03-02 05:13:11','',175,'http://unasm.sinaapp.com/?p=180',0,'revision','',0),(181,1,'2015-03-02 05:36:39','2015-03-02 05:36:39','<ol>\r\n	<li>一个表里面所有的varchar 字段加起来<strong>必须</strong>不能超过65532字节，推荐不超过8098个，因为一旦超过8098，占用的磁盘大小超过了一页,innodb会使用未压缩的blob页来保存，数据页会被用来保存偏移量，varchar越大，使用的blob越多，所以从效率和节省空间角度来说，不推荐超过8098.</li>\r\n	<li>char也被当做变成处理，根据字符集决定，比如同一个表，存入\'a\' 和\'他\'占用的字节是不同的</li>\r\n</ol>','mysql 基础知识集锦','','inherit','open','open','','175-revision-v1','','','2015-03-02 05:36:39','2015-03-02 05:36:39','',175,'http://unasm.sinaapp.com/?p=181',0,'revision','',0),(213,1,'2015-03-19 17:24:34','2015-03-19 17:24:34','#这个文件控制着svnserver守护进程的配置，如果你想用它这个来访问版本库的话，那这个文件是没法避免的。\r\n\r\n[general]\r\n\r\n#这些选项控制着该版本库所有的有权限和没权限的用户，有效值是write,read,和none，配置的样例配置如默认配#置\r\n\r\nanon-access=none\r\n\r\nauth-access=write\r\n\r\n#password-db选项是数据库密码文件位置，除非你明确指明了一个以/开头的路径，否则密码文件的路径都是相对#于配置文件的相对路径。\r\n\r\npassword-db = passwd\r\n\r\n# authz-db 选项 是控制访问路径的权限的，不指定以/开头的路径，该文件的路径是相对于本文件的，不指定该\r\n\r\n#值，无法控制用户的访问路径。\r\n\r\n#realm （无意义）\r\n\r\n[sasl]\r\n\r\n#该选项指定是否使用Cyrus SASL权限验证库，默认不启用,运行命令“svnserve --version” ，查询是否能找到“<span class=\"s1\">Cyrus #SASL authentication is available</span>”\r\n\r\n#use-sasl = true\r\n\r\n#这些选项指定想要通过sasl提供的安全级别，0 不加密，1意味着整数检查，大于一则意味着和加密字符串有效长度相关联\r\n\r\n#min-encryption = 0\r\n\r\n#max-encryption = 256','svn 服务器 配置svnserve.conf 翻译','','publish','open','open','','svn-%e6%9c%8d%e5%8a%a1%e5%99%a8-%e9%85%8d%e7%bd%aesvnserve-conf-%e7%bf%bb%e8%af%91','','','2015-03-19 17:24:49','2015-03-19 17:24:49','',0,'http://unasm.sinaapp.com/?p=213',0,'post','',0),(184,1,'2015-03-05 03:31:15','2015-03-05 03:31:15','目前的版本是PHPUnit 3.6.12 by Sebastian Bergmann. phpunit 在针对的检测，并没有提供一种好的方法，比如我运行一段代码，然后运行结束之后die或者exit，die或者exit之前有内容输出，这个在php代码中很常见，但是phpunit却没提供一种很好的检测机制，多个case，几乎每个case都有exit或者die的情况，这个时候，如果采用多线程的方式，是不可以的，因为不存在像nodejs那种回调','phpunit 实践','','inherit','open','open','','173-autosave-v1','','','2015-03-05 03:31:15','2015-03-05 03:31:15','',173,'http://unasm.sinaapp.com/?p=184',0,'revision','',0),(186,1,'2015-03-06 09:49:27','2015-03-06 09:49:27','有一篇文章，需要被编辑，一般来说，都是一人在编辑，但是不排除两个人一起编辑的情况，因为不能做的像git那样成为一个标准的版本控制器，可以合并对比差异，这样工作量会有点大，所以实现一个最简单实用的，加锁，同一篇文章同一时间只能由一个人来编辑。\r\n\r\n第一种方案是在mc或者是redis加一个文章id和登陆编辑id的标志位，每次访问页面的时候，检查文章id的标志位是否存在，存在了，是谁在编辑，然后提示，通知不能编辑。对于缓存中的标志位的维护需要通过前端和后台的配合，前端在页面相隔时间T发送一个心跳信号，表示当前编辑依旧在编辑，后台在收到心跳信号之后，将标志位的失效时间延后3*T，保证不会因为某次网络事故丢包导致锁失效，如果编辑关闭浏览器，前端通过监测事件，在关闭之前发送一个请求，解除锁的存在，如果突然关机，或者断网等等，也可以保证锁在3*T之后，自动解除。\r\n\r\n这个方案的优点是简单，而且也实用，没有过于复杂的实现，前端和后台配合一下就好，缺点是DDOS，而且，关闭之前的事件或许发送失败，3*T时间的容忍程度，等等。\r\n\r\n第二种方案是websocket','网络编辑文件中锁的实现','','publish','open','open','','%e7%bd%91%e7%bb%9c%e7%bc%96%e8%be%91%e6%96%87%e4%bb%b6%e4%b8%ad%e9%94%81%e7%9a%84%e5%ae%9e%e7%8e%b0','','','2015-03-06 10:06:19','2015-03-06 10:06:19','',0,'http://unasm.sinaapp.com/?p=186',0,'post','',0),(187,1,'2015-03-06 09:49:27','2015-03-06 09:49:27','有一篇文章，需要被编辑，一般来说，都是一人在编辑，但是不排除两个人一起编辑的情况，因为不能做的像git那样成为一个标准的版本控制器，可以合并对比差异，这样工作量会有点大，所以实现一个最简单实用的，加锁，同一篇文章同一时间只能由一个人来编辑。\r\n\r\n第一种方案是在mc或者是redis加一个文章id和登陆编辑id的标志位，每次访问页面的时候，检查文章id的标志位是否存在，存在了，是谁在编辑，然后提示，通知不能编辑。对于缓存中的标志位的维护需要通过前端和后台的配合，前端在页面相隔时间T发送一个心跳信号，表示当前编辑依旧在编辑，后台在收到心跳信号之后，将标志位的失效时间延后3*T，保证不会因为某次网络事故丢包导致锁失效，如果编辑关闭浏览器，前端通过监测事件，在关闭之前发送一个请求，解除锁的存在，如果突然关机，或者断网等等，也可以保证锁在3*T之后，自动解除。\r\n\r\n这个方案的优点是简单，而且也实用，没有过于复杂的实现，前端和后台配合一下就好，缺点是DDOS，而且，关闭之前的事件或许发送失败，3*T时间的容忍程度，等等。\r\n\r\n第二种方案是websocket','网络编辑文件中锁的实现','','inherit','open','open','','186-revision-v1','','','2015-03-06 09:49:27','2015-03-06 09:49:27','',186,'http://unasm.sinaapp.com/?p=187',0,'revision','',0),(188,1,'2015-03-09 00:50:37','2015-03-09 00:50:37','<ol>\r\n	<li>一个表里面所有的varchar 字段加起来<strong>必须</strong>不能超过65532字节，推荐不超过8098个，因为一旦超过8098，占用的磁盘大小超过了一页,innodb会使用未压缩的blob页来保存，数据页会被用来保存偏移量，varchar越大，使用的blob越多，所以从效率和节省空间角度来说，不推荐超过8098.</li>\r\n	<li>char也被当做变成处理，根据字符集决定，比如同一个表，存入\'a\' 和\'他\'占用的字节是不同的</li>\r\n	<li>innodb的range 分区 查询，只能针对YEAR,TO_DAYS,TO_SECONDS,UNIX_TIMESTAMP等函数进行搜索优化，比如YEAR(date) + MONTH(date)的时候，优化器是不会搜索优化的</li>\r\n</ol>','mysql 基础知识集锦','','inherit','open','open','','175-revision-v1','','','2015-03-09 00:50:37','2015-03-09 00:50:37','',175,'http://unasm.sinaapp.com/?p=188',0,'revision','',0),(189,1,'2015-03-11 16:23:50','2015-03-11 16:23:50','<p class=\"p1\"><span class=\"s2\">var</span><span class=\"s1\"> conn = </span><span class=\"s3\">new</span><span class=\"s1\"> WebSocket</span><span class=\"s4\">(</span><span class=\"s5\">\'ws://localhost:8080/echo\'</span><span class=\"s4\">)</span><span class=\"s1\">;</span></p>\r\n<p class=\"p3\"><span class=\"s5\">conn</span><span class=\"s4\">.</span><span class=\"s5\">onopen = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s2\">{</span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">   </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">   </span>conn</span><span class=\"s4\">.</span><span class=\"s5\">send</span><span class=\"s4\">(</span><span class=\"s7\">\'I am listening\'</span><span class=\"s4\">)</span><span class=\"s5\"> ;</span></p>\r\n<p class=\"p3\"><span class=\"s3\">    </span><span class=\"s5\"> conn</span><span class=\"s4\">.</span><span class=\"s5\">onmessage = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s5\">e</span><span class=\"s4\">)</span> <span class=\"s2\">{</span></p>\r\n<p class=\"p3\"><span class=\"s5\">             console</span><span class=\"s4\">.</span><span class=\"s5\">log</span><span class=\"s4\">(</span><span class=\"s5\">e</span><span class=\"s4\">.</span><span class=\"s5\">data</span><span class=\"s4\">)</span><span class=\"s5\">; </span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">   </span></span><span class=\"s2\">}</span><span class=\"s5\">;</span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s5\"><span class=\"Apple-converted-space\"> </span>conn</span><span class=\"s4\">.</span><span class=\"s5\">onclose = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s2\">{</span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">      </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">       </span>console</span><span class=\"s4\">.</span><span class=\"s5\">log</span><span class=\"s4\">(</span><span class=\"s7\">\"closing\"</span><span class=\"s5\">,</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span>;</span></p>\r\n<p class=\"p3\"><span class=\"s5\"><span class=\"Apple-converted-space\">     </span></span><span class=\"s2\">}</span></p>\r\n\r\n<pre class=\"default prettyprint prettyprinted\"><code><span class=\"pln\">  conn</span><span class=\"pun\">.</span><span class=\"pln\">onerror </span><span class=\"pun\">=</span> <span class=\"kwd\">function</span> <span class=\"pun\">(</span><span class=\"pln\">evt</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\r\n       console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">\"ERR: \"</span> <span class=\"pun\">+</span><span class=\"pln\"> evt</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">);</span>\r\n  <span class=\"pun\">};</span>\r\n</code></pre>\r\n<p class=\"p3\"><span class=\"s2\">}</span></p>\r\nWebSocket对象一共支持四种消息事件 onopen, onmessage, onclose和onerror，\r\n\r\n1.  onopen当Browser和WebSocketServer连接成功后会触发onopen消息，这也就是为什么其他的方法都放在onopen内部的原因，只有在连接建立之后，才开始send数据，监听信息。\r\n\r\n2. 如果连接失败，发送、接收数据失败或者处理数据出现错误，browser会触发onerror消息;\r\n<div>3.当Browser接收到WebSocketServer发送过来的数据时，就会触发onmessage消息，参数evt中包含server传输过来的数据;</div>\r\n4.当Browser接收到WebSocketServer端发送的关闭连接请求时，就会触发onclose消息。\r\n\r\n所以上面一段代码的意思，就是首先声明一个conn的websocket对象，然后在建立连接之后，监听三种消息事件，关闭，错误，和接收到消息，send标明了主动和服务器通信的时候 的方法，','websocket 入门','','publish','open','open','','websocket-%e5%85%a5%e9%97%a8','','','2015-03-11 16:36:20','2015-03-11 16:36:20','',0,'http://unasm.sinaapp.com/?p=189',0,'post','',0),(190,1,'2015-03-11 16:23:50','2015-03-11 16:23:50','<p class=\"p1\"><span class=\"s2\">var</span><span class=\"s1\"> conn = </span><span class=\"s3\">new</span><span class=\"s1\"> WebSocket</span><span class=\"s4\">(</span><span class=\"s5\">\'ws://localhost:8080/echo\'</span><span class=\"s4\">)</span><span class=\"s1\">;</span></p>\r\n<p class=\"p1\"><span class=\"s5\"> //var conn = new WebSocket(\'ws://localhost:8080/echo\');</span></p>\r\n<p class=\"p3\"><span class=\"s5\"><span class=\"Apple-converted-space\">     </span>conn</span><span class=\"s4\">.</span><span class=\"s5\">onopen = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s2\">{</span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">   </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">   </span>conn</span><span class=\"s4\">.</span><span class=\"s5\">send</span><span class=\"s4\">(</span><span class=\"s7\">\'I am listening\'</span><span class=\"s4\">)</span><span class=\"s5\"> ;</span></p>\r\n<p class=\"p3\"><span class=\"s3\">    </span><span class=\"s5\"> conn</span><span class=\"s4\">.</span><span class=\"s5\">onmessage = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s5\">e</span><span class=\"s4\">)</span> <span class=\"s2\">{</span></p>\r\n<p class=\"p3\"><span class=\"s5\">             console</span><span class=\"s4\">.</span><span class=\"s5\">log</span><span class=\"s4\">(</span><span class=\"s5\">e</span><span class=\"s4\">.</span><span class=\"s5\">data</span><span class=\"s4\">)</span><span class=\"s5\">; </span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">   </span></span><span class=\"s2\">}</span><span class=\"s5\">;</span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s5\"><span class=\"Apple-converted-space\"> </span>conn</span><span class=\"s4\">.</span><span class=\"s5\">onclose = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s2\">{</span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">      </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">       </span>console</span><span class=\"s4\">.</span><span class=\"s5\">log</span><span class=\"s4\">(</span><span class=\"s7\">\"closing\"</span><span class=\"s5\">,</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span>;</span></p>\r\n<p class=\"p3\"><span class=\"s5\"><span class=\"Apple-converted-space\">     </span></span><span class=\"s2\">}</span></p>\r\n\r\n<pre class=\"default prettyprint prettyprinted\"><code><span class=\"pln\">  conn</span><span class=\"pun\">.</span><span class=\"pln\">onerror </span><span class=\"pun\">=</span> <span class=\"kwd\">function</span> <span class=\"pun\">(</span><span class=\"pln\">evt</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\r\n       console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">\"ERR: \"</span> <span class=\"pun\">+</span><span class=\"pln\"> evt</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">);</span>\r\n  <span class=\"pun\">};</span>\r\n</code></pre>\r\n<p class=\"p3\"></p>\r\n<p class=\"p3\"><span class=\"s2\">}</span></p>\r\nWebSocket对象一共支持四个消息 onopen, onmessage, onclose和onerror，\r\n\r\n我们可以看出所有的操作都是采用消息的方式触发的，这样就不会阻塞UI，使得UI有更快的响应时间，得到更好的用户体验。\r\n\r\n1.  当Browser和WebSocketServer连接成功后，会触发onopen消息,这也就是为什么其他的方法都放在onopen内部的原因，只有在连接建立之后，才开始send数据，监听信息。\r\n\r\n2. 如果连接失败，发送、接收数据失败或者处理数据出现错误，browser会触发onerror消息;\r\n<div>3.当Browser接收到WebSocketServer发送过来的数据时，就会触发onmessage消息，参数evt中包含server传输过来的数据;</div>\r\n4.当Browser接收到WebSocketServer端发送的关闭连接请求时，就会触发onclose消息。','websocket 入门','','inherit','open','open','','189-revision-v1','','','2015-03-11 16:23:50','2015-03-11 16:23:50','',189,'http://unasm.sinaapp.com/?p=190',0,'revision','',0),(191,1,'2015-03-11 16:36:16','2015-03-11 16:36:16','<p class=\"p1\"><span class=\"s2\">var</span><span class=\"s1\"> conn = </span><span class=\"s3\">new</span><span class=\"s1\"> WebSocket</span><span class=\"s4\">(</span><span class=\"s5\">\'ws://localhost:8080/echo\'</span><span class=\"s4\">)</span><span class=\"s1\">;</span></p>\n<p class=\"p3\"><span class=\"s5\">conn</span><span class=\"s4\">.</span><span class=\"s5\">onopen = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s2\">{</span></p>\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">   </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">   </span>conn</span><span class=\"s4\">.</span><span class=\"s5\">send</span><span class=\"s4\">(</span><span class=\"s7\">\'I am listening\'</span><span class=\"s4\">)</span><span class=\"s5\"> ;</span></p>\n<p class=\"p3\"><span class=\"s3\">    </span><span class=\"s5\"> conn</span><span class=\"s4\">.</span><span class=\"s5\">onmessage = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s5\">e</span><span class=\"s4\">)</span> <span class=\"s2\">{</span></p>\n<p class=\"p3\"><span class=\"s5\">             console</span><span class=\"s4\">.</span><span class=\"s5\">log</span><span class=\"s4\">(</span><span class=\"s5\">e</span><span class=\"s4\">.</span><span class=\"s5\">data</span><span class=\"s4\">)</span><span class=\"s5\">; </span></p>\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">   </span></span><span class=\"s2\">}</span><span class=\"s5\">;</span></p>\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s5\"><span class=\"Apple-converted-space\"> </span>conn</span><span class=\"s4\">.</span><span class=\"s5\">onclose = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s2\">{</span></p>\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">      </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">       </span>console</span><span class=\"s4\">.</span><span class=\"s5\">log</span><span class=\"s4\">(</span><span class=\"s7\">\"closing\"</span><span class=\"s5\">,</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span>;</span></p>\n<p class=\"p3\"><span class=\"s5\"><span class=\"Apple-converted-space\">     </span></span><span class=\"s2\">}</span></p>\n\n<pre class=\"default prettyprint prettyprinted\"><code><span class=\"pln\">  conn</span><span class=\"pun\">.</span><span class=\"pln\">onerror </span><span class=\"pun\">=</span> <span class=\"kwd\">function</span> <span class=\"pun\">(</span><span class=\"pln\">evt</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n       console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">\"ERR: \"</span> <span class=\"pun\">+</span><span class=\"pln\"> evt</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">);</span>\n  <span class=\"pun\">};</span>\n</code></pre>\n<p class=\"p3\"><span class=\"s2\">}</span></p>\nWebSocket对象一共支持四种消息事件 onopen, onmessage, onclose和onerror，\n\n1.  onopen当Browser和WebSocketServer连接成功后会触发onopen消息，这也就是为什么其他的方法都放在onopen内部的原因，只有在连接建立之后，才开始send数据，监听信息。\n\n2. 如果连接失败，发送、接收数据失败或者处理数据出现错误，browser会触发onerror消息;\n<div>3.当Browser接收到WebSocketServer发送过来的数据时，就会触发onmessage消息，参数evt中包含server传输过来的数据;</div>\n4.当Browser接收到WebSocketServer端发送的关闭连接请求时，就会触发onclose消息。\n\n所以上面一段代码的意思，就是首先声明一个conn的websocket对象，然后在建立连接之后，监听三种消息事件，关闭，错误，和接收到消息，send标明了主动和服务器通信的时候 的方法，','websocket 入门','','inherit','open','open','','189-autosave-v1','','','2015-03-11 16:36:16','2015-03-11 16:36:16','',189,'http://unasm.sinaapp.com/?p=191',0,'revision','',0),(194,1,'2015-03-11 16:36:20','2015-03-11 16:36:20','<p class=\"p1\"><span class=\"s2\">var</span><span class=\"s1\"> conn = </span><span class=\"s3\">new</span><span class=\"s1\"> WebSocket</span><span class=\"s4\">(</span><span class=\"s5\">\'ws://localhost:8080/echo\'</span><span class=\"s4\">)</span><span class=\"s1\">;</span></p>\r\n<p class=\"p3\"><span class=\"s5\">conn</span><span class=\"s4\">.</span><span class=\"s5\">onopen = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s2\">{</span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">   </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">   </span>conn</span><span class=\"s4\">.</span><span class=\"s5\">send</span><span class=\"s4\">(</span><span class=\"s7\">\'I am listening\'</span><span class=\"s4\">)</span><span class=\"s5\"> ;</span></p>\r\n<p class=\"p3\"><span class=\"s3\">    </span><span class=\"s5\"> conn</span><span class=\"s4\">.</span><span class=\"s5\">onmessage = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s5\">e</span><span class=\"s4\">)</span> <span class=\"s2\">{</span></p>\r\n<p class=\"p3\"><span class=\"s5\">             console</span><span class=\"s4\">.</span><span class=\"s5\">log</span><span class=\"s4\">(</span><span class=\"s5\">e</span><span class=\"s4\">.</span><span class=\"s5\">data</span><span class=\"s4\">)</span><span class=\"s5\">; </span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">   </span></span><span class=\"s2\">}</span><span class=\"s5\">;</span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s5\"><span class=\"Apple-converted-space\"> </span>conn</span><span class=\"s4\">.</span><span class=\"s5\">onclose = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s2\">{</span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">      </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">       </span>console</span><span class=\"s4\">.</span><span class=\"s5\">log</span><span class=\"s4\">(</span><span class=\"s7\">\"closing\"</span><span class=\"s5\">,</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span>;</span></p>\r\n<p class=\"p3\"><span class=\"s5\"><span class=\"Apple-converted-space\">     </span></span><span class=\"s2\">}</span></p>\r\n\r\n<pre class=\"default prettyprint prettyprinted\"><code><span class=\"pln\">  conn</span><span class=\"pun\">.</span><span class=\"pln\">onerror </span><span class=\"pun\">=</span> <span class=\"kwd\">function</span> <span class=\"pun\">(</span><span class=\"pln\">evt</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\r\n       console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">\"ERR: \"</span> <span class=\"pun\">+</span><span class=\"pln\"> evt</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">);</span>\r\n  <span class=\"pun\">};</span>\r\n</code></pre>\r\n<p class=\"p3\"><span class=\"s2\">}</span></p>\r\nWebSocket对象一共支持四种消息事件 onopen, onmessage, onclose和onerror，\r\n\r\n1.  onopen当Browser和WebSocketServer连接成功后会触发onopen消息，这也就是为什么其他的方法都放在onopen内部的原因，只有在连接建立之后，才开始send数据，监听信息。\r\n\r\n2. 如果连接失败，发送、接收数据失败或者处理数据出现错误，browser会触发onerror消息;\r\n<div>3.当Browser接收到WebSocketServer发送过来的数据时，就会触发onmessage消息，参数evt中包含server传输过来的数据;</div>\r\n4.当Browser接收到WebSocketServer端发送的关闭连接请求时，就会触发onclose消息。\r\n\r\n所以上面一段代码的意思，就是首先声明一个conn的websocket对象，然后在建立连接之后，监听三种消息事件，关闭，错误，和接收到消息，send标明了主动和服务器通信的时候 的方法，','websocket 入门','','inherit','open','open','','189-revision-v1','','','2015-03-11 16:36:20','2015-03-11 16:36:20','',189,'http://unasm.sinaapp.com/?p=194',0,'revision','',0),(193,1,'2015-03-11 16:34:38','2015-03-11 16:34:38','<p class=\"p1\"><span class=\"s2\">var</span><span class=\"s1\"> conn = </span><span class=\"s3\">new</span><span class=\"s1\"> WebSocket</span><span class=\"s4\">(</span><span class=\"s5\">\'ws://localhost:8080/echo\'</span><span class=\"s4\">)</span><span class=\"s1\">;</span></p>\r\n<p class=\"p3\"><span class=\"s5\">conn</span><span class=\"s4\">.</span><span class=\"s5\">onopen = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s2\">{</span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">   </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">   </span>conn</span><span class=\"s4\">.</span><span class=\"s5\">send</span><span class=\"s4\">(</span><span class=\"s7\">\'I am listening\'</span><span class=\"s4\">)</span><span class=\"s5\"> ;</span></p>\r\n<p class=\"p3\"><span class=\"s3\">    </span><span class=\"s5\"> conn</span><span class=\"s4\">.</span><span class=\"s5\">onmessage = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s5\">e</span><span class=\"s4\">)</span> <span class=\"s2\">{</span></p>\r\n<p class=\"p3\"><span class=\"s5\">             console</span><span class=\"s4\">.</span><span class=\"s5\">log</span><span class=\"s4\">(</span><span class=\"s5\">e</span><span class=\"s4\">.</span><span class=\"s5\">data</span><span class=\"s4\">)</span><span class=\"s5\">; </span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">   </span></span><span class=\"s2\">}</span><span class=\"s5\">;</span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s5\"><span class=\"Apple-converted-space\"> </span>conn</span><span class=\"s4\">.</span><span class=\"s5\">onclose = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s2\">{</span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">      </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">       </span>console</span><span class=\"s4\">.</span><span class=\"s5\">log</span><span class=\"s4\">(</span><span class=\"s7\">\"closing\"</span><span class=\"s5\">,</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span>;</span></p>\r\n<p class=\"p3\"><span class=\"s5\"><span class=\"Apple-converted-space\">     </span></span><span class=\"s2\">}</span></p>\r\n\r\n<pre class=\"default prettyprint prettyprinted\"><code><span class=\"pln\">  conn</span><span class=\"pun\">.</span><span class=\"pln\">onerror </span><span class=\"pun\">=</span> <span class=\"kwd\">function</span> <span class=\"pun\">(</span><span class=\"pln\">evt</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\r\n       console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">\"ERR: \"</span> <span class=\"pun\">+</span><span class=\"pln\"> evt</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">);</span>\r\n  <span class=\"pun\">};</span>\r\n</code></pre>\r\n<p class=\"p3\"><span class=\"s2\">}</span></p>\r\nWebSocket对象一共支持四个消息 onopen, onmessage, onclose和onerror，\r\n\r\n我们可以看出所有的操作都是采用消息的方式触发的，这样就不会阻塞UI，使得UI有更快的响应时间，得到更好的用户体验。\r\n\r\n1.  当Browser和WebSocketServer连接成功后，会触发onopen消息,这也就是为什么其他的方法都放在onopen内部的原因，只有在连接建立之后，才开始send数据，监听信息。\r\n\r\n2. 如果连接失败，发送、接收数据失败或者处理数据出现错误，browser会触发onerror消息;\r\n<div>3.当Browser接收到WebSocketServer发送过来的数据时，就会触发onmessage消息，参数evt中包含server传输过来的数据;</div>\r\n4.当Browser接收到WebSocketServer端发送的关闭连接请求时，就会触发onclose消息。\r\n\r\n所以上面一段代码的意思，就是首先声明一个conn的websocket对象，然后在建立连接之后，监听三种消息事件，关闭，错误，和接收到消息，send标明了主动和服务器通信的时候 的方法，','websocket 入门','','inherit','open','open','','189-revision-v1','','','2015-03-11 16:34:38','2015-03-11 16:34:38','',189,'http://unasm.sinaapp.com/?p=193',0,'revision','',0),(192,1,'2015-03-11 16:32:14','2015-03-11 16:32:14','<p class=\"p1\"><span class=\"s2\">var</span><span class=\"s1\"> conn = </span><span class=\"s3\">new</span><span class=\"s1\"> WebSocket</span><span class=\"s4\">(</span><span class=\"s5\">\'ws://localhost:8080/echo\'</span><span class=\"s4\">)</span><span class=\"s1\">;</span></p>\r\n<p class=\"p1\"><span class=\"s5\"> //var conn = new WebSocket(\'ws://localhost:8080/echo\');</span></p>\r\n<p class=\"p3\"><span class=\"s5\">conn</span><span class=\"s4\">.</span><span class=\"s5\">onopen = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s2\">{</span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">   </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">   </span>conn</span><span class=\"s4\">.</span><span class=\"s5\">send</span><span class=\"s4\">(</span><span class=\"s7\">\'I am listening\'</span><span class=\"s4\">)</span><span class=\"s5\"> ;</span></p>\r\n<p class=\"p3\"><span class=\"s3\">    </span><span class=\"s5\"> conn</span><span class=\"s4\">.</span><span class=\"s5\">onmessage = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s5\">e</span><span class=\"s4\">)</span> <span class=\"s2\">{</span></p>\r\n<p class=\"p3\"><span class=\"s5\">             console</span><span class=\"s4\">.</span><span class=\"s5\">log</span><span class=\"s4\">(</span><span class=\"s5\">e</span><span class=\"s4\">.</span><span class=\"s5\">data</span><span class=\"s4\">)</span><span class=\"s5\">; </span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">   </span></span><span class=\"s2\">}</span><span class=\"s5\">;</span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s5\"><span class=\"Apple-converted-space\"> </span>conn</span><span class=\"s4\">.</span><span class=\"s5\">onclose = </span><span class=\"s2\">function</span><span class=\"s4\">(</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s2\">{</span></p>\r\n<p class=\"p3\"><span class=\"s3\"><span class=\"Apple-converted-space\">      </span></span><span class=\"s5\"><span class=\"Apple-converted-space\">       </span>console</span><span class=\"s4\">.</span><span class=\"s5\">log</span><span class=\"s4\">(</span><span class=\"s7\">\"closing\"</span><span class=\"s5\">,</span><span class=\"s3\">event</span><span class=\"s4\">)</span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span>;</span></p>\r\n<p class=\"p3\"><span class=\"s5\"><span class=\"Apple-converted-space\">     </span></span><span class=\"s2\">}</span></p>\r\n\r\n<pre class=\"default prettyprint prettyprinted\"><code><span class=\"pln\">  conn</span><span class=\"pun\">.</span><span class=\"pln\">onerror </span><span class=\"pun\">=</span> <span class=\"kwd\">function</span> <span class=\"pun\">(</span><span class=\"pln\">evt</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\r\n       console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">\"ERR: \"</span> <span class=\"pun\">+</span><span class=\"pln\"> evt</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">);</span>\r\n  <span class=\"pun\">};</span>\r\n</code></pre>\r\n<p class=\"p3\"><span class=\"s2\">}</span></p>\r\nWebSocket对象一共支持四个消息 onopen, onmessage, onclose和onerror，\r\n\r\n我们可以看出所有的操作都是采用消息的方式触发的，这样就不会阻塞UI，使得UI有更快的响应时间，得到更好的用户体验。\r\n\r\n1.  当Browser和WebSocketServer连接成功后，会触发onopen消息,这也就是为什么其他的方法都放在onopen内部的原因，只有在连接建立之后，才开始send数据，监听信息。\r\n\r\n2. 如果连接失败，发送、接收数据失败或者处理数据出现错误，browser会触发onerror消息;\r\n<div>3.当Browser接收到WebSocketServer发送过来的数据时，就会触发onmessage消息，参数evt中包含server传输过来的数据;</div>\r\n4.当Browser接收到WebSocketServer端发送的关闭连接请求时，就会触发onclose消息。\r\n\r\n所以上面一段代码的意思，就是首先声明一个conn的websocket对象，然后在建立连接之后，监听三种消息事件，关闭，错误，和接收到消息，send标明了主动和服务器通信的时候 的方法，','websocket 入门','','inherit','open','open','','189-revision-v1','','','2015-03-11 16:32:14','2015-03-11 16:32:14','',189,'http://unasm.sinaapp.com/?p=192',0,'revision','',0),(195,1,'2015-03-12 09:37:02','2015-03-12 09:37:02','1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心\r\n\r\n2.检测编码的时候，mb_check_encoding基本是没有用的，检查不出当前的字符串编码格式\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s2\">if</span> <span class=\"s3\">(</span><span class=\"s4\">3</span> <span class=\"s2\">!==</span> <span class=\"s5\">strlen</span><span class=\"s3\">(</span><span class=\"s1\">\'</span><span class=\"s4\">✓</span><span class=\"s1\">\'</span><span class=\"s3\">))</span> <span class=\"s3\">{</span><span class=\"s1\"><span class=\"Apple-converted-space\">                                                                                                                                            </span></span></p>\r\n<p class=\"p2\"><span class=\"s8\"><span class=\"Apple-converted-space\">          </span></span><span class=\"s9\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s8\">throw</span> <span class=\"s11\">new</span><span class=\"s9\"> \\</span><span class=\"s12\">DomainException</span><span class=\"s11\">(</span><span class=\"s9\">\'</span><span class=\"s13\">Bad encoding, length of unicode character ✓ should be 3. Ensure charset UTF-8 and check ini val  mbstring.func_autoload</span><span class=\"s9\">\'</span><span class=\"s11\">)</span><span class=\"s9\">; <span class=\"Apple-converted-space\">         </span></span><span class=\"s13\">    </span> <span class=\"s13\"> </span></p>\r\n<p class=\"p2\"><span class=\"s11\">}</span><span class=\"s13\">                                                                                                                                                                  </span></p>\r\n<p class=\"p2\">这个方法不错，可以判断是不是utf-8编码</p>\r\n<p class=\"p2\">3.php静态变量的问题。奇葩问题。</p>\r\n<p class=\"p2\">   从mc中读取缓存，如果读取次数太多，也会出现效率问题，一个更加优化的办法是保存在静态变量里面，或者是变量里面，这样会得到更高的效率。</p>\r\n<p class=\"p2\">这样做的前提条件是，数据量不能够过大，php的静态变量中不能保存太多的东西，最近遇到一个问题，</p>\r\n<p class=\"p2\">一个数组，长度为9，存储在mc中的，每个变量的长度是一个长度48的数组，如下,其中只有四条是有用的，如果我将这个9 * 48</p>\r\n\r\n<pre>的数组存在静态变量里面，页面是无法显示出来的，如果将长度为48的数组替换成想要的长度为4的数组，就可以毫无压力的显示数据，由此可见静态变量无法保存这个9 * 48 的数组，不过有点奇怪的是，使用 memory_get_usage 测试，耗费内存是2.4mb，不再变化。\r\n\r\n&lt;!--------------------------------------------------------------------------&gt;\r\n实测证明，不是因为静态变量大，将此长度为48数组单独保存，for循环复制给一个静态变量，，发现在循环到1000，程序执行如常，因为担心引用造成的复用，\r\n每次循环中修改数组中的变量，形成数组脏数组，避免php的内部数据引用，结果依旧证明，不是因为静态变量造成的。</pre>\r\n<pre>4.array_merge 的元素中，如果其中有null或者其他，返回结果不是array，而是null</pre>','PHP 的坑','','publish','open','open','','php-%e7%9a%84%e5%9d%91','','','2015-03-23 10:22:55','2015-03-23 10:22:55','',0,'http://unasm.sinaapp.com/?p=195',0,'post','',0),(196,1,'2015-03-12 09:37:02','2015-03-12 09:37:02','1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心','PHP 的坑','','inherit','open','open','','195-revision-v1','','','2015-03-12 09:37:02','2015-03-12 09:37:02','',195,'http://unasm.sinaapp.com/?p=196',0,'revision','',0),(199,1,'2015-03-12 16:47:36','2015-03-12 16:47:36','1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心\r\n\r\n2.检测编码的时候，mb_check_encoding基本是没有用的，检查不出当前的字符串编码格式\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s2\">if</span> <span class=\"s3\">(</span><span class=\"s4\">3</span> <span class=\"s2\">!==</span> <span class=\"s5\">strlen</span><span class=\"s3\">(</span><span class=\"s1\">\'</span><span class=\"s4\">✓</span><span class=\"s1\">\'</span><span class=\"s3\">))</span> <span class=\"s3\">{</span><span class=\"s1\"><span class=\"Apple-converted-space\">                                                                                                                                            </span></span></p>\r\n<p class=\"p2\"><span class=\"s8\"><span class=\"Apple-converted-space\">          </span></span><span class=\"s9\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s8\">throw</span> <span class=\"s11\">new</span><span class=\"s9\"> \\</span><span class=\"s12\">DomainException</span><span class=\"s11\">(</span><span class=\"s9\">\'</span><span class=\"s13\">Bad encoding, length of unicode character ✓ should be 3. Ensure charset UTF-8 and check ini val  mbstring.func_autoload</span><span class=\"s9\">\'</span><span class=\"s11\">)</span><span class=\"s9\">; <span class=\"Apple-converted-space\">         </span></span><span class=\"s13\">    </span> <span class=\"s13\"> </span></p>\r\n<p class=\"p2\"><span class=\"s11\">}</span><span class=\"s13\">                                                                                                                                                                  </span></p>\r\n<p class=\"p2\">这个方法不错，可以判断是不是utf-8编码</p>','PHP 的坑','','inherit','open','open','','195-revision-v1','','','2015-03-12 16:47:36','2015-03-12 16:47:36','',195,'http://unasm.sinaapp.com/?p=199',0,'revision','',0),(200,1,'2015-03-14 07:54:31','2015-03-14 07:54:31','1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心\r\n\r\n2.检测编码的时候，mb_check_encoding基本是没有用的，检查不出当前的字符串编码格式\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s2\">if</span> <span class=\"s3\">(</span><span class=\"s4\">3</span> <span class=\"s2\">!==</span> <span class=\"s5\">strlen</span><span class=\"s3\">(</span><span class=\"s1\">\'</span><span class=\"s4\">✓</span><span class=\"s1\">\'</span><span class=\"s3\">))</span> <span class=\"s3\">{</span><span class=\"s1\"><span class=\"Apple-converted-space\">                                                                                                                                            </span></span></p>\r\n<p class=\"p2\"><span class=\"s8\"><span class=\"Apple-converted-space\">          </span></span><span class=\"s9\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s8\">throw</span> <span class=\"s11\">new</span><span class=\"s9\"> \\</span><span class=\"s12\">DomainException</span><span class=\"s11\">(</span><span class=\"s9\">\'</span><span class=\"s13\">Bad encoding, length of unicode character ✓ should be 3. Ensure charset UTF-8 and check ini val  mbstring.func_autoload</span><span class=\"s9\">\'</span><span class=\"s11\">)</span><span class=\"s9\">; <span class=\"Apple-converted-space\">         </span></span><span class=\"s13\">    </span> <span class=\"s13\"> </span></p>\r\n<p class=\"p2\"><span class=\"s11\">}</span><span class=\"s13\">                                                                                                                                                                  </span></p>\r\n<p class=\"p2\">这个方法不错，可以判断是不是utf-8编码</p>\r\n<p class=\"p2\">3.php静态变量的问题。</p>\r\n<p class=\"p2\">   从mc中读取缓存，如果读取次数太多，也会出现效率问题，一个更加优化的办法是保存在静态变量里面，或者是变量里面，这样会得到更高的效率。</p>\r\n<p class=\"p2\">这样做的前提条件是，数据量不能够过大，php的静态变量中不能保存太多的东西，最近遇到一个问题，</p>\r\n<p class=\"p2\">一个数组，长度为9，存储在mc中的，每个变量的长度是一个长度48的数组，如下,其中只有四条是有用的，如果我将这个9 * 48</p>\r\n\r\n<pre>的数组存在静态变量里面，页面是无法显示出来的，如果将长度为48的数组替换成想要的长度为4的数组，就可以毫无压力的显示数据，由此可见静态变量无法保存这个9 * 48 的数组，\r\narray(48) {\r\n  [\"id\"]=&gt;\r\n  int(2940866463)\r\n  [\"idstr\"]=&gt;\r\n  string(10) \"2940866463\"\r\n  [\"class\"]=&gt;\r\n  int(1)\r\n  [\"screen_name\"]=&gt;\r\n  string(30) \"testtesttesttesttesttesttestte\"\r\n  [\"name\"]=&gt;\r\n  string(30) \"testtesttesttesttesttesttestte\"\r\n  [\"province\"]=&gt;\r\n  string(3) \"400\"\r\n  [\"city\"]=&gt;\r\n  string(1) \"5\"\r\n  [\"location\"]=&gt;\r\n  string(16) \"海外 加拿大\"\r\n  [\"description\"]=&gt;\r\n  string(15) \"曾经的曾经\"\r\n  [\"url\"]=&gt;\r\n  string(0) \"\"\r\n  [\"profile_image_url\"]=&gt;\r\n  string(48) \"http://tp4.sinaimg.cn/2940866463/50/5647849369/0\"\r\n  [\"profile_url\"]=&gt;\r\n  string(12) \"u/2940866463\"\r\n  [\"domain\"]=&gt;\r\n  string(0) \"\"\r\n  [\"weihao\"]=&gt;\r\n  string(0) \"\"\r\n  [\"gender\"]=&gt;\r\n  string(1) \"f\"\r\n  [\"followers_count\"]=&gt;\r\n  int(157)\r\n  [\"friends_count\"]=&gt;\r\n  int(86)\r\n  [\"pagefriends_count\"]=&gt;\r\n  int(0)\r\n  [\"statuses_count\"]=&gt;\r\n  int(724)\r\n  [\"favourites_count\"]=&gt;\r\n  int(87)\r\n  [\"created_at\"]=&gt;\r\n  string(30) \"Fri Sep 07 09:58:19 +0800 2012\"\r\n  [\"following\"]=&gt;\r\n  bool(false)\r\n  [\"allow_all_act_msg\"]=&gt;\r\n  bool(false)\r\n  [\"geo_enabled\"]=&gt;\r\n  bool(true)\r\n  [\"verified\"]=&gt;\r\n  bool(false)\r\n  [\"verified_type\"]=&gt;\r\n  int(-1)\r\n  [\"remark\"]=&gt;\r\n  string(0) \"\"\r\n  [\"status\"]=&gt;\r\n  array(21) {\r\n    [\"created_at\"]=&gt;\r\n    string(30) \"Fri Mar 13 16:37:03 +0800 2015\"\r\n    [\"id\"]=&gt;\r\n    int(3819972268604590)\r\n    [\"mid\"]=&gt;\r\n    string(16) \"3819972268604590\"\r\n    [\"idstr\"]=&gt;\r\n    string(16) \"3819972268604590\"\r\n    [\"text\"]=&gt;\r\n    string(17) \"#新浪观影团#\"\r\n    [\"source_allowclick\"]=&gt;\r\n    int(0)\r\n    [\"source_type\"]=&gt;\r\n    int(1)\r\n    [\"source\"]=&gt;\r\n    string(63) \"<a href=\"http://weibo.com/\" rel=\"nofollow\">微博 weibo.com</a>\"\r\n    [\"favorited\"]=&gt;\r\n    bool(false)\r\n    [\"truncated\"]=&gt;\r\n    bool(false)\r\n    [\"in_reply_to_status_id\"]=&gt;\r\n    string(0) \"\"\r\n    [\"in_reply_to_user_id\"]=&gt;\r\n    string(0) \"\"\r\n    [\"in_reply_to_screen_name\"]=&gt;\r\n    string(0) \"\"\r\n    [\"pic_ids\"]=&gt;\r\n    array(0) {\r\n    }\r\n    [\"geo\"]=&gt;\r\n    NULL\r\n    [\"reposts_count\"]=&gt;\r\n    int(0)\r\n    [\"comments_count\"]=&gt;\r\n    int(0)\r\n    [\"attitudes_count\"]=&gt;\r\n    int(0)\r\n    [\"mlevel\"]=&gt;\r\n    int(0)\r\n    [\"visible\"]=&gt;\r\n    array(2) {\r\n      [\"type\"]=&gt;\r\n      int(0)\r\n      [\"list_id\"]=&gt;\r\n      int(0)\r\n    }\r\n    [\"darwin_tags\"]=&gt;\r\n    array(0) {\r\n    }\r\n  }\r\n  [\"ptype\"]=&gt;\r\n  int(0)\r\n  [\"allow_all_comment\"]=&gt;\r\n  bool(false)\r\n  [\"avatar_large\"]=&gt;\r\n  string(49) \"http://tp4.sinaimg.cn/2940866463/180/5647849369/0\"\r\n  [\"avatar_hd\"]=&gt;\r\n  string(49) \"http://tp4.sinaimg.cn/2940866463/180/5647849369/0\"\r\n  [\"verified_reason\"]=&gt;\r\n  string(0) \"\"\r\n  [\"verified_trade\"]=&gt;\r\n  string(0) \"\"\r\n  [\"verified_reason_url\"]=&gt;\r\n  string(0) \"\"\r\n  [\"verified_source\"]=&gt;\r\n  string(0) \"\"\r\n  [\"verified_source_url\"]=&gt;\r\n  string(0) \"\"\r\n  [\"follow_me\"]=&gt;\r\n  bool(false)\r\n  [\"online_status\"]=&gt;\r\n  int(0)\r\n  [\"bi_followers_count\"]=&gt;\r\n  int(6)\r\n  [\"lang\"]=&gt;\r\n  string(5) \"zh-cn\"\r\n  [\"star\"]=&gt;\r\n  int(0)\r\n  [\"mbtype\"]=&gt;\r\n  int(0)\r\n  [\"mbrank\"]=&gt;\r\n  int(0)\r\n  [\"block_word\"]=&gt;\r\n  int(0)\r\n  [\"block_app\"]=&gt;\r\n  int(0)\r\n  [\"credit_score\"]=&gt;\r\n  int(80)\r\n  [\"urank\"]=&gt;\r\n  int(8)\r\n}</pre>','PHP 的坑','','inherit','open','open','','195-revision-v1','','','2015-03-14 07:54:31','2015-03-14 07:54:31','',195,'http://unasm.sinaapp.com/?p=200',0,'revision','',0),(225,1,'2015-03-26 06:47:13','2015-03-26 06:47:13','<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">   </span>upstream websocket {<span class=\"Apple-converted-space\">             </span></span> <span class=\"s1\"><span class=\"Apple-converted-space\">                              </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                                      </span></span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">         </span></span><span class=\"s6\">#负载均衡</span><span class=\"s1\"> <span class=\"Apple-converted-space\">                   </span></span> <span class=\"s1\"><span class=\"Apple-converted-space\">                              </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                                    </span></span></p>\r\n<p class=\"p1\"><span class=\"s1\">          server 127.0.0.1:8030 weight=</span><span class=\"s2\">5</span><span class=\"s1\">;                   </span><span class=\"s4\">                                                                                                  </span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">          </span>server 127.0.0.1:8040 weight=</span><span class=\"s2\">1</span><span class=\"s1\">; <span class=\"Apple-converted-space\">                     </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                        </span></span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span>} <span class=\"Apple-converted-space\">                               </span></span> <span class=\"s1\"><span class=\"Apple-converted-space\">                         </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                                   </span></span></p>\r\n<p class=\"p1\"><span class=\"s1\">server {<span class=\"Apple-converted-space\">                         </span></span> <span class=\"s1\"><span class=\"Apple-converted-space\">                            </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                                      </span></span></p>\r\n<p class=\"p1\"><span class=\"s1\">        listen 8020;<span class=\"Apple-converted-space\">                 </span></span> <span class=\"s1\"><span class=\"Apple-converted-space\">                             </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                                  </span></span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">         </span></span><span class=\"s1\"><span class=\"Apple-converted-space\"> </span>location /chat/ { <span class=\"Apple-converted-space\">           </span></span> <span class=\"s1\"><span class=\"Apple-converted-space\">             </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                                </span></span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>proxy_pass http://web</span><span class=\"s2\">s</span><span class=\"s1\">ocket;<span class=\"Apple-converted-space\">                      </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                                    </span></span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s1\"><span class=\"Apple-converted-space\">        </span></span><span class=\"s6\"># <span class=\"Apple-converted-space\">      </span>proxy_pass http://127</span><span class=\"s2\">.</span><span class=\"s6\">0.0.1:</span><span class=\"s7\">8010</span><span class=\"s6\">;</span><span class=\"s1\"> <span class=\"Apple-converted-space\">           </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                            </span></span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>proxy_http_version 1.</span><span class=\"s2\">1</span><span class=\"s1\">; <span class=\"Apple-converted-space\">                       </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                                    </span></span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>proxy_set_header Upgr</span><span class=\"s2\">a</span><span class=\"s1\">de $http_upgrade; <span class=\"Apple-converted-space\">           </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                          </span></span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>proxy_set_header Conn</span><span class=\"s2\">e</span><span class=\"s1\">ction $connection_upgrade;</span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                             </span></span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>} <span class=\"Apple-converted-space\">                       </span></span> <span class=\"s1\"><span class=\"Apple-converted-space\">                        </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                        </span></span></p>\r\n<p class=\"p2\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s4\">}<span class=\"Apple-converted-space\">                   </span></span></p>\r\n<p class=\"p2\">上面就是一个最简单的负载均衡，</p>\r\n<p class=\"p2\">首先server监听8020端口，然后将请求分发给websocket ，然后socket下面是一个服务器集群，分别是8030和8040端口，两台端口分别独立处理请求，可以称之为8020是一个反向代理，8030,和8040的nodejs服务器，是后端服务器集群。</p>','nginx配置之upstream 案例解释','','publish','open','open','','nginx%e9%85%8d%e7%bd%ae%e4%b9%8bupstream-%e6%a1%88%e4%be%8b%e8%a7%a3%e9%87%8a','','','2015-03-26 06:49:55','2015-03-26 06:49:55','',0,'http://unasm.sinaapp.com/?p=225',0,'post','',0),(201,1,'2015-03-14 08:07:43','2015-03-14 08:07:43','1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心\r\n\r\n2.检测编码的时候，mb_check_encoding基本是没有用的，检查不出当前的字符串编码格式\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s2\">if</span> <span class=\"s3\">(</span><span class=\"s4\">3</span> <span class=\"s2\">!==</span> <span class=\"s5\">strlen</span><span class=\"s3\">(</span><span class=\"s1\">\'</span><span class=\"s4\">✓</span><span class=\"s1\">\'</span><span class=\"s3\">))</span> <span class=\"s3\">{</span><span class=\"s1\"><span class=\"Apple-converted-space\">                                                                                                                                            </span></span></p>\r\n<p class=\"p2\"><span class=\"s8\"><span class=\"Apple-converted-space\">          </span></span><span class=\"s9\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s8\">throw</span> <span class=\"s11\">new</span><span class=\"s9\"> \\</span><span class=\"s12\">DomainException</span><span class=\"s11\">(</span><span class=\"s9\">\'</span><span class=\"s13\">Bad encoding, length of unicode character ✓ should be 3. Ensure charset UTF-8 and check ini val  mbstring.func_autoload</span><span class=\"s9\">\'</span><span class=\"s11\">)</span><span class=\"s9\">; <span class=\"Apple-converted-space\">         </span></span><span class=\"s13\">    </span> <span class=\"s13\"> </span></p>\r\n<p class=\"p2\"><span class=\"s11\">}</span><span class=\"s13\">                                                                                                                                                                  </span></p>\r\n<p class=\"p2\">这个方法不错，可以判断是不是utf-8编码</p>\r\n<p class=\"p2\">3.php静态变量的问题。</p>\r\n<p class=\"p2\">   从mc中读取缓存，如果读取次数太多，也会出现效率问题，一个更加优化的办法是保存在静态变量里面，或者是变量里面，这样会得到更高的效率。</p>\r\n<p class=\"p2\">这样做的前提条件是，数据量不能够过大，php的静态变量中不能保存太多的东西，最近遇到一个问题，</p>\r\n<p class=\"p2\">一个数组，长度为9，存储在mc中的，每个变量的长度是一个长度48的数组，如下,其中只有四条是有用的，如果我将这个9 * 48</p>\r\n\r\n<pre>的数组存在静态变量里面，页面是无法显示出来的，如果将长度为48的数组替换成想要的长度为4的数组，就可以毫无压力的显示数据，由此可见静态变量无法保存这个9 * 48 的数组，不过有点奇怪的是，使用 memory_get_usage 测试，耗费内存是2.4mb，不再变化。</pre>\r\n<pre> array(48) {\r\n  [\"id\"]=&gt;\r\n  int(2940866463)\r\n  [\"idstr\"]=&gt;\r\n  string(10) \"2940866463\"\r\n  [\"class\"]=&gt;\r\n  int(1)\r\n  [\"screen_name\"]=&gt;\r\n  string(30) \"testtesttesttesttesttesttestte\"\r\n  [\"name\"]=&gt;\r\n  string(30) \"testtesttesttesttesttesttestte\"\r\n  [\"province\"]=&gt;\r\n  string(3) \"400\"\r\n  [\"city\"]=&gt;\r\n  string(1) \"5\"\r\n  [\"location\"]=&gt;\r\n  string(16) \"海外 加拿大\"\r\n  [\"description\"]=&gt;\r\n  string(15) \"曾经的曾经\"\r\n  [\"url\"]=&gt;\r\n  string(0) \"\"\r\n  [\"profile_image_url\"]=&gt;\r\n  string(48) \"http://tp4.sinaimg.cn/2940866463/50/5647849369/0\"\r\n  [\"profile_url\"]=&gt;\r\n  string(12) \"u/2940866463\"\r\n  [\"domain\"]=&gt;\r\n  string(0) \"\"\r\n  [\"weihao\"]=&gt;\r\n  string(0) \"\"\r\n  [\"gender\"]=&gt;\r\n  string(1) \"f\"\r\n  [\"followers_count\"]=&gt;\r\n  int(157)\r\n  [\"friends_count\"]=&gt;\r\n  int(86)\r\n  [\"pagefriends_count\"]=&gt;\r\n  int(0)\r\n  [\"statuses_count\"]=&gt;\r\n  int(724)\r\n  [\"favourites_count\"]=&gt;\r\n  int(87)\r\n  [\"created_at\"]=&gt;\r\n  string(30) \"Fri Sep 07 09:58:19 +0800 2012\"\r\n  [\"following\"]=&gt;\r\n  bool(false)\r\n  [\"allow_all_act_msg\"]=&gt;\r\n  bool(false)\r\n  [\"geo_enabled\"]=&gt;\r\n  bool(true)\r\n  [\"verified\"]=&gt;\r\n  bool(false)\r\n  [\"verified_type\"]=&gt;\r\n  int(-1)\r\n  [\"remark\"]=&gt;\r\n  string(0) \"\"\r\n  [\"status\"]=&gt;\r\n  array(21) {\r\n    [\"created_at\"]=&gt;\r\n    string(30) \"Fri Mar 13 16:37:03 +0800 2015\"\r\n    [\"id\"]=&gt;\r\n    int(3819972268604590)\r\n    [\"mid\"]=&gt;\r\n    string(16) \"3819972268604590\"\r\n    [\"idstr\"]=&gt;\r\n    string(16) \"3819972268604590\"\r\n    [\"text\"]=&gt;\r\n    string(17) \"#新浪观影团#\"\r\n    [\"source_allowclick\"]=&gt;\r\n    int(0)\r\n    [\"source_type\"]=&gt;\r\n    int(1)\r\n    [\"source\"]=&gt;\r\n    string(63) \"<a href=\"http://weibo.com/\" rel=\"nofollow\">微博 weibo.com</a>\"\r\n    [\"favorited\"]=&gt;\r\n    bool(false)\r\n    [\"truncated\"]=&gt;\r\n    bool(false)\r\n    [\"in_reply_to_status_id\"]=&gt;\r\n    string(0) \"\"\r\n    [\"in_reply_to_user_id\"]=&gt;\r\n    string(0) \"\"\r\n    [\"in_reply_to_screen_name\"]=&gt;\r\n    string(0) \"\"\r\n    [\"pic_ids\"]=&gt;\r\n    array(0) {\r\n    }\r\n    [\"geo\"]=&gt;\r\n    NULL\r\n    [\"reposts_count\"]=&gt;\r\n    int(0)\r\n    [\"comments_count\"]=&gt;\r\n    int(0)\r\n    [\"attitudes_count\"]=&gt;\r\n    int(0)\r\n    [\"mlevel\"]=&gt;\r\n    int(0)\r\n    [\"visible\"]=&gt;\r\n    array(2) {\r\n      [\"type\"]=&gt;\r\n      int(0)\r\n      [\"list_id\"]=&gt;\r\n      int(0)\r\n    }\r\n    [\"darwin_tags\"]=&gt;\r\n    array(0) {\r\n    }\r\n  }\r\n  [\"ptype\"]=&gt;\r\n  int(0)\r\n  [\"allow_all_comment\"]=&gt;\r\n  bool(false)\r\n  [\"avatar_large\"]=&gt;\r\n  string(49) \"http://tp4.sinaimg.cn/2940866463/180/5647849369/0\"\r\n  [\"avatar_hd\"]=&gt;\r\n  string(49) \"http://tp4.sinaimg.cn/2940866463/180/5647849369/0\"\r\n  [\"verified_reason\"]=&gt;\r\n  string(0) \"\"\r\n  [\"verified_trade\"]=&gt;\r\n  string(0) \"\"\r\n  [\"verified_reason_url\"]=&gt;\r\n  string(0) \"\"\r\n  [\"verified_source\"]=&gt;\r\n  string(0) \"\"\r\n  [\"verified_source_url\"]=&gt;\r\n  string(0) \"\"\r\n  [\"follow_me\"]=&gt;\r\n  bool(false)\r\n  [\"online_status\"]=&gt;\r\n  int(0)\r\n  [\"bi_followers_count\"]=&gt;\r\n  int(6)\r\n  [\"lang\"]=&gt;\r\n  string(5) \"zh-cn\"\r\n  [\"star\"]=&gt;\r\n  int(0)\r\n  [\"mbtype\"]=&gt;\r\n  int(0)\r\n  [\"mbrank\"]=&gt;\r\n  int(0)\r\n  [\"block_word\"]=&gt;\r\n  int(0)\r\n  [\"block_app\"]=&gt;\r\n  int(0)\r\n  [\"credit_score\"]=&gt;\r\n  int(80)\r\n  [\"urank\"]=&gt;\r\n  int(8)\r\n}</pre>','PHP 的坑','','inherit','open','open','','195-revision-v1','','','2015-03-14 08:07:43','2015-03-14 08:07:43','',195,'http://unasm.sinaapp.com/?p=201',0,'revision','',0),(202,1,'2015-03-14 09:24:08','2015-03-14 09:24:08','1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心\r\n\r\n2.检测编码的时候，mb_check_encoding基本是没有用的，检查不出当前的字符串编码格式\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s2\">if</span> <span class=\"s3\">(</span><span class=\"s4\">3</span> <span class=\"s2\">!==</span> <span class=\"s5\">strlen</span><span class=\"s3\">(</span><span class=\"s1\">\'</span><span class=\"s4\">✓</span><span class=\"s1\">\'</span><span class=\"s3\">))</span> <span class=\"s3\">{</span><span class=\"s1\"><span class=\"Apple-converted-space\">                                                                                                                                            </span></span></p>\r\n<p class=\"p2\"><span class=\"s8\"><span class=\"Apple-converted-space\">          </span></span><span class=\"s9\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s8\">throw</span> <span class=\"s11\">new</span><span class=\"s9\"> \\</span><span class=\"s12\">DomainException</span><span class=\"s11\">(</span><span class=\"s9\">\'</span><span class=\"s13\">Bad encoding, length of unicode character ✓ should be 3. Ensure charset UTF-8 and check ini val  mbstring.func_autoload</span><span class=\"s9\">\'</span><span class=\"s11\">)</span><span class=\"s9\">; <span class=\"Apple-converted-space\">         </span></span><span class=\"s13\">    </span> <span class=\"s13\"> </span></p>\r\n<p class=\"p2\"><span class=\"s11\">}</span><span class=\"s13\">                                                                                                                                                                  </span></p>\r\n<p class=\"p2\">这个方法不错，可以判断是不是utf-8编码</p>\r\n<p class=\"p2\">3.php静态变量的问题。</p>\r\n<p class=\"p2\">   从mc中读取缓存，如果读取次数太多，也会出现效率问题，一个更加优化的办法是保存在静态变量里面，或者是变量里面，这样会得到更高的效率。</p>\r\n<p class=\"p2\">这样做的前提条件是，数据量不能够过大，php的静态变量中不能保存太多的东西，最近遇到一个问题，</p>\r\n<p class=\"p2\">一个数组，长度为9，存储在mc中的，每个变量的长度是一个长度48的数组，如下,其中只有四条是有用的，如果我将这个9 * 48</p>\r\n\r\n<pre>的数组存在静态变量里面，页面是无法显示出来的，如果将长度为48的数组替换成想要的长度为4的数组，就可以毫无压力的显示数据，由此可见静态变量无法保存这个9 * 48 的数组，不过有点奇怪的是，使用 memory_get_usage 测试，耗费内存是2.4mb，不再变化。\r\n\r\n&lt;!--------------------------------------------------------------------------&gt;\r\n实测证明，不是因为静态变量大，将此长度为48数组单独保存，for循环复制给一个静态变量，，发现在循环到1000，程序执行如常，因为担心引用造成的复用，\r\n每次循环中修改数组中的变量，形成数组脏数组，避免php的内部数据引用，结果依旧证明，不是因为静态变量造成的。</pre>\r\n<pre> array(48) {\r\n  [\"id\"]=&gt;\r\n  int(2940866463)\r\n  [\"idstr\"]=&gt;\r\n  string(10) \"2940866463\"\r\n  [\"class\"]=&gt;\r\n  int(1)\r\n  [\"screen_name\"]=&gt;\r\n  string(30) \"testtesttesttesttesttesttestte\"\r\n  [\"name\"]=&gt;\r\n  string(30) \"testtesttesttesttesttesttestte\"\r\n  [\"province\"]=&gt;\r\n  string(3) \"400\"\r\n  [\"city\"]=&gt;\r\n  string(1) \"5\"\r\n  [\"location\"]=&gt;\r\n  string(16) \"海外 加拿大\"\r\n  [\"description\"]=&gt;\r\n  string(15) \"曾经的曾经\"\r\n  [\"url\"]=&gt;\r\n  string(0) \"\"\r\n  [\"profile_image_url\"]=&gt;\r\n  string(48) \"http://tp4.sinaimg.cn/2940866463/50/5647849369/0\"\r\n  [\"profile_url\"]=&gt;\r\n  string(12) \"u/2940866463\"\r\n  [\"domain\"]=&gt;\r\n  string(0) \"\"\r\n  [\"weihao\"]=&gt;\r\n  string(0) \"\"\r\n  [\"gender\"]=&gt;\r\n  string(1) \"f\"\r\n  [\"followers_count\"]=&gt;\r\n  int(157)\r\n  [\"friends_count\"]=&gt;\r\n  int(86)\r\n  [\"pagefriends_count\"]=&gt;\r\n  int(0)\r\n  [\"statuses_count\"]=&gt;\r\n  int(724)\r\n  [\"favourites_count\"]=&gt;\r\n  int(87)\r\n  [\"created_at\"]=&gt;\r\n  string(30) \"Fri Sep 07 09:58:19 +0800 2012\"\r\n  [\"following\"]=&gt;\r\n  bool(false)\r\n  [\"allow_all_act_msg\"]=&gt;\r\n  bool(false)\r\n  [\"geo_enabled\"]=&gt;\r\n  bool(true)\r\n  [\"verified\"]=&gt;\r\n  bool(false)\r\n  [\"verified_type\"]=&gt;\r\n  int(-1)\r\n  [\"remark\"]=&gt;\r\n  string(0) \"\"\r\n  [\"status\"]=&gt;\r\n  array(21) {\r\n    [\"created_at\"]=&gt;\r\n    string(30) \"Fri Mar 13 16:37:03 +0800 2015\"\r\n    [\"id\"]=&gt;\r\n    int(3819972268604590)\r\n    [\"mid\"]=&gt;\r\n    string(16) \"3819972268604590\"\r\n    [\"idstr\"]=&gt;\r\n    string(16) \"3819972268604590\"\r\n    [\"text\"]=&gt;\r\n    string(17) \"#新浪观影团#\"\r\n    [\"source_allowclick\"]=&gt;\r\n    int(0)\r\n    [\"source_type\"]=&gt;\r\n    int(1)\r\n    [\"source\"]=&gt;\r\n    string(63) \"<a href=\"http://weibo.com/\" rel=\"nofollow\">微博 weibo.com</a>\"\r\n    [\"favorited\"]=&gt;\r\n    bool(false)\r\n    [\"truncated\"]=&gt;\r\n    bool(false)\r\n    [\"in_reply_to_status_id\"]=&gt;\r\n    string(0) \"\"\r\n    [\"in_reply_to_user_id\"]=&gt;\r\n    string(0) \"\"\r\n    [\"in_reply_to_screen_name\"]=&gt;\r\n    string(0) \"\"\r\n    [\"pic_ids\"]=&gt;\r\n    array(0) {\r\n    }\r\n    [\"geo\"]=&gt;\r\n    NULL\r\n    [\"reposts_count\"]=&gt;\r\n    int(0)\r\n    [\"comments_count\"]=&gt;\r\n    int(0)\r\n    [\"attitudes_count\"]=&gt;\r\n    int(0)\r\n    [\"mlevel\"]=&gt;\r\n    int(0)\r\n    [\"visible\"]=&gt;\r\n    array(2) {\r\n      [\"type\"]=&gt;\r\n      int(0)\r\n      [\"list_id\"]=&gt;\r\n      int(0)\r\n    }\r\n    [\"darwin_tags\"]=&gt;\r\n    array(0) {\r\n    }\r\n  }\r\n  [\"ptype\"]=&gt;\r\n  int(0)\r\n  [\"allow_all_comment\"]=&gt;\r\n  bool(false)\r\n  [\"avatar_large\"]=&gt;\r\n  string(49) \"http://tp4.sinaimg.cn/2940866463/180/5647849369/0\"\r\n  [\"avatar_hd\"]=&gt;\r\n  string(49) \"http://tp4.sinaimg.cn/2940866463/180/5647849369/0\"\r\n  [\"verified_reason\"]=&gt;\r\n  string(0) \"\"\r\n  [\"verified_trade\"]=&gt;\r\n  string(0) \"\"\r\n  [\"verified_reason_url\"]=&gt;\r\n  string(0) \"\"\r\n  [\"verified_source\"]=&gt;\r\n  string(0) \"\"\r\n  [\"verified_source_url\"]=&gt;\r\n  string(0) \"\"\r\n  [\"follow_me\"]=&gt;\r\n  bool(false)\r\n  [\"online_status\"]=&gt;\r\n  int(0)\r\n  [\"bi_followers_count\"]=&gt;\r\n  int(6)\r\n  [\"lang\"]=&gt;\r\n  string(5) \"zh-cn\"\r\n  [\"star\"]=&gt;\r\n  int(0)\r\n  [\"mbtype\"]=&gt;\r\n  int(0)\r\n  [\"mbrank\"]=&gt;\r\n  int(0)\r\n  [\"block_word\"]=&gt;\r\n  int(0)\r\n  [\"block_app\"]=&gt;\r\n  int(0)\r\n  [\"credit_score\"]=&gt;\r\n  int(80)\r\n  [\"urank\"]=&gt;\r\n  int(8)\r\n}</pre>','PHP 的坑','','inherit','open','open','','195-revision-v1','','','2015-03-14 09:24:08','2015-03-14 09:24:08','',195,'http://unasm.sinaapp.com/?p=202',0,'revision','',0),(224,1,'2015-03-23 10:11:20','2015-03-23 10:11:20','1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心\r\n\r\n2.检测编码的时候，mb_check_encoding基本是没有用的，检查不出当前的字符串编码格式\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s2\">if</span> <span class=\"s3\">(</span><span class=\"s4\">3</span> <span class=\"s2\">!==</span> <span class=\"s5\">strlen</span><span class=\"s3\">(</span><span class=\"s1\">\'</span><span class=\"s4\">✓</span><span class=\"s1\">\'</span><span class=\"s3\">))</span> <span class=\"s3\">{</span><span class=\"s1\"><span class=\"Apple-converted-space\">                                                                                                                                            </span></span></p>\r\n<p class=\"p2\"><span class=\"s8\"><span class=\"Apple-converted-space\">          </span></span><span class=\"s9\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s8\">throw</span> <span class=\"s11\">new</span><span class=\"s9\"> \\</span><span class=\"s12\">DomainException</span><span class=\"s11\">(</span><span class=\"s9\">\'</span><span class=\"s13\">Bad encoding, length of unicode character ✓ should be 3. Ensure charset UTF-8 and check ini val  mbstring.func_autoload</span><span class=\"s9\">\'</span><span class=\"s11\">)</span><span class=\"s9\">; <span class=\"Apple-converted-space\">         </span></span><span class=\"s13\">    </span> <span class=\"s13\"> </span></p>\r\n<p class=\"p2\"><span class=\"s11\">}</span><span class=\"s13\">                                                                                                                                                                  </span></p>\r\n<p class=\"p2\">这个方法不错，可以判断是不是utf-8编码</p>\r\n<p class=\"p2\">3.php静态变量的问题。奇葩问题。</p>\r\n<p class=\"p2\">   从mc中读取缓存，如果读取次数太多，也会出现效率问题，一个更加优化的办法是保存在静态变量里面，或者是变量里面，这样会得到更高的效率。</p>\r\n<p class=\"p2\">这样做的前提条件是，数据量不能够过大，php的静态变量中不能保存太多的东西，最近遇到一个问题，</p>\r\n<p class=\"p2\">一个数组，长度为9，存储在mc中的，每个变量的长度是一个长度48的数组，如下,其中只有四条是有用的，如果我将这个9 * 48</p>\r\n\r\n<pre>的数组存在静态变量里面，页面是无法显示出来的，如果将长度为48的数组替换成想要的长度为4的数组，就可以毫无压力的显示数据，由此可见静态变量无法保存这个9 * 48 的数组，不过有点奇怪的是，使用 memory_get_usage 测试，耗费内存是2.4mb，不再变化。\r\n\r\n&lt;!--------------------------------------------------------------------------&gt;\r\n实测证明，不是因为静态变量大，将此长度为48数组单独保存，for循环复制给一个静态变量，，发现在循环到1000，程序执行如常，因为担心引用造成的复用，\r\n每次循环中修改数组中的变量，形成数组脏数组，避免php的内部数据引用，结果依旧证明，不是因为静态变量造成的。</pre>\r\n<pre>4.array_merge 的元素中，如果其中有null或者其他，返回结果不是array，而是null</pre>','PHP 的坑','','inherit','open','open','','195-revision-v1','','','2015-03-23 10:11:20','2015-03-23 10:11:20','',195,'http://unasm.sinaapp.com/?p=224',0,'revision','',0),(203,1,'2015-03-14 09:24:44','2015-03-14 09:24:44','1. curl在执行的时候，经常会有内部错误，在curl_errno中返回正值，不必未必费心\r\n\r\n2.检测编码的时候，mb_check_encoding基本是没有用的，检查不出当前的字符串编码格式\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s2\">if</span> <span class=\"s3\">(</span><span class=\"s4\">3</span> <span class=\"s2\">!==</span> <span class=\"s5\">strlen</span><span class=\"s3\">(</span><span class=\"s1\">\'</span><span class=\"s4\">✓</span><span class=\"s1\">\'</span><span class=\"s3\">))</span> <span class=\"s3\">{</span><span class=\"s1\"><span class=\"Apple-converted-space\">                                                                                                                                            </span></span></p>\r\n<p class=\"p2\"><span class=\"s8\"><span class=\"Apple-converted-space\">          </span></span><span class=\"s9\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s8\">throw</span> <span class=\"s11\">new</span><span class=\"s9\"> \\</span><span class=\"s12\">DomainException</span><span class=\"s11\">(</span><span class=\"s9\">\'</span><span class=\"s13\">Bad encoding, length of unicode character ✓ should be 3. Ensure charset UTF-8 and check ini val  mbstring.func_autoload</span><span class=\"s9\">\'</span><span class=\"s11\">)</span><span class=\"s9\">; <span class=\"Apple-converted-space\">         </span></span><span class=\"s13\">    </span> <span class=\"s13\"> </span></p>\r\n<p class=\"p2\"><span class=\"s11\">}</span><span class=\"s13\">                                                                                                                                                                  </span></p>\r\n<p class=\"p2\">这个方法不错，可以判断是不是utf-8编码</p>\r\n<p class=\"p2\">3.php静态变量的问题。奇葩问题。</p>\r\n<p class=\"p2\">   从mc中读取缓存，如果读取次数太多，也会出现效率问题，一个更加优化的办法是保存在静态变量里面，或者是变量里面，这样会得到更高的效率。</p>\r\n<p class=\"p2\">这样做的前提条件是，数据量不能够过大，php的静态变量中不能保存太多的东西，最近遇到一个问题，</p>\r\n<p class=\"p2\">一个数组，长度为9，存储在mc中的，每个变量的长度是一个长度48的数组，如下,其中只有四条是有用的，如果我将这个9 * 48</p>\r\n\r\n<pre>的数组存在静态变量里面，页面是无法显示出来的，如果将长度为48的数组替换成想要的长度为4的数组，就可以毫无压力的显示数据，由此可见静态变量无法保存这个9 * 48 的数组，不过有点奇怪的是，使用 memory_get_usage 测试，耗费内存是2.4mb，不再变化。\r\n\r\n&lt;!--------------------------------------------------------------------------&gt;\r\n实测证明，不是因为静态变量大，将此长度为48数组单独保存，for循环复制给一个静态变量，，发现在循环到1000，程序执行如常，因为担心引用造成的复用，\r\n每次循环中修改数组中的变量，形成数组脏数组，避免php的内部数据引用，结果依旧证明，不是因为静态变量造成的。</pre>\r\n<pre> array(48) {\r\n  [\"id\"]=&gt;\r\n  int(2940866463)\r\n  [\"idstr\"]=&gt;\r\n  string(10) \"2940866463\"\r\n  [\"class\"]=&gt;\r\n  int(1)\r\n  [\"screen_name\"]=&gt;\r\n  string(30) \"testtesttesttesttesttesttestte\"\r\n  [\"name\"]=&gt;\r\n  string(30) \"testtesttesttesttesttesttestte\"\r\n  [\"province\"]=&gt;\r\n  string(3) \"400\"\r\n  [\"city\"]=&gt;\r\n  string(1) \"5\"\r\n  [\"location\"]=&gt;\r\n  string(16) \"海外 加拿大\"\r\n  [\"description\"]=&gt;\r\n  string(15) \"曾经的曾经\"\r\n  [\"url\"]=&gt;\r\n  string(0) \"\"\r\n  [\"profile_image_url\"]=&gt;\r\n  string(48) \"http://tp4.sinaimg.cn/2940866463/50/5647849369/0\"\r\n  [\"profile_url\"]=&gt;\r\n  string(12) \"u/2940866463\"\r\n  [\"domain\"]=&gt;\r\n  string(0) \"\"\r\n  [\"weihao\"]=&gt;\r\n  string(0) \"\"\r\n  [\"gender\"]=&gt;\r\n  string(1) \"f\"\r\n  [\"followers_count\"]=&gt;\r\n  int(157)\r\n  [\"friends_count\"]=&gt;\r\n  int(86)\r\n  [\"pagefriends_count\"]=&gt;\r\n  int(0)\r\n  [\"statuses_count\"]=&gt;\r\n  int(724)\r\n  [\"favourites_count\"]=&gt;\r\n  int(87)\r\n  [\"created_at\"]=&gt;\r\n  string(30) \"Fri Sep 07 09:58:19 +0800 2012\"\r\n  [\"following\"]=&gt;\r\n  bool(false)\r\n  [\"allow_all_act_msg\"]=&gt;\r\n  bool(false)\r\n  [\"geo_enabled\"]=&gt;\r\n  bool(true)\r\n  [\"verified\"]=&gt;\r\n  bool(false)\r\n  [\"verified_type\"]=&gt;\r\n  int(-1)\r\n  [\"remark\"]=&gt;\r\n  string(0) \"\"\r\n  [\"status\"]=&gt;\r\n  array(21) {\r\n    [\"created_at\"]=&gt;\r\n    string(30) \"Fri Mar 13 16:37:03 +0800 2015\"\r\n    [\"id\"]=&gt;\r\n    int(3819972268604590)\r\n    [\"mid\"]=&gt;\r\n    string(16) \"3819972268604590\"\r\n    [\"idstr\"]=&gt;\r\n    string(16) \"3819972268604590\"\r\n    [\"text\"]=&gt;\r\n    string(17) \"#新浪观影团#\"\r\n    [\"source_allowclick\"]=&gt;\r\n    int(0)\r\n    [\"source_type\"]=&gt;\r\n    int(1)\r\n    [\"source\"]=&gt;\r\n    string(63) \"<a href=\"http://weibo.com/\" rel=\"nofollow\">微博 weibo.com</a>\"\r\n    [\"favorited\"]=&gt;\r\n    bool(false)\r\n    [\"truncated\"]=&gt;\r\n    bool(false)\r\n    [\"in_reply_to_status_id\"]=&gt;\r\n    string(0) \"\"\r\n    [\"in_reply_to_user_id\"]=&gt;\r\n    string(0) \"\"\r\n    [\"in_reply_to_screen_name\"]=&gt;\r\n    string(0) \"\"\r\n    [\"pic_ids\"]=&gt;\r\n    array(0) {\r\n    }\r\n    [\"geo\"]=&gt;\r\n    NULL\r\n    [\"reposts_count\"]=&gt;\r\n    int(0)\r\n    [\"comments_count\"]=&gt;\r\n    int(0)\r\n    [\"attitudes_count\"]=&gt;\r\n    int(0)\r\n    [\"mlevel\"]=&gt;\r\n    int(0)\r\n    [\"visible\"]=&gt;\r\n    array(2) {\r\n      [\"type\"]=&gt;\r\n      int(0)\r\n      [\"list_id\"]=&gt;\r\n      int(0)\r\n    }\r\n    [\"darwin_tags\"]=&gt;\r\n    array(0) {\r\n    }\r\n  }\r\n  [\"ptype\"]=&gt;\r\n  int(0)\r\n  [\"allow_all_comment\"]=&gt;\r\n  bool(false)\r\n  [\"avatar_large\"]=&gt;\r\n  string(49) \"http://tp4.sinaimg.cn/2940866463/180/5647849369/0\"\r\n  [\"avatar_hd\"]=&gt;\r\n  string(49) \"http://tp4.sinaimg.cn/2940866463/180/5647849369/0\"\r\n  [\"verified_reason\"]=&gt;\r\n  string(0) \"\"\r\n  [\"verified_trade\"]=&gt;\r\n  string(0) \"\"\r\n  [\"verified_reason_url\"]=&gt;\r\n  string(0) \"\"\r\n  [\"verified_source\"]=&gt;\r\n  string(0) \"\"\r\n  [\"verified_source_url\"]=&gt;\r\n  string(0) \"\"\r\n  [\"follow_me\"]=&gt;\r\n  bool(false)\r\n  [\"online_status\"]=&gt;\r\n  int(0)\r\n  [\"bi_followers_count\"]=&gt;\r\n  int(6)\r\n  [\"lang\"]=&gt;\r\n  string(5) \"zh-cn\"\r\n  [\"star\"]=&gt;\r\n  int(0)\r\n  [\"mbtype\"]=&gt;\r\n  int(0)\r\n  [\"mbrank\"]=&gt;\r\n  int(0)\r\n  [\"block_word\"]=&gt;\r\n  int(0)\r\n  [\"block_app\"]=&gt;\r\n  int(0)\r\n  [\"credit_score\"]=&gt;\r\n  int(80)\r\n  [\"urank\"]=&gt;\r\n  int(8)\r\n}</pre>','PHP 的坑','','inherit','open','open','','195-revision-v1','','','2015-03-14 09:24:44','2015-03-14 09:24:44','',195,'http://unasm.sinaapp.com/?p=203',0,'revision','',0),(204,1,'2015-03-15 00:12:31','2015-03-15 00:12:31','<ol>\r\n	<li>一个表里面所有的varchar 字段加起来<strong>必须</strong>不能超过65532字节，推荐不超过8098个，因为一旦超过8098，占用的磁盘大小超过了一页,innodb会使用未压缩的blob页来保存，数据页会被用来保存偏移量，varchar越大，使用的blob越多，所以从效率和节省空间角度来说，不推荐超过8098.</li>\r\n	<li>char也被当做变成处理，根据字符集决定，比如同一个表，存入\'a\' 和\'他\'占用的字节是不同的</li>\r\n	<li>innodb的range 分区 查询，只能针对YEAR,TO_DAYS,TO_SECONDS,UNIX_TIMESTAMP等函数进行搜索优化，比如YEAR(date) + MONTH(date)的时候，优化器是不会搜索优化的</li>\r\n	<li>Mysql 5.5版本之前 索引的添加或者删除操作过程是这样的\r\n<ul>\r\n	<li>先创建一个临时表，表结构为alter table之后的新定义的结构</li>\r\n	<li>把原来的数据导入临时表</li>\r\n	<li>删除原表</li>\r\n	<li>把临时表重命名为原来的表</li>\r\n</ul>\r\n</li>\r\n</ol>','mysql 基础知识集锦','','inherit','open','open','','175-revision-v1','','','2015-03-15 00:12:31','2015-03-15 00:12:31','',175,'http://unasm.sinaapp.com/?p=204',0,'revision','',0),(205,1,'2015-03-15 01:00:29','2015-03-15 01:00:29','<pre id=\"recommend-content-365978365\" class=\"recommend-text mb-10\">SQL语言共分为四大类：数据查询语言DQL，数据操纵语言DML，\r\n数据定义语言DDL，数据控制语言DCL。\r\n\r\n1 数据查询语言DQL\r\n数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE\r\n子句组成的查询块：\r\nSELECT &lt;字段名表&gt;\r\nFROM &lt;表或视图名&gt;\r\nWHERE &lt;查询条件&gt;\r\n\r\n2 数据操纵语言\r\n数据操纵语言DML主要有三种形式：\r\n1) 插入：INSERT\r\n2) 更新：UPDATE\r\n3) 删除：DELETE\r\n\r\n3 数据定义语言DDL\r\n数据定义语言DDL用来创建数据库中的各种对象-----表、视图、\r\n索引、同义词、聚簇等如：\r\nCREATE TABLE/VIEW/INDEX/SYN/CLUSTER\r\n| | | | |\r\n表 视图 索引 同义词 簇\r\n\r\n4 数据控制语言DCL\r\n数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制\r\n数据库操纵事务发生的时间及效果，对数据库实行监视等。如：\r\n1) GRANT：授权。\r\n2) ROLLBACK [WORK] TO [SAVEPOINT]：回退到某一点。\r\n回滚---ROLLBACK\r\n回滚命令使数据库状态回到上次最后提交的状态。其格式为：\r\nSQL&gt;ROLLBACK;\r\n3) COMMIT [WORK]：提交。\r\n在数据库的插入、删除和修改操作时，只有当事务在提交到数据\r\n库时才算完成。在事务提交前，只有操作数据库的这个人才能有权看\r\n到所做的事情，别人只有在最后提交完成后才可以看到。\r\n提交数据有三种类型：显式提交、隐式提交及自动提交。下面分\r\n别说明这三种类型。\r\n(1) 显式提交\r\n用COMMIT命令直接完成的提交为显式提交。其格式为：\r\nSQL&gt;COMMIT；\r\n(2) 隐式提交\r\n用SQL命令间接完成的提交为隐式提交。这些命令是：\r\nALTER，AUDIT，COMMENT，CONNECT，CREATE，DISCONNECT，DROP，\r\nEXIT，GRANT，NOAUDIT，QUIT，REVOKE，RENAME。\r\n(3) 自动提交\r\n若把AUTOCOMMIT设置为ON，则在插入、修改、删除语句执行后，\r\n系统将自动进行提交，这就是自动提交。其格式为：\r\nSQL&gt;SET AUTOCOMMIT ON；\r\n\r\n转自：http://zhidao.baidu.com/question/115195964.html</pre>','SQL语言四大类','','publish','open','open','','%e6%95%b0%e6%8d%ae%e5%ba%93%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86%e9%9b%86%e9%94%a6','','','2015-04-15 09:24:21','2015-04-15 09:24:21','',0,'http://unasm.sinaapp.com/?p=205',0,'post','',0),(206,1,'2015-03-15 01:00:29','2015-03-15 01:00:29','<pre id=\"recommend-content-365978365\" class=\"recommend-text mb-10\">SQL语言共分为四大类：数据查询语言DQL，数据操纵语言DML，\r\n数据定义语言DDL，数据控制语言DCL。\r\n\r\n1 数据查询语言DQL\r\n数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE\r\n子句组成的查询块：\r\nSELECT &lt;字段名表&gt;\r\nFROM &lt;表或视图名&gt;\r\nWHERE &lt;查询条件&gt;\r\n\r\n2 数据操纵语言\r\n数据操纵语言DML主要有三种形式：\r\n1) 插入：INSERT\r\n2) 更新：UPDATE\r\n3) 删除：DELETE\r\n\r\n3 数据定义语言DDL\r\n数据定义语言DDL用来创建数据库中的各种对象-----表、视图、\r\n索引、同义词、聚簇等如：\r\nCREATE TABLE/VIEW/INDEX/SYN/CLUSTER\r\n| | | | |\r\n表 视图 索引 同义词 簇\r\n\r\n4 数据控制语言DCL\r\n数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制\r\n数据库操纵事务发生的时间及效果，对数据库实行监视等。如：\r\n1) GRANT：授权。\r\n2) ROLLBACK [WORK] TO [SAVEPOINT]：回退到某一点。\r\n回滚---ROLLBACK\r\n回滚命令使数据库状态回到上次最后提交的状态。其格式为：\r\nSQL&gt;ROLLBACK;\r\n3) COMMIT [WORK]：提交。\r\n在数据库的插入、删除和修改操作时，只有当事务在提交到数据\r\n库时才算完成。在事务提交前，只有操作数据库的这个人才能有权看\r\n到所做的事情，别人只有在最后提交完成后才可以看到。\r\n提交数据有三种类型：显式提交、隐式提交及自动提交。下面分\r\n别说明这三种类型。\r\n(1) 显式提交\r\n用COMMIT命令直接完成的提交为显式提交。其格式为：\r\nSQL&gt;COMMIT；\r\n(2) 隐式提交\r\n用SQL命令间接完成的提交为隐式提交。这些命令是：\r\nALTER，AUDIT，COMMENT，CONNECT，CREATE，DISCONNECT，DROP，\r\nEXIT，GRANT，NOAUDIT，QUIT，REVOKE，RENAME。\r\n(3) 自动提交\r\n若把AUTOCOMMIT设置为ON，则在插入、修改、删除语句执行后，\r\n系统将自动进行提交，这就是自动提交。其格式为：\r\nSQL&gt;SET AUTOCOMMIT ON；\r\n\r\n转自：http://zhidao.baidu.com/question/115195964.html</pre>','数据库基础知识集锦','','inherit','open','open','','205-revision-v1','','','2015-03-15 01:00:29','2015-03-15 01:00:29','',205,'http://unasm.sinaapp.com/?p=206',0,'revision','',0),(207,1,'2015-03-16 03:11:58','2015-03-16 03:11:58','在通过js提交数据的时候，用户往往会因为得不到及时的响应多次提交，结果就是造成数据的多次提交，造成不好的结果。如何避免用户数据的多次提交呢？\r\n<ol>\r\n	<li>可以前后端配合，在form的隐藏域中生成一个包含用户ip，url，时间的md5值,存储在form的隐藏域中，在服务端，检测到对应的md5值，与保存在缓存中的md5值对比，如果该md5值已经存在，证明重复提交，如果不存在，则证明刚刚提交，然后在缓存中置为该md5值，30s后失效。</li>\r\n	<li>第二种办法会有点麻烦，通过在具体的add函数那里检验sql语句，对比通过提交的数据与用户在表里面的最新数据，可以得到，用户的提交数据与已经插入的数据是不是同一份数据。因为主从的缘故，最新的数据要从主库读取。这样面临一个危险，就是面对攻击的时候，每次都从主库读取，可能会因此造成性能危机，</li>\r\n	<li>第三种方案是纯后台的，将插入sql进行md5，首先检查该md5值与缓存中的对应，如果有数据，就证明重复提交，如果没有数据，则置位该md5值，30s后失效，同时执行插入语句。优点是不需要和前端配合，单独的后台处理，并且，可以在add函数哪里添加判断，一处添加，整站收益。缺点是，md5会随着字符串的增加，时间线性增长，并且有相当的性能损失 <a title=\"md5()效率问题要注意\" href=\"http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d\">http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d</a></li>\r\n	<li>第四种方案，纯前端的，在发起post请求之前，先将锁变量置位，然后在得到相应之后，将锁解除，同时设置一个计时，在超时得不到响应之后，依旧打开锁，并且在ui层面，适当的回馈用户，告知已经点击，请求发起</li>\r\n</ol>','如何防止用户同一个表单的多次提交','','publish','open','open','','%e5%a6%82%e4%bd%95%e9%98%b2%e6%ad%a2%e7%94%a8%e6%88%b7%e5%90%8c%e4%b8%80%e4%b8%aa%e8%a1%a8%e5%8d%95%e7%9a%84%e5%a4%9a%e6%ac%a1%e6%8f%90%e4%ba%a4','','','2015-03-16 03:46:19','2015-03-16 03:46:19','',0,'http://unasm.sinaapp.com/?p=207',0,'post','',0),(208,1,'2015-03-16 03:11:58','2015-03-16 03:11:58','在通过js提交数据的时候，用户往往会因为得不到及时的响应多次提交，结果就是造成数据的多次提交，造成不好的结果。如何避免用户数据的多次提交呢？\r\n<ol>\r\n	<li>可以前后端配合，在form的隐藏域中生成一个包含用户ip，url，时间的md5值,存储在form的隐藏域中，在服务端，检测到对应的md5值，与保存在缓存中的md5值对比，如果该md5值已经存在，证明重复提交，如果不存在，则证明刚刚提交，然后在缓存中置为该md5值，30s后失效。</li>\r\n	<li>第二种办法会有点麻烦，通过在具体的add函数哪里检验sql语句，对比通过提交的数据与用户在表里面的最新数据，可以得到，用户的提交数据与已经插入的数据是不是同一份数据。因为主从的缘故，最新的数据要从主库读取。这样面临一个危险，就是面对攻击的时候，每次都从主库读取，可能会因此造成性能危机，</li>\r\n	<li>第三种方案是将插入sql进行md5，首先检查该md5值与缓存中的对应，如果有数据，就证明重复提交，如果没有数据，则置位该md5值，30s后失效，同时执行插入语句。</li>\r\n</ol>','如何防止用户同一个表单的多次提交','','inherit','open','open','','207-revision-v1','','','2015-03-16 03:11:58','2015-03-16 03:11:58','',207,'http://unasm.sinaapp.com/?p=208',0,'revision','',0),(209,1,'2015-03-16 03:36:16','2015-03-16 03:36:16','在通过js提交数据的时候，用户往往会因为得不到及时的响应多次提交，结果就是造成数据的多次提交，造成不好的结果。如何避免用户数据的多次提交呢？\n<ol>\n	<li>可以前后端配合，在form的隐藏域中生成一个包含用户ip，url，时间的md5值,存储在form的隐藏域中，在服务端，检测到对应的md5值，与保存在缓存中的md5值对比，如果该md5值已经存在，证明重复提交，如果不存在，则证明刚刚提交，然后在缓存中置为该md5值，30s后失效。</li>\n	<li>第二种办法会有点麻烦，通过在具体的add函数那里检验sql语句，对比通过提交的数据与用户在表里面的最新数据，可以得到，用户的提交数据与已经插入的数据是不是同一份数据。因为主从的缘故，最新的数据要从主库读取。这样面临一个危险，就是面对攻击的时候，每次都从主库读取，可能会因此造成性能危机，</li>\n	<li>第三种方案是纯后台的，将插入sql进行md5，首先检查该md5值与缓存中的对应，如果有数据，就证明重复提交，如果没有数据，则置位该md5值，30s后失效，同时执行插入语句。优点是不需要和前端配合，单独的后台处理，并且，可以在add函数哪里添加判断，一处添加，整站收益。缺点是，md5会随着字符串的增加，时间线性增长，并且有相当的性能损失 <a title=\"md5()效率问题要注意\" href=\"http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d\">http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d</a></li>\n	<li>第四种方案，纯前端的，在发起post请求之前，先将锁变量置位，然后在得到相应之后，将锁解除，同时设置一个计时，在超时得不到响应之后，依旧打开锁，并且在ui层面，适当的hui\'k</li>\n</ol>','如何防止用户同一个表单的多次提交','','inherit','open','open','','207-autosave-v1','','','2015-03-16 03:36:16','2015-03-16 03:36:16','',207,'http://unasm.sinaapp.com/?p=209',0,'revision','',0),(210,1,'2015-03-16 03:25:29','2015-03-16 03:25:29','在通过js提交数据的时候，用户往往会因为得不到及时的响应多次提交，结果就是造成数据的多次提交，造成不好的结果。如何避免用户数据的多次提交呢？\r\n<ol>\r\n	<li>可以前后端配合，在form的隐藏域中生成一个包含用户ip，url，时间的md5值,存储在form的隐藏域中，在服务端，检测到对应的md5值，与保存在缓存中的md5值对比，如果该md5值已经存在，证明重复提交，如果不存在，则证明刚刚提交，然后在缓存中置为该md5值，30s后失效。</li>\r\n	<li>第二种办法会有点麻烦，通过在具体的add函数哪里检验sql语句，对比通过提交的数据与用户在表里面的最新数据，可以得到，用户的提交数据与已经插入的数据是不是同一份数据。因为主从的缘故，最新的数据要从主库读取。这样面临一个危险，就是面对攻击的时候，每次都从主库读取，可能会因此造成性能危机，</li>\r\n	<li>第三种方案是将插入sql进行md5，首先检查该md5值与缓存中的对应，如果有数据，就证明重复提交，如果没有数据，则置位该md5值，30s后失效，同时执行插入语句。优点是不需要和前端配合，单独的后台处理，并且，可以在add函数哪里添加判断，一处添加，整站收益。缺点是，md5会随着字符串的增加，时间线性增长，并且有相当的性能损失 <a title=\"md5()效率问题要注意\" href=\"http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d\">http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d</a></li>\r\n</ol>','如何防止用户同一个表单的多次提交','','inherit','open','open','','207-revision-v1','','','2015-03-16 03:25:29','2015-03-16 03:25:29','',207,'http://unasm.sinaapp.com/?p=210',0,'revision','',0),(211,1,'2015-03-16 03:26:11','2015-03-16 03:26:11','在通过js提交数据的时候，用户往往会因为得不到及时的响应多次提交，结果就是造成数据的多次提交，造成不好的结果。如何避免用户数据的多次提交呢？\r\n<ol>\r\n	<li>可以前后端配合，在form的隐藏域中生成一个包含用户ip，url，时间的md5值,存储在form的隐藏域中，在服务端，检测到对应的md5值，与保存在缓存中的md5值对比，如果该md5值已经存在，证明重复提交，如果不存在，则证明刚刚提交，然后在缓存中置为该md5值，30s后失效。</li>\r\n	<li>第二种办法会有点麻烦，通过在具体的add函数那里检验sql语句，对比通过提交的数据与用户在表里面的最新数据，可以得到，用户的提交数据与已经插入的数据是不是同一份数据。因为主从的缘故，最新的数据要从主库读取。这样面临一个危险，就是面对攻击的时候，每次都从主库读取，可能会因此造成性能危机，</li>\r\n	<li>第三种方案是将插入sql进行md5，首先检查该md5值与缓存中的对应，如果有数据，就证明重复提交，如果没有数据，则置位该md5值，30s后失效，同时执行插入语句。优点是不需要和前端配合，单独的后台处理，并且，可以在add函数哪里添加判断，一处添加，整站收益。缺点是，md5会随着字符串的增加，时间线性增长，并且有相当的性能损失 <a title=\"md5()效率问题要注意\" href=\"http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d\">http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d</a></li>\r\n</ol>','如何防止用户同一个表单的多次提交','','inherit','open','open','','207-revision-v1','','','2015-03-16 03:26:11','2015-03-16 03:26:11','',207,'http://unasm.sinaapp.com/?p=211',0,'revision','',0),(212,1,'2015-03-16 03:36:32','2015-03-16 03:36:32','在通过js提交数据的时候，用户往往会因为得不到及时的响应多次提交，结果就是造成数据的多次提交，造成不好的结果。如何避免用户数据的多次提交呢？\r\n<ol>\r\n	<li>可以前后端配合，在form的隐藏域中生成一个包含用户ip，url，时间的md5值,存储在form的隐藏域中，在服务端，检测到对应的md5值，与保存在缓存中的md5值对比，如果该md5值已经存在，证明重复提交，如果不存在，则证明刚刚提交，然后在缓存中置为该md5值，30s后失效。</li>\r\n	<li>第二种办法会有点麻烦，通过在具体的add函数那里检验sql语句，对比通过提交的数据与用户在表里面的最新数据，可以得到，用户的提交数据与已经插入的数据是不是同一份数据。因为主从的缘故，最新的数据要从主库读取。这样面临一个危险，就是面对攻击的时候，每次都从主库读取，可能会因此造成性能危机，</li>\r\n	<li>第三种方案是纯后台的，将插入sql进行md5，首先检查该md5值与缓存中的对应，如果有数据，就证明重复提交，如果没有数据，则置位该md5值，30s后失效，同时执行插入语句。优点是不需要和前端配合，单独的后台处理，并且，可以在add函数哪里添加判断，一处添加，整站收益。缺点是，md5会随着字符串的增加，时间线性增长，并且有相当的性能损失 <a title=\"md5()效率问题要注意\" href=\"http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d\">http://hi.baidu.com/langwan/item/337eea599f9fa6444fff203d</a></li>\r\n	<li>第四种方案，纯前端的，在发起post请求之前，先将锁变量置位，然后在得到相应之后，将锁解除，同时设置一个计时，在超时得不到响应之后，依旧打开锁，并且在ui层面，适当的回馈用户，告知已经点击，请求发起</li>\r\n</ol>','如何防止用户同一个表单的多次提交','','inherit','open','open','','207-revision-v1','','','2015-03-16 03:36:32','2015-03-16 03:36:32','',207,'http://unasm.sinaapp.com/?p=212',0,'revision','',0),(214,1,'2015-03-19 17:24:34','2015-03-19 17:24:34','#这个文件控制着svnserver守护进程的配置，如果你想用它这个来访问版本库的话，那这个文件是没法避免的。\r\n\r\n[general]\r\n\r\n#这些选项控制着该版本库所有的有权限和没权限的用户，有效值是write,read,和none，配置的样例配置如默认配#置\r\n\r\nanon-access=none\r\n\r\nauth-access=write\r\n\r\n#password-db选项是数据库密码文件位置，除非你明确指明了一个以/开头的路径，否则密码文件的路径都是相对#于配置文件的相对路径。\r\n\r\npassword-db = passwd\r\n\r\n# authz-db 选项 是控制访问路径的权限的，不指定以/开头的路径，该文件的路径是相对于本文件的，不指定该\r\n\r\n#值，无法控制用户的访问路径。\r\n\r\n#realm （无意义）\r\n\r\n[sasl]\r\n\r\n#该选项指定是否使用Cyrus SASL权限验证库，默认不启用,运行命令“svnserve --version” ，查询是否能找到“<span class=\"s1\">Cyrus #SASL authentication is available</span>”\r\n\r\n#use-sasl = true\r\n\r\n#这些选项指定想要通过sasl提供的安全级别，0 不加密，1意味着整数检查，大于一则意味着和加密字符串有效长度相关联\r\n\r\n#min-encryption = 0\r\n\r\n#max-encryption = 256','svn 服务器 配置svnserve.conf 翻译','','inherit','open','open','','213-revision-v1','','','2015-03-19 17:24:34','2015-03-19 17:24:34','',213,'http://unasm.sinaapp.com/?p=214',0,'revision','',0),(216,1,'2015-03-20 03:44:34','2015-03-20 03:44:34','<p class=\"p1\">把服务端与客户端的连接从HTTP/1.1 转化到WebSocket，这需要用到<a href=\"http://tools.ietf.org/html/rfc2616#section-14.42\"><span class=\"s2\">protocol_switch</span></a>  这个指令。</p>\r\n<p class=\"p4\"><span class=\"s1\">然而“Upgrade” 是一个hop-by-hop（逐个跳转扩展头），它是不可能通过代理服务器的，虽然客户端或许可以使用CONNECT方法避开这个问题，但是这不适用于反向代理服务器，因为客户端根本不会意识到这个是代理服务器，所以需要一种特殊的方式。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">从1.3.13版，nginx实现了一种特殊的机制，只要代理服务器返回101（转换协议）就允许代理服务器和客户端之间建立一个通道，并且客户端会请求通过在请求中添加Upgrade 头来转换协议。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">上文提到，包含了“Upgrade”和”Connection”的hop-by-hop 头是不能传到代理服务器的，因此为了通知服务器客户端想要将协议转换到WebSocket，这些头必须显式的传递。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">location /chat/ {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_pass http://backend;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_http_version 1.1;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_set_header Connection \"upgrade\";</span></p>\r\n<p class=\"p4\"><span class=\"s1\">}</span></p>\r\n<p class=\"p4\"><span class=\"s1\">一个发往服务端的的header头中Connection的值 取决于于客户端请求头里面的Upgrade的有无。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">http {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>map $http_upgrade $connection_upgrade {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>default upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>\'\'<span class=\"Apple-converted-space\">      </span>close;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>}</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>server {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>...</span></p>\r\n<p class=\"p1\"><span class=\"s1\">        listen <span class=\"Apple-converted-space\">      </span>8070;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>location /chat/ {</span></p>\r\n<p class=\"p4\">            proxy_pass http://127.0.0.1:8010;</p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_http_version 1.1;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_set_header Connection $connection_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>}</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>}</span></p>\r\n<p class=\"p4\">此时，对应的服务端代码为,服务端，需要安装nodejs，并且node node.js 运行起来，坚挺8010端口</p>\r\n<p class=\"p2\"><span class=\"s1\">/*************************************************************************</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span>* File Name :<span class=\"Apple-converted-space\">  </span>node.js</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span>* Author<span class=\"Apple-converted-space\">  </span>:<span class=\"Apple-converted-space\">      </span>unasm</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span>* Mail : <span class=\"Apple-converted-space\">        </span>unasm@sina.cn</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span>* Last_Modified: 2015-05-25 09:56:26</span></p>\r\n<p class=\"p2\"><span class=\"s1\"> ************************************************************************/</span></p>\r\n<p class=\"p2\"><span class=\"s1\">console.log(\"Server started\");</span></p>\r\n<p class=\"p2\"><span class=\"s1\">var connects = new Array();</span></p>\r\n<p class=\"p2\"><span class=\"s1\">var WebSocketServer = require(\'ws\').Server</span></p>\r\n<p class=\"p2\"><span class=\"s1\">, wss = new WebSocketServer({port: 8010});</span></p>\r\n<p class=\"p2\"><span class=\"s1\">console.log(\"complete\");</span></p>\r\n<p class=\"p2\"><span class=\"s1\">wss.on(\'connection\', function(ws) {</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>connects.push(ws);</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>ws.on(\'message\', function(msg) {</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>ws.send(msg);</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>for(var i = 0,len = connects.length; i &lt; len;i++){</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>if(connects[i] !== ws){</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>connects[i].send(msg);</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>}</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>}</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>});</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>console.log(\"connection\");</span></p>\r\n<p class=\"p2\"><span class=\"s1\">});</span></p>\r\n<p class=\"p4\">客户端html代码为：</p>\r\n&nbsp;\r\n<p class=\"p1\"><span class=\"s1\">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>&lt;script type=\"text/javascript\"&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>var sock = null;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>var wsuri = \"ws://127.0.0.1:8070/chat/\";</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>window.onload = function() {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>console.log(\"onload\");</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>sock = new WebSocket(wsuri);</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>sock.onopen = function() {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                        </span>console.log(\"connected to \" + wsuri);</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>sock.onclose = function(e) {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                        </span>console.log(\"connection closed (\" + e.code + \")\");</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>sock.onmessage = function(e) {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                        </span>console.log(\"message received: \" + e.data);</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>};</span></p>\r\n<p class=\"p1\"><span class=\"s1\">function send() {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>var msg = document.getElementById(\'message\').value;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>sock.send(msg);</span></p>\r\n<p class=\"p1\"><span class=\"s1\">};</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;/script&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;h1&gt;WebSocket Echo Test&lt;/h1&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;form&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>&lt;p&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>Message: &lt;input id=\"message\" type=\"text\" value=\"Hello, world!\"&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>&lt;/p&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;/form&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;button onclick=\"send();\"&gt;Send Message&lt;/button&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;/body&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;/html&gt;</span></p>\r\n&nbsp;\r\n<p class=\"p4\">原文参考连接http://nginx.org/en/docs/http/websocket.html?_ga=1.166503037.270828851.1426754420</p>','nginx 作为websocket代理服务器（译）','','publish','open','open','','nginx-%e4%bd%9c%e4%b8%bawebsocket%e4%bb%a3%e7%90%86%e6%9c%8d%e5%8a%a1%e5%99%a8%ef%bc%88%e8%af%91%ef%bc%89','','','2015-05-25 02:58:54','2015-05-25 02:58:54','',0,'http://unasm.sinaapp.com/?p=216',0,'post','',0),(218,1,'2015-03-20 03:45:02','2015-03-20 03:45:02','<p class=\"p1\">把服务端与客户端的连接从HTTP/1.1 转化到WebSocket，这需要用到<a href=\"http://tools.ietf.org/html/rfc2616#section-14.42\"><span class=\"s2\">protocol_switch</span></a>  这个指令。</p>\r\n<p class=\"p4\"><span class=\"s1\">然后有点精巧的是，既然“Upgrade” 是一个hop-by-hop（逐个跳转扩展头），它是不可能通过代理服务器的，为了通过代理，客户端或许可以使用CONNECT方法避开这个问题，但是这不适用于代理服务器，因为客户端根本不会意识到这个是代理服务器，所以需要用一个比较特别的方式。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">从1.3.13版，nginx实现了一种特殊的机制，只要代理服务器返回101（转换协议）就允许代理服务器和客户端之间建立一个通道，并且客户端会请求通过在请求中添加Upgrade 头来转换协议。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">上文提到，包含了“Upgrade”和”Connection”的hop-by-hop 头是不能传到代理服务器的，因此为了通知服务器客户端想要将协议转换到WebSocket，这些头必须显式的传递。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">location /chat/ {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_pass http://backend;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_http_version 1.1;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_set_header Connection \"upgrade\";</span></p>\r\n<p class=\"p4\"><span class=\"s1\">}</span></p>\r\n<p class=\"p4\"><span class=\"s1\">一个发往服务端的的header头中Connection的值 取决于于客户端请求头里面的Upgrade的有无。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">http {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>map $http_upgrade $connection_upgrade {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>default upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>\'\'<span class=\"Apple-converted-space\">      </span>close;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>}</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>server {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>...</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>location /chat/ {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_pass http://backend;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_http_version 1.1;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_set_header Connection $connection_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>}</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>}</span></p>','nginx 作为websocket代理服务器（译）','','inherit','open','open','','216-revision-v1','','','2015-03-20 03:45:02','2015-03-20 03:45:02','',216,'http://unasm.sinaapp.com/?p=218',0,'revision','',0),(217,1,'2015-03-20 03:44:34','2015-03-20 03:44:34','<p class=\"p1\"><span class=\"s1\">Urna Semper</span></p>\r\n<p class=\"p1\"><span class=\"s1\">Instructor’s Name</span></p>\r\n<p class=\"p1\"><span class=\"s1\">March 19, 2015</span></p>\r\n<p class=\"p4\"><span class=\"s1\">把服务端与客户端的连接从HTTP/1.1 转化到WebSocket，这需要用到<a href=\"http://tools.ietf.org/html/rfc2616#section-14.42\"><span class=\"s2\">protocol_switch</span></a><span class=\"Apple-converted-space\">  </span>这个指令。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">然后有点精巧的是，既然“Upgrade” 是一个hop-by-hop（逐个跳转扩展头），它是不可能通过代理服务器的，为了通过代理，客户端或许可以使用CONNECT方法避开这个问题，但是这不适用于代理服务器，因为客户端根本不会意识到这个是代理服务器，所以需要用一个比较特别的方式。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">从1.3.13版，nginx实现了一种特殊的机制，只要代理服务器返回101（转换协议）就允许代理服务器和客户端之间建立一个通道，并且客户端会请求通过在请求中添加Upgrade 头来转换协议。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">上文提到，包含了“Upgrade”和”Connection”的hop-by-hop 头是不能传到代理服务器的，因此为了通知服务器客户端想要将协议转换到WebSocket，这些头必须显式的传递。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">location /chat/ {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_pass http://backend;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_http_version 1.1;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_set_header Connection \"upgrade\";</span></p>\r\n<p class=\"p4\"><span class=\"s1\">}</span></p>\r\n<p class=\"p4\"><span class=\"s1\">一个发往服务端的的header头中Connection的值 取决于于客户端请求头里面的Upgrade的有无。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">http {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>map $http_upgrade $connection_upgrade {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>default upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>\'\'<span class=\"Apple-converted-space\">      </span>close;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>}</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>server {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>...</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>location /chat/ {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_pass http://backend;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_http_version 1.1;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_set_header Connection $connection_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>}</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>}</span></p>','nginx 作为websocket代理服务器（译）','','inherit','open','open','','216-revision-v1','','','2015-03-20 03:44:34','2015-03-20 03:44:34','',216,'http://unasm.sinaapp.com/?p=217',0,'revision','',0),(221,1,'2015-03-20 04:21:33','2015-03-20 04:21:33','<p class=\"p1\">把服务端与客户端的连接从HTTP/1.1 转化到WebSocket，这需要用到<a href=\"http://tools.ietf.org/html/rfc2616#section-14.42\"><span class=\"s2\">protocol_switch</span></a>  这个指令。</p>\r\n<p class=\"p4\"><span class=\"s1\">然而“Upgrade” 是一个hop-by-hop（逐个跳转扩展头），它是不可能通过代理服务器的，虽然客户端或许可以使用CONNECT方法避开这个问题，但是这不适用于反向代理服务器，因为客户端根本不会意识到这个是代理服务器，所以需要一种特殊的方式。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">从1.3.13版，nginx实现了一种特殊的机制，只要代理服务器返回101（转换协议）就允许代理服务器和客户端之间建立一个通道，并且客户端会请求通过在请求中添加Upgrade 头来转换协议。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">上文提到，包含了“Upgrade”和”Connection”的hop-by-hop 头是不能传到代理服务器的，因此为了通知服务器客户端想要将协议转换到WebSocket，这些头必须显式的传递。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">location /chat/ {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_pass http://backend;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_http_version 1.1;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_set_header Connection \"upgrade\";</span></p>\r\n<p class=\"p4\"><span class=\"s1\">}</span></p>\r\n<p class=\"p4\"><span class=\"s1\">一个发往服务端的的header头中Connection的值 取决于于客户端请求头里面的Upgrade的有无。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">http {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>map $http_upgrade $connection_upgrade {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>default upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>\'\'<span class=\"Apple-converted-space\">      </span>close;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>}</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>server {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>...</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>location /chat/ {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_pass http://backend;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_http_version 1.1;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_set_header Connection $connection_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>}</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>}</span></p>\r\n<p class=\"p4\">原文连接http://nginx.org/en/docs/http/websocket.html?_ga=1.166503037.270828851.1426754420</p>','nginx 作为websocket代理服务器（译）','','inherit','open','open','','216-revision-v1','','','2015-03-20 04:21:33','2015-03-20 04:21:33','',216,'http://unasm.sinaapp.com/?p=221',0,'revision','',0),(219,1,'2015-03-20 03:45:48','2015-03-20 03:45:48','<p class=\"p1\">把服务端与客户端的连接从HTTP/1.1 转化到WebSocket，这需要用到<a href=\"http://tools.ietf.org/html/rfc2616#section-14.42\"><span class=\"s2\">protocol_switch</span></a>  这个指令。</p>\r\n<p class=\"p4\"><span class=\"s1\">然后有点精巧的是，既然“Upgrade” 是一个hop-by-hop（逐个跳转扩展头），它是不可能通过代理服务器的，为了通过代理，客户端或许可以使用CONNECT方法避开这个问题，但是这不适用于代理服务器，因为客户端根本不会意识到这个是代理服务器，所以需要用一个比较特别的方式。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">从1.3.13版，nginx实现了一种特殊的机制，只要代理服务器返回101（转换协议）就允许代理服务器和客户端之间建立一个通道，并且客户端会请求通过在请求中添加Upgrade 头来转换协议。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">上文提到，包含了“Upgrade”和”Connection”的hop-by-hop 头是不能传到代理服务器的，因此为了通知服务器客户端想要将协议转换到WebSocket，这些头必须显式的传递。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">location /chat/ {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_pass http://backend;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_http_version 1.1;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_set_header Connection \"upgrade\";</span></p>\r\n<p class=\"p4\"><span class=\"s1\">}</span></p>\r\n<p class=\"p4\"><span class=\"s1\">一个发往服务端的的header头中Connection的值 取决于于客户端请求头里面的Upgrade的有无。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">http {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>map $http_upgrade $connection_upgrade {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>default upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>\'\'<span class=\"Apple-converted-space\">      </span>close;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>}</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>server {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>...</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>location /chat/ {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_pass http://backend;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_http_version 1.1;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_set_header Connection $connection_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>}</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>}</span></p>\r\n<p class=\"p4\">原文连接http://nginx.org/en/docs/http/websocket.html?_ga=1.166503037.270828851.1426754420</p>','nginx 作为websocket代理服务器（译）','','inherit','open','open','','216-revision-v1','','','2015-03-20 03:45:48','2015-03-20 03:45:48','',216,'http://unasm.sinaapp.com/?p=219',0,'revision','',0),(220,1,'2015-05-25 02:33:04','2015-05-25 02:33:04','<p class=\"p1\">把服务端与客户端的连接从HTTP/1.1 转化到WebSocket，这需要用到<a href=\"http://tools.ietf.org/html/rfc2616#section-14.42\"><span class=\"s2\">protocol_switch</span></a>  这个指令。</p>\n<p class=\"p4\"><span class=\"s1\">然而“Upgrade” 是一个hop-by-hop（逐个跳转扩展头），它是不可能通过代理服务器的，虽然客户端或许可以使用CONNECT方法避开这个问题，但是这不适用于反向代理服务器，因为客户端根本不会意识到这个是代理服务器，所以需要一种特殊的方式。</span></p>\n<p class=\"p4\"><span class=\"s1\">从1.3.13版，nginx实现了一种特殊的机制，只要代理服务器返回101（转换协议）就允许代理服务器和客户端之间建立一个通道，并且客户端会请求通过在请求中添加Upgrade 头来转换协议。</span></p>\n<p class=\"p4\"><span class=\"s1\">上文提到，包含了“Upgrade”和”Connection”的hop-by-hop 头是不能传到代理服务器的，因此为了通知服务器客户端想要将协议转换到WebSocket，这些头必须显式的传递。</span></p>\n<p class=\"p4\"><span class=\"s1\">location /chat/ {</span></p>\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_pass http://backend;</span></p>\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_http_version 1.1;</span></p>\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_set_header Upgrade $http_upgrade;</span></p>\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_set_header Connection \"upgrade\";</span></p>\n<p class=\"p4\"><span class=\"s1\">}</span></p>\n<p class=\"p4\"><span class=\"s1\">一个发往服务端的的header头中Connection的值 取决于于客户端请求头里面的Upgrade的有无。</span></p>\n<p class=\"p4\"><span class=\"s1\">http {</span></p>\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>map $http_upgrade $connection_upgrade {</span></p>\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>default upgrade;</span></p>\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>\'\'<span class=\"Apple-converted-space\">      </span>close;</span></p>\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>}</span></p>\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>server {</span></p>\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>...</span></p>\n<p class=\"p1\"><span class=\"s1\">        listen <span class=\"Apple-converted-space\">      </span>8070;</span></p>\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>location /chat/ {</span></p>\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_pass http://backend;</span></p>\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_http_version 1.1;</span></p>\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_set_header Upgrade $http_upgrade;</span></p>\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_set_header Connection $connection_upgrade;</span></p>\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>}</span></p>\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>}</span></p>\n<p class=\"p4\">此时，对应的服务端代码为</p>\n<p class=\"p4\">客户端html代码为：</p>\n&nbsp;\n<p class=\"p1\"><span class=\"s1\">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>&lt;script type=\"text/javascript\"&gt;</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>var sock = null;</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>var wsuri = \"ws://127.0.0.1:8070/chat/\";</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>window.onload = function() {</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>console.log(\"onload\");</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>sock = new WebSocket(wsuri);</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>sock.onopen = function() {</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                        </span>console.log(\"connected to \" + wsuri);</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>}</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>sock.onclose = function(e) {</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                        </span>console.log(\"connection closed (\" + e.code + \")\");</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>}</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>sock.onmessage = function(e) {</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                        </span>console.log(\"message received: \" + e.data);</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>}</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>};</span></p>\n<p class=\"p1\"><span class=\"s1\">function send() {</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>var msg = document.getElementById(\'message\').value;</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>sock.send(msg);</span></p>\n<p class=\"p1\"><span class=\"s1\">};</span></p>\n<p class=\"p1\"><span class=\"s1\">&lt;/script&gt;</span></p>\n<p class=\"p1\"><span class=\"s1\">&lt;h1&gt;WebSocket Echo Test&lt;/h1&gt;</span></p>\n<p class=\"p1\"><span class=\"s1\">&lt;form&gt;</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>&lt;p&gt;</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>Message: &lt;input id=\"message\" type=\"text\" value=\"Hello, world!\"&gt;</span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>&lt;/p&gt;</span></p>\n<p class=\"p1\"><span class=\"s1\">&lt;/form&gt;</span></p>\n<p class=\"p1\"><span class=\"s1\">&lt;button onclick=\"send();\"&gt;Send Message&lt;/button&gt;</span></p>\n<p class=\"p1\"><span class=\"s1\">&lt;/body&gt;</span></p>\n<p class=\"p1\"><span class=\"s1\">&lt;/html&gt;</span></p>\n&nbsp;\n<p class=\"p4\">原文参考连接http://nginx.org/en/docs/http/websocket.html?_ga=1.166503037.270828851.1426754420</p>','nginx 作为websocket代理服务器（译）','','inherit','open','open','','216-autosave-v1','','','2015-05-25 02:33:04','2015-05-25 02:33:04','',216,'http://unasm.sinaapp.com/?p=220',0,'revision','',0),(222,1,'2015-03-20 11:35:52','2015-03-20 11:35:52','<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href=\"http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/\">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href=\"http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n5. pid - 这个意义不大，主要是说以后这个.pdf文件里面的id号归这个进程使用，算是固定下来运行时候的pid号码吧\r\n\r\n6.  <span class=\"s1\">request_</span><span class=\"s2\">terminate</span><span class=\"s1\">_timeout = 30   请求的最大终止时间，默认单位为妙</span>\r\n\r\n如果file_get_contents请求的远程资源如果反应过慢，file_get_contents就会一直卡在那里不会超时，我们知道php.ini 里面max_execution_time 可以设置 PHP 脚本的最大执行时间，但是，在 php-cgi(php-fpm) 中，该参数不会起效。真正能够控制 PHP 脚本最大执行时间的是 php-fpm.conf 配置文件中的request_terminate_timeout参数。\r\n\r\nrequest_terminate_timeout默认值为 0 秒，也就是说，PHP 脚本会一直执行下去。这样，当所有的 php-cgi 进程都卡在 file_get_contents() 函数时，这台 Nginx+PHP 的 WebServer 已经无法再处理新的 PHP 请求了，Nginx 将给用户返回“502 Bad Gateway”。修改该参数，设置一个 PHP 脚本最大执行时间是必要的，但是，治标不治本。例如改成 30s，如果发生 file_get_contents() 获取网页内容较慢的情况，这就意味着 150 个 php-cgi 进程，每秒钟只能处理 5 个请求，WebServer 同样很难避免\"502 Bad Gateway\"。解决办法是request_terminate_timeout设置为10s或者一个合理的值，或者给file_get_contents加一个超时参数。\r\n\r\n7.   <span class=\"s1\">process</span><span class=\"s2\">_control_timeout = 0   ，除了官方的翻译之后，未见到任何解释</span>\r\n\r\n8. syslog_facility (注释翻译)\r\n\r\nsyslog  工具 是用来明确如何记录日志信息的，使syslogd可以处理来自不同程序下的不同日志信息,syslog可能的值有（ex  daemon equiv LOG_DAEMON）,默认选择了daemon。\r\n\r\nsyslogd 是linux下面的处理日志信息的软件/命令 <a title=\" Linux / Unix Command: syslogd\" href=\"http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm\">http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm</a> ，syslog应该是和syslogd进行交互的，处理日志信息的。\r\n\r\n这里的facility具体是指LOG_AUTH(安全/授权消息)，LOG_AUTHPRIV(安全/授权消息（私用）)，LOG_CRON（cron守护进程），LOG_DAEMON（系统守护进程），LOG_FTP（FTP守护进程）,LOG_KERN（内核进程），LOG_LOCAL0(本地使用)，LOG_LPR(行式打印机系统)，LOG_MAIL(邮件系统)，LOG_NEWS(网络新闻系统)，LOG_SYSLOG(SYSLOG内部产生的消息)，LOG_USER(任意的用户消息)，LOG_UUCP(UUCP系统)（摘自UNIX网络编程第一卷第三版313页）\r\n\r\n9.syslog_ident  是追加在所有的信息之前的，如果你在同一台服务器上面，有多个fpm实例运行，可以修改这个名字，满足需求。\r\n\r\n10.Log_level 可能的值是alert,error,warning,notice,debug,默认值notice.\r\n\r\n11,\r\n\r\n&nbsp;','php-fpm.conf 参数详解','','inherit','open','open','','146-revision-v1','','','2015-03-20 11:35:52','2015-03-20 11:35:52','',146,'http://unasm.sinaapp.com/?p=222',0,'revision','',0),(223,1,'2015-03-20 14:58:29','2015-03-20 14:58:29','<code>user = www</code>\r\n\r\ngroup = www\r\n这两个参数向来要和nginx的user参数保持一致，表示php-fpm运行的身份和所说的用户组\r\n\r\n2. listen 有两种选择  listen = 127.0.0.1:9000 或者是unix:/path/to/filename.sock  ,两者的区别可以具体参见：<a href=\"http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/\">http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/</a>  ，简而言之，涉及到internet socket和 unix domain socket 之间的差异，本机建议通过sock 文件，实现nginx和php-fpm之间的通信，如果涉及到其他的机器，则必须是ip:port的方式。\r\n\r\n3  . listen.backlog = 65535    这里涉及到 半队列长度的概念 ，与tcp的三次握手协议有关。<a href=\"http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C\">http://www.piao2010.com/linux%E8%AF%A1%E5%BC%82%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5syn_recv%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E4%BA%8C</a>\r\n\r\n4. pm (直接翻译的配置文件的注释)\r\n选择如何控制子进程的数量\r\n<ul>\r\n	<li>静态方式 - 固定数量（pm.max_children）的子进程。</li>\r\n	<li>动态方式 - 子进程的数量是根据下面的指标动态确定的，在这种管理方向中，至少有一个子进程\r\n<ul>\r\n	<li>pm.max_children - 同时生成的最大的子进程数量</li>\r\n	<li>pm.start_servers - 开始运行的时候创建的额子进程的数量</li>\r\n	<li>pm.min_spare_servers - 出于闲置状态的子进程的最小数量，如果闲置状态数小于这个数量，则创建新的子进程</li>\r\n	<li>pm.max_spare_servers - 出于闲置状态的子进程的最大数量，如果闲置状态数大于这个数量，则杀掉多余的进程</li>\r\n</ul>\r\n</li>\r\n	<li>按需处理 - 开始的时候不创建子进程，子进程会在请求连接的时候fork，下面的参数会被用到：\r\n<ul>\r\n	<li>pm.max_children - 同时创建的最大的子进程数量，</li>\r\n	<li>pm.process_idle_timeout - 子进程在闲置多久之后，会被杀掉，注意，这个值是必须有的</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n5. pid - 这个意义不大，主要是说以后这个.pdf文件里面的id号归这个进程使用，算是固定下来运行时候的pid号码吧\r\n\r\n6.  <span class=\"s1\">request_</span><span class=\"s2\">terminate</span><span class=\"s1\">_timeout = 30   请求的最大终止时间，默认单位为妙</span>\r\n\r\n如果file_get_contents请求的远程资源如果反应过慢，file_get_contents就会一直卡在那里不会超时，我们知道php.ini 里面max_execution_time 可以设置 PHP 脚本的最大执行时间，但是，在 php-cgi(php-fpm) 中，该参数不会起效。真正能够控制 PHP 脚本最大执行时间的是 php-fpm.conf 配置文件中的request_terminate_timeout参数。\r\n\r\nrequest_terminate_timeout默认值为 0 秒，也就是说，PHP 脚本会一直执行下去。这样，当所有的 php-cgi 进程都卡在 file_get_contents() 函数时，这台 Nginx+PHP 的 WebServer 已经无法再处理新的 PHP 请求了，Nginx 将给用户返回“502 Bad Gateway”。修改该参数，设置一个 PHP 脚本最大执行时间是必要的，但是，治标不治本。例如改成 30s，如果发生 file_get_contents() 获取网页内容较慢的情况，这就意味着 150 个 php-cgi 进程，每秒钟只能处理 5 个请求，WebServer 同样很难避免\"502 Bad Gateway\"。解决办法是request_terminate_timeout设置为10s或者一个合理的值，或者给file_get_contents加一个超时参数。\r\n\r\n7.   <span class=\"s1\">process</span><span class=\"s2\">_control_timeout = 0   ，除了官方的翻译之后，未见到任何解释</span>\r\n\r\n8. syslog_facility (注释翻译)\r\n\r\nsyslog  工具 是用来明确如何记录日志信息的，使syslogd可以处理来自不同程序下的不同日志信息,syslog可能的值有（ex  daemon equiv LOG_DAEMON）,默认选择了daemon。\r\n\r\nsyslogd 是linux下面的处理日志信息的软件/命令 <a title=\" Linux / Unix Command: syslogd\" href=\"http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm\">http://linux.about.com/od/commands/l/blcmdl8_syslogd.htm</a> ，syslog应该是和syslogd进行交互的，处理日志信息的。\r\n\r\n这里的facility具体是指LOG_AUTH(安全/授权消息)，LOG_AUTHPRIV(安全/授权消息（私用）)，LOG_CRON（cron守护进程），LOG_DAEMON（系统守护进程），LOG_FTP（FTP守护进程）,LOG_KERN（内核进程），LOG_LOCAL0(本地使用)，LOG_LPR(行式打印机系统)，LOG_MAIL(邮件系统)，LOG_NEWS(网络新闻系统)，LOG_SYSLOG(SYSLOG内部产生的消息)，LOG_USER(任意的用户消息)，LOG_UUCP(UUCP系统)（摘自UNIX网络编程第一卷第三版313页）\r\n\r\n9.syslog_ident  是追加在所有的信息之前的，如果你在同一台服务器上面，有多个fpm实例运行，可以修改这个名字，满足需求。\r\n\r\n10.Log_level 可能的值是alert,error,warning,notice,debug,默认值notice.\r\n\r\n11,emergency_restart_threshold 如果一定时间内以SIGSEGV或者SIGBUS状态退出的子进程达到该值的两，fpm就会重启，0表示关闭。\r\n\r\n&nbsp;','php-fpm.conf 参数详解','','inherit','open','open','','146-revision-v1','','','2015-03-20 14:58:29','2015-03-20 14:58:29','',146,'http://unasm.sinaapp.com/?p=223',0,'revision','',0),(226,1,'2015-03-26 06:47:13','2015-03-26 06:47:13','<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">   </span>upstream websocket {<span class=\"Apple-converted-space\">             </span></span> <span class=\"s1\"><span class=\"Apple-converted-space\">                              </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                                      </span></span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">         </span></span><span class=\"s6\">#负载均衡</span><span class=\"s1\"> <span class=\"Apple-converted-space\">                   </span></span> <span class=\"s1\"><span class=\"Apple-converted-space\">                              </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                                    </span></span></p>\r\n<p class=\"p1\"><span class=\"s1\">          server 127.0.0.1:8030 weight=</span><span class=\"s2\">5</span><span class=\"s1\">;                   </span><span class=\"s4\">                                                                                                  </span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">          </span>server 127.0.0.1:8040 weight=</span><span class=\"s2\">1</span><span class=\"s1\">; <span class=\"Apple-converted-space\">                     </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                        </span></span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span>} <span class=\"Apple-converted-space\">                               </span></span> <span class=\"s1\"><span class=\"Apple-converted-space\">                         </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                                   </span></span></p>\r\n<p class=\"p1\"><span class=\"s1\">server {<span class=\"Apple-converted-space\">                         </span></span> <span class=\"s1\"><span class=\"Apple-converted-space\">                            </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                                      </span></span></p>\r\n<p class=\"p1\"><span class=\"s1\">        listen 8020;<span class=\"Apple-converted-space\">                 </span></span> <span class=\"s1\"><span class=\"Apple-converted-space\">                             </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                                  </span></span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">         </span></span><span class=\"s1\"><span class=\"Apple-converted-space\"> </span>location /chat/ { <span class=\"Apple-converted-space\">           </span></span> <span class=\"s1\"><span class=\"Apple-converted-space\">             </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                                </span></span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>proxy_pass http://web</span><span class=\"s2\">s</span><span class=\"s1\">ocket;<span class=\"Apple-converted-space\">                      </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                                    </span></span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s1\"><span class=\"Apple-converted-space\">        </span></span><span class=\"s6\"># <span class=\"Apple-converted-space\">      </span>proxy_pass http://127</span><span class=\"s2\">.</span><span class=\"s6\">0.0.1:</span><span class=\"s7\">8010</span><span class=\"s6\">;</span><span class=\"s1\"> <span class=\"Apple-converted-space\">           </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                            </span></span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>proxy_http_version 1.</span><span class=\"s2\">1</span><span class=\"s1\">; <span class=\"Apple-converted-space\">                       </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                                    </span></span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>proxy_set_header Upgr</span><span class=\"s2\">a</span><span class=\"s1\">de $http_upgrade; <span class=\"Apple-converted-space\">           </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                          </span></span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>proxy_set_header Conn</span><span class=\"s2\">e</span><span class=\"s1\">ction $connection_upgrade;</span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                             </span></span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>} <span class=\"Apple-converted-space\">                       </span></span> <span class=\"s1\"><span class=\"Apple-converted-space\">                        </span></span><span class=\"s4\"><span class=\"Apple-converted-space\">                                                                                        </span></span></p>\r\n<p class=\"p2\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s4\">}<span class=\"Apple-converted-space\">                   </span></span></p>\r\n<p class=\"p2\">上面就是一个最简单的负载均衡，</p>\r\n<p class=\"p2\">首先server监听8020端口，然后将请求分发给websocket ，然后socket下面是一个服务器集群，分别是8030和8040端口，两台端口分别独立处理请求，可以称之为8020是一个反向代理，8030,和8040的nodejs服务器，是后端服务器集群。</p>','nginx配置之upstream 案例解释','','inherit','open','open','','225-revision-v1','','','2015-03-26 06:47:13','2015-03-26 06:47:13','',225,'http://unasm.sinaapp.com/?p=226',0,'revision','',0),(228,1,'2015-04-01 13:25:28','2015-04-01 13:25:28','INNODB Master Thread 内部由多个循环组成，主循环(loop)，后台循环(backgroup loop)，刷新循环(flush loop)，暂停循环（suspend loop），Master Thread 会根据数据库的运行状态在loop , background loop , flush loop,和suspend loop之间切换，Loop被称为主循环，大部分操作都是在这个循环中的，包括两个大部分的操作，每秒的操作和每10s的操作。\r\n\r\n每秒的操作包括：\r\n<ol>\r\n	<li>日志缓冲刷新到磁盘，即使这个事务还没有提交（总是）；</li>\r\n	<li>合并插入缓冲（可能）；</li>\r\n	<li>之多刷新100个Innodb的缓冲池中的脏页到磁盘（可能）；</li>\r\n	<li>如果当前没有用户活动，则切换到后台循环中（可能）；</li>\r\n</ol>\r\n即使某个事务还没有提交，Innodb仍然每秒将重做日志缓冲中的内容刷新到重做日志文件（这个是默认的配置，可以修改成刷新到系统文件缓冲和提交的时候刷新到日志文件），这个可以解释为什么再大的事务，提交的时间也是很短的。\r\n\r\n合并插入缓冲不是每秒都会发生的。Innodb 会判断前一秒内发生的IO次数是否小于5次，如果小于5次，Innodb会认为当前压力很小，可以执行合并插入缓冲的操作。\r\n\r\n刷新100个脏页的操作也不是每秒都发生的，Innodb会判断当前缓冲池中的脏页比例是否超过了配置文件中的innodb_max_dirty_pages_pct这个参数，如果超过了这个阀值，Innodb存储引擎认为需要做磁盘的操作，将100个脏页写入磁盘中。\r\n\r\n每10s的操作包括如下内容：\r\n<ol>\r\n	<li>合并最多五个插入缓冲（总是）；</li>\r\n	<li>将日志缓冲刷新到磁盘（总是）；</li>\r\n	<li>删除无用的Undo也（总是）；</li>\r\n	<li>刷新100个或者0个脏页到磁盘</li>\r\n</ol>\r\n在10s的操作中，Innodb会判断过去的10s之内磁盘的IO操作是否小于200次，如果是，Innodb 会认为当前有足够的磁盘Innodb，因此将100个脏页刷新到磁盘，接着Innodb会合并插入缓冲，不同于每秒可能发生的合并插入缓冲的操作，这次的合并插入缓冲总会在这个阶段进行，之后，INNODB存储引擎会再进行一次将日志缓冲刷新到磁盘的操作。\r\n接着Innodb存储引擎会进一步执行full purge 操作，即删除无用的Undo也，对表进行update，delete 这类操作时，原来的行被标记为删除，因为一致性读得关系，需要保留这些行版本的信息。但是fullpurge的过程中，Innodb存储引擎会判断当前事务中已被删除的行是否可以删除，有时候还可能有查询操作需要读取之前的版本的undo信息，如果可以删除，Innodb会立即将其删除。在每次purge的时候，每次会尝试回收尽可能的undo页。\r\n然后Innodb 存储引擎会判断缓冲池中脏页的比例，如果有超过70%的脏页，则刷新100个脏页到磁盘，如果磁盘脏页比例小于70%，则只需要刷新10%的脏页到磁盘。\r\n\r\nbackground loop 如果没有用户活动，或者数据库关闭，就会切换到这个循环，background loop 执行以下操作。\r\n<ol>\r\n	<li>删除无用的Undo页</li>\r\n	<li>合并20个插入缓冲</li>\r\n	<li>调回主循环。</li>\r\n	<li>不断刷新到100页，知道符合条件。</li>\r\n</ol>\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n摘录自《MySQL 技术内幕 InnoDB存储引擎》第49页','innodb 主线程操作','','publish','open','open','','innodb-%e4%b8%bb%e7%ba%bf%e7%a8%8b%e6%93%8d%e4%bd%9c','','','2015-04-01 13:26:38','2015-04-01 13:26:38','',0,'http://unasm.sinaapp.com/?p=228',0,'post','',0),(229,1,'2015-04-01 13:25:28','2015-04-01 13:25:28','INNODB Master Thread 内部由多个循环组成，主循环(loop)，后台循环(backgroup loop)，刷新循环(flush loop)，暂停循环（suspend loop），Master Thread 会根据数据库的运行状态在loop , background loop , flush loop,和suspend loop之间切换，Loop被称为主循环，大部分操作都是在这个循环中的，包括两个大部分的操作，每秒的操作和每10s的操作。\r\n\r\n每秒的操作包括：\r\n<ol>\r\n	<li>日志缓冲刷新到磁盘，即使这个事务还没有提交（总是）；</li>\r\n	<li>合并插入缓冲（可能）；</li>\r\n	<li>之多刷新100个Innodb的缓冲池中的脏页到磁盘（可能）；</li>\r\n	<li>如果当前没有用户活动，则切换到后台循环中（可能）；</li>\r\n</ol>\r\n即使某个事务还没有提交，Innodb仍然每秒将重做日志缓冲中的内容刷新到重做日志文件（这个是默认的配置，可以修改成刷新到系统文件缓冲和提交的时候刷新到日志文件），这个可以解释为什么再大的事务，提交的时间也是很短的。\r\n\r\n合并插入缓冲不是每秒都会发生的。Innodb 会判断前一秒内发生的IO次数是否小于5次，如果小于5次，Innodb会认为当前压力很小，可以执行合并插入缓冲的操作。\r\n\r\n刷新100个脏页的操作也不是每秒都发生的，Innodb会判断当前缓冲池中的脏页比例是否超过了配置文件中的innodb_max_dirty_pages_pct这个参数，如果超过了这个阀值，Innodb存储引擎认为需要做磁盘的操作，将100个脏页写入磁盘中。\r\n\r\n每10s的操作包括如下内容：\r\n<ol>\r\n	<li>合并最多五个插入缓冲（总是）；</li>\r\n	<li>将日志缓冲刷新到磁盘（总是）；</li>\r\n	<li>删除无用的Undo也（总是）；</li>\r\n	<li>刷新100个或者0个脏页到磁盘</li>\r\n</ol>\r\n在10s的操作中，Innodb会判断过去的10s之内磁盘的IO操作是否小于200次，如果是，Innodb 会认为当前有足够的磁盘Innodb，因此将100个脏页刷新到磁盘，接着Innodb会合并插入缓冲，不同于每秒可能发生的合并插入缓冲的操作，这次的合并插入缓冲总会在这个阶段进行，之后，INNODB存储引擎会再进行一次将日志缓冲刷新到磁盘的操作。\r\n接着Innodb存储引擎会进一步执行full purge 操作，即删除无用的Undo也，对表进行update，delete 这类操作时，原来的行被标记为删除，因为一致性读得关系，需要保留这些行版本的信息。但是fullpurge的过程中，Innodb存储引擎会判断当前事务中已被删除的行是否可以删除，有时候还可能有查询操作需要读取之前的版本的undo信息，如果可以删除，Innodb会立即将其删除。在每次purge的时候，每次会尝试回收尽可能的undo页。\r\n然后Innodb 存储引擎会判断缓冲池中脏页的比例，如果有超过70%的脏页，则刷新100个脏页到磁盘，如果磁盘脏页比例小于70%，则只需要刷新10%的脏页到磁盘。\r\n\r\nbackground loop 如果没有用户活动，或者数据库关闭，就会切换到这个循环，background loop 执行以下操作。\r\n<ol>\r\n	<li>删除无用的Undo页</li>\r\n	<li>合并20个插入缓冲</li>\r\n	<li>调回主循环。</li>\r\n	<li>不断刷新到100页，知道符合条件。</li>\r\n</ol>\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n摘录自《MySQL 技术内幕 InnoDB存储引擎》第49页','innodb 主线程操作','','inherit','open','open','','228-revision-v1','','','2015-04-01 13:25:28','2015-04-01 13:25:28','',228,'http://unasm.sinaapp.com/?p=229',0,'revision','',0),(231,1,'2015-04-10 08:25:52','2015-04-10 08:25:52','1：cgdb分为上下两栏，上面类似于vi窗口（就称之为vi窗口吧）显示对应的代码，下面gdb窗口进行调试操作，上下窗口连动，也就是说vi窗口里显示的代码会跟随gdb窗口里调试的位置同步进退。\r\n2：按esc键可让输入焦点进入到vi窗口，再按i键回到gdb窗口。按其它键也可以进入到vi窗口，比如小键盘上的按键（如果此时Num Lock处于打开状态）。\r\n3：vi窗口可进行的操作包括，上下左右翻动，按冒号（:）开始进行设置（具体设置命令可以参考<a href=\"http://cgdb.sourceforge.net/docs/cgdb.html/Configuring-CGDB.html#Configuring-CGDB\">这里</a>），比如设置上面窗口全屏显示（即下面的gdb窗口被隐藏），按斜干（/）为在当前文件内搜索，按o键可以显示当前程序关联的文件列表，按空格则在当前位置设置/取消断点。\r\n4：gdb窗口里的相关操作无法多说，有耐心看到这里的应该都会gdb或知道在哪看更详细的gdb操作介绍。\r\n最后，执行cgdb可带的命令行参数和gdb类似，比如-p等。','cgdb的使用','','publish','open','open','','cgdb%e7%9a%84%e4%bd%bf%e7%94%a8','','','2015-04-10 08:26:47','2015-04-10 08:26:47','',0,'http://unasm.sinaapp.com/?p=231',0,'post','',0),(232,1,'2015-04-10 08:25:52','2015-04-10 08:25:52','1：cgdb分为上下两栏，上面类似于vi窗口（就称之为vi窗口吧）显示对应的代码，下面gdb窗口进行调试操作，上下窗口连动，也就是说vi窗口里显示的代码会跟随gdb窗口里调试的位置同步进退。\r\n2：按esc键可让输入焦点进入到vi窗口，再按i键回到gdb窗口。按其它键也可以进入到vi窗口，比如小键盘上的按键（如果此时Num Lock处于打开状态）。\r\n3：vi窗口可进行的操作包括，上下左右翻动，按冒号（:）开始进行设置（具体设置命令可以参考<a href=\"http://cgdb.sourceforge.net/docs/cgdb.html/Configuring-CGDB.html#Configuring-CGDB\">这里</a>），比如设置上面窗口全屏显示（即下面的gdb窗口被隐藏），按斜干（/）为在当前文件内搜索，按o键可以显示当前程序关联的文件列表，按空格则在当前位置设置/取消断点。\r\n4：gdb窗口里的相关操作无法多说，有耐心看到这里的应该都会gdb或知道在哪看更详细的gdb操作介绍。\r\n最后，执行cgdb可带的命令行参数和gdb类似，比如-p等。','cgdb的使用','','inherit','open','open','','231-revision-v1','','','2015-04-10 08:25:52','2015-04-10 08:25:52','',231,'http://unasm.sinaapp.com/?p=232',0,'revision','',0),(243,1,'2015-04-29 07:08:56','2015-04-29 07:08:56','求最长回文子串的问题。是一个很经典的题目。我这里通过在n^2的算法基础上做了优化过的。源码如下\r\n\r\nhttps://github.com/unasm/utils/blob/master/palindromic.c\r\n\r\n首先，如kmp算法一般，首先对字符串进行扫描，在pos中记录每一个相同字符的前一个字符位置，第一个为-1，\r\n\r\n<code>\r\nfor (len = 0; s[len] != \'\\0\'; len++) {\r\npos[len] = hash[s[len]];\r\nhash[s[len]] = len;\r\n}\r\n</code>\r\n这里将pos中保存前一个字符的位置，方便快速跳过无用的字符。\r\n\r\n这里利用了一个回文字符串的性质，就是如果abba是回文字符串，那下标 a+a = b+b的下标，所以根据dp的思想，判断两个字符是不是可以构成回文字符串，需要判断两个条件就是了，第一，这两个字符相同，第二个，题目之间包裹的字符串构成回文字符串，而判断中间构成回文字符串的语句就是\r\n\r\n<span class=\"pl-k\">1 . if</span>(i - last &lt;= <span class=\"pl-c1\">2)  如果两个相同字符之间只有一个或者没有字符，则中间是回文子串，如果大于1个，则 i -  hash[i + last] = 1，也就是说，两个字符的中心必须有过回文字符串，并且，上一个构成回文字符串的位置必须和现在的字符挨着，hash[i+last]中记录着上一个以i+last为中心的回文串的大值所处的位置，如果添加两个之后依旧构成回文串，则他们必须挨着，</span>\r\n\r\n<span class=\"pl-c1\">最后可以根据 当前的最大位置和两者相加的结果判断出来回文串的长度。</span>\r\n\r\n从以上可以看出来，其实就是在o(n^2)的基础上，加了一个快读跳过的设置而已','leetcode 第五题： Longest Palindromic Substring ','','publish','open','open','','leetcode-%e7%ac%ac%e4%ba%94%e9%a2%98%ef%bc%9a-longest-palindromic-substring','','','2015-04-29 07:08:56','2015-04-29 07:08:56','',0,'http://unasm.sinaapp.com/?p=243',0,'post','',0),(235,1,'2015-04-14 06:55:47','2015-04-14 06:55:47','这个题目有点意思，最初我以为是动态规划，从左到右，从上到下一次扫一遍，然后到最后得到其中最小的值，到最后，我发现，这样不行，因为这个样子的dp有两个值需要维护，一个是到达i,j点的时候剩余的生命值left，一个是在到达i,j途遇到的最小的生命值min，在dp判断条件的时候，就会面临很判断的局面，比如{left= 10,min= -12,left = 1,min=-13},那两条路线中，那条才是最优的呢？显然根据终点的不同，优劣的评判也是不一样的，也就是说，正面dp是不行的。\r\n\r\n放弃这个时候，开始想bfs，但是不行，因为每一步出去，都有两个选择，如果m= 100,n=100,这个矩阵不算大，然后bfs的复杂度就是2^(200)了，就算加上剪枝，不能达到目的。\r\n\r\n网上标准的解法是从终点开始，维护到达终点时候，所需要的最小的生命值，最小值为1，这样就简单了很多，对于一个i,j来说，到达终点所需的最小生命值等于本房间内消耗的生命值   加  向右或者向下两条路上消耗的生命值的最小值，这样维护的值只有一个，可以进行dp了','174.leetcode Dungeon Game ','','publish','open','open','','leetcode-dungeon-game','','','2015-04-14 06:56:05','2015-04-14 06:56:05','',0,'http://unasm.sinaapp.com/?p=235',0,'post','',0),(236,1,'2015-04-14 06:55:47','2015-04-14 06:55:47','这个题目有点意思，最初我以为是动态规划，从左到右，从上到下一次扫一遍，然后到最后得到其中最小的值，到最后，我发现，这样不行，因为这个样子的dp有两个值需要维护，一个是到达i,j点的时候剩余的生命值left，一个是在到达i,j途遇到的最小的生命值min，在dp判断条件的时候，就会面临很判断的局面，比如{left= 10,min= -12,left = 1,min=-13},那两条路线中，那条才是最优的呢？显然根据终点的不同，优劣的评判也是不一样的，也就是说，正面dp是不行的。\r\n\r\n放弃这个时候，开始想bfs，但是不行，因为每一步出去，都有两个选择，如果m= 100,n=100,这个矩阵不算大，然后bfs的复杂度就是2^(200)了，就算加上剪枝，不能达到目的。\r\n\r\n网上标准的解法是从终点开始，维护到达终点时候，所需要的最小的生命值，最小值为1，这样就简单了很多，对于一个i,j来说，到达终点所需的最小生命值等于本房间内消耗的生命值   加  向右或者向下两条路上消耗的生命值的最小值，这样维护的值只有一个，可以进行dp了','leetcode Dungeon Game ','','inherit','open','open','','235-revision-v1','','','2015-04-14 06:55:47','2015-04-14 06:55:47','',235,'http://unasm.sinaapp.com/?p=236',0,'revision','',0),(237,1,'2015-04-14 06:56:05','2015-04-14 06:56:05','这个题目有点意思，最初我以为是动态规划，从左到右，从上到下一次扫一遍，然后到最后得到其中最小的值，到最后，我发现，这样不行，因为这个样子的dp有两个值需要维护，一个是到达i,j点的时候剩余的生命值left，一个是在到达i,j途遇到的最小的生命值min，在dp判断条件的时候，就会面临很判断的局面，比如{left= 10,min= -12,left = 1,min=-13},那两条路线中，那条才是最优的呢？显然根据终点的不同，优劣的评判也是不一样的，也就是说，正面dp是不行的。\r\n\r\n放弃这个时候，开始想bfs，但是不行，因为每一步出去，都有两个选择，如果m= 100,n=100,这个矩阵不算大，然后bfs的复杂度就是2^(200)了，就算加上剪枝，不能达到目的。\r\n\r\n网上标准的解法是从终点开始，维护到达终点时候，所需要的最小的生命值，最小值为1，这样就简单了很多，对于一个i,j来说，到达终点所需的最小生命值等于本房间内消耗的生命值   加  向右或者向下两条路上消耗的生命值的最小值，这样维护的值只有一个，可以进行dp了','174.leetcode Dungeon Game ','','inherit','open','open','','235-revision-v1','','','2015-04-14 06:56:05','2015-04-14 06:56:05','',235,'http://unasm.sinaapp.com/?p=237',0,'revision','',0),(238,1,'2015-04-15 09:24:21','2015-04-15 09:24:21','<pre id=\"recommend-content-365978365\" class=\"recommend-text mb-10\">SQL语言共分为四大类：数据查询语言DQL，数据操纵语言DML，\r\n数据定义语言DDL，数据控制语言DCL。\r\n\r\n1 数据查询语言DQL\r\n数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE\r\n子句组成的查询块：\r\nSELECT &lt;字段名表&gt;\r\nFROM &lt;表或视图名&gt;\r\nWHERE &lt;查询条件&gt;\r\n\r\n2 数据操纵语言\r\n数据操纵语言DML主要有三种形式：\r\n1) 插入：INSERT\r\n2) 更新：UPDATE\r\n3) 删除：DELETE\r\n\r\n3 数据定义语言DDL\r\n数据定义语言DDL用来创建数据库中的各种对象-----表、视图、\r\n索引、同义词、聚簇等如：\r\nCREATE TABLE/VIEW/INDEX/SYN/CLUSTER\r\n| | | | |\r\n表 视图 索引 同义词 簇\r\n\r\n4 数据控制语言DCL\r\n数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制\r\n数据库操纵事务发生的时间及效果，对数据库实行监视等。如：\r\n1) GRANT：授权。\r\n2) ROLLBACK [WORK] TO [SAVEPOINT]：回退到某一点。\r\n回滚---ROLLBACK\r\n回滚命令使数据库状态回到上次最后提交的状态。其格式为：\r\nSQL&gt;ROLLBACK;\r\n3) COMMIT [WORK]：提交。\r\n在数据库的插入、删除和修改操作时，只有当事务在提交到数据\r\n库时才算完成。在事务提交前，只有操作数据库的这个人才能有权看\r\n到所做的事情，别人只有在最后提交完成后才可以看到。\r\n提交数据有三种类型：显式提交、隐式提交及自动提交。下面分\r\n别说明这三种类型。\r\n(1) 显式提交\r\n用COMMIT命令直接完成的提交为显式提交。其格式为：\r\nSQL&gt;COMMIT；\r\n(2) 隐式提交\r\n用SQL命令间接完成的提交为隐式提交。这些命令是：\r\nALTER，AUDIT，COMMENT，CONNECT，CREATE，DISCONNECT，DROP，\r\nEXIT，GRANT，NOAUDIT，QUIT，REVOKE，RENAME。\r\n(3) 自动提交\r\n若把AUTOCOMMIT设置为ON，则在插入、修改、删除语句执行后，\r\n系统将自动进行提交，这就是自动提交。其格式为：\r\nSQL&gt;SET AUTOCOMMIT ON；\r\n\r\n转自：http://zhidao.baidu.com/question/115195964.html</pre>','SQL语言四大类','','inherit','open','open','','205-revision-v1','','','2015-04-15 09:24:21','2015-04-15 09:24:21','',205,'http://unasm.sinaapp.com/?p=238',0,'revision','',0),(239,1,'2015-04-15 09:28:07','2015-04-15 09:28:07','<ol>\r\n	<li>一个表里面所有的varchar 字段加起来<strong>必须</strong>不能超过65532字节，推荐不超过8098个，因为一旦超过8098，占用的磁盘大小超过了一页,innodb会使用未压缩的blob页来保存，数据页会被用来保存偏移量，varchar越大，使用的blob越多，所以从效率和节省空间角度来说，不推荐超过8098.</li>\r\n	<li>char也被当做变成处理，根据字符集决定，比如同一个表，存入\'a\' 和\'他\'占用的字节是不同的</li>\r\n	<li>innodb的range 分区 查询，只能针对YEAR,TO_DAYS,TO_SECONDS,UNIX_TIMESTAMP等函数进行搜索优化，比如YEAR(date) + MONTH(date)的时候，优化器是不会搜索优化的</li>\r\n	<li>Mysql 5.5版本之前 索引的添加或者删除操作过程是这样的\r\n<ul>\r\n	<li>先创建一个临时表，表结构为alter table之后的新定义的结构</li>\r\n	<li>把原来的数据导入临时表</li>\r\n	<li>删除原表</li>\r\n	<li>把临时表重命名为原来的表</li>\r\n</ul>\r\n</li>\r\n	<li>Got error 28 from storage engine,这就是一个很无辜的错误了，或者是属于dba范畴的，磁盘空间满了，没有空间写数据了</li>\r\n</ol>','mysql 基础知识集锦','','inherit','open','open','','175-revision-v1','','','2015-04-15 09:28:07','2015-04-15 09:28:07','',175,'http://unasm.sinaapp.com/?p=239',0,'revision','',0),(240,1,'2015-04-16 07:13:23','2015-04-16 07:13:23','现在有一个需求，就是需要A表的数据，但是需要B表的补充和字段排序，也就是需要跨表查询，有三种方案\r\n<ol>\r\n	<li>连表查询，select * from A,B where A.key = B.key order by B.key1 这种方案，这种方案，简单有效。缺点是sql比较复杂，不利于索引的使用</li>\r\n	<li>第二种方案是拆分sql，分两个sql，使用编程语言控制其中的逻辑，从A中获取全部的key，然后利用 where key in()这种方式</li>\r\n</ol>\r\n经过测试在A表中灌入1W条数据，B中1W条对应的数据,\r\n\r\n第一次测试：\r\n<p class=\"p1\"><span class=\"s1\">cross table query cost time is : 14500 ms</span></p>\r\n<p class=\"p1\"><span class=\"s1\">sep in query cost time is : 765 ms</span></p>\r\n<p class=\"p1\">第二次测试：</p>\r\n<p class=\"p1\"><span class=\"s1\">cross table query cost time is : 13739 ms</span></p>\r\n<p class=\"p1\"><span class=\"s1\">sep in query cost time is : 431 ms</span></p>\r\n<p class=\"p1\">第三次测试：</p>\r\n<p class=\"p1\"><span class=\"s1\">cross table query cost time is : 13902 ms</span></p>\r\n<p class=\"p1\"><span class=\"s1\">sep in query cost time is : 745 ms</span></p>\r\n<p class=\"p1\">由此可见拆分sql，是更有利的方案。</p>\r\n<p class=\"p1\">细究原因，根据《高性能mysql》209页介绍，分解关联查询的优势有：</p>\r\n\r\n<ol>\r\n	<li class=\"p1\">缓存的效率更高</li>\r\n	<li class=\"p1\">单个的查询锁竞争更少</li>\r\n	<li class=\"p1\">实现了哈希关联</li>\r\n</ol>','数据库 跨表查询和分条多次查询对比','','publish','open','open','','%e6%95%b0%e6%8d%ae%e5%ba%93-%e8%b7%a8%e8%a1%a8%e6%9f%a5%e8%af%a2%e5%92%8c%e5%88%86%e6%9d%a1%e5%a4%9a%e6%ac%a1%e6%9f%a5%e8%af%a2%e5%af%b9%e6%af%94','','','2015-04-16 07:13:23','2015-04-16 07:13:23','',0,'http://unasm.sinaapp.com/?p=240',0,'post','',0),(241,1,'2015-04-16 07:13:23','2015-04-16 07:13:23','现在有一个需求，就是需要A表的数据，但是需要B表的补充和字段排序，也就是需要跨表查询，有三种方案\r\n<ol>\r\n	<li>连表查询，select * from A,B where A.key = B.key order by B.key1 这种方案，这种方案，简单有效。缺点是sql比较复杂，不利于索引的使用</li>\r\n	<li>第二种方案是拆分sql，分两个sql，使用编程语言控制其中的逻辑，从A中获取全部的key，然后利用 where key in()这种方式</li>\r\n</ol>\r\n经过测试在A表中灌入1W条数据，B中1W条对应的数据,\r\n\r\n第一次测试：\r\n<p class=\"p1\"><span class=\"s1\">cross table query cost time is : 14500 ms</span></p>\r\n<p class=\"p1\"><span class=\"s1\">sep in query cost time is : 765 ms</span></p>\r\n<p class=\"p1\">第二次测试：</p>\r\n<p class=\"p1\"><span class=\"s1\">cross table query cost time is : 13739 ms</span></p>\r\n<p class=\"p1\"><span class=\"s1\">sep in query cost time is : 431 ms</span></p>\r\n<p class=\"p1\">第三次测试：</p>\r\n<p class=\"p1\"><span class=\"s1\">cross table query cost time is : 13902 ms</span></p>\r\n<p class=\"p1\"><span class=\"s1\">sep in query cost time is : 745 ms</span></p>\r\n<p class=\"p1\">由此可见拆分sql，是更有利的方案。</p>\r\n<p class=\"p1\">细究原因，根据《高性能mysql》209页介绍，分解关联查询的优势有：</p>\r\n\r\n<ol>\r\n	<li class=\"p1\">缓存的效率更高</li>\r\n	<li class=\"p1\">单个的查询锁竞争更少</li>\r\n	<li class=\"p1\">实现了哈希关联</li>\r\n</ol>','数据库 跨表查询和分条多次查询对比','','inherit','open','open','','240-revision-v1','','','2015-04-16 07:13:23','2015-04-16 07:13:23','',240,'http://unasm.sinaapp.com/?p=241',0,'revision','',0),(244,1,'2015-04-29 07:08:56','2015-04-29 07:08:56','求最长回文子串的问题。是一个很经典的题目。我这里通过在n^2的算法基础上做了优化过的。源码如下\r\n\r\nhttps://github.com/unasm/utils/blob/master/palindromic.c\r\n\r\n首先，如kmp算法一般，首先对字符串进行扫描，在pos中记录每一个相同字符的前一个字符位置，第一个为-1，\r\n\r\n<code>\r\nfor (len = 0; s[len] != \'\\0\'; len++) {\r\npos[len] = hash[s[len]];\r\nhash[s[len]] = len;\r\n}\r\n</code>\r\n这里将pos中保存前一个字符的位置，方便快速跳过无用的字符。\r\n\r\n这里利用了一个回文字符串的性质，就是如果abba是回文字符串，那下标 a+a = b+b的下标，所以根据dp的思想，判断两个字符是不是可以构成回文字符串，需要判断两个条件就是了，第一，这两个字符相同，第二个，题目之间包裹的字符串构成回文字符串，而判断中间构成回文字符串的语句就是\r\n\r\n<span class=\"pl-k\">1 . if</span>(i - last &lt;= <span class=\"pl-c1\">2)  如果两个相同字符之间只有一个或者没有字符，则中间是回文子串，如果大于1个，则 i -  hash[i + last] = 1，也就是说，两个字符的中心必须有过回文字符串，并且，上一个构成回文字符串的位置必须和现在的字符挨着，hash[i+last]中记录着上一个以i+last为中心的回文串的大值所处的位置，如果添加两个之后依旧构成回文串，则他们必须挨着，</span>\r\n\r\n<span class=\"pl-c1\">最后可以根据 当前的最大位置和两者相加的结果判断出来回文串的长度。</span>\r\n\r\n从以上可以看出来，其实就是在o(n^2)的基础上，加了一个快读跳过的设置而已','leetcode 第五题： Longest Palindromic Substring ','','inherit','open','open','','243-revision-v1','','','2015-04-29 07:08:56','2015-04-29 07:08:56','',243,'http://unasm.sinaapp.com/?p=244',0,'revision','',0),(245,1,'2015-05-05 09:10:42','2015-05-05 09:10:42','Given <i>n</i> non-negative integers <i>a<sub>1</sub></i>, <i>a<sub>2</sub></i>, ..., <i>a<sub>n</sub></i>, where each represents a point at coordinate (<i>i</i>, <i>a<sub>i</sub></i>). <i>n</i> vertical lines are drawn such that the two endpoints of line <i>i</i> is at (<i>i</i>, <i>a<sub>i</sub></i>) and (<i>i</i>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\r\n\r\nNote: You may not slant the container.\r\n\r\n&nbsp;\r\n\r\n这个题目苦思冥想半个下午，还是想不到正确解法，除了1/2 * N^2的，就没有了，看到了标准解法之后，证明了半个小时，总算明白了，借来的答案如下\r\n,可以看到，就是首先选择最边上的两个，然后将其中短的向内移动，寻找更大的面积，因为如果这个时候，如果选择移动右边的长边，无论如何得到的面积，都不可能超过目前的面积MAX，因为面积(a-b) * min(sa,sb),既然目前a-b达到最大，min(sa , sb) = sa ,无论如何移动sb,得到sb1，如果sb1 &gt; sa, 在a-b1减小的情况下，min(sa,sb1) = sa,面积依旧是减小，如果sb1 &lt; sa,那么sb1 * (a-b1) &lt; sb1 (s - b) &lt; sa(a-b)，所以移动长的边，无论如何都不能得到更大的，贪心的移动小边，寻找可能的更大的，\r\n\r\n这里有一个问题，就是贪心的寻找得到的更大的，却未必是最大的，这个就是贪心的问题，\r\n\r\nok，现在就需要证明，一定不会错过最大面积的组合sa,sb,\r\n\r\n我们假定在下面贪心的样例中第一个遇到的最大组合边（O(n)扫，每个边至少都被访问一次）为sa，那我们需要证明，在已经得到sa的情况下，程序一定会移动另一个边到Sb.\r\n\r\n我们假定，当移动到sa的时候，另一个边为sc，那么如果想将sc移动到sb，必然有sa &gt; sc,利用反证法，sc &gt; sa 是不可能的,  因为 a - c &gt; a - b ,而且sa,sb是最大组合，min(sa, sb) * a- b  &gt; min(sa,sc) * a - c 所以然有min(sa, sb) &gt; min(sa, sc),也就是min(sa,sb) &gt; sa, 这个是不可能的，和sa,sb是最大面积的设定冲突，所以必然有sa &gt; sc ,根据程序运行，sa保留，sc向内移动，寻找到sb，得到最大的，min(sb,sa) * (a - b) 是最大值，\r\n\r\n&nbsp;\r\n<pre>public class Solution {\r\n    public int maxArea(int[] height) {\r\n        if (height.length &lt;= 1)\r\n            return 0;\r\n        int max = 0;\r\n        int left = 0;\r\n        int right = height.length - 1;\r\n        while (left &lt; right) {\r\n            max = Math.max(max, (right - left) * Math.min(height[left], height[right]));\r\n            if (height[left] &lt; height[right])\r\n                left++;\r\n            else\r\n                right--;\r\n        }\r\n        return max;\r\n    }\r\n}\r\n</pre>','Container With Most Water [leetcode 11]','','publish','open','open','','container-with-most-water-leetcode-11','','','2015-05-05 09:14:15','2015-05-05 09:14:15','',0,'http://unasm.sinaapp.com/?p=245',0,'post','',0),(246,1,'2015-05-05 09:10:42','2015-05-05 09:10:42','Given <i>n</i> non-negative integers <i>a<sub>1</sub></i>, <i>a<sub>2</sub></i>, ..., <i>a<sub>n</sub></i>, where each represents a point at coordinate (<i>i</i>, <i>a<sub>i</sub></i>). <i>n</i> vertical lines are drawn such that the two endpoints of line <i>i</i> is at (<i>i</i>, <i>a<sub>i</sub></i>) and (<i>i</i>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\r\n\r\nNote: You may not slant the container.\r\n\r\n&nbsp;\r\n\r\n这个题目苦思冥想半个下午，还是想不到正确解法，除了1/2 * N^2的，就没有了，看到了标准解法之后，证明了半个小时，总算明白了，借来的答案如下\r\n,可以看到，就是首先选择最边上的两个，然后将其中短的向内移动，寻找更大的面积，因为如果这个时候，如果选择移动右边的长边，无论如何得到的面积，都不可能超过目前的面积MAX，因为面积(a-b) * min(sa,sb),既然目前a-b达到最大，min(sa , sb) = sa ,无论如何移动sb,得到sb1，如果sb1 &gt; sa, 在a-b1减小的情况下，min(sa,sb1) = sa,面积依旧是减小，如果sb1 &lt; sa,那么sb1 * (a-b1) &lt; sb1 (s - b) &lt; sa(a-b)，所以移动长的边，无论如何都不能得到更大的，贪心的移动小边，寻找可能的更大的，\r\n\r\n这里有一个问题，就是贪心的寻找得到的更大的，却未必是最大的，这个就是贪心的问题，\r\n\r\nok，现在就需要证明，一定不会错过最大面积的组合sa,sb,\r\n\r\n我们假定在下面贪心的样例中第一个遇到的最大组合边（O(n)扫，每个边至少都被访问一次）为sa，那我们需要证明，在已经得到sa的情况下，程序一定会移动另一个边到Sb.\r\n\r\n我们假定，当移动到sa的时候，另一个边为sc，那么如果想将sc移动到sb，必然有sa &gt; sc,利用反证法，sc &gt; sa 是不可能的,  因为 a - c &gt; a - b ,而且sa,sb是最大组合，min(sa, sb) * a- b  &gt; min(sa,sc) * a - c 所以然有min(sa, sb) &gt; min(sa, sc),也就是min(sa,sb) &gt; sa, 这个是不可能的，和sa,sb是最大面积的设定冲突，所以必然有sa &gt; sc ,根据程序运行，sa保留，sc向内移动，寻找到sb，得到最大的，min(sb,sa) * (a - b) 是最大值，\r\n\r\n&nbsp;\r\n<pre>public class Solution {\r\n    public int maxArea(int[] height) {\r\n        if (height.length &lt;= 1)\r\n            return 0;\r\n        int max = 0;\r\n        int left = 0;\r\n        int right = height.length - 1;\r\n        while (left &lt; right) {\r\n            max = Math.max(max, (right - left) * Math.min(height[left], height[right]));\r\n            if (height[left] &lt; height[right])\r\n                left++;\r\n            else\r\n                right--;\r\n        }\r\n        return max;\r\n    }\r\n}\r\n</pre>','Container With Most Water [leetcode 11]','','inherit','open','open','','245-revision-v1','','','2015-05-05 09:10:42','2015-05-05 09:10:42','',245,'http://unasm.sinaapp.com/?p=246',0,'revision','',0),(313,1,'2015-06-17 03:22:17','2015-06-17 03:22:17','<code>\r\nhttp://club.baby.sina.com.cn/pm.php?action=send&amp;uid=1066572445%df%27%20and%20sleep(10)--+\r\n</code>\r\n上面的url就是一个最简单的sql注入例子，解决方案也很简单，就是对uid进行判断，如果不是整数就输出错误就好了。不过，php代码不是完全没有做安全过滤，discuz通过addslashes 对输入的数据做了一定程度的检验，但是被通过urlencode 的方式绕过了，%df%27%20and%20 转义回来之后 就是 ?\' and  的意思，也即是sql的\'被关闭了，当然，这个只是最简单的注入','一个初级的sql注入','','inherit','open','open','','312-revision-v1','','','2015-06-17 03:22:17','2015-06-17 03:22:17','',312,'http://unasm.sinaapp.com/?p=313',0,'revision','',0),(318,1,'2015-06-25 12:30:22','2015-06-25 12:30:22','编辑/产品 啪的一声，丢过来一个问题，说XXX出问题了，修复它，没有说明文档，自己刚刚接手不久，怎么办呢？？\r\n\r\n解决问题，应该归成一条线，一步一步来，从前向后，一步一步定位问题。\r\n\r\n首先，XXX出问题了，好，这个就是问题的头，我们沿着这个线往下走，瞄一眼  <span class=\"extension-title\">Website IP （一个chrome的插件），看一下出问题的服务器ip，再怎么新接手，玩世不恭，自己掌管几台服务器，总是知道的吧，然后ssh到服务器上面去，然后就是/data1/bin/httpd -S  看一下apache/nginx 的配置，对配置了如指掌的，可以跳过这一步，主要是担心rewrite ，修改路由，让人不知道接下来怎么走。</span>\r\n\r\n一般来说，现在网站都是单入口的，直接从index.php开始就可以了，但是未必，老项目，如discuz或者不用框架，裸写的。\r\n\r\n如果裸写的，根据url和rewrite规则，或者直接按照目录去找文件，就可以了，如果是单入口模式，肯定会根据url中的参数确定下来具体的入口，这个时候，就需要对框架的路由规则比较了解，怎么了解路由那就是另一个问题了。总之，迅速定位入口，开始从头开始读代码，如果我的话，可能会首先在代码最前面加一个die，或者利用firephp输出，检测，看是不是找对了。然后就可以愉快的读代码了。\r\n\r\n一般来说，比较容易出问题的是外部资源，代码常年跑，不会轻易挂掉，php还是很健壮的。\r\n\r\n比较容易出问题的，比如http接口变化或者挂掉，mysql down掉了，系统没有了权限或者磁盘满了，redis 内存过多等等，优先查外部的，其次才是代码中的判断，','分析无头案','','publish','open','open','','%e5%88%86%e6%9e%90%e6%97%a0%e5%a4%b4%e6%a1%88','','','2015-06-25 12:30:22','2015-06-25 12:30:22','',0,'http://unasm.sinaapp.com/?p=318',0,'post','',0),(312,1,'2015-06-17 03:22:17','2015-06-17 03:22:17','<code>\r\nhttp://club.baby.sina.com.cn/pm.php?action=send&amp;uid=1066572445%df%27%20and%20sleep(10)--+\r\n</code>\r\n上面的url就是一个最简单的sql注入例子，解决方案也很简单，就是对uid进行判断，如果不是整数就输出错误就好了。不过，php代码不是完全没有做安全过滤，discuz通过addslashes 对输入的数据做了一定程度的检验，但是被通过urlencode 的方式绕过了，%df%27%20and%20 转义回来之后 就是 ?\' and  的意思，也即是sql的\'被关闭了，当然，这个只是最简单的注入','一个初级的sql注入','','publish','open','open','','%e4%b8%80%e4%b8%aa%e5%88%9d%e7%ba%a7%e7%9a%84sql%e6%b3%a8%e5%85%a5','','','2015-06-17 03:22:17','2015-06-17 03:22:17','',0,'http://unasm.sinaapp.com/?p=312',0,'post','',0),(251,1,'2015-05-22 01:51:55','2015-05-22 01:51:55','go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build  编译包和它的依赖关系\r\ngo get url  下载，安装包和它的依赖','go语言入门知识','','publish','open','open','','go%e8%af%ad%e8%a8%80%e5%85%a5%e9%97%a8%e7%9f%a5%e8%af%86','','','2015-05-22 01:51:55','2015-05-22 01:51:55','',0,'http://unasm.sinaapp.com/?page_id=251',0,'page','',0),(252,1,'2015-05-22 01:51:55','2015-05-22 01:51:55','go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build  编译包和它的依赖关系\r\ngo get url  下载，安装包和它的依赖','go语言入门知识','','inherit','open','open','','251-revision-v1','','','2015-05-22 01:51:55','2015-05-22 01:51:55','',251,'http://unasm.sinaapp.com/?p=252',0,'revision','',0),(253,1,'2015-05-22 01:53:20','2015-05-22 01:53:20','go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build 编译包和它的依赖关系\r\ngo get url 下载，安装包和它的依赖\r\n\r\n连接数据库：\r\n<code>\r\ndb, err := sql.Open(\"mysql\", \"root:password@tcp(127.0.0.1:3306)/xueqiu\")\r\n</code>\r\n上面第二个一次是用户名：密码,tcp(127.0.0.1:3306)表示连接的方式和对应的ip，xueqiu 表示具体连接的数据库\r\n\r\nuser@unix(/path/to/socket)/dbname?charset=utf8\r\nuser:password@tcp(localhost:5555)/dbname?charset=utf8\r\nuser:password@/dbname\r\nuser:password@tcp([de:ad:be:ef::ca:fe]:80)/dbname\r\n\r\n上面是open里面一共支持的书写格式，包含了tcp和socket通信两种\r\n\r\n<code>stmt, err := db.Prepare(\"SELECT * FROM list where id = ?\")</code>表示预编译\r\nrows, err := stmt.Query(1) 执行预编译，获取对应的结果集，之前问号缺少的参数传递过去，也可以直接db.Query获取对应的结果集\r\nExec函数执行Prepare准备好的sql，传入参数执行update/insert等操作，返回Result数据\r\n\r\nQuery函数执行Prepare准备好的sql，传入需要的参数执行select操作，返回Rows结果集\r\nfor rows.Next() {\r\nvar id int\r\nvar times int\r\nvar symbol string\r\nvar item string\r\nvar value string\r\nrows.Scan(&amp;id, &amp;symbol, &amp;item, &amp;value, &amp;times)\r\nfmt.Println(symbol)\r\n}\r\n\r\nrows.Columns()  ： 返回 查询出的列字段名,\r\n<pre>func (nt *<a href=\"http://127.0.0.1:8080/pkg/github.com/go-sql-driver/mysql/#NullTime\">NullTime</a>) Scan(value interface{}) (err <a href=\"http://127.0.0.1:8080/pkg/builtin/#error\">error</a>)  这里是官方手册里面的定义，必须传入一个interface类型的变量</pre>','go入门知识','','publish','open','open','','go%e5%85%a5%e9%97%a8%e7%9f%a5%e8%af%86','','','2015-05-23 11:16:13','2015-05-23 11:16:13','',0,'http://unasm.sinaapp.com/?p=253',0,'post','',0),(254,1,'2015-05-22 01:53:20','2015-05-22 01:53:20','go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build 编译包和它的依赖关系\r\ngo get url 下载，安装包和它的依赖','go入门知识','','inherit','open','open','','253-revision-v1','','','2015-05-22 01:53:20','2015-05-22 01:53:20','',253,'http://unasm.sinaapp.com/?p=254',0,'revision','',0),(255,1,'2015-05-22 05:04:00','2015-05-22 05:04:00','go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\ngo build 编译包和它的依赖关系\ngo get url 下载，安装包和它的依赖\n\n连接数据库：\n<code>\ndb, err := sql.Open(\"mysql\", \"root:password@tcp(127.0.0.1:3306)/xueqiu\")\n</code>\n上面第二个一次是用户名：密码,tcp(127.0.0.1:3306)表示连接的方式和对应的ip，xueqiu 表示具体连接的数据库\n<code>stmt, err := db.Prepare(\"SELECT * FROM list where id = ?\")</code>表示预编译\nrows, err := stmt.Query(1) 执行预编译，获取对应的结果集，之前问号缺少的参数传递过去，也可以直接db.Query获取对应的结果集\nExec函数执行Prepare准备好的sql，传入参数执行update/insert等操作，返回Result数据\n\nQuery函数执行Prepare准备好的sql，传入需要的参数执行select操作，返回Rows结果集\n  for rows.Next() {\n       var id int\n       var times int\n       var symbol string\n       var item string                                                           \n       var value string\n       rows.Scan(&id, &symbol, &item, &value, &times)\n  3         fmt.Println(symbol)\n  4         \n  5     }   \n','go入门知识','','inherit','open','open','','253-autosave-v1','','','2015-05-22 05:04:00','2015-05-22 05:04:00','',253,'http://unasm.sinaapp.com/?p=255',0,'revision','',0),(256,1,'2015-05-22 05:00:30','2015-05-22 05:00:30','go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build 编译包和它的依赖关系\r\ngo get url 下载，安装包和它的依赖\r\n\r\n连接数据库：\r\n<code>\r\n db, err := sql.Open(\"mysql\", \"root:password@tcp(127.0.0.1:3306)/xueqiu\") \r\n</code>\r\n上面第二个一次是用户名：密码,tcp(127.0.0.1:3306)表示连接的方式和对应的ip，xueqiu 表示具体连接的数据库\r\n  <code>stmt, err := db.Prepare(\"SELECT * FROM  list where id = ?\")</code>表示预编译\r\n<cod> rows, err := stmt.Query(1) </code> 执行预编译，获取对应的结果集，之前问号缺少的参数传递过去','go入门知识','','inherit','open','open','','253-revision-v1','','','2015-05-22 05:00:30','2015-05-22 05:00:30','',253,'http://unasm.sinaapp.com/?p=256',0,'revision','',0),(257,1,'2015-05-22 05:01:58','2015-05-22 05:01:58','go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build 编译包和它的依赖关系\r\ngo get url 下载，安装包和它的依赖\r\n\r\n连接数据库：\r\n<code>\r\ndb, err := sql.Open(\"mysql\", \"root:password@tcp(127.0.0.1:3306)/xueqiu\")\r\n</code>\r\n上面第二个一次是用户名：密码,tcp(127.0.0.1:3306)表示连接的方式和对应的ip，xueqiu 表示具体连接的数据库\r\n<code>stmt, err := db.Prepare(\"SELECT * FROM list where id = ?\")</code>表示预编译\r\nrows, err := stmt.Query(1) 执行预编译，获取对应的结果集，之前问号缺少的参数传递过去，也可以直接db.Query获取对应的结果集\r\nExec函数执行Prepare准备好的sql，传入参数执行update/insert等操作，返回Result数据\r\n\r\nQuery函数执行Prepare准备好的sql，传入需要的参数执行select操作，返回Rows结果集','go入门知识','','inherit','open','open','','253-revision-v1','','','2015-05-22 05:01:58','2015-05-22 05:01:58','',253,'http://unasm.sinaapp.com/?p=257',0,'revision','',0),(258,1,'2015-05-22 05:04:19','2015-05-22 05:04:19','go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build 编译包和它的依赖关系\r\ngo get url 下载，安装包和它的依赖\r\n\r\n连接数据库：\r\n<code>\r\ndb, err := sql.Open(\"mysql\", \"root:password@tcp(127.0.0.1:3306)/xueqiu\")\r\n</code>\r\n上面第二个一次是用户名：密码,tcp(127.0.0.1:3306)表示连接的方式和对应的ip，xueqiu 表示具体连接的数据库\r\n<code>stmt, err := db.Prepare(\"SELECT * FROM list where id = ?\")</code>表示预编译\r\nrows, err := stmt.Query(1) 执行预编译，获取对应的结果集，之前问号缺少的参数传递过去，也可以直接db.Query获取对应的结果集\r\nExec函数执行Prepare准备好的sql，传入参数执行update/insert等操作，返回Result数据\r\n\r\nQuery函数执行Prepare准备好的sql，传入需要的参数执行select操作，返回Rows结果集\r\n  for rows.Next() {\r\n       var id int\r\n       var times int\r\n       var symbol string\r\n       var item string                                                           \r\n       var value string\r\n       rows.Scan(&id, &symbol, &item, &value, &times)\r\n       fmt.Println(symbol)       \r\n  }   \r\n','go入门知识','','inherit','open','open','','253-revision-v1','','','2015-05-22 05:04:19','2015-05-22 05:04:19','',253,'http://unasm.sinaapp.com/?p=258',0,'revision','',0),(259,1,'2015-05-22 07:38:55','2015-05-22 07:38:55','go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build 编译包和它的依赖关系\r\ngo get url 下载，安装包和它的依赖\r\n\r\n连接数据库：\r\n<code>\r\ndb, err := sql.Open(\"mysql\", \"root:password@tcp(127.0.0.1:3306)/xueqiu\")\r\n</code>\r\n上面第二个一次是用户名：密码,tcp(127.0.0.1:3306)表示连接的方式和对应的ip，xueqiu 表示具体连接的数据库\r\n\r\nuser@unix(/path/to/socket)/dbname?charset=utf8\r\nuser:password@tcp(localhost:5555)/dbname?charset=utf8\r\nuser:password@/dbname\r\nuser:password@tcp([de:ad:be:ef::ca:fe]:80)/dbname\r\n\r\n上面是open里面一共支持的书写格式，包含了tcp和socket通信两种\r\n\r\n<code>stmt, err := db.Prepare(\"SELECT * FROM list where id = ?\")</code>表示预编译\r\nrows, err := stmt.Query(1) 执行预编译，获取对应的结果集，之前问号缺少的参数传递过去，也可以直接db.Query获取对应的结果集\r\nExec函数执行Prepare准备好的sql，传入参数执行update/insert等操作，返回Result数据\r\n\r\nQuery函数执行Prepare准备好的sql，传入需要的参数执行select操作，返回Rows结果集\r\nfor rows.Next() {\r\nvar id int\r\nvar times int\r\nvar symbol string\r\nvar item string\r\nvar value string\r\nrows.Scan(&amp;id, &amp;symbol, &amp;item, &amp;value, &amp;times)\r\nfmt.Println(symbol)\r\n}','go入门知识','','inherit','open','open','','253-revision-v1','','','2015-05-22 07:38:55','2015-05-22 07:38:55','',253,'http://unasm.sinaapp.com/?p=259',0,'revision','',0),(260,1,'2015-05-23 10:56:17','2015-05-23 10:56:17','go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build 编译包和它的依赖关系\r\ngo get url 下载，安装包和它的依赖\r\n\r\n连接数据库：\r\n<code>\r\ndb, err := sql.Open(\"mysql\", \"root:password@tcp(127.0.0.1:3306)/xueqiu\")\r\n</code>\r\n上面第二个一次是用户名：密码,tcp(127.0.0.1:3306)表示连接的方式和对应的ip，xueqiu 表示具体连接的数据库\r\n\r\nuser@unix(/path/to/socket)/dbname?charset=utf8\r\nuser:password@tcp(localhost:5555)/dbname?charset=utf8\r\nuser:password@/dbname\r\nuser:password@tcp([de:ad:be:ef::ca:fe]:80)/dbname\r\n\r\n上面是open里面一共支持的书写格式，包含了tcp和socket通信两种\r\n\r\n<code>stmt, err := db.Prepare(\"SELECT * FROM list where id = ?\")</code>表示预编译\r\nrows, err := stmt.Query(1) 执行预编译，获取对应的结果集，之前问号缺少的参数传递过去，也可以直接db.Query获取对应的结果集\r\nExec函数执行Prepare准备好的sql，传入参数执行update/insert等操作，返回Result数据\r\n\r\nQuery函数执行Prepare准备好的sql，传入需要的参数执行select操作，返回Rows结果集\r\nfor rows.Next() {\r\nvar id int\r\nvar times int\r\nvar symbol string\r\nvar item string\r\nvar value string\r\nrows.Scan(&amp;id, &amp;symbol, &amp;item, &amp;value, &amp;times)\r\nfmt.Println(symbol)\r\n}\r\n\r\nrows.Columns()  ： 返回 查询出的列字段名','go入门知识','','inherit','open','open','','253-revision-v1','','','2015-05-23 10:56:17','2015-05-23 10:56:17','',253,'http://unasm.sinaapp.com/?p=260',0,'revision','',0),(261,1,'2015-05-23 11:15:29','2015-05-23 11:15:29','go run 编译并运行.go的文件，但是如果文件中引入了其他的自定义的包，需要先build其他的自定义包\r\ngo build 编译包和它的依赖关系\r\ngo get url 下载，安装包和它的依赖\r\n\r\n连接数据库：\r\n<code>\r\ndb, err := sql.Open(\"mysql\", \"root:password@tcp(127.0.0.1:3306)/xueqiu\")\r\n</code>\r\n上面第二个一次是用户名：密码,tcp(127.0.0.1:3306)表示连接的方式和对应的ip，xueqiu 表示具体连接的数据库\r\n\r\nuser@unix(/path/to/socket)/dbname?charset=utf8\r\nuser:password@tcp(localhost:5555)/dbname?charset=utf8\r\nuser:password@/dbname\r\nuser:password@tcp([de:ad:be:ef::ca:fe]:80)/dbname\r\n\r\n上面是open里面一共支持的书写格式，包含了tcp和socket通信两种\r\n\r\n<code>stmt, err := db.Prepare(\"SELECT * FROM list where id = ?\")</code>表示预编译\r\nrows, err := stmt.Query(1) 执行预编译，获取对应的结果集，之前问号缺少的参数传递过去，也可以直接db.Query获取对应的结果集\r\nExec函数执行Prepare准备好的sql，传入参数执行update/insert等操作，返回Result数据\r\n\r\nQuery函数执行Prepare准备好的sql，传入需要的参数执行select操作，返回Rows结果集\r\nfor rows.Next() {\r\nvar id int\r\nvar times int\r\nvar symbol string\r\nvar item string\r\nvar value string\r\nrows.Scan(&amp;id, &amp;symbol, &amp;item, &amp;value, &amp;times)\r\nfmt.Println(symbol)\r\n}\r\n\r\nrows.Columns()  ： 返回 查询出的列字段名,\r\n<pre>func (nt *<a href=\"http://127.0.0.1:8080/pkg/github.com/go-sql-driver/mysql/#NullTime\">NullTime</a>) Scan(value interface{}) (err <a href=\"http://127.0.0.1:8080/pkg/builtin/#error\">error</a>)  这里是官方手册里面的定义，必须传入一个interface类型的变量</pre>','go入门知识','','inherit','open','open','','253-revision-v1','','','2015-05-23 11:15:29','2015-05-23 11:15:29','',253,'http://unasm.sinaapp.com/?p=261',0,'revision','',0),(262,1,'2015-05-25 02:33:24','2015-05-25 02:33:24','<p class=\"p1\">把服务端与客户端的连接从HTTP/1.1 转化到WebSocket，这需要用到<a href=\"http://tools.ietf.org/html/rfc2616#section-14.42\"><span class=\"s2\">protocol_switch</span></a>  这个指令。</p>\r\n<p class=\"p4\"><span class=\"s1\">然而“Upgrade” 是一个hop-by-hop（逐个跳转扩展头），它是不可能通过代理服务器的，虽然客户端或许可以使用CONNECT方法避开这个问题，但是这不适用于反向代理服务器，因为客户端根本不会意识到这个是代理服务器，所以需要一种特殊的方式。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">从1.3.13版，nginx实现了一种特殊的机制，只要代理服务器返回101（转换协议）就允许代理服务器和客户端之间建立一个通道，并且客户端会请求通过在请求中添加Upgrade 头来转换协议。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">上文提到，包含了“Upgrade”和”Connection”的hop-by-hop 头是不能传到代理服务器的，因此为了通知服务器客户端想要将协议转换到WebSocket，这些头必须显式的传递。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">location /chat/ {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_pass http://backend;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_http_version 1.1;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_set_header Connection \"upgrade\";</span></p>\r\n<p class=\"p4\"><span class=\"s1\">}</span></p>\r\n<p class=\"p4\"><span class=\"s1\">一个发往服务端的的header头中Connection的值 取决于于客户端请求头里面的Upgrade的有无。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">http {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>map $http_upgrade $connection_upgrade {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>default upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>\'\'<span class=\"Apple-converted-space\">      </span>close;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>}</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>server {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>...</span></p>\r\n<p class=\"p1\"><span class=\"s1\">        listen <span class=\"Apple-converted-space\">      </span>8070;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>location /chat/ {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_pass http://backend;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_http_version 1.1;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_set_header Connection $connection_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>}</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>}</span></p>\r\n<p class=\"p4\">此时，对应的服务端代码为</p>\r\n<p class=\"p2\"><span class=\"s1\">/*************************************************************************</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span>* File Name :<span class=\"Apple-converted-space\">  </span>node.js</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span>* Author<span class=\"Apple-converted-space\">  </span>:<span class=\"Apple-converted-space\">      </span>unasm</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span>* Mail : <span class=\"Apple-converted-space\">        </span>unasm@sina.cn</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span>* Last_Modified: 2015-05-25 09:56:26</span></p>\r\n<p class=\"p2\"><span class=\"s1\"> ************************************************************************/</span></p>\r\n<p class=\"p2\"><span class=\"s1\">console.log(\"Server started\");</span></p>\r\n<p class=\"p2\"><span class=\"s1\">var connects = new Array();</span></p>\r\n<p class=\"p2\"><span class=\"s1\">var WebSocketServer = require(\'ws\').Server</span></p>\r\n<p class=\"p2\"><span class=\"s1\">, wss = new WebSocketServer({port: 8010});</span></p>\r\n<p class=\"p2\"><span class=\"s1\">console.log(\"complete\");</span></p>\r\n<p class=\"p2\"><span class=\"s1\">wss.on(\'connection\', function(ws) {</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>connects.push(ws);</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>ws.on(\'message\', function(msg) {</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>ws.send(msg);</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>for(var i = 0,len = connects.length; i &lt; len;i++){</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>if(connects[i] !== ws){</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>connects[i].send(msg);</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>}</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>}</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>});</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>console.log(\"connection\");</span></p>\r\n<p class=\"p2\"><span class=\"s1\">});</span></p>\r\n<p class=\"p4\">客户端html代码为：</p>\r\n&nbsp;\r\n<p class=\"p1\"><span class=\"s1\">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>&lt;script type=\"text/javascript\"&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>var sock = null;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>var wsuri = \"ws://127.0.0.1:8070/chat/\";</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>window.onload = function() {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>console.log(\"onload\");</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>sock = new WebSocket(wsuri);</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>sock.onopen = function() {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                        </span>console.log(\"connected to \" + wsuri);</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>sock.onclose = function(e) {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                        </span>console.log(\"connection closed (\" + e.code + \")\");</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>sock.onmessage = function(e) {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                        </span>console.log(\"message received: \" + e.data);</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>};</span></p>\r\n<p class=\"p1\"><span class=\"s1\">function send() {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>var msg = document.getElementById(\'message\').value;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>sock.send(msg);</span></p>\r\n<p class=\"p1\"><span class=\"s1\">};</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;/script&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;h1&gt;WebSocket Echo Test&lt;/h1&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;form&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>&lt;p&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>Message: &lt;input id=\"message\" type=\"text\" value=\"Hello, world!\"&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>&lt;/p&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;/form&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;button onclick=\"send();\"&gt;Send Message&lt;/button&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;/body&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;/html&gt;</span></p>\r\n&nbsp;\r\n<p class=\"p4\">原文参考连接http://nginx.org/en/docs/http/websocket.html?_ga=1.166503037.270828851.1426754420</p>','nginx 作为websocket代理服务器（译）','','inherit','open','open','','216-revision-v1','','','2015-05-25 02:33:24','2015-05-25 02:33:24','',216,'http://unasm.sinaapp.com/?p=262',0,'revision','',0),(263,1,'2015-05-25 02:34:18','2015-05-25 02:34:18','<p class=\"p1\">把服务端与客户端的连接从HTTP/1.1 转化到WebSocket，这需要用到<a href=\"http://tools.ietf.org/html/rfc2616#section-14.42\"><span class=\"s2\">protocol_switch</span></a>  这个指令。</p>\r\n<p class=\"p4\"><span class=\"s1\">然而“Upgrade” 是一个hop-by-hop（逐个跳转扩展头），它是不可能通过代理服务器的，虽然客户端或许可以使用CONNECT方法避开这个问题，但是这不适用于反向代理服务器，因为客户端根本不会意识到这个是代理服务器，所以需要一种特殊的方式。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">从1.3.13版，nginx实现了一种特殊的机制，只要代理服务器返回101（转换协议）就允许代理服务器和客户端之间建立一个通道，并且客户端会请求通过在请求中添加Upgrade 头来转换协议。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">上文提到，包含了“Upgrade”和”Connection”的hop-by-hop 头是不能传到代理服务器的，因此为了通知服务器客户端想要将协议转换到WebSocket，这些头必须显式的传递。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">location /chat/ {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_pass http://backend;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_http_version 1.1;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>proxy_set_header Connection \"upgrade\";</span></p>\r\n<p class=\"p4\"><span class=\"s1\">}</span></p>\r\n<p class=\"p4\"><span class=\"s1\">一个发往服务端的的header头中Connection的值 取决于于客户端请求头里面的Upgrade的有无。</span></p>\r\n<p class=\"p4\"><span class=\"s1\">http {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>map $http_upgrade $connection_upgrade {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>default upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>\'\'<span class=\"Apple-converted-space\">      </span>close;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>}</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>server {</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>...</span></p>\r\n<p class=\"p1\"><span class=\"s1\">        listen <span class=\"Apple-converted-space\">      </span>8070;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>location /chat/ {</span></p>\r\n<p class=\"p4\">            proxy_pass http://127.0.0.1:8010;</p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_http_version 1.1;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_set_header Upgrade $http_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">            </span>proxy_set_header Connection $connection_upgrade;</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>}</span></p>\r\n<p class=\"p4\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>}</span></p>\r\n<p class=\"p4\">此时，对应的服务端代码为,服务端，需要安装nodejs，并且node node.js 运行起来，坚挺8010端口</p>\r\n<p class=\"p2\"><span class=\"s1\">/*************************************************************************</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span>* File Name :<span class=\"Apple-converted-space\">  </span>node.js</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span>* Author<span class=\"Apple-converted-space\">  </span>:<span class=\"Apple-converted-space\">      </span>unasm</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span>* Mail : <span class=\"Apple-converted-space\">        </span>unasm@sina.cn</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">  </span>* Last_Modified: 2015-05-25 09:56:26</span></p>\r\n<p class=\"p2\"><span class=\"s1\"> ************************************************************************/</span></p>\r\n<p class=\"p2\"><span class=\"s1\">console.log(\"Server started\");</span></p>\r\n<p class=\"p2\"><span class=\"s1\">var connects = new Array();</span></p>\r\n<p class=\"p2\"><span class=\"s1\">var WebSocketServer = require(\'ws\').Server</span></p>\r\n<p class=\"p2\"><span class=\"s1\">, wss = new WebSocketServer({port: 8010});</span></p>\r\n<p class=\"p2\"><span class=\"s1\">console.log(\"complete\");</span></p>\r\n<p class=\"p2\"><span class=\"s1\">wss.on(\'connection\', function(ws) {</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>connects.push(ws);</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>ws.on(\'message\', function(msg) {</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>ws.send(msg);</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>for(var i = 0,len = connects.length; i &lt; len;i++){</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>if(connects[i] !== ws){</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>connects[i].send(msg);</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>}</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>}</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>});</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>console.log(\"connection\");</span></p>\r\n<p class=\"p2\"><span class=\"s1\">});</span></p>\r\n<p class=\"p4\">客户端html代码为：</p>\r\n&nbsp;\r\n<p class=\"p1\"><span class=\"s1\">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>&lt;script type=\"text/javascript\"&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>var sock = null;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>var wsuri = \"ws://127.0.0.1:8070/chat/\";</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>window.onload = function() {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>console.log(\"onload\");</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>sock = new WebSocket(wsuri);</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>sock.onopen = function() {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                        </span>console.log(\"connected to \" + wsuri);</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>sock.onclose = function(e) {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                        </span>console.log(\"connection closed (\" + e.code + \")\");</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>sock.onmessage = function(e) {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                        </span>console.log(\"message received: \" + e.data);</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>};</span></p>\r\n<p class=\"p1\"><span class=\"s1\">function send() {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>var msg = document.getElementById(\'message\').value;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>sock.send(msg);</span></p>\r\n<p class=\"p1\"><span class=\"s1\">};</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;/script&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;h1&gt;WebSocket Echo Test&lt;/h1&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;form&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>&lt;p&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>Message: &lt;input id=\"message\" type=\"text\" value=\"Hello, world!\"&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>&lt;/p&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;/form&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;button onclick=\"send();\"&gt;Send Message&lt;/button&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;/body&gt;</span></p>\r\n<p class=\"p1\"><span class=\"s1\">&lt;/html&gt;</span></p>\r\n&nbsp;\r\n<p class=\"p4\">原文参考连接http://nginx.org/en/docs/http/websocket.html?_ga=1.166503037.270828851.1426754420</p>','nginx 作为websocket代理服务器（译）','','inherit','open','open','','216-revision-v1','','','2015-05-25 02:34:18','2015-05-25 02:34:18','',216,'http://unasm.sinaapp.com/?p=263',0,'revision','',0),(264,1,'2015-05-26 00:57:24','2015-05-26 00:57:24','<pre>\r\npackage main\r\n\r\nimport (\r\n	\"fmt\"\r\n	//\"model\"\r\n	\"net/http\"\r\n	//	\"reflect\"\r\n	//\"code.google.com/p/go.net/websocket\"\r\n	\"github.com/gorilla/websocket\"\r\n	\"io\"\r\n	\"log\"\r\n	\"time\"\r\n)\r\n\r\n//每刷新一次，就会建立一个连接，必须要根据用户的ip等，限制连接的创建\r\nvar conn_id int\r\n\r\n//正常情况下的http请求以及相应\r\nfunc index(w http.ResponseWriter, r *http.Request) {\r\n	r.ParseForm()\r\n	fmt.Println(r.Form)\r\n	fmt.Println(\"yes ,welcome !\")\r\n	fmt.Fprintf(w, \"Hello,world\r\n\")\r\n}\r\n\r\n//第一种websocket的方式\r\nfunc socket(w http.ResponseWriter, r *http.Request) {\r\n	var upgrader = websocket.Upgrader{\r\n		ReadBufferSize:  1024,\r\n		WriteBufferSize: 1024,\r\n		//不再检查请求源\r\n		CheckOrigin: func(r *http.Request) bool {\r\n			return true\r\n		},\r\n	}\r\n	//将连接从http升级成websocket协议\r\n	conn, err := upgrader.Upgrade(w, r, nil)\r\n\r\n	if err != nil {\r\n		log.Println(\"not websocket: \", err)\r\n		return\r\n	}\r\n	for {\r\n		//读取数据，\r\n		msg, p, err := conn.ReadMessage()\r\n		fmt.Println(msg)\r\n		fmt.Println(p)\r\n		fmt.Println(err)\r\n		if err != nil {\r\n			return\r\n		}\r\n		//返回数据，\r\n		if err = conn.WriteMessage(msg, p); err != nil {\r\n			return\r\n		}\r\n	}\r\n}\r\n\r\n//第二种读取socket信息的方法\r\nfunc socket2(w http.ResponseWriter, r *http.Request) {\r\n	var upgrader = websocket.Upgrader{\r\n		// ReadBufferSize and WriteBufferSize specify I/O buffer sizes. If a buffer\r\n		// size is zero, then a default value of 4096 is used. The I/O buffer sizes\r\n		// do not limit the size of the messages that can be sent or received.\r\n		ReadBufferSize:  1024,\r\n		WriteBufferSize: 1024,\r\n\r\n		//握手的超时时间,单位是ms\r\n		HandshakeTimeout: 2000,\r\n		CheckOrigin: func(r *http.Request) bool {\r\n			return true\r\n		},\r\n	}\r\n	//将连接从http升级成websocket协议\r\n	conn, err := upgrader.Upgrade(w, r, nil)\r\n	//精确到纳秒 ， add 是time对象的方法，time.Now()产生一个time对象,time.Now()是此时的时间time对象，Add增加1分钟\r\n	conn.SetWriteDeadline(time.Now().Add(60000000000))\r\n	//设置读写的过期时间\r\n	conn.SetReadDeadline(time.Now().Add(60000000000))\r\n	fmt.Println(conn_id)\r\n	if err != nil {\r\n		log.Println(\"not websocket: \", err)\r\n		return\r\n	}\r\n	conn_id++\r\n	for {\r\n		fmt.Println(conn_id)\r\n		//读取数据，msg是类型，1,2 ，数据的类型，字符还是二进制\r\n		//p 是内容，err 是错误\r\n		msg, p, err := conn.NextReader()\r\n		if err != nil {\r\n			log.Println(\"next Reader \", err)\r\n			return\r\n		}\r\n		//返回数据，\r\n\r\n		www, err := conn.NextWriter(msg)\r\n		if err != nil {\r\n			log.Println(\"next Writer \", err)\r\n			return\r\n		}\r\n		if _, err := io.Copy(www, p); err != nil {\r\n			log.Println(\"copy \", err)\r\n			return\r\n		}\r\n\r\n		if err := www.Close(); err != nil {\r\n			return\r\n		}\r\n	}\r\n	//关闭conn\r\n	defer conn.Close()\r\n}\r\n\r\n//路由处理\r\nfunc route() {\r\n	http.HandleFunc(\"/chat/\", socket2)\r\n	//http.HandleFunc(\"/chat/\", socket)\r\n	//对路由为/的注册index函数\r\n	http.HandleFunc(\"/\", index)\r\n}\r\n\r\n//检查错误，输出错误\r\nfunc checkErr(err error) {\r\n	if err != nil {\r\n		panic(err)\r\n	}\r\n}\r\n\r\n//就像c语言一样，从main开始执行\r\nfunc main() {\r\n	route()\r\n	// 监听 8010端口\r\n	if err := http.ListenAndServe(\":8010\", nil); err != nil {\r\n		conn_id = 0\r\n		log.Fatal(\"Listen and Server : \", err)\r\n	}\r\n}\r\n\r\n</pre>','golang websocket 编程 <基础篇>','','publish','open','open','','golang-websocket-%e7%bc%96%e7%a8%8b','','','2015-07-14 05:54:53','2015-07-14 05:54:53','',0,'http://unasm.sinaapp.com/?p=264',0,'post','',0),(265,1,'2015-05-26 00:57:24','2015-05-26 00:57:24','<pre>\r\npackage main\r\n\r\nimport (\r\n	\"fmt\"\r\n	//\"model\"\r\n	\"net/http\"\r\n	//	\"reflect\"\r\n	//\"code.google.com/p/go.net/websocket\"\r\n	\"github.com/gorilla/websocket\"\r\n	\"io\"\r\n	\"log\"\r\n	\"time\"\r\n)\r\n\r\n//每刷新一次，就会建立一个连接，必须要根据用户的ip等，限制连接的创建\r\nvar conn_id int\r\n\r\n//正常情况下的http请求以及相应\r\nfunc index(w http.ResponseWriter, r *http.Request) {\r\n	r.ParseForm()\r\n	fmt.Println(r.Form)\r\n	fmt.Println(\"yes ,welcome !\")\r\n	fmt.Fprintf(w, \"Hello,world\r\n\")\r\n}\r\n\r\n//第一种websocket的方式\r\nfunc socket(w http.ResponseWriter, r *http.Request) {\r\n	var upgrader = websocket.Upgrader{\r\n		ReadBufferSize:  1024,\r\n		WriteBufferSize: 1024,\r\n		//不再检查请求源\r\n		CheckOrigin: func(r *http.Request) bool {\r\n			return true\r\n		},\r\n	}\r\n	//将连接从http升级成websocket协议\r\n	conn, err := upgrader.Upgrade(w, r, nil)\r\n\r\n	if err != nil {\r\n		log.Println(\"not websocket: \", err)\r\n		return\r\n	}\r\n	for {\r\n		//读取数据，\r\n		msg, p, err := conn.ReadMessage()\r\n		fmt.Println(msg)\r\n		fmt.Println(p)\r\n		fmt.Println(err)\r\n		if err != nil {\r\n			return\r\n		}\r\n		//返回数据，\r\n		if err = conn.WriteMessage(msg, p); err != nil {\r\n			return\r\n		}\r\n	}\r\n}\r\n\r\n//第二种读取socket信息的方法\r\nfunc socket2(w http.ResponseWriter, r *http.Request) {\r\n	var upgrader = websocket.Upgrader{\r\n		// ReadBufferSize and WriteBufferSize specify I/O buffer sizes. If a buffer\r\n		// size is zero, then a default value of 4096 is used. The I/O buffer sizes\r\n		// do not limit the size of the messages that can be sent or received.\r\n		ReadBufferSize:  1024,\r\n		WriteBufferSize: 1024,\r\n\r\n		//握手的超时时间,单位是ms\r\n		HandshakeTimeout: 2000,\r\n		CheckOrigin: func(r *http.Request) bool {\r\n			return true\r\n		},\r\n	}\r\n	//将连接从http升级成websocket协议\r\n	conn, err := upgrader.Upgrade(w, r, nil)\r\n	//精确到纳秒 ， add 是time对象的方法，time.Now()产生一个time对象,time.Now()是此时的时间time对象，Add增加1分钟\r\n	conn.SetWriteDeadline(time.Now().Add(60000000000))\r\n	//设置读写的过期时间\r\n	conn.SetReadDeadline(time.Now().Add(60000000000))\r\n	fmt.Println(conn_id)\r\n	if err != nil {\r\n		log.Println(\"not websocket: \", err)\r\n		return\r\n	}\r\n	conn_id++\r\n	for {\r\n		fmt.Println(conn_id)\r\n		//读取数据，msg是类型，1,2 ，数据的类型，字符还是二进制\r\n		//p 是内容，err 是错误\r\n		msg, p, err := conn.NextReader()\r\n		if err != nil {\r\n			log.Println(\"next Reader \", err)\r\n			return\r\n		}\r\n		//返回数据，\r\n\r\n		www, err := conn.NextWriter(msg)\r\n		if err != nil {\r\n			log.Println(\"next Writer \", err)\r\n			return\r\n		}\r\n		if _, err := io.Copy(www, p); err != nil {\r\n			log.Println(\"copy \", err)\r\n			return\r\n		}\r\n\r\n		if err := www.Close(); err != nil {\r\n			return\r\n		}\r\n	}\r\n	//关闭conn\r\n	defer conn.Close()\r\n}\r\n\r\n//路由处理\r\nfunc route() {\r\n	http.HandleFunc(\"/chat/\", socket2)\r\n	//http.HandleFunc(\"/chat/\", socket)\r\n	//对路由为/的注册index函数\r\n	http.HandleFunc(\"/\", index)\r\n}\r\n\r\n//检查错误，输出错误\r\nfunc checkErr(err error) {\r\n	if err != nil {\r\n		panic(err)\r\n	}\r\n}\r\n\r\n//就像c语言一样，从main开始执行\r\nfunc main() {\r\n	route()\r\n	// 监听 8010端口\r\n	if err := http.ListenAndServe(\":8010\", nil); err != nil {\r\n		conn_id = 0\r\n		log.Fatal(\"Listen and Server : \", err)\r\n	}\r\n}\r\n\r\n</pre>','golang websocket 编程 <基础篇>','','inherit','open','open','','264-revision-v1','','','2015-05-26 00:57:24','2015-05-26 00:57:24','',264,'http://unasm.sinaapp.com/?p=265',0,'revision','',0),(266,1,'2015-05-26 06:41:06','2015-05-26 06:41:06','<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class=\"comment\">   // Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class=\"comment\"> For client requests an empty string means GET.\r\n</span>   //用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a></pre>\r\n<pre>   //用户请求的url\r\n   URL *<a href=\"http://127.0.0.1:8080/pkg/net/url/\">url</a>.<a href=\"http://127.0.0.1:8080/pkg/net/url/#URL\">URL\r\n</a>   用户访问所用的协议，\"HTTP/1.0\" 或者是  \"HTTP/1.1\"\r\n   Proto\r\n   /* 用户的http请求头里面的信息，例： \r\n   User-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\n   Accept-Encoding:[gzip,deflate,sdch] \r\n   Accept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\n   Ra-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\n   Connection:[keep-alive] \r\n   Accept:[*/*]\r\n   */\r\n   Header Header</pre>\r\n<pre>   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href=\"http://127.0.0.1:8080/pkg/io/\">io</a>.<a href=\"http://127.0.0.1:8080/pkg/io/#ReadCloser\">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>   //主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //form包含了url和post或者put中的变量值，该变量只有在ParseForm执行过之后才可以用\r\n   Form url.Values \r\n   \r\n   //该变量包含post或者put中的参数，该变量只有在ParseForm执行过之后才可以用\r\n   PostForm url.Values\r\n</pre>\r\n<pre>    // MultipartForm 是解析的urltipart form得到的，包含了文件的上传，只有在ParseMultipartForm执行之后，才可以使用</pre>\r\n<pre>    MultipartForm *<a href=\"http://127.0.0.1:8080/pkg/mime/multipart/\">multipart</a>.<a href=\"http://127.0.0.1:8080/pkg/mime/multipart/#Form\">Form\r\n </a>   \r\n\r\n    //指header中请求体之外的信息，最初header 的键值值包含键值为nil，当函数处理完body之后，trailer 就会包含非nik值的键值对。</pre>\r\n<pre>    Trailer <a href=\"http://127.0.0.1:8080/pkg/net/http/#Header\">Header</a>\r\n</pre>\r\n<pre>    //RemoteAddr允许http服务器记录发送请求的地址，通常用于登陆\r\n    RemoteAddr <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string\r\n</a>\r\n    //不详\r\n    RequestURI\r\n \r\n    //TLS 允许http服务器和其他的软件记录接受请求的时候的TLS连接的信息，TLS在有函数句柄执行之前都是有效的，之后该值就一直是nil，该值通常被http客户端忽略</pre>\r\n<pre>    TLS *<a href=\"http://127.0.0.1:8080/pkg/crypto/tls/\">tls</a>.<a href=\"http://127.0.0.1:8080/pkg/crypto/tls/#ConnectionState\">ConnectionState</a></pre>\r\n<pre>}</pre>','golang http包request对象    属性值','','publish','open','open','','golang-http%e5%8c%85request%e5%af%b9%e8%b1%a1','','','2015-07-14 05:54:38','2015-07-14 05:54:38','',0,'http://unasm.sinaapp.com/?p=266',0,'post','',0),(267,1,'2015-05-26 06:41:06','2015-05-26 06:41:06','<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class=\"comment\">// Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class=\"comment\"> For client requests an empty string means GET.\r\n</span>//用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string\r\n </a> \r\n   //用户请求的url\r\n   URL *<a href=\"http://127.0.0.1:8080/pkg/net/url/\">url</a>.<a href=\"http://127.0.0.1:8080/pkg/net/url/#URL\">URL\r\n</a>   用户访问所用的协议，\"HTTP/1.0\" 或者是  \"HTTP/1.1\"\r\n   Proto\r\n   //用户的http请求头里面的信息，例： \r\nUser-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\nAccept-Encoding:[gzip,deflate,sdch] \r\nAccept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\nRa-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\nConnection:[keep-alive] \r\nAccept:[*/*]</pre>\r\n<pre>   Header Header \r\n\r\n   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href=\"http://127.0.0.1:8080/pkg/io/\">io</a>.<a href=\"http://127.0.0.1:8080/pkg/io/#ReadCloser\">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>   //主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //\r\n   Form url.Values</pre>\r\n<pre>}</pre>','golang http包request对象','','inherit','open','open','','266-revision-v1','','','2015-05-26 06:41:06','2015-05-26 06:41:06','',266,'http://unasm.sinaapp.com/?p=267',0,'revision','',0),(269,1,'2015-05-26 06:51:38','2015-05-26 06:51:38','<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class=\"comment\">// Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class=\"comment\"> For client requests an empty string means GET.\r\n</span>//用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string\r\n </a> \r\n   //用户请求的url\r\n   URL *<a href=\"http://127.0.0.1:8080/pkg/net/url/\">url</a>.<a href=\"http://127.0.0.1:8080/pkg/net/url/#URL\">URL\r\n</a>   用户访问所用的协议，\"HTTP/1.0\" 或者是  \"HTTP/1.1\"\r\n   Proto\r\n   //用户的http请求头里面的信息，例： \r\nUser-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\nAccept-Encoding:[gzip,deflate,sdch] \r\nAccept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\nRa-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\nConnection:[keep-alive] \r\nAccept:[*/*]</pre>\r\n<pre>   Header Header \r\n\r\n   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href=\"http://127.0.0.1:8080/pkg/io/\">io</a>.<a href=\"http://127.0.0.1:8080/pkg/io/#ReadCloser\">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>//主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //form包含了url和post或者put中的变量值，该变量只有在ParseForm执行过之后才可以用\r\n   Form url.Values \r\n   \r\n   //该变量包含post或者put中的参数，该变量只有在ParseForm执行过之后才可以用\r\n   //PostForm url.Values\r\n</pre>\r\n<pre>   //</pre>\r\n<pre>MultipartForm 是解析的urltipart form得到的，包含了文件的上传，只有在 ParseMultipartForm执行之后，才可以使用</pre>\r\n<pre>    MultipartForm *<a href=\"http://127.0.0.1:8080/pkg/mime/multipart/\">multipart</a>.<a href=\"http://127.0.0.1:8080/pkg/mime/multipart/#Form\">Form</a></pre>\r\n<pre>}</pre>','golang http包request对象','','inherit','open','open','','266-revision-v1','','','2015-05-26 06:51:38','2015-05-26 06:51:38','',266,'http://unasm.sinaapp.com/?p=269',0,'revision','',0),(270,1,'2015-05-26 07:37:12','2015-05-26 07:37:12','<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class=\"comment\">// Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class=\"comment\"> For client requests an empty string means GET.\r\n</span>//用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a></pre>\r\n<pre> \r\n   //用户请求的url\r\n   URL *<a href=\"http://127.0.0.1:8080/pkg/net/url/\">url</a>.<a href=\"http://127.0.0.1:8080/pkg/net/url/#URL\">URL\r\n</a>   用户访问所用的协议，\"HTTP/1.0\" 或者是  \"HTTP/1.1\"\r\n   Proto\r\n   //用户的http请求头里面的信息，例： \r\nUser-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\nAccept-Encoding:[gzip,deflate,sdch] \r\nAccept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\nRa-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\nConnection:[keep-alive] \r\nAccept:[*/*]</pre>\r\n<pre>   Header Header \r\n\r\n   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href=\"http://127.0.0.1:8080/pkg/io/\">io</a>.<a href=\"http://127.0.0.1:8080/pkg/io/#ReadCloser\">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>//主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //form包含了url和post或者put中的变量值，该变量只有在ParseForm执行过之后才可以用\r\n   Form url.Values \r\n   \r\n   //该变量包含post或者put中的参数，该变量只有在ParseForm执行过之后才可以用\r\n   PostForm url.Values\r\n</pre>\r\n<pre>   // MultipartForm 是解析的urltipart form得到的，包含了文件的上传，只有在 ParseMultipartForm执行之后，才可以使用</pre>\r\n<pre>    MultipartForm *<a href=\"http://127.0.0.1:8080/pkg/mime/multipart/\">multipart</a>.<a href=\"http://127.0.0.1:8080/pkg/mime/multipart/#Form\">Form\r\n </a>   \r\n\r\n    //指header中请求体之外的信息，最初header 的键值值包含键值为nil，当函数处理完body之后，trailer 就会包含非nik值的键值对。</pre>\r\n<pre>    Trailer <a href=\"http://127.0.0.1:8080/pkg/net/http/#Header\">Header</a>\r\n</pre>\r\n<pre>//RemoteAddr允许http服务器记录发送请求的地址，通常用于登陆\r\n    RemoteAddr <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string\r\n</a>\r\n    //不详\r\n    RequestURI\r\n \r\n    //TLS 允许http服务器和其他的软件记录接受请求的时候的TLS连接的信息，TLS在有函数句柄执行之前都是有效的，之后该值就一直是nil，该值通常被http客户端忽略</pre>\r\n<pre>\r\n    TLS *<a href=\"http://127.0.0.1:8080/pkg/crypto/tls/\">tls</a>.<a href=\"http://127.0.0.1:8080/pkg/crypto/tls/#ConnectionState\">ConnectionState</a></pre>\r\n<pre>}</pre>','golang http包request对象    Trailer Header','','inherit','open','open','','266-revision-v1','','','2015-05-26 07:37:12','2015-05-26 07:37:12','',266,'http://unasm.sinaapp.com/?p=270',0,'revision','',0),(271,1,'2015-05-26 07:38:27','2015-05-26 07:38:27','<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class=\"comment\">// Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class=\"comment\"> For client requests an empty string means GET.\r\n</span>//用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a></pre>\r\n<pre> \r\n   //用户请求的url\r\n   URL *<a href=\"http://127.0.0.1:8080/pkg/net/url/\">url</a>.<a href=\"http://127.0.0.1:8080/pkg/net/url/#URL\">URL\r\n</a>   用户访问所用的协议，\"HTTP/1.0\" 或者是  \"HTTP/1.1\"\r\n   Proto\r\n   //用户的http请求头里面的信息，例： \r\nUser-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\nAccept-Encoding:[gzip,deflate,sdch] \r\nAccept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\nRa-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\nConnection:[keep-alive] \r\nAccept:[*/*]</pre>\r\n<pre>   Header Header \r\n\r\n   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href=\"http://127.0.0.1:8080/pkg/io/\">io</a>.<a href=\"http://127.0.0.1:8080/pkg/io/#ReadCloser\">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>//主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //form包含了url和post或者put中的变量值，该变量只有在ParseForm执行过之后才可以用\r\n   Form url.Values \r\n   \r\n   //该变量包含post或者put中的参数，该变量只有在ParseForm执行过之后才可以用\r\n   PostForm url.Values\r\n</pre>\r\n<pre>   // MultipartForm 是解析的urltipart form得到的，包含了文件的上传，只有在 ParseMultipartForm执行之后，才可以使用</pre>\r\n<pre>    MultipartForm *<a href=\"http://127.0.0.1:8080/pkg/mime/multipart/\">multipart</a>.<a href=\"http://127.0.0.1:8080/pkg/mime/multipart/#Form\">Form\r\n </a>   \r\n\r\n    //指header中请求体之外的信息，最初header 的键值值包含键值为nil，当函数处理完body之后，trailer 就会包含非nik值的键值对。</pre>\r\n<pre>    Trailer <a href=\"http://127.0.0.1:8080/pkg/net/http/#Header\">Header</a>\r\n</pre>\r\n<pre>//RemoteAddr允许http服务器记录发送请求的地址，通常用于登陆\r\n    RemoteAddr <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string\r\n</a>\r\n    //不详\r\n    RequestURI\r\n \r\n    //TLS 允许http服务器和其他的软件记录接受请求的时候的TLS连接的信息，TLS在有函数句柄执行之前都是有效的，之后该值就一直是nil，该值通常被http客户端忽略</pre>\r\n<pre>    TLS *<a href=\"http://127.0.0.1:8080/pkg/crypto/tls/\">tls</a>.<a href=\"http://127.0.0.1:8080/pkg/crypto/tls/#ConnectionState\">ConnectionState</a></pre>\r\n<pre>}</pre>','golang http包request对象    Trailer Header','','inherit','open','open','','266-revision-v1','','','2015-05-26 07:38:27','2015-05-26 07:38:27','',266,'http://unasm.sinaapp.com/?p=271',0,'revision','',0),(284,1,'2015-05-28 02:58:18','2015-05-28 02:58:18','<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class=\"comment\">// Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class=\"comment\"> For client requests an empty string means GET.\r\n</span>//用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a></pre>\r\n<pre> \r\n   //用户请求的url\r\n   URL *<a href=\"http://127.0.0.1:8080/pkg/net/url/\">url</a>.<a href=\"http://127.0.0.1:8080/pkg/net/url/#URL\">URL\r\n</a>   用户访问所用的协议，\"HTTP/1.0\" 或者是  \"HTTP/1.1\"\r\n   Proto\r\n   //用户的http请求头里面的信息，例： \r\nUser-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\nAccept-Encoding:[gzip,deflate,sdch] \r\nAccept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\nRa-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\nConnection:[keep-alive] \r\nAccept:[*/*]</pre>\r\n<pre>   Header Header \r\n\r\n   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href=\"http://127.0.0.1:8080/pkg/io/\">io</a>.<a href=\"http://127.0.0.1:8080/pkg/io/#ReadCloser\">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>//主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //form包含了url和post或者put中的变量值，该变量只有在ParseForm执行过之后才可以用\r\n   Form url.Values \r\n   \r\n   //该变量包含post或者put中的参数，该变量只有在ParseForm执行过之后才可以用\r\n   PostForm url.Values\r\n</pre>\r\n<pre>   // MultipartForm 是解析的urltipart form得到的，包含了文件的上传，只有在 ParseMultipartForm执行之后，才可以使用</pre>\r\n<pre>    MultipartForm *<a href=\"http://127.0.0.1:8080/pkg/mime/multipart/\">multipart</a>.<a href=\"http://127.0.0.1:8080/pkg/mime/multipart/#Form\">Form\r\n </a>   \r\n\r\n    //指header中请求体之外的信息，最初header 的键值值包含键值为nil，当函数处理完body之后，trailer 就会包含非nik值的键值对。</pre>\r\n<pre>    Trailer <a href=\"http://127.0.0.1:8080/pkg/net/http/#Header\">Header</a>\r\n</pre>\r\n<pre>//RemoteAddr允许http服务器记录发送请求的地址，通常用于登陆\r\n    RemoteAddr <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string\r\n</a>\r\n    //不详\r\n    RequestURI\r\n \r\n    //TLS 允许http服务器和其他的软件记录接受请求的时候的TLS连接的信息，TLS在有函数句柄执行之前都是有效的，之后该值就一直是nil，该值通常被http客户端忽略</pre>\r\n<pre>    TLS *<a href=\"http://127.0.0.1:8080/pkg/crypto/tls/\">tls</a>.<a href=\"http://127.0.0.1:8080/pkg/crypto/tls/#ConnectionState\">ConnectionState</a></pre>\r\n<pre>}</pre>','golang http包request对象    属性值','','inherit','open','open','','266-revision-v1','','','2015-05-28 02:58:18','2015-05-28 02:58:18','',266,'http://unasm.sinaapp.com/?p=284',0,'revision','',0),(272,1,'2015-05-27 09:51:36','2015-05-27 09:51:36','源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，特征是 1. （注：8进制）的操作码\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关闭信号可能包含有一个信息体（body），说明关闭的原因，比如终端关机，信息帧过大，信息帧格式不对。如果有信息体体（body），那么这个信息体的前两位必须是在 <a href=\"https://tools.ietf.org/html/rfc6455#section-7.4\">Section 7.4</a> 中定义的状态码，紧接两个字节还是整数。\r\n\r\n解释的内容必须是UTF-8编码的数据，该解释内容本规范并不定义，该数据亦未必可读，但是最好对调试有帮助，或者和开启连接有关。既然数据未必对人可读，所以最好不要给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href=\"https://tools.ietf.org/html/rfc6455#section-5.3\">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n在双端都各自收发了一个关闭信号之后，终端会认为websocket已经关闭，底层的tcp连接必须立即断开。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也要断开。\r\n\r\nClose信号会在浏览器刷新之前以及主动断开连接的时候，发出\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href=\"https://tools.ietf.org/html/rfc6455#section-5.5.3\">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。','websocket 协议之控制帧 （RFC6455 5.5节）翻译','','publish','open','open','','websocket-%e5%8d%8f%e8%ae%ae%e4%b9%8b%e6%8e%a7%e5%88%b6%e5%b8%a7-%ef%bc%88rfc6455-5-5%e8%8a%82%ef%bc%89%e7%bf%bb%e8%af%91','','','2015-05-28 02:57:03','2015-05-28 02:57:03','',0,'http://unasm.sinaapp.com/?p=272',0,'post','',0),(273,1,'2015-05-27 09:51:36','2015-05-27 09:51:36','源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   控制帧\r\n\r\nwebsocket 控制帧是特征为 1. （注：8进制）的操作码        目前已经定义的操作码包括0x8(关闭信号)，0x9(ping信号)，0xA(pong信号)，操作码 0xB-0xF  尚未定义，以后备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态，可以插入在通信的碎片之中。\r\n\r\n全部的控制帧都必须在一个最长为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且不能被分割。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关系信号可能包含有一个包含了关闭的原因，比如关闭的结束位置，收到一个过大帧的结束位置（ 注，原文：such as an endpoint shutting down, an endpoint having received a frame too large）或者是一个格式不正确帧的结束位置 的结构体，如果有这么一个结构体（body），那么这个结构体的前两位（in network byte order）必须为非负数，代表了在 <a href=\"https://tools.ietf.org/html/rfc6455#section-7.4\">Section 7.4</a> 中定义的状态码。紧接着的还是两个整数，结构体可以包含UTF-8编码的数据，该解释不限定在本规范，该数据亦未必人可读，但是最好对调试有帮助，或者有用。所以既然数据未必对人可读，所以在客户端未必将其展示给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href=\"https://tools.ietf.org/html/rfc6455#section-5.3\">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也关闭了。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href=\"https://tools.ietf.org/html/rfc6455#section-5.5.3\">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。','websocket 协议之控制帧 （RFC6455 5.5节）翻译','','inherit','open','open','','272-revision-v1','','','2015-05-27 09:51:36','2015-05-27 09:51:36','',272,'http://unasm.sinaapp.com/?p=273',0,'revision','',0),(274,1,'2015-05-27 10:49:35','2015-05-27 10:49:35','源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\n\n5.5   WebSocket 控制帧\n\nWebsocket 控制帧的特征为 1. （注：8进制）的操作码\n\n&nbsp;\n\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，\n\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\n\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\n\n5.5.1 关闭信号(Close信号)\n\n关闭信号的状态码 是0x8.\n\n关闭信号可能包含有一个信息体（body），说明关闭的原因，比如终端关机，信息帧过大，信息帧格式不对。如果有信息体体（body），那么这个信息体的前两位必须是在 <a href=\"https://tools.ietf.org/html/rfc6455#section-7.4\">Section 7.4</a> 中定义的状态码，紧接两个字节还是整数。\n\n解释的内容必须是UTF-8编码的数据，该解释内容本规范并不定义，该数据亦未必可读，但是最好对调试有帮助，或者和开启连接有关。既然数据未必对人可读，所以最好不要给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href=\"https://tools.ietf.org/html/rfc6455#section-5.3\">Section 5.3</a>）。\n\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\n\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\n\n在双端都各自收发了一个关闭信号之后，终端会认为websocket已经关闭，底层的tcp连接必须立即断开。\n\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也要断开。\n\n5.5.2 Ping 信号\n\nPing信号帧包含状态码0x9。\n\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href=\"https://tools.ietf.org/html/rfc6455#section-5.5.3\">Section 5.5.3</a> 中讨论（注：也就是下面）。\n\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\n\n5.5.3 Pong信号\n\nPong信号帧必须包含状态码0xA。\n\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\n\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\n\nPong信号是被动信号，不能主动发送。','websocket 协议之控制帧 （RFC6455 5.5节）翻译','','inherit','open','open','','272-autosave-v1','','','2015-05-27 10:49:35','2015-05-27 10:49:35','',272,'http://unasm.sinaapp.com/?p=274',0,'revision','',0),(275,1,'2015-05-27 09:57:26','2015-05-27 09:57:26','源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebsocket 控制帧的特征为 1. （注：8进制）的操作码\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且不能被分割。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关系信号可能包含有一个包含了关闭的原因，比如关闭的结束位置，收到一个过大帧的结束位置（ 注，原文：such as an endpoint shutting down, an endpoint having received a frame too large）或者是一个格式不正确帧的结束位置 的结构体，如果有这么一个结构体（body），那么这个结构体的前两位（in network byte order）必须为非负数，代表了在 <a href=\"https://tools.ietf.org/html/rfc6455#section-7.4\">Section 7.4</a> 中定义的状态码。紧接着的还是两个整数，结构体可以包含UTF-8编码的数据，该解释不限定在本规范，该数据亦未必人可读，但是最好对调试有帮助，或者有用。所以既然数据未必对人可读，所以在客户端未必将其展示给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href=\"https://tools.ietf.org/html/rfc6455#section-5.3\">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也关闭了。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href=\"https://tools.ietf.org/html/rfc6455#section-5.5.3\">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。','websocket 协议之控制帧 （RFC6455 5.5节）翻译','','inherit','open','open','','272-revision-v1','','','2015-05-27 09:57:26','2015-05-27 09:57:26','',272,'http://unasm.sinaapp.com/?p=275',0,'revision','',0),(276,1,'2015-05-27 09:57:49','2015-05-27 09:57:49','源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebsocket 控制帧的特征为 1. （注：8进制）的操作码\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个包之中，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关系信号可能包含有一个包含了关闭的原因，比如关闭的结束位置，收到一个过大帧的结束位置（ 注，原文：such as an endpoint shutting down, an endpoint having received a frame too large）或者是一个格式不正确帧的结束位置 的结构体，如果有这么一个结构体（body），那么这个结构体的前两位（in network byte order）必须为非负数，代表了在 <a href=\"https://tools.ietf.org/html/rfc6455#section-7.4\">Section 7.4</a> 中定义的状态码。紧接着的还是两个整数，结构体可以包含UTF-8编码的数据，该解释不限定在本规范，该数据亦未必人可读，但是最好对调试有帮助，或者有用。所以既然数据未必对人可读，所以在客户端未必将其展示给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href=\"https://tools.ietf.org/html/rfc6455#section-5.3\">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也关闭了。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href=\"https://tools.ietf.org/html/rfc6455#section-5.5.3\">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。','websocket 协议之控制帧 （RFC6455 5.5节）翻译','','inherit','open','open','','272-revision-v1','','','2015-05-27 09:57:49','2015-05-27 09:57:49','',272,'http://unasm.sinaapp.com/?p=276',0,'revision','',0),(278,1,'2015-05-27 10:14:32','2015-05-27 10:14:32','源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebsocket 控制帧的特征为 1. （注：8进制）的操作码\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关闭信号可能包含有一个信息体（body），说明关闭的原因，比如终端关机，信息帧过大，信息帧格式不对。如果有信息体体（body），那么这个信息体的前两位必须是在 <a href=\"https://tools.ietf.org/html/rfc6455#section-7.4\">Section 7.4</a> 中定义的状态码，紧接两个字节还是整数。\r\n\r\n解释的内容必须是UTF-8编码的数据，该解释内容本规范并不定义，该数据亦未必可读，但是最好对调试有帮助，或者和开启连接有关。既然数据未必对人可读，所以最好不要给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close f\r\nrames sent from client to server must be masked as per <a href=\"https://tools.ietf.org/html/rfc6455#section-5.3\">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也关闭了。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href=\"https://tools.ietf.org/html/rfc6455#section-5.5.3\">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。','websocket 协议之控制帧 （RFC6455 5.5节）翻译','','inherit','open','open','','272-revision-v1','','','2015-05-27 10:14:32','2015-05-27 10:14:32','',272,'http://unasm.sinaapp.com/?p=278',0,'revision','',0),(277,1,'2015-05-27 09:58:22','2015-05-27 09:58:22','源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebsocket 控制帧的特征为 1. （注：8进制）的操作码\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关系信号可能包含有一个包含了关闭的原因，比如关闭的结束位置，收到一个过大帧的结束位置（ 注，原文：such as an endpoint shutting down, an endpoint having received a frame too large）或者是一个格式不正确帧的结束位置 的结构体，如果有这么一个结构体（body），那么这个结构体的前两位（in network byte order）必须为非负数，代表了在 <a href=\"https://tools.ietf.org/html/rfc6455#section-7.4\">Section 7.4</a> 中定义的状态码。紧接着的还是两个整数，结构体可以包含UTF-8编码的数据，该解释不限定在本规范，该数据亦未必人可读，但是最好对调试有帮助，或者有用。所以既然数据未必对人可读，所以在客户端未必将其展示给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href=\"https://tools.ietf.org/html/rfc6455#section-5.3\">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也关闭了。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href=\"https://tools.ietf.org/html/rfc6455#section-5.5.3\">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。','websocket 协议之控制帧 （RFC6455 5.5节）翻译','','inherit','open','open','','272-revision-v1','','','2015-05-27 09:58:22','2015-05-27 09:58:22','',272,'http://unasm.sinaapp.com/?p=277',0,'revision','',0),(279,1,'2015-05-27 10:50:17','2015-05-27 10:50:17','源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebsocket 控制帧的特征为 1. （注：8进制）的操作码\r\n\r\n&nbsp;\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关闭信号可能包含有一个信息体（body），说明关闭的原因，比如终端关机，信息帧过大，信息帧格式不对。如果有信息体体（body），那么这个信息体的前两位必须是在 <a href=\"https://tools.ietf.org/html/rfc6455#section-7.4\">Section 7.4</a> 中定义的状态码，紧接两个字节还是整数。\r\n\r\n解释的内容必须是UTF-8编码的数据，该解释内容本规范并不定义，该数据亦未必可读，但是最好对调试有帮助，或者和开启连接有关。既然数据未必对人可读，所以最好不要给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href=\"https://tools.ietf.org/html/rfc6455#section-5.3\">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n在双端都各自收发了一个关闭信号之后，终端会认为websocket已经关闭，底层的tcp连接必须立即断开。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也要断开。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href=\"https://tools.ietf.org/html/rfc6455#section-5.5.3\">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。','websocket 协议之控制帧 （RFC6455 5.5节）翻译','','inherit','open','open','','272-revision-v1','','','2015-05-27 10:50:17','2015-05-27 10:50:17','',272,'http://unasm.sinaapp.com/?p=279',0,'revision','',0),(280,1,'2015-05-27 10:50:46','2015-05-27 10:50:46','源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebsocket 控制帧的特征为 1. （注：8进制）的操作码\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关闭信号可能包含有一个信息体（body），说明关闭的原因，比如终端关机，信息帧过大，信息帧格式不对。如果有信息体体（body），那么这个信息体的前两位必须是在 <a href=\"https://tools.ietf.org/html/rfc6455#section-7.4\">Section 7.4</a> 中定义的状态码，紧接两个字节还是整数。\r\n\r\n解释的内容必须是UTF-8编码的数据，该解释内容本规范并不定义，该数据亦未必可读，但是最好对调试有帮助，或者和开启连接有关。既然数据未必对人可读，所以最好不要给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href=\"https://tools.ietf.org/html/rfc6455#section-5.3\">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n在双端都各自收发了一个关闭信号之后，终端会认为websocket已经关闭，底层的tcp连接必须立即断开。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也要断开。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href=\"https://tools.ietf.org/html/rfc6455#section-5.5.3\">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。','websocket 协议之控制帧 （RFC6455 5.5节）翻译','','inherit','open','open','','272-revision-v1','','','2015-05-27 10:50:46','2015-05-27 10:50:46','',272,'http://unasm.sinaapp.com/?p=280',0,'revision','',0),(281,1,'2015-05-27 10:51:19','2015-05-27 10:51:19','源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，特征为 1. （注：8进制）的操作码\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关闭信号可能包含有一个信息体（body），说明关闭的原因，比如终端关机，信息帧过大，信息帧格式不对。如果有信息体体（body），那么这个信息体的前两位必须是在 <a href=\"https://tools.ietf.org/html/rfc6455#section-7.4\">Section 7.4</a> 中定义的状态码，紧接两个字节还是整数。\r\n\r\n解释的内容必须是UTF-8编码的数据，该解释内容本规范并不定义，该数据亦未必可读，但是最好对调试有帮助，或者和开启连接有关。既然数据未必对人可读，所以最好不要给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href=\"https://tools.ietf.org/html/rfc6455#section-5.3\">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n在双端都各自收发了一个关闭信号之后，终端会认为websocket已经关闭，底层的tcp连接必须立即断开。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也要断开。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href=\"https://tools.ietf.org/html/rfc6455#section-5.5.3\">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。','websocket 协议之控制帧 （RFC6455 5.5节）翻译','','inherit','open','open','','272-revision-v1','','','2015-05-27 10:51:19','2015-05-27 10:51:19','',272,'http://unasm.sinaapp.com/?p=281',0,'revision','',0),(282,1,'2015-05-27 10:51:30','2015-05-27 10:51:30','源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，特征是 1. （注：8进制）的操作码\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关闭信号可能包含有一个信息体（body），说明关闭的原因，比如终端关机，信息帧过大，信息帧格式不对。如果有信息体体（body），那么这个信息体的前两位必须是在 <a href=\"https://tools.ietf.org/html/rfc6455#section-7.4\">Section 7.4</a> 中定义的状态码，紧接两个字节还是整数。\r\n\r\n解释的内容必须是UTF-8编码的数据，该解释内容本规范并不定义，该数据亦未必可读，但是最好对调试有帮助，或者和开启连接有关。既然数据未必对人可读，所以最好不要给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href=\"https://tools.ietf.org/html/rfc6455#section-5.3\">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n在双端都各自收发了一个关闭信号之后，终端会认为websocket已经关闭，底层的tcp连接必须立即断开。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也要断开。\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href=\"https://tools.ietf.org/html/rfc6455#section-5.5.3\">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。','websocket 协议之控制帧 （RFC6455 5.5节）翻译','','inherit','open','open','','272-revision-v1','','','2015-05-27 10:51:30','2015-05-27 10:51:30','',272,'http://unasm.sinaapp.com/?p=282',0,'revision','',0),(283,1,'2015-05-28 01:47:03','2015-05-28 01:47:03','源英文连接   https://tools.ietf.org/html/rfc6455#section-5.5\r\n\r\n5.5   WebSocket 控制帧\r\n\r\nWebSocket 控制帧的状态码  用  0x8 - 0xF  表示，特征是 1. （注：8进制）的操作码\r\n\r\n目前已经定义的操作码包括0x8(关闭信号)，0x9(Ping信号)，0xA(Pong信号)，操作码 0xB-0xF  尚未定义，备用。\r\n\r\n控制帧适用于控制WebSocket的通信状态。全部的控制帧都必须在一个最长长度为125字节的载荷（注：网络通信中的信息段，包的组成部分）中，并且同一个数据包之中，只能有一段控制帧载荷，不能分割成几段。\r\n\r\n5.5.1 关闭信号(Close信号)\r\n\r\n关闭信号的状态码 是0x8.\r\n\r\n关闭信号可能包含有一个信息体（body），说明关闭的原因，比如终端关机，信息帧过大，信息帧格式不对。如果有信息体体（body），那么这个信息体的前两位必须是在 <a href=\"https://tools.ietf.org/html/rfc6455#section-7.4\">Section 7.4</a> 中定义的状态码，紧接两个字节还是整数。\r\n\r\n解释的内容必须是UTF-8编码的数据，该解释内容本规范并不定义，该数据亦未必可读，但是最好对调试有帮助，或者和开启连接有关。既然数据未必对人可读，所以最好不要给用户看。从客户端发送到服务器的关闭信号则必须被屏蔽（ Close frames sent from client to server must be masked as per <a href=\"https://tools.ietf.org/html/rfc6455#section-5.3\">Section 5.3</a>）。\r\n\r\n应用程序发送了关闭信号之后，必须不能再发送任何信息。\r\n\r\n如果服务端或者客户端收到了一个关闭信号，但是之前还没有发送过关闭信号，作为回应，该端（服务端/客户端）必须发送一个关闭帧信号作为回应。发送回应关闭信号的事后，必须将它收到的状态码也一并返回。在收到关闭信号之后，应尽快回应，虽然也许会等待当前正在发送的信息发送完毕之后再发送，但是不保证这些继续发送的信息会被对方接受并响应（注：就是这些信息，再发也没用了，对方close了）。\r\n\r\n在双端都各自收发了一个关闭信号之后，终端会认为websocket已经关闭，底层的tcp连接必须立即断开。\r\n\r\n如果客户端和服务器同时发送了一个关闭信号，两个终端都会发送和接受了一个关闭信号，我们认为websocke协议已经关闭了，并且底层的TCP连接也要断开。\r\n\r\nClose信号会在浏览器刷新之前以及主动断开连接的时候，发出\r\n\r\n5.5.2 Ping 信号\r\n\r\nPing信号帧包含状态码0x9。\r\n\r\nPing信号帧应该包含“应用数据（Application data）”，收到Ping信号之后，该终端必须发送一个Pong信号作为回应，除非该终端已经发送了一个关闭信号。该终端应该尽快的发送一个Pong信号，关于Pong信号，会在  <a href=\"https://tools.ietf.org/html/rfc6455#section-5.5.3\">Section 5.5.3</a> 中讨论（注：也就是下面）。\r\n无论是服务端，还是客户端，在连接建立之后，关闭之前，都可能随时发送一个Ping信号，用来确认连接依旧畅通。\r\n\r\n5.5.3 Pong信号\r\n\r\nPong信号帧必须包含状态码0xA。\r\n\r\nPong信号帧必须包含Ping信号中的“应用数据”（Application data）作为回应。\r\n\r\n如果终端收到了一个Ping信号，却尚未来得及回应之前的Ping信号，该终端选择回应据现在最近的Ping。\r\n\r\nPong信号是被动信号，不能主动发送。','websocket 协议之控制帧 （RFC6455 5.5节）翻译','','inherit','open','open','','272-revision-v1','','','2015-05-28 01:47:03','2015-05-28 01:47:03','',272,'http://unasm.sinaapp.com/?p=283',0,'revision','',0),(285,1,'2015-05-28 02:59:27','2015-05-28 02:59:27','<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class=\"comment\">   // Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class=\"comment\"> For client requests an empty string means GET.\r\n</span>   //用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a></pre>\r\n<pre>   //用户请求的url\r\n   URL *<a href=\"http://127.0.0.1:8080/pkg/net/url/\">url</a>.<a href=\"http://127.0.0.1:8080/pkg/net/url/#URL\">URL\r\n</a>   用户访问所用的协议，\"HTTP/1.0\" 或者是  \"HTTP/1.1\"\r\n   Proto\r\n   /* 用户的http请求头里面的信息，例： \r\n   User-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\n   Accept-Encoding:[gzip,deflate,sdch] \r\n   Accept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\n   Ra-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\n   Connection:[keep-alive] \r\n   Accept:[*/*]\r\n   */</pre>\r\n<pre>   Header Header \r\n\r\n   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href=\"http://127.0.0.1:8080/pkg/io/\">io</a>.<a href=\"http://127.0.0.1:8080/pkg/io/#ReadCloser\">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>//主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //form包含了url和post或者put中的变量值，该变量只有在ParseForm执行过之后才可以用\r\n   Form url.Values \r\n   \r\n   //该变量包含post或者put中的参数，该变量只有在ParseForm执行过之后才可以用\r\n   PostForm url.Values\r\n</pre>\r\n<pre>   // MultipartForm 是解析的urltipart form得到的，包含了文件的上传，只有在 ParseMultipartForm执行之后，才可以使用</pre>\r\n<pre>    MultipartForm *<a href=\"http://127.0.0.1:8080/pkg/mime/multipart/\">multipart</a>.<a href=\"http://127.0.0.1:8080/pkg/mime/multipart/#Form\">Form\r\n </a>   \r\n\r\n    //指header中请求体之外的信息，最初header 的键值值包含键值为nil，当函数处理完body之后，trailer 就会包含非nik值的键值对。</pre>\r\n<pre>    Trailer <a href=\"http://127.0.0.1:8080/pkg/net/http/#Header\">Header</a>\r\n</pre>\r\n<pre>//RemoteAddr允许http服务器记录发送请求的地址，通常用于登陆\r\n    RemoteAddr <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string\r\n</a>\r\n    //不详\r\n    RequestURI\r\n \r\n    //TLS 允许http服务器和其他的软件记录接受请求的时候的TLS连接的信息，TLS在有函数句柄执行之前都是有效的，之后该值就一直是nil，该值通常被http客户端忽略</pre>\r\n<pre>    TLS *<a href=\"http://127.0.0.1:8080/pkg/crypto/tls/\">tls</a>.<a href=\"http://127.0.0.1:8080/pkg/crypto/tls/#ConnectionState\">ConnectionState</a></pre>\r\n<pre>}</pre>','golang http包request对象    属性值','','inherit','open','open','','266-revision-v1','','','2015-05-28 02:59:27','2015-05-28 02:59:27','',266,'http://unasm.sinaapp.com/?p=285',0,'revision','',0),(286,1,'2015-05-28 03:00:15','2015-05-28 03:00:15','<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class=\"comment\">   // Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class=\"comment\"> For client requests an empty string means GET.\r\n</span>   //用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a></pre>\r\n<pre>   //用户请求的url\r\n   URL *<a href=\"http://127.0.0.1:8080/pkg/net/url/\">url</a>.<a href=\"http://127.0.0.1:8080/pkg/net/url/#URL\">URL\r\n</a>   用户访问所用的协议，\"HTTP/1.0\" 或者是  \"HTTP/1.1\"\r\n   Proto\r\n   /* 用户的http请求头里面的信息，例： \r\n   User-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\n   Accept-Encoding:[gzip,deflate,sdch] \r\n   Accept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\n   Ra-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\n   Connection:[keep-alive] \r\n   Accept:[*/*]\r\n   */\r\n   Header Header</pre>\r\n<pre>\r\n   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href=\"http://127.0.0.1:8080/pkg/io/\">io</a>.<a href=\"http://127.0.0.1:8080/pkg/io/#ReadCloser\">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>//主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //form包含了url和post或者put中的变量值，该变量只有在ParseForm执行过之后才可以用\r\n   Form url.Values \r\n   \r\n   //该变量包含post或者put中的参数，该变量只有在ParseForm执行过之后才可以用\r\n   PostForm url.Values\r\n</pre>\r\n<pre>   // MultipartForm 是解析的urltipart form得到的，包含了文件的上传，只有在 ParseMultipartForm执行之后，才可以使用</pre>\r\n<pre>    MultipartForm *<a href=\"http://127.0.0.1:8080/pkg/mime/multipart/\">multipart</a>.<a href=\"http://127.0.0.1:8080/pkg/mime/multipart/#Form\">Form\r\n </a>   \r\n\r\n    //指header中请求体之外的信息，最初header 的键值值包含键值为nil，当函数处理完body之后，trailer 就会包含非nik值的键值对。</pre>\r\n<pre>    Trailer <a href=\"http://127.0.0.1:8080/pkg/net/http/#Header\">Header</a>\r\n</pre>\r\n<pre>//RemoteAddr允许http服务器记录发送请求的地址，通常用于登陆\r\n    RemoteAddr <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string\r\n</a>\r\n    //不详\r\n    RequestURI\r\n \r\n    //TLS 允许http服务器和其他的软件记录接受请求的时候的TLS连接的信息，TLS在有函数句柄执行之前都是有效的，之后该值就一直是nil，该值通常被http客户端忽略</pre>\r\n<pre>    TLS *<a href=\"http://127.0.0.1:8080/pkg/crypto/tls/\">tls</a>.<a href=\"http://127.0.0.1:8080/pkg/crypto/tls/#ConnectionState\">ConnectionState</a></pre>\r\n<pre>}</pre>','golang http包request对象    属性值','','inherit','open','open','','266-revision-v1','','','2015-05-28 03:00:15','2015-05-28 03:00:15','',266,'http://unasm.sinaapp.com/?p=286',0,'revision','',0),(287,1,'2015-05-28 03:00:59','2015-05-28 03:00:59','<pre>type Request struct {\r\n\r\n</pre>\r\n<pre><span class=\"comment\">   // Method specifies the HTTP method (GET, POST, PUT, etc.).</span><span class=\"comment\"> For client requests an empty string means GET.\r\n</span>   //用户提交的时候的方法，指GET/POST/PUT等等，为空的时候指GET\r\n  Method <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a></pre>\r\n<pre>   //用户请求的url\r\n   URL *<a href=\"http://127.0.0.1:8080/pkg/net/url/\">url</a>.<a href=\"http://127.0.0.1:8080/pkg/net/url/#URL\">URL\r\n</a>   用户访问所用的协议，\"HTTP/1.0\" 或者是  \"HTTP/1.1\"\r\n   Proto\r\n   /* 用户的http请求头里面的信息，例： \r\n   User-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36] \r\n   Accept-Encoding:[gzip,deflate,sdch] \r\n   Accept-Language:[zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4] \r\n   Ra-Ver:[2.10.4] Ra-Sid:[3D8798DA-20150303-034052-12a566-f9928d] \r\n   Connection:[keep-alive] \r\n   Accept:[*/*]\r\n   */\r\n   Header Header</pre>\r\n<pre>   //请求体例如 &amp;{{} {&lt;nil&gt;}}，在post提交的时候，这里应该不同\r\n   Body <a href=\"http://127.0.0.1:8080/pkg/io/\">io</a>.<a href=\"http://127.0.0.1:8080/pkg/io/#ReadCloser\">ReadCloser</a></pre>\r\n<pre>   //传输的状态码，通常是可以被忽略的，在传输大段内容的时候，自动添加和去除的\r\n   TransferEncoding</pre>\r\n<pre>   //主机的域名和端口，127.0.0.1:8010   \r\n   Host string \r\n   \r\n   //form包含了url和post或者put中的变量值，该变量只有在ParseForm执行过之后才可以用\r\n   Form url.Values \r\n   \r\n   //该变量包含post或者put中的参数，该变量只有在ParseForm执行过之后才可以用\r\n   PostForm url.Values\r\n</pre>\r\n<pre>    // MultipartForm 是解析的urltipart form得到的，包含了文件的上传，只有在ParseMultipartForm执行之后，才可以使用</pre>\r\n<pre>    MultipartForm *<a href=\"http://127.0.0.1:8080/pkg/mime/multipart/\">multipart</a>.<a href=\"http://127.0.0.1:8080/pkg/mime/multipart/#Form\">Form\r\n </a>   \r\n\r\n    //指header中请求体之外的信息，最初header 的键值值包含键值为nil，当函数处理完body之后，trailer 就会包含非nik值的键值对。</pre>\r\n<pre>    Trailer <a href=\"http://127.0.0.1:8080/pkg/net/http/#Header\">Header</a>\r\n</pre>\r\n<pre>    //RemoteAddr允许http服务器记录发送请求的地址，通常用于登陆\r\n    RemoteAddr <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string\r\n</a>\r\n    //不详\r\n    RequestURI\r\n \r\n    //TLS 允许http服务器和其他的软件记录接受请求的时候的TLS连接的信息，TLS在有函数句柄执行之前都是有效的，之后该值就一直是nil，该值通常被http客户端忽略</pre>\r\n<pre>    TLS *<a href=\"http://127.0.0.1:8080/pkg/crypto/tls/\">tls</a>.<a href=\"http://127.0.0.1:8080/pkg/crypto/tls/#ConnectionState\">ConnectionState</a></pre>\r\n<pre>}</pre>','golang http包request对象    属性值','','inherit','open','open','','266-revision-v1','','','2015-05-28 03:00:59','2015-05-28 03:00:59','',266,'http://unasm.sinaapp.com/?p=287',0,'revision','',0),(288,1,'2015-05-29 07:46:00','2015-05-29 07:46:00','今天遇到一个问题，功能很简单，就是给线上的文章加锁，每篇文章只能由一个人访问编辑，设想很简单，两个结构体，一个结构体 hub 保存全部的正在被访问的文章的列表，一个结构体 client 是文章的内容以及属性。当每个文章被访问的时候，将放入信道hub的一个信道之中，单独开一个goroutine , 监听goroutine的信号变化，一旦信道变化，就读取变化，然后放入数组中。\r\n\r\n很简单，对吧。但就是出了奇葩问题。\r\n\r\n我开始的时候，准备两个函数,一个Index，处理http/websocket请求，一个是监听hub信道变化的，在Index 函数里面,通过信道将正在访问的文章信息传递给hub，然后我发现了灵异的情况，就是及时赋值给信道，也是没有用处的，必须等这个链接短开之后，被监听到，但是这个时候，链接已经断开了，文章已经不被访问了。\r\n\r\n解决方法是写三个函数，一个是监听hub信道变化的，一个是原来的Index，然后把阻塞监听websocket 链接的部分放在一个新的函数里面，然后将对hub信道变化的部分放在Index里面，这样，等Index函数执行完毕的时候，Hub就能捕捉到信道变化了。\r\n\r\nHere is the code\r\n<p class=\"p1\"><span class=\"s1\">func</span> <span class=\"s3\">Ind</span><span class=\"s4\">e</span><span class=\"s3\">x</span><span class=\"s2\">(w http.ResponseWriter, r </span><span class=\"s1\">*</span><span class=\"s2\">http.Request) {</span></p>\r\n.......\r\n<p class=\"p1\"><span class=\"s1\">  h.</span><span class=\"s2\">register</span> <span class=\"s3\">&lt;-</span><span class=\"s1\"> c<span class=\"Apple-converted-space\">                                                                                                                                                           </span></span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">f</span><span class=\"s4\">or</span><span class=\"s5\"> {</span></p>\r\n<p class=\"p2\"><span class=\"s7\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s7\"> <span class=\"Apple-converted-space\">  </span></span><span class=\"s5\">//守护着这个连接，从连接中读取信息，然后通过信道传递给broadcast ，进入传递的队列</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>_, msg, err </span><span class=\"s4\">:=</span><span class=\"s5\"> c.ws.</span><span class=\"s8\">ReadMessage</span><span class=\"s5\">()</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span></span><span class=\"s4\">if</span><span class=\"s5\"> err </span><span class=\"s4\">!=</span> <span class=\"s9\">nil</span><span class=\"s5\"> {</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">      </span></span><span class=\"s4\">break</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>h.broadcast </span><span class=\"s4\">&lt;-</span> <span class=\"s8\">string</span><span class=\"s5\">(msg)</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">}</span></p>\r\n<p class=\"p3\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s7\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">d</span><span class=\"s5\">efer</span> <span class=\"s5\">func</span><span class=\"s7\">() {</span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>Println(</span><span class=\"s9\">\"defering\"</span><span class=\"s5\">)</span></p>\r\n<p class=\"p1\"><span class=\"s4\"> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>h.un</span><span class=\"s2\">register</span> <span class=\"s4\">&lt;-</span><span class=\"s5\"> c</span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>c.ws.</span><span class=\"s8\">Close</span><span class=\"s5\">()</span></p>\r\n<p class=\"p1\"><span class=\"s5\">     </span> <span class=\"s5\">   </span><span class=\"s4\">close</span><span class=\"s5\">(c.send)</span></p>\r\n<p class=\"p1\"><span class=\"s6\">}</span><span class=\"s5\">()</span></p>\r\n<p class=\"p1\">}</p>\r\n<p class=\"p1\">新的方案就是把除第一行以外的代码，从for开始，到close下面的独立出来，放在一个新的函数里面，然后调用这个函数，h.register &lt;- c 保留在Index函数里，这样在调用新函数的时候，监听h.register的函数就能捕捉到register的变化了</p>\r\n<p class=\"p1\">/****************************************************************************************/</p>\r\n<p class=\"p1\">经朋友指点，指出是缓冲的问题，register变量声明的时候，是通过make(chan *client)的方式，这样声明会默认自己带缓冲，所以可以通过make(chan *client，1)的方式，这样赋值之后，立即生效，检测register变化的函数立即就捕捉到了信道的变化，</p>','golang 信道的坑','','publish','open','open','','websocket-%e4%bf%a1%e9%81%93%e7%9a%84%e5%9d%91','','','2015-05-29 08:49:41','2015-05-29 08:49:41','',0,'http://unasm.sinaapp.com/?p=288',0,'post','',0),(289,1,'2015-05-29 07:46:00','2015-05-29 07:46:00','今天遇到一个问题，功能很简单，就是给线上的文章加锁，每篇文章只能由一个人访问编辑，设想很简单，两个结构体，一个结构体 hub 保存全部的正在被访问的文章的列表，一个结构体 client 是文章的内容以及属性。当每个文章被访问的时候，将放入信道hub的一个信道之中，单独开一个goroutine , 监听goroutine的信号变化，一旦信道变化，就读取变化，然后放入数组中。\r\n\r\n很简单，对吧。但就是出了奇葩问题。\r\n\r\n我开始的时候，准备两个函数,一个Index，处理http/websocket请求，一个是监听hub信道变化的，在Index 函数里面,通过信道将正在访问的文章信息传递给hub，然后我发现了灵异的情况，就是及时赋值给信道，也是没有用处的，必须等这个链接短开之后，被监听到，但是这个时候，链接已经断开了，文章已经不被访问了。\r\n\r\n解决方法是写三个函数，一个是监听hub信道变化的，一个是原来的Index，然后把阻塞监听websocket 链接的部分放在一个新的函数里面，然后将对hub信道变化的部分放在Index里面，这样，等Index函数执行完毕的时候，Hub就能捕捉到信道变化了。','websocket 信道的坑','','inherit','open','open','','288-revision-v1','','','2015-05-29 07:46:00','2015-05-29 07:46:00','',288,'http://unasm.sinaapp.com/?p=289',0,'revision','',0),(290,1,'2015-05-29 08:48:36','2015-05-29 08:48:36','今天遇到一个问题，功能很简单，就是给线上的文章加锁，每篇文章只能由一个人访问编辑，设想很简单，两个结构体，一个结构体 hub 保存全部的正在被访问的文章的列表，一个结构体 client 是文章的内容以及属性。当每个文章被访问的时候，将放入信道hub的一个信道之中，单独开一个goroutine , 监听goroutine的信号变化，一旦信道变化，就读取变化，然后放入数组中。\n\n很简单，对吧。但就是出了奇葩问题。\n\n我开始的时候，准备两个函数,一个Index，处理http/websocket请求，一个是监听hub信道变化的，在Index 函数里面,通过信道将正在访问的文章信息传递给hub，然后我发现了灵异的情况，就是及时赋值给信道，也是没有用处的，必须等这个链接短开之后，被监听到，但是这个时候，链接已经断开了，文章已经不被访问了。\n\n解决方法是写三个函数，一个是监听hub信道变化的，一个是原来的Index，然后把阻塞监听websocket 链接的部分放在一个新的函数里面，然后将对hub信道变化的部分放在Index里面，这样，等Index函数执行完毕的时候，Hub就能捕捉到信道变化了。\n\nHere is the code\n<p class=\"p1\"><span class=\"s1\">func</span> <span class=\"s3\">Ind</span><span class=\"s4\">e</span><span class=\"s3\">x</span><span class=\"s2\">(w http.ResponseWriter, r </span><span class=\"s1\">*</span><span class=\"s2\">http.Request) {</span></p>\n.......\n<p class=\"p1\"><span class=\"s1\">  h.</span><span class=\"s2\">register</span> <span class=\"s3\">&lt;-</span><span class=\"s1\"> c<span class=\"Apple-converted-space\">                                                                                                                                                           </span></span></p>\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">f</span><span class=\"s4\">or</span><span class=\"s5\"> {</span></p>\n<p class=\"p2\"><span class=\"s7\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s7\"> <span class=\"Apple-converted-space\">  </span></span><span class=\"s5\">//守护着这个连接，从连接中读取信息，然后通过信道传递给broadcast ，进入传递的队列</span></p>\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>_, msg, err </span><span class=\"s4\">:=</span><span class=\"s5\"> c.ws.</span><span class=\"s8\">ReadMessage</span><span class=\"s5\">()</span></p>\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span></span><span class=\"s4\">if</span><span class=\"s5\"> err </span><span class=\"s4\">!=</span> <span class=\"s9\">nil</span><span class=\"s5\"> {</span></p>\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">      </span></span><span class=\"s4\">break</span></p>\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>}</span></p>\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>h.broadcast </span><span class=\"s4\">&lt;-</span> <span class=\"s8\">string</span><span class=\"s5\">(msg)</span></p>\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">}</span></p>\n<p class=\"p3\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s7\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">d</span><span class=\"s5\">efer</span> <span class=\"s5\">func</span><span class=\"s7\">() {</span></p>\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>Println(</span><span class=\"s9\">\"defering\"</span><span class=\"s5\">)</span></p>\n<p class=\"p1\"><span class=\"s4\"> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>h.un</span><span class=\"s2\">register</span> <span class=\"s4\">&lt;-</span><span class=\"s5\"> c</span></p>\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>c.ws.</span><span class=\"s8\">Close</span><span class=\"s5\">()</span></p>\n<p class=\"p1\"><span class=\"s5\">     </span> <span class=\"s5\">   </span><span class=\"s4\">close</span><span class=\"s5\">(c.send)</span></p>\n<p class=\"p1\"><span class=\"s6\">}</span><span class=\"s5\">()</span></p>\n<p class=\"p1\">}</p>\n<p class=\"p1\">新的方案就是把除第一行以外的代码，从for开始，到close下面的独立出来，放在一个新的函数里面，然后调用这个函数，h.register &lt;- c 保留在Index函数里，这样在调用新函数的时候，监听h.register的函数就能捕捉到register的变化了</p>\n<p class=\"p1\"></p>\n<p class=\"p1\">/****************************************************************************************/</p>\n<p class=\"p1\">经朋友指点，指出是缓冲的问题，register变量声明的时候，是通过make(chan *client)的方式，这样声明会默认自己带缓冲，所以可以通过make(chan *client，1)的方式，这样赋值之后，立即生效，jian\'ce</p>','golang 信道的坑','','inherit','open','open','','288-autosave-v1','','','2015-05-29 08:48:36','2015-05-29 08:48:36','',288,'http://unasm.sinaapp.com/?p=290',0,'revision','',0),(291,1,'2015-05-29 07:54:32','2015-05-29 07:54:32','今天遇到一个问题，功能很简单，就是给线上的文章加锁，每篇文章只能由一个人访问编辑，设想很简单，两个结构体，一个结构体 hub 保存全部的正在被访问的文章的列表，一个结构体 client 是文章的内容以及属性。当每个文章被访问的时候，将放入信道hub的一个信道之中，单独开一个goroutine , 监听goroutine的信号变化，一旦信道变化，就读取变化，然后放入数组中。\r\n\r\n很简单，对吧。但就是出了奇葩问题。\r\n\r\n我开始的时候，准备两个函数,一个Index，处理http/websocket请求，一个是监听hub信道变化的，在Index 函数里面,通过信道将正在访问的文章信息传递给hub，然后我发现了灵异的情况，就是及时赋值给信道，也是没有用处的，必须等这个链接短开之后，被监听到，但是这个时候，链接已经断开了，文章已经不被访问了。\r\n\r\n解决方法是写三个函数，一个是监听hub信道变化的，一个是原来的Index，然后把阻塞监听websocket 链接的部分放在一个新的函数里面，然后将对hub信道变化的部分放在Index里面，这样，等Index函数执行完毕的时候，Hub就能捕捉到信道变化了。\r\n\r\nHere is the code\r\n\r\nfunc Index() {\r\n\r\n.......\r\n<p class=\"p1\"><span class=\"s1\">  h.</span><span class=\"s2\">register</span> <span class=\"s3\">&lt;-</span><span class=\"s1\"> c<span class=\"Apple-converted-space\">                                                                                                                                                           </span></span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">f</span><span class=\"s4\">or</span><span class=\"s5\"> {</span></p>\r\n<p class=\"p2\"><span class=\"s7\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s7\"> <span class=\"Apple-converted-space\">  </span></span><span class=\"s5\">//守护着这个连接，从连接中读取信息，然后通过信道传递给broadcast ，进入传递的队列</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>_, msg, err </span><span class=\"s4\">:=</span><span class=\"s5\"> c.ws.</span><span class=\"s8\">ReadMessage</span><span class=\"s5\">()</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span></span><span class=\"s4\">if</span><span class=\"s5\"> err </span><span class=\"s4\">!=</span> <span class=\"s9\">nil</span><span class=\"s5\"> {</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">      </span></span><span class=\"s4\">break</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>h.broadcast </span><span class=\"s4\">&lt;-</span> <span class=\"s8\">string</span><span class=\"s5\">(msg)</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">}</span></p>\r\n<p class=\"p3\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s7\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">d</span><span class=\"s5\">efer</span> <span class=\"s5\">func</span><span class=\"s7\">() {</span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>Println(</span><span class=\"s9\">\"defering\"</span><span class=\"s5\">)</span></p>\r\n<p class=\"p1\"><span class=\"s4\"> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>h.un</span><span class=\"s2\">register</span> <span class=\"s4\">&lt;-</span><span class=\"s5\"> c</span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>c.ws.</span><span class=\"s8\">Close</span><span class=\"s5\">()</span></p>\r\n<p class=\"p1\"><span class=\"s5\">     </span> <span class=\"s5\">   </span><span class=\"s4\">close</span><span class=\"s5\">(c.send)</span></p>\r\n<p class=\"p1\"><span class=\"s6\">}</span><span class=\"s5\">()</span></p>\r\n<p class=\"p1\">}</p>\r\n<p class=\"p1\">新的方案就是把除第一行以外的代码，从for开始，到close下面的独立出来，放在一个新的函数里面，然后调用这个函数，h.register &lt;- c 保留在Index函数里，这样在调用新函数的时候，监听h.register的函数就能捕捉到register的变化了</p>','websocket 信道的坑','','inherit','open','open','','288-revision-v1','','','2015-05-29 07:54:32','2015-05-29 07:54:32','',288,'http://unasm.sinaapp.com/?p=291',0,'revision','',0),(292,1,'2015-05-29 07:55:41','2015-05-29 07:55:41','今天遇到一个问题，功能很简单，就是给线上的文章加锁，每篇文章只能由一个人访问编辑，设想很简单，两个结构体，一个结构体 hub 保存全部的正在被访问的文章的列表，一个结构体 client 是文章的内容以及属性。当每个文章被访问的时候，将放入信道hub的一个信道之中，单独开一个goroutine , 监听goroutine的信号变化，一旦信道变化，就读取变化，然后放入数组中。\r\n\r\n很简单，对吧。但就是出了奇葩问题。\r\n\r\n我开始的时候，准备两个函数,一个Index，处理http/websocket请求，一个是监听hub信道变化的，在Index 函数里面,通过信道将正在访问的文章信息传递给hub，然后我发现了灵异的情况，就是及时赋值给信道，也是没有用处的，必须等这个链接短开之后，被监听到，但是这个时候，链接已经断开了，文章已经不被访问了。\r\n\r\n解决方法是写三个函数，一个是监听hub信道变化的，一个是原来的Index，然后把阻塞监听websocket 链接的部分放在一个新的函数里面，然后将对hub信道变化的部分放在Index里面，这样，等Index函数执行完毕的时候，Hub就能捕捉到信道变化了。\r\n\r\nHere is the code\r\n<p class=\"p1\"><span class=\"s1\">func</span> <span class=\"s3\">Ind</span><span class=\"s4\">e</span><span class=\"s3\">x</span><span class=\"s2\">(w http.ResponseWriter, r </span><span class=\"s1\">*</span><span class=\"s2\">http.Request) {</span></p>\r\n.......\r\n<p class=\"p1\"><span class=\"s1\">  h.</span><span class=\"s2\">register</span> <span class=\"s3\">&lt;-</span><span class=\"s1\"> c<span class=\"Apple-converted-space\">                                                                                                                                                           </span></span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">f</span><span class=\"s4\">or</span><span class=\"s5\"> {</span></p>\r\n<p class=\"p2\"><span class=\"s7\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s7\"> <span class=\"Apple-converted-space\">  </span></span><span class=\"s5\">//守护着这个连接，从连接中读取信息，然后通过信道传递给broadcast ，进入传递的队列</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>_, msg, err </span><span class=\"s4\">:=</span><span class=\"s5\"> c.ws.</span><span class=\"s8\">ReadMessage</span><span class=\"s5\">()</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span></span><span class=\"s4\">if</span><span class=\"s5\"> err </span><span class=\"s4\">!=</span> <span class=\"s9\">nil</span><span class=\"s5\"> {</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">      </span></span><span class=\"s4\">break</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>h.broadcast </span><span class=\"s4\">&lt;-</span> <span class=\"s8\">string</span><span class=\"s5\">(msg)</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">}</span></p>\r\n<p class=\"p3\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s7\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">d</span><span class=\"s5\">efer</span> <span class=\"s5\">func</span><span class=\"s7\">() {</span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>Println(</span><span class=\"s9\">\"defering\"</span><span class=\"s5\">)</span></p>\r\n<p class=\"p1\"><span class=\"s4\"> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>h.un</span><span class=\"s2\">register</span> <span class=\"s4\">&lt;-</span><span class=\"s5\"> c</span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>c.ws.</span><span class=\"s8\">Close</span><span class=\"s5\">()</span></p>\r\n<p class=\"p1\"><span class=\"s5\">     </span> <span class=\"s5\">   </span><span class=\"s4\">close</span><span class=\"s5\">(c.send)</span></p>\r\n<p class=\"p1\"><span class=\"s6\">}</span><span class=\"s5\">()</span></p>\r\n<p class=\"p1\">}</p>\r\n<p class=\"p1\">新的方案就是把除第一行以外的代码，从for开始，到close下面的独立出来，放在一个新的函数里面，然后调用这个函数，h.register &lt;- c 保留在Index函数里，这样在调用新函数的时候，监听h.register的函数就能捕捉到register的变化了</p>','websocket 信道的坑','','inherit','open','open','','288-revision-v1','','','2015-05-29 07:55:41','2015-05-29 07:55:41','',288,'http://unasm.sinaapp.com/?p=292',0,'revision','',0),(293,1,'2015-05-29 08:48:57','2015-05-29 08:48:57','今天遇到一个问题，功能很简单，就是给线上的文章加锁，每篇文章只能由一个人访问编辑，设想很简单，两个结构体，一个结构体 hub 保存全部的正在被访问的文章的列表，一个结构体 client 是文章的内容以及属性。当每个文章被访问的时候，将放入信道hub的一个信道之中，单独开一个goroutine , 监听goroutine的信号变化，一旦信道变化，就读取变化，然后放入数组中。\r\n\r\n很简单，对吧。但就是出了奇葩问题。\r\n\r\n我开始的时候，准备两个函数,一个Index，处理http/websocket请求，一个是监听hub信道变化的，在Index 函数里面,通过信道将正在访问的文章信息传递给hub，然后我发现了灵异的情况，就是及时赋值给信道，也是没有用处的，必须等这个链接短开之后，被监听到，但是这个时候，链接已经断开了，文章已经不被访问了。\r\n\r\n解决方法是写三个函数，一个是监听hub信道变化的，一个是原来的Index，然后把阻塞监听websocket 链接的部分放在一个新的函数里面，然后将对hub信道变化的部分放在Index里面，这样，等Index函数执行完毕的时候，Hub就能捕捉到信道变化了。\r\n\r\nHere is the code\r\n<p class=\"p1\"><span class=\"s1\">func</span> <span class=\"s3\">Ind</span><span class=\"s4\">e</span><span class=\"s3\">x</span><span class=\"s2\">(w http.ResponseWriter, r </span><span class=\"s1\">*</span><span class=\"s2\">http.Request) {</span></p>\r\n.......\r\n<p class=\"p1\"><span class=\"s1\">  h.</span><span class=\"s2\">register</span> <span class=\"s3\">&lt;-</span><span class=\"s1\"> c<span class=\"Apple-converted-space\">                                                                                                                                                           </span></span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">f</span><span class=\"s4\">or</span><span class=\"s5\"> {</span></p>\r\n<p class=\"p2\"><span class=\"s7\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s7\"> <span class=\"Apple-converted-space\">  </span></span><span class=\"s5\">//守护着这个连接，从连接中读取信息，然后通过信道传递给broadcast ，进入传递的队列</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>_, msg, err </span><span class=\"s4\">:=</span><span class=\"s5\"> c.ws.</span><span class=\"s8\">ReadMessage</span><span class=\"s5\">()</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span></span><span class=\"s4\">if</span><span class=\"s5\"> err </span><span class=\"s4\">!=</span> <span class=\"s9\">nil</span><span class=\"s5\"> {</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">      </span></span><span class=\"s4\">break</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>h.broadcast </span><span class=\"s4\">&lt;-</span> <span class=\"s8\">string</span><span class=\"s5\">(msg)</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">}</span></p>\r\n<p class=\"p3\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s7\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">d</span><span class=\"s5\">efer</span> <span class=\"s5\">func</span><span class=\"s7\">() {</span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>Println(</span><span class=\"s9\">\"defering\"</span><span class=\"s5\">)</span></p>\r\n<p class=\"p1\"><span class=\"s4\"> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>h.un</span><span class=\"s2\">register</span> <span class=\"s4\">&lt;-</span><span class=\"s5\"> c</span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>c.ws.</span><span class=\"s8\">Close</span><span class=\"s5\">()</span></p>\r\n<p class=\"p1\"><span class=\"s5\">     </span> <span class=\"s5\">   </span><span class=\"s4\">close</span><span class=\"s5\">(c.send)</span></p>\r\n<p class=\"p1\"><span class=\"s6\">}</span><span class=\"s5\">()</span></p>\r\n<p class=\"p1\">}</p>\r\n<p class=\"p1\">新的方案就是把除第一行以外的代码，从for开始，到close下面的独立出来，放在一个新的函数里面，然后调用这个函数，h.register &lt;- c 保留在Index函数里，这样在调用新函数的时候，监听h.register的函数就能捕捉到register的变化了</p>\r\n<p class=\"p1\"></p>\r\n<p class=\"p1\">/****************************************************************************************/</p>\r\n<p class=\"p1\">经朋友指点，指出是缓冲的问题，register变量声明的时候，是通过make(chan *client)的方式，这样声明会默认自己带缓冲，所以可以通过make(chan *client，1)的方式，这样赋值之后，立即生效，检测register变化的函数立即就捕捉到了信道的变化，</p>','golang 信道的坑','','inherit','open','open','','288-revision-v1','','','2015-05-29 08:48:57','2015-05-29 08:48:57','',288,'http://unasm.sinaapp.com/?p=293',0,'revision','',0),(294,1,'2015-05-29 08:49:41','2015-05-29 08:49:41','今天遇到一个问题，功能很简单，就是给线上的文章加锁，每篇文章只能由一个人访问编辑，设想很简单，两个结构体，一个结构体 hub 保存全部的正在被访问的文章的列表，一个结构体 client 是文章的内容以及属性。当每个文章被访问的时候，将放入信道hub的一个信道之中，单独开一个goroutine , 监听goroutine的信号变化，一旦信道变化，就读取变化，然后放入数组中。\r\n\r\n很简单，对吧。但就是出了奇葩问题。\r\n\r\n我开始的时候，准备两个函数,一个Index，处理http/websocket请求，一个是监听hub信道变化的，在Index 函数里面,通过信道将正在访问的文章信息传递给hub，然后我发现了灵异的情况，就是及时赋值给信道，也是没有用处的，必须等这个链接短开之后，被监听到，但是这个时候，链接已经断开了，文章已经不被访问了。\r\n\r\n解决方法是写三个函数，一个是监听hub信道变化的，一个是原来的Index，然后把阻塞监听websocket 链接的部分放在一个新的函数里面，然后将对hub信道变化的部分放在Index里面，这样，等Index函数执行完毕的时候，Hub就能捕捉到信道变化了。\r\n\r\nHere is the code\r\n<p class=\"p1\"><span class=\"s1\">func</span> <span class=\"s3\">Ind</span><span class=\"s4\">e</span><span class=\"s3\">x</span><span class=\"s2\">(w http.ResponseWriter, r </span><span class=\"s1\">*</span><span class=\"s2\">http.Request) {</span></p>\r\n.......\r\n<p class=\"p1\"><span class=\"s1\">  h.</span><span class=\"s2\">register</span> <span class=\"s3\">&lt;-</span><span class=\"s1\"> c<span class=\"Apple-converted-space\">                                                                                                                                                           </span></span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">f</span><span class=\"s4\">or</span><span class=\"s5\"> {</span></p>\r\n<p class=\"p2\"><span class=\"s7\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s7\"> <span class=\"Apple-converted-space\">  </span></span><span class=\"s5\">//守护着这个连接，从连接中读取信息，然后通过信道传递给broadcast ，进入传递的队列</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>_, msg, err </span><span class=\"s4\">:=</span><span class=\"s5\"> c.ws.</span><span class=\"s8\">ReadMessage</span><span class=\"s5\">()</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span></span><span class=\"s4\">if</span><span class=\"s5\"> err </span><span class=\"s4\">!=</span> <span class=\"s9\">nil</span><span class=\"s5\"> {</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">      </span></span><span class=\"s4\">break</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>h.broadcast </span><span class=\"s4\">&lt;-</span> <span class=\"s8\">string</span><span class=\"s5\">(msg)</span></p>\r\n<p class=\"p1\"><span class=\"s4\"><span class=\"Apple-converted-space\">  </span> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">}</span></p>\r\n<p class=\"p3\"><span class=\"s5\"><span class=\"Apple-converted-space\">  </span></span><span class=\"s7\"><span class=\"Apple-converted-space\">    </span></span><span class=\"s6\">d</span><span class=\"s5\">efer</span> <span class=\"s5\">func</span><span class=\"s7\">() {</span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>Println(</span><span class=\"s9\">\"defering\"</span><span class=\"s5\">)</span></p>\r\n<p class=\"p1\"><span class=\"s4\"> </span><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>h.un</span><span class=\"s2\">register</span> <span class=\"s4\">&lt;-</span><span class=\"s5\"> c</span></p>\r\n<p class=\"p1\"><span class=\"s5\"><span class=\"Apple-converted-space\">    </span></span> <span class=\"s5\"> <span class=\"Apple-converted-space\">  </span>c.ws.</span><span class=\"s8\">Close</span><span class=\"s5\">()</span></p>\r\n<p class=\"p1\"><span class=\"s5\">     </span> <span class=\"s5\">   </span><span class=\"s4\">close</span><span class=\"s5\">(c.send)</span></p>\r\n<p class=\"p1\"><span class=\"s6\">}</span><span class=\"s5\">()</span></p>\r\n<p class=\"p1\">}</p>\r\n<p class=\"p1\">新的方案就是把除第一行以外的代码，从for开始，到close下面的独立出来，放在一个新的函数里面，然后调用这个函数，h.register &lt;- c 保留在Index函数里，这样在调用新函数的时候，监听h.register的函数就能捕捉到register的变化了</p>\r\n<p class=\"p1\">/****************************************************************************************/</p>\r\n<p class=\"p1\">经朋友指点，指出是缓冲的问题，register变量声明的时候，是通过make(chan *client)的方式，这样声明会默认自己带缓冲，所以可以通过make(chan *client，1)的方式，这样赋值之后，立即生效，检测register变化的函数立即就捕捉到了信道的变化，</p>','golang 信道的坑','','inherit','open','open','','288-revision-v1','','','2015-05-29 08:49:41','2015-05-29 08:49:41','',288,'http://unasm.sinaapp.com/?p=294',0,'revision','',0),(296,1,'2015-05-30 06:20:26','2015-05-30 06:20:26','golang有所谓的阻塞，也就是说，等待io变化，比如select 监听信道变化，等待websocket连接变化，而这个阻塞，同时也会带来代码上的阻塞，比如\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\"> </span></span>        for {</p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>select {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>case &lt;-ticker.C:</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>Println(\"time counting\")</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>//发送一个ping信号</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>if err := c.ws.WriteMessage(websocket.PingMessage, []byte{}); err != nil {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>return</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>case flag := &lt;-c.shutdown:</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>if flag == true {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>Println(\"shuting down\")</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>return</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s1\"> defer func() {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>Println(\"stoping\")</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>c.ws.Close()</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>h.unregister &lt;- c</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>close(c.shutdown)</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>}()</span></p>\r\n<p class=\"p1\"> 这个defer是没有用的，因为会监听信道变化，代码执行到for之后，就不再执行了，即使加上break，因为在for循环里面，直接return掉了，defer事件根本没有注册上，所以最好的办法就是把defer向上移动，放在for循环之前。同一个函数里面，绝对不能放两个阻塞的监听，要通过信道控制变化</p>','golang的阻塞','','publish','open','open','','golang%e7%9a%84%e9%98%bb%e5%a1%9e','','','2015-05-30 12:59:56','2015-05-30 12:59:56','',0,'http://unasm.sinaapp.com/?p=296',0,'post','',0),(297,1,'2015-05-30 06:20:26','2015-05-30 06:20:26','golang有所谓的阻塞，也就是说，等待io变化，比如select 监听信道变化，等待websocket连接变化，而这个阻塞，同时也会带来代码上的阻塞，比如\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\"> </span></span>        for {</p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>select {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>case &lt;-ticker.C:</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>Println(\"time counting\")</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>//发送一个ping信号</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>if err := c.ws.WriteMessage(websocket.PingMessage, []byte{}); err != nil {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>return</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>case flag := &lt;-c.shutdown:</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>if flag == true {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>Println(\"shuting down\")</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                                </span>return</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                        </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>}</span></p>\r\n<p class=\"p1\"><span class=\"s1\"> defer func() {</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>Println(\"stoping\")</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>c.ws.Close()</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>h.unregister &lt;- c</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">                </span>close(c.shutdown)</span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>}()</span></p>\r\n<p class=\"p1\"> 这个defer是没有用的，因为会监听信道变化，代码执行到for之后，就不再执行了，即使加上break，因为在for循环里面，直接return掉了，defer事件根本没有注册上，所以最好的办法就是把defer向上移动，放在for循环之前。同一个函数里面，绝对不能放两个阻塞的监听，要通过信道控制变化</p>','golang的阻塞','','inherit','open','open','','296-revision-v1','','','2015-05-30 06:20:26','2015-05-30 06:20:26','',296,'http://unasm.sinaapp.com/?p=297',0,'revision','',0),(298,1,'2015-05-30 13:43:51','2015-05-30 13:43:51','golang 的 runtime包可以用来检测内存的使用情况，主要内存使用情况，都在MemStats结构体里面\r\n<pre> type MemStats struct {\r\n    // 常用数据   \r\n    Alloc      <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 系统分配了，并且仍在使用的内存</span>\r\n    TotalAlloc <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 分配的内存总量</span>\r\n    Sys        <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 从系统得到的内存总量</span>\r\n    Lookups    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 回环指针数量</span>\r\n    Mallocs    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 分配次数</span>\r\n    Frees      <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 内存释放次数</span>\r\n\r\n    <span class=\"comment\">// 主要的堆数据</span>\r\n    HeapAlloc    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 分配了之后，并且仍在使用的堆内存</span>\r\n    HeapSys      <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 从系统申请的堆内存大小</span>\r\n    HeapIdle     <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 闲置状态的的span</span>\r\n    HeapInuse    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 非限制状体的span  HeapIdle + HeapInuse = HeapSys</span>\r\n    HeapReleased <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 从系统中释放的内存大小</span>\r\n    HeapObjects  <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 一共分配的对象数量</span>\r\n\r\n    <span class=\"comment\">//底层的固定分配数据</span>\r\n    <span class=\"comment\">//	按字节计算容量</span>\r\n    <span class=\"comment\">//	Sys is bytes obtained from system.</span>\r\n    StackInuse  <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 栈分配使用的内存</span>\r\n    StackSys    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>  //系统帐使用的内存量\r\n    MSpanInuse  <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// mspan结构 使用的量</span>\r\n    MSpanSys    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\r\n    MCacheInuse <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// mcache 结构使用的量</span>\r\n    MCacheSys   <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>  //系统mcache结构使用的量\r\n    BuckHashSys <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// profiling bucket hash table,系统hash表使用情况</span>\r\n    GCSys       <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// GC 的元数据</span>\r\n    OtherSys    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 其他的系统分配数据</span>\r\n\r\n    <span class=\"comment\">// Garbage collector statistics.</span>\r\n    NextGC       <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 当 HeapAlloc 大于该值的时候，会进行垃圾回收</span>\r\n    LastGC       <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 上一次垃圾回收的时间</span>\r\n    PauseTotalNs <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\r\n    PauseNs      [256]<a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// circular buffer of recent GC pause durations, most recent at [(NumGC+255)%256]</span></pre>\r\n<pre>    PauseEnd     [256]<a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// circular buffer of recent GC pause end times</span>\r\n    NumGC        <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint32\">uint32</a>\r\n    EnableGC     <a href=\"http://127.0.0.1:8080/pkg/builtin/#bool\">bool</a>\r\n    DebugGC      <a href=\"http://127.0.0.1:8080/pkg/builtin/#bool\">bool</a>\r\n\r\n    <span class=\"comment\">// Per-size allocation statistics.</span>\r\n    <span class=\"comment\">// 61 is NumSizeClasses in the C code.</span>\r\n    BySize [61]struct {\r\n        Size    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint32\">uint32</a>\r\n        Mallocs <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\r\n        Frees   <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\r\n    }\r\n}</pre>','golang之内存使用报告','','publish','open','open','','golang%e4%b9%8b%e5%86%85%e5%ad%98%e4%bd%bf%e7%94%a8%e6%8a%a5%e5%91%8a','','','2015-07-14 05:54:16','2015-07-14 05:54:16','',0,'http://unasm.sinaapp.com/?p=298',0,'post','',0),(299,1,'2015-05-30 13:43:51','2015-05-30 13:43:51','golang 的 runtime包可以用来检测内存的使用情况，主要内存使用情况，都在MemStats结构体里面\r\n<pre>\r\n type MemStats struct {\r\n    // 常用数据   \r\n    Alloc      <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 系统分配了，并且仍在使用的内存</span>\r\n    TotalAlloc <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 分配的内存总量</span>\r\n    Sys        <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 从系统得到的内存总量</span>\r\n    Lookups    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 回环指针数量</span>\r\n    Mallocs    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 分配次数</span>\r\n    Frees      <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 内存释放次数</span>\r\n\r\n    <span class=\"comment\">// 主要的堆数据</span>\r\n    HeapAlloc    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 分配，并且仍在使用的堆内存</span>\r\n    HeapSys      <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 从系统申请的堆内存大小</span>\r\n    HeapIdle     <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 闲置的内存大小</span>\r\n    HeapInuse    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 使用中的内存大小</span>\r\n    HeapReleased <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 从系统中释放的内存大小</span>\r\n    HeapObjects  <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 一共分配的对象数量</span>\r\n\r\n    <span class=\"comment\">//底层的固定分配数据</span>\r\n    <span class=\"comment\">//	按字节计算容量</span>\r\n    <span class=\"comment\">//	Sys is bytes obtained from system.</span>\r\n    StackInuse  <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 栈分配使用的内存</span>\r\n    StackSys    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>  //系统帐使用的内存量\r\n    MSpanInuse  <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// mspan结构 使用的量</span>\r\n    MSpanSys    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\r\n    MCacheInuse <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// mcache 结构使用的量</span>\r\n    MCacheSys   <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>  //系统mcache结构使用的量\r\n    BuckHashSys <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// profiling bucket hash table,系统hash表使用情况</span>\r\n    GCSys       <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// GC 的元数据</span>\r\n    OtherSys    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 其他的系统分配数据</span>\r\n\r\n    <span class=\"comment\">// Garbage collector statistics.</span>\r\n    NextGC       <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 当 HeapAlloc 大于该值的时候，会进行垃圾回收</span>\r\n    LastGC       <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 上一次垃圾回收的时间</span>\r\n    PauseTotalNs <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\r\n    PauseNs      [256]<a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// circular buffer of recent GC pause durations, most recent at [(NumGC+255)%256]</span></pre>\r\n<pre>\r\n    PauseEnd     [256]<a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// circular buffer of recent GC pause end times</span>\r\n    NumGC        <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint32\">uint32</a>\r\n    EnableGC     <a href=\"http://127.0.0.1:8080/pkg/builtin/#bool\">bool</a>\r\n    DebugGC      <a href=\"http://127.0.0.1:8080/pkg/builtin/#bool\">bool</a>\r\n\r\n    <span class=\"comment\">// Per-size allocation statistics.</span>\r\n    <span class=\"comment\">// 61 is NumSizeClasses in the C code.</span>\r\n    BySize [61]struct {\r\n        Size    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint32\">uint32</a>\r\n        Mallocs <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\r\n        Frees   <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\r\n    }\r\n}</pre>','golang之内存使用报告','','inherit','open','open','','298-revision-v1','','','2015-05-30 13:43:51','2015-05-30 13:43:51','',298,'http://unasm.sinaapp.com/?p=299',0,'revision','',0),(300,1,'2015-05-30 13:46:14','2015-05-30 13:46:14','golang 的 runtime包可以用来检测内存的使用情况，主要内存使用情况，都在MemStats结构体里面\r\n<pre> type MemStats struct {\r\n    // 常用数据   \r\n    Alloc      <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 系统分配了，并且仍在使用的内存</span>\r\n    TotalAlloc <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 分配的内存总量</span>\r\n    Sys        <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 从系统得到的内存总量</span>\r\n    Lookups    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 回环指针数量</span>\r\n    Mallocs    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 分配次数</span>\r\n    Frees      <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 内存释放次数</span>\r\n\r\n    <span class=\"comment\">// 主要的堆数据</span>\r\n    HeapAlloc    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 分配，并且仍在使用的堆内存</span>\r\n    HeapSys      <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 从系统申请的堆内存大小</span>\r\n    HeapIdle     <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 闲置的内存大小</span>\r\n    HeapInuse    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 使用中的内存大小</span>\r\n    HeapReleased <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 从系统中释放的内存大小</span>\r\n    HeapObjects  <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 一共分配的对象数量</span>\r\n\r\n    <span class=\"comment\">//底层的固定分配数据</span>\r\n    <span class=\"comment\">//	按字节计算容量</span>\r\n    <span class=\"comment\">//	Sys is bytes obtained from system.</span>\r\n    StackInuse  <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 栈分配使用的内存</span>\r\n    StackSys    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>  //系统帐使用的内存量\r\n    MSpanInuse  <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// mspan结构 使用的量</span>\r\n    MSpanSys    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\r\n    MCacheInuse <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// mcache 结构使用的量</span>\r\n    MCacheSys   <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>  //系统mcache结构使用的量\r\n    BuckHashSys <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// profiling bucket hash table,系统hash表使用情况</span>\r\n    GCSys       <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// GC 的元数据</span>\r\n    OtherSys    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 其他的系统分配数据</span>\r\n\r\n    <span class=\"comment\">// Garbage collector statistics.</span>\r\n    NextGC       <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 当 HeapAlloc 大于该值的时候，会进行垃圾回收</span>\r\n    LastGC       <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 上一次垃圾回收的时间</span>\r\n    PauseTotalNs <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\r\n    PauseNs      [256]<a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// circular buffer of recent GC pause durations, most recent at [(NumGC+255)%256]</span></pre>\r\n<pre>    PauseEnd     [256]<a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// circular buffer of recent GC pause end times</span>\r\n    NumGC        <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint32\">uint32</a>\r\n    EnableGC     <a href=\"http://127.0.0.1:8080/pkg/builtin/#bool\">bool</a>\r\n    DebugGC      <a href=\"http://127.0.0.1:8080/pkg/builtin/#bool\">bool</a>\r\n\r\n    <span class=\"comment\">// Per-size allocation statistics.</span>\r\n    <span class=\"comment\">// 61 is NumSizeClasses in the C code.</span>\r\n    BySize [61]struct {\r\n        Size    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint32\">uint32</a>\r\n        Mallocs <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\r\n        Frees   <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\r\n    }\r\n}</pre>','golang之内存使用报告','','inherit','open','open','','298-revision-v1','','','2015-05-30 13:46:14','2015-05-30 13:46:14','',298,'http://unasm.sinaapp.com/?p=300',0,'revision','',0),(301,1,'2015-05-31 05:53:32','2015-05-31 05:53:32','golang 的 runtime包可以用来检测内存的使用情况，主要内存使用情况，都在MemStats结构体里面\n<pre> type MemStats struct {\n    // 常用数据   \n    Alloc      <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 系统分配了，并且仍在使用的内存</span>\n    TotalAlloc <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 分配的内存总量</span>\n    Sys        <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 从系统得到的内存总量</span>\n    Lookups    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 回环指针数量</span>\n    Mallocs    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 分配次数</span>\n    Frees      <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 内存释放次数</span>\n\n    <span class=\"comment\">// 主要的堆数据</span>\n    HeapAlloc    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 分配了之后，并且仍在使用的堆内存</span>\n    HeapSys      <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 从系统申请的堆内存大小</span>\n    HeapIdle     <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 闲置状态的的span</span>\n    HeapInuse    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 非限制状体的span  HeapIdle + HeapInuse = HeapSys</span>\n    HeapReleased <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 从系统中释放的内存大小</span>\n    HeapObjects  <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 一共分配的对象数量</span>\n\n    <span class=\"comment\">//底层的固定分配数据</span>\n    <span class=\"comment\">//	按字节计算容量</span>\n    <span class=\"comment\">//	Sys is bytes obtained from system.</span>\n    StackInuse  <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 栈分配使用的内存</span>\n    StackSys    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>  //系统帐使用的内存量\n    MSpanInuse  <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// mspan结构 使用的量</span>\n    MSpanSys    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\n    MCacheInuse <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// mcache 结构使用的量</span>\n    MCacheSys   <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>  //系统mcache结构使用的量\n    BuckHashSys <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// profiling bucket hash table,系统hash表使用情况</span>\n    GCSys       <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// GC 的元数据</span>\n    OtherSys    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 其他的系统分配数据</span>\n\n    <span class=\"comment\">// Garbage collector statistics.</span>\n    NextGC       <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 当 HeapAlloc 大于该值的时候，会进行垃圾回收</span>\n    LastGC       <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 上一次垃圾回收的时间</span>\n    PauseTotalNs <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\n    PauseNs      [256]<a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// circular buffer of recent GC pause durations, most recent at [(NumGC+255)%256]</span></pre>\n<pre>    PauseEnd     [256]<a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// circular buffer of recent GC pause end times</span>\n    NumGC        <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint32\">uint32</a>\n    EnableGC     <a href=\"http://127.0.0.1:8080/pkg/builtin/#bool\">bool</a>\n    DebugGC      <a href=\"http://127.0.0.1:8080/pkg/builtin/#bool\">bool</a>\n\n    <span class=\"comment\">// Per-size allocation statistics.</span>\n    <span class=\"comment\">// 61 is NumSizeClasses in the C code.</span>\n    BySize [61]struct {\n        Size    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint32\">uint32</a>\n        Mallocs <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\n        Frees   <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\n    }\n}</pre>','golang之内存使用报告','','inherit','open','open','','298-autosave-v1','','','2015-05-31 05:53:32','2015-05-31 05:53:32','',298,'http://unasm.sinaapp.com/?p=301',0,'revision','',0),(302,1,'2015-05-31 05:53:45','2015-05-31 05:53:45','golang 的 runtime包可以用来检测内存的使用情况，主要内存使用情况，都在MemStats结构体里面\r\n<pre> type MemStats struct {\r\n    // 常用数据   \r\n    Alloc      <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 系统分配了，并且仍在使用的内存</span>\r\n    TotalAlloc <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 分配的内存总量</span>\r\n    Sys        <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 从系统得到的内存总量</span>\r\n    Lookups    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 回环指针数量</span>\r\n    Mallocs    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 分配次数</span>\r\n    Frees      <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 内存释放次数</span>\r\n\r\n    <span class=\"comment\">// 主要的堆数据</span>\r\n    HeapAlloc    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 分配了之后，并且仍在使用的堆内存</span>\r\n    HeapSys      <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 从系统申请的堆内存大小</span>\r\n    HeapIdle     <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 闲置状态的的span</span>\r\n    HeapInuse    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 非限制状体的span  HeapIdle + HeapInuse = HeapSys</span>\r\n    HeapReleased <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 从系统中释放的内存大小</span>\r\n    HeapObjects  <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 一共分配的对象数量</span>\r\n\r\n    <span class=\"comment\">//底层的固定分配数据</span>\r\n    <span class=\"comment\">//	按字节计算容量</span>\r\n    <span class=\"comment\">//	Sys is bytes obtained from system.</span>\r\n    StackInuse  <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 栈分配使用的内存</span>\r\n    StackSys    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>  //系统帐使用的内存量\r\n    MSpanInuse  <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// mspan结构 使用的量</span>\r\n    MSpanSys    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\r\n    MCacheInuse <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// mcache 结构使用的量</span>\r\n    MCacheSys   <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>  //系统mcache结构使用的量\r\n    BuckHashSys <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// profiling bucket hash table,系统hash表使用情况</span>\r\n    GCSys       <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// GC 的元数据</span>\r\n    OtherSys    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 其他的系统分配数据</span>\r\n\r\n    <span class=\"comment\">// Garbage collector statistics.</span>\r\n    NextGC       <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 当 HeapAlloc 大于该值的时候，会进行垃圾回收</span>\r\n    LastGC       <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// 上一次垃圾回收的时间</span>\r\n    PauseTotalNs <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\r\n    PauseNs      [256]<a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// circular buffer of recent GC pause durations, most recent at [(NumGC+255)%256]</span></pre>\r\n<pre>    PauseEnd     [256]<a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a> <span class=\"comment\">// circular buffer of recent GC pause end times</span>\r\n    NumGC        <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint32\">uint32</a>\r\n    EnableGC     <a href=\"http://127.0.0.1:8080/pkg/builtin/#bool\">bool</a>\r\n    DebugGC      <a href=\"http://127.0.0.1:8080/pkg/builtin/#bool\">bool</a>\r\n\r\n    <span class=\"comment\">// Per-size allocation statistics.</span>\r\n    <span class=\"comment\">// 61 is NumSizeClasses in the C code.</span>\r\n    BySize [61]struct {\r\n        Size    <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint32\">uint32</a>\r\n        Mallocs <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\r\n        Frees   <a href=\"http://127.0.0.1:8080/pkg/builtin/#uint64\">uint64</a>\r\n    }\r\n}</pre>','golang之内存使用报告','','inherit','open','open','','298-revision-v1','','','2015-05-31 05:53:45','2015-05-31 05:53:45','',298,'http://unasm.sinaapp.com/?p=302',0,'revision','',0),(303,1,'2015-06-01 04:05:25','2015-06-01 04:05:25','<h2>环境变量</h2>\r\nruntime 包含的是go实时运行系统的一些交互操作，比如控制goroutines,也包含了一些使用反射包获得的底层信息，具体见反射包关于实时系统的接口。\r\n\r\n下面的环境变量（$name或者是%name%，取决于运行的操作系统）控制go运行时候的实时行为，这个意义和使用方法，也许会在不同版本之间变化（目前1.4版）。\r\n\r\nGOGC变量设置垃圾回收的百分比，当新添加的数据加上上次垃圾回收之后留下的数据重新达到这个比例之后，会再次出发垃圾回收，默认的GOGC是100，设置gogc=off会彻底禁止垃圾回收，runtime/debug包的SetGCPercent函数会允许在运行时修改该参数。详见<a href=\"http://golang.org/pkg/runtime/debug/#SetGCPercent\">http://golang.org/pkg/runtime/debug/#SetGCPercent</a>.\r\n\r\nGODEBUG变量控制着运行时的debug输出，GODEBUG变量是一个逗号分隔的键值对，支持的键名有\r\n<ol>\r\n	<li>allocfreetrace ：设置 allocfreetrace = 1会让每次分配和释放都记录并且可以被栈追踪打印到</li>\r\n	<li>efence : 设置efence = 1会让分配器给每一个对象都分配一个单独的页，并且该页不会再被重复利用了</li>\r\n	<li>gctrace : 设置 gctrace = 1 会让垃圾回收器每次回收的时候都发送一个一行到error，描述回收的量和停顿的时间长度，设置gctrace = 2 ，不止会得到上述结果，但是还有重复的次数。</li>\r\n	<li>gcdead: 设置gcdead = 1 会毁了所有他认为死掉了执行堆栈。</li>\r\n	<li>invalidptr : 默认invalidptr = 1，如果指针被赋予一个无效值,会引起程序的崩溃，设置该值为0，会停止该检查，这个只能临时用于查找bug，真正的解决方法是不要把整数类型的值存在指针变量里面。</li>\r\n	<li>scheddetail : 设置 scheddetail= 1 &amp;&amp; schedtrace = X 会让调度器 发出来一个详细的Xms内多线调度信息，描述调度器的情况，如线程，进程，协程等等。</li>\r\n	<li>schedtrace: 同上</li>\r\n	<li>scavenge : scavenge=1 enables debugging mode of heap scavenger</li>\r\n</ol>\r\n变量GOMAXPROCS限制操作系统可以 同时运行的用户级别的go代码数量，但是对于出于阻塞状态的线程数量是没有限制的，这些是不受GOMAXPROCS 限制的，GOMAXPROCS 是可以修改该限制的（注：NumCPU() 函数可以获取当前系统的CPU数目，可以根据该结果确认GOMAXPROCS的值）。\r\n\r\nGOTRACEBACK可以控制go成语因为未恢复的panic和意外情况造成的崩溃的时候输出栈数量，默认会输出所有的尚存的goroutine，内置函数到实时系统，如果以退出码2退出，如果GOTRACEBACK 设置成0，那goroutine追踪栈会全部输出，GOTRACEBACK 设置成1，采用默认的行为，如果GOTRACEBACK设置成2，不仅输出全部的栈，还有实时交互系统的函数，如果GOTRACEBACK 设置成crash,不仅包括输出栈和实时系统本身的函数，还有尽可能的以操作系统规定的方式退出而不是立即退出，比如在unix系统上，程序会发送一个SIGABRT 去触发一个core dump。\r\n\r\nGOARCH, GOOS, GOPATH, 和 GOROOT 这些环境变量。题目影响go程序的构建。\r\n<h2><strong>常量</strong></h2>\r\n<pre>const <span id=\"Compiler\">Compiler</span> = \"gc\" \r\n编译器是构建运行的二进制代码的工具集的名字，一直的工具集名字有</pre>\r\n<pre>gc      The 5g/6g/8g compiler suite at code.google.com/p/go.\r\ngccgo   The gccgo front end, part of the GCC compiler suite.</pre>\r\n<pre>const <span id=\"GOARCH\">GOARCH</span> <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a> = theGoarch\r\nGOARCH  是运行程序的CPU架构：386，amd64，或者是arm</pre>\r\n<pre>const <span id=\"GOOS\">GOOS</span> <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a> = theGoos\r\nGOOS 是运行程序的操作系统，darwin,freebsd,linux等等\r\n\r\n</pre>\r\n<h2>变量</h2>\r\nvar MemProfileRate int = 512 * 1024\r\n\r\nMemProfileRate 会在内存profile 里面 保存内存分配的频率和报告频率，profile的目标是对内存分配的平均情况进行采样分析。 为了在内存profile分析报告里面记录每一次内存分配的情况，请将MemProfileRate 设置成1，如果彻底关闭内存分析，请将MemProfileRate 设置成0， 该工具会会在整个程序的生命周期里面不停地以设置的频率对内存进行采样分析，修改内存采样频率的操作只应该做一次，并且最好尽可能的早做。\r\n\r\n&nbsp;\r\n<h2>func BlockProfile</h2>\r\nfunc BlockProfile(p []BlockProfileRecord) (n int, ok bool)\r\n\r\n该函数返回n,几率的是当前阻塞的报告。如果len(p) &gt;= n ,该函数会拷贝分析报告进入p，并且返回n，如果len(p) &lt; n, BlockProfile 不做任何修改，只是返回n，false。\r\n\r\nMost clients should use the runtime/pprof package or the testing package\'s -test.blockprofile flag instead of calling BlockProfile directly.\r\n\r\n&nbsp;\r\n<h2>func CPUProfile</h2>\r\nfunc CPUProfile() []byte\r\n\r\nCPUProfile returns the next chunk of binary CPU profiling stack trace data, blocking until data is available. If profiling is turned off and all the profile data accumulated while it was on has been returned, CPUProfile returns nil. The caller must save the returned data before calling CPUProfile again.\r\n\r\nMost clients should use the runtime/pprof package or the testing package\'s -test.cpuprofile flag instead of calling CPUProfile directly.\r\n\r\n&nbsp;\r\n\r\n<h2>func GoroutineProfile</h2>\r\n\r\nfunc GoroutineProfile(p [] StackRecord) (n int, ok bool)\r\nGoroutineProfile 返回n，活动gogoutine 站报告的记录数，如果 len(p) >= n，GoroutineProfile 会拷贝报告进入p，然后返回n，如果 len(p) < n , GoroutineProfile并不会改变p，并且返回n，false。\r\n应该使用runtime/pprof包，而不是直接使用GoroutineProfile \r\n\r\n<h2>func NumCPU()</h2>\r\n返回本机逻辑CPUS的数量\r\n<h2>func NumGoroutine</h2>\r\nfunc NumGoroutine int\r\n返回存在的goroutineus 的数量\r\nfunc ReadMemStats(m *MemStats)\r\n\r\n读取内存分配的数据\r\n&nbsp;','golang runtime 包官方文档 翻译','','publish','open','open','','golang-runtime-%e5%8c%85%e5%ae%98%e6%96%b9%e6%96%87%e6%a1%a3-%e7%bf%bb%e8%af%91','','','2015-07-14 09:04:38','2015-07-14 09:04:38','',0,'http://unasm.sinaapp.com/?p=303',0,'post','',0),(304,1,'2015-06-01 04:05:25','2015-06-01 04:05:25','runtime 包含的是go实时运行系统的一些交互操作，比如控制goroutines,也包含了一些使用反射包获得的底层信息，具体见反射包关于实时系统的接口。\r\n\r\n下面的环境变量（$name或者是%name%，取决于运行的操作系统）控制go运行时候的实时行为，这个意义和使用方法，也许会在不同版本之间变化（目前1.4版）。\r\n\r\nGOGC变量设置垃圾回收的百分比，当新添加的数据加上上次垃圾回收之后留下的数据重新达到这个比例之后，会再次出发垃圾回收，默认的GOGC是100，设置gogc=off会彻底禁止垃圾回收，runtime/debug包的SetGCPercent函数会允许在运行时修改该参数。详见<a href=\"http://golang.org/pkg/runtime/debug/#SetGCPercent\">http://golang.org/pkg/runtime/debug/#SetGCPercent</a>.\r\n\r\nGODEBUG变量控制着运行时的debug输出，GODEBUG变量是一个逗号分隔的键值对，支持的键名有\r\n<ol>\r\n	<li>allocfreetrace ：设置 allocfreetrace = 1会让每次分配和释放都记录并且可以被栈追踪打印到</li>\r\n	<li>efence : 设置efence = 1会让分配器给每一个对象都分配一个单独的页，并且该页不会再被重复利用了</li>\r\n	<li>gctrace : 设置 gctrace = 1 会让垃圾回收器每次回收的时候都发送一个一行到error，描述回收的量和停顿的时间长度，设置gctrace = 2 ，不止会得到上述结果，但是还有重复的次数。</li>\r\n	<li>gcdead: 设置gcdead = 1 会毁了所有他认为死掉了执行堆栈。</li>\r\n	<li>invalidptr : 默认invalidptr = 1，如果指针被赋予一个无效值,会引起程序的崩溃，设置该值为0，会停止该检查，这个只能临时用于查找bug，真正的解决方法是不要把整数类型的值存在指针变量里面。</li>\r\n	<li>scheddetail : 设置 scheddetail= 1 &amp;&amp; schedtrace = X 会让调度器 发出来一个详细的Xms内多线调度信息，描述调度器的情况，如线程，进程，协程等等。</li>\r\n	<li>schedtrace: 同上</li>\r\n	<li>scavenge : scavenge=1 enables debugging mode of heap scavenger</li>\r\n</ol>\r\n变量GOMAXPROCS限制操作系统可以 同时运行的用户级别的go代码数量，但是对于出于阻塞状态的线程数量是没有限制的，这些是不受GOMAXPROCS 限制的，GOMAXPROCS 是可以修改该限制的（注：NumCPU() 函数可以获取当前系统的CPU数目，可以根据该结果确认GOMAXPROCS的值）。\r\n\r\nGOTRACEBACK可以控制go成语因为未恢复的panic和意外情况造成的崩溃的时候输出栈数量，默认会输出所有的尚存的goroutine，内置函数到实时系统，如果以退出码2退出，如果GOTRACEBACK 设置成0，那goroutine追踪栈会全部输出，GOTRACEBACK 设置成1，采用默认的行为，如果GOTRACEBACK设置成2，不仅输出全部的栈，还有实时交互系统的函数，如果GOTRACEBACK 设置成crash,不仅包括输出栈和实时系统本身的函数，还有尽可能的以操作系统规定的方式退出而不是立即退出，比如在unix系统上，程序会发送一个SIGABRT 去触发一个core dump。\r\n\r\nGOARCH, GOOS, GOPATH, 和 GOROOT 这些环境变量。题目影响go程序的构建。','golang runtime 包官方文档 翻译','','inherit','open','open','','303-revision-v1','','','2015-06-01 04:05:25','2015-06-01 04:05:25','',303,'http://unasm.sinaapp.com/?p=304',0,'revision','',0),(305,1,'2015-06-01 08:26:59','2015-06-01 08:26:59','<h2>环境变量</h2>\nruntime 包含的是go实时运行系统的一些交互操作，比如控制goroutines,也包含了一些使用反射包获得的底层信息，具体见反射包关于实时系统的接口。\n\n下面的环境变量（$name或者是%name%，取决于运行的操作系统）控制go运行时候的实时行为，这个意义和使用方法，也许会在不同版本之间变化（目前1.4版）。\n\nGOGC变量设置垃圾回收的百分比，当新添加的数据加上上次垃圾回收之后留下的数据重新达到这个比例之后，会再次出发垃圾回收，默认的GOGC是100，设置gogc=off会彻底禁止垃圾回收，runtime/debug包的SetGCPercent函数会允许在运行时修改该参数。详见<a href=\"http://golang.org/pkg/runtime/debug/#SetGCPercent\">http://golang.org/pkg/runtime/debug/#SetGCPercent</a>.\n\nGODEBUG变量控制着运行时的debug输出，GODEBUG变量是一个逗号分隔的键值对，支持的键名有\n<ol>\n	<li>allocfreetrace ：设置 allocfreetrace = 1会让每次分配和释放都记录并且可以被栈追踪打印到</li>\n	<li>efence : 设置efence = 1会让分配器给每一个对象都分配一个单独的页，并且该页不会再被重复利用了</li>\n	<li>gctrace : 设置 gctrace = 1 会让垃圾回收器每次回收的时候都发送一个一行到error，描述回收的量和停顿的时间长度，设置gctrace = 2 ，不止会得到上述结果，但是还有重复的次数。</li>\n	<li>gcdead: 设置gcdead = 1 会毁了所有他认为死掉了执行堆栈。</li>\n	<li>invalidptr : 默认invalidptr = 1，如果指针被赋予一个无效值,会引起程序的崩溃，设置该值为0，会停止该检查，这个只能临时用于查找bug，真正的解决方法是不要把整数类型的值存在指针变量里面。</li>\n	<li>scheddetail : 设置 scheddetail= 1 &amp;&amp; schedtrace = X 会让调度器 发出来一个详细的Xms内多线调度信息，描述调度器的情况，如线程，进程，协程等等。</li>\n	<li>schedtrace: 同上</li>\n	<li>scavenge : scavenge=1 enables debugging mode of heap scavenger</li>\n</ol>\n变量GOMAXPROCS限制操作系统可以 同时运行的用户级别的go代码数量，但是对于出于阻塞状态的线程数量是没有限制的，这些是不受GOMAXPROCS 限制的，GOMAXPROCS 是可以修改该限制的（注：NumCPU() 函数可以获取当前系统的CPU数目，可以根据该结果确认GOMAXPROCS的值）。\n\nGOTRACEBACK可以控制go成语因为未恢复的panic和意外情况造成的崩溃的时候输出栈数量，默认会输出所有的尚存的goroutine，内置函数到实时系统，如果以退出码2退出，如果GOTRACEBACK 设置成0，那goroutine追踪栈会全部输出，GOTRACEBACK 设置成1，采用默认的行为，如果GOTRACEBACK设置成2，不仅输出全部的栈，还有实时交互系统的函数，如果GOTRACEBACK 设置成crash,不仅包括输出栈和实时系统本身的函数，还有尽可能的以操作系统规定的方式退出而不是立即退出，比如在unix系统上，程序会发送一个SIGABRT 去触发一个core dump。\n\nGOARCH, GOOS, GOPATH, 和 GOROOT 这些环境变量。题目影响go程序的构建。\n<h2><strong>常量</strong></h2>\n<pre>const <span id=\"Compiler\">Compiler</span> = \"gc\" \n编译器是构建运行的二进制代码的工具集的名字，一直的工具集名字有</pre>\n<pre>gc      The 5g/6g/8g compiler suite at code.google.com/p/go.\ngccgo   The gccgo front end, part of the GCC compiler suite.</pre>\n<pre>const <span id=\"GOARCH\">GOARCH</span> <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a> = theGoarch\nGOARCH  是运行程序的CPU架构：386，amd64，或者是arm</pre>\n<pre>const <span id=\"GOOS\">GOOS</span> <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a> = theGoos\nGOOS 是运行程序的操作系统，darwin,freebsd,linux等等\n\n</pre>\n<h2>变量</h2>\nvar MemProfileRate int = 512 * 1024\n\nMemProfileRate 会在内存profile 里面 保存内存分配的频率和报告频率，profile的目标是对内存分配的平均情况进行采样分析。 为了在内存profile分析报告里面记录每一次内存分配的情况，请将MemProfileRate 设置成1，如果彻底关闭内存分析，请将MemProfileRate 设置成0， 该工具会会在整个程序的生命周期里面不停地以设置的频率对内存进行采样分析，修改内存采样频率的操作只应该做一次，并且最好尽可能的早做。\n\n&nbsp;\n<h2>func BlockProfile</h2>\nfunc BlockProfile(p []BlockProfileRecord) (n int, ok bool)\n\n该函数返回n,几率的是当前阻塞的报告。如果len(p) &gt;= n ,该函数会拷贝分析报告进入p，并且返回n，如果len(p) &lt; n, BlockProfile 不做任何修改，只是返回n，false。\n\nMost clients should use the runtime/pprof package or the testing package\'s -test.blockprofile flag instead of calling BlockProfile directly.\n\n&nbsp;\n<h2>func CPUProfile</h2>\nfunc CPUProfile() []byte\n\nCPUProfile returns the next chunk of binary CPU profiling stack trace data, blocking until data is available. If profiling is turned off and all the profile data accumulated while it was on has been returned, CPUProfile returns nil. The caller must save the returned data before calling CPUProfile again.\n\nMost clients should use the runtime/pprof package or the testing package\'s -test.cpuprofile flag instead of calling CPUProfile directly.\n\n&nbsp;\n\n<h2>func GoroutineProfile<h2>\n\nfunc GoroutineProfile(p [] StackRecord) (n int, ok bool)\nGoroutineProfile 返回n，活动gogoutine 站报告的记录数，如果 len(p) >= n，GoroutineProfile 会拷贝报告进入p，然后返回n，如果 len(p) < n , GoroutineProfile并不会改变p，并且返回n，false。\n应该使用runtime/pprof包，而不是直接使用GoroutineProfile \n\n<h2>func NumCPU()</h2>\n返回本机逻辑CPUS的数量\n<h2>func NumGoroutine</h2>\nfunc NumGoroutine int\n返回存在的goroutineus 的数量\nfunc ReadMemStats(m *MemStats)\n\n读取内存分配的数据\n&nbsp;','golang runtime 包官方文档 翻译','','inherit','open','open','','303-autosave-v1','','','2015-06-01 08:26:59','2015-06-01 08:26:59','',303,'http://unasm.sinaapp.com/?p=305',0,'revision','',0),(306,1,'2015-06-01 07:16:40','2015-06-01 07:16:40','<h2>环境变量</h2>\r\nruntime 包含的是go实时运行系统的一些交互操作，比如控制goroutines,也包含了一些使用反射包获得的底层信息，具体见反射包关于实时系统的接口。\r\n\r\n下面的环境变量（$name或者是%name%，取决于运行的操作系统）控制go运行时候的实时行为，这个意义和使用方法，也许会在不同版本之间变化（目前1.4版）。\r\n\r\nGOGC变量设置垃圾回收的百分比，当新添加的数据加上上次垃圾回收之后留下的数据重新达到这个比例之后，会再次出发垃圾回收，默认的GOGC是100，设置gogc=off会彻底禁止垃圾回收，runtime/debug包的SetGCPercent函数会允许在运行时修改该参数。详见<a href=\"http://golang.org/pkg/runtime/debug/#SetGCPercent\">http://golang.org/pkg/runtime/debug/#SetGCPercent</a>.\r\n\r\nGODEBUG变量控制着运行时的debug输出，GODEBUG变量是一个逗号分隔的键值对，支持的键名有\r\n<ol>\r\n	<li>allocfreetrace ：设置 allocfreetrace = 1会让每次分配和释放都记录并且可以被栈追踪打印到</li>\r\n	<li>efence : 设置efence = 1会让分配器给每一个对象都分配一个单独的页，并且该页不会再被重复利用了</li>\r\n	<li>gctrace : 设置 gctrace = 1 会让垃圾回收器每次回收的时候都发送一个一行到error，描述回收的量和停顿的时间长度，设置gctrace = 2 ，不止会得到上述结果，但是还有重复的次数。</li>\r\n	<li>gcdead: 设置gcdead = 1 会毁了所有他认为死掉了执行堆栈。</li>\r\n	<li>invalidptr : 默认invalidptr = 1，如果指针被赋予一个无效值,会引起程序的崩溃，设置该值为0，会停止该检查，这个只能临时用于查找bug，真正的解决方法是不要把整数类型的值存在指针变量里面。</li>\r\n	<li>scheddetail : 设置 scheddetail= 1 &amp;&amp; schedtrace = X 会让调度器 发出来一个详细的Xms内多线调度信息，描述调度器的情况，如线程，进程，协程等等。</li>\r\n	<li>schedtrace: 同上</li>\r\n	<li>scavenge : scavenge=1 enables debugging mode of heap scavenger</li>\r\n</ol>\r\n变量GOMAXPROCS限制操作系统可以 同时运行的用户级别的go代码数量，但是对于出于阻塞状态的线程数量是没有限制的，这些是不受GOMAXPROCS 限制的，GOMAXPROCS 是可以修改该限制的（注：NumCPU() 函数可以获取当前系统的CPU数目，可以根据该结果确认GOMAXPROCS的值）。\r\n\r\nGOTRACEBACK可以控制go成语因为未恢复的panic和意外情况造成的崩溃的时候输出栈数量，默认会输出所有的尚存的goroutine，内置函数到实时系统，如果以退出码2退出，如果GOTRACEBACK 设置成0，那goroutine追踪栈会全部输出，GOTRACEBACK 设置成1，采用默认的行为，如果GOTRACEBACK设置成2，不仅输出全部的栈，还有实时交互系统的函数，如果GOTRACEBACK 设置成crash,不仅包括输出栈和实时系统本身的函数，还有尽可能的以操作系统规定的方式退出而不是立即退出，比如在unix系统上，程序会发送一个SIGABRT 去触发一个core dump。\r\n\r\nGOARCH, GOOS, GOPATH, 和 GOROOT 这些环境变量。题目影响go程序的构建。\r\n<h2><strong>常量</strong></h2>\r\n<pre>const <span id=\"Compiler\">Compiler</span> = \"gc\" \r\n编译器是构建运行的二进制代码的工具集的名字，一直的工具集名字有</pre>\r\n<pre>gc      The 5g/6g/8g compiler suite at code.google.com/p/go.\r\ngccgo   The gccgo front end, part of the GCC compiler suite.</pre>\r\n<pre>const <span id=\"GOARCH\">GOARCH</span> <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a> = theGoarch\r\nGOARCH  是运行程序的CPU架构：386，amd64，或者是arm</pre>\r\n<pre>const <span id=\"GOOS\">GOOS</span> <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a> = theGoos\r\nGOOS 是运行程序的操作系统，darwin,freebsd,linux等等\r\n\r\n</pre>\r\n<h2>变量</h2>\r\nvar MemProfileRate int = 512 * 1024\r\n\r\nMemProfileRate 会在内存profile 里面 保存内存分配的频率和报告频率，profile的目标是对内存分配的平均情况进行采样分析。 为了在内存profile分析报告里面记录每一次内存分配的情况，请将MemProfileRate 设置成1，如果彻底关闭内存分析，请将MemProfileRate 设置成0， 该工具会会在整个程序的生命周期里面不停地以设置的频率对内存进行采样分析，修改内存采样频率的操作只应该做一次，并且最好尽可能的早做。\r\n\r\n&nbsp;','golang runtime 包官方文档 翻译','','inherit','open','open','','303-revision-v1','','','2015-06-01 07:16:40','2015-06-01 07:16:40','',303,'http://unasm.sinaapp.com/?p=306',0,'revision','',0),(308,1,'2015-06-01 07:57:45','2015-06-01 07:57:45','<h2>环境变量</h2>\r\nruntime 包含的是go实时运行系统的一些交互操作，比如控制goroutines,也包含了一些使用反射包获得的底层信息，具体见反射包关于实时系统的接口。\r\n\r\n下面的环境变量（$name或者是%name%，取决于运行的操作系统）控制go运行时候的实时行为，这个意义和使用方法，也许会在不同版本之间变化（目前1.4版）。\r\n\r\nGOGC变量设置垃圾回收的百分比，当新添加的数据加上上次垃圾回收之后留下的数据重新达到这个比例之后，会再次出发垃圾回收，默认的GOGC是100，设置gogc=off会彻底禁止垃圾回收，runtime/debug包的SetGCPercent函数会允许在运行时修改该参数。详见<a href=\"http://golang.org/pkg/runtime/debug/#SetGCPercent\">http://golang.org/pkg/runtime/debug/#SetGCPercent</a>.\r\n\r\nGODEBUG变量控制着运行时的debug输出，GODEBUG变量是一个逗号分隔的键值对，支持的键名有\r\n<ol>\r\n	<li>allocfreetrace ：设置 allocfreetrace = 1会让每次分配和释放都记录并且可以被栈追踪打印到</li>\r\n	<li>efence : 设置efence = 1会让分配器给每一个对象都分配一个单独的页，并且该页不会再被重复利用了</li>\r\n	<li>gctrace : 设置 gctrace = 1 会让垃圾回收器每次回收的时候都发送一个一行到error，描述回收的量和停顿的时间长度，设置gctrace = 2 ，不止会得到上述结果，但是还有重复的次数。</li>\r\n	<li>gcdead: 设置gcdead = 1 会毁了所有他认为死掉了执行堆栈。</li>\r\n	<li>invalidptr : 默认invalidptr = 1，如果指针被赋予一个无效值,会引起程序的崩溃，设置该值为0，会停止该检查，这个只能临时用于查找bug，真正的解决方法是不要把整数类型的值存在指针变量里面。</li>\r\n	<li>scheddetail : 设置 scheddetail= 1 &amp;&amp; schedtrace = X 会让调度器 发出来一个详细的Xms内多线调度信息，描述调度器的情况，如线程，进程，协程等等。</li>\r\n	<li>schedtrace: 同上</li>\r\n	<li>scavenge : scavenge=1 enables debugging mode of heap scavenger</li>\r\n</ol>\r\n变量GOMAXPROCS限制操作系统可以 同时运行的用户级别的go代码数量，但是对于出于阻塞状态的线程数量是没有限制的，这些是不受GOMAXPROCS 限制的，GOMAXPROCS 是可以修改该限制的（注：NumCPU() 函数可以获取当前系统的CPU数目，可以根据该结果确认GOMAXPROCS的值）。\r\n\r\nGOTRACEBACK可以控制go成语因为未恢复的panic和意外情况造成的崩溃的时候输出栈数量，默认会输出所有的尚存的goroutine，内置函数到实时系统，如果以退出码2退出，如果GOTRACEBACK 设置成0，那goroutine追踪栈会全部输出，GOTRACEBACK 设置成1，采用默认的行为，如果GOTRACEBACK设置成2，不仅输出全部的栈，还有实时交互系统的函数，如果GOTRACEBACK 设置成crash,不仅包括输出栈和实时系统本身的函数，还有尽可能的以操作系统规定的方式退出而不是立即退出，比如在unix系统上，程序会发送一个SIGABRT 去触发一个core dump。\r\n\r\nGOARCH, GOOS, GOPATH, 和 GOROOT 这些环境变量。题目影响go程序的构建。\r\n<h2><strong>常量</strong></h2>\r\n<pre>const <span id=\"Compiler\">Compiler</span> = \"gc\" \r\n编译器是构建运行的二进制代码的工具集的名字，一直的工具集名字有</pre>\r\n<pre>gc      The 5g/6g/8g compiler suite at code.google.com/p/go.\r\ngccgo   The gccgo front end, part of the GCC compiler suite.</pre>\r\n<pre>const <span id=\"GOARCH\">GOARCH</span> <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a> = theGoarch\r\nGOARCH  是运行程序的CPU架构：386，amd64，或者是arm</pre>\r\n<pre>const <span id=\"GOOS\">GOOS</span> <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a> = theGoos\r\nGOOS 是运行程序的操作系统，darwin,freebsd,linux等等\r\n\r\n</pre>\r\n<h2>变量</h2>\r\nvar MemProfileRate int = 512 * 1024\r\n\r\nMemProfileRate 会在内存profile 里面 保存内存分配的频率和报告频率，profile的目标是对内存分配的平均情况进行采样分析。 为了在内存profile分析报告里面记录每一次内存分配的情况，请将MemProfileRate 设置成1，如果彻底关闭内存分析，请将MemProfileRate 设置成0， 该工具会会在整个程序的生命周期里面不停地以设置的频率对内存进行采样分析，修改内存采样频率的操作只应该做一次，并且最好尽可能的早做。\r\n\r\n&nbsp;\r\n<h2>func BlockProfile</h2>\r\nfunc BlockProfile(p []BlockProfileRecord) (n int, ok bool)\r\n\r\n该函数返回n,几率的是当前阻塞的报告。如果len(p) &gt;= n ,该函数会拷贝分析报告进入p，并且返回n，如果len(p) &lt; n, BlockProfile 不做任何修改，只是返回n，false。\r\n\r\nMost clients should use the runtime/pprof package or the testing package\'s -test.blockprofile flag instead of calling BlockProfile directly.\r\n\r\n&nbsp;\r\n<h2>func CPUProfile</h2>\r\nfunc CPUProfile() []byte\r\n\r\nCPUProfile returns the next chunk of binary CPU profiling stack trace data, blocking until data is available. If profiling is turned off and all the profile data accumulated while it was on has been returned, CPUProfile returns nil. The caller must save the returned data before calling CPUProfile again.\r\n\r\nMost clients should use the runtime/pprof package or the testing package\'s -test.cpuprofile flag instead of calling CPUProfile directly.','golang runtime 包官方文档 翻译','','inherit','open','open','','303-revision-v1','','','2015-06-01 07:57:45','2015-06-01 07:57:45','',303,'http://unasm.sinaapp.com/?p=308',0,'revision','',0),(307,1,'2015-06-01 07:46:34','2015-06-01 07:46:34','<h2>环境变量</h2>\r\nruntime 包含的是go实时运行系统的一些交互操作，比如控制goroutines,也包含了一些使用反射包获得的底层信息，具体见反射包关于实时系统的接口。\r\n\r\n下面的环境变量（$name或者是%name%，取决于运行的操作系统）控制go运行时候的实时行为，这个意义和使用方法，也许会在不同版本之间变化（目前1.4版）。\r\n\r\nGOGC变量设置垃圾回收的百分比，当新添加的数据加上上次垃圾回收之后留下的数据重新达到这个比例之后，会再次出发垃圾回收，默认的GOGC是100，设置gogc=off会彻底禁止垃圾回收，runtime/debug包的SetGCPercent函数会允许在运行时修改该参数。详见<a href=\"http://golang.org/pkg/runtime/debug/#SetGCPercent\">http://golang.org/pkg/runtime/debug/#SetGCPercent</a>.\r\n\r\nGODEBUG变量控制着运行时的debug输出，GODEBUG变量是一个逗号分隔的键值对，支持的键名有\r\n<ol>\r\n	<li>allocfreetrace ：设置 allocfreetrace = 1会让每次分配和释放都记录并且可以被栈追踪打印到</li>\r\n	<li>efence : 设置efence = 1会让分配器给每一个对象都分配一个单独的页，并且该页不会再被重复利用了</li>\r\n	<li>gctrace : 设置 gctrace = 1 会让垃圾回收器每次回收的时候都发送一个一行到error，描述回收的量和停顿的时间长度，设置gctrace = 2 ，不止会得到上述结果，但是还有重复的次数。</li>\r\n	<li>gcdead: 设置gcdead = 1 会毁了所有他认为死掉了执行堆栈。</li>\r\n	<li>invalidptr : 默认invalidptr = 1，如果指针被赋予一个无效值,会引起程序的崩溃，设置该值为0，会停止该检查，这个只能临时用于查找bug，真正的解决方法是不要把整数类型的值存在指针变量里面。</li>\r\n	<li>scheddetail : 设置 scheddetail= 1 &amp;&amp; schedtrace = X 会让调度器 发出来一个详细的Xms内多线调度信息，描述调度器的情况，如线程，进程，协程等等。</li>\r\n	<li>schedtrace: 同上</li>\r\n	<li>scavenge : scavenge=1 enables debugging mode of heap scavenger</li>\r\n</ol>\r\n变量GOMAXPROCS限制操作系统可以 同时运行的用户级别的go代码数量，但是对于出于阻塞状态的线程数量是没有限制的，这些是不受GOMAXPROCS 限制的，GOMAXPROCS 是可以修改该限制的（注：NumCPU() 函数可以获取当前系统的CPU数目，可以根据该结果确认GOMAXPROCS的值）。\r\n\r\nGOTRACEBACK可以控制go成语因为未恢复的panic和意外情况造成的崩溃的时候输出栈数量，默认会输出所有的尚存的goroutine，内置函数到实时系统，如果以退出码2退出，如果GOTRACEBACK 设置成0，那goroutine追踪栈会全部输出，GOTRACEBACK 设置成1，采用默认的行为，如果GOTRACEBACK设置成2，不仅输出全部的栈，还有实时交互系统的函数，如果GOTRACEBACK 设置成crash,不仅包括输出栈和实时系统本身的函数，还有尽可能的以操作系统规定的方式退出而不是立即退出，比如在unix系统上，程序会发送一个SIGABRT 去触发一个core dump。\r\n\r\nGOARCH, GOOS, GOPATH, 和 GOROOT 这些环境变量。题目影响go程序的构建。\r\n<h2><strong>常量</strong></h2>\r\n<pre>const <span id=\"Compiler\">Compiler</span> = \"gc\" \r\n编译器是构建运行的二进制代码的工具集的名字，一直的工具集名字有</pre>\r\n<pre>gc      The 5g/6g/8g compiler suite at code.google.com/p/go.\r\ngccgo   The gccgo front end, part of the GCC compiler suite.</pre>\r\n<pre>const <span id=\"GOARCH\">GOARCH</span> <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a> = theGoarch\r\nGOARCH  是运行程序的CPU架构：386，amd64，或者是arm</pre>\r\n<pre>const <span id=\"GOOS\">GOOS</span> <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a> = theGoos\r\nGOOS 是运行程序的操作系统，darwin,freebsd,linux等等\r\n\r\n</pre>\r\n<h2>变量</h2>\r\nvar MemProfileRate int = 512 * 1024\r\n\r\nMemProfileRate 会在内存profile 里面 保存内存分配的频率和报告频率，profile的目标是对内存分配的平均情况进行采样分析。 为了在内存profile分析报告里面记录每一次内存分配的情况，请将MemProfileRate 设置成1，如果彻底关闭内存分析，请将MemProfileRate 设置成0， 该工具会会在整个程序的生命周期里面不停地以设置的频率对内存进行采样分析，修改内存采样频率的操作只应该做一次，并且最好尽可能的早做。\r\n\r\n&nbsp;\r\n<h2>func BlockProfile</h2>\r\nfunc BlockProfile(p []BlockProfileRecord) (n int, ok bool)\r\n\r\n该函数返回n,几率的是当前阻塞的报告。如果len(p) &gt;= n ,该函数会拷贝分析报告进入p，并且返回n，如果len(p) &lt; n, BlockProfile 不做任何修改，只是返回n，false。\r\n\r\nMost clients should use the runtime/pprof package or the testing package\'s -test.blockprofile flag instead of calling BlockProfile directly.\r\n\r\n&nbsp;\r\n<h2>func CPUProfile</h2>\r\nfunc CPUProfile() []byte\r\n\r\nCPUProfile 返回 下一个 CPU追踪栈数据的二进制数块，阻塞直到数据可用。如果记录报告被关闭了，所有的数据都会积累起来直到（不明白）\r\n\r\nCPUProfile returns the next chunk of binary CPU profiling stack trace data, blocking until data is available. If profiling is turned off and all the profile data accumulated while it was on has been returned, CPUProfile returns nil. The caller must save the returned data before calling CPUProfile again.\r\n\r\nMost clients should use the runtime/pprof package or the testing package\'s -test.cpuprofile flag instead of calling CPUProfile directly.','golang runtime 包官方文档 翻译','','inherit','open','open','','303-revision-v1','','','2015-06-01 07:46:34','2015-06-01 07:46:34','',303,'http://unasm.sinaapp.com/?p=307',0,'revision','',0),(309,1,'2015-06-01 08:27:16','2015-06-01 08:27:16','<h2>环境变量</h2>\r\nruntime 包含的是go实时运行系统的一些交互操作，比如控制goroutines,也包含了一些使用反射包获得的底层信息，具体见反射包关于实时系统的接口。\r\n\r\n下面的环境变量（$name或者是%name%，取决于运行的操作系统）控制go运行时候的实时行为，这个意义和使用方法，也许会在不同版本之间变化（目前1.4版）。\r\n\r\nGOGC变量设置垃圾回收的百分比，当新添加的数据加上上次垃圾回收之后留下的数据重新达到这个比例之后，会再次出发垃圾回收，默认的GOGC是100，设置gogc=off会彻底禁止垃圾回收，runtime/debug包的SetGCPercent函数会允许在运行时修改该参数。详见<a href=\"http://golang.org/pkg/runtime/debug/#SetGCPercent\">http://golang.org/pkg/runtime/debug/#SetGCPercent</a>.\r\n\r\nGODEBUG变量控制着运行时的debug输出，GODEBUG变量是一个逗号分隔的键值对，支持的键名有\r\n<ol>\r\n	<li>allocfreetrace ：设置 allocfreetrace = 1会让每次分配和释放都记录并且可以被栈追踪打印到</li>\r\n	<li>efence : 设置efence = 1会让分配器给每一个对象都分配一个单独的页，并且该页不会再被重复利用了</li>\r\n	<li>gctrace : 设置 gctrace = 1 会让垃圾回收器每次回收的时候都发送一个一行到error，描述回收的量和停顿的时间长度，设置gctrace = 2 ，不止会得到上述结果，但是还有重复的次数。</li>\r\n	<li>gcdead: 设置gcdead = 1 会毁了所有他认为死掉了执行堆栈。</li>\r\n	<li>invalidptr : 默认invalidptr = 1，如果指针被赋予一个无效值,会引起程序的崩溃，设置该值为0，会停止该检查，这个只能临时用于查找bug，真正的解决方法是不要把整数类型的值存在指针变量里面。</li>\r\n	<li>scheddetail : 设置 scheddetail= 1 &amp;&amp; schedtrace = X 会让调度器 发出来一个详细的Xms内多线调度信息，描述调度器的情况，如线程，进程，协程等等。</li>\r\n	<li>schedtrace: 同上</li>\r\n	<li>scavenge : scavenge=1 enables debugging mode of heap scavenger</li>\r\n</ol>\r\n变量GOMAXPROCS限制操作系统可以 同时运行的用户级别的go代码数量，但是对于出于阻塞状态的线程数量是没有限制的，这些是不受GOMAXPROCS 限制的，GOMAXPROCS 是可以修改该限制的（注：NumCPU() 函数可以获取当前系统的CPU数目，可以根据该结果确认GOMAXPROCS的值）。\r\n\r\nGOTRACEBACK可以控制go成语因为未恢复的panic和意外情况造成的崩溃的时候输出栈数量，默认会输出所有的尚存的goroutine，内置函数到实时系统，如果以退出码2退出，如果GOTRACEBACK 设置成0，那goroutine追踪栈会全部输出，GOTRACEBACK 设置成1，采用默认的行为，如果GOTRACEBACK设置成2，不仅输出全部的栈，还有实时交互系统的函数，如果GOTRACEBACK 设置成crash,不仅包括输出栈和实时系统本身的函数，还有尽可能的以操作系统规定的方式退出而不是立即退出，比如在unix系统上，程序会发送一个SIGABRT 去触发一个core dump。\r\n\r\nGOARCH, GOOS, GOPATH, 和 GOROOT 这些环境变量。题目影响go程序的构建。\r\n<h2><strong>常量</strong></h2>\r\n<pre>const <span id=\"Compiler\">Compiler</span> = \"gc\" \r\n编译器是构建运行的二进制代码的工具集的名字，一直的工具集名字有</pre>\r\n<pre>gc      The 5g/6g/8g compiler suite at code.google.com/p/go.\r\ngccgo   The gccgo front end, part of the GCC compiler suite.</pre>\r\n<pre>const <span id=\"GOARCH\">GOARCH</span> <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a> = theGoarch\r\nGOARCH  是运行程序的CPU架构：386，amd64，或者是arm</pre>\r\n<pre>const <span id=\"GOOS\">GOOS</span> <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a> = theGoos\r\nGOOS 是运行程序的操作系统，darwin,freebsd,linux等等\r\n\r\n</pre>\r\n<h2>变量</h2>\r\nvar MemProfileRate int = 512 * 1024\r\n\r\nMemProfileRate 会在内存profile 里面 保存内存分配的频率和报告频率，profile的目标是对内存分配的平均情况进行采样分析。 为了在内存profile分析报告里面记录每一次内存分配的情况，请将MemProfileRate 设置成1，如果彻底关闭内存分析，请将MemProfileRate 设置成0， 该工具会会在整个程序的生命周期里面不停地以设置的频率对内存进行采样分析，修改内存采样频率的操作只应该做一次，并且最好尽可能的早做。\r\n\r\n&nbsp;\r\n<h2>func BlockProfile</h2>\r\nfunc BlockProfile(p []BlockProfileRecord) (n int, ok bool)\r\n\r\n该函数返回n,几率的是当前阻塞的报告。如果len(p) &gt;= n ,该函数会拷贝分析报告进入p，并且返回n，如果len(p) &lt; n, BlockProfile 不做任何修改，只是返回n，false。\r\n\r\nMost clients should use the runtime/pprof package or the testing package\'s -test.blockprofile flag instead of calling BlockProfile directly.\r\n\r\n&nbsp;\r\n<h2>func CPUProfile</h2>\r\nfunc CPUProfile() []byte\r\n\r\nCPUProfile returns the next chunk of binary CPU profiling stack trace data, blocking until data is available. If profiling is turned off and all the profile data accumulated while it was on has been returned, CPUProfile returns nil. The caller must save the returned data before calling CPUProfile again.\r\n\r\nMost clients should use the runtime/pprof package or the testing package\'s -test.cpuprofile flag instead of calling CPUProfile directly.\r\n\r\n&nbsp;\r\n\r\n<h2>func GoroutineProfile<h2>\r\n\r\nfunc GoroutineProfile(p [] StackRecord) (n int, ok bool)\r\nGoroutineProfile 返回n，活动gogoutine 站报告的记录数，如果 len(p) >= n，GoroutineProfile 会拷贝报告进入p，然后返回n，如果 len(p) < n , GoroutineProfile并不会改变p，并且返回n，false。\r\n应该使用runtime/pprof包，而不是直接使用GoroutineProfile \r\n\r\n<h2>func NumCPU()</h2>\r\n返回本机逻辑CPUS的数量\r\n<h2>func NumGoroutine</h2>\r\nfunc NumGoroutine int\r\n返回存在的goroutineus 的数量\r\nfunc ReadMemStats(m *MemStats)\r\n\r\n读取内存分配的数据\r\n&nbsp;','golang runtime 包官方文档 翻译','','inherit','open','open','','303-revision-v1','','','2015-06-01 08:27:16','2015-06-01 08:27:16','',303,'http://unasm.sinaapp.com/?p=309',0,'revision','',0),(315,1,'2015-06-23 06:27:12','2015-06-23 06:27:12','早上刚刚来，突然接到一个电话，说线上出bug了，看一下，说是某个文件创建失败，根据错误提示，去代码里面grep，再根据域名，很快定位了错误，\r\n\r\n是要在一个文件里面，fwrite，但是之前已经 is_writable 进行 判断了，也就是可以写，有权限，但是真正写的时候，却还是不行，初步判断是系统问题，猜测是磁盘满了。\r\n\r\n通过 df -lh 判断，果然/data0的使用率已经是100%了，再根据du  -hc /data0判断，发现才使用65mb，也就是说，其实不是磁盘真正满了，而是没有释放而已\r\n\r\n命令  lsof |grep delete 查找 已经删除了，但是却还没有关闭的系统文件，果然有一个bf_tennis.log 的文件极大，并且尚未关闭，找到对应的pid，也即是第二列的数字，发现pid是一个2014年开始在跑的进程，目前源代码都已经被删除了，但却没有关闭的进程，果断kill掉，再次df -hl ,ok, /data0 使用率已经降到了48%，再kill两个，/data0使用率变成了2%,问题顺利解决','记一次线上bug处理','','publish','open','open','','%e8%ae%b0%e4%b8%80%e6%ac%a1%e7%ba%bf%e4%b8%8abug%e5%a4%84%e7%90%86','','','2015-06-23 06:27:26','2015-06-23 06:27:26','',0,'http://unasm.sinaapp.com/?p=315',0,'post','',0),(316,1,'2015-06-23 06:27:12','2015-06-23 06:27:12','早上刚刚来，突然接到一个电话，说线上出bug了，看一下，说是某个文件创建失败，根据错误提示，去代码里面grep，再根据域名，很快定位了错误，\r\n\r\n是要在一个文件里面，fwrite，但是之前已经 is_writable 进行 判断了，也就是可以写，有权限，但是真正写的时候，却还是不行，初步判断是系统问题，猜测是磁盘满了。\r\n\r\n通过 df -lh 判断，果然/data0的使用率已经是100%了，再根据du  -hc /data0判断，发现才使用65mb，也就是说，其实不是磁盘真正满了，而是没有释放而已\r\n\r\n命令  lsof |grep delete 查找 已经删除了，但是却还没有关闭的系统文件，果然有一个bf_tennis.log 的文件极大，并且尚未关闭，找到对应的pid，也即是第二列的数字，发现pid是一个2014年开始在跑的进程，目前源代码都已经被删除了，但却没有关闭的进程，果断kill掉，再次df -hl ,ok, /data0 使用率已经降到了48%，再kill两个，/data0使用率变成了2%,问题顺利解决','记一次线上bug处理','','inherit','open','open','','315-revision-v1','','','2015-06-23 06:27:12','2015-06-23 06:27:12','',315,'http://unasm.sinaapp.com/?p=316',0,'revision','',0),(319,1,'2015-06-25 12:30:22','2015-06-25 12:30:22','编辑/产品 啪的一声，丢过来一个问题，说XXX出问题了，修复它，没有说明文档，自己刚刚接手不久，怎么办呢？？\r\n\r\n解决问题，应该归成一条线，一步一步来，从前向后，一步一步定位问题。\r\n\r\n首先，XXX出问题了，好，这个就是问题的头，我们沿着这个线往下走，瞄一眼  <span class=\"extension-title\">Website IP （一个chrome的插件），看一下出问题的服务器ip，再怎么新接手，玩世不恭，自己掌管几台服务器，总是知道的吧，然后ssh到服务器上面去，然后就是/data1/bin/httpd -S  看一下apache/nginx 的配置，对配置了如指掌的，可以跳过这一步，主要是担心rewrite ，修改路由，让人不知道接下来怎么走。</span>\r\n\r\n一般来说，现在网站都是单入口的，直接从index.php开始就可以了，但是未必，老项目，如discuz或者不用框架，裸写的。\r\n\r\n如果裸写的，根据url和rewrite规则，或者直接按照目录去找文件，就可以了，如果是单入口模式，肯定会根据url中的参数确定下来具体的入口，这个时候，就需要对框架的路由规则比较了解，怎么了解路由那就是另一个问题了。总之，迅速定位入口，开始从头开始读代码，如果我的话，可能会首先在代码最前面加一个die，或者利用firephp输出，检测，看是不是找对了。然后就可以愉快的读代码了。\r\n\r\n一般来说，比较容易出问题的是外部资源，代码常年跑，不会轻易挂掉，php还是很健壮的。\r\n\r\n比较容易出问题的，比如http接口变化或者挂掉，mysql down掉了，系统没有了权限或者磁盘满了，redis 内存过多等等，优先查外部的，其次才是代码中的判断，','分析无头案','','inherit','open','open','','318-revision-v1','','','2015-06-25 12:30:22','2015-06-25 12:30:22','',318,'http://unasm.sinaapp.com/?p=319',0,'revision','',0),(320,1,'2015-06-27 17:24:17','2015-06-27 17:24:17','http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<b>描述</b>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\r\n<h2>有效的op 参数如下：</h2>\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLL_CTL_ADD </b></li>\r\n</ul>\r\n</ul>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLL_CTL_MOD</b></li>\r\n</ul>\r\n</ul>\r\n修改注册到fd参数上的监听事件\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLL_CTL_DEL</b></li>\r\n</ul>\r\n</ul>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLLIN</b></li>\r\n</ul>\r\n</ul>\r\n关联的文件可以执行read 操作\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLOUT</b></li>\r\n</ul>\r\n</ul>\r\n关联的文件可以进行写操作\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></li>\r\n</ul>\r\n</ul>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLPRI</b></li>\r\n</ul>\r\n</ul>\r\n有紧急的数据需要去读\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLLERR</b></li>\r\n</ul>\r\n</ul>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。此时接口可写。\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLHUP</b></li>\r\n</ul>\r\n</ul>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。此时接口可写。\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLET</b></li>\r\n</ul>\r\n</ul>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<ul>\r\n<ul>\r\n	<li>EPOLLONESHOT(linux 2.6.2之后的版本)</li>\r\n</ul>\r\n</ul>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLWAKEUP(Linux 3.5之后)</b></li>\r\n</ul>\r\n</ul>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n	<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n	<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n	<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n	<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n	<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n	<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。','epoll_ctl 函数（译）','','publish','open','open','','epoll_ctl-%e5%87%bd%e6%95%b0%e7%bf%bb%e8%af%91','','','2015-07-02 01:37:17','2015-07-02 01:37:17','',0,'http://unasm.sinaapp.com/?p=320',0,'post','',0),(321,1,'2015-06-27 17:24:17','2015-06-27 17:24:17','http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll 函数是计划的文件描述符epfd，它需要具体执行的请求参数op，需要操作的文件描述符 fd.\r\n\r\n有效的op 参数如下：\r\n<pre><b>EPOLL_CTL_ADD </b></pre>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<pre><b>EPOLL_CTL_MOD</b></pre>\r\n修改注册到fd参数上的监听事件\r\n<pre><b>EPOLL_CTL_DEL</b></pre>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<pre><b>EPOLLIN</b></pre>\r\n关联的文件可以执行read 操作\r\n\r\n&nbsp;\r\n<pre><b> EPOLLOUT</b></pre>\r\n关联的文件可以进行写操作\r\n<pre><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></pre>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<pre><b> EPOLLPRI</b></pre>\r\n有紧急的数据需要去读\r\n<pre><b>EPOLLERR</b></pre>\r\n\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<pre><b> EPOLLHUP</b></pre>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<pre><b> EPOLLET</b></pre>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。','epoll_ctl 函数翻译','','inherit','open','open','','320-revision-v1','','','2015-06-27 17:24:17','2015-06-27 17:24:17','',320,'http://unasm.sinaapp.com/?p=321',0,'revision','',0),(322,1,'2015-07-01 13:04:19','2015-07-01 13:04:19','http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\n<h2>梗概：</h2>\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\n</pre>\n<b>描述</b>\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\n<h2>有效的op 参数如下：</h2>\n<ul>\n<ul>\n	<li><b>EPOLL_CTL_ADD </b></li>\n</ul>\n</ul>\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\n<ul>\n<ul>\n	<li><b>EPOLL_CTL_MOD</b></li>\n</ul>\n</ul>\n修改注册到fd参数上的监听事件\n<ul>\n<ul>\n	<li><b>EPOLL_CTL_DEL</b></li>\n</ul>\n</ul>\n从epfd中删除fd，这里event参数可以没有，用NULL\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\n<pre> typedef union epoll_data {\n               void        *ptr;\n               int          fd;\n               uint32_t     u32;\n               uint64_t     u64;\n           } epoll_data_t;\n\n           struct epoll_event {\n               uint32_t     events;      /* Epoll events */\n               epoll_data_t data;        /* User data variable */\n           };</pre>\nevents 是一个使用如下参数的位集合。\n<ul>\n<ul>\n	<li><b>EPOLLIN</b></li>\n</ul>\n</ul>\n关联的文件可以执行read 操作\n<ul>\n<ul>\n	<li><b> EPOLLOUT</b></li>\n</ul>\n</ul>\n关联的文件可以进行写操作\n<ul>\n<ul>\n	<li><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></li>\n</ul>\n</ul>\nsocket刘关闭连接或则是关闭写半连接（）\n<ul>\n<ul>\n	<li><b> EPOLLPRI</b></li>\n</ul>\n</ul>\n有紧急的数据需要去读\n<ul>\n<ul>\n	<li><b>EPOLLERR</b></li>\n</ul>\n</ul>\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\n<ul>\n<ul>\n	<li><b> EPOLLHUP</b></li>\n</ul>\n</ul>\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。此时接口可写。\n<ul>\n<ul>\n	<li><b> EPOLLET</b></li>\n</ul>\n</ul>\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\n<ul>\n<ul>\n	<li>EPOLLONESHOT(linux 2.6.2之后的版本)</li>\n</ul>\n</ul>\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\n<ul>\n<ul>\n	<li><b> EPOLLWAKEUP(Linux 3.5之后)</b></li>\n</ul>\n</ul>\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\n<h2>返回值</h2>\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\n<pre><b>可能的错误情况</b></pre>\n<ul>\n	<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\n	<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\n	<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\n	<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\n	<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\n	<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\n</ul>\n<h2>版本</h2>\nepoll_ctl 是在linux 2.6之后加进去的。','epoll_ctl 函数（译）','','inherit','open','open','','320-autosave-v1','','','2015-07-01 13:04:19','2015-07-01 13:04:19','',320,'http://unasm.sinaapp.com/?p=322',0,'revision','',0),(329,1,'2015-06-28 01:49:57','2015-06-28 01:49:57','http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\r\n有效的op 参数如下：\r\n<b>EPOLL_CTL_ADD </b>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<b>EPOLL_CTL_MOD</b>\r\n修改注册到fd参数上的监听事件\r\n<b>EPOLL_CTL_DEL</b>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<b>EPOLLIN</b>\r\n关联的文件可以执行read 操作\r\n<b> EPOLLOUT</b>\r\n关联的文件可以进行写操作\r\n<b> EPOLLRDHUP （Linux 2.6.17之后有）</b>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<b> EPOLLPRI</b>\r\n有紧急的数据需要去读\r\n<b>EPOLLERR</b>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<b> EPOLLHUP</b>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<b> EPOLLET</b>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<li> EPOLLONESHOT(linux 2.6.2之后的版本)</li>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<li><b> EPOLLWAKEUP(Linux 3.5之后)</b></li>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。','epoll_ctl 函数（译）','','inherit','open','open','','320-revision-v1','','','2015-06-28 01:49:57','2015-06-28 01:49:57','',320,'http://unasm.sinaapp.com/?p=329',0,'revision','',0),(323,1,'2015-06-28 01:31:39','2015-06-28 01:31:39','http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll 函数是计划的文件描述符epfd，它需要具体执行的请求参数op，需要操作的文件描述符 fd.\r\n\r\n有效的op 参数如下：\r\n<pre><b>EPOLL_CTL_ADD </b></pre>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<pre><b>EPOLL_CTL_MOD</b></pre>\r\n修改注册到fd参数上的监听事件\r\n<pre><b>EPOLL_CTL_DEL</b></pre>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<pre><b>EPOLLIN</b></pre>\r\n关联的文件可以执行read 操作\r\n\r\n&nbsp;\r\n<pre><b> EPOLLOUT</b></pre>\r\n关联的文件可以进行写操作\r\n<pre><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></pre>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<pre><b> EPOLLPRI</b></pre>\r\n有紧急的数据需要去读\r\n<pre><b>EPOLLERR</b></pre>\r\n\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<pre><b> EPOLLHUP</b></pre>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<pre><b> EPOLLET</b></pre>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<pre><b> EPOLLONESHOT(linux 2.6.2之后的版本)</b></pre>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<pre><b> EPOLLWAKEUP(Linux 3.5之后)</b></pre>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<pre><h2>返回值</h2></pre>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<b>EBADF</b>  epfd 或者df 不是正确的文件描述符。\r\n<b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。\r\n<b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。\r\n<b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。\r\n<b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制\r\n<b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。\r\n\r\n<h2>版本</h2> epoll_ctl 是在linux 2.6之后加进去的。\r\n\r\n\r\n\r\n','epoll_ctl 函数翻译','','inherit','open','open','','320-revision-v1','','','2015-06-28 01:31:39','2015-06-28 01:31:39','',320,'http://unasm.sinaapp.com/?p=323',0,'revision','',0),(324,1,'2015-06-28 01:32:24','2015-06-28 01:32:24','http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll 函数是计划的文件描述符epfd，它需要具体执行的请求参数op，需要操作的文件描述符 fd.\r\n有效的op 参数如下：\r\n<pre><b>EPOLL_CTL_ADD </b></pre>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<pre><b>EPOLL_CTL_MOD</b></pre>\r\n修改注册到fd参数上的监听事件\r\n<pre><b>EPOLL_CTL_DEL</b></pre>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<pre><b>EPOLLIN</b></pre>\r\n关联的文件可以执行read 操作\r\n<pre><b> EPOLLOUT</b></pre>\r\n关联的文件可以进行写操作\r\n<pre><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></pre>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<pre><b> EPOLLPRI</b></pre>\r\n有紧急的数据需要去读\r\n<pre><b>EPOLLERR</b></pre>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<pre><b> EPOLLHUP</b></pre>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<pre><b> EPOLLET</b></pre>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<pre><b> EPOLLONESHOT(linux 2.6.2之后的版本)</b></pre>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<pre><b> EPOLLWAKEUP(Linux 3.5之后)</b></pre>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<b>EBADF</b> epfd 或者df 不是正确的文件描述符。\r\n<b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。\r\n<b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。\r\n<b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。\r\n<b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制\r\n<b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。','epoll_ctl 函数翻译','','inherit','open','open','','320-revision-v1','','','2015-06-28 01:32:24','2015-06-28 01:32:24','',320,'http://unasm.sinaapp.com/?p=324',0,'revision','',0),(328,1,'2015-06-28 01:48:08','2015-06-28 01:48:08','http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\r\n有效的op 参数如下：\r\n<b>EPOLL_CTL_ADD </b>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<b>EPOLL_CTL_MOD</b>\r\n修改注册到fd参数上的监听事件\r\n<pre><b>EPOLL_CTL_DEL</b></pre>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<pre><b>EPOLLIN</b></pre>\r\n关联的文件可以执行read 操作\r\n<pre><b> EPOLLOUT</b></pre>\r\n关联的文件可以进行写操作\r\n<pre><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></pre>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<pre><b> EPOLLPRI</b></pre>\r\n有紧急的数据需要去读\r\n<pre><b>EPOLLERR</b></pre>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<pre><b> EPOLLHUP</b></pre>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<pre><b> EPOLLET</b></pre>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<pre><b> EPOLLONESHOT(linux 2.6.2之后的版本)</b></pre>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<pre><b> EPOLLWAKEUP(Linux 3.5之后)</b></pre>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。','epoll_ctl 函数（译）','','inherit','open','open','','320-revision-v1','','','2015-06-28 01:48:08','2015-06-28 01:48:08','',320,'http://unasm.sinaapp.com/?p=328',0,'revision','',0),(325,1,'2015-06-28 01:34:11','2015-06-28 01:34:11','http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll 函数是计划的文件描述符epfd，它需要具体执行的请求参数op，需要操作的文件描述符 fd.\r\n有效的op 参数如下：\r\n<pre><b>EPOLL_CTL_ADD </b></pre>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<pre><b>EPOLL_CTL_MOD</b></pre>\r\n修改注册到fd参数上的监听事件\r\n<pre><b>EPOLL_CTL_DEL</b></pre>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<pre><b>EPOLLIN</b></pre>\r\n关联的文件可以执行read 操作\r\n<pre><b> EPOLLOUT</b></pre>\r\n关联的文件可以进行写操作\r\n<pre><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></pre>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<pre><b> EPOLLPRI</b></pre>\r\n有紧急的数据需要去读\r\n<pre><b>EPOLLERR</b></pre>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<pre><b> EPOLLHUP</b></pre>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<pre><b> EPOLLET</b></pre>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<pre><b> EPOLLONESHOT(linux 2.6.2之后的版本)</b></pre>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<pre><b> EPOLLWAKEUP(Linux 3.5之后)</b></pre>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。','epoll_ctl 函数翻译','','inherit','open','open','','320-revision-v1','','','2015-06-28 01:34:11','2015-06-28 01:34:11','',320,'http://unasm.sinaapp.com/?p=325',0,'revision','',0),(326,1,'2015-06-28 01:38:58','2015-06-28 01:38:58','http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行操作op以及被op执行的文件描述符 fd.\r\n有效的op 参数如下：\r\n<pre><b>EPOLL_CTL_ADD </b></pre>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<pre><b>EPOLL_CTL_MOD</b></pre>\r\n修改注册到fd参数上的监听事件\r\n<pre><b>EPOLL_CTL_DEL</b></pre>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<pre><b>EPOLLIN</b></pre>\r\n关联的文件可以执行read 操作\r\n<pre><b> EPOLLOUT</b></pre>\r\n关联的文件可以进行写操作\r\n<pre><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></pre>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<pre><b> EPOLLPRI</b></pre>\r\n有紧急的数据需要去读\r\n<pre><b>EPOLLERR</b></pre>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<pre><b> EPOLLHUP</b></pre>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<pre><b> EPOLLET</b></pre>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<pre><b> EPOLLONESHOT(linux 2.6.2之后的版本)</b></pre>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<pre><b> EPOLLWAKEUP(Linux 3.5之后)</b></pre>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。','epoll_ctl 函数（译）','','inherit','open','open','','320-revision-v1','','','2015-06-28 01:38:58','2015-06-28 01:38:58','',320,'http://unasm.sinaapp.com/?p=326',0,'revision','',0),(327,1,'2015-06-28 01:41:18','2015-06-28 01:41:18','http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\r\n有效的op 参数如下：\r\n<pre><b>EPOLL_CTL_ADD </b></pre>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<pre><b>EPOLL_CTL_MOD</b></pre>\r\n修改注册到fd参数上的监听事件\r\n<pre><b>EPOLL_CTL_DEL</b></pre>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<pre><b>EPOLLIN</b></pre>\r\n关联的文件可以执行read 操作\r\n<pre><b> EPOLLOUT</b></pre>\r\n关联的文件可以进行写操作\r\n<pre><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></pre>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<pre><b> EPOLLPRI</b></pre>\r\n有紧急的数据需要去读\r\n<pre><b>EPOLLERR</b></pre>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<pre><b> EPOLLHUP</b></pre>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<pre><b> EPOLLET</b></pre>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<pre><b> EPOLLONESHOT(linux 2.6.2之后的版本)</b></pre>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<pre><b> EPOLLWAKEUP(Linux 3.5之后)</b></pre>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。','epoll_ctl 函数（译）','','inherit','open','open','','320-revision-v1','','','2015-06-28 01:41:18','2015-06-28 01:41:18','',320,'http://unasm.sinaapp.com/?p=327',0,'revision','',0),(330,1,'2015-06-28 01:51:28','2015-06-28 01:51:28','http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\r\n有效的op 参数如下：\r\n<li><b>EPOLL_CTL_ADD </b></li>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<li><b>EPOLL_CTL_MOD</b></li>\r\n修改注册到fd参数上的监听事件\r\n<li><b>EPOLL_CTL_DEL</b></li>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<li><b>EPOLLIN</b></li>\r\n关联的文件可以执行read 操作\r\n<li><b> EPOLLOUT</b></li>\r\n关联的文件可以进行写操作\r\n<li><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></li>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<li><b> EPOLLPRI</b></li>\r\n有紧急的数据需要去读\r\n<li><b>EPOLLERR</b></li>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<li><b> EPOLLHUP</b></li>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<li><b> EPOLLET</b></li>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<li> EPOLLONESHOT(linux 2.6.2之后的版本)</li>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<li><b> EPOLLWAKEUP(Linux 3.5之后)</b></li>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。','epoll_ctl 函数（译）','','inherit','open','open','','320-revision-v1','','','2015-06-28 01:51:28','2015-06-28 01:51:28','',320,'http://unasm.sinaapp.com/?p=330',0,'revision','',0),(331,1,'2015-06-28 01:52:18','2015-06-28 01:52:18','http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<h2>描述</h2>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\r\n<ul>\r\n<h2>有效的op 参数如下：</h2>\r\n<li><b>EPOLL_CTL_ADD </b></li>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<li><b>EPOLL_CTL_MOD</b></li>\r\n修改注册到fd参数上的监听事件\r\n<li><b>EPOLL_CTL_DEL</b></li>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<li><b>EPOLLIN</b></li>\r\n关联的文件可以执行read 操作\r\n<li><b> EPOLLOUT</b></li>\r\n关联的文件可以进行写操作\r\n<li><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></li>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<li><b> EPOLLPRI</b></li>\r\n有紧急的数据需要去读\r\n<li><b>EPOLLERR</b></li>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<li><b> EPOLLHUP</b></li>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<li><b> EPOLLET</b></li>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<li> EPOLLONESHOT(linux 2.6.2之后的版本)</li>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<li><b> EPOLLWAKEUP(Linux 3.5之后)</b></li>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n</ul>\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。','epoll_ctl 函数（译）','','inherit','open','open','','320-revision-v1','','','2015-06-28 01:52:18','2015-06-28 01:52:18','',320,'http://unasm.sinaapp.com/?p=331',0,'revision','',0),(332,1,'2015-06-28 01:52:44','2015-06-28 01:52:44','http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<b>描述</b>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\r\n<ul>\r\n<h2>有效的op 参数如下：</h2>\r\n<li><b>EPOLL_CTL_ADD </b></li>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<li><b>EPOLL_CTL_MOD</b></li>\r\n修改注册到fd参数上的监听事件\r\n<li><b>EPOLL_CTL_DEL</b></li>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<li><b>EPOLLIN</b></li>\r\n关联的文件可以执行read 操作\r\n<li><b> EPOLLOUT</b></li>\r\n关联的文件可以进行写操作\r\n<li><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></li>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<li><b> EPOLLPRI</b></li>\r\n有紧急的数据需要去读\r\n<li><b>EPOLLERR</b></li>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。\r\n<li><b> EPOLLHUP</b></li>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。\r\n<li><b> EPOLLET</b></li>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<li> EPOLLONESHOT(linux 2.6.2之后的版本)</li>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<li><b> EPOLLWAKEUP(Linux 3.5之后)</b></li>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n</ul>\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。','epoll_ctl 函数（译）','','inherit','open','open','','320-revision-v1','','','2015-06-28 01:52:44','2015-06-28 01:52:44','',320,'http://unasm.sinaapp.com/?p=332',0,'revision','',0),(334,1,'2015-07-01 13:04:36','2015-07-01 13:04:36','http://man7.org/linux/man-pages/man2/epoll_ctl.2.html\r\n<h2>梗概：</h2>\r\n<pre> <b>#include &lt;sys/epoll.h&gt;</b>\r\n<b> int epoll_ctl(int </b><i>epfd</i><b>, int </b><i>op</i><b>, int </b><i>fd</i><b>, struct epoll_event *</b><i>event</i><b>);</b>\r\n</pre>\r\n<b>描述</b>\r\n该系统调用 执行epoll实例epfd上的操作，它需要具体执行的操作op以及被op执行的目标文件描述符 fd.\r\n<h2>有效的op 参数如下：</h2>\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLL_CTL_ADD </b></li>\r\n</ul>\r\n</ul>\r\n注册的文件描述符df在 epfd 上，把event事件和fd绑定在一起。\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLL_CTL_MOD</b></li>\r\n</ul>\r\n</ul>\r\n修改注册到fd参数上的监听事件\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLL_CTL_DEL</b></li>\r\n</ul>\r\n</ul>\r\n从epfd中删除fd，这里event参数可以没有，用NULL\r\n参数 event 描述的是fd对象的变化，epoll_event 结构体定义如下\r\n<pre> typedef union epoll_data {\r\n               void        *ptr;\r\n               int          fd;\r\n               uint32_t     u32;\r\n               uint64_t     u64;\r\n           } epoll_data_t;\r\n\r\n           struct epoll_event {\r\n               uint32_t     events;      /* Epoll events */\r\n               epoll_data_t data;        /* User data variable */\r\n           };</pre>\r\nevents 是一个使用如下参数的位集合。\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLLIN</b></li>\r\n</ul>\r\n</ul>\r\n关联的文件可以执行read 操作\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLOUT</b></li>\r\n</ul>\r\n</ul>\r\n关联的文件可以进行写操作\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLRDHUP （Linux 2.6.17之后有）</b></li>\r\n</ul>\r\n</ul>\r\nsocket刘关闭连接或则是关闭写半连接（）\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLPRI</b></li>\r\n</ul>\r\n</ul>\r\n有紧急的数据需要去读\r\n<ul>\r\n<ul>\r\n	<li><b>EPOLLERR</b></li>\r\n</ul>\r\n</ul>\r\n有错误在关联的文件上发生，epoll_wait 总是等这种事件发生，并不需要在events中设置。此时接口可写。\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLHUP</b></li>\r\n</ul>\r\n</ul>\r\n关联的文件描述符挂断了。epoll_wait 会处理这种情况，不需要特意在events中设置，注意，当从信道或者socket流中读取的时候，这个时间紧紧只是说，连接被关闭了，从该管道中读取，当全部数据读取完的时候，才会返回0，即文件结束。此时接口可写。\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLET</b></li>\r\n</ul>\r\n</ul>\r\n设置关联的文件描述符上的边界触发信号，epoll默认的是水平触发。\r\n<ul>\r\n<ul>\r\n	<li>EPOLLONESHOT(linux 2.6.2之后的版本)</li>\r\n</ul>\r\n</ul>\r\n为关联的文件描述符设置一次监听，也就是说，触发了事件之后，文件描述符就从epoll_wait的等待队列中剔除，用户必须再次调用epoll_ctl，使用EPOLL_CTL_MOD 才可以重新事件掩码。\r\n<ul>\r\n<ul>\r\n	<li><b> EPOLLWAKEUP(Linux 3.5之后)</b></li>\r\n</ul>\r\n</ul>\r\n如果EPOLLONESHOT和EPOLLET被清除，并且进程有被CAP_BLOCK_SUSPEND ，确保系统不会在处理或者 等待中 进入挂起或者休眠的状态，在第一次在该文件描述符上调用了epoll_wait，第二次调用之前,在关闭文件描述之前，在通过EPOLL_CTL_DEL 移除事件之前，或者是通过EPOLL_CTL_MOD 移除EPOLLWAKEUP 之前， 在该事件会被一直认为在处理中。\r\n<h2>返回值</h2>\r\n成功执行后，epoll_ctl 返回0，发生错误的时候，epoll_ctl返回-1，并且errno 会被设置成合适的值。\r\n<pre><b>可能的错误情况</b></pre>\r\n<ul>\r\n	<li><b>EBADF</b> epfd 或者df 不是正确的文件描述符。</li>\r\n	<li><b>EEXIST</b> op 是EPOLL_CTL_ADD，并且fd已经被注册在该epoll实例 epfd上面了。</li>\r\n	<li><b>EINVAL</b> epfd 不是 epoll文件描述或者fd和epfd一样，或者请求的op并不支持该接口。</li>\r\n	<li><b>ENOENT</b> op 是EPOLL_CTL_MOD 或者是EPOLL_CTL_DEL，并且df 并没有被注册到该epoll 实例上。</li>\r\n	<li><b>ENOSPC</b> 在EPOLL_CTL_ADD的时候被 /proc/sys/fs/epoll/max_user_watches 强制限制</li>\r\n	<li><b>EPERM </b> fd并不支持epoll，这种错误可能发生在一个fd是一个正常文件或者是一个目录的时候。</li>\r\n</ul>\r\n<h2>版本</h2>\r\nepoll_ctl 是在linux 2.6之后加进去的。','epoll_ctl 函数（译）','','inherit','open','open','','320-revision-v1','','','2015-07-01 13:04:36','2015-07-01 13:04:36','',320,'http://unasm.sinaapp.com/?p=334',0,'revision','',0),(335,1,'2015-07-02 02:29:19','2015-07-02 02:29:19','<p>英文源自：<a title=\"http://man7.org/linux/man-pages/man2/epoll_wait.2.html\" href=\"http://man7.org/linux/man-pages/man2/epoll_wait.2.html\" target=\"_blank\">http://man7.org/linux/man-pages/man2/epoll_wait.2.html</a></p>\r\n<h3>梗概</h3>\r\n<p>[cpp]&lt;br /&gt;\r\n #include &amp;lt;sys/epoll.h&amp;gt;&lt;br /&gt;\r\n int epoll_wait(int epfd, struct epoll_event *events,&lt;br /&gt;\r\n                      int maxevents, int timeout);&lt;br /&gt;\r\n int epoll_pwait(int epfd, struct epoll_event *events,&lt;br /&gt;\r\n                      int maxevents, int timeout,&lt;br /&gt;\r\n                      const sigset_t *sigmask);&lt;br /&gt;\r\n[/cpp]</p>\r\n<h3>描述</h3>\r\n<p>epoll_wait 该系统等待 epoll的实例化文件描述符epfd 响应，events指针指向响应的事件列表，这些事件是之前在epfd通过epoll_ctl注册的文件描述符的响应，maxevents 该参数必须大于0，表示响应的最大的时间数量。<br />\r\ntimeout参数指定epoll_wait阻塞的时间。该函数会在下列情况下停止：</p>\r\n<ol>\r\n<li>每一个epfd上注册的文件描述符都有了响应。</li>\r\n<li>该调用被信号句柄终止</li>\r\n<li>或者超时，超过了timeout</li>\r\n</ol>\r\n<p>timeout 精确到系统的时钟的粒度，内核的调度的延迟意味着阻塞的时间会有一丁点的超时。如果timeout设置成-1，意味着无限期的阻塞，设置成0意味着函数立即返回，不管是不是有事件响应。</p>\r\n<p>epoll_event 定义如下</p>\r\n<p>[cpp]&lt;br /&gt;\r\n typedef union epoll_data {&lt;br /&gt;\r\n         void    *ptr;&lt;br /&gt;\r\n         int      fd;&lt;br /&gt;\r\n         uint32_t u32;&lt;br /&gt;\r\n         uint64_t u64;&lt;br /&gt;\r\n } epoll_data_t;&lt;/p&gt;\r\n&lt;p&gt; struct epoll_event {&lt;br /&gt;\r\n        uint32_t     events;    /* Epoll events */&lt;br /&gt;\r\n        epoll_data_t data;      /* User data variable */&lt;br /&gt;\r\n };&lt;br /&gt;\r\n[/cpp]</p>\r\n<p>data 返回的结构体会包含与epoll_ctl 相同的数据，而events 会包含一个时间位列。</p>\r\n<h3>返回值</h3>\r\n<p>成功的时候，epoll_wait 会返回就绪的 描述字数量，如果 timeout 毫秒内没有文件描述子变成可用返回0。出错的时候，epoll_wait 返回-1，errno会被设置成对应的值。</p>\r\n<h3>错误</h3>\r\n<ol>\r\n<li>EBADF  epfd 不是正确的文件描述符。</li>\r\n<li>EFAULT  <i>events 不可写。</i></li>\r\n<li>EINTR   函数被中断了。</li>\r\n<li>EINVAL epfd 不是epoll 文件描述字，或者maxevents 小于等于0；</li>\r\n</ol>\r\n','epoll_wait 函数(译)','','publish','open','open','','epoll_wait-%e5%87%bd%e6%95%b0%e8%af%91','','','2015-07-31 10:05:46','2015-07-31 10:05:46','',0,'http://unasm.sinaapp.com/?p=335',0,'post','',0),(336,1,'2015-07-02 02:29:19','2015-07-02 02:29:19','<h2></h2>\r\n\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n\r\n[code language=\"css\"]\r\n<?php\r\n    echo \"hello,world\";\r\n?>\r\n[/code]','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-02 02:29:19','2015-07-02 02:29:19','',335,'http://unasm.sinaapp.com/?p=336',0,'revision','',0),(337,1,'2015-07-02 02:30:09','2015-07-02 02:30:09','<h2></h2>\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n<code language=\"css\">\r\n<?php     echo \"hello,world\"; ?>\r\n</code>','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-02 02:30:09','2015-07-02 02:30:09','',335,'http://unasm.sinaapp.com/?p=337',0,'revision','',0),(345,1,'2015-07-02 07:12:14','2015-07-02 07:12:14','<h2></h2>\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n<code>\r\n<!--?php     echo \"hello,world\"; ?--></code>\r\n<pre class=\"brush: php\">\r\necho \"hello,world\";\r\n</pre>\r\n\r\n\r\n[php]\r\n&lt;?php\r\n echo &quot;hello,world&quot;;\r\n?&gt;\r\n[/php]\r\n','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-02 07:12:14','2015-07-02 07:12:14','',335,'http://unasm.sinaapp.com/?p=345',0,'revision','',0),(344,1,'2015-07-02 07:11:50','2015-07-02 07:11:50','<h2></h2>\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n<code>\r\n<!--?php     echo \"hello,world\"; ?--></code>\r\n<pre class=\"brush: php\"></pre>\r\n<!--?php  echo \"hello,world\"; ?-->\r\n<p class=\"p1\"><span class=\"s1\">&lt;?php get_header(); ?&gt;</span></p>\r\n<p class=\"p1\"></p>\r\n\r\n\r\n[php]\r\n&lt;?php\r\n echo &quot;hello,world&quot;;\r\n?&gt;\r\n[/php]\r\n','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-02 07:11:50','2015-07-02 07:11:50','',335,'http://unasm.sinaapp.com/?p=344',0,'revision','',0),(346,1,'2015-07-02 07:12:46','2015-07-02 07:12:46','<h2></h2>\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n\r\n<pre class=\"brush: php\">\r\necho \"hello,world\";\r\n</pre>\r\n\r\n\r\n[php]\r\n&lt;?php\r\n echo &quot;hello,world&quot;;\r\n?&gt;\r\n[/php]\r\n','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-02 07:12:46','2015-07-02 07:12:46','',335,'http://unasm.sinaapp.com/?p=346',0,'revision','',0),(339,1,'2015-07-02 06:04:04','2015-07-02 06:04:04','<h2></h2>\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n<code>\r\n<!--?php     echo \"hello,world\"; ?--></code>\r\n<pre class=\"brush: php\"></pre>\r\n<p class=\"p1\"><span class=\"s1\">&lt;?php get_header(); ?&gt;</span></p>','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-02 06:04:04','2015-07-02 06:04:04','',335,'http://unasm.sinaapp.com/?p=339',0,'revision','',0),(340,1,'2015-07-02 06:04:20','2015-07-02 06:04:20','<h2></h2>\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n<code>\r\n<!--?php     echo \"hello,world\"; ?--></code>\r\n<pre class=\"brush: php\">\r\n<p class=\"p1\"><span class=\"s1\">&lt;?php get_header(); ?&gt;</span></p>\r\n</pre>','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-02 06:04:20','2015-07-02 06:04:20','',335,'http://unasm.sinaapp.com/?p=340',0,'revision','',0),(341,1,'2015-07-02 06:04:32','2015-07-02 06:04:32','<h2></h2>\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n<code>\r\n<!--?php     echo \"hello,world\"; ?--></code>\r\n<pre class=\"brush: php\"></pre>\r\n<p class=\"p1\"><span class=\"s1\">&lt;?php get_header(); ?&gt;</span></p>','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-02 06:04:32','2015-07-02 06:04:32','',335,'http://unasm.sinaapp.com/?p=341',0,'revision','',0),(342,1,'2015-07-02 06:08:01','2015-07-02 06:08:01','<h2></h2>\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n<code>\r\n<!--?php     echo \"hello,world\"; ?--></code>\r\n<pre class=\"brush: php\"/>\r\n<?php  echo \"hello,world\"; ?>\r\n</pre>\r\n<p class=\"p1\"><span class=\"s1\">&lt;?php get_header(); ?&gt;</span></p>','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-02 06:08:01','2015-07-02 06:08:01','',335,'http://unasm.sinaapp.com/?p=342',0,'revision','',0),(343,1,'2015-07-31 08:56:56','2015-07-31 08:56:56','英文源自：<a title=\"http://man7.org/linux/man-pages/man2/epoll_wait.2.html\" href=\"http://man7.org/linux/man-pages/man2/epoll_wait.2.html\" target=\"_blank\">http://man7.org/linux/man-pages/man2/epoll_wait.2.html</a>\n<h3>梗概</h3>\n\n[cpp]\n #include &lt;sys/epoll.h&gt;\n int epoll_wait(int epfd, struct epoll_event *events,\n                      int maxevents, int timeout);\n int epoll_pwait(int epfd, struct epoll_event *events,\n                      int maxevents, int timeout,\n                      const sigset_t *sigmask);\n[/cpp]\n\n<h3>描述</h3>\nepoll_wait 该系统等待 epoll的实例化文件描述符epfd 响应，events指针指向响应的事件列表，这些事件是之前在epfd通过epoll_ctl注册的文件描述符的响应，maxevents 该参数必须大于0，表示响应的最大的时间数量。\ntimeout参数指定epoll_wait阻塞的时间。该函数会在下列情况下停止：\n<ol>\n	<li>每一个epfd上注册的文件描述符都有了响应。</li>\n	<li>该调用被信号句柄终止</li>\n	<li>或者超时，超过了timeout</li>\n</ol>\ntimeout 精确到系统的时钟的粒度，内核的调度的延迟意味着阻塞的时间会有一丁点的超时。如果timeout设置成-1，意味着无限期的阻塞，设置成0意味着函数立即返回，不管是不是有事件响应。\n\nepoll_event 定义如下\n\n[cpp]\n typedef union epoll_data {\n         void    *ptr;\n         int      fd;\n         uint32_t u32;\n         uint64_t u64;\n } epoll_data_t;\n\n struct epoll_event {\n        uint32_t     events;    /* Epoll events */\n        epoll_data_t data;      /* User data variable */\n };\n[/cpp]\n\ndata 返回的结构体会包含与epoll_ctl 相同的数据，而events 会包含一个时间位列。\n<h3>返回值</h3>\n成功的时候，epoll_wait 会返回就绪的 描述字数量，如果 timeout 毫秒内没有文件描述子变成可用返回0。出错的时候，epoll_wait 返回-1，errno会被设置成对应的值。\n<h3>错误</h3>\n<ol>\n	<li>EBADF  epfd 不是正确的文件描述符。</li>\n	<li>EFAULT  <i>events 不可写。</i></li>\n	<li>EINTR   函数被中断了。</li>\n	<li>EINVAL epfd 不是epoll 文件描述字，或者maxevents 小于等于0；</li>\n</ol>','epoll_wait 函数(译)','','inherit','open','open','','335-autosave-v1','','','2015-07-31 08:56:56','2015-07-31 08:56:56','',335,'http://unasm.sinaapp.com/?p=343',0,'revision','',0),(347,1,'2015-07-02 07:32:26','2015-07-02 07:32:26','\r\n英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n\r\n<h3>梗概</h3>\r\n<pre lang = \"c++\">\r\n\r\n #include <sys/epoll.h>\r\n\r\n       int epoll_wait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout);\r\n       int epoll_pwait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout,\r\n                      const sigset_t *sigmask);\r\n</pre>\r\n','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-02 07:32:26','2015-07-02 07:32:26','',335,'http://unasm.sinaapp.com/?p=347',0,'revision','',0),(349,1,'2015-07-02 07:36:10','2015-07-02 07:36:10','英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n\r\n<h3>梗概</h3>\r\n<pre class = \"brush: c\">\r\n\r\n #include <sys/epoll.h>\r\n\r\n       int epoll_wait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout);\r\n       int epoll_pwait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout,\r\n                      const sigset_t *sigmask);\r\n</pre>\r\n','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-02 07:36:10','2015-07-02 07:36:10','',335,'http://unasm.sinaapp.com/?p=349',0,'revision','',0),(348,1,'2015-07-02 07:35:07','2015-07-02 07:35:07','英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n\r\n<h3>梗概</h3>\r\n<pre class = \"brush: c++\">\r\n\r\n #include <sys/epoll.h>\r\n\r\n       int epoll_wait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout);\r\n       int epoll_pwait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout,\r\n                      const sigset_t *sigmask);\r\n</pre>\r\n','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-02 07:35:07','2015-07-02 07:35:07','',335,'http://unasm.sinaapp.com/?p=348',0,'revision','',0),(350,1,'2015-07-02 07:36:33','2015-07-02 07:36:33','英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n\r\n\r\n<h3>梗概</h3>\r\n[c language=\"++\"][/c]\r\n\r\n #include <sys/epoll.h>\r\n\r\n       int epoll_wait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout);\r\n       int epoll_pwait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout,\r\n                      const sigset_t *sigmask);\r\n[/c++]\r\n','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-02 07:36:33','2015-07-02 07:36:33','',335,'http://unasm.sinaapp.com/?p=350',0,'revision','',0),(351,1,'2015-07-02 07:38:23','2015-07-02 07:38:23','英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n<h3>梗概</h3>\r\n\r\n[cpp]\r\n\r\n #include &lt;sys/epoll.h&gt;\r\n\r\n       int epoll_wait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout);\r\n       int epoll_pwait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout,\r\n                      const sigset_t *sigmask);\r\n[/cpp]','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-02 07:38:23','2015-07-02 07:38:23','',335,'http://unasm.sinaapp.com/?p=351',0,'revision','',0),(352,1,'2015-07-02 08:01:05','2015-07-02 08:01:05','英文源自：http://man7.org/linux/man-pages/man2/epoll_wait.2.html\r\n<h3>梗概</h3>\r\n\r\n[cpp]\r\n #include &lt;sys/epoll.h&gt;\r\n int epoll_wait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout);\r\n int epoll_pwait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout,\r\n                      const sigset_t *sigmask);\r\n[/cpp]\r\n\r\n<h3>描述</h3>\r\nepoll_wait 该系统调用等待 epoll的实例化文件描述符epfd 响应。events指针指向可以被调用者调用的响应事件。至于maxevents 被函数返回，该参数必须大于0。\r\ntimeout参数指定epoll_wait阻塞的时间。该调用会在下列情况下停止：\r\n<ol>\r\n	<li>每一个文件描述符都有了事件响应。</li>\r\n	<li>该调用被信号句柄终止</li>\r\n	<li>或者超时</li>\r\n</ol>\r\ntimeout 会使用系统的时钟，内核的调度意味着阻塞的时间会有一丁点的超时。如果timeout设置成-1，意味着无限期的阻塞，设置成0意味着函数立即返回，不管是不是有事件响应。\r\n\r\nepoll_event 定义如下\r\n\r\n[cpp]\r\n typedef union epoll_data {\r\n         void    *ptr;\r\n         int      fd;\r\n         uint32_t u32;\r\n         uint64_t u64;\r\n } epoll_data_t;\r\n\r\n struct epoll_event {\r\n        uint32_t     events;    /* Epoll events */\r\n        epoll_data_t data;      /* User data variable */\r\n };\r\n[/cpp]\r\n\r\ndata 返回的结构体会包含与epoll_ctl 相同的数据，而events 会包含一个时间位列。\r\n<h3>epoll_pwait</h3>\r\n与epoll_wait的关系就像select和pselect 一样（不懂）。\r\n<h3>返回值</h3>\r\n成功的时候，epoll_wait 会返回就绪的 请求I/O 描述字数量，或者是0，表示timeout 毫秒内没有文件描述子变成可用。出错的时候，epoll_wait 返回-1，errno会被设置成对应的值。\r\n<h3>错误</h3>\r\n<ol>\r\n	<li>EBADF  epfd 不是正确的文件描述符。</li>\r\n	<li>EFAULT  <i>events 不可写。</i></li>\r\n	<li>EINTR   函数被中断了。</li>\r\n	<li>EINVAL epfd 不是epoll 文件描述字，或者maxevents 小于等于0；</li>\r\n</ol>','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-02 08:01:05','2015-07-02 08:01:05','',335,'http://unasm.sinaapp.com/?p=352',0,'revision','',0),(353,1,'2015-07-02 08:04:34','2015-07-02 08:04:34','英文源自：<a title=\"http://man7.org/linux/man-pages/man2/epoll_wait.2.html\" href=\"http://man7.org/linux/man-pages/man2/epoll_wait.2.html\" target=\"_blank\">http://man7.org/linux/man-pages/man2/epoll_wait.2.html</a>\r\n<h3>梗概</h3>\r\n\r\n[cpp]\r\n #include &lt;sys/epoll.h&gt;\r\n int epoll_wait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout);\r\n int epoll_pwait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout,\r\n                      const sigset_t *sigmask);\r\n[/cpp]\r\n\r\n<h3>描述</h3>\r\nepoll_wait 该系统调用等待 epoll的实例化文件描述符epfd 响应。events指针指向可以被调用者调用的响应事件。至于maxevents 被函数返回，该参数必须大于0。\r\ntimeout参数指定epoll_wait阻塞的时间。该调用会在下列情况下停止：\r\n<ol>\r\n	<li>每一个文件描述符都有了事件响应。</li>\r\n	<li>该调用被信号句柄终止</li>\r\n	<li>或者超时</li>\r\n</ol>\r\ntimeout 会使用系统的时钟，内核的调度意味着阻塞的时间会有一丁点的超时。如果timeout设置成-1，意味着无限期的阻塞，设置成0意味着函数立即返回，不管是不是有事件响应。\r\n\r\nepoll_event 定义如下\r\n\r\n[cpp]\r\n typedef union epoll_data {\r\n         void    *ptr;\r\n         int      fd;\r\n         uint32_t u32;\r\n         uint64_t u64;\r\n } epoll_data_t;\r\n\r\n struct epoll_event {\r\n        uint32_t     events;    /* Epoll events */\r\n        epoll_data_t data;      /* User data variable */\r\n };\r\n[/cpp]\r\n\r\ndata 返回的结构体会包含与epoll_ctl 相同的数据，而events 会包含一个时间位列。\r\n<h3>epoll_pwait</h3>\r\n与epoll_wait的关系就像select和pselect 一样（不懂）。\r\n<h3>返回值</h3>\r\n成功的时候，epoll_wait 会返回就绪的 请求I/O 描述字数量，或者是0，表示timeout 毫秒内没有文件描述子变成可用。出错的时候，epoll_wait 返回-1，errno会被设置成对应的值。\r\n<h3>错误</h3>\r\n<ol>\r\n	<li>EBADF  epfd 不是正确的文件描述符。</li>\r\n	<li>EFAULT  <i>events 不可写。</i></li>\r\n	<li>EINTR   函数被中断了。</li>\r\n	<li>EINVAL epfd 不是epoll 文件描述字，或者maxevents 小于等于0；</li>\r\n</ol>','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-02 08:04:34','2015-07-02 08:04:34','',335,'http://unasm.sinaapp.com/?p=353',0,'revision','',0),(354,1,'2015-07-02 12:53:21','2015-07-02 12:53:21','这个可以视为 <a title=\"redis源码分析之网络通信和事件调度篇\" href=\"http://unasm.com/2015/08/464/\" target=\"_blank\">redis源码分析之网络通信和事件调度篇</a>  的下一篇,主要涉及 ae.c + ae_epoll.c 两个文件不到一千行代码，从redis.c的main调用aeMain开始。\r\n下面是aeMain 函数的全部代码。\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n\r\n    eventLoop-&gt;stop = 0;\r\n\r\n    while (!eventLoop-&gt;stop) {\r\n\r\n        // 如果有需要在事件处理前执行的函数，那么运行它\r\n        if (eventLoop-&gt;beforesleep != NULL)\r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n\r\n        // 开始处理事件\r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);\r\n    }\r\n}\r\n[/cpp]\r\n\r\neventLoop 是redis的事件调度器，可以看到这里就是一个死循环，只要 eventLoop-&gt;stop 不置位，就会不停循环，不断地处理事务，实际上，除了在benchmark之外，没有任何地方将stop置为1，也就是永远都不会触发stop = 1 的情况。aeProcessEvents 具体处理epoll的响应事件。 在全部代码里面grep了一下，尚未发现 eventLoop-&gt;beforesleep 可以被用到的时候，应该一直都是NULL的。\r\n\r\n下面是 aeProcessEvents的定义，flags表示要处理的事件类型，根据调用的时候的参数，可以看到是要处理全部的事件类型，也就是AE_ALL_EVENTS，\r\n\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\n\r\n这是AE_ALL_EVENTS的定义，可见对于redis来说，全部事件包括时间和文本的两种事件。\r\n\r\n[cpp]\r\n#define AE_ALL_EVENTS (AE_FILE_EVENTS|AE_TIME_EVENTS)\r\n[/cpp]\r\n\r\nunix哲学里面，一切都是文件。\r\n\r\n我们步入到aeProcessEvents中，看看在redis的主循环中，到底都做了那些事情。\r\n\r\naeProcessEvents 前两个 if/else ,42行代码，主要是为了得到下一次时间事件到来还有多久，设置tvp变量，由此决定文本事件的阻塞时间，正常来说，serverCron每1ms执行一次。作者的意图，就是在不耽误后台进程处理的情况下，阻塞尽可能长的事件，获取尽可能多的响应，增大处理的效率。\r\n\r\n之后来到这一行,将得到的tvp变量和事件调度器传递给epoll处理函数，获取tvp事件内响应的全部套字节列表。epoll观察着全部的I/O变化。\r\n\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\r\n\r\n这个就是整个事件处理器的最最核心的一句，<a title=\"epoll_wait 详解\" href=\"http://unasm.com/2015/07/335/\">epoll_wait</a> ，获取tvp的时间内，注册在state-&gt;epfd上的全部响应套字节，保存在state-&gt;events中，并返回数量，保存在变量retval中。\r\n\r\n[cpp]\r\nretval = epoll_wait(state-&gt;epfd,state-&gt;events,eventLoop-&gt;setsize, tvp ? (tvp-&gt;tv_sec*1000 + tvp-&gt;tv_usec/1000) : -1);\r\n[/cpp]\r\n\r\n很经典的设计模式，观察者模式。“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\r\n\r\nstate-&gt;events中是socket描述字的列表，后面需要后续处理，调用当初注册在对应对象列表上的函数，“做出相应反应”。\r\n\r\n[cpp]\r\n\r\n for (j = 0; j &lt; numevents; j++) {\r\n// 从已就绪数组中获取事件\r\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\r\n\r\n            int mask = eventLoop-&gt;fired[j].mask;\r\n            int fd = eventLoop-&gt;fired[j].fd;\r\n            int rfired = 0;\r\n\r\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\r\n             * event removed an element that fired and we still didn\'t\r\n             * processed, so we check if the event is still valid. */\r\n            // 读事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\r\n                // rfired 确保读/写事件只能执行其中一个\r\n                rfired = 1;\r\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            // 写事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\r\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\r\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n\r\n            processed++;\r\n }\r\n[/cpp]\r\n\r\n响应之后对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\r\n\r\n读响应的后续处理函数，函数指针 rfileProc 主要是 acceptTcpHandler和 acceptUnixHandler ，如果想看具体如何处理socket的响应，可以追踪进去。\r\n\r\n而写的后续响应函数 ，保存在函数指针wfileProc中的，<span class=\"s1\">sendReplyToClie</span><span class=\"s2\">n</span><span class=\"s1\">t ，将回复用户的查询内容的，当时并不真正写，而是首先注册到epoll里面，集中处理。</span>\r\n\r\n当然，要回复客户端内容，并不是真的一定需要进入事件循环的，可以 使用 <span class=\"s1\">flushSl</span><span class=\"s2\">a</span><span class=\"s1\">vesOutputBuffers，立刻做出响应。</span>\r\n\r\n[cpp]\r\nif (flags &amp; AE_TIME_EVENTS) processed += processTimeEvents(eventLoop);\r\n[/cpp]\r\n\r\n因为已经阻塞了tvp的时间，所以processTimeEvents中肯定是有内容需要处理的。也就是开始执行serverCron，执行redis的后台进程。\r\n\r\n关于serverCron的解析，欢迎查看 <a title=\"serverCron解析\" href=\"http://unasm.com/2015/07/394/\">http://unasm.com/2015/07/394/</a>','redis 源码分析之事件调度器 epoll','','publish','open','open','','redis%e7%9a%84%e4%ba%8b%e4%bb%b6%e8%b0%83%e5%ba%a6%e5%99%a8-epoll','','http://unasm.com/2015/08/464/\nhttp://unasm.com/2015/07/335/\nhttp://unasm.com/2015/07/394/','2015-08-13 06:23:05','2015-08-13 06:23:05','',0,'http://unasm.sinaapp.com/?p=354',0,'post','',0),(475,1,'2015-08-07 02:41:00','2015-08-07 02:41:00','这个可以视为\r\n<a title=\"redis源码分析之网络通信和事件调度篇\" href=\"http://unasm.com/2015/08/464/\" target=\"_blank\">redis源码分析之网络通信和事件调度篇</a> 的下一篇,主要涉及 ae.c + ae_epoll.c 两个文件不到一千行代码，从redis.c的main调用aeMain开始。\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n\r\n    eventLoop-&gt;stop = 0;\r\n\r\n    while (!eventLoop-&gt;stop) {\r\n\r\n        // 如果有需要在事件处理前执行的函数，那么运行它\r\n        if (eventLoop-&gt;beforesleep != NULL)\r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n\r\n        // 开始处理事件\r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);\r\n    }\r\n}\r\n[/cpp]\r\n\r\neventLoop 就是redis的事件调度器，可以看到这里就是一个死循环，只要stop不置位，就会不停循环。aeProcessEvents 处理epoll的响应事件。\r\n\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\n\r\nflags表示的是要处理的事件类型，其实一共是两种类型的事件，文件类型，事件类型，事件类型的事件是未来尚未发生的，文件类型的事件嘛，主要是I/O事件，再说，unix哲学里面，一切都是文件。\r\n\r\naeProcessEvents 第一个if判断无意义，略过，第二个if/else ,那一大块代码段，是用来设置事件时间的。if/else之后有这么一行,前面的十几二十行就是为了得到不同情况下的tvp参数，也就是最近的时间事件 到达时间。\r\n\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\r\n\r\naeApiPoll 返回了当前已经可读可处理的事件列表 eventLoop-&gt;fired ，以及numevents数量。\r\n后面接着的for循环，就是对已经响应的事件进行处理。这里其实存在一个很经典的设计模式，观察者模式。\r\n“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\r\n文件描述字发生变化，通知对应的调度器，调度器调用预先注册好的函数处理，调度器通过epoll观察着全部的I/O变化。\r\n之前说了，一共其实只有两种事件，一个文件事件，一个时间事件，对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\r\n这里逻辑很简单，就是找对应的处理函数，然后把参数什么的传递给他们处理。挺适合goroutine的，直接开协程处理，哈哈。\r\n\r\n[cpp]\r\n for (j = 0; j &lt; numevents; j++) {\r\n            // 从已就绪数组中获取事件\r\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\r\n\r\n            int mask = eventLoop-&gt;fired[j].mask;\r\n            int fd = eventLoop-&gt;fired[j].fd;\r\n            int rfired = 0;\r\n\r\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\r\n             * event removed an element that fired and we still didn\'t\r\n             * processed, so we check if the event is still valid. */\r\n            // 读事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\r\n                // rfired 确保读/写事件只能执行其中一个\r\n                rfired = 1;\r\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            // 写事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\r\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\r\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n\r\n            processed++;\r\n }\r\n[/cpp]\r\n\r\n回头接着说aeApiPoll 函数。逻辑也很简单，主要是对<a title=\"epoll_wait\" href=\"http://unasm.sinaapp.com/?p=335\" target=\"_blank\">epoll_wait </a>函数的使用,这里我对官方的epoll_wait做了一个翻译。epoll_wait 会在三种情况下返回，停止阻塞。\r\n一个是被中断，一个是超时，一个是所有的描述字都得到了响应，也就是说，虽然epoll是为异步非阻塞i/o提供的解决方案，到底还是会有一定程度的阻塞的，只是不会为一个I/O阻塞，而是在监测所有的I/O的时候阻塞。\r\n\r\n[cpp]\r\n   if (e-&gt;events &amp; EPOLLIN) mask |= AE_READABLE;\r\n   if (e-&gt;events &amp; EPOLLOUT) mask |= AE_WRITABLE;\r\n   if (e-&gt;events &amp; EPOLLERR) mask |= AE_WRITABLE;\r\n   if (e-&gt;events &amp; EPOLLHUP) mask |= AE_WRITABLE;\r\n[/cpp]\r\n\r\n这里挺有意思的。就是判断什么情况下，i/o套字节可读，可写，原来EPOLLERR和EPOLLHUP也是可写的。','redis的事件调度器  epoll','','inherit','open','open','','354-revision-v1','','','2015-08-07 02:41:00','2015-08-07 02:41:00','',354,'http://unasm.com/2015/08/475/',0,'revision','',0),(355,1,'2015-07-02 12:53:21','2015-07-02 12:53:21','看源码的时候，看到了epoll部分，原来3.0都用了这个，挺好，正好最近研究epoll,就深入看了下代码，ae.c + ae_epoll.c 两个文件不到一千行代码，挺好。\r\n\r\n首先从aeMain函数开始\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n \r\n    eventLoop-&gt;stop = 0;\r\n \r\n    while (!eventLoop-&gt;stop) {\r\n \r\n        // 如果有需要在事件处理前执行的函数，那么运行它                                 \r\n        if (eventLoop-&gt;beforesleep != NULL)                                             \r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n                                                                                        \r\n        // 开始处理事件                                                                 \r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);                                      \r\n    }                                                                                   \r\n}\r\n[/cpp]\r\n\r\neventLoop 就是redis的事件调度器，可以看到这里就是一个死循环，只要stop不置位，就会不停循环。aeProcessEvents 处理epoll的响应事件。\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\nflags表示的是要处理的事件类型，其实一共是两种类型的事件，文件类型，事件类型，事件类型的事件是未来尚未发生的，文件类型的事件嘛，主要是I/O事件，再说，unix哲学里面，一切都是文件。\r\n\r\naeProcessEvents 第一个if判断无意义，略过，第二个if/else ,那一大块代码段，是用来设置事件时间的。if/else之后有这么一行,前面的十几二十行就是为了得到不同情况下的tvp参数，也就是最近的时间事件 到达时间。\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]','redis的事件调度器  epoll','','inherit','open','open','','354-revision-v1','','','2015-07-02 12:53:21','2015-07-02 12:53:21','',354,'http://unasm.sinaapp.com/?p=355',0,'revision','',0),(356,1,'2015-08-13 03:49:54','2015-08-13 03:49:54','这个可以视为 <a title=\"redis源码分析之网络通信和事件调度篇\" href=\"http://unasm.com/2015/08/464/\" target=\"_blank\">redis源码分析之网络通信和事件调度篇</a>  的下一篇,主要涉及 ae.c + ae_epoll.c 两个文件不到一千行代码，从redis.c的main调用aeMain开始。\n下面是aeMain 函数的全部代码。\n\n[cpp]\nvoid aeMain(aeEventLoop *eventLoop) {\n\n    eventLoop-&gt;stop = 0;\n\n    while (!eventLoop-&gt;stop) {\n\n        // 如果有需要在事件处理前执行的函数，那么运行它\n        if (eventLoop-&gt;beforesleep != NULL)\n            eventLoop-&gt;beforesleep(eventLoop);                                          \n\n        // 开始处理事件\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);\n    }\n}\n[/cpp]\n\neventLoop 是redis的事件调度器，可以看到这里就是一个死循环，只要 eventLoop-&gt;stop 不置位，就会不停循环，不断地处理事务，实际上，除了在benchmark之外，没有任何地方将stop置为1，也就是永远都不会触发stop = 1 的情况。aeProcessEvents 具体处理epoll的响应事件。 在全部代码里面grep了一下，尚未发现 eventLoop-&gt;beforesleep 可以被用到的时候，应该一直都是NULL的。\n\n下面是 aeProcessEvents的定义，flags表示要处理的事件类型，根据调用的时候的参数，可以看到是要处理全部的事件类型，也就是AE_ALL_EVENTS，\n\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\n\n这是AE_ALL_EVENTS的定义，可见对于redis来说，全部事件包括时间和文本的两种事件。\n\n[cpp]\n#define AE_ALL_EVENTS (AE_FILE_EVENTS|AE_TIME_EVENTS)\n[/cpp]\n\nunix哲学里面，一切都是文件。\n\n我们步入到aeProcessEvents中，看看在redis的主循环中，到底都做了那些事情。\n\naeProcessEvents 前两个 if/else ,42行代码，主要是为了得到下一次时间事件到来还有多久，设置tvp变量，由此决定文本事件的阻塞时间，正常来说，serverCron每1ms执行一次。作者的意图，就是在不耽误后台进程处理的情况下，阻塞尽可能长的事件，获取尽可能多的响应，增大处理的效率。\n\n之后来到这一行,将得到的tvp变量和事件调度器传递给epoll处理函数，获取tvp事件内响应的全部套字节列表。epoll观察着全部的I/O变化。\n\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\n\n这个就是整个事件处理器的最最核心的一句，<a title=\"epoll_wait 详解\" href=\"http://unasm.com/2015/07/335/\">epoll_wait</a> ，获取tvp的时间内，注册在state-&gt;epfd上的全部响应套字节，保存在state-&gt;events中，并返回数量，保存在变量retval中。\n\n[cpp]\nretval = epoll_wait(state-&gt;epfd,state-&gt;events,eventLoop-&gt;setsize, tvp ? (tvp-&gt;tv_sec*1000 + tvp-&gt;tv_usec/1000) : -1);\n[/cpp]\n\n很经典的设计模式，观察者模式。“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\n\nstate-&gt;events中是socket描述字的列表，后面需要后续处理，调用当初注册在对应对象列表上的函数，“做出相应反应”。\n\n[cpp]\n\n for (j = 0; j &lt; numevents; j++) {\n// 从已就绪数组中获取事件\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\n\n            int mask = eventLoop-&gt;fired[j].mask;\n            int fd = eventLoop-&gt;fired[j].fd;\n            int rfired = 0;\n\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\n             * event removed an element that fired and we still didn\'t\n             * processed, so we check if the event is still valid. */\n            // 读事件\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\n                // rfired 确保读/写事件只能执行其中一个\n                rfired = 1;\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\n            }\n            // 写事件\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\n            }\n\n            processed++;\n }\n[/cpp]\n\n响应之后对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\n\n读响应的后续处理函数，函数指针 rfileProc 主要是 acceptTcpHandler和 acceptUnixHandler ，如果想看具体如何处理socket的响应，可以追踪进去。\n\n而写的后续响应函数 ，保存在函数指针wfileProc中的，<span class=\"s1\">sendReplyToClie</span><span class=\"s2\">n</span><span class=\"s1\">t ，将回复用户的查询内容的，当时并不真正写，而是首先注册到epoll里面，集中处理。</span>\n\n当然，要回复客户端内容，并不是真的一定需要进入事件循环的，可以 使用 <span class=\"s1\">flushSl</span><span class=\"s2\">a</span><span class=\"s1\">vesOutputBuffers，立刻做出响应。</span>\n\n[cpp]\nif (flags &amp; AE_TIME_EVENTS) processed += processTimeEvents(eventLoop);\n[/cpp]\n\n因为已经阻塞了tvp的时间，所以processTimeEvents中肯定是有内容需要处理的。也就是开始执行serverCron，执行redis的后台进程。\n\n关于serverCron的解析，欢迎查看 <a title=\"serverCron解析\" href=\"http://unasm.com/2015/07/394/\">http://unasm.com/2015/07/394/</a>','redis 源码分析之事件调度器 epoll','','inherit','open','open','','354-autosave-v1','','','2015-08-13 03:49:54','2015-08-13 03:49:54','',354,'http://unasm.sinaapp.com/?p=356',0,'revision','',0),(357,1,'2015-07-02 13:22:19','2015-07-02 13:22:19','看源码的时候，看到了epoll部分，原来3.0都用了这个，挺好，正好最近研究epoll,就深入看了下代码，ae.c + ae_epoll.c 两个文件不到一千行代码，挺好。\r\n\r\n首先从aeMain函数开始\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n \r\n    eventLoop-&gt;stop = 0;\r\n \r\n    while (!eventLoop-&gt;stop) {\r\n \r\n        // 如果有需要在事件处理前执行的函数，那么运行它                                 \r\n        if (eventLoop-&gt;beforesleep != NULL)                                             \r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n                                                                                        \r\n        // 开始处理事件                                                                 \r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);                                      \r\n    }                                                                                   \r\n}\r\n[/cpp]\r\n\r\neventLoop 就是redis的事件调度器，可以看到这里就是一个死循环，只要stop不置位，就会不停循环。aeProcessEvents 处理epoll的响应事件。\r\n\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\n\r\nflags表示的是要处理的事件类型，其实一共是两种类型的事件，文件类型，事件类型，事件类型的事件是未来尚未发生的，文件类型的事件嘛，主要是I/O事件，再说，unix哲学里面，一切都是文件。\r\n\r\naeProcessEvents 第一个if判断无意义，略过，第二个if/else ,那一大块代码段，是用来设置事件时间的。if/else之后有这么一行,前面的十几二十行就是为了得到不同情况下的tvp参数，也就是最近的时间事件 到达时间。\r\n\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\r\n\r\naeApiPoll 返回了当前已经可读可处理的事件列表 eventLoop-&gt;fired ，以及numevents数量。\r\n后面接着的for循环，就是对已经响应的事件进行处理。这里其实存在一个很经典的设计模式，观察者模式。\r\n“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\r\n文件描述字发生变化，通知对应的调度器，调度器调用预先注册好的函数处理，调度器通过epoll观察着全部的I/O变化。\r\n之前说了，一共其实只有两种事件，一个文件事件，一个时间事件，对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\r\n这里逻辑很简单，就是找对应的处理函数，然后把参数什么的传递给他们处理。挺适合goroutine的，直接开协程处理，哈哈。\r\n\r\n[cpp]\r\n for (j = 0; j &lt; numevents; j++) {\r\n            // 从已就绪数组中获取事件\r\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\r\n            \r\n            int mask = eventLoop-&gt;fired[j].mask;\r\n            int fd = eventLoop-&gt;fired[j].fd;\r\n            int rfired = 0;\r\n            \r\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\r\n             * event removed an element that fired and we still didn\'t\r\n             * processed, so we check if the event is still valid. */\r\n            // 读事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\r\n                // rfired 确保读/写事件只能执行其中一个\r\n                rfired = 1;\r\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            // 写事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\r\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\r\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            \r\n            processed++;\r\n }                                 \r\n[/cpp]\r\n\r\n回头接着说aeApiPoll 函数。逻辑也很简单，主要是对<a title=\"epoll_wait\" href=\"http://unasm.sinaapp.com/?p=335\" target=\"_blank\">epoll_wait </a>函数的使用,这里我对官方的epoll_wait做了一个翻译。\r\n[cpp]\r\n   if (e-&gt;events &amp; EPOLLIN) mask |= AE_READABLE;\r\n   if (e-&gt;events &amp; EPOLLOUT) mask |= AE_WRITABLE;\r\n   if (e-&gt;events &amp; EPOLLERR) mask |= AE_WRITABLE;\r\n   if (e-&gt;events &amp; EPOLLHUP) mask |= AE_WRITABLE;\r\n[/cpp]\r\n这里挺有意思的。就是判断什么情况下，i/o套字节可读，可写，原来EPOLLERR和EPOLLHUP也是可写的。','redis的事件调度器  epoll','','inherit','open','open','','354-revision-v1','','','2015-07-02 13:22:19','2015-07-02 13:22:19','',354,'http://unasm.sinaapp.com/?p=357',0,'revision','',0),(358,1,'2015-07-03 07:20:19','2015-07-03 07:20:19','看源码的时候，看到了epoll部分，原来3.0都用了这个，挺好，正好最近研究epoll,就深入看了下代码，ae.c + ae_epoll.c 两个文件不到一千行代码，挺好。\r\n\r\n首先从aeMain函数开始\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n \r\n    eventLoop-&gt;stop = 0;\r\n \r\n    while (!eventLoop-&gt;stop) {\r\n \r\n        // 如果有需要在事件处理前执行的函数，那么运行它                                 \r\n        if (eventLoop-&gt;beforesleep != NULL)                                             \r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n                                                                                        \r\n        // 开始处理事件                                                                 \r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);                                      \r\n    }                                                                                   \r\n}\r\n[/cpp]\r\n\r\neventLoop 就是redis的事件调度器，可以看到这里就是一个死循环，只要stop不置位，就会不停循环。aeProcessEvents 处理epoll的响应事件。\r\n\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\n\r\nflags表示的是要处理的事件类型，其实一共是两种类型的事件，文件类型，事件类型，事件类型的事件是未来尚未发生的，文件类型的事件嘛，主要是I/O事件，再说，unix哲学里面，一切都是文件。\r\n\r\naeProcessEvents 第一个if判断无意义，略过，第二个if/else ,那一大块代码段，是用来设置事件时间的。if/else之后有这么一行,前面的十几二十行就是为了得到不同情况下的tvp参数，也就是最近的时间事件 到达时间。\r\n\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\r\n\r\naeApiPoll 返回了当前已经可读可处理的事件列表 eventLoop-&gt;fired ，以及numevents数量。\r\n后面接着的for循环，就是对已经响应的事件进行处理。这里其实存在一个很经典的设计模式，观察者模式。\r\n“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\r\n文件描述字发生变化，通知对应的调度器，调度器调用预先注册好的函数处理，调度器通过epoll观察着全部的I/O变化。\r\n之前说了，一共其实只有两种事件，一个文件事件，一个时间事件，对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\r\n这里逻辑很简单，就是找对应的处理函数，然后把参数什么的传递给他们处理。挺适合goroutine的，直接开协程处理，哈哈。\r\n\r\n[cpp]\r\n for (j = 0; j &lt; numevents; j++) {\r\n            // 从已就绪数组中获取事件\r\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\r\n            \r\n            int mask = eventLoop-&gt;fired[j].mask;\r\n            int fd = eventLoop-&gt;fired[j].fd;\r\n            int rfired = 0;\r\n            \r\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\r\n             * event removed an element that fired and we still didn\'t\r\n             * processed, so we check if the event is still valid. */\r\n            // 读事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\r\n                // rfired 确保读/写事件只能执行其中一个\r\n                rfired = 1;\r\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            // 写事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\r\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\r\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            \r\n            processed++;\r\n }                                 \r\n[/cpp]\r\n\r\n回头接着说aeApiPoll 函数。逻辑也很简单，主要是对<a title=\"epoll_wait\" href=\"http://unasm.sinaapp.com/?p=335\" target=\"_blank\">epoll_wait </a>函数的使用,这里我对官方的epoll_wait做了一个翻译。epoll_wait 会在三种情况下返回，停止阻塞。\r\n一个是被中断，一个是超时，一个是所有的描述字都得到了响应，也就是说，虽然epoll是为异步非阻塞i/o提供的解决方案，到底还是会有一定程度的阻塞的，只是不会为一个I/O阻塞，而是在监测所有的I/O的时候阻塞。\r\n[cpp]\r\n   if (e-&gt;events &amp; EPOLLIN) mask |= AE_READABLE;\r\n   if (e-&gt;events &amp; EPOLLOUT) mask |= AE_WRITABLE;\r\n   if (e-&gt;events &amp; EPOLLERR) mask |= AE_WRITABLE;\r\n   if (e-&gt;events &amp; EPOLLHUP) mask |= AE_WRITABLE;\r\n[/cpp]\r\n这里挺有意思的。就是判断什么情况下，i/o套字节可读，可写，原来EPOLLERR和EPOLLHUP也是可写的。','redis的事件调度器  epoll','','inherit','open','open','','354-revision-v1','','','2015-07-03 07:20:19','2015-07-03 07:20:19','',354,'http://unasm.sinaapp.com/?p=358',0,'revision','',0),(642,1,'2016-10-30 16:43:40','2016-10-30 16:43:40','必须反思下自己了，自己活的有点太过于独善其身了，认真工作，好好学习，就没有了。\r\n\r\n如果想取得一些社会意义上的成功，肯定是需要社会上的各种资源的，单纯的工作，不会带来意料之外的机会，而是互相交流才会有机会和想法。人需要埋头的执行，同时也需要各种灵感和想法。\r\n\r\n还有跟各种朋友聊天的时候，只是谈风论月怎么可以，应该追求的是各种合作和共赢，寻求的是机会，手里的筹码慢慢多了起来。尝试着去用他们，然后创造更大的价值。\r\n\r\n合作和共赢，自己很少思考这些，每次聊天的人身上可能带来什么机会，有没有合作投资的空间，折腾的话，有什么途径跟方法。','反思','','publish','open','open','','%e5%8f%8d%e6%80%9d','','','2016-10-30 16:43:40','2016-10-30 16:43:40','',0,'http://unasm.com/?p=642',0,'post','',0),(361,1,'2015-07-09 13:49:52','2015-07-09 13:49:52','被水军攻击是从7月5日0点43分（最早的帖子）开始的，就是周日的晚上，我是第二天早上知道的，平时就有水军在不停的灌，也不是太在意，下午的时候，监控的人说实在太多了，封不尽删不完，已经处于放弃治疗的状态，但是在休假，电脑也不在身边，有心无力，好几个月了，我只请一天假，攻击就在我请假的时候发动了,有点隆美尔的感觉。\r\n\r\n周二刚下火车，来到公司，就开始梳理。实际上，新接手论坛才一两个星期，还要兼顾娱乐频道，代码又丑又乱，对发帖的流程只是大概清楚,虽然自己是技术，负责这个，实际上，也是头大。\r\n\r\n先和老大沟通，问具体的情况，了解多少账号，了解发了多少帖子，各个频道的编辑在应对的时候都是怎么做的，请教了可能的应对的方案，然后和监控谈谈，听监控说说概括，看监控有什么主意，然后和各个频道（育儿，星座，科技）谈谈，听他们认为什么方案行之有效，然后连系统，看写入速度，看垃圾用户发帖量，看sso，用户来源，估了下总量。问了一圈，代码层面还是没有什么进展，对如何解决多少有了点谱。\r\n\r\n因为了解到主要是有两三千个账号在灌垃圾，只要限制每个账号的每天发帖量，就会极大程度的减小垃圾的量，我依稀记得论坛里面好像是有这个限制的，只是不知道为什么失效了，从数据库里面select 数据来看，有一个垃圾账号一天发了两千多，和监控以及老大碰了下，决定先上这个，然后就是在那堆恶心的代码里面，根据寥寥可数的注释，变量的命名以及从逻辑上连蒙带猜，找到了疑似发帖限制的，我开始以为是时间太久了，mc 挂了，所以导致了限制无效，就不断向就去排查mc 的情况，mc是对的，从最上层一直追查到new Memcache,发现mc是没有问题的。带着失望回头看，无意中发现之前设置的mc的值失效了，这点很神奇，理论上应该是一天后才失效的才对，一行行扫，发现是set的时候，没有指定失效的时间，追查的框架的最底层，也没有发现一个默认的时间，“低级错误...........”，一阵恶心略过心头，加上失效时间之后，测试，发现可以了，赶快上线，略出一口气，应该不会再被大规模灌了，虽然不知道全量垃圾用户多少。\r\n\r\n之后要加图片验证码，实际上，我都没有在论坛见过验证码这东西，只是凭借着相信肯定有这么一个东西，就在代码里面扒，看来看去，觉得有一个$secodecheck 的变量，好像是控制这个的开关，有一段代码，看起来像是生成验证码的，但是discuz恶心的地方就是一个.php文件，可以被各种url，以各种不同的参数访问进来，完全不知道怎么让程序运行到这段疑似代码，同一个变量，被穿插在700行没有函数隔离的代码中，在不同地方以各种不同的条件设置置位，不知道为什么这么做，没个解释，有些变量，来自include的子文件，有些变量是全局的，request,get,cookie中的变量也被提出来成为php的变量，变量之间互相污染，防不胜防，后来听说军事论坛有图片验证码，赶快拿来url看看，总算看着url中最初的变量，以及连蒙带猜，加上几分运气经验，在下班前将图片验证码上线了，防住了水军的继续灌。上面的这些事情加起来就消耗了一天的时间。\r\n\r\n之后开始按照频道的要求开始清除这段时间的垃圾内容，我开始以为会很简单，但是却花了整整一天。因为对论坛删除帖子的过程不是很清楚，中间到底涉及多少数据表，行，字段的修改，有没有队列机制，如何清除缓存，文件等等。不怎么敢直接走脚本修改删除数据库，也不愿意冒修改主库的风险，取舍排查之后，决定走http请求，从数据库里面通过select 得到要清理的帖子id，然后根据id走http请求删除，风险小，容易控制，恢复，排查异常，当然，http的问题是慢，所以后来我开了20个php进程删。从数据库里面select得到 id，两个板块，大概有130w数据要删，还有4w多的异常数据，也要清理，这个是删除的过程中发现的。\r\n\r\n删本身难度不大，但是却有风险，我写了脚本，跑着，跑着，然后在屏幕上监测各种输出，还有不断的刷页面，看结果，是不是符合预期，有没有删错，速度如何，很快发现了清理不了的异常数据，到现在也不是很清楚这些数据的来源，我没有论坛的操作日志，为了删除这些，我还是仔细的读了一遍删除过程的代码，以及论坛获取正常帖子的代码，研究了数据的特征，分析了数据量，4w条，我开始以为是因为删除过程中没有加事务，在代码执行中的异常以及不回滚导致的数据的不完整。把问题推给异常总是这么的顺理成章。但是通过分析删除的输出日志以及结果数据的现状，还有未修改数据对比综合来推测，实际上，应该不是异常导致的，而是本来就是这样，为什么会这样，不知道，但是和我修改没关系，为了删除他们，我又写了一个脚本，连接主库，修改记录，把这些异常的修正成正常的，记录下id，然后走http接口，删了他们。\r\n\r\n连接主库，然后修改数据是让人提心吊胆的事情。http错了再多，也就是几十上百条数据的事情，但是连接主库，一个不小心就可能清库，修改完之后，我开了20个php进程，看了下数据库平台显示的主从同步的压力，黄色，处于有压力，但是还能接受的地步。看着屏幕上疯狂的输出，惬意的喝杯水，有点得意，享受着跑数据过程中的宁静，然后，噩梦就在几分钟之后开始了。\r\n\r\n正在清理的板块，没有数据了，空了，空了，空了，在我刚刚修改主库之后，在我疯狂删除的时候，一阵电流经过身体，各种清库的传说略过心头。欲哭无泪，赶紧连接数据库，select之后，发现数据还在，从库不可信，连主库，发现主库也没挂，数据也还在，心中稍定，总算不用再半夜里打电话给DBA求恢复数据。我肯定没有修改线上的代码，虽然修改了几次测试机的代码，代码没动，数据还爱，推测是缓存问题，也可能是有编辑修改了论坛数据，都有可能，排查，再次排查，一天内第几次追查数据了，着重看缓存问题，追查到是因为subforums + forum[\'threads\'] = 0 导致的。subforums来自缓存，全局变量$_DCACHE，而$_DCACHE中没有有subforums 的信息，推测是因为什么导致subforums缺失，不断追查$_DCACHE来源，发现的确是来自文件缓存，数据源是forum_cache，一阵雀跃，以为找到了问题，然而并不是，并没有编辑在凌晨的时候去修改论坛的结构，forum_cache表里面数据正确 ，subforums 的确没有，这是一个错误，但是不是导致这个问题的错误，回头看forum 变量，一番追查，发现是因为自己不断的删除数据，forum[\'threads\'] 不断减一，而forum[\'threads\'] 并没有真正反映数据库帖子量的大小，数据一致性的问题，修改forum[\'threads\']成正确的值，然后就可以了。\r\n\r\n再次开动脚本，开始删数据，然后不断检查状况，一切正常，正常，正常，然后就删完了，','记一次线上被灌水攻击','','publish','open','open','','%e8%ae%b0%e4%b8%80%e6%ac%a1%e7%ba%bf%e4%b8%8a%e8%a2%ab%e7%81%8c%e6%b0%b4%e6%94%bb%e5%87%bb','','','2015-07-09 13:49:52','2015-07-09 13:49:52','',0,'http://unasm.sinaapp.com/?p=361',0,'post','',0),(362,1,'2015-07-09 13:49:52','2015-07-09 13:49:52','被水军攻击是从7月5日0点43分（最早的帖子）开始的，就是周日的晚上，我是第二天早上知道的，平时就有水军在不停的灌，也不是太在意，下午的时候，监控的人说实在太多了，封不尽删不完，已经处于放弃治疗的状态，但是在休假，电脑也不在身边，有心无力，好几个月了，我只请一天假，攻击就在我请假的时候发动了,有点隆美尔的感觉。\r\n\r\n周二刚下火车，来到公司，就开始梳理。实际上，新接手论坛才一两个星期，还要兼顾娱乐频道，代码又丑又乱，对发帖的流程只是大概清楚,虽然自己是技术，负责这个，实际上，也是头大。\r\n\r\n先和老大沟通，问具体的情况，了解多少账号，了解发了多少帖子，各个频道的编辑在应对的时候都是怎么做的，请教了可能的应对的方案，然后和监控谈谈，听监控说说概括，看监控有什么主意，然后和各个频道（育儿，星座，科技）谈谈，听他们认为什么方案行之有效，然后连系统，看写入速度，看垃圾用户发帖量，看sso，用户来源，估了下总量。问了一圈，代码层面还是没有什么进展，对如何解决多少有了点谱。\r\n\r\n因为了解到主要是有两三千个账号在灌垃圾，只要限制每个账号的每天发帖量，就会极大程度的减小垃圾的量，我依稀记得论坛里面好像是有这个限制的，只是不知道为什么失效了，从数据库里面select 数据来看，有一个垃圾账号一天发了两千多，和监控以及老大碰了下，决定先上这个，然后就是在那堆恶心的代码里面，根据寥寥可数的注释，变量的命名以及从逻辑上连蒙带猜，找到了疑似发帖限制的，我开始以为是时间太久了，mc 挂了，所以导致了限制无效，就不断向就去排查mc 的情况，mc是对的，从最上层一直追查到new Memcache,发现mc是没有问题的。带着失望回头看，无意中发现之前设置的mc的值失效了，这点很神奇，理论上应该是一天后才失效的才对，一行行扫，发现是set的时候，没有指定失效的时间，追查的框架的最底层，也没有发现一个默认的时间，“低级错误...........”，一阵恶心略过心头，加上失效时间之后，测试，发现可以了，赶快上线，略出一口气，应该不会再被大规模灌了，虽然不知道全量垃圾用户多少。\r\n\r\n之后要加图片验证码，实际上，我都没有在论坛见过验证码这东西，只是凭借着相信肯定有这么一个东西，就在代码里面扒，看来看去，觉得有一个$secodecheck 的变量，好像是控制这个的开关，有一段代码，看起来像是生成验证码的，但是discuz恶心的地方就是一个.php文件，可以被各种url，以各种不同的参数访问进来，完全不知道怎么让程序运行到这段疑似代码，同一个变量，被穿插在700行没有函数隔离的代码中，在不同地方以各种不同的条件设置置位，不知道为什么这么做，没个解释，有些变量，来自include的子文件，有些变量是全局的，request,get,cookie中的变量也被提出来成为php的变量，变量之间互相污染，防不胜防，后来听说军事论坛有图片验证码，赶快拿来url看看，总算看着url中最初的变量，以及连蒙带猜，加上几分运气经验，在下班前将图片验证码上线了，防住了水军的继续灌。上面的这些事情加起来就消耗了一天的时间。\r\n\r\n之后开始按照频道的要求开始清除这段时间的垃圾内容，我开始以为会很简单，但是却花了整整一天。因为对论坛删除帖子的过程不是很清楚，中间到底涉及多少数据表，行，字段的修改，有没有队列机制，如何清除缓存，文件等等。不怎么敢直接走脚本修改删除数据库，也不愿意冒修改主库的风险，取舍排查之后，决定走http请求，从数据库里面通过select 得到要清理的帖子id，然后根据id走http请求删除，风险小，容易控制，恢复，排查异常，当然，http的问题是慢，所以后来我开了20个php进程删。从数据库里面select得到 id，两个板块，大概有130w数据要删，还有4w多的异常数据，也要清理，这个是删除的过程中发现的。\r\n\r\n删本身难度不大，但是却有风险，我写了脚本，跑着，跑着，然后在屏幕上监测各种输出，还有不断的刷页面，看结果，是不是符合预期，有没有删错，速度如何，很快发现了清理不了的异常数据，到现在也不是很清楚这些数据的来源，我没有论坛的操作日志，为了删除这些，我还是仔细的读了一遍删除过程的代码，以及论坛获取正常帖子的代码，研究了数据的特征，分析了数据量，4w条，我开始以为是因为删除过程中没有加事务，在代码执行中的异常以及不回滚导致的数据的不完整。把问题推给异常总是这么的顺理成章。但是通过分析删除的输出日志以及结果数据的现状，还有未修改数据对比综合来推测，实际上，应该不是异常导致的，而是本来就是这样，为什么会这样，不知道，但是和我修改没关系，为了删除他们，我又写了一个脚本，连接主库，修改记录，把这些异常的修正成正常的，记录下id，然后走http接口，删了他们。\r\n\r\n连接主库，然后修改数据是让人提心吊胆的事情。http错了再多，也就是几十上百条数据的事情，但是连接主库，一个不小心就可能清库，修改完之后，我开了20个php进程，看了下数据库平台显示的主从同步的压力，黄色，处于有压力，但是还能接受的地步。看着屏幕上疯狂的输出，惬意的喝杯水，有点得意，享受着跑数据过程中的宁静，然后，噩梦就在几分钟之后开始了。\r\n\r\n正在清理的板块，没有数据了，空了，空了，空了，在我刚刚修改主库之后，在我疯狂删除的时候，一阵电流经过身体，各种清库的传说略过心头。欲哭无泪，赶紧连接数据库，select之后，发现数据还在，从库不可信，连主库，发现主库也没挂，数据也还在，心中稍定，总算不用再半夜里打电话给DBA求恢复数据。我肯定没有修改线上的代码，虽然修改了几次测试机的代码，代码没动，数据还爱，推测是缓存问题，也可能是有编辑修改了论坛数据，都有可能，排查，再次排查，一天内第几次追查数据了，着重看缓存问题，追查到是因为subforums + forum[\'threads\'] = 0 导致的。subforums来自缓存，全局变量$_DCACHE，而$_DCACHE中没有有subforums 的信息，推测是因为什么导致subforums缺失，不断追查$_DCACHE来源，发现的确是来自文件缓存，数据源是forum_cache，一阵雀跃，以为找到了问题，然而并不是，并没有编辑在凌晨的时候去修改论坛的结构，forum_cache表里面数据正确 ，subforums 的确没有，这是一个错误，但是不是导致这个问题的错误，回头看forum 变量，一番追查，发现是因为自己不断的删除数据，forum[\'threads\'] 不断减一，而forum[\'threads\'] 并没有真正反映数据库帖子量的大小，数据一致性的问题，修改forum[\'threads\']成正确的值，然后就可以了。\r\n\r\n再次开动脚本，开始删数据，然后不断检查状况，一切正常，正常，正常，然后就删完了，','记一次线上被灌水攻击','','inherit','open','open','','361-revision-v1','','','2015-07-09 13:49:52','2015-07-09 13:49:52','',361,'http://unasm.sinaapp.com/?p=362',0,'revision','',0),(363,1,'2015-07-10 08:52:53','2015-07-10 08:52:53','本次灌水清理一共删除 1313003条垃圾数据，数据一共来自 2945个垃圾账号，其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com结束，共发帖107131个，其中删除92162个\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他ip如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n','灌水攻击回顾分析','','publish','open','open','','%e7%81%8c%e6%b0%b4%e6%94%bb%e5%87%bb%e7%9a%84%e5%88%86%e6%9e%90%e5%9b%9e%e9%a1%be','','','2015-07-12 00:32:11','2015-07-12 00:32:11','',0,'http://unasm.sinaapp.com/?p=363',0,'post','',0),(364,1,'2015-07-10 08:52:53','2015-07-10 08:52:53','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始与 2015-07-06 00:05左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1                                                                        \r\nvofzujqovnup    1                                                                        \r\nhvcaygscmrzo    1                                                                        \r\nbamplkltkjck    1                                                                        \r\nobsuukxdugli    1                                                                        \r\nlwelbcflixvk    1                                                                        \r\nmvujvixbwjoy    1                                                                        \r\nrpvxvphhjvzd    1            \r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号是</p>\r\n<p class=\"p1\"></p>','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-10 08:52:53','2015-07-10 08:52:53','',363,'http://unasm.sinaapp.com/?p=364',0,'revision','',0),(365,1,'2015-07-11 14:23:23','2015-07-11 14:23:23','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 2945个账号，开始于 2015-07-05 00点左右\n\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\n\n[php]\nhtizroxrpyyr    1\nvofzujqovnup    1\nhvcaygscmrzo    1\nbamplkltkjck    1\nobsuukxdugli    1\nlwelbcflixvk    1\nmvujvixbwjoy    1\nrpvxvphhjvzd    1\n[/php]\n\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\n\n\n[php]\neyi1988910@163.com 5                                            \nubo77920@163.com  5\nuangqihah@163.com  5\nylujinli@163.com   5\nushijiecf1739@mailnesia.com    95\nshenziyinxc275@mailnesia.com    95\nshentingfangvy97@mailnesia.com  95\n[/php]\n\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\n\n\n[php]\nlgwwwk@mailnesia.com	1\ncrdbkhnet99731	1\nhdndh468	1\nnzjpr408	1\ndvtrz888	1\noouci040	1\nfrpdx066	1\nvbjlp468	1\nhdoryynwg79333	1\nabwnn	1\nwww52088    2\ndsgfds3443  2\nfgjgfhdfg   2\njfgyhr  3\n[/php]\n\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\n\n[php]\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\n[/php]\n\n\n[php]\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\n[/php]\n\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\n\n[php]\n106.46.242.147  109  \n122.232.41.223  274  \n43.240.57.86    379  \n111.183.163.22  862  \n113.27.20.210   901  \n43.240.57.90    925  \n106.46.243.46   1177 \n106.46.242.133  2013 \n171.83.82.246   2146 \n123.151.191.19  3580 \n43.240.57.95    3994 \n125.39.18.99    5726 \n60.220.213.153  6035 \n221.233.217.14  9625 \n60.223.221.21   20226\n112.90.236.50   154850\n125.39.18.103   375653\n43.240.57.91    733533\n[/php]\n\n从注册ip上来看，1943个没有注册ip，其他人的如下\n[php]\n125.39.18.99    1    \n60.223.221.21   1\n61.136.153.198  1\n58.53.99.150    1    \n112.90.236.50   1\n43.240.57.91    2    \n124.228.28.195  3\n[/php]\n从注册时间上来看，\n<ol>\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\n</ol>\n\n\n\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\n[php]\n111.179.41.115	1\n61.184.226.162	1\n222.209.250.86	1\n171.40.68.99	1\n60.14.239.210	1\n202.114.224.27	1\n117.9.248.195	1\n61.136.153.198	1\n111.180.105.118	2\n60.172.246.104	4\n122.13.141.82	10\n113.98.76.109	11\n171.83.82.246	13\n113.57.244.58	18\n113.57.191.44	26\n113.57.182.75	29\n113.57.191.76	32\n60.172.229.142	48\n183.10.119.133	112\n59.172.196.28	149\n171.113.191.104	513\n[/php]\n\n这是第二类用户的注册时间,\n<ol>\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\n	<li>7月7号，共注册四个账号,详情如下</li>\n</ol>\n\n[php]\n2015-07-07 00:43:18\n2015-07-07 01:26:43\n2015-07-07 02:00:16\n2015-07-07 07:55:12\n[/php]\n\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\n\n[php]\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\n\n雷少专用&lt;/pre&gt;\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\n&lt;pre&gt;\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\n[/php]\n\n\n[php]\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\n\n雷少专用\n\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\n[/php]\n','灌水攻击的分析回顾','','inherit','open','open','','363-autosave-v1','','','2015-07-11 14:23:23','2015-07-11 14:23:23','',363,'http://unasm.sinaapp.com/?p=365',0,'revision','',0),(371,1,'2015-07-10 10:52:37','2015-07-10 10:52:37','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n对第二类用户展开分析，先从ip入手,这个是他们注册的时候使用的ip,结果如下，几乎可以肯定171.113.191.104 就是这次攻击的背后隐藏着ip了\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n\r\n这是第二类用户的注册时间\r\n[php]\r\n2015-07-06 00:11:47\r\n2015-07-05 23:51:48\r\n2015-07-06 05:10:37\r\n2015-07-06 00:13:08\r\n2015-07-06 00:13:37\r\n2015-07-06 05:09:06\r\n2015-07-06 00:15:02\r\n2015-07-06 00:15:27\r\n2015-07-06 00:15:35\r\n2015-07-06 00:35:50\r\n2015-07-06 00:20:18\r\n2015-07-06 05:10:36\r\n2015-07-06 03:43:50\r\n[/php]\r\n','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-10 10:52:37','2015-07-10 10:52:37','',363,'http://unasm.sinaapp.com/?p=371',0,'revision','',0),(367,1,'2015-07-10 09:25:37','2015-07-10 09:25:37','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,这些账号发帖107131个，其中删除92162个 ，还有 14969个未删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-10 09:25:37','2015-07-10 09:25:37','',363,'http://unasm.sinaapp.com/?p=367',0,'revision','',0),(370,1,'2015-07-10 09:39:02','2015-07-10 09:39:02','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-10 09:39:02','2015-07-10 09:39:02','',363,'http://unasm.sinaapp.com/?p=370',0,'revision','',0),(369,1,'2015-07-10 09:29:58','2015-07-10 09:29:58','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\nshishuyiyb85395@mailnesia.com   95\r\nsangsixuenq3084@mailnesia.com   95\r\nshenshijiecf395@mailnesia.com   95\r\nshazhongcf6317@mailnesia.com    95\r\n[/php]\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-10 09:29:58','2015-07-10 09:29:58','',363,'http://unasm.sinaapp.com/?p=369',0,'revision','',0),(368,1,'2015-07-10 09:29:11','2015-07-10 09:29:11','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除(可能被其他途径删除了)</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\nshishuyiyb85395@mailnesia.com   95\r\nsangsixuenq3084@mailnesia.com   95\r\nshenshijiecf395@mailnesia.com   95\r\nshazhongcf6317@mailnesia.com    95\r\n[/php]\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-10 09:29:11','2015-07-10 09:29:11','',363,'http://unasm.sinaapp.com/?p=368',0,'revision','',0),(366,1,'2015-07-10 09:21:57','2015-07-10 09:21:57','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,这些账号发帖107131个，其中删除92162个 ，还有 14969个未删除</p>\r\n<p class=\"p1\"></p>\r\n\r\n\r\n[php]\r\n\r\n&lt;span class=&quot;s1&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;eyi1988910@163.com 5 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                     &lt;/span&gt;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;s1&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ubo77920@163.com &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;5 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                      &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s4&quot;&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                   &lt;/span&gt;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;s1&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;www123456789 &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;5 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                          &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s4&quot;&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                   &lt;/span&gt;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;s1&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;uangqihah@163.com&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;5 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                      &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                   &lt;/span&gt;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;s1&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ylujinli@163.com &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;5 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                      &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s4&quot;&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                   &lt;/span&gt;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;s1&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;uangsilin110521@163.com&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;5 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                              &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s4&quot;&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                   &lt;/span&gt;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;s1&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;d2321040@163.com &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;6 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                   &lt;/span&gt;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;s5&quot;&gt;pwwwpqqq@163.com&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;6 &lt;/span&gt;\r\n\r\n[/php]\r\n\r\n<p class=\"p1\"></p>\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n<p class=\"p1\">\r\n[php]&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ww52088&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;2 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                       &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cxudb@mailnesia.com&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;2 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                           &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sgfds3443&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;2 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                       &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;gjgfhdfg &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;2 &lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                       &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fgyhr&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;3 &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fghasdfasd 4&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;ertsegdfgsdf&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;87&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;gdfser&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;86&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;lgwwwk@mailnesia.com 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;crdbkhnet99731 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;hdndh468 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;nzjpr408 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;dvtrz888 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;oouci040 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;frpdx066 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;vbjlp468 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;hdoryynwg79333 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;abwnn 1&lt;/span&gt;&lt;/p&gt;\r\n&lt;p class=&quot;p1&quot;&gt;[/php]\r\n</p>','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-10 09:21:57','2015-07-10 09:21:57','',363,'http://unasm.sinaapp.com/?p=366',0,'revision','',0),(372,1,'2015-07-11 08:37:41','2015-07-11 08:37:41','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n换个角度，从内容上分析，从所有的第一类用户发帖内容来看,所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，根据从页面上提供的用户uid在系统中搜索,发现攻击者是在每次发帖之后，都修改了自己的用户名，这个也是为什么之前得出“用户信息全部不存在”结论的原因，因为修改了名字，拿之前的名字找，自然没有。\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉 \r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n对第二类用户展开分析，先从ip入手,这个是他们注册的时候使用的ip,结果如下，几乎可以肯定171.113.191.104 就是这次攻击的背后隐藏着ip了\r\n\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，<code>于2015-07-05 23:59:53结束，共注册71个账号</code></li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册五个账号,详情如下</li>\r\n</ol>\r\n[php]\r\n2015-07-07 00:43:18                                                                                                                                           \r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的征文内容都是乱码\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用\r\n\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-11 08:37:41','2015-07-11 08:37:41','',363,'http://unasm.sinaapp.com/?p=372',0,'revision','',0),(373,1,'2015-07-11 08:40:22','2015-07-11 08:40:22','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n换个角度，从内容上分析，从所有的第一类用户发帖内容来看,所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，根据从页面上提供的用户uid在系统中搜索,发现攻击者是在每次发帖之后，都修改了自己的用户名，这个也是为什么之前得出“用户信息全部不存在”结论的原因，因为修改了名字，拿之前的名字找，自然没有。\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉 \r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n对第二类用户展开分析，先从ip入手,这个是他们注册的时候使用的ip,结果如下，几乎可以肯定171.113.191.104 就是这次攻击的背后隐藏着ip了\r\n\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，<code>于2015-07-05 23:59:53结束，共注册71个账号</code></li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册五个账号,详情如下</li>\r\n</ol>\r\n[php]\r\n2015-07-07 00:43:18                                                                                                                                           \r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用\r\n\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-11 08:40:22','2015-07-11 08:40:22','',363,'http://unasm.sinaapp.com/?p=373',0,'revision','',0),(374,1,'2015-07-11 10:05:54','2015-07-11 10:05:54','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n换个角度，从内容上分析，从所有的第一类用户发帖内容来看,所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，根据从页面上提供的用户uid在系统中搜索,发现攻击者是在每次发帖之后，都修改了自己的用户名，这个也是为什么之前得出“用户信息全部不存在”结论的原因，因为修改了名字，拿之前的名字找，自然没有。\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉 \r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n随机选择了7w 个用户名，得到对应的520个用户账号，这些账号在系统中共发帖合计413357，单个账号发帖量从239 到1336不等，危害极深，I have to say.\r\n从发帖ip上来看,全部共27个ip,43.240.57.91 几乎占据了全部的发帖量，单个人或者团伙所为。\r\n\r\n[php]\r\n42.49.255.3     92\r\n106.46.243.46   189 \r\n106.46.242.133  336 \r\n43.240.57.90    632 \r\n113.27.20.210   901 \r\n125.39.18.99    3446\r\n43.240.57.91    427608\r\n[/php]\r\n从注册ip上来看，517个没有注册ip，两个来自43.240.57.91，一个来自125.39.18.99 ，\r\n从注册时间上来看\r\n对第二类用户展开分析，先从ip入手,这个是他们注册的时候使用的ip,结果如下，几乎可以肯定171.113.191.104 就是这次攻击的背后隐藏着ip了\r\n\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n[php]\r\n2015-07-07 00:43:18                                                                                                                                           \r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用\r\n\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-11 10:05:54','2015-07-11 10:05:54','',363,'http://unasm.sinaapp.com/?p=374',0,'revision','',0),(377,1,'2015-07-11 10:36:51','2015-07-11 10:36:51','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n换个角度，从内容上分析，从所有的第一类用户发帖内容来看,所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，根据从页面上提供的用户uid在系统中搜索,发现攻击者是在每次发帖之后，都修改了自己的用户名，这个也是为什么之前得出“用户信息全部不存在”结论的原因，因为修改了名字，拿之前的名字找，自然没有。\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n随机选择了7w 个用户名，得到对应的520个用户账号，这些账号在系统中共发帖合计413357，单个账号发帖量从239 到1336不等，危害极深，I have to say.\r\n从发帖ip上来看,全部共27个ip,43.240.57.91 几乎占据了全部的发帖量，单个人或者团伙所为。\r\n\r\n[php]\r\n42.49.255.3     92\r\n106.46.243.46   189\r\n106.46.242.133  336\r\n43.240.57.90    632\r\n113.27.20.210   901\r\n125.39.18.99    3446\r\n43.240.57.91    427608\r\n[/php]\r\n\r\n从注册ip上来看，517个没有注册ip，两个来自43.240.57.91，也是发帖量最大的那个ip，一个来自125.39.18.99 ，\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 21:13:27 ，结束于 23:37:27，共注册账号24个，</li>\r\n	<li>7月6号，开始于00:08:50，结束于04:32:23，共注册账号496个</li>\r\n</ol>\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 独占鳌头\r\n\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-11 10:36:51','2015-07-11 10:36:51','',363,'http://unasm.sinaapp.com/?p=377',0,'revision','',0),(376,1,'2015-07-11 10:14:33','2015-07-11 10:14:33','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n换个角度，从内容上分析，从所有的第一类用户发帖内容来看,所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，根据从页面上提供的用户uid在系统中搜索,发现攻击者是在每次发帖之后，都修改了自己的用户名，这个也是为什么之前得出“用户信息全部不存在”结论的原因，因为修改了名字，拿之前的名字找，自然没有。\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n随机选择了7w 个用户名，得到对应的520个用户账号，这些账号在系统中共发帖合计413357，单个账号发帖量从239 到1336不等，危害极深，I have to say.\r\n从发帖ip上来看,全部共27个ip,43.240.57.91 几乎占据了全部的发帖量，单个人或者团伙所为。\r\n\r\n[php]\r\n42.49.255.3     92\r\n106.46.243.46   189\r\n106.46.242.133  336\r\n43.240.57.90    632\r\n113.27.20.210   901\r\n125.39.18.99    3446\r\n43.240.57.91    427608\r\n[/php]\r\n\r\n从注册ip上来看，517个没有注册ip，两个来自43.240.57.91，一个来自125.39.18.99 ，\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 21:13:27 ，结束于 23:37:27，共注册账号24个，</li>\r\n	<li>7月6号，开始于00:08:50，结束于04:32:23，共注册账号496个对第二类用户展开分析，先从ip入手,这个是他们注册的时候使用的ip,结果如下，几乎可以肯定171.113.191.104 就是这次攻击的背后隐藏着ip了</li>\r\n</ol>\r\n\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-11 10:14:33','2015-07-11 10:14:33','',363,'http://unasm.sinaapp.com/?p=376',0,'revision','',0),(375,1,'2015-07-11 10:09:43','2015-07-11 10:09:43','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                             \r\nubo77920@163.com  5\r\nuangqihah@163.com  5 \r\nylujinli@163.com   5 \r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3      \r\n[/php]\r\n\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n换个角度，从内容上分析，从所有的第一类用户发帖内容来看,所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，根据从页面上提供的用户uid在系统中搜索,发现攻击者是在每次发帖之后，都修改了自己的用户名，这个也是为什么之前得出“用户信息全部不存在”结论的原因，因为修改了名字，拿之前的名字找，自然没有。\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉 \r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n随机选择了7w 个用户名，得到对应的520个用户账号，这些账号在系统中共发帖合计413357，单个账号发帖量从239 到1336不等，危害极深，I have to say.\r\n从发帖ip上来看,全部共27个ip,43.240.57.91 几乎占据了全部的发帖量，单个人或者团伙所为。\r\n\r\n[php]\r\n42.49.255.3     92\r\n106.46.243.46   189 \r\n106.46.242.133  336 \r\n43.240.57.90    632 \r\n113.27.20.210   901 \r\n125.39.18.99    3446\r\n43.240.57.91    427608\r\n[/php]\r\n\r\n从注册ip上来看，517个没有注册ip，两个来自43.240.57.91，一个来自125.39.18.99 ，\r\n从注册时间上来看，</pre>\r\n<ol>\r\n	<li>7月5号，开始于 21:13:27 ，结束于 23:37:27，共注册账号24个，</li>\r\n	<li>7月6号，开始于00:08:50，结束于04:32:23，共注册账号496个\r\n\r\n对第二类用户展开分析，先从ip入手,这个是他们注册的时候使用的ip,结果如下，几乎可以肯定171.113.191.104 就是这次攻击的背后隐藏着ip了</li>\r\n</ol>\r\n\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18                                                                                                                                           \r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用\r\n\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-11 10:09:43','2015-07-11 10:09:43','',363,'http://unasm.sinaapp.com/?p=375',0,'revision','',0),(378,1,'2015-07-11 11:20:15','2015-07-11 11:20:15','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1040704个，全部由长度为12的英文字符构成，每个账号，只发一贴，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n换个角度，从内容上分析，从所有的第一类用户发帖内容来看,所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，根据从页面上提供的用户uid在系统中搜索,发现攻击者是在每次发帖之后，都修改了自己的用户名，这个也是为什么之前得出“用户信息全部不存在”结论的原因，因为修改了名字，拿之前的名字找，自然没有。\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n随机选择了7w 个用户名，得到对应的520个用户账号，这些账号在系统中共发帖合计413357，单个账号发帖量从239 到1336不等，危害极深，I have to say.\r\n从发帖ip上来看,全部共27个ip,43.240.57.91 几乎占据了全部的发帖量，单个人或者团伙所为。\r\n\r\n[php]\r\n42.49.255.3     92\r\n106.46.243.46   189\r\n106.46.242.133  336\r\n43.240.57.90    632\r\n113.27.20.210   901\r\n125.39.18.99    3446\r\n43.240.57.91    427608\r\n[/php]\r\n\r\n从注册ip上来看，517个没有注册ip，两个来自43.240.57.91，也是发帖量最大的那个ip，一个来自125.39.18.99 ，\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 21:13:27 ，结束于 23:37:27，共注册账号24个，</li>\r\n	<li>7月6号，开始于00:08:50，结束于04:32:23，共注册账号496个</li>\r\n</ol>\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 独占鳌头</pre>\r\n\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-11 11:20:15','2015-07-11 11:20:15','',363,'http://unasm.sinaapp.com/?p=378',0,'revision','',0),(388,1,'2015-07-11 17:04:39','2015-07-11 17:04:39','本次灌水清理一共删除 1313003条垃圾数据，数据一共来自 2945个垃圾账号，其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com结束，共发帖107131个，其中删除92162个\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他ip如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n','灌水攻击回顾分析','','inherit','open','open','','363-revision-v1','','','2015-07-11 17:04:39','2015-07-11 17:04:39','',363,'http://unasm.sinaapp.com/?p=388',0,'revision','',0),(387,1,'2015-07-11 14:35:53','2015-07-11 14:35:53','本次灌水清理一共删除 1313003条垃圾数据，数据一共来自 2945个垃圾账号，其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com结束，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他ip如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n','灌水攻击回顾分析','','inherit','open','open','','363-revision-v1','','','2015-07-11 14:35:53','2015-07-11 14:35:53','',363,'http://unasm.sinaapp.com/?p=387',0,'revision','',0),(380,1,'2015-07-11 14:22:20','2015-07-11 14:22:20','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 2945个账号，开始于 2015-07-05 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，全部账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他人的如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-11 14:22:20','2015-07-11 14:22:20','',363,'http://unasm.sinaapp.com/?p=380',0,'revision','',0),(379,1,'2015-07-11 14:05:16','2015-07-11 14:05:16','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 1041719个账号，开始于 2015-07-06 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出。\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的</p>\r\n\r\n\r\n[php]\r\ncangbi643030@163.com	1\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\nqcxudb@mailnesia.com    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类用户信息全部不存在，全部，好像是全部都被清理了一样，也好像是被入侵，黑客清理了尾巴。总之，没有。\r\n换个角度，从内容上分析，从所有的第一类用户发帖内容来看,所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，根据从页面上提供的用户uid在系统中搜索,发现攻击者是在每次发帖之后，都修改了自己的用户名，这个也是为什么之前得出“用户信息全部不存在”结论的原因，因为修改了名字，拿之前的名字找，自然没有。\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n随机选择了7w 个用户名，得到对应的520个用户账号，这些账号在系统中共发帖合计413357，单个账号发帖量从239 到1336不等，危害极深，I have to say.\r\n从发帖ip上来看,全部共27个ip,43.240.57.91 几乎占据了全部的发帖量，单个人或者团伙所为。\r\n\r\n[php]\r\n42.49.255.3     92\r\n106.46.243.46   189\r\n106.46.242.133  336\r\n43.240.57.90    632\r\n113.27.20.210   901\r\n125.39.18.99    3446\r\n43.240.57.91    427608\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他人的如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 独占鳌头</pre>\r\n\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-11 14:05:16','2015-07-11 14:05:16','',363,'http://unasm.sinaapp.com/?p=379',0,'revision','',0),(381,1,'2015-07-11 14:23:26','2015-07-11 14:23:26','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 2945个账号，开始于 2015-07-05 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他人的如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-11 14:23:26','2015-07-11 14:23:26','',363,'http://unasm.sinaapp.com/?p=381',0,'revision','',0),(382,1,'2015-07-11 14:24:02','2015-07-11 14:24:02','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 2945个账号，开始于 2015-07-05 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com结束，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他人的如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-11 14:24:02','2015-07-11 14:24:02','',363,'http://unasm.sinaapp.com/?p=382',0,'revision','',0),(383,1,'2015-07-11 14:25:14','2015-07-11 14:25:14','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 2945个账号，开始于 2015-07-05 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com结束，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他ip如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n','灌水攻击的分析回顾','','inherit','open','open','','363-revision-v1','','','2015-07-11 14:25:14','2015-07-11 14:25:14','',363,'http://unasm.sinaapp.com/?p=383',0,'revision','',0),(384,1,'2015-07-11 14:28:35','2015-07-11 14:28:35','本次灌水清理一共删除数据 1313003条垃圾数据，这些数据一共来自 2945个账号，开始于 2015-07-05 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com结束，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他ip如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n','灌水攻击回顾分析','','inherit','open','open','','363-revision-v1','','','2015-07-11 14:28:35','2015-07-11 14:28:35','',363,'http://unasm.sinaapp.com/?p=384',0,'revision','',0),(385,1,'2015-07-11 14:35:10','2015-07-11 14:35:10','本次灌水清理一共删除 1313003条垃圾数据，这些数据一共来自 2945个账号，开始于 2015-07-05 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com结束，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他ip如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n','灌水攻击回顾分析','','inherit','open','open','','363-revision-v1','','','2015-07-11 14:35:10','2015-07-11 14:35:10','',363,'http://unasm.sinaapp.com/?p=385',0,'revision','',0),(386,1,'2015-07-11 14:35:31','2015-07-11 14:35:31','本次灌水清理一共删除 1313003条垃圾数据，数据一共来自 2945个垃圾账号，开始于 2015-07-05 00点左右\r\n\r\n其中主要包含三类，第一类 账号 一共1950个，用户名全部由长度为12的英文字符构成，每个用户名，只发一贴，然后换用户名，是这次攻击的主力军，全部的130w数据中，100w多垃圾帖由该类账号发出，该类账号共发帖1321959，其中有110w在本次清理中清除。用户名特征如下\r\n\r\n[php]\r\nhtizroxrpyyr    1\r\nvofzujqovnup    1\r\nhvcaygscmrzo    1\r\nbamplkltkjck    1\r\nobsuukxdugli    1\r\nlwelbcflixvk    1\r\nmvujvixbwjoy    1\r\nrpvxvphhjvzd    1\r\n[/php]\r\n\r\n<p class=\"p1\">第二类账号共980个 单个账号发帖量在2-1600不等,几乎全部是163结尾的邮箱,少量账号以mailnesia.com结束，共发帖107131个，其中删除92162个 ，还有 14969个未在本次清理中删除</p>\r\n\r\n\r\n[php]\r\neyi1988910@163.com 5                                            \r\nubo77920@163.com  5\r\nuangqihah@163.com  5\r\nylujinli@163.com   5\r\nushijiecf1739@mailnesia.com    95\r\nshenziyinxc275@mailnesia.com    95\r\nshentingfangvy97@mailnesia.com  95\r\n[/php]\r\n\r\n<p class=\"p1\">第三类不多，只有十几个，其中可能存在一些被误删的用户，建议仔细排查发帖量为1或者2的用户，很可能是被误删的，全量用户名列表如下</p>\r\n\r\n\r\n[php]\r\nlgwwwk@mailnesia.com	1\r\ncrdbkhnet99731	1\r\nhdndh468	1\r\nnzjpr408	1\r\ndvtrz888	1\r\noouci040	1\r\nfrpdx066	1\r\nvbjlp468	1\r\nhdoryynwg79333	1\r\nabwnn	1\r\nwww52088    2\r\ndsgfds3443  2\r\nfgjgfhdfg   2\r\njfgyhr  3\r\n[/php]\r\n\r\n第一类 用户 从内容上分析，所有的内容中都提到了一个上海的号码178－0216－9238，都有连接，连接的内容也是同类账号发出来的相似信息，该类用户在每次发帖之后，就更新用户名，其发帖内容 如下\r\n\r\n[php]\r\n【178－0216－9238】莎莎 锦 州 凌 河 区 铁 新 小 姐 哪 里 找 【178－0216－9238】小莉\r\nhttp://club.baby.sina.com.cn/thread-9472739-1-1.html\r\n[/php]\r\n\r\n\r\n[php]\r\n咸 丰 县 找 少 妇 过 夜【178—0218—3170】思思【178—0218—3170】█ 欢 迎 光 临 █全 天 服 务\r\nhttp://club.baby.sina.com.cn/thread-9473599-1-1.html\r\n[/php]\r\n\r\n从单个账号发帖量来说，从几贴几十帖 到1342不等，成线性增加，危害极深，I have to say.\r\n从发帖ip上来看,全部共55个ip,下面是发帖量在100以上的ip\r\n\r\n[php]\r\n106.46.242.147  109  \r\n122.232.41.223  274  \r\n43.240.57.86    379  \r\n111.183.163.22  862  \r\n113.27.20.210   901  \r\n43.240.57.90    925  \r\n106.46.243.46   1177 \r\n106.46.242.133  2013 \r\n171.83.82.246   2146 \r\n123.151.191.19  3580 \r\n43.240.57.95    3994 \r\n125.39.18.99    5726 \r\n60.220.213.153  6035 \r\n221.233.217.14  9625 \r\n60.223.221.21   20226\r\n112.90.236.50   154850\r\n125.39.18.103   375653\r\n43.240.57.91    733533\r\n[/php]\r\n\r\n从注册ip上来看，1943个没有注册ip，其他ip如下\r\n[php]\r\n125.39.18.99    1    \r\n60.223.221.21   1\r\n61.136.153.198  1\r\n58.53.99.150    1    \r\n112.90.236.50   1\r\n43.240.57.91    2    \r\n124.228.28.195  3\r\n[/php]\r\n从注册时间上来看，\r\n<ol>\r\n	<li>7月5号，开始于 00:27:18 00:42:13，注册了三个账号，20:50:35重新开始，结束于 23:51:27，共注册账56个，</li>\r\n	<li>7月6号，开始于00:03:50，结束于04:32:23，共注册账号979个</li>\r\n        <li>7月7号，开始于01:41:06，结束于07:06:40,共注册账号917个</li>\r\n</ol>\r\n\r\n\r\n\r\n<pre>对第二类用户分析，先从注册ip入手,这个是他们注册的时候使用的ip,171.113.191.104 占一半以上</pre>\r\n[php]\r\n111.179.41.115	1\r\n61.184.226.162	1\r\n222.209.250.86	1\r\n171.40.68.99	1\r\n60.14.239.210	1\r\n202.114.224.27	1\r\n117.9.248.195	1\r\n61.136.153.198	1\r\n111.180.105.118	2\r\n60.172.246.104	4\r\n122.13.141.82	10\r\n113.98.76.109	11\r\n171.83.82.246	13\r\n113.57.244.58	18\r\n113.57.191.44	26\r\n113.57.182.75	29\r\n113.57.191.76	32\r\n60.172.229.142	48\r\n183.10.119.133	112\r\n59.172.196.28	149\r\n171.113.191.104	513\r\n[/php]\r\n\r\n这是第二类用户的注册时间,\r\n<ol>\r\n	<li>7月5号，开始于2015-07-05 22:15:35，于2015-07-05 23:59:53结束，共注册71个账号</li>\r\n	<li>7月6号，开始于2015-07-06 00:00:04，于2015-07-06 07:47:49结束，共注册896个账号</li>\r\n	<li>7月7号，共注册四个账号,详情如下</li>\r\n</ol>\r\n\r\n[php]\r\n2015-07-07 00:43:18\r\n2015-07-07 01:26:43\r\n2015-07-07 02:00:16\r\n2015-07-07 07:55:12\r\n[/php]\r\n\r\n从内容上分析，格式上和第一类差不多,链接的彼此指向，都有电话号码，不同的是这里每一个都有一个“雷少专用”，内容也不局限于色情，最后的正文内容是乱码,\r\n\r\n[php]\r\n安丘 全 套 小 姐【185x1897x5015】莎莎【185x1897x5015】█　　　█\r\n\r\n雷少专用&lt;/pre&gt;\r\nhttp://club.baby.sina.com.cn/thread-8476974-1-1.html\r\n&lt;pre&gt;\r\n俚倏僮苑氏誓逼焦帐沦诳切炊糖关丫鞠值闷白冉滴洗寂灾良偻瞥衬苏负兴奖章掠诠鞘窗塘挂迅旧众美跋鹊灯妥航椅看着闹奔赏冻文徽踊浪乇锹涤凸菏野苛滓母鄙哨独窝环尤蕾乜判捕是分霞纪猿聊僬苹乘吮嘎杏焦帐掳诹且锤躺冠牙\r\n[/php]\r\n\r\n\r\n[php]\r\n哪里有开广州发票--电：【1339.2447.312】张经理Q;210,9469,091-哪里有开广州发票-电:【1339.2447.312】张经理Q;210,9469,091先生帮您开\r\n\r\n雷少专用\r\n\r\n绦帕痴徽绷岸赂沃患油莱啬旁埠怂岗欣窖辗氯谫强葱潭骨沿揪窒玫捌茸到臀捍遗恐准耐背赡冈泻剿毡侣谟枪词贪沽研径智秘熬认档推鹤医课状呐敝杉锻纬荒釉篮厮疟猜视饭鲜及粤烈俑壬第屠貉曳咳鬃慕蔽纱杜沃患油莱啬耪埠仕繁\r\n[/php]\r\n','灌水攻击回顾分析','','inherit','open','open','','363-revision-v1','','','2015-07-11 14:35:31','2015-07-11 14:35:31','',363,'http://unasm.sinaapp.com/?p=386',0,'revision','',0),(389,1,'2015-07-14 06:39:36','2015-07-14 06:39:36','摘录自《Redis 设计与实现》19.3\r\n在Redis中 事务总是具有原子性，一致性，隔离性，隔离性，持久性。一下四个小结分别对四个特性进行讨论\r\n<h3>19.1 原子性</h3>\r\n事物具有原子性指的是，数据库将十五中的多个操作当做一个整体来执行，服务器要不执行执行十五中的所有操作，要不就一个操作都不执行。对于Redis的事务功能来说，事务队列的命令要不就全部执行，要不就一个都不执行，因此Redis的事务是具有原子性的（注：有待讨论）\r\n举个例子，一下展示的是一个成功执行的事务，事务中的所有命令都会被执行，\r\n\r\n[php]\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SET msg &quot;hello&quot;\r\nQUEUED\r\nredis&gt;GET msg\r\nQUEUED\r\nredis&gt;EXEC\r\n1)OK\r\n2)&quot;hello&quot;\r\n[/php]\r\n\r\n与此相反，以下展示的是一个执行失败的事务，这个事务因为命令入队出错拒绝执行，事务中的所有命令都不会被执行。\r\n\r\n[php]\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SET msg &quot;hello&quot;\r\nQUEUED\r\nredis&gt;GET\r\n(error) ERR wrong number of arguments for \'get\' command\r\nredis&gt;GET msg\r\nQUEUED\r\nredis&gt;EXEC\r\n(error)EXECABORT Transaction discarded because of previous errors.\r\n[/php]\r\n\r\nRedis的事务和传统的关系型数据库事务的最大区别在于，Redis 不支持事务的回滚机制，即使事务队列中的某个命令在执行期间出现了错误，整个事务也会继续执行下去，知道事务队列中所有的命令都执行完毕。\r\n\r\n在下面的例子中，即使RPUSH命令在执行期间出现了错误，事务的后续命令也会继续执行下去，并且执行的命令也不会有任何影响。\r\n\r\n[php]\r\n\r\nredis&gt;SET msg &quot;hello&quot; #msg\r\n键是一个字符串\r\nOK\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SADD fruit &quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;\r\nQUEUED\r\nredis&gt;RPUSH msg &quot;good bye&quot; &quot;byebye&quot;\r\nQUEUED\r\nredis&gt;SADD alphabet &quot;a&quot; &quot;b&quot; &quot;c&quot;\r\nQUEUED\r\nredis&gt;EXEC\r\n1) (integer)3\r\n2(error) WRONGTYPE Operation against a key holding the wrong kind of value\r\n3)(integer)3\r\n[/php]\r\n\r\nRedis的作者在事务的文档中解释说，不支持事务的回滚是因为这种复杂的功能和Redis追求简单高效的设计主旨不相符，并且他认为，Redis事务的执行时错误通常都是编程错误产生的，这种错误通常出现在开发环境中，很少在实际生产环境中出现，没有必要开发事务的回滚功能。\r\n<h3>19.3.2一致性</h3>\r\n事物具有一致性指的是，如果数据库在执行事务之前是一直的，那么在执行事务之后，无论事务是否成功，数据库也应该仍然是一致的。\r\n\r\n\"一致\"指的是数据符合数据库本身的定义和要求，并没有包含非法或者无效的错误数据。\r\n\r\nRedis通过谨慎的错误检测和简单的设计保证事物的一致性，一下三个小结介绍Redis事务可能出错的地方，并说明Redis是如何妥善的处理这些错误，从而保证事务的一致性的。\r\n\r\n入队错误：如果一个事务在入队过程中出现命令不存在，或者命令格式不正确等情况，redis将拒绝执行这个事务。 2.6.5以前，如果在入队以前发生了错误，事务一样可以执行，不过只执行那些正确入队的命令。\r\n\r\n执行错误：关于这种错误，有两个需要说明的地方，执行过程中发生的错误都是一些不能再入队时被服务器发现的错误，这些错误只会在命令实际是中被触发。即使执行过程中发生错误，服务器也不会中断事务的执行，它会继续执行事务中余下的命令。并且已经执行的命令不会被出错的命令影响。\r\n\r\n服务器停机：如果在执行事务中停机，那么根据服务器使用的持久化模式，可能有以下的情况，如果服务器在无持久化内存模式下，重启后数据库是空白的，因此总是一致的。\r\n\r\n如果运行于RDB模式下，停机不会导致不一致，因为可以根据RDB恢复数据，如果找不到RDB文件，重启后数据库是空白的，总是一致的。\r\n\r\n如果运行于AOF模式下，事务中途停机不会导致不一致，因为可以根据AOF文件恢复数据。如果没有AOF，重启后是空白的，总之一直的。\r\n<h3>19.3.3 隔离性</h3>\r\n因为Redis使用单线程方式执行事务，并且服务器保证，执行事务中不会对事务进行中断，因此Redis的事务总是以串行的方式运行的，并且总是具有隔离性的。\r\n<h3>19.3.4耐久性</h3>\r\n事务的耐久性指的是，当一个事务执行完毕的时候，执行这个事务所得的结果已经保存到硬盘里面了，即使执行事务完毕之后停机，执行事务所得结果也不会丢失。\r\n因为\r\n<b>Redis的事务不过是简单地用队列包裹起一组Redis命令</b>\r\n，Redis并没有为事务提供任何额外的持久化功能，并且Redis的事务耐久性由Redis所使用的耐久化模式决定的。\r\n\r\n当服务器在无持久化内存模式下，事务不具有耐久性，一旦服务器停机，包括事务在内的所有服务器数据都停止。\r\n\r\n当服务器在RDB持久化模式下运行时，服务器只会在特定的保存条件满足时，才会执行BGSAVE命令。并且异步执行的BGSAVE 不能保证事务数据第一之间内保存在硬盘里面，因此RDB模式下不具有持久性。\r\n\r\n当服务器运行在AOF持久化模式下，并且appendsync选项为always时，程序总会在执行命令后调用sync，将数据真正保存在硬盘里面，因此这种配置喜爱具有耐久性。\r\n\r\n当服务器运行于AOF持久化模式下，并且appendfsync选项为everysec时，程序每秒同步一次命令到硬盘，如果停机恰好发生在同步的那一秒，可能会造成事务数据丢失，因此这种配置下，事务不具有耐久性。\r\n当服务器运行于AOF持久化模式下，并且appendfsync选项为no时，程序交给操作系统决定何时同步命令到硬盘，事务数据可能在等待同步中丢失，因此这种配置下，事务不具有耐久性。\r\n\r\n不论Redis在什么模式下工作，在事务的最后加SAVE 命令，总是看以保证事物的耐久度的，不过会影响效率。','redis 的ACID 性质','','publish','open','open','','redis-%e7%9a%84acid-%e6%80%a7%e8%b4%a8','','','2015-07-14 08:39:14','2015-07-14 08:39:14','',0,'http://unasm.sinaapp.com/?p=389',0,'post','',0),(390,1,'2015-07-14 06:39:36','2015-07-14 06:39:36','摘录自《Redis 设计与实现》19.3\r\n在Redis中 事务总是具有原子性，一致性，隔离性，隔离性，持久性。一下四个小结分别对四个特性进行讨论\r\n<h3>19.1 原子性</h3>\r\n事物具有原子性指的是，数据库将十五中的多个操作当做一个整体来执行，服务器要不执行执行十五中的所有操作，要不就一个操作都不执行。对于Redis的事务功能来说，事务队列的命令要不就全部执行，要不就一个都不执行，因此Redis的事务是具有原子性的（注：有待讨论）\r\n举个例子，一下展示的是一个成功执行的事务，事务中的所有命令都会被执行，\r\n\r\n[php]\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SET msg &quot;hello&quot;\r\nQUEUED\r\nredis&gt;GET msg\r\nQUEUED\r\nredis&gt;EXEC\r\n1)OK\r\n2)&quot;hello&quot;\r\n[/php]\r\n\r\n与此相反，以下展示的是一个执行失败的事务，这个事务因为命令入队出错拒绝执行，事务中的所有命令都不会被执行。\r\n\r\n[php]\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SET msg &quot;hello&quot;\r\nQUEUED\r\nredis&gt;GET\r\n(error) ERR wrong number of arguments for \'get\' command\r\nredis&gt;GET msg\r\nQUEUED\r\nredis&gt;EXEC\r\n(error)EXECABORT Transaction discarded because of previous errors.\r\n[/php]\r\n\r\nRedis的事务和传统的关系型数据库事务的最大区别在于，Redis 不支持事务的回滚机制，即使事务队列中的某个命令在执行期间出现了错误，整个事务也会继续执行下去，知道事务队列中所有的命令都执行完毕。\r\n\r\n在下面的例子中，即使RPUSH命令在执行期间出现了错误，事务的后续命令也会继续执行下去，并且执行的命令也不会有任何影响。\r\n\r\n[php]\r\n\r\nredis&gt;SET msg &quot;hello&quot; #msg\r\n键是一个字符串\r\nOK\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SADD fruit &quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;\r\nQUEUED\r\nredis&gt;RPUSH msg &quot;good bye&quot; &quot;byebye&quot;\r\nQUEUED\r\nredis&gt;SADD alphabet &quot;a&quot; &quot;b&quot; &quot;c&quot;\r\nQUEUED\r\nredis&gt;EXEC\r\n1) (integer)3\r\n2(error) WRONGTYPE Operation against a key holding the wrong kind of value\r\n3)(integer)3\r\n[/php]\r\n\r\nRedis的作者在事务的文档中解释说，不支持事务的回滚是因为这种复杂的功能和Redis追求简单高效的设计主旨不相符，并且他认为，Redis事务的执行时错误通常都是编程错误产生的，这种错误通常出现在开发环境中，很少在实际生产环境中出现，没有必要开发事务的回滚功能。\r\n<h3>19.3.2一致性</h3>\r\n事物具有一致性指的是，如果数据库在执行事务之前是一直的，那么在执行事务之后，无论事务是否成功，数据库也应该仍然是一致的。\r\n\r\n\"一致\"指的是数据符合数据库本身的定义和要求，并没有包含非法或者无效的错误数据。\r\n\r\nRedis通过谨慎的错误检测和简单的设计保证事物的一致性，一下三个小结介绍Redis事务可能出错的地方，并说明Redis是如何妥善的处理这些错误，从而保证事务的一致性的。\r\n\r\n&nbsp;','redis 的ACID 性质','','inherit','open','open','','389-revision-v1','','','2015-07-14 06:39:36','2015-07-14 06:39:36','',389,'http://unasm.sinaapp.com/?p=390',0,'revision','',0),(391,1,'2015-07-14 08:38:03','2015-07-14 08:38:03','摘录自《Redis 设计与实现》19.3\n在Redis中 事务总是具有原子性，一致性，隔离性，隔离性，持久性。一下四个小结分别对四个特性进行讨论\n<h3>19.1 原子性</h3>\n事物具有原子性指的是，数据库将十五中的多个操作当做一个整体来执行，服务器要不执行执行十五中的所有操作，要不就一个操作都不执行。对于Redis的事务功能来说，事务队列的命令要不就全部执行，要不就一个都不执行，因此Redis的事务是具有原子性的（注：有待讨论）\n举个例子，一下展示的是一个成功执行的事务，事务中的所有命令都会被执行，\n\n[php]\nredis&gt;MULTI\nOK\nredis&gt;SET msg &quot;hello&quot;\nQUEUED\nredis&gt;GET msg\nQUEUED\nredis&gt;EXEC\n1)OK\n2)&quot;hello&quot;\n[/php]\n\n与此相反，以下展示的是一个执行失败的事务，这个事务因为命令入队出错拒绝执行，事务中的所有命令都不会被执行。\n\n[php]\nredis&gt;MULTI\nOK\nredis&gt;SET msg &quot;hello&quot;\nQUEUED\nredis&gt;GET\n(error) ERR wrong number of arguments for \'get\' command\nredis&gt;GET msg\nQUEUED\nredis&gt;EXEC\n(error)EXECABORT Transaction discarded because of previous errors.\n[/php]\n\nRedis的事务和传统的关系型数据库事务的最大区别在于，Redis 不支持事务的回滚机制，即使事务队列中的某个命令在执行期间出现了错误，整个事务也会继续执行下去，知道事务队列中所有的命令都执行完毕。\n\n在下面的例子中，即使RPUSH命令在执行期间出现了错误，事务的后续命令也会继续执行下去，并且执行的命令也不会有任何影响。\n\n[php]\n\nredis&gt;SET msg &quot;hello&quot; #msg\n键是一个字符串\nOK\nredis&gt;MULTI\nOK\nredis&gt;SADD fruit &quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;\nQUEUED\nredis&gt;RPUSH msg &quot;good bye&quot; &quot;byebye&quot;\nQUEUED\nredis&gt;SADD alphabet &quot;a&quot; &quot;b&quot; &quot;c&quot;\nQUEUED\nredis&gt;EXEC\n1) (integer)3\n2(error) WRONGTYPE Operation against a key holding the wrong kind of value\n3)(integer)3\n[/php]\n\nRedis的作者在事务的文档中解释说，不支持事务的回滚是因为这种复杂的功能和Redis追求简单高效的设计主旨不相符，并且他认为，Redis事务的执行时错误通常都是编程错误产生的，这种错误通常出现在开发环境中，很少在实际生产环境中出现，没有必要开发事务的回滚功能。\n<h3>19.3.2一致性</h3>\n事物具有一致性指的是，如果数据库在执行事务之前是一直的，那么在执行事务之后，无论事务是否成功，数据库也应该仍然是一致的。\n\n\"一致\"指的是数据符合数据库本身的定义和要求，并没有包含非法或者无效的错误数据。\n\nRedis通过谨慎的错误检测和简单的设计保证事物的一致性，一下三个小结介绍Redis事务可能出错的地方，并说明Redis是如何妥善的处理这些错误，从而保证事务的一致性的。\n\n入队错误：如果一个事务在入队过程中出现命令不存在，或者命令格式不正确等情况，redis将拒绝执行这个事务。 2.6.5以前，如果在入队以前发生了错误，事务一样可以执行，不过只执行那些正确入队的命令。\n\n执行错误：关于这种错误，有两个需要说明的地方，执行过程中发生的错误都是一些不能再入队时被服务器发现的错误，这些错误只会在命令实际是中被触发。即使执行过程中发生错误，服务器也不会中断事务的执行，它会继续执行事务中余下的命令。并且已经执行的命令不会被出错的命令影响。\n\n服务器停机：如果在执行事务中停机，那么根据服务器使用的持久化模式，可能有以下的情况，如果服务器在无持久化内存模式下，重启后数据库是空白的，因此总是一致的。\n\n如果运行于RDB模式下，停机不会导致不一致，因为可以根据RDB恢复数据，如果找不到RDB文件，重启后数据库是空白的，总是一致的。\n\n如果运行于AOF模式下，事务中途停机不会导致不一致，因为可以根据AOF文件恢复数据。如果没有AOF，重启后是空白的，总之一直的。\n<h3>19.3.3 隔离性</h3>\n因为Redis使用单线程方式执行事务，并且服务器保证，执行事务中不会对事务进行中断，因此Redis的事务总是以串行的方式运行的，并且总是具有隔离性的。\n<h3>19.3.4耐久性</h3>\n事务的耐久性指的是，当一个事务执行完毕的时候，执行这个事务所得的结果已经保存到硬盘里面了，即使执行事务完毕之后停机，执行事务所得结果也不会丢失。\n因为\n<b>Redis的事务不过是简单地用队列包裹起一组Redis命令</b>\n，Redis并没有为事务提供任何额外的持久化功能，并且Redis的事务耐久性由Redis所使用的耐久化模式决定的。\n\n当服务器在无持久化内存模式下，事务不具有耐久性，一旦服务器停机，包括事务在内的所有服务器数据都停止。\n\n当服务器在RDB持久化模式下运行时，服务器只会在特定的保存条件满足时，才会执行BGSAVE命令。并且异步执行的BGSAVE 不能保证事务数据第一之间内保存在硬盘里面，因此RDB模式下不具有持久性。\n\n当服务器运行在AOF持久化模式下，并且appendsync选项为always时，程序总会在执行命令后调用sync，将数据真正保存在硬盘里面，因此这种配置喜爱具有耐久性。\n\n当服务器运行于AOF持久化模式下，并且appendfsync选项为everysec时，程序每秒同步一次命令到硬盘，如果停机恰好发生在同步的那一秒，可能会造成事务数据丢失，因此这种配置下，事务不具有耐久性。\n当服务器运行于AOF持久化模式下，并且appendfsync选项为no时，程序交给操作系统决定何时同步命令到硬盘，shi\'w，因此这种配置下，事务不具有耐久性。','redis 的ACID 性质','','inherit','open','open','','389-autosave-v1','','','2015-07-14 08:38:03','2015-07-14 08:38:03','',389,'http://unasm.sinaapp.com/?p=391',0,'revision','',0),(392,1,'2015-07-14 08:39:14','2015-07-14 08:39:14','摘录自《Redis 设计与实现》19.3\r\n在Redis中 事务总是具有原子性，一致性，隔离性，隔离性，持久性。一下四个小结分别对四个特性进行讨论\r\n<h3>19.1 原子性</h3>\r\n事物具有原子性指的是，数据库将十五中的多个操作当做一个整体来执行，服务器要不执行执行十五中的所有操作，要不就一个操作都不执行。对于Redis的事务功能来说，事务队列的命令要不就全部执行，要不就一个都不执行，因此Redis的事务是具有原子性的（注：有待讨论）\r\n举个例子，一下展示的是一个成功执行的事务，事务中的所有命令都会被执行，\r\n\r\n[php]\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SET msg &quot;hello&quot;\r\nQUEUED\r\nredis&gt;GET msg\r\nQUEUED\r\nredis&gt;EXEC\r\n1)OK\r\n2)&quot;hello&quot;\r\n[/php]\r\n\r\n与此相反，以下展示的是一个执行失败的事务，这个事务因为命令入队出错拒绝执行，事务中的所有命令都不会被执行。\r\n\r\n[php]\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SET msg &quot;hello&quot;\r\nQUEUED\r\nredis&gt;GET\r\n(error) ERR wrong number of arguments for \'get\' command\r\nredis&gt;GET msg\r\nQUEUED\r\nredis&gt;EXEC\r\n(error)EXECABORT Transaction discarded because of previous errors.\r\n[/php]\r\n\r\nRedis的事务和传统的关系型数据库事务的最大区别在于，Redis 不支持事务的回滚机制，即使事务队列中的某个命令在执行期间出现了错误，整个事务也会继续执行下去，知道事务队列中所有的命令都执行完毕。\r\n\r\n在下面的例子中，即使RPUSH命令在执行期间出现了错误，事务的后续命令也会继续执行下去，并且执行的命令也不会有任何影响。\r\n\r\n[php]\r\n\r\nredis&gt;SET msg &quot;hello&quot; #msg\r\n键是一个字符串\r\nOK\r\nredis&gt;MULTI\r\nOK\r\nredis&gt;SADD fruit &quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;\r\nQUEUED\r\nredis&gt;RPUSH msg &quot;good bye&quot; &quot;byebye&quot;\r\nQUEUED\r\nredis&gt;SADD alphabet &quot;a&quot; &quot;b&quot; &quot;c&quot;\r\nQUEUED\r\nredis&gt;EXEC\r\n1) (integer)3\r\n2(error) WRONGTYPE Operation against a key holding the wrong kind of value\r\n3)(integer)3\r\n[/php]\r\n\r\nRedis的作者在事务的文档中解释说，不支持事务的回滚是因为这种复杂的功能和Redis追求简单高效的设计主旨不相符，并且他认为，Redis事务的执行时错误通常都是编程错误产生的，这种错误通常出现在开发环境中，很少在实际生产环境中出现，没有必要开发事务的回滚功能。\r\n<h3>19.3.2一致性</h3>\r\n事物具有一致性指的是，如果数据库在执行事务之前是一直的，那么在执行事务之后，无论事务是否成功，数据库也应该仍然是一致的。\r\n\r\n\"一致\"指的是数据符合数据库本身的定义和要求，并没有包含非法或者无效的错误数据。\r\n\r\nRedis通过谨慎的错误检测和简单的设计保证事物的一致性，一下三个小结介绍Redis事务可能出错的地方，并说明Redis是如何妥善的处理这些错误，从而保证事务的一致性的。\r\n\r\n入队错误：如果一个事务在入队过程中出现命令不存在，或者命令格式不正确等情况，redis将拒绝执行这个事务。 2.6.5以前，如果在入队以前发生了错误，事务一样可以执行，不过只执行那些正确入队的命令。\r\n\r\n执行错误：关于这种错误，有两个需要说明的地方，执行过程中发生的错误都是一些不能再入队时被服务器发现的错误，这些错误只会在命令实际是中被触发。即使执行过程中发生错误，服务器也不会中断事务的执行，它会继续执行事务中余下的命令。并且已经执行的命令不会被出错的命令影响。\r\n\r\n服务器停机：如果在执行事务中停机，那么根据服务器使用的持久化模式，可能有以下的情况，如果服务器在无持久化内存模式下，重启后数据库是空白的，因此总是一致的。\r\n\r\n如果运行于RDB模式下，停机不会导致不一致，因为可以根据RDB恢复数据，如果找不到RDB文件，重启后数据库是空白的，总是一致的。\r\n\r\n如果运行于AOF模式下，事务中途停机不会导致不一致，因为可以根据AOF文件恢复数据。如果没有AOF，重启后是空白的，总之一直的。\r\n<h3>19.3.3 隔离性</h3>\r\n因为Redis使用单线程方式执行事务，并且服务器保证，执行事务中不会对事务进行中断，因此Redis的事务总是以串行的方式运行的，并且总是具有隔离性的。\r\n<h3>19.3.4耐久性</h3>\r\n事务的耐久性指的是，当一个事务执行完毕的时候，执行这个事务所得的结果已经保存到硬盘里面了，即使执行事务完毕之后停机，执行事务所得结果也不会丢失。\r\n因为\r\n<b>Redis的事务不过是简单地用队列包裹起一组Redis命令</b>\r\n，Redis并没有为事务提供任何额外的持久化功能，并且Redis的事务耐久性由Redis所使用的耐久化模式决定的。\r\n\r\n当服务器在无持久化内存模式下，事务不具有耐久性，一旦服务器停机，包括事务在内的所有服务器数据都停止。\r\n\r\n当服务器在RDB持久化模式下运行时，服务器只会在特定的保存条件满足时，才会执行BGSAVE命令。并且异步执行的BGSAVE 不能保证事务数据第一之间内保存在硬盘里面，因此RDB模式下不具有持久性。\r\n\r\n当服务器运行在AOF持久化模式下，并且appendsync选项为always时，程序总会在执行命令后调用sync，将数据真正保存在硬盘里面，因此这种配置喜爱具有耐久性。\r\n\r\n当服务器运行于AOF持久化模式下，并且appendfsync选项为everysec时，程序每秒同步一次命令到硬盘，如果停机恰好发生在同步的那一秒，可能会造成事务数据丢失，因此这种配置下，事务不具有耐久性。\r\n当服务器运行于AOF持久化模式下，并且appendfsync选项为no时，程序交给操作系统决定何时同步命令到硬盘，事务数据可能在等待同步中丢失，因此这种配置下，事务不具有耐久性。\r\n\r\n不论Redis在什么模式下工作，在事务的最后加SAVE 命令，总是看以保证事物的耐久度的，不过会影响效率。','redis 的ACID 性质','','inherit','open','open','','389-revision-v1','','','2015-07-14 08:39:14','2015-07-14 08:39:14','',389,'http://unasm.sinaapp.com/?p=392',0,'revision','',0),(393,1,'2015-07-14 09:04:38','2015-07-14 09:04:38','<h2>环境变量</h2>\r\nruntime 包含的是go实时运行系统的一些交互操作，比如控制goroutines,也包含了一些使用反射包获得的底层信息，具体见反射包关于实时系统的接口。\r\n\r\n下面的环境变量（$name或者是%name%，取决于运行的操作系统）控制go运行时候的实时行为，这个意义和使用方法，也许会在不同版本之间变化（目前1.4版）。\r\n\r\nGOGC变量设置垃圾回收的百分比，当新添加的数据加上上次垃圾回收之后留下的数据重新达到这个比例之后，会再次出发垃圾回收，默认的GOGC是100，设置gogc=off会彻底禁止垃圾回收，runtime/debug包的SetGCPercent函数会允许在运行时修改该参数。详见<a href=\"http://golang.org/pkg/runtime/debug/#SetGCPercent\">http://golang.org/pkg/runtime/debug/#SetGCPercent</a>.\r\n\r\nGODEBUG变量控制着运行时的debug输出，GODEBUG变量是一个逗号分隔的键值对，支持的键名有\r\n<ol>\r\n	<li>allocfreetrace ：设置 allocfreetrace = 1会让每次分配和释放都记录并且可以被栈追踪打印到</li>\r\n	<li>efence : 设置efence = 1会让分配器给每一个对象都分配一个单独的页，并且该页不会再被重复利用了</li>\r\n	<li>gctrace : 设置 gctrace = 1 会让垃圾回收器每次回收的时候都发送一个一行到error，描述回收的量和停顿的时间长度，设置gctrace = 2 ，不止会得到上述结果，但是还有重复的次数。</li>\r\n	<li>gcdead: 设置gcdead = 1 会毁了所有他认为死掉了执行堆栈。</li>\r\n	<li>invalidptr : 默认invalidptr = 1，如果指针被赋予一个无效值,会引起程序的崩溃，设置该值为0，会停止该检查，这个只能临时用于查找bug，真正的解决方法是不要把整数类型的值存在指针变量里面。</li>\r\n	<li>scheddetail : 设置 scheddetail= 1 &amp;&amp; schedtrace = X 会让调度器 发出来一个详细的Xms内多线调度信息，描述调度器的情况，如线程，进程，协程等等。</li>\r\n	<li>schedtrace: 同上</li>\r\n	<li>scavenge : scavenge=1 enables debugging mode of heap scavenger</li>\r\n</ol>\r\n变量GOMAXPROCS限制操作系统可以 同时运行的用户级别的go代码数量，但是对于出于阻塞状态的线程数量是没有限制的，这些是不受GOMAXPROCS 限制的，GOMAXPROCS 是可以修改该限制的（注：NumCPU() 函数可以获取当前系统的CPU数目，可以根据该结果确认GOMAXPROCS的值）。\r\n\r\nGOTRACEBACK可以控制go成语因为未恢复的panic和意外情况造成的崩溃的时候输出栈数量，默认会输出所有的尚存的goroutine，内置函数到实时系统，如果以退出码2退出，如果GOTRACEBACK 设置成0，那goroutine追踪栈会全部输出，GOTRACEBACK 设置成1，采用默认的行为，如果GOTRACEBACK设置成2，不仅输出全部的栈，还有实时交互系统的函数，如果GOTRACEBACK 设置成crash,不仅包括输出栈和实时系统本身的函数，还有尽可能的以操作系统规定的方式退出而不是立即退出，比如在unix系统上，程序会发送一个SIGABRT 去触发一个core dump。\r\n\r\nGOARCH, GOOS, GOPATH, 和 GOROOT 这些环境变量。题目影响go程序的构建。\r\n<h2><strong>常量</strong></h2>\r\n<pre>const <span id=\"Compiler\">Compiler</span> = \"gc\" \r\n编译器是构建运行的二进制代码的工具集的名字，一直的工具集名字有</pre>\r\n<pre>gc      The 5g/6g/8g compiler suite at code.google.com/p/go.\r\ngccgo   The gccgo front end, part of the GCC compiler suite.</pre>\r\n<pre>const <span id=\"GOARCH\">GOARCH</span> <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a> = theGoarch\r\nGOARCH  是运行程序的CPU架构：386，amd64，或者是arm</pre>\r\n<pre>const <span id=\"GOOS\">GOOS</span> <a href=\"http://127.0.0.1:8080/pkg/builtin/#string\">string</a> = theGoos\r\nGOOS 是运行程序的操作系统，darwin,freebsd,linux等等\r\n\r\n</pre>\r\n<h2>变量</h2>\r\nvar MemProfileRate int = 512 * 1024\r\n\r\nMemProfileRate 会在内存profile 里面 保存内存分配的频率和报告频率，profile的目标是对内存分配的平均情况进行采样分析。 为了在内存profile分析报告里面记录每一次内存分配的情况，请将MemProfileRate 设置成1，如果彻底关闭内存分析，请将MemProfileRate 设置成0， 该工具会会在整个程序的生命周期里面不停地以设置的频率对内存进行采样分析，修改内存采样频率的操作只应该做一次，并且最好尽可能的早做。\r\n\r\n&nbsp;\r\n<h2>func BlockProfile</h2>\r\nfunc BlockProfile(p []BlockProfileRecord) (n int, ok bool)\r\n\r\n该函数返回n,几率的是当前阻塞的报告。如果len(p) &gt;= n ,该函数会拷贝分析报告进入p，并且返回n，如果len(p) &lt; n, BlockProfile 不做任何修改，只是返回n，false。\r\n\r\nMost clients should use the runtime/pprof package or the testing package\'s -test.blockprofile flag instead of calling BlockProfile directly.\r\n\r\n&nbsp;\r\n<h2>func CPUProfile</h2>\r\nfunc CPUProfile() []byte\r\n\r\nCPUProfile returns the next chunk of binary CPU profiling stack trace data, blocking until data is available. If profiling is turned off and all the profile data accumulated while it was on has been returned, CPUProfile returns nil. The caller must save the returned data before calling CPUProfile again.\r\n\r\nMost clients should use the runtime/pprof package or the testing package\'s -test.cpuprofile flag instead of calling CPUProfile directly.\r\n\r\n&nbsp;\r\n\r\n<h2>func GoroutineProfile</h2>\r\n\r\nfunc GoroutineProfile(p [] StackRecord) (n int, ok bool)\r\nGoroutineProfile 返回n，活动gogoutine 站报告的记录数，如果 len(p) >= n，GoroutineProfile 会拷贝报告进入p，然后返回n，如果 len(p) < n , GoroutineProfile并不会改变p，并且返回n，false。\r\n应该使用runtime/pprof包，而不是直接使用GoroutineProfile \r\n\r\n<h2>func NumCPU()</h2>\r\n返回本机逻辑CPUS的数量\r\n<h2>func NumGoroutine</h2>\r\nfunc NumGoroutine int\r\n返回存在的goroutineus 的数量\r\nfunc ReadMemStats(m *MemStats)\r\n\r\n读取内存分配的数据\r\n&nbsp;','golang runtime 包官方文档 翻译','','inherit','open','open','','303-revision-v1','','','2015-07-14 09:04:38','2015-07-14 09:04:38','',303,'http://unasm.sinaapp.com/?p=393',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (394,1,'2015-07-16 13:49:13','2015-07-16 13:49:13','Redis的serverCron大约是每1ms执行一次，并非严格1ms，一般来说，会有一定程度的延迟，\r\n\r\nserverCron函数的三个参数，在函数内部都没有被使用，会有警告出来，所以使用REDIS_NOTUSED去除，不使用，为什么还传递这三个参数呢?莫非是为了格式的一致性么？\r\n\r\n1.serverCron 设置 setitimer，超时的时候，进程会收到一个SIGALRM信号。redis 根据这个信号，打印 logStackTrace 信息，排查超时的原因。在生产环境，是不会做这种事情的。\r\n\r\n2.redis更新全局事件变量，在要求不是很高的时候，通过读取该时间变量，默认为当前事件，可以节省时间，加快速度。\r\n<pre>3.更新Lru时间，getLRUClock()函数如下</pre>\r\n\r\n[cpp]\r\nreturn (mstime()/REDIS_LRU_CLOCK_RESOLUTION) &amp; REDIS_LRU_CLOCK_MAX;\r\n[/cpp]\r\n\r\n翻译出来就是(mstime() / 1000) &amp; ( (1 &lt;&lt; 24 )- 1),这个时间，大概是380天的样子,lruclock每380天一个轮回。\r\n\r\n4.如果之前收到了 <span class=\"s1\">SIGT</span><span class=\"s2\">E</span><span class=\"s1\">RM 信号，并不会立即做什么事情，只是将</span><span class=\"s1\">server.shutdown_as</span><span class=\"s2\">a</span><span class=\"s1\">p 置位</span>，这里判断shutdown_asap , 调用<span class=\"s1\">prepareForShut</span><span class=\"s2\">d</span><span class=\"s1\">own ,</span>关闭服务器，退出执行。但是如果没有退出成功，就不退出了，打印Log，然后移除标志位。\r\n\r\n5.每50s，打印一次全部数据库的键值对，过期键的数量。\r\n\r\n6.如果不是处于哨兵模式，每50s，记录一次客户端连接的数量，以及redis从库的数量。处于哨兵模式的时候，服务器所做的事情，就是监控其他服务器是否正常，它的客户端，就是几个固定的服务器 ，并没有打印客户端连接的必要。\r\n\r\n7.clientsCron(),检查所有的客户端连接，是否有可以释放的，每次至少检查50个客户端，如果符合以下条件，就断开客户端连接。\r\nredis越来越复杂了。\r\n\r\n[cpp]\r\nif (server.maxidletime &amp;&amp;\r\n// 不检查作为从服务器的客户端\r\n!(c-&gt;flags &amp; REDIS_SLAVE) &amp;&amp;\r\n// 不检查作为主服务器的客户端\r\n!(c-&gt;flags &amp; REDIS_MASTER) &amp;&amp;\r\n// 不检查被阻塞的客户端\r\n!(c-&gt;flags &amp; REDIS_BLOCKED) &amp;&amp;\r\n// 不检查订阅了频道的客户端\r\ndictSize(c-&gt;pubsub_channels) == 0 &amp;&amp;\r\n// 不检查订阅了模式的客户端,因为可能是监控器？？？\r\nlistLength(c-&gt;pubsub_patterns) == 0 &amp;&amp;\r\n// 客户端最后一次与服务器通讯的时间已经超过了 maxidletime 时间\r\n(now - c-&gt;lastinteraction &gt; server.maxidletime))\r\n[/cpp]\r\n\r\n同时检查这些客户端是不是可以缩小查询缓冲，节省内存。条件是 <span class=\"s1\">1.  查询缓冲区的大小大于 BIG_ARG 以及 querybuf_peak ，2.  </span>客户端不活跃，并且缓冲区大于 1k的时候，减小缓冲区。怎么判断是否活跃呢，超过2s内没有任何交互，就判断为不活跃。\r\n\r\n8. databasesCron(),定时脚本中，需要对db进行的操作,包括清除过期键以及判断是否需要rehash\r\n\r\n9.检查aof和rdb是否进行的时候，使用了wait3(&amp;statloc,WNOHANG,NULL))\r\n\r\nWNOHANG:return immediately if no child has exited。通过非阻塞的方式查询子进程是否完成，而是通过每次cron查询的方式，大概是要做的事情太多了吧。rdb或者aof完成之后，执行backgroundSaveDoneHandler(exitcode,bysignal) 或者是 backgroundRewriteDoneHandler(exitcode,bysignal)\r\n\r\n10.如果server.aof_flush_postponed_start置位，也即是每秒刷新aof文件，则刷新aof文件。\r\nreplicationCron,每10s执行一次， 重连接主服务器、向主服务器发送 ACK 、判断数据发送失败情况、断开本服务器超时的从服务器，等等\r\n\r\n11.关闭需要异步关闭释放的客户端。\r\n\r\n12.每10s，重新连接一次主服务器，发送ACK，断开超时的从服务器等。\r\n\r\n13.如果服务器运行在集群模式下，那么每秒钟执行一次集群操作。\r\n\r\n14.如果处于哨兵模式下， 每秒中执行一次sentinelTimer()','Redis 源码分析之serverCron(定时循环)解析','','publish','open','open','','redis-%e5%ae%9a%e6%97%b6%e5%be%aa%e7%8e%af%e6%89%a7%e8%a1%8c%e4%bb%bb%e5%8a%a1servercron%e8%a7%a3%e6%9e%90','','','2015-08-07 07:43:13','2015-08-07 07:43:13','',0,'http://unasm.sinaapp.com/?p=394',0,'post','',0),(395,1,'2015-07-16 13:49:13','2015-07-16 13:49:13','这里其实是对 Redis.c serverCron进行分析，也就是Redis的每次循环中，做的事情，innode的master thread每次做的事情也不少，I have to say.','Redis 定时循环执行任务(serverCron解析)','','inherit','open','open','','394-revision-v1','','','2015-07-16 13:49:13','2015-07-16 13:49:13','',394,'http://unasm.sinaapp.com/?p=395',0,'revision','',0),(396,1,'2015-07-16 13:50:25','2015-07-16 13:50:25','这里其实是对 Redis.c serverCron 函数进行分析，也就是Redis的每次循环中，做的事情，innode的master thread每次做的事情也不少，I have to say.','Redis 定时循环执行任务(serverCron解析)','','inherit','open','open','','394-revision-v1','','','2015-07-16 13:50:25','2015-07-16 13:50:25','',394,'http://unasm.sinaapp.com/?p=396',0,'revision','',0),(397,1,'2015-08-07 07:40:59','2015-08-07 07:40:59','Redis的serverCron大约是每1ms执行一次，并非严格1ms，一般来说，会有一定程度的延迟，\n\nserverCron函数的三个参数，在函数内部都没有被使用，会有警告出来，所以使用REDIS_NOTUSED去除，不使用，为什么还传递这三个参数呢?莫非是为了格式的一致性么？\n\n1.serverCron 设置 setitimer，超时的时候，进程会收到一个SIGALRM信号。redis 根据这个信号，打印 logStackTrace 信息，排查超时的原因。在生产环境，是不会做这种事情的。\n\n2.redis更新全局事件变量，在要求不是很高的时候，通过读取该时间变量，默认为当前事件，可以节省时间，加快速度。\n<pre>3.更新Lru时间，getLRUClock()函数如下</pre>\n\n[cpp]\nreturn (mstime()/REDIS_LRU_CLOCK_RESOLUTION) &amp; REDIS_LRU_CLOCK_MAX;\n[/cpp]\n\n翻译出来就是(mstime() / 1000) &amp; ( (1 &lt;&lt; 24 )- 1),这个时间，大概是380天的样子,lruclock每380天一个轮回。\n\n4.如果之前收到了 <span class=\"s1\">SIGT</span><span class=\"s2\">E</span><span class=\"s1\">RM 信号，并不会立即做什么事情，只是将</span><span class=\"s1\">server.shutdown_as</span><span class=\"s2\">a</span><span class=\"s1\">p 置位</span>，这里判断shutdown_asap , 调用<span class=\"s1\">prepareForShut</span><span class=\"s2\">d</span><span class=\"s1\">own ,</span>关闭服务器，退出执行。但是如果没有退出成功，就不退出了，打印Log，然后移除标志位。\n\n5.每50s，打印一次全部数据库的键值对，过期键的数量。\n\n6.如果不是处于哨兵模式，每50s，记录一次客户端连接的数量，以及redis从库的数量。处于哨兵模式的时候，服务器所做的事情，就是监控其他服务器是否正常，它的客户端，就是几个固定的服务器 ，并没有打印客户端连接的必要。\n\n7.clientsCron(),检查所有的客户端连接，是否有可以释放的，每次至少检查50个客户端，如果符合以下条件，就断开客户端连接。\nredis越来越复杂了。\n\n[cpp]\nif (server.maxidletime &amp;&amp;\n// 不检查作为从服务器的客户端\n!(c-&gt;flags &amp; REDIS_SLAVE) &amp;&amp;\n// 不检查作为主服务器的客户端\n!(c-&gt;flags &amp; REDIS_MASTER) &amp;&amp;\n// 不检查被阻塞的客户端\n!(c-&gt;flags &amp; REDIS_BLOCKED) &amp;&amp;\n// 不检查订阅了频道的客户端\ndictSize(c-&gt;pubsub_channels) == 0 &amp;&amp;\n// 不检查订阅了模式的客户端,因为可能是监控器？？？\nlistLength(c-&gt;pubsub_patterns) == 0 &amp;&amp;\n// 客户端最后一次与服务器通讯的时间已经超过了 maxidletime 时间\n(now - c-&gt;lastinteraction &gt; server.maxidletime))\n[/cpp]\n\n同时检查这些客户端是不是可以缩小查询缓冲，节省内存。条件是 <span class=\"s1\">1.  查询缓冲区的大小大于 BIG_ARG 以及 querybuf_peak ，2.  </span>客户端不活跃，并且缓冲区大于 1k的时候，减小缓冲区。怎么判断是否活跃呢，超过2s内没有任何交互，就判断为不活跃。\n\n8. databasesCron(),定时脚本中，需要对db进行的操作,包括清除过期键以及判断是否需要rehash\n\n9.检查aof和rdb是否进行的时候，使用了wait3(&amp;statloc,WNOHANG,NULL))\n\nWNOHANG:return immediately if no child has exited。通过非阻塞的方式查询子进程是否完成，而是通过每次cron查询的方式，大概是要做的事情太多了吧。rdb或者aof完成之后，执行backgroundSaveDoneHandler(exitcode,bysignal) 或者是 backgroundRewriteDoneHandler(exitcode,bysignal)\n\n10.如果server.aof_flush_postponed_start置位，也即是每秒刷新aof文件，则刷新aof文件。\nreplicationCron,每10s执行一次， 重连接主服务器、向主服务器发送 ACK 、判断数据发送失败情况、断开本服务器超时的从服务器，等等\n\n11.关闭需要异步关闭释放的客户端。\n\n&nbsp;\n\n如果服务器运行在集群模式下，那么每秒钟执行一次集群操作。\n如果处于哨兵模式下， 每秒中执行一次sentinelTimer()\n\n[cpp]\nint serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {\nint j;\nREDIS_NOTUSED(eventLoop);\nREDIS_NOTUSED(id);\nREDIS_NOTUSED(clientData);\n\nif (server.watchdog_period) watchdogScheduleSignal(server.watchdog_period);\n\nupdateCachedTime();\n\n//保存每秒执行的命令数量\nrun_with_period(100) trackOperationsPerSecond();\nserver.lruclock = getLRUClock();\n\nif (zmalloc_used_memory() &gt; server.stat_peak_memory)\nserver.stat_peak_memory = zmalloc_used_memory();\n\nserver.resident_set_size = zmalloc_get_rss();\n\nif (server.shutdown_asap) {\nif (prepareForShutdown(0) == REDIS_OK) exit(0);\n\nredisLog(REDIS_WARNING,&amp;quot;SIGTERM received but errors trying to shut down the server, check the logs for more information&amp;quot;);\nserver.shutdown_asap = 0;\n}\n\nrun_with_period(5000) {\nfor (j = 0; j &lt; server.dbnum; j++) {\nlong long size, used, vkeys;\n\nsize = dictSlots(server.db[j].dict);\nused = dictSize(server.db[j].dict);\nvkeys = dictSize(server.db[j].expires);\n\nif (used || vkeys) {\nredisLog(REDIS_VERBOSE,&amp;quot;DB %d: %lld keys (%lld volatile) in %lld slots HT.&amp;quot;,j,used,vkeys,size);\n}\n}\n}\n\nif (!server.sentinel_mode) {\nrun_with_period(5000) {\nredisLog(REDIS_VERBOSE,\n&amp;quot;%lu clients connected (%lu slaves), %zu bytes in use&amp;quot;,\nlistLength(server.clients)-listLength(server.slaves),\nlistLength(server.slaves),\nzmalloc_used_memory());\n}\n}\nclientsCron();\ndatabasesCron();\n//在rdb和aof都没有执行的情况下，如果需要执行aof，通过通过fork子进程执行aof\nif (server.rdb_child_pid == -1 &amp;&amp; server.aof_child_pid == -1 &amp;&amp;\nserver.aof_rewrite_scheduled)\n{\nrewriteAppendOnlyFileBackground();\n}\n\n//rdb或者是aof如果正在进行，等待子进程完成，这里的wait3,使用的是unix的select方式。\nif (server.rdb_child_pid != -1 || server.aof_child_pid != -1) {\nint statloc;\npid_t pid;\n\nif ((pid = wait3(&amp;statloc,WNOHANG,NULL)) != 0) {\nint exitcode = WEXITSTATUS(statloc);\nint bysignal = 0;\nif (WIFSIGNALED(statloc)) bysignal = WTERMSIG(statloc);\n\nif (pid == server.rdb_child_pid) {\nbackgroundSaveDoneHandler(exitcode,bysignal);\n\n} else if (pid == server.aof_child_pid) {\nbackgroundRewriteDoneHandler(exitcode,bysignal);\n} else {\nredisLog(REDIS_WARNING,\n&amp;quot;Warning, detected child with unmatched pid: %ld&amp;quot;,\n(long)pid);\n}\nupdateDictResizePolicy();\n}\n} else {\nfor (j = 0; j &lt; server.saveparamslen; j++) {\nstruct saveparam *sp = server.saveparams+j;\nif (server.dirty &gt;= sp-&gt;changes &amp;&amp;\nserver.unixtime-server.lastsave &gt; sp-&gt;seconds &amp;&amp;\n(server.unixtime-server.lastbgsave_try &gt;\nREDIS_BGSAVE_RETRY_DELAY ||\nserver.lastbgsave_status == REDIS_OK))\n{\nredisLog(REDIS_NOTICE,&amp;quot;%d changes in %d seconds. Saving...&amp;quot;,\nsp-&gt;changes, (int)sp-&gt;seconds);\n// 执行 BGSAVE\nrdbSaveBackground(server.rdb_filename);\nbreak;\n}\n}\n\nif (server.rdb_child_pid == -1 &amp;&amp;\nserver.aof_child_pid == -1 &amp;&amp;\nserver.aof_rewrite_perc &amp;&amp;\n// AOF 文件的当前大小大于执行 BGREWRITEAOF 所需的最小大小\nserver.aof_current_size &gt; server.aof_rewrite_min_size)\n{\n// 上一次完成 AOF 写入之后，AOF 文件的大小\nlong long base = server.aof_rewrite_base_size ?\nserver.aof_rewrite_base_size : 1;\n\n// AOF 文件当前的体积相对于 base 的体积的百分比\nlong long growth = (server.aof_current_size*100/base) - 100;\n\n// 如果增长体积的百分比超过了 growth ，那么执行 BGREWRITEAOF\nif (growth &gt;= server.aof_rewrite_perc) {\nredisLog(REDIS_NOTICE,&amp;quot;Starting automatic rewriting of AOF on %lld%% growth&amp;quot;,growth);\n// 执行 BGREWRITEAOF\nrewriteAppendOnlyFileBackground();\n}\n}\n}\n\nif (server.aof_flush_postponed_start) flushAppendOnlyFile(0);\n\nrun_with_period(1000) {\nif (server.aof_last_write_status == REDIS_ERR)\nflushAppendOnlyFile(0);\n}\n\nfreeClientsInAsyncFreeQueue();\n\nclientsArePaused(); /* Don\'t check return value, just use the side effect. */\nrun_with_period(1000) replicationCron();\n\nrun_with_period(100) {\nif (server.cluster_enabled) clusterCron();\n}\n\nrun_with_period(100) {\nif (server.sentinel_mode) sentinelTimer();\n}\n\nrun_with_period(1000) {\nmigrateCloseTimedoutSockets();\n}\n\nserver.cronloops++;\nreturn 1000/server.hz;\n}\n[/cpp]\n','Redis 源码分析之serverCron(定时循环)解析','','inherit','open','open','','394-autosave-v1','','','2015-08-07 07:40:59','2015-08-07 07:40:59','',394,'http://unasm.sinaapp.com/?p=397',0,'revision','',0),(398,1,'2015-07-16 13:55:19','2015-07-16 13:55:19','这里其实是对 Redis.c serverCron 函数进行分析，也就是Redis的每次循环中，做的事情，innode的master thread每次做的事情也不少，I have to say.\r\n\r\n全部源码如下。\r\n[cpp]\r\nint serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {\r\n    int j;\r\n    REDIS_NOTUSED(eventLoop);\r\n    REDIS_NOTUSED(id);\r\n    REDIS_NOTUSED(clientData);\r\n\r\n    if (server.watchdog_period) watchdogScheduleSignal(server.watchdog_period);\r\n\r\n    updateCachedTime();\r\n\r\n    run_with_period(100) trackOperationsPerSecond();\r\n    server.lruclock = getLRUClock();\r\n\r\n    if (zmalloc_used_memory() &gt; server.stat_peak_memory)\r\n        server.stat_peak_memory = zmalloc_used_memory();\r\n\r\n    server.resident_set_size = zmalloc_get_rss();\r\n\r\n    if (server.shutdown_asap) {\r\n        if (prepareForShutdown(0) == REDIS_OK) exit(0);\r\n\r\n        redisLog(REDIS_WARNING,&quot;SIGTERM received but errors trying to shut down the server, check the logs for more information&quot;);\r\n        server.shutdown_asap = 0;\r\n    }\r\n\r\n    run_with_period(5000) {\r\n        for (j = 0; j &lt; server.dbnum; j++) {\r\n            long long size, used, vkeys;\r\n\r\n            size = dictSlots(server.db[j].dict);\r\n            used = dictSize(server.db[j].dict);\r\n            vkeys = dictSize(server.db[j].expires);\r\n\r\n            if (used || vkeys) {\r\n                redisLog(REDIS_VERBOSE,&quot;DB %d: %lld keys (%lld volatile) in %lld slots HT.&quot;,j,used,vkeys,size);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!server.sentinel_mode) {\r\n        run_with_period(5000) {\r\n            redisLog(REDIS_VERBOSE,\r\n                &quot;%lu clients connected (%lu slaves), %zu bytes in use&quot;,\r\n                listLength(server.clients)-listLength(server.slaves),\r\n                listLength(server.slaves),\r\n                zmalloc_used_memory());\r\n        }\r\n    }\r\n    clientsCron();\r\n    databasesCron();\r\n    if (server.rdb_child_pid == -1 &amp;&amp; server.aof_child_pid == -1 &amp;&amp;\r\n        server.aof_rewrite_scheduled)\r\n    {\r\n        rewriteAppendOnlyFileBackground();\r\n    }\r\n\r\n    if (server.rdb_child_pid != -1 || server.aof_child_pid != -1) {\r\n        int statloc;\r\n        pid_t pid;\r\n\r\n        if ((pid = wait3(&amp;statloc,WNOHANG,NULL)) != 0) {\r\n            int exitcode = WEXITSTATUS(statloc);\r\n            int bysignal = 0;\r\n            if (WIFSIGNALED(statloc)) bysignal = WTERMSIG(statloc);\r\n\r\n            if (pid == server.rdb_child_pid) {\r\n                backgroundSaveDoneHandler(exitcode,bysignal);\r\n\r\n            } else if (pid == server.aof_child_pid) {\r\n                backgroundRewriteDoneHandler(exitcode,bysignal);\r\n            } else {\r\n                redisLog(REDIS_WARNING,\r\n                    &quot;Warning, detected child with unmatched pid: %ld&quot;,\r\n                    (long)pid);\r\n            }\r\n            updateDictResizePolicy();\r\n        }\r\n    } else {\r\n         for (j = 0; j &lt; server.saveparamslen; j++) {\r\n            struct saveparam *sp = server.saveparams+j;\r\n            if (server.dirty &gt;= sp-&gt;changes &amp;&amp;\r\n                server.unixtime-server.lastsave &gt; sp-&gt;seconds &amp;&amp;\r\n                (server.unixtime-server.lastbgsave_try &gt;\r\n                 REDIS_BGSAVE_RETRY_DELAY ||\r\n                 server.lastbgsave_status == REDIS_OK))\r\n            {\r\n                redisLog(REDIS_NOTICE,&quot;%d changes in %d seconds. Saving...&quot;,\r\n                    sp-&gt;changes, (int)sp-&gt;seconds);\r\n                // 执行 BGSAVE\r\n                rdbSaveBackground(server.rdb_filename);\r\n                break;\r\n            }\r\n         }\r\n\r\n         if (server.rdb_child_pid == -1 &amp;&amp;\r\n             server.aof_child_pid == -1 &amp;&amp;\r\n             server.aof_rewrite_perc &amp;&amp;\r\n             // AOF 文件的当前大小大于执行 BGREWRITEAOF 所需的最小大小\r\n             server.aof_current_size &gt; server.aof_rewrite_min_size)\r\n         {\r\n            // 上一次完成 AOF 写入之后，AOF 文件的大小\r\n            long long base = server.aof_rewrite_base_size ?\r\n                            server.aof_rewrite_base_size : 1;\r\n\r\n            // AOF 文件当前的体积相对于 base 的体积的百分比\r\n            long long growth = (server.aof_current_size*100/base) - 100;\r\n\r\n            // 如果增长体积的百分比超过了 growth ，那么执行 BGREWRITEAOF\r\n            if (growth &gt;= server.aof_rewrite_perc) {\r\n                redisLog(REDIS_NOTICE,&quot;Starting automatic rewriting of AOF on %lld%% growth&quot;,growth);\r\n                // 执行 BGREWRITEAOF\r\n                rewriteAppendOnlyFileBackground();\r\n            }\r\n         }\r\n    }\r\n\r\n    if (server.aof_flush_postponed_start) flushAppendOnlyFile(0);\r\n\r\n    run_with_period(1000) {\r\n        if (server.aof_last_write_status == REDIS_ERR)\r\n            flushAppendOnlyFile(0);\r\n    }\r\n\r\n    freeClientsInAsyncFreeQueue();\r\n\r\n    clientsArePaused(); /* Don\'t check return value, just use the side effect. */\r\n    run_with_period(1000) replicationCron();\r\n\r\n    run_with_period(100) {\r\n        if (server.cluster_enabled) clusterCron();\r\n    }\r\n\r\n    run_with_period(100) {\r\n        if (server.sentinel_mode) sentinelTimer();\r\n    }\r\n\r\n    run_with_period(1000) {\r\n        migrateCloseTimedoutSockets();\r\n    }\r\n\r\n    server.cronloops++;\r\n    return 1000/server.hz;\r\n}\r\n[/cpp]','Redis 定时循环执行任务(serverCron解析)','','inherit','open','open','','394-revision-v1','','','2015-07-16 13:55:19','2015-07-16 13:55:19','',394,'http://unasm.sinaapp.com/?p=398',0,'revision','',0),(399,1,'2015-07-16 13:57:35','2015-07-16 13:57:35','这里其实是对 Redis.c serverCron 函数进行分析，也就是Redis的每次循环中，做的事情，innode的master thread每次做的事情也不少，I have to say.\r\n\r\n首先从入门的REDIS_NOTUSED开始，REDIS_NOTUSED是一个宏定义，就是将声明而未使用的警告去除，serverCron的三个参数，在函数内部都没有被使用，会有警告出来，所以使用REDIS_NOTUSED去除，居然不使用，为什么还传递这三个参数呢?\r\n全部源码如下。\r\n[cpp]\r\nint serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {\r\n    int j;\r\n    REDIS_NOTUSED(eventLoop);\r\n    REDIS_NOTUSED(id);\r\n    REDIS_NOTUSED(clientData);\r\n\r\n    if (server.watchdog_period) watchdogScheduleSignal(server.watchdog_period);\r\n\r\n    updateCachedTime();\r\n\r\n    run_with_period(100) trackOperationsPerSecond();\r\n    server.lruclock = getLRUClock();\r\n\r\n    if (zmalloc_used_memory() &gt; server.stat_peak_memory)\r\n        server.stat_peak_memory = zmalloc_used_memory();\r\n\r\n    server.resident_set_size = zmalloc_get_rss();\r\n\r\n    if (server.shutdown_asap) {\r\n        if (prepareForShutdown(0) == REDIS_OK) exit(0);\r\n\r\n        redisLog(REDIS_WARNING,&quot;SIGTERM received but errors trying to shut down the server, check the logs for more information&quot;);\r\n        server.shutdown_asap = 0;\r\n    }\r\n\r\n    run_with_period(5000) {\r\n        for (j = 0; j &lt; server.dbnum; j++) {\r\n            long long size, used, vkeys;\r\n\r\n            size = dictSlots(server.db[j].dict);\r\n            used = dictSize(server.db[j].dict);\r\n            vkeys = dictSize(server.db[j].expires);\r\n\r\n            if (used || vkeys) {\r\n                redisLog(REDIS_VERBOSE,&quot;DB %d: %lld keys (%lld volatile) in %lld slots HT.&quot;,j,used,vkeys,size);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!server.sentinel_mode) {\r\n        run_with_period(5000) {\r\n            redisLog(REDIS_VERBOSE,\r\n                &quot;%lu clients connected (%lu slaves), %zu bytes in use&quot;,\r\n                listLength(server.clients)-listLength(server.slaves),\r\n                listLength(server.slaves),\r\n                zmalloc_used_memory());\r\n        }\r\n    }\r\n    clientsCron();\r\n    databasesCron();\r\n    if (server.rdb_child_pid == -1 &amp;&amp; server.aof_child_pid == -1 &amp;&amp;\r\n        server.aof_rewrite_scheduled)\r\n    {\r\n        rewriteAppendOnlyFileBackground();\r\n    }\r\n\r\n    if (server.rdb_child_pid != -1 || server.aof_child_pid != -1) {\r\n        int statloc;\r\n        pid_t pid;\r\n\r\n        if ((pid = wait3(&amp;statloc,WNOHANG,NULL)) != 0) {\r\n            int exitcode = WEXITSTATUS(statloc);\r\n            int bysignal = 0;\r\n            if (WIFSIGNALED(statloc)) bysignal = WTERMSIG(statloc);\r\n\r\n            if (pid == server.rdb_child_pid) {\r\n                backgroundSaveDoneHandler(exitcode,bysignal);\r\n\r\n            } else if (pid == server.aof_child_pid) {\r\n                backgroundRewriteDoneHandler(exitcode,bysignal);\r\n            } else {\r\n                redisLog(REDIS_WARNING,\r\n                    &quot;Warning, detected child with unmatched pid: %ld&quot;,\r\n                    (long)pid);\r\n            }\r\n            updateDictResizePolicy();\r\n        }\r\n    } else {\r\n         for (j = 0; j &lt; server.saveparamslen; j++) {\r\n            struct saveparam *sp = server.saveparams+j;\r\n            if (server.dirty &gt;= sp-&gt;changes &amp;&amp;\r\n                server.unixtime-server.lastsave &gt; sp-&gt;seconds &amp;&amp;\r\n                (server.unixtime-server.lastbgsave_try &gt;\r\n                 REDIS_BGSAVE_RETRY_DELAY ||\r\n                 server.lastbgsave_status == REDIS_OK))\r\n            {\r\n                redisLog(REDIS_NOTICE,&quot;%d changes in %d seconds. Saving...&quot;,\r\n                    sp-&gt;changes, (int)sp-&gt;seconds);\r\n                // 执行 BGSAVE\r\n                rdbSaveBackground(server.rdb_filename);\r\n                break;\r\n            }\r\n         }\r\n\r\n         if (server.rdb_child_pid == -1 &amp;&amp;\r\n             server.aof_child_pid == -1 &amp;&amp;\r\n             server.aof_rewrite_perc &amp;&amp;\r\n             // AOF 文件的当前大小大于执行 BGREWRITEAOF 所需的最小大小\r\n             server.aof_current_size &gt; server.aof_rewrite_min_size)\r\n         {\r\n            // 上一次完成 AOF 写入之后，AOF 文件的大小\r\n            long long base = server.aof_rewrite_base_size ?\r\n                            server.aof_rewrite_base_size : 1;\r\n\r\n            // AOF 文件当前的体积相对于 base 的体积的百分比\r\n            long long growth = (server.aof_current_size*100/base) - 100;\r\n\r\n            // 如果增长体积的百分比超过了 growth ，那么执行 BGREWRITEAOF\r\n            if (growth &gt;= server.aof_rewrite_perc) {\r\n                redisLog(REDIS_NOTICE,&quot;Starting automatic rewriting of AOF on %lld%% growth&quot;,growth);\r\n                // 执行 BGREWRITEAOF\r\n                rewriteAppendOnlyFileBackground();\r\n            }\r\n         }\r\n    }\r\n\r\n    if (server.aof_flush_postponed_start) flushAppendOnlyFile(0);\r\n\r\n    run_with_period(1000) {\r\n        if (server.aof_last_write_status == REDIS_ERR)\r\n            flushAppendOnlyFile(0);\r\n    }\r\n\r\n    freeClientsInAsyncFreeQueue();\r\n\r\n    clientsArePaused(); /* Don\'t check return value, just use the side effect. */\r\n    run_with_period(1000) replicationCron();\r\n\r\n    run_with_period(100) {\r\n        if (server.cluster_enabled) clusterCron();\r\n    }\r\n\r\n    run_with_period(100) {\r\n        if (server.sentinel_mode) sentinelTimer();\r\n    }\r\n\r\n    run_with_period(1000) {\r\n        migrateCloseTimedoutSockets();\r\n    }\r\n\r\n    server.cronloops++;\r\n    return 1000/server.hz;\r\n}\r\n[/cpp]','Redis 定时循环执行任务(serverCron解析)','','inherit','open','open','','394-revision-v1','','','2015-07-16 13:57:35','2015-07-16 13:57:35','',394,'http://unasm.sinaapp.com/?p=399',0,'revision','',0),(401,1,'2015-07-17 07:26:51','2015-07-17 07:26:51','这里其实是对 Redis.c serverCron 函数进行分析，也就是Redis的每次循环中，做的事情，innode的master thread每次做的事情也不少，I have to say.\r\n\r\n首先从入门的REDIS_NOTUSED开始，REDIS_NOTUSED是一个宏定义，就是将声明而未使用的警告去除，serverCron的三个参数，在函数内部都没有被使用，会有警告出来，所以使用REDIS_NOTUSED去除，不使用，为什么还传递这三个参数呢?\r\n全部源码如下。\r\n\r\n[cpp]\r\nint serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {\r\n    int j;\r\n    REDIS_NOTUSED(eventLoop);\r\n    REDIS_NOTUSED(id);\r\n    REDIS_NOTUSED(clientData);\r\n\r\n    if (server.watchdog_period) watchdogScheduleSignal(server.watchdog_period);\r\n\r\n    updateCachedTime();\r\n\r\n    run_with_period(100) trackOperationsPerSecond();\r\n    server.lruclock = getLRUClock();\r\n\r\n    if (zmalloc_used_memory() &gt; server.stat_peak_memory)\r\n        server.stat_peak_memory = zmalloc_used_memory();\r\n\r\n    server.resident_set_size = zmalloc_get_rss();\r\n\r\n    if (server.shutdown_asap) {\r\n        if (prepareForShutdown(0) == REDIS_OK) exit(0);\r\n\r\n        redisLog(REDIS_WARNING,&quot;SIGTERM received but errors trying to shut down the server, check the logs for more information&quot;);\r\n        server.shutdown_asap = 0;\r\n    }\r\n\r\n    run_with_period(5000) {\r\n        for (j = 0; j &lt; server.dbnum; j++) {\r\n            long long size, used, vkeys;\r\n\r\n            size = dictSlots(server.db[j].dict);\r\n            used = dictSize(server.db[j].dict);\r\n            vkeys = dictSize(server.db[j].expires);\r\n\r\n            if (used || vkeys) {\r\n                redisLog(REDIS_VERBOSE,&quot;DB %d: %lld keys (%lld volatile) in %lld slots HT.&quot;,j,used,vkeys,size);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!server.sentinel_mode) {\r\n        run_with_period(5000) {\r\n            redisLog(REDIS_VERBOSE,\r\n                &quot;%lu clients connected (%lu slaves), %zu bytes in use&quot;,\r\n                listLength(server.clients)-listLength(server.slaves),\r\n                listLength(server.slaves),\r\n                zmalloc_used_memory());\r\n        }\r\n    }\r\n    clientsCron();\r\n    databasesCron();\r\n    if (server.rdb_child_pid == -1 &amp;&amp; server.aof_child_pid == -1 &amp;&amp;\r\n        server.aof_rewrite_scheduled)\r\n    {\r\n        rewriteAppendOnlyFileBackground();\r\n    }\r\n\r\n    if (server.rdb_child_pid != -1 || server.aof_child_pid != -1) {\r\n        int statloc;\r\n        pid_t pid;\r\n\r\n        if ((pid = wait3(&amp;statloc,WNOHANG,NULL)) != 0) {\r\n            int exitcode = WEXITSTATUS(statloc);\r\n            int bysignal = 0;\r\n            if (WIFSIGNALED(statloc)) bysignal = WTERMSIG(statloc);\r\n\r\n            if (pid == server.rdb_child_pid) {\r\n                backgroundSaveDoneHandler(exitcode,bysignal);\r\n\r\n            } else if (pid == server.aof_child_pid) {\r\n                backgroundRewriteDoneHandler(exitcode,bysignal);\r\n            } else {\r\n                redisLog(REDIS_WARNING,\r\n                    &quot;Warning, detected child with unmatched pid: %ld&quot;,\r\n                    (long)pid);\r\n            }\r\n            updateDictResizePolicy();\r\n        }\r\n    } else {\r\n         for (j = 0; j &lt; server.saveparamslen; j++) {\r\n            struct saveparam *sp = server.saveparams+j;\r\n            if (server.dirty &gt;= sp-&gt;changes &amp;&amp;\r\n                server.unixtime-server.lastsave &gt; sp-&gt;seconds &amp;&amp;\r\n                (server.unixtime-server.lastbgsave_try &gt;\r\n                 REDIS_BGSAVE_RETRY_DELAY ||\r\n                 server.lastbgsave_status == REDIS_OK))\r\n            {\r\n                redisLog(REDIS_NOTICE,&quot;%d changes in %d seconds. Saving...&quot;,\r\n                    sp-&gt;changes, (int)sp-&gt;seconds);\r\n                // 执行 BGSAVE\r\n                rdbSaveBackground(server.rdb_filename);\r\n                break;\r\n            }\r\n         }\r\n\r\n         if (server.rdb_child_pid == -1 &amp;&amp;\r\n             server.aof_child_pid == -1 &amp;&amp;\r\n             server.aof_rewrite_perc &amp;&amp;\r\n             // AOF 文件的当前大小大于执行 BGREWRITEAOF 所需的最小大小\r\n             server.aof_current_size &gt; server.aof_rewrite_min_size)\r\n         {\r\n            // 上一次完成 AOF 写入之后，AOF 文件的大小\r\n            long long base = server.aof_rewrite_base_size ?\r\n                            server.aof_rewrite_base_size : 1;\r\n\r\n            // AOF 文件当前的体积相对于 base 的体积的百分比\r\n            long long growth = (server.aof_current_size*100/base) - 100;\r\n\r\n            // 如果增长体积的百分比超过了 growth ，那么执行 BGREWRITEAOF\r\n            if (growth &gt;= server.aof_rewrite_perc) {\r\n                redisLog(REDIS_NOTICE,&quot;Starting automatic rewriting of AOF on %lld%% growth&quot;,growth);\r\n                // 执行 BGREWRITEAOF\r\n                rewriteAppendOnlyFileBackground();\r\n            }\r\n         }\r\n    }\r\n\r\n    if (server.aof_flush_postponed_start) flushAppendOnlyFile(0);\r\n\r\n    run_with_period(1000) {\r\n        if (server.aof_last_write_status == REDIS_ERR)\r\n            flushAppendOnlyFile(0);\r\n    }\r\n\r\n    freeClientsInAsyncFreeQueue();\r\n\r\n    clientsArePaused(); /* Don\'t check return value, just use the side effect. */\r\n    run_with_period(1000) replicationCron();\r\n\r\n    run_with_period(100) {\r\n        if (server.cluster_enabled) clusterCron();\r\n    }\r\n\r\n    run_with_period(100) {\r\n        if (server.sentinel_mode) sentinelTimer();\r\n    }\r\n\r\n    run_with_period(1000) {\r\n        migrateCloseTimedoutSockets();\r\n    }\r\n\r\n    server.cronloops++;\r\n    return 1000/server.hz;\r\n}\r\n[/cpp]\r\n','Redis 定时循环执行任务(serverCron解析)','','inherit','open','open','','394-revision-v1','','','2015-07-17 07:26:51','2015-07-17 07:26:51','',394,'http://unasm.com/2015/07/401/',0,'revision','',0),(403,1,'2015-07-21 09:23:49','2015-07-21 09:23:49','这里其实是对 Redis.c serverCron 函数进行分析，也就是Redis的每次循环中，做的事情，innode的master thread每次做的事情也不少，I have to say.\r\n\r\n首先从入门的REDIS_NOTUSED开始，REDIS_NOTUSED是一个宏定义，就是将声明而未使用的警告去除，serverCron的三个参数，在函数内部都没有被使用，会有警告出来，所以使用REDIS_NOTUSED去除，不使用，为什么还传递这三个参数呢?\r\n全部源码如下。\r\n\r\nwatchdogScheduleSignal的作用是防止超时，一旦超过server.watchdog_period ,通过setitimer函数，超时的时候，进程会收到一个SIGALRM信号。\r\n\r\n之后是updateCachedTime(),该函数将时间保存在全局变量里面，在不精确的时候，通过读取该时间，节省时间，加快速度。\r\n<pre>getLRUClock()函数如下</pre>\r\n\r\n[cpp]&lt;/pre&gt;\r\n&lt;pre&gt; return (mstime()/REDIS_LRU_CLOCK_RESOLUTION) &amp; REDIS_LRU_CLOCK_MAX;\r\n[/cpp]\r\n\r\n\r\n翻译出来就是(mstime() / 1000) &amp; ( (1 &lt;&lt; 24 )- 1),这个时间，大概是380天的样子,lruclock每380天一个轮回。\r\nRSS 分析是什么，能吃么？\r\n如果之前收到了 <span class=\"s1\">SIGT</span><span class=\"s2\">E</span><span class=\"s1\">RM 信号，并不会立即做什么事情，只是将</span><span class=\"s1\">server.shutdown_as</span><span class=\"s2\">a</span><span class=\"s1\">p 置位</span>，这里判断shutdown_asap , 调用<span class=\"s1\">prepareForShut</span><span class=\"s2\">d</span><span class=\"s1\">own ,</span>关闭服务器，退出执行。但是如果没有退出成功，就不退出了，打印Log，然后移除标志位。\r\n\r\n每50s，打印全部数据库的键值对过期键的数量。\r\n\r\n如果不是出于哨兵模式，每50s，将客户端的连接输出一遍，因为出于哨兵模式的时候，服务器所做的事情，就是监控其他服务器是否正常，它的客户端，就是几个固定的服务器 ，并没有打印客户端连接的必要。\r\n\r\nclientsCron(),检查所有的客户端连接，是否有可以释放的，每次至少检查50个客户端，如果符合以下条件，就断开客户端连接。\r\nredis越来越复杂了。\r\n\r\n[cpp]\r\nif (server.maxidletime &amp;&amp;\r\n// 不检查作为从服务器的客户端\r\n!(c-&gt;flags &amp; REDIS_SLAVE) &amp;&amp;\r\n// 不检查作为主服务器的客户端\r\n!(c-&gt;flags &amp; REDIS_MASTER) &amp;&amp;\r\n// 不检查被阻塞的客户端\r\n!(c-&gt;flags &amp; REDIS_BLOCKED) &amp;&amp;\r\n// 不检查订阅了频道的客户端\r\ndictSize(c-&gt;pubsub_channels) == 0 &amp;&amp;\r\n// 不检查订阅了模式的客户端,因为可能是监控器？？？\r\nlistLength(c-&gt;pubsub_patterns) == 0 &amp;&amp;\r\n// 客户端最后一次与服务器通讯的时间已经超过了 maxidletime 时间\r\n(now - c-&gt;lastinteraction &gt; server.maxidletime))\r\n[/cpp]\r\n\r\n\r\n同时检查这些客户端是不是可以缩小查询缓冲，节省内存。\r\n<p class=\"p1\"><span class=\"s1\">当 1.查询缓冲区的大小大于 BIG_ARG 以及 querybuf_peak ，2.</span>客户端不活跃，并且缓冲区大于 1k的时候，减小缓冲区。怎么判断是否活跃呢，超过2s内没有任何交互，就判断为不活跃。</p>\r\n下个函数，databasesCron(),定时脚本中，需要对db进行的操作,包括清除过期键以及判断是否需要rehash\r\n\r\n检查aof和rdb是否进行的时候，使用了wait3(&statloc,WNOHANG,NULL))\r\nWNOHANG:return immediately if no child has exited。非阻塞的方式查询子进程是否完成，而是通过每次cron查询的方式，大概是要做的事情太多了吧。rdb或者aof完成之后，执行backgroundSaveDoneHandler(exitcode,bysignal) 或者是 backgroundRewriteDoneHandler(exitcode,bysignal)\r\n\r\n\r\n如果server.aof_flush_postponed_start置位，也即是每秒刷新aof文件，则刷新aof文件。\r\n[cpp]\r\nint serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {\r\nint j;\r\nREDIS_NOTUSED(eventLoop);\r\nREDIS_NOTUSED(id);\r\nREDIS_NOTUSED(clientData);\r\n\r\nif (server.watchdog_period) watchdogScheduleSignal(server.watchdog_period);\r\n\r\nupdateCachedTime();\r\n\r\n//保存每秒执行的命令数量\r\nrun_with_period(100) trackOperationsPerSecond();\r\nserver.lruclock = getLRUClock();\r\n\r\nif (zmalloc_used_memory() &gt; server.stat_peak_memory)\r\nserver.stat_peak_memory = zmalloc_used_memory();\r\n\r\nserver.resident_set_size = zmalloc_get_rss();\r\n\r\nif (server.shutdown_asap) {\r\nif (prepareForShutdown(0) == REDIS_OK) exit(0);\r\n\r\nredisLog(REDIS_WARNING,&amp;quot;SIGTERM received but errors trying to shut down the server, check the logs for more information&amp;quot;);\r\nserver.shutdown_asap = 0;\r\n}\r\n\r\nrun_with_period(5000) {\r\nfor (j = 0; j &lt; server.dbnum; j++) {\r\nlong long size, used, vkeys;\r\n\r\nsize = dictSlots(server.db[j].dict);\r\nused = dictSize(server.db[j].dict);\r\nvkeys = dictSize(server.db[j].expires);\r\n\r\nif (used || vkeys) {\r\nredisLog(REDIS_VERBOSE,&amp;quot;DB %d: %lld keys (%lld volatile) in %lld slots HT.&amp;quot;,j,used,vkeys,size);\r\n}\r\n}\r\n}\r\n\r\nif (!server.sentinel_mode) {\r\nrun_with_period(5000) {\r\nredisLog(REDIS_VERBOSE,\r\n&amp;quot;%lu clients connected (%lu slaves), %zu bytes in use&amp;quot;,\r\nlistLength(server.clients)-listLength(server.slaves),\r\nlistLength(server.slaves),\r\nzmalloc_used_memory());\r\n}\r\n}\r\nclientsCron();\r\ndatabasesCron();\r\n//在rdb和aof都没有执行的情况下，如果需要执行aof，通过通过fork子进程执行aof\r\nif (server.rdb_child_pid == -1 &amp;&amp; server.aof_child_pid == -1 &amp;&amp;\r\nserver.aof_rewrite_scheduled)\r\n{\r\nrewriteAppendOnlyFileBackground();\r\n}\r\n\r\n//rdb或者是aof如果正在进行，等待子进程完成，这里的wait3,使用的是unix的select方式。\r\nif (server.rdb_child_pid != -1 || server.aof_child_pid != -1) {\r\nint statloc;\r\npid_t pid;\r\n\r\nif ((pid = wait3(&amp;statloc,WNOHANG,NULL)) != 0) {\r\nint exitcode = WEXITSTATUS(statloc);\r\nint bysignal = 0;\r\nif (WIFSIGNALED(statloc)) bysignal = WTERMSIG(statloc);\r\n\r\nif (pid == server.rdb_child_pid) {\r\nbackgroundSaveDoneHandler(exitcode,bysignal);\r\n\r\n} else if (pid == server.aof_child_pid) {\r\nbackgroundRewriteDoneHandler(exitcode,bysignal);\r\n} else {\r\nredisLog(REDIS_WARNING,\r\n&amp;quot;Warning, detected child with unmatched pid: %ld&amp;quot;,\r\n(long)pid);\r\n}\r\nupdateDictResizePolicy();\r\n}\r\n} else {\r\nfor (j = 0; j &lt; server.saveparamslen; j++) {\r\nstruct saveparam *sp = server.saveparams+j;\r\nif (server.dirty &gt;= sp-&gt;changes &amp;&amp;\r\nserver.unixtime-server.lastsave &gt; sp-&gt;seconds &amp;&amp;\r\n(server.unixtime-server.lastbgsave_try &gt;\r\nREDIS_BGSAVE_RETRY_DELAY ||\r\nserver.lastbgsave_status == REDIS_OK))\r\n{\r\nredisLog(REDIS_NOTICE,&amp;quot;%d changes in %d seconds. Saving...&amp;quot;,\r\nsp-&gt;changes, (int)sp-&gt;seconds);\r\n// 执行 BGSAVE\r\nrdbSaveBackground(server.rdb_filename);\r\nbreak;\r\n}\r\n}\r\n\r\nif (server.rdb_child_pid == -1 &amp;&amp;\r\nserver.aof_child_pid == -1 &amp;&amp;\r\nserver.aof_rewrite_perc &amp;&amp;\r\n// AOF 文件的当前大小大于执行 BGREWRITEAOF 所需的最小大小\r\nserver.aof_current_size &gt; server.aof_rewrite_min_size)\r\n{\r\n// 上一次完成 AOF 写入之后，AOF 文件的大小\r\nlong long base = server.aof_rewrite_base_size ?\r\nserver.aof_rewrite_base_size : 1;\r\n\r\n// AOF 文件当前的体积相对于 base 的体积的百分比\r\nlong long growth = (server.aof_current_size*100/base) - 100;\r\n\r\n// 如果增长体积的百分比超过了 growth ，那么执行 BGREWRITEAOF\r\nif (growth &gt;= server.aof_rewrite_perc) {\r\nredisLog(REDIS_NOTICE,&amp;quot;Starting automatic rewriting of AOF on %lld%% growth&amp;quot;,growth);\r\n// 执行 BGREWRITEAOF\r\nrewriteAppendOnlyFileBackground();\r\n}\r\n}\r\n}\r\n\r\nif (server.aof_flush_postponed_start) flushAppendOnlyFile(0);\r\n\r\nrun_with_period(1000) {\r\nif (server.aof_last_write_status == REDIS_ERR)\r\nflushAppendOnlyFile(0);\r\n}\r\n\r\nfreeClientsInAsyncFreeQueue();\r\n\r\nclientsArePaused(); /* Don\'t check return value, just use the side effect. */\r\nrun_with_period(1000) replicationCron();\r\n\r\nrun_with_period(100) {\r\nif (server.cluster_enabled) clusterCron();\r\n}\r\n\r\nrun_with_period(100) {\r\nif (server.sentinel_mode) sentinelTimer();\r\n}\r\n\r\nrun_with_period(1000) {\r\nmigrateCloseTimedoutSockets();\r\n}\r\n\r\nserver.cronloops++;\r\nreturn 1000/server.hz;\r\n}\r\n[/cpp]','Redis 定时循环执行任务(serverCron解析)','','inherit','open','open','','394-revision-v1','','','2015-07-21 09:23:49','2015-07-21 09:23:49','',394,'http://unasm.com/2015/07/403/',0,'revision','',0),(402,1,'2015-07-21 08:50:12','2015-07-21 08:50:12','这里其实是对 Redis.c serverCron 函数进行分析，也就是Redis的每次循环中，做的事情，innode的master thread每次做的事情也不少，I have to say.\r\n\r\n首先从入门的REDIS_NOTUSED开始，REDIS_NOTUSED是一个宏定义，就是将声明而未使用的警告去除，serverCron的三个参数，在函数内部都没有被使用，会有警告出来，所以使用REDIS_NOTUSED去除，不使用，为什么还传递这三个参数呢?\r\n全部源码如下。\r\n\r\nwatchdogScheduleSignal的作用是防止超时，一旦超过server.watchdog_period ,通过setitimer函数，超时的时候，进程会收到一个SIGALRM信号。\r\n\r\n之后是updateCachedTime(),该函数将时间保存在全局变量里面，在不精确的时候，通过读取该时间，节省时间，加快速度。\r\n<pre>getLRUClock()函数如下</pre>\r\n\r\n[cpp]&lt;/pre&gt;\r\n&lt;pre&gt; return (mstime()/REDIS_LRU_CLOCK_RESOLUTION) &amp; REDIS_LRU_CLOCK_MAX;\r\n[/cpp]\r\n\r\n翻译出来就是(mstime() / 1000) &amp; ( (1 &lt;&lt; 24 )- 1),这个时间，大概是380天的样子,lruclock每380天一个轮回。\r\nRSS 分析是什么，能吃么？\r\n如果之前收到了 <span class=\"s1\">SIGT</span><span class=\"s2\">E</span><span class=\"s1\">RM 信号，并不会立即做什么事情，只是将</span><span class=\"s1\">server.shutdown_as</span><span class=\"s2\">a</span><span class=\"s1\">p 置位</span>，这里判断shutdown_asap , 调用<span class=\"s1\">prepareForShut</span><span class=\"s2\">d</span><span class=\"s1\">own ,</span>关闭服务器，退出执行。但是如果没有退出成功，就不退出了，打印Log，然后移除标志位。\r\n\r\n每50s，打印全部数据库的键值对过期键的数量。\r\n\r\n如果不是出于哨兵模式，每50s，将客户端的连接输出一遍，因为出于哨兵模式的时候，服务器所做的事情，就是监控其他服务器是否正常，它的客户端，就是几个固定的服务器 ，并没有打印客户端连接的必要。\r\n\r\n检查所有的客户端连接，是否有可以释放的，每次至少检查50个客户端，如果符合以下条件，就断开客户端连接。\r\nredis越来越复杂了。\r\n\r\n[cpp]\r\n  if (server.maxidletime &amp;&amp;\r\n        // 不检查作为从服务器的客户端\r\n        !(c-&gt;flags &amp; REDIS_SLAVE) &amp;&amp;  \r\n        // 不检查作为主服务器的客户端\r\n        !(c-&gt;flags &amp; REDIS_MASTER) &amp;&amp;  \r\n        // 不检查被阻塞的客户端\r\n        !(c-&gt;flags &amp; REDIS_BLOCKED) &amp;&amp;\r\n        // 不检查订阅了频道的客户端\r\n        dictSize(c-&gt;pubsub_channels) == 0 &amp;&amp; \r\n        // 不检查订阅了模式的客户端,因为可能是监控器？？？\r\n        listLength(c-&gt;pubsub_patterns) == 0 &amp;&amp; \r\n        // 客户端最后一次与服务器通讯的时间已经超过了 maxidletime 时间\r\n        (now - c-&gt;lastinteraction &gt; server.maxidletime))\r\n[/cpp]\r\n\r\n同时检查这些客户端是不是可以缩小查询缓冲，节省内存。\r\n<p class=\"p1\"><span class=\"s1\">当 1.查询缓冲区的大小大于 BIG_ARG 以及 querybuf_peak ，2.</span>客户端不活跃，并且缓冲区大于 1k的时候，减小缓冲区。怎么判断是否活跃呢，超过2s内没有任何交互，就判断为不活跃。</p>\r\n\r\n\r\n[cpp]\r\nint serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {\r\n    int j;\r\n    REDIS_NOTUSED(eventLoop);\r\n    REDIS_NOTUSED(id);\r\n    REDIS_NOTUSED(clientData);\r\n\r\n    if (server.watchdog_period) watchdogScheduleSignal(server.watchdog_period);\r\n\r\n    updateCachedTime();\r\n\r\n    //保存每秒执行的命令数量\r\n    run_with_period(100) trackOperationsPerSecond();\r\n    server.lruclock = getLRUClock();\r\n\r\n    if (zmalloc_used_memory() &gt; server.stat_peak_memory)\r\n        server.stat_peak_memory = zmalloc_used_memory();\r\n\r\n    server.resident_set_size = zmalloc_get_rss();\r\n\r\n    if (server.shutdown_asap) {\r\n        if (prepareForShutdown(0) == REDIS_OK) exit(0);\r\n\r\n        redisLog(REDIS_WARNING,&quot;SIGTERM received but errors trying to shut down the server, check the logs for more information&quot;);\r\n        server.shutdown_asap = 0;\r\n    }\r\n\r\n    run_with_period(5000) {\r\n        for (j = 0; j &lt; server.dbnum; j++) {\r\n            long long size, used, vkeys;\r\n\r\n            size = dictSlots(server.db[j].dict);\r\n            used = dictSize(server.db[j].dict);\r\n            vkeys = dictSize(server.db[j].expires);\r\n\r\n            if (used || vkeys) {\r\n                redisLog(REDIS_VERBOSE,&quot;DB %d: %lld keys (%lld volatile) in %lld slots HT.&quot;,j,used,vkeys,size);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!server.sentinel_mode) {\r\n        run_with_period(5000) {\r\n            redisLog(REDIS_VERBOSE,\r\n                &quot;%lu clients connected (%lu slaves), %zu bytes in use&quot;,\r\n                listLength(server.clients)-listLength(server.slaves),\r\n                listLength(server.slaves),\r\n                zmalloc_used_memory());\r\n        }\r\n    }\r\n    clientsCron();\r\n    databasesCron();\r\n    if (server.rdb_child_pid == -1 &amp;&amp; server.aof_child_pid == -1 &amp;&amp;\r\n        server.aof_rewrite_scheduled)\r\n    {\r\n        rewriteAppendOnlyFileBackground();\r\n    }\r\n\r\n    if (server.rdb_child_pid != -1 || server.aof_child_pid != -1) {\r\n        int statloc;\r\n        pid_t pid;\r\n\r\n        if ((pid = wait3(&amp;statloc,WNOHANG,NULL)) != 0) {\r\n            int exitcode = WEXITSTATUS(statloc);\r\n            int bysignal = 0;\r\n            if (WIFSIGNALED(statloc)) bysignal = WTERMSIG(statloc);\r\n\r\n            if (pid == server.rdb_child_pid) {\r\n                backgroundSaveDoneHandler(exitcode,bysignal);\r\n\r\n            } else if (pid == server.aof_child_pid) {\r\n                backgroundRewriteDoneHandler(exitcode,bysignal);\r\n            } else {\r\n                redisLog(REDIS_WARNING,\r\n                    &quot;Warning, detected child with unmatched pid: %ld&quot;,\r\n                    (long)pid);\r\n            }\r\n            updateDictResizePolicy();\r\n        }\r\n    } else {\r\n         for (j = 0; j &lt; server.saveparamslen; j++) {\r\n            struct saveparam *sp = server.saveparams+j;\r\n            if (server.dirty &gt;= sp-&gt;changes &amp;&amp;\r\n                server.unixtime-server.lastsave &gt; sp-&gt;seconds &amp;&amp;\r\n                (server.unixtime-server.lastbgsave_try &gt;\r\n                 REDIS_BGSAVE_RETRY_DELAY ||\r\n                 server.lastbgsave_status == REDIS_OK))\r\n            {\r\n                redisLog(REDIS_NOTICE,&quot;%d changes in %d seconds. Saving...&quot;,\r\n                    sp-&gt;changes, (int)sp-&gt;seconds);\r\n                // 执行 BGSAVE\r\n                rdbSaveBackground(server.rdb_filename);\r\n                break;\r\n            }\r\n         }\r\n\r\n         if (server.rdb_child_pid == -1 &amp;&amp;\r\n             server.aof_child_pid == -1 &amp;&amp;\r\n             server.aof_rewrite_perc &amp;&amp;\r\n             // AOF 文件的当前大小大于执行 BGREWRITEAOF 所需的最小大小\r\n             server.aof_current_size &gt; server.aof_rewrite_min_size)\r\n         {\r\n            // 上一次完成 AOF 写入之后，AOF 文件的大小\r\n            long long base = server.aof_rewrite_base_size ?\r\n                            server.aof_rewrite_base_size : 1;\r\n\r\n            // AOF 文件当前的体积相对于 base 的体积的百分比\r\n            long long growth = (server.aof_current_size*100/base) - 100;\r\n\r\n            // 如果增长体积的百分比超过了 growth ，那么执行 BGREWRITEAOF\r\n            if (growth &gt;= server.aof_rewrite_perc) {\r\n                redisLog(REDIS_NOTICE,&quot;Starting automatic rewriting of AOF on %lld%% growth&quot;,growth);\r\n                // 执行 BGREWRITEAOF\r\n                rewriteAppendOnlyFileBackground();\r\n            }\r\n         }\r\n    }\r\n\r\n    if (server.aof_flush_postponed_start) flushAppendOnlyFile(0);\r\n\r\n    run_with_period(1000) {\r\n        if (server.aof_last_write_status == REDIS_ERR)\r\n            flushAppendOnlyFile(0);\r\n    }\r\n\r\n    freeClientsInAsyncFreeQueue();\r\n\r\n    clientsArePaused(); /* Don\'t check return value, just use the side effect. */\r\n    run_with_period(1000) replicationCron();\r\n\r\n    run_with_period(100) {\r\n        if (server.cluster_enabled) clusterCron();\r\n    }\r\n\r\n    run_with_period(100) {\r\n        if (server.sentinel_mode) sentinelTimer();\r\n    }\r\n\r\n    run_with_period(1000) {\r\n        migrateCloseTimedoutSockets();\r\n    }\r\n\r\n    server.cronloops++;\r\n    return 1000/server.hz;\r\n}\r\n[/cpp]\r\n','Redis 定时循环执行任务(serverCron解析)','','inherit','open','open','','394-revision-v1','','','2015-07-21 08:50:12','2015-07-21 08:50:12','',394,'http://unasm.com/2015/07/402/',0,'revision','',0),(486,1,'2015-08-07 06:40:43','2015-08-07 06:40:43','Redis的serverCron大约是每1ms执行一次，并非严格1ms，一般来说，会有一定程度的延迟，\r\n\r\nserverCron函数的三个参数，在函数内部都没有被使用，会有警告出来，所以使用REDIS_NOTUSED去除，不使用，为什么还传递这三个参数呢?莫非是为了格式的一致性么？\r\n\r\n首先，serverCron 设置 setitimer，超时的时候，进程会收到一个SIGALRM信号。redis 根据这个信号，打印 logStackTrace 信息，排查超时的原因。在生产环境，是不会做这种事情的。\r\n\r\n然后redis更新全局事件变量，在要求不是很高的时候，通过读取该时间变量，默认为当前事件，可以节省时间，加快速度。\r\n<pre>更新Lru时间，getLRUClock()函数如下</pre>\r\n\r\n[cpp]\r\nreturn (mstime()/REDIS_LRU_CLOCK_RESOLUTION) &amp; REDIS_LRU_CLOCK_MAX;\r\n[/cpp]\r\n\r\n翻译出来就是(mstime() / 1000) &amp; ( (1 &lt;&lt; 24 )- 1),这个时间，大概是380天的样子,lruclock每380天一个轮回。\r\n\r\n如果之前收到了 <span class=\"s1\">SIGT</span><span class=\"s2\">E</span><span class=\"s1\">RM 信号，并不会立即做什么事情，只是将</span><span class=\"s1\">server.shutdown_as</span><span class=\"s2\">a</span><span class=\"s1\">p 置位</span>，这里判断shutdown_asap , 调用<span class=\"s1\">prepareForShut</span><span class=\"s2\">d</span><span class=\"s1\">own ,</span>关闭服务器，退出执行。但是如果没有退出成功，就不退出了，打印Log，然后移除标志位。\r\n\r\n每50s，打印全部数据库的键值对过期键的数量。\r\n\r\n如果不是出于哨兵模式，每50s，将客户端的连接输出一遍，因为出于哨兵模式的时候，服务器所做的事情，就是监控其他服务器是否正常，它的客户端，就是几个固定的服务器 ，并没有打印客户端连接的必要。\r\n\r\nclientsCron(),检查所有的客户端连接，是否有可以释放的，每次至少检查50个客户端，如果符合以下条件，就断开客户端连接。\r\nredis越来越复杂了。\r\n\r\n[cpp]\r\nif (server.maxidletime &amp;&amp;\r\n// 不检查作为从服务器的客户端\r\n!(c-&gt;flags &amp; REDIS_SLAVE) &amp;&amp;\r\n// 不检查作为主服务器的客户端\r\n!(c-&gt;flags &amp; REDIS_MASTER) &amp;&amp;\r\n// 不检查被阻塞的客户端\r\n!(c-&gt;flags &amp; REDIS_BLOCKED) &amp;&amp;\r\n// 不检查订阅了频道的客户端\r\ndictSize(c-&gt;pubsub_channels) == 0 &amp;&amp;\r\n// 不检查订阅了模式的客户端,因为可能是监控器？？？\r\nlistLength(c-&gt;pubsub_patterns) == 0 &amp;&amp;\r\n// 客户端最后一次与服务器通讯的时间已经超过了 maxidletime 时间\r\n(now - c-&gt;lastinteraction &gt; server.maxidletime))\r\n[/cpp]\r\n\r\n同时检查这些客户端是不是可以缩小查询缓冲，节省内存。\r\n<p class=\"p1\"><span class=\"s1\">当 1.查询缓冲区的大小大于 BIG_ARG 以及 querybuf_peak ，2.</span>客户端不活跃，并且缓冲区大于 1k的时候，减小缓冲区。怎么判断是否活跃呢，超过2s内没有任何交互，就判断为不活跃。</p>\r\n下个函数，databasesCron(),定时脚本中，需要对db进行的操作,包括清除过期键以及判断是否需要rehash\r\n\r\n检查aof和rdb是否进行的时候，使用了wait3(&amp;statloc,WNOHANG,NULL))\r\nWNOHANG:return immediately if no child has exited。非阻塞的方式查询子进程是否完成，而是通过每次cron查询的方式，大概是要做的事情太多了吧。rdb或者aof完成之后，执行backgroundSaveDoneHandler(exitcode,bysignal) 或者是 backgroundRewriteDoneHandler(exitcode,bysignal)\r\n\r\n如果server.aof_flush_postponed_start置位，也即是每秒刷新aof文件，则刷新aof文件。\r\nreplicationCron,每10s执行一次， 重连接主服务器、向主服务器发送 ACK 、判断数据发送失败情况、断开本服务器超时的从服务器，等等\r\n\r\n如果服务器运行在集群模式下，那么每秒钟执行一次集群操作。\r\n如果处于哨兵模式下， 每秒中执行一次sentinelTimer()\r\n\r\n[cpp]\r\nint serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {\r\nint j;\r\nREDIS_NOTUSED(eventLoop);\r\nREDIS_NOTUSED(id);\r\nREDIS_NOTUSED(clientData);\r\n\r\nif (server.watchdog_period) watchdogScheduleSignal(server.watchdog_period);\r\n\r\nupdateCachedTime();\r\n\r\n//保存每秒执行的命令数量\r\nrun_with_period(100) trackOperationsPerSecond();\r\nserver.lruclock = getLRUClock();\r\n\r\nif (zmalloc_used_memory() &gt; server.stat_peak_memory)\r\nserver.stat_peak_memory = zmalloc_used_memory();\r\n\r\nserver.resident_set_size = zmalloc_get_rss();\r\n\r\nif (server.shutdown_asap) {\r\nif (prepareForShutdown(0) == REDIS_OK) exit(0);\r\n\r\nredisLog(REDIS_WARNING,&amp;quot;SIGTERM received but errors trying to shut down the server, check the logs for more information&amp;quot;);\r\nserver.shutdown_asap = 0;\r\n}\r\n\r\nrun_with_period(5000) {\r\nfor (j = 0; j &lt; server.dbnum; j++) {\r\nlong long size, used, vkeys;\r\n\r\nsize = dictSlots(server.db[j].dict);\r\nused = dictSize(server.db[j].dict);\r\nvkeys = dictSize(server.db[j].expires);\r\n\r\nif (used || vkeys) {\r\nredisLog(REDIS_VERBOSE,&amp;quot;DB %d: %lld keys (%lld volatile) in %lld slots HT.&amp;quot;,j,used,vkeys,size);\r\n}\r\n}\r\n}\r\n\r\nif (!server.sentinel_mode) {\r\nrun_with_period(5000) {\r\nredisLog(REDIS_VERBOSE,\r\n&amp;quot;%lu clients connected (%lu slaves), %zu bytes in use&amp;quot;,\r\nlistLength(server.clients)-listLength(server.slaves),\r\nlistLength(server.slaves),\r\nzmalloc_used_memory());\r\n}\r\n}\r\nclientsCron();\r\ndatabasesCron();\r\n//在rdb和aof都没有执行的情况下，如果需要执行aof，通过通过fork子进程执行aof\r\nif (server.rdb_child_pid == -1 &amp;&amp; server.aof_child_pid == -1 &amp;&amp;\r\nserver.aof_rewrite_scheduled)\r\n{\r\nrewriteAppendOnlyFileBackground();\r\n}\r\n\r\n//rdb或者是aof如果正在进行，等待子进程完成，这里的wait3,使用的是unix的select方式。\r\nif (server.rdb_child_pid != -1 || server.aof_child_pid != -1) {\r\nint statloc;\r\npid_t pid;\r\n\r\nif ((pid = wait3(&amp;statloc,WNOHANG,NULL)) != 0) {\r\nint exitcode = WEXITSTATUS(statloc);\r\nint bysignal = 0;\r\nif (WIFSIGNALED(statloc)) bysignal = WTERMSIG(statloc);\r\n\r\nif (pid == server.rdb_child_pid) {\r\nbackgroundSaveDoneHandler(exitcode,bysignal);\r\n\r\n} else if (pid == server.aof_child_pid) {\r\nbackgroundRewriteDoneHandler(exitcode,bysignal);\r\n} else {\r\nredisLog(REDIS_WARNING,\r\n&amp;quot;Warning, detected child with unmatched pid: %ld&amp;quot;,\r\n(long)pid);\r\n}\r\nupdateDictResizePolicy();\r\n}\r\n} else {\r\nfor (j = 0; j &lt; server.saveparamslen; j++) {\r\nstruct saveparam *sp = server.saveparams+j;\r\nif (server.dirty &gt;= sp-&gt;changes &amp;&amp;\r\nserver.unixtime-server.lastsave &gt; sp-&gt;seconds &amp;&amp;\r\n(server.unixtime-server.lastbgsave_try &gt;\r\nREDIS_BGSAVE_RETRY_DELAY ||\r\nserver.lastbgsave_status == REDIS_OK))\r\n{\r\nredisLog(REDIS_NOTICE,&amp;quot;%d changes in %d seconds. Saving...&amp;quot;,\r\nsp-&gt;changes, (int)sp-&gt;seconds);\r\n// 执行 BGSAVE\r\nrdbSaveBackground(server.rdb_filename);\r\nbreak;\r\n}\r\n}\r\n\r\nif (server.rdb_child_pid == -1 &amp;&amp;\r\nserver.aof_child_pid == -1 &amp;&amp;\r\nserver.aof_rewrite_perc &amp;&amp;\r\n// AOF 文件的当前大小大于执行 BGREWRITEAOF 所需的最小大小\r\nserver.aof_current_size &gt; server.aof_rewrite_min_size)\r\n{\r\n// 上一次完成 AOF 写入之后，AOF 文件的大小\r\nlong long base = server.aof_rewrite_base_size ?\r\nserver.aof_rewrite_base_size : 1;\r\n\r\n// AOF 文件当前的体积相对于 base 的体积的百分比\r\nlong long growth = (server.aof_current_size*100/base) - 100;\r\n\r\n// 如果增长体积的百分比超过了 growth ，那么执行 BGREWRITEAOF\r\nif (growth &gt;= server.aof_rewrite_perc) {\r\nredisLog(REDIS_NOTICE,&amp;quot;Starting automatic rewriting of AOF on %lld%% growth&amp;quot;,growth);\r\n// 执行 BGREWRITEAOF\r\nrewriteAppendOnlyFileBackground();\r\n}\r\n}\r\n}\r\n\r\nif (server.aof_flush_postponed_start) flushAppendOnlyFile(0);\r\n\r\nrun_with_period(1000) {\r\nif (server.aof_last_write_status == REDIS_ERR)\r\nflushAppendOnlyFile(0);\r\n}\r\n\r\nfreeClientsInAsyncFreeQueue();\r\n\r\nclientsArePaused(); /* Don\'t check return value, just use the side effect. */\r\nrun_with_period(1000) replicationCron();\r\n\r\nrun_with_period(100) {\r\nif (server.cluster_enabled) clusterCron();\r\n}\r\n\r\nrun_with_period(100) {\r\nif (server.sentinel_mode) sentinelTimer();\r\n}\r\n\r\nrun_with_period(1000) {\r\nmigrateCloseTimedoutSockets();\r\n}\r\n\r\nserver.cronloops++;\r\nreturn 1000/server.hz;\r\n}\r\n[/cpp]\r\n','Redis 源码分析之serverCron(定时循环)解析','','inherit','open','open','','394-revision-v1','','','2015-08-07 06:40:43','2015-08-07 06:40:43','',394,'http://unasm.com/2015/08/486/',0,'revision','',0),(485,1,'2015-08-07 06:30:44','2015-08-07 06:30:44','Redis的serverCron大约是每1ms执行一次，并非严格1ms，一般来说，会有一定程度的延迟，\r\n\r\nserverCron函数的三个参数，在函数内部都没有被使用，会有警告出来，所以使用REDIS_NOTUSED去除，不使用，为什么还传递这三个参数呢?莫非是为了格式的一致性么？\r\n\r\n首先，serverCron 设置 setitimer，超时的时候，进程会收到一个SIGALRM信号。redis 根据这个信号，打印 logStackTrace 信息，排查超时的原因。在生产环境，是不会做这种事情的。\r\n\r\n然后redis更新全局事件变量，在不精确的时候，通过读取该时间，节省时间，加快速度。\r\n<pre>getLRUClock()函数如下</pre>\r\n\r\n[cpp]&lt;/pre&gt;\r\n&lt;pre&gt; return (mstime()/REDIS_LRU_CLOCK_RESOLUTION) &amp; REDIS_LRU_CLOCK_MAX;\r\n[/cpp]\r\n\r\n翻译出来就是(mstime() / 1000) &amp; ( (1 &lt;&lt; 24 )- 1),这个时间，大概是380天的样子,lruclock每380天一个轮回。\r\nRSS 分析是什么，能吃么？\r\n如果之前收到了 <span class=\"s1\">SIGT</span><span class=\"s2\">E</span><span class=\"s1\">RM 信号，并不会立即做什么事情，只是将</span><span class=\"s1\">server.shutdown_as</span><span class=\"s2\">a</span><span class=\"s1\">p 置位</span>，这里判断shutdown_asap , 调用<span class=\"s1\">prepareForShut</span><span class=\"s2\">d</span><span class=\"s1\">own ,</span>关闭服务器，退出执行。但是如果没有退出成功，就不退出了，打印Log，然后移除标志位。\r\n\r\n每50s，打印全部数据库的键值对过期键的数量。\r\n\r\n如果不是出于哨兵模式，每50s，将客户端的连接输出一遍，因为出于哨兵模式的时候，服务器所做的事情，就是监控其他服务器是否正常，它的客户端，就是几个固定的服务器 ，并没有打印客户端连接的必要。\r\n\r\nclientsCron(),检查所有的客户端连接，是否有可以释放的，每次至少检查50个客户端，如果符合以下条件，就断开客户端连接。\r\nredis越来越复杂了。\r\n\r\n[cpp]\r\nif (server.maxidletime &amp;&amp;\r\n// 不检查作为从服务器的客户端\r\n!(c-&gt;flags &amp; REDIS_SLAVE) &amp;&amp;\r\n// 不检查作为主服务器的客户端\r\n!(c-&gt;flags &amp; REDIS_MASTER) &amp;&amp;\r\n// 不检查被阻塞的客户端\r\n!(c-&gt;flags &amp; REDIS_BLOCKED) &amp;&amp;\r\n// 不检查订阅了频道的客户端\r\ndictSize(c-&gt;pubsub_channels) == 0 &amp;&amp;\r\n// 不检查订阅了模式的客户端,因为可能是监控器？？？\r\nlistLength(c-&gt;pubsub_patterns) == 0 &amp;&amp;\r\n// 客户端最后一次与服务器通讯的时间已经超过了 maxidletime 时间\r\n(now - c-&gt;lastinteraction &gt; server.maxidletime))\r\n[/cpp]\r\n\r\n同时检查这些客户端是不是可以缩小查询缓冲，节省内存。\r\n<p class=\"p1\"><span class=\"s1\">当 1.查询缓冲区的大小大于 BIG_ARG 以及 querybuf_peak ，2.</span>客户端不活跃，并且缓冲区大于 1k的时候，减小缓冲区。怎么判断是否活跃呢，超过2s内没有任何交互，就判断为不活跃。</p>\r\n下个函数，databasesCron(),定时脚本中，需要对db进行的操作,包括清除过期键以及判断是否需要rehash\r\n\r\n检查aof和rdb是否进行的时候，使用了wait3(&amp;statloc,WNOHANG,NULL))\r\nWNOHANG:return immediately if no child has exited。非阻塞的方式查询子进程是否完成，而是通过每次cron查询的方式，大概是要做的事情太多了吧。rdb或者aof完成之后，执行backgroundSaveDoneHandler(exitcode,bysignal) 或者是 backgroundRewriteDoneHandler(exitcode,bysignal)\r\n\r\n如果server.aof_flush_postponed_start置位，也即是每秒刷新aof文件，则刷新aof文件。\r\nreplicationCron,每10s执行一次， 重连接主服务器、向主服务器发送 ACK 、判断数据发送失败情况、断开本服务器超时的从服务器，等等\r\n\r\n如果服务器运行在集群模式下，那么每秒钟执行一次集群操作。\r\n如果处于哨兵模式下， 每秒中执行一次sentinelTimer()\r\n\r\n[cpp]\r\nint serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {\r\nint j;\r\nREDIS_NOTUSED(eventLoop);\r\nREDIS_NOTUSED(id);\r\nREDIS_NOTUSED(clientData);\r\n\r\nif (server.watchdog_period) watchdogScheduleSignal(server.watchdog_period);\r\n\r\nupdateCachedTime();\r\n\r\n//保存每秒执行的命令数量\r\nrun_with_period(100) trackOperationsPerSecond();\r\nserver.lruclock = getLRUClock();\r\n\r\nif (zmalloc_used_memory() &gt; server.stat_peak_memory)\r\nserver.stat_peak_memory = zmalloc_used_memory();\r\n\r\nserver.resident_set_size = zmalloc_get_rss();\r\n\r\nif (server.shutdown_asap) {\r\nif (prepareForShutdown(0) == REDIS_OK) exit(0);\r\n\r\nredisLog(REDIS_WARNING,&amp;quot;SIGTERM received but errors trying to shut down the server, check the logs for more information&amp;quot;);\r\nserver.shutdown_asap = 0;\r\n}\r\n\r\nrun_with_period(5000) {\r\nfor (j = 0; j &lt; server.dbnum; j++) {\r\nlong long size, used, vkeys;\r\n\r\nsize = dictSlots(server.db[j].dict);\r\nused = dictSize(server.db[j].dict);\r\nvkeys = dictSize(server.db[j].expires);\r\n\r\nif (used || vkeys) {\r\nredisLog(REDIS_VERBOSE,&amp;quot;DB %d: %lld keys (%lld volatile) in %lld slots HT.&amp;quot;,j,used,vkeys,size);\r\n}\r\n}\r\n}\r\n\r\nif (!server.sentinel_mode) {\r\nrun_with_period(5000) {\r\nredisLog(REDIS_VERBOSE,\r\n&amp;quot;%lu clients connected (%lu slaves), %zu bytes in use&amp;quot;,\r\nlistLength(server.clients)-listLength(server.slaves),\r\nlistLength(server.slaves),\r\nzmalloc_used_memory());\r\n}\r\n}\r\nclientsCron();\r\ndatabasesCron();\r\n//在rdb和aof都没有执行的情况下，如果需要执行aof，通过通过fork子进程执行aof\r\nif (server.rdb_child_pid == -1 &amp;&amp; server.aof_child_pid == -1 &amp;&amp;\r\nserver.aof_rewrite_scheduled)\r\n{\r\nrewriteAppendOnlyFileBackground();\r\n}\r\n\r\n//rdb或者是aof如果正在进行，等待子进程完成，这里的wait3,使用的是unix的select方式。\r\nif (server.rdb_child_pid != -1 || server.aof_child_pid != -1) {\r\nint statloc;\r\npid_t pid;\r\n\r\nif ((pid = wait3(&amp;statloc,WNOHANG,NULL)) != 0) {\r\nint exitcode = WEXITSTATUS(statloc);\r\nint bysignal = 0;\r\nif (WIFSIGNALED(statloc)) bysignal = WTERMSIG(statloc);\r\n\r\nif (pid == server.rdb_child_pid) {\r\nbackgroundSaveDoneHandler(exitcode,bysignal);\r\n\r\n} else if (pid == server.aof_child_pid) {\r\nbackgroundRewriteDoneHandler(exitcode,bysignal);\r\n} else {\r\nredisLog(REDIS_WARNING,\r\n&amp;quot;Warning, detected child with unmatched pid: %ld&amp;quot;,\r\n(long)pid);\r\n}\r\nupdateDictResizePolicy();\r\n}\r\n} else {\r\nfor (j = 0; j &lt; server.saveparamslen; j++) {\r\nstruct saveparam *sp = server.saveparams+j;\r\nif (server.dirty &gt;= sp-&gt;changes &amp;&amp;\r\nserver.unixtime-server.lastsave &gt; sp-&gt;seconds &amp;&amp;\r\n(server.unixtime-server.lastbgsave_try &gt;\r\nREDIS_BGSAVE_RETRY_DELAY ||\r\nserver.lastbgsave_status == REDIS_OK))\r\n{\r\nredisLog(REDIS_NOTICE,&amp;quot;%d changes in %d seconds. Saving...&amp;quot;,\r\nsp-&gt;changes, (int)sp-&gt;seconds);\r\n// 执行 BGSAVE\r\nrdbSaveBackground(server.rdb_filename);\r\nbreak;\r\n}\r\n}\r\n\r\nif (server.rdb_child_pid == -1 &amp;&amp;\r\nserver.aof_child_pid == -1 &amp;&amp;\r\nserver.aof_rewrite_perc &amp;&amp;\r\n// AOF 文件的当前大小大于执行 BGREWRITEAOF 所需的最小大小\r\nserver.aof_current_size &gt; server.aof_rewrite_min_size)\r\n{\r\n// 上一次完成 AOF 写入之后，AOF 文件的大小\r\nlong long base = server.aof_rewrite_base_size ?\r\nserver.aof_rewrite_base_size : 1;\r\n\r\n// AOF 文件当前的体积相对于 base 的体积的百分比\r\nlong long growth = (server.aof_current_size*100/base) - 100;\r\n\r\n// 如果增长体积的百分比超过了 growth ，那么执行 BGREWRITEAOF\r\nif (growth &gt;= server.aof_rewrite_perc) {\r\nredisLog(REDIS_NOTICE,&amp;quot;Starting automatic rewriting of AOF on %lld%% growth&amp;quot;,growth);\r\n// 执行 BGREWRITEAOF\r\nrewriteAppendOnlyFileBackground();\r\n}\r\n}\r\n}\r\n\r\nif (server.aof_flush_postponed_start) flushAppendOnlyFile(0);\r\n\r\nrun_with_period(1000) {\r\nif (server.aof_last_write_status == REDIS_ERR)\r\nflushAppendOnlyFile(0);\r\n}\r\n\r\nfreeClientsInAsyncFreeQueue();\r\n\r\nclientsArePaused(); /* Don\'t check return value, just use the side effect. */\r\nrun_with_period(1000) replicationCron();\r\n\r\nrun_with_period(100) {\r\nif (server.cluster_enabled) clusterCron();\r\n}\r\n\r\nrun_with_period(100) {\r\nif (server.sentinel_mode) sentinelTimer();\r\n}\r\n\r\nrun_with_period(1000) {\r\nmigrateCloseTimedoutSockets();\r\n}\r\n\r\nserver.cronloops++;\r\nreturn 1000/server.hz;\r\n}\r\n[/cpp]\r\n','Redis 源码分析之serverCron(定时循环)解析','','inherit','open','open','','394-revision-v1','','','2015-08-07 06:30:44','2015-08-07 06:30:44','',394,'http://unasm.com/2015/08/485/',0,'revision','',0),(404,1,'2015-07-21 09:53:28','2015-07-21 09:53:28','这里其实是对 Redis.c serverCron 函数进行分析，也就是Redis的每次循环中，做的事情，innode的master thread每次做的事情也不少，I have to say.\r\n\r\n首先从入门的REDIS_NOTUSED开始，REDIS_NOTUSED是一个宏定义，就是将声明而未使用的警告去除，serverCron的三个参数，在函数内部都没有被使用，会有警告出来，所以使用REDIS_NOTUSED去除，不使用，为什么还传递这三个参数呢?\r\n全部源码如下。\r\n\r\nwatchdogScheduleSignal的作用是防止超时，一旦超过server.watchdog_period ,通过setitimer函数，超时的时候，进程会收到一个SIGALRM信号。\r\n\r\n之后是updateCachedTime(),该函数将时间保存在全局变量里面，在不精确的时候，通过读取该时间，节省时间，加快速度。\r\n<pre>getLRUClock()函数如下</pre>\r\n\r\n[cpp]&lt;/pre&gt;\r\n&lt;pre&gt; return (mstime()/REDIS_LRU_CLOCK_RESOLUTION) &amp; REDIS_LRU_CLOCK_MAX;\r\n[/cpp]\r\n\r\n\r\n翻译出来就是(mstime() / 1000) &amp; ( (1 &lt;&lt; 24 )- 1),这个时间，大概是380天的样子,lruclock每380天一个轮回。\r\nRSS 分析是什么，能吃么？\r\n如果之前收到了 <span class=\"s1\">SIGT</span><span class=\"s2\">E</span><span class=\"s1\">RM 信号，并不会立即做什么事情，只是将</span><span class=\"s1\">server.shutdown_as</span><span class=\"s2\">a</span><span class=\"s1\">p 置位</span>，这里判断shutdown_asap , 调用<span class=\"s1\">prepareForShut</span><span class=\"s2\">d</span><span class=\"s1\">own ,</span>关闭服务器，退出执行。但是如果没有退出成功，就不退出了，打印Log，然后移除标志位。\r\n\r\n每50s，打印全部数据库的键值对过期键的数量。\r\n\r\n如果不是出于哨兵模式，每50s，将客户端的连接输出一遍，因为出于哨兵模式的时候，服务器所做的事情，就是监控其他服务器是否正常，它的客户端，就是几个固定的服务器 ，并没有打印客户端连接的必要。\r\n\r\nclientsCron(),检查所有的客户端连接，是否有可以释放的，每次至少检查50个客户端，如果符合以下条件，就断开客户端连接。\r\nredis越来越复杂了。\r\n\r\n[cpp]\r\nif (server.maxidletime &amp;&amp;\r\n// 不检查作为从服务器的客户端\r\n!(c-&gt;flags &amp; REDIS_SLAVE) &amp;&amp;\r\n// 不检查作为主服务器的客户端\r\n!(c-&gt;flags &amp; REDIS_MASTER) &amp;&amp;\r\n// 不检查被阻塞的客户端\r\n!(c-&gt;flags &amp; REDIS_BLOCKED) &amp;&amp;\r\n// 不检查订阅了频道的客户端\r\ndictSize(c-&gt;pubsub_channels) == 0 &amp;&amp;\r\n// 不检查订阅了模式的客户端,因为可能是监控器？？？\r\nlistLength(c-&gt;pubsub_patterns) == 0 &amp;&amp;\r\n// 客户端最后一次与服务器通讯的时间已经超过了 maxidletime 时间\r\n(now - c-&gt;lastinteraction &gt; server.maxidletime))\r\n[/cpp]\r\n\r\n\r\n同时检查这些客户端是不是可以缩小查询缓冲，节省内存。\r\n<p class=\"p1\"><span class=\"s1\">当 1.查询缓冲区的大小大于 BIG_ARG 以及 querybuf_peak ，2.</span>客户端不活跃，并且缓冲区大于 1k的时候，减小缓冲区。怎么判断是否活跃呢，超过2s内没有任何交互，就判断为不活跃。</p>\r\n下个函数，databasesCron(),定时脚本中，需要对db进行的操作,包括清除过期键以及判断是否需要rehash\r\n\r\n检查aof和rdb是否进行的时候，使用了wait3(&statloc,WNOHANG,NULL))\r\nWNOHANG:return immediately if no child has exited。非阻塞的方式查询子进程是否完成，而是通过每次cron查询的方式，大概是要做的事情太多了吧。rdb或者aof完成之后，执行backgroundSaveDoneHandler(exitcode,bysignal) 或者是 backgroundRewriteDoneHandler(exitcode,bysignal)\r\n\r\n如果server.aof_flush_postponed_start置位，也即是每秒刷新aof文件，则刷新aof文件。\r\nreplicationCron,每10s执行一次， 重连接主服务器、向主服务器发送 ACK 、判断数据发送失败情况、断开本服务器超时的从服务器，等等\r\n\r\n如果服务器运行在集群模式下，那么每秒钟执行一次集群操作。\r\n如果处于哨兵模式下， 每秒中执行一次sentinelTimer()\r\n[cpp]\r\nint serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {\r\nint j;\r\nREDIS_NOTUSED(eventLoop);\r\nREDIS_NOTUSED(id);\r\nREDIS_NOTUSED(clientData);\r\n\r\nif (server.watchdog_period) watchdogScheduleSignal(server.watchdog_period);\r\n\r\nupdateCachedTime();\r\n\r\n//保存每秒执行的命令数量\r\nrun_with_period(100) trackOperationsPerSecond();\r\nserver.lruclock = getLRUClock();\r\n\r\nif (zmalloc_used_memory() &gt; server.stat_peak_memory)\r\nserver.stat_peak_memory = zmalloc_used_memory();\r\n\r\nserver.resident_set_size = zmalloc_get_rss();\r\n\r\nif (server.shutdown_asap) {\r\nif (prepareForShutdown(0) == REDIS_OK) exit(0);\r\n\r\nredisLog(REDIS_WARNING,&amp;quot;SIGTERM received but errors trying to shut down the server, check the logs for more information&amp;quot;);\r\nserver.shutdown_asap = 0;\r\n}\r\n\r\nrun_with_period(5000) {\r\nfor (j = 0; j &lt; server.dbnum; j++) {\r\nlong long size, used, vkeys;\r\n\r\nsize = dictSlots(server.db[j].dict);\r\nused = dictSize(server.db[j].dict);\r\nvkeys = dictSize(server.db[j].expires);\r\n\r\nif (used || vkeys) {\r\nredisLog(REDIS_VERBOSE,&amp;quot;DB %d: %lld keys (%lld volatile) in %lld slots HT.&amp;quot;,j,used,vkeys,size);\r\n}\r\n}\r\n}\r\n\r\nif (!server.sentinel_mode) {\r\nrun_with_period(5000) {\r\nredisLog(REDIS_VERBOSE,\r\n&amp;quot;%lu clients connected (%lu slaves), %zu bytes in use&amp;quot;,\r\nlistLength(server.clients)-listLength(server.slaves),\r\nlistLength(server.slaves),\r\nzmalloc_used_memory());\r\n}\r\n}\r\nclientsCron();\r\ndatabasesCron();\r\n//在rdb和aof都没有执行的情况下，如果需要执行aof，通过通过fork子进程执行aof\r\nif (server.rdb_child_pid == -1 &amp;&amp; server.aof_child_pid == -1 &amp;&amp;\r\nserver.aof_rewrite_scheduled)\r\n{\r\nrewriteAppendOnlyFileBackground();\r\n}\r\n\r\n//rdb或者是aof如果正在进行，等待子进程完成，这里的wait3,使用的是unix的select方式。\r\nif (server.rdb_child_pid != -1 || server.aof_child_pid != -1) {\r\nint statloc;\r\npid_t pid;\r\n\r\nif ((pid = wait3(&amp;statloc,WNOHANG,NULL)) != 0) {\r\nint exitcode = WEXITSTATUS(statloc);\r\nint bysignal = 0;\r\nif (WIFSIGNALED(statloc)) bysignal = WTERMSIG(statloc);\r\n\r\nif (pid == server.rdb_child_pid) {\r\nbackgroundSaveDoneHandler(exitcode,bysignal);\r\n\r\n} else if (pid == server.aof_child_pid) {\r\nbackgroundRewriteDoneHandler(exitcode,bysignal);\r\n} else {\r\nredisLog(REDIS_WARNING,\r\n&amp;quot;Warning, detected child with unmatched pid: %ld&amp;quot;,\r\n(long)pid);\r\n}\r\nupdateDictResizePolicy();\r\n}\r\n} else {\r\nfor (j = 0; j &lt; server.saveparamslen; j++) {\r\nstruct saveparam *sp = server.saveparams+j;\r\nif (server.dirty &gt;= sp-&gt;changes &amp;&amp;\r\nserver.unixtime-server.lastsave &gt; sp-&gt;seconds &amp;&amp;\r\n(server.unixtime-server.lastbgsave_try &gt;\r\nREDIS_BGSAVE_RETRY_DELAY ||\r\nserver.lastbgsave_status == REDIS_OK))\r\n{\r\nredisLog(REDIS_NOTICE,&amp;quot;%d changes in %d seconds. Saving...&amp;quot;,\r\nsp-&gt;changes, (int)sp-&gt;seconds);\r\n// 执行 BGSAVE\r\nrdbSaveBackground(server.rdb_filename);\r\nbreak;\r\n}\r\n}\r\n\r\nif (server.rdb_child_pid == -1 &amp;&amp;\r\nserver.aof_child_pid == -1 &amp;&amp;\r\nserver.aof_rewrite_perc &amp;&amp;\r\n// AOF 文件的当前大小大于执行 BGREWRITEAOF 所需的最小大小\r\nserver.aof_current_size &gt; server.aof_rewrite_min_size)\r\n{\r\n// 上一次完成 AOF 写入之后，AOF 文件的大小\r\nlong long base = server.aof_rewrite_base_size ?\r\nserver.aof_rewrite_base_size : 1;\r\n\r\n// AOF 文件当前的体积相对于 base 的体积的百分比\r\nlong long growth = (server.aof_current_size*100/base) - 100;\r\n\r\n// 如果增长体积的百分比超过了 growth ，那么执行 BGREWRITEAOF\r\nif (growth &gt;= server.aof_rewrite_perc) {\r\nredisLog(REDIS_NOTICE,&amp;quot;Starting automatic rewriting of AOF on %lld%% growth&amp;quot;,growth);\r\n// 执行 BGREWRITEAOF\r\nrewriteAppendOnlyFileBackground();\r\n}\r\n}\r\n}\r\n\r\nif (server.aof_flush_postponed_start) flushAppendOnlyFile(0);\r\n\r\nrun_with_period(1000) {\r\nif (server.aof_last_write_status == REDIS_ERR)\r\nflushAppendOnlyFile(0);\r\n}\r\n\r\nfreeClientsInAsyncFreeQueue();\r\n\r\nclientsArePaused(); /* Don\'t check return value, just use the side effect. */\r\nrun_with_period(1000) replicationCron();\r\n\r\nrun_with_period(100) {\r\nif (server.cluster_enabled) clusterCron();\r\n}\r\n\r\nrun_with_period(100) {\r\nif (server.sentinel_mode) sentinelTimer();\r\n}\r\n\r\nrun_with_period(1000) {\r\nmigrateCloseTimedoutSockets();\r\n}\r\n\r\nserver.cronloops++;\r\nreturn 1000/server.hz;\r\n}\r\n[/cpp]','Redis 定时循环执行任务(serverCron解析)','','inherit','open','open','','394-revision-v1','','','2015-07-21 09:53:28','2015-07-21 09:53:28','',394,'http://unasm.com/2015/07/404/',0,'revision','',0),(405,1,'2015-07-22 06:35:25','2015-07-22 06:35:25','自由不是所心所欲，而是自由选择最适合的方式。\r\n\r\n最近接手了论坛，我还记得前任维护者那同情感叹的眼神，事到如今，我也知道为什么了。\r\n\r\n第一条：<b>不要随便使用全局变量，不要随便全局变量，不要随便使用全局变量</b>。\r\n\r\n在阅读discuz源码的时候，时常看到一个变量，不明白什么含义，经历怎样的处理，来到当前所在的地方，往往需要回溯，变量的定义可能是上层文件（该文件include/require本文件），也可能是自己include的子文件，随随便便的一个global，就将自己查找范围扩大无数倍，更有甚者，discuz将Get/Post/Server中的变量提出来，通过&amp;&amp;$_POST[$key] = $val的方式，硬生生的把一个本来还容易理解的全局变量，变成了极其容易和局部变量混淆的变量，结果就是回溯，回溯，再回溯。global有时候是必须的，但不是随意的，甚至是危险的，有时候，会和普通变量重名，互相干扰，可能在无意中被修改，过长的作用链，从前向后贯穿整个代码生命周期，也极大的增加了耦合度，复杂度。\r\n\r\n第二条：<b>注释很重要</b>，真的很重要。\r\n\r\n一个几乎没有注释的代码，会让后来的接手者痛不欲生，写代码的时候，书写的人只有一种想法，但是后来的人却需要在1000种猜测选择中来回揣摩，以及不断的印证，花费的时间，远远超过维护一份好的注释的时间。\r\n\r\n第三条：<b>尽可能的复用代码，使用函数</b>，通过参数传递变量。\r\n\r\n阅读一份800+行代码，没有一个函数，全部平铺直叙的写下来，看起来让人昏昏欲睡，这样的代码，完全是写代码的的人不肯动脑子，没有仔细思考某一个功能的独立性，没有考虑复用的可能，看着if和else里面惊人相似的代码，这么长，这么长，他们到底有什么不同，恨不得在脑子里面实现diff，单纯的一个if/else ，15寸的屏幕还放不下。用函数，把巨大的代码块切割成一个一个的小func，然后组织起来，阅读起来轻松愉快，后续更改维护，也不会牵一发而动全身。\r\n\r\n软件工程里有一个约定，就是一个函数的长度，不要超过一个屏幕，这个是非常必要的。当然，还有一个过期的约定，就是宽度尽量不超过80个字符，redis的作者居然也还在恪守着这个原则。\r\n\r\n我阅读过PHP的软件规范，大括号的位置，= if 左右的空格，变量的命名等等约定，相比于上面几条来说，都是浮云，这些做不好，挺多就是难看点，上面的做不好，就是要人命的。而且，上面的，真的是软件开发里面最最基础的，相信大部分人都知道。','软件编码规范及基本注意事项(discuz缺陷)','','publish','open','open','','%e8%bd%af%e4%bb%b6%e7%bc%96%e7%a0%81%e8%a7%84%e8%8c%83%e4%bb%a5%e5%8f%8a%e5%9f%ba%e6%9c%ac%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9discuz%e7%bc%ba%e9%99%b7','','','2015-08-04 03:39:09','2015-08-04 03:39:09','',0,'http://unasm.com/?p=405',0,'post','',2),(406,1,'2015-07-22 06:35:25','2015-07-22 06:35:25','最近接手了论坛，','软件编码规范以及基本注意事项(discuz缺陷)','','inherit','open','open','','405-revision-v1','','','2015-07-22 06:35:25','2015-07-22 06:35:25','',405,'http://unasm.com/2015/07/406/',0,'revision','',0),(407,1,'2015-07-22 06:36:05','2015-07-22 06:36:05','最近接手了论坛，我还记得前任维护那同情感叹的眼神，事到如今，我也知道为什么了。','软件编码规范以及基本注意事项(discuz缺陷)','','inherit','open','open','','405-revision-v1','','','2015-07-22 06:36:05','2015-07-22 06:36:05','',405,'http://unasm.com/2015/07/407/',0,'revision','',0),(409,1,'2015-07-29 07:42:12','2015-07-29 07:42:12','\r\n[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，需要谨慎的控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式验证有无缺失,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,因为系统的可以打开的文件描述符是有上限的，一般来说是1024个，并发的时候，忘记关闭了，后面的就没有位置了。db.Query的rows千万要及时关闭。\r\n\r\n还有一个，就是下面的报错\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，在尽可能的情况下，将闭包独立差费成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，可以使用信道的方式。\r\n\r\n在不限制协程总量的情况下，单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，此时协程数量在35个左右，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030s,协程15个的时候，但协程处理请求速度达到420/s，增加了一点，但是不多，可见不同的机器，不同的处理能力，线程数量和请求速度并非是负相关的。577s 内处理db请求 1800466，平均3120/s,并发的效率还是很高的。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n\r\n发现database/sql里，没有设置Query超时的地方，也就是如果一个query发出去，很久很久没有响应，程序会一直处于等待阶段，这个会很影响效率\r\n\r\n信道这东西，不仅读取的时候会阻塞，插入的时候，也会阻塞，向一个信道中输入值，如果那边迟迟不读，这边也会一直阻塞。这个会影响调用的先后顺序。\r\n\r\ntime.NewTimer 可以返回一个定时器对象timer，在设定时间之后， timer中的信道属性C会被赋予一个值，但是如果提前调用了timer.Stop(),time.C会一直处于阻塞状态，例如\r\n\r\n[php]\r\n ticker := time.NewTimer(time.Second * 400)\r\n     go func() {\r\n         //防止超时\r\n      &lt;-ticker.C\r\n      timeOut = 1\r\n      defer ticker.Stop()\r\n     }()\r\n     defer func() {\r\n        // 如果已经被关闭，会返回false，如果没有，提前触发\r\n       Println(&quot;closing ticker.C : &quot;, ticker.Reset(time.Second*0))\r\n  }()\r\n[/php]\r\n\r\n注意，如果在第二个defer 里面调用 ticker.Stop()的话，则 上面的协程会一直阻塞在 &lt;-ticker.C，因为ticker已经Stop了，永远都不会有数据写入ticker.C，但是信道本身并没有被关闭，还在阻塞等待，而且，因为是 receive-only channel ，所以并没有办法手动close，结果就是该协程就一直卡死在那里，像一个僵尸进程。唯一的办法只能是任由时间到，然后自己触发ticker.C然后 defer ticker.Stop(),如果无法忍受资源浪费，可以像我那样，提前触发，通过Reset的方式，当然，如果已经Close了，Reset会返回false，无伤大雅。\r\n\r\n谨慎的对待阻塞，认真思考触发的条件，真的，不然程序就会卡死在某个你不小心触发的条件下','golang 并发查库','','publish','open','open','','409','','','2015-07-31 10:08:55','2015-07-31 10:08:55','',0,'http://unasm.com/?p=409',0,'post','',0),(410,1,'2015-07-29 07:42:12','2015-07-29 07:42:12','\r\n[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是使用goroutine的方式，也不意味着可以随意使用系统资源，很多时候，就算goroutine的数量即便不受限制，但是系统描述符，mysql,redis却不是不受限制的，及时关闭释放系统资源，goroutine的数量上限。\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式，验证,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,db.Query的rows，千万要及时close\r\n还有一个，就是\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n，从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候，\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度。\r\n\r\n单个goroutine处理5w多个请求，花费时间是10分钟的样子,不同的goroutine处理\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n\r\n&nbsp;','','','inherit','open','open','','409-revision-v1','','','2015-07-29 07:42:12','2015-07-29 07:42:12','',409,'http://unasm.com/2015/07/410/',0,'revision','',0),(415,1,'2015-07-29 08:11:00','2015-07-29 08:11:00','\r\n[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式，验证,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,db.Query的rows，千万要及时close\r\n还有一个，就是\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n，从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度。\r\n\r\n单个goroutine处理5w多个请求，花费时间是10分钟的样子,不同的goroutine处理\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n\r\n&nbsp;','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-29 08:11:00','2015-07-29 08:11:00','',409,'http://unasm.com/2015/07/415/',0,'revision','',0),(411,1,'2015-07-29 07:45:46','2015-07-29 07:45:46','\r\n[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是使用goroutine的方式，也不意味着可以随意使用系统资源，很多时候，就算goroutine的数量即便不受限制，但是系统描述符，mysql,redis却不是不受限制的，及时关闭释放系统资源，goroutine的数量上限。\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式，验证,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,db.Query的rows，千万要及时close\r\n还有一个，就是\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n，从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候，\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度。\r\n\r\n单个goroutine处理5w多个请求，花费时间是10分钟的样子,不同的goroutine处理\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n\r\n&nbsp;','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-29 07:45:46','2015-07-29 07:45:46','',409,'http://unasm.com/2015/07/411/',0,'revision','',0),(412,1,'2015-07-29 07:54:54','2015-07-29 07:54:54','<table style=\"color: #465f93; background-color: #ffffff; border-collapse: collapse; font-size: 12px;\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td style=\"width: 215.0px; height: 24.2px; border-bottom: solid 1px #5284bc;\"><b>状态名</b></td>\r\n<td style=\"width: 42.9px; height: 24.2px; border-bottom: solid 1px #5284bc;\"><b>作用域</b></td>\r\n<td style=\"width: 100.1px; height: 24.2px; border-bottom: solid 1px #5284bc;\"><b>详细解释</b></td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Aborted_clients</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">由于客户端没有正确关闭连接导致客户端终止而中断的连接数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Aborted_connects</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">试图连接到MySQL服务器而失败的连接数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Binlog_cache_disk_use</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">使用临时二进制日志缓存但超过binlog_cache_size值并使用临时文件来保存事务中的语句的事务数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Binlog_cache_use</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">使用临时二进制日志缓存的事务数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Bytes_received</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">从所有客户端接收到的字节数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Bytes_sent</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">发送给所有客户端的字节数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">com*</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">&nbsp;</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">各种数据库操作的数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Compression</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Session</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">客户端与服务器之间只否启用压缩协议</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Connections</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">试图连接到(不管是否成功)MySQL服务器的连接数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Created_tmp_disk_tables</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">服务器执行语句时在硬盘上自动创建的临时表的数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Created_tmp_files</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">mysqld已经创建的临时文件的数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Created_tmp_tables</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">服务器执行语句时自动创建的内存中的临时表的数量。如果Created_tmp_disk_tables较大，你可能要增加tmp_table_size值使临时 表基于内存而不基于硬盘</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Delayed_errors</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">用INSERT DELAYED写的出现错误的行数(可能为duplicate key)。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Delayed_insert_threads</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">使用的INSERT DELAYED处理器线程数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Delayed_writes</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">写入的INSERT DELAYED行数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Flush_commands</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">执行的FLUSH语句数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Handler_commit</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">内部提交语句数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Handler_delete</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">行从表中删除的次数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Handler_discover</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">MySQL服务器可以问NDB CLUSTER存储引擎是否知道某一名字的表。这被称作发现。Handler_discover说明通过该方法发现的次数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Handler_prepare</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">A counter for the prepare phase of two-phase commit operations.</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Handler_read_first</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">索引中第一条被读的次数。如果较高，它建议服务器正执行大量全索引扫描；例如，SELECT col1 FROM foo，假定col1有索引。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Handler_read_key</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">根据键读一行的请求数。如果较高，说明查询和表的索引正确。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Handler_read_next</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，该值增加。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Handler_read_prev</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">按照键顺序读前一行的请求数。该读方法主要用于优化ORDER BY ... DESC。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Handler_read_rnd</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Handler_read_rnd_next</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Handler_rollback</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">内部ROLLBACK语句的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Handler_savepoint</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">在一个存储引擎放置一个保存点的请求数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Handler_savepoint_rollback</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">在一个存储引擎的要求回滚到一个保存点数目。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Handler_update</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">在表内更新一行的请求数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Handler_write</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">在表内插入一行的请求数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_pages_data</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">包含数据的页数(脏或干净)。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_pages_dirty</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">当前的脏页数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_pages_flushed</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">要求清空的缓冲池页数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_pages_free</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">空页数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_pages_latched</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">在InnoDB缓冲池中锁定的页数。这是当前正读或写或由于其它原因不能清空或删除的页数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_pages_misc</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">忙的页数，因为它们已经被分配优先用作管理，例如行锁定或适用的哈希索引。该值还可以计算为Innodb_buffer_pool_pages_total - Innodb_buffer_pool_pages_free - Innodb_buffer_pool_pages_data。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_pages_total</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">缓冲池总大小（页数）。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_read_ahead_rnd</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">InnoDB初始化的“随机”read-aheads数。当查询以随机顺序扫描表的一大部分时发生。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_read_ahead_seq</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">InnoDB初始化的顺序read-aheads数。当InnoDB执行顺序全表扫描时发生。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_read_requests</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">InnoDB已经完成的逻辑读请求数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_reads</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">不能满足InnoDB必须单页读取的缓冲池中的逻辑读数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_wait_free</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">一般情况，通过后台向InnoDB缓冲池写。但是，如果需要读或创建页，并且没有干净的页可用，则它还需要先等待页面清空。该计数器对等待实例进行记数。如果已经适当设置缓冲池大小，该值应小。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_write_requests</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">向InnoDB缓冲池的写数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_data_fsyncs</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">fsync()操作数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_data_pending_fsyncs</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">当前挂起的fsync()操作数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_data_pending_reads</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">当前挂起的读数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_data_pending_writes</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">当前挂起的写数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_data_read</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">至此已经读取的数据数量（字节）。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_data_reads</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">数据读总数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_data_writes</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">数据写总数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_data_written</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">至此已经写入的数据量（字节）。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_dblwr_pages_written</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">已经执行的双写操作数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_dblwr_writes</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">双写操作已经写好的页数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_log_waits</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">我们必须等待的时间，因为日志缓冲区太小，我们在继续前必须先等待对它清空</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\" colspan=\"3\"><a title=\"MySQL运行状态show status中文详解\" href=\"http://www.sandzhang.com/blog/2010/04/07/mysql-show-status-explained-detail/\">原文地址</a></td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_log_write_requests</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">日志写请求数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_log_writes</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">向日志文件的物理写数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_os_log_fsyncs</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">向日志文件完成的fsync()写数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_os_log_pending_fsyncs</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">挂起的日志文件fsync()操作数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_os_log_pending_writes</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">挂起的日志文件写操作</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_os_log_written</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">写入日志文件的字节数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_page_size</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">编译的InnoDB页大小(默认16KB)。许多值用页来记数；页的大小很容易转换为字节。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_pages_created</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">创建的页数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_pages_read</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">读取的页数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_pages_written</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">写入的页数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_row_lock_current_waits</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">当前等待的待锁定的行数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_row_lock_time</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">行锁定花费的总时间，单位毫秒。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_row_lock_time_avg</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">行锁定的平均时间，单位毫秒。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_row_lock_time_max</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">行锁定的最长时间，单位毫秒。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_row_lock_waits</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">一行锁定必须等待的时间数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_rows_deleted</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">从InnoDB表删除的行数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_rows_inserted</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">插入到InnoDB表的行数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_rows_read</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">从InnoDB表读取的行数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_rows_updated</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">InnoDB表内更新的行数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Key_blocks_not_flushed</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">键缓存内已经更改但还没有清空到硬盘上的键的数据块数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Key_blocks_unused</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">键缓存内未使用的块数量。你可以使用该值来确定使用了多少键缓存</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Key_blocks_used</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">键缓存内使用的块数量。该值为高水平线标记，说明已经同时最多使用了多少块。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Key_read_requests</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">从缓存读键的数据块的请求数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Key_reads</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">从硬盘读取键的数据块的次数。如果Key_reads较大，则Key_buffer_size值可能太小。可以用Key_reads/Key_read_requests计算缓存损失率。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Key_write_requests</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">将键的数据块写入缓存的请求数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Key_writes</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">向硬盘写入将键的数据块的物理写操作的次数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Last_query_cost</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Session</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">用查询优化器计算的最后编译的查询的总成本。用于对比同一查询的不同查询方案的成本。默认值0表示还没有编译查询。 默认值是0。Last_query_cost具有会话范围。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Max_used_connections</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">服务器启动后已经同时使用的连接的最大数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">ndb*</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">&nbsp;</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">ndb集群相关</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Not_flushed_delayed_rows</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">等待写入INSERT DELAY队列的行数。\r\n\r\n&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Open_files</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">打开的文件的数目。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Open_streams</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">打开的流的数量(主要用于记录)。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Open_table_definitions</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">缓存的.frm文件数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Open_tables</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">当前打开的表的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\" colspan=\"3\">原文地址:<a title=\"MySQL运行状态show status中文详解\" href=\"http://www.sandzhang.com/blog/2010/04/07/mysql-show-status-explained-detail/\">http://www.sandzhang.com/blog/2010/04/07/mysql-show-status-explained-detail/</a></td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Opened_files</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">文件打开的数量。不包括诸如套接字或管道其他类型的文件。 也不包括存储引擎用来做自己的内部功能的文件。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Opened_table_definitions</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">已经缓存的.frm文件数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Opened_tables</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">已经打开的表的数量。如果Opened_tables较大，table_cache 值可能太小。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Prepared_stmt_count</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">当前的预处理语句的数量。 (最大数为系统变量: max_prepared_stmt_count)</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Qcache_free_blocks</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">查询缓存内自由内存块的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Qcache_free_memory</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">用于查询缓存的自由内存的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Qcache_hits</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">查询缓存被访问的次数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Qcache_inserts</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">加入到缓存的查询数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Qcache_lowmem_prunes</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">由于内存较少从缓存删除的查询数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Qcache_not_cached</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">非缓存查询数(不可缓存，或由于query_cache_type设定值未缓存)。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Qcache_queries_in_cache</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">登记到缓存内的查询的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Qcache_total_blocks</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">查询缓存内的总块数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Queries</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">服务器执行的请求个数，包含存储过程中的请求。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Questions</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">已经发送给服务器的查询的个数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Rpl_status</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">失败安全复制状态(还未使用)。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Select_full_join</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">没有使用索引的联接的数量。如果该值不为0,你应仔细检查表的索引</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Select_full_range_join</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">在引用的表中使用范围搜索的联接的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Select_range</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">在第一个表中使用范围的联接的数量。一般情况不是关键问题，即使该值相当大。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Select_range_check</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">在每一行数据后对键值进行检查的不带键值的联接的数量。如果不为0，你应仔细检查表的索引。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Select_scan</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">对第一个表进行完全扫描的联接的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Slave_heartbeat_period</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">复制的心跳间隔</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Slave_open_temp_tables</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">从服务器打开的临时表数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Slave_received_heartbeats</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">从服务器心跳数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Slave_retried_transactions</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">本次启动以来从服务器复制线程重试次数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Slave_running</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">如果该服务器是连接到主服务器的从服务器，则该值为ON。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Slow_launch_threads</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">创建时间超过slow_launch_time秒的线程数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Slow_queries</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">查询时间超过long_query_time秒的查询的个数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Sort_merge_passes</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">排序算法已经执行的合并的数量。如果这个变量值较大，应考虑增加sort_buffer_size系统变量的值。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Sort_range</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">在范围内执行的排序的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Sort_rows</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">已经排序的行数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Sort_scan</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">通过扫描表完成的排序的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">ssl＊</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">&nbsp;</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">ssl连接相关</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Table_locks_immediate</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">立即获得的表的锁的次数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Table_locks_waited</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">不能立即获得的表的锁的次数。如果该值较高，并且有性能问题，你应首先优化查询，然后拆分表或使用复制。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Threads_cached</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">线程缓存内的线程的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Threads_connected</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">当前打开的连接的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Threads_created</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">创建用来处理连接的线程数。如果Threads_created较大，你可能要增加thread_cache_size值。缓存访问率的计算方法Threads_created/Connections。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Threads_running</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">激活的（非睡眠状态）线程数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Uptime</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">服务器已经运行的时间（以秒为单位）。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Uptime_since_flush_status</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">最近一次使用FLUSH STATUS 的时间（以秒为单位）。</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n转自：http://www.sandzhang.com/blog/2010/04/07/mysql-show-status-explained-detail/','show status 详解','','publish','open','open','','show-status-%e8%af%a6%e8%a7%a3','','','2015-07-29 07:54:54','2015-07-29 07:54:54','',0,'http://unasm.com/?p=412',0,'post','',0),(413,1,'2015-07-29 07:54:54','2015-07-29 07:54:54','<table style=\"color: #465f93; background-color: #ffffff; border-collapse: collapse; font-size: 12px;\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td style=\"width: 215.0px; height: 24.2px; border-bottom: solid 1px #5284bc;\"><b>状态名</b></td>\r\n<td style=\"width: 42.9px; height: 24.2px; border-bottom: solid 1px #5284bc;\"><b>作用域</b></td>\r\n<td style=\"width: 100.1px; height: 24.2px; border-bottom: solid 1px #5284bc;\"><b>详细解释</b></td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Aborted_clients</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">由于客户端没有正确关闭连接导致客户端终止而中断的连接数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Aborted_connects</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">试图连接到MySQL服务器而失败的连接数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Binlog_cache_disk_use</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">使用临时二进制日志缓存但超过binlog_cache_size值并使用临时文件来保存事务中的语句的事务数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Binlog_cache_use</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">使用临时二进制日志缓存的事务数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Bytes_received</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">从所有客户端接收到的字节数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Bytes_sent</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">发送给所有客户端的字节数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">com*</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">&nbsp;</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">各种数据库操作的数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Compression</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Session</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">客户端与服务器之间只否启用压缩协议</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Connections</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">试图连接到(不管是否成功)MySQL服务器的连接数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Created_tmp_disk_tables</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">服务器执行语句时在硬盘上自动创建的临时表的数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Created_tmp_files</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">mysqld已经创建的临时文件的数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Created_tmp_tables</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">服务器执行语句时自动创建的内存中的临时表的数量。如果Created_tmp_disk_tables较大，你可能要增加tmp_table_size值使临时 表基于内存而不基于硬盘</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Delayed_errors</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">用INSERT DELAYED写的出现错误的行数(可能为duplicate key)。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Delayed_insert_threads</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">使用的INSERT DELAYED处理器线程数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Delayed_writes</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">写入的INSERT DELAYED行数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Flush_commands</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">执行的FLUSH语句数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Handler_commit</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">内部提交语句数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Handler_delete</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">行从表中删除的次数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Handler_discover</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">MySQL服务器可以问NDB CLUSTER存储引擎是否知道某一名字的表。这被称作发现。Handler_discover说明通过该方法发现的次数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Handler_prepare</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">A counter for the prepare phase of two-phase commit operations.</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Handler_read_first</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">索引中第一条被读的次数。如果较高，它建议服务器正执行大量全索引扫描；例如，SELECT col1 FROM foo，假定col1有索引。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Handler_read_key</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">根据键读一行的请求数。如果较高，说明查询和表的索引正确。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Handler_read_next</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，该值增加。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Handler_read_prev</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">按照键顺序读前一行的请求数。该读方法主要用于优化ORDER BY ... DESC。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Handler_read_rnd</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Handler_read_rnd_next</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Handler_rollback</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">内部ROLLBACK语句的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Handler_savepoint</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">在一个存储引擎放置一个保存点的请求数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Handler_savepoint_rollback</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">在一个存储引擎的要求回滚到一个保存点数目。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Handler_update</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">在表内更新一行的请求数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Handler_write</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">在表内插入一行的请求数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_pages_data</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">包含数据的页数(脏或干净)。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_pages_dirty</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">当前的脏页数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_pages_flushed</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">要求清空的缓冲池页数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_pages_free</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">空页数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_pages_latched</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">在InnoDB缓冲池中锁定的页数。这是当前正读或写或由于其它原因不能清空或删除的页数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_pages_misc</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">忙的页数，因为它们已经被分配优先用作管理，例如行锁定或适用的哈希索引。该值还可以计算为Innodb_buffer_pool_pages_total - Innodb_buffer_pool_pages_free - Innodb_buffer_pool_pages_data。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_pages_total</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">缓冲池总大小（页数）。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_read_ahead_rnd</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">InnoDB初始化的“随机”read-aheads数。当查询以随机顺序扫描表的一大部分时发生。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_read_ahead_seq</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">InnoDB初始化的顺序read-aheads数。当InnoDB执行顺序全表扫描时发生。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_read_requests</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">InnoDB已经完成的逻辑读请求数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_reads</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">不能满足InnoDB必须单页读取的缓冲池中的逻辑读数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_wait_free</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">一般情况，通过后台向InnoDB缓冲池写。但是，如果需要读或创建页，并且没有干净的页可用，则它还需要先等待页面清空。该计数器对等待实例进行记数。如果已经适当设置缓冲池大小，该值应小。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_buffer_pool_write_requests</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">向InnoDB缓冲池的写数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_data_fsyncs</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">fsync()操作数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_data_pending_fsyncs</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">当前挂起的fsync()操作数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_data_pending_reads</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">当前挂起的读数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_data_pending_writes</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">当前挂起的写数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_data_read</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">至此已经读取的数据数量（字节）。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_data_reads</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">数据读总数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_data_writes</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">数据写总数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_data_written</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">至此已经写入的数据量（字节）。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_dblwr_pages_written</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">已经执行的双写操作数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_dblwr_writes</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">双写操作已经写好的页数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_log_waits</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">我们必须等待的时间，因为日志缓冲区太小，我们在继续前必须先等待对它清空</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\" colspan=\"3\"><a title=\"MySQL运行状态show status中文详解\" href=\"http://www.sandzhang.com/blog/2010/04/07/mysql-show-status-explained-detail/\">原文地址</a></td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_log_write_requests</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">日志写请求数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_log_writes</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">向日志文件的物理写数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_os_log_fsyncs</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">向日志文件完成的fsync()写数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_os_log_pending_fsyncs</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">挂起的日志文件fsync()操作数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_os_log_pending_writes</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">挂起的日志文件写操作</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_os_log_written</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">写入日志文件的字节数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_page_size</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">编译的InnoDB页大小(默认16KB)。许多值用页来记数；页的大小很容易转换为字节。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_pages_created</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">创建的页数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_pages_read</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">读取的页数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_pages_written</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">写入的页数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_row_lock_current_waits</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">当前等待的待锁定的行数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_row_lock_time</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">行锁定花费的总时间，单位毫秒。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_row_lock_time_avg</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">行锁定的平均时间，单位毫秒。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_row_lock_time_max</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">行锁定的最长时间，单位毫秒。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_row_lock_waits</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">一行锁定必须等待的时间数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_rows_deleted</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">从InnoDB表删除的行数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_rows_inserted</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">插入到InnoDB表的行数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Innodb_rows_read</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">从InnoDB表读取的行数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Innodb_rows_updated</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">InnoDB表内更新的行数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Key_blocks_not_flushed</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">键缓存内已经更改但还没有清空到硬盘上的键的数据块数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Key_blocks_unused</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">键缓存内未使用的块数量。你可以使用该值来确定使用了多少键缓存</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Key_blocks_used</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">键缓存内使用的块数量。该值为高水平线标记，说明已经同时最多使用了多少块。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Key_read_requests</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">从缓存读键的数据块的请求数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Key_reads</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">从硬盘读取键的数据块的次数。如果Key_reads较大，则Key_buffer_size值可能太小。可以用Key_reads/Key_read_requests计算缓存损失率。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Key_write_requests</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">将键的数据块写入缓存的请求数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Key_writes</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">向硬盘写入将键的数据块的物理写操作的次数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Last_query_cost</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Session</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">用查询优化器计算的最后编译的查询的总成本。用于对比同一查询的不同查询方案的成本。默认值0表示还没有编译查询。 默认值是0。Last_query_cost具有会话范围。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Max_used_connections</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">服务器启动后已经同时使用的连接的最大数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">ndb*</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">&nbsp;</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">ndb集群相关</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Not_flushed_delayed_rows</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"height: 26.0px; border: solid 1.0px #b3cbde;\">等待写入INSERT DELAY队列的行数。\r\n\r\n&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Open_files</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">打开的文件的数目。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Open_streams</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">打开的流的数量(主要用于记录)。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Open_table_definitions</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">缓存的.frm文件数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Open_tables</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">当前打开的表的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\" colspan=\"3\">原文地址:<a title=\"MySQL运行状态show status中文详解\" href=\"http://www.sandzhang.com/blog/2010/04/07/mysql-show-status-explained-detail/\">http://www.sandzhang.com/blog/2010/04/07/mysql-show-status-explained-detail/</a></td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Opened_files</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">文件打开的数量。不包括诸如套接字或管道其他类型的文件。 也不包括存储引擎用来做自己的内部功能的文件。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Opened_table_definitions</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">已经缓存的.frm文件数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Opened_tables</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">已经打开的表的数量。如果Opened_tables较大，table_cache 值可能太小。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Prepared_stmt_count</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">当前的预处理语句的数量。 (最大数为系统变量: max_prepared_stmt_count)</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Qcache_free_blocks</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">查询缓存内自由内存块的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Qcache_free_memory</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">用于查询缓存的自由内存的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Qcache_hits</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">查询缓存被访问的次数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Qcache_inserts</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">加入到缓存的查询数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Qcache_lowmem_prunes</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">由于内存较少从缓存删除的查询数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Qcache_not_cached</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">非缓存查询数(不可缓存，或由于query_cache_type设定值未缓存)。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Qcache_queries_in_cache</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">登记到缓存内的查询的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Qcache_total_blocks</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">查询缓存内的总块数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Queries</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">服务器执行的请求个数，包含存储过程中的请求。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Questions</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">已经发送给服务器的查询的个数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Rpl_status</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">失败安全复制状态(还未使用)。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Select_full_join</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">没有使用索引的联接的数量。如果该值不为0,你应仔细检查表的索引</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Select_full_range_join</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">在引用的表中使用范围搜索的联接的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Select_range</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">在第一个表中使用范围的联接的数量。一般情况不是关键问题，即使该值相当大。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Select_range_check</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">在每一行数据后对键值进行检查的不带键值的联接的数量。如果不为0，你应仔细检查表的索引。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Select_scan</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">对第一个表进行完全扫描的联接的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Slave_heartbeat_period</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">复制的心跳间隔</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Slave_open_temp_tables</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">从服务器打开的临时表数量</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Slave_received_heartbeats</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">从服务器心跳数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Slave_retried_transactions</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">本次启动以来从服务器复制线程重试次数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Slave_running</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">如果该服务器是连接到主服务器的从服务器，则该值为ON。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Slow_launch_threads</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">创建时间超过slow_launch_time秒的线程数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Slow_queries</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">查询时间超过long_query_time秒的查询的个数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Sort_merge_passes</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">排序算法已经执行的合并的数量。如果这个变量值较大，应考虑增加sort_buffer_size系统变量的值。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Sort_range</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">在范围内执行的排序的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Sort_rows</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">已经排序的行数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Sort_scan</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Both</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">通过扫描表完成的排序的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">ssl＊</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">&nbsp;</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">ssl连接相关</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Table_locks_immediate</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">立即获得的表的锁的次数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Table_locks_waited</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">不能立即获得的表的锁的次数。如果该值较高，并且有性能问题，你应首先优化查询，然后拆分表或使用复制。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Threads_cached</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">线程缓存内的线程的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Threads_connected</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">当前打开的连接的数量。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Threads_created</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"height: 26.0px; background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">创建用来处理连接的线程数。如果Threads_created较大，你可能要增加thread_cache_size值。缓存访问率的计算方法Threads_created/Connections。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Threads_running</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"border: solid 1.0px #b3cbde;\">激活的（非睡眠状态）线程数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Uptime</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">服务器已经运行的时间（以秒为单位）。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Uptime_since_flush_status</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">Global</td>\r\n<td style=\"background-color: #f1f6f7; border: solid 1.0px #b3cbde;\">最近一次使用FLUSH STATUS 的时间（以秒为单位）。</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n转自：http://www.sandzhang.com/blog/2010/04/07/mysql-show-status-explained-detail/','show status 详解','','inherit','open','open','','412-revision-v1','','','2015-07-29 07:54:54','2015-07-29 07:54:54','',412,'http://unasm.com/2015/07/413/',0,'revision','',0),(414,1,'2015-07-31 10:07:47','2015-07-31 10:07:47','\n[php]\nback_data starting ........\ncatch_data starting ........\ncatch_service_data starting ........\nchannel starting ........\ncontrol_config starting ........\nchannel  is right\ncatch_service_data  is right\ncontrol_config  is right\nedit_data starting ........\nkeyword_pic starting ........\nback_data  is right\ncatch_data  is right\nkeyword_pic  is right\nlog starting ........\nmissed_news_data starting ........\nopen_course_attent starting ........\npublish_log_v2 starting ........\npush_billiards starting ........\npush_chinese_basketball starting ........\npush_chinese_football starting ........\npush_international_football starting ........\npush_list starting ........\npush_nba starting ........\npush_news starting ........\npush_other starting ........\npush_table_tennis starting ........\npush_tennis starting ........\npush_volleyball starting ........\nroll_news starting ........\nservice_catch_data_v2 starting ........\nservice_config_v2 starting ........\nsports_ad starting ........\nsports_client_living starting ........\nservice_config_v2  is right\nservice_catch_data_v2  is right\nsports_ad  is right\npush_list  is right\nsports_client_living  is right\n[/php]\n\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，需要谨慎的控制最大的连接打开数量，及时关闭释放系统资源。\n\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式验证有无缺失,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\n\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,因为系统的可以打开的文件描述符是有上限的，一般来说是1024个，并发的时候，忘记关闭了，后面的就没有位置了。db.Query的rows千万要及时关闭。\n\n还有一个，就是下面的报错\n\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\n\n从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\n\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，在尽可能的情况下，将闭包独立差费成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，可以使用信道的方式。\n\n在不限制协程总量的情况下，单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，此时协程数量在35个左右，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030s,协程15个的时候，但协程处理请求速度达到420/s，增加了一点，但是不多，可见不同的机器，不同的处理能力，线程数量和请求速度并非是负相关的。577s 内处理db请求 1800466，3120平均\n\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\n\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\n\n发现database/sql里，没有设置Query超时的地方，也就是如果一个query发出去，很久很久没有响应，程序会一直处于等待阶段，这个会很影响效率\n\n信道这东西，不仅读取的时候会阻塞，插入的时候，也会阻塞，向一个信道中输入值，如果那边迟迟不读，这边也会一直阻塞。这个会影响调用的先后顺序。\n\ntime.NewTimer 可以返回一个定时器对象timer，在设定时间之后， timer中的信道属性C会被赋予一个值，但是如果提前调用了timer.Stop(),time.C会一直处于阻塞状态，例如\n\n[php]\n ticker := time.NewTimer(time.Second * 400)\n     go func() {\n         //防止超时\n      &lt;-ticker.C\n      timeOut = 1\n      defer ticker.Stop()\n     }()\n     defer func() {\n        // 如果已经被关闭，会返回false，如果没有，提前触发\n       Println(&quot;closing ticker.C : &quot;, ticker.Reset(time.Second*0))\n  }()\n[/php]\n\n注意，如果在第二个defer 里面调用 ticker.Stop()的话，则 上面的协程会一直阻塞在 &lt;-ticker.C，因为ticker已经Stop了，永远都不会有数据写入ticker.C，但是信道本身并没有被关闭，还在阻塞等待，而且，因为是 receive-only channel ，所以并没有办法手动close，结果就是该协程就一直卡死在那里，像一个僵尸进程。唯一的办法只能是任由时间到，然后自己触发ticker.C然后 defer ticker.Stop(),如果无法忍受资源浪费，可以像我那样，提前触发，通过Reset的方式，当然，如果已经Close了，Reset会返回false，无伤大雅。\n\n谨慎的对待阻塞，认真思考触发的条件，真的，不然程序就会卡死在某个你不小心触发的条件下','golang 并发查库','','inherit','open','open','','409-autosave-v1','','','2015-07-31 10:07:47','2015-07-31 10:07:47','',409,'http://unasm.com/2015/07/414/',0,'revision','',0),(416,1,'2015-07-29 08:11:44','2015-07-29 08:11:44','\r\n[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式，验证,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,db.Query的rows，千万要及时close\r\n还有一个，就是\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n，从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，请使用信道的方式。\r\n\r\n单个goroutine处理5w多个请求，花费时间是10分钟的样子,不同的goroutine处理。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n\r\n&nbsp;','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-29 08:11:44','2015-07-29 08:11:44','',409,'http://unasm.com/2015/07/416/',0,'revision','',0),(417,1,'2015-07-29 08:12:35','2015-07-29 08:12:35','\r\n[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式，验证,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,db.Query的rows，千万要及时close\r\n还有一个，就是\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n，从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，请使用信道的方式。\r\n\r\n单个goroutine处理5w多个请求，花费时间是10分钟的样子,不同的goroutine处理之间并行，并没有因为协程多而彼此耽误。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n\r\n&nbsp;','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-29 08:12:35','2015-07-29 08:12:35','',409,'http://unasm.com/2015/07/417/',0,'revision','',0),(418,1,'2015-07-29 13:14:41','2015-07-29 13:14:41','源自：http://man7.org/linux/man-pages/man2/socket.2.html\n<h4>函数名</h4>\nsocket - 为通信创建一个节点。\n<h4>定义</h4>\n\n[cpp]\n #include &amp;lt;sys/types.h&amp;gt;          /* See NOTES */\n #include &amp;lt;sys/socket.h&amp;gt;\n int socket(int domain, int type, int protocol);\n[/cpp]\n\n<h4>描述</h4>\nsocket函数创建一个通信节点，并返回一个描述符。\n\n参数domain 指的是通信地址，这个决定了 protocol 用于通信的协议。具体的通信协议在&lt;sys/socket.h&gt;中定义，\n\n目前定义的协议有：\n\n[cpp]\n       AF_UNIX, AF_LOCAL   本地协议              unix(7)\n       AF_INET             IPv4 网络协议         ip(7)\n       AF_INET6            IPv6 网络协议         ipv6(7)\n       AF_IPX              IPX - Novell 协议\n       AF_NETLINK          内核用户接口设备协议    netlink(7)\n       AF_X25              ITU-T X.25 / ISO-8208 protocol   x25(7)\n       AF_AX25             Amateur radio AX.25 protocol\n       AF_ATMPVC           Access to raw ATM PVCs\n       AF_APPLETALK        AppleTalk                        ddp(7)\n       AF_PACKET           Low level packet interface       packet(7)\n       AF_ALG              Interface to kernel crypto API\n[/cpp]\n\nsocket通信中有type参数，标明通信的方式，目前定义的通信方式有：\n<ol>\n	<li>SOCK_STREAM ：双向可靠，有连接的二进制流通信，大型数据传输，也可以支持。</li>\n	<li>SOCK_DGRAM ：支持 数据包通信（无连接，最大长度固定的通信机制,UDP）。</li>\n	<li>SOCK_SEQPACKET：提供一种双向可靠，最大长度固定的有链接的通信，每次调用时候每个消费者都需要读取整个包。</li>\n	<li>SOCK_RAW：提供一种原生的网络通信方式（用于自定义通信，黑客，高级网络通信）</li>\n	<li>SOCK_RDM: 可靠数据报，但是不保证传输顺序。</li>\n	<li>SOCK_PACKET：过时了，不要再新程序中使用。</li>\n</ol>\n不是全部的通信协议都支持所有的通信方式的。Linux 2.6.27之后，type参数有了第二个作用：指定socket类型的情况下，它可能包含一些位运算或者下面的值，去修正socket的行为\n<ol>\n	<li><b>SOCK_NONBLOCK</b> 在新打开的设置O_NONBLOCK 文件状态符,有了这个标志位，就不用再每次调用fcntl()了。对于socket 的recv()和send()采用非阻塞的方式，对于磁盘I/O ，非阻塞并不产生效果</li>\n	<li><b> SOCK_CLOEXEC 在新打开的文件描述符上面设置 FD_CLOEXEC 标志位，看O_CLOEXEC 在open函数中的作用，就知道这个标志位的意义了</b></li>\n</ol>\nprotocol 指定socket中用的协议。一般来说，一种socket类型，只有一种协议对应，这个时候，protocol 可以为0，但是也存在一种socket类型有多重通信协议，这个时候，就必须指定具体的通信协议。协议号指定为通信的时候被取代的“通信域”。\nSOCK_STREAM 类型是双工通信的二进制流。不限制通信量的大小。在收发数据的时候，socket流必须是在连接状态的，连接是通过 connect()函数创建,连接之后，数据通过read和write或者其他的变体，比如send,recv 传输。通过close关闭会话。大数据包可以通过send发送，recv接受。\n\nSOCK_STREAM 通信协议保证数据不会丢失或者重复，如果有数据段在一个合理的时间内不能成功发送,该连接会被认为已死，如果设置了SO_KEEPALIVE，socket协议会检查是不是有其他的符合通信协议的链路存在，如果在已断开的流里收发数据，该进程会收到SIGPIPE 信号，会令未处理该信号的进程异常退出。\nSOCK_SEQPACKET 和SOCK_STREAM 类似，唯一的区别是调用read()的时候，返回的只是请求的数据量。多余的数据会被丢弃,数据报范围内的数据都会被保留。\n\nSOCK_DGRAM和SOCK_RAW 允许发送数据包给sendto 函数，数据包通常有recvfrom接收，该函数返回下一个数据包内容，以及发送者的地址。\n\nSOCK_PACKET 是一个过气的函数，用于从设备驱动直接接收原生的数据包，使用packet函数替代。\n','SOCKET 函数使用(译)','','publish','open','open','','socket-%e5%87%bd%e6%95%b0%e4%bd%bf%e7%94%a8%e8%af%91','','','2015-08-03 03:24:24','2015-08-03 03:24:24','',0,'http://unasm.com/?p=418',0,'post','',0),(419,1,'2015-07-29 13:14:41','2015-07-29 13:14:41','源自：http://man7.org/linux/man-pages/man2/socket.2.html\r\n<h4>函数名</h4>\r\nsocket - 为通信创建一个节点。\r\n<h4>定义</h4>\r\n\r\n[cpp]\r\n #include &lt;sys/types.h&gt;          /* See NOTES */\r\n       #include &lt;sys/socket.h&gt;\r\n       int socket(int domain, int type, int protocol);\r\n[/cpp]\r\n\r\n<h4>描述</h4>\r\nsocket函数创建一个通信节点，并返回一个描述符。\r\n\r\n参数domain 指的是通信地址，这个决定了 protocol 用于通信的协议。具体的通信协议在&lt;sys/socket.h&gt;中定义，\r\n\r\n目前定义的协议有：\r\n\r\n[cpp]\r\n       AF_UNIX, AF_LOCAL   本地协议              unix(7)\r\n       AF_INET             IPv4 网络协议         ip(7)\r\n       AF_INET6            IPv6 网络协议         ipv6(7)\r\n       AF_IPX              IPX - Novell 协议\r\n       AF_NETLINK          内核用户接口设备协议    netlink(7)\r\n       AF_X25              ITU-T X.25 / ISO-8208 protocol   x25(7)\r\n       AF_AX25             Amateur radio AX.25 protocol\r\n       AF_ATMPVC           Access to raw ATM PVCs\r\n       AF_APPLETALK        AppleTalk                        ddp(7)\r\n       AF_PACKET           Low level packet interface       packet(7)\r\n       AF_ALG              Interface to kernel crypto API\r\n[/cpp]\r\n\r\nsocket通信中有type参数，标明通信的方式，目前定义的通信方式有：\r\n<ol>\r\n	<li>\r\n<pre><b>SOCK_STREAM ：双向可靠，有连接的二进制流通信，大型数据传输，也可以支持。</b></pre>\r\n</li>\r\n	<li>\r\n<pre><b>SOCK_DGRAM ：支持 </b>datagrams 通信，，无连接，最大长度固定的通信机制。</pre>\r\n</li>\r\n	<li>\r\n<pre><b>SOCK_SEQPACKET：提供一种双向可靠，最大长度固定的有链接的通信，每次调用时候每个消费者都需要读取整个包。</b></pre>\r\n</li>\r\n	<li>\r\n<pre><b>SOCK_RAW：\r\n\r\n\r\n</b></pre>\r\n</li>\r\n</ol>','SOCKET 函数使用(译)','','inherit','open','open','','418-revision-v1','','','2015-07-29 13:14:41','2015-07-29 13:14:41','',418,'http://unasm.com/2015/07/419/',0,'revision','',0),(420,1,'2015-08-03 03:20:39','2015-08-03 03:20:39','源自：http://man7.org/linux/man-pages/man2/socket.2.html\n<h4>函数名</h4>\nsocket - 为通信创建一个节点。\n<h4>定义</h4>\n\n[cpp]\n #include &lt;sys/types.h&gt;          /* See NOTES */\n #include &lt;sys/socket.h&gt;\n int socket(int domain, int type, int protocol);\n[/cpp]\n\n<h4>描述</h4>\nsocket函数创建一个通信节点，并返回一个描述符。\n\n参数domain 指的是通信地址，这个决定了 protocol 用于通信的协议。具体的通信协议在&lt;sys/socket.h&gt;中定义，\n\n目前定义的协议有：\n\n[cpp]\n       AF_UNIX, AF_LOCAL   本地协议              unix(7)\n       AF_INET             IPv4 网络协议         ip(7)\n       AF_INET6            IPv6 网络协议         ipv6(7)\n       AF_IPX              IPX - Novell 协议\n       AF_NETLINK          内核用户接口设备协议    netlink(7)\n       AF_X25              ITU-T X.25 / ISO-8208 protocol   x25(7)\n       AF_AX25             Amateur radio AX.25 protocol\n       AF_ATMPVC           Access to raw ATM PVCs\n       AF_APPLETALK        AppleTalk                        ddp(7)\n       AF_PACKET           Low level packet interface       packet(7)\n       AF_ALG              Interface to kernel crypto API\n[/cpp]\n\nsocket通信中有type参数，标明通信的方式，目前定义的通信方式有：\n<ol>\n	<li>SOCK_STREAM ：双向可靠，有连接的二进制流通信，大型数据传输，也可以支持。</li>\n	<li>SOCK_DGRAM ：支持 数据包通信（无连接，最大长度固定的通信机制,UDP）。</li>\n	<li>SOCK_SEQPACKET：提供一种双向可靠，最大长度固定的有链接的通信，每次调用时候每个消费者都需要读取整个包。</li>\n	<li>SOCK_RAW：提供一种原生的网络通信方式（用于自定义通信，黑客，高级网络通信）</li>\n	<li>SOCK_RDM: 可靠数据报，但是不保证传输顺序。</li>\n	<li>SOCK_PACKET：过时了，不要再新程序中使用。</li>\n</ol>\n不是全部的通信协议都支持所有的通信方式的。Linux 2.6.27之后，type参数有了第二个作用：指定socket类型的情况下，它可能包含一些位运算或者下面的值，去修正socket的行为\n<ol>\n	<li><b>SOCK_NONBLOCK</b> 在新打开的设置O_NONBLOCK 文件状态符,有了这个标志位，就不用再每次调用fcntl()了。对于socket 的recv()和send()采用非阻塞的方式，对于磁盘I/O ，非阻塞并不产生效果</li>\n	<li><b> SOCK_CLOEXEC 在新打开的文件描述符上面设置 FD_CLOEXEC 标志位，看O_CLOEXEC 在open函数中的作用，就知道这个标志位的意义了</b></li>\n</ol>\nprotocol 指定socket中用的协议。一般来说，一种socket类型，只有一种协议对应，这个时候，protocol 可以为0，但是也存在一种socket类型有多重通信协议，这个时候，就必须指定具体的通信协议。协议号指定为通信的时候被取代的“通信域”。\nSOCK_STREAM 类型是双工通信的二进制流。不限制通信量的大小。在收发数据的时候，socket流必须是在连接状态的，连接是通过 connect()函数创建,连接之后，数据通过read和write或者其他的变体，比如send,recv 传输。通过close关闭会话。大数据包可以通过send发送，recv接受。\n\nSOCK_STREAM 通信协议保证数据不会丢失或者重复，如果有数据段在一个合理的时间内不能成功发送,该连接会被认为已死，如果设置了SO_KEEPALIVE，socket协议会检查是不是有其他的符合通信协议的链路存在，如果在已断开的流里收发数据，该进程会收到SIGPIPE 信号，会令未处理该信号的进程异常退出。\nSOCK_SEQPACKET 和SOCK_STREAM 类似，唯一的区别是调用read()的时候，返回的只是请求的数据量。多余的数据会被丢弃,数据报范围内的数据都会被保留。\n\nSOCK_DGRAM和SOCK_RAW 允许发送数据包给sendto 函数，数据包通常有recvfrom接收，该函数返回下一个数据包内容，以及发送者的地址。\n\nSOCK_PACKET 是一个过气的函数，用于从设备驱动直接接收原生的数据包，使用packet函数替代。\n','SOCKET 函数使用(译)','','inherit','open','open','','418-autosave-v1','','','2015-08-03 03:20:39','2015-08-03 03:20:39','',418,'http://unasm.com/2015/07/420/',0,'revision','',0),(422,1,'2015-07-29 13:53:11','2015-07-29 13:53:11','源自：http://man7.org/linux/man-pages/man2/socket.2.html\r\n<h4>函数名</h4>\r\nsocket - 为通信创建一个节点。\r\n<h4>定义</h4>\r\n\r\n[cpp]\r\n #include &lt;sys/types.h&gt;          /* See NOTES */\r\n #include &lt;sys/socket.h&gt;\r\n int socket(int domain, int type, int protocol);\r\n[/cpp]\r\n\r\n<h4>描述</h4>\r\nsocket函数创建一个通信节点，并返回一个描述符。\r\n\r\n参数domain 指的是通信地址，这个决定了 protocol 用于通信的协议。具体的通信协议在&lt;sys/socket.h&gt;中定义，\r\n\r\n目前定义的协议有：\r\n\r\n[cpp]\r\n       AF_UNIX, AF_LOCAL   本地协议              unix(7)\r\n       AF_INET             IPv4 网络协议         ip(7)\r\n       AF_INET6            IPv6 网络协议         ipv6(7)\r\n       AF_IPX              IPX - Novell 协议\r\n       AF_NETLINK          内核用户接口设备协议    netlink(7)\r\n       AF_X25              ITU-T X.25 / ISO-8208 protocol   x25(7)\r\n       AF_AX25             Amateur radio AX.25 protocol\r\n       AF_ATMPVC           Access to raw ATM PVCs\r\n       AF_APPLETALK        AppleTalk                        ddp(7)\r\n       AF_PACKET           Low level packet interface       packet(7)\r\n       AF_ALG              Interface to kernel crypto API\r\n[/cpp]\r\n\r\nsocket通信中有type参数，标明通信的方式，目前定义的通信方式有：\r\n<ol>\r\n	<li>SOCK_STREAM ：双向可靠，有连接的二进制流通信，大型数据传输，也可以支持。</li>\r\n	<li>SOCK_DGRAM ：支持 数据包通信（</b>无连接，最大长度固定的通信机制,UDP）。</li>\r\n	<li>SOCK_SEQPACKET：提供一种双向可靠，最大长度固定的有链接的通信，每次调用时候每个消费者都需要读取整个包。</li>\r\n	<li>SOCK_RAW：提供一种原生的网络通信方式（用于自定义通信）</li>\r\n	<li>SOCK_RDM: 可靠数据报，但是不保证传输顺序。</li>\r\n        <li>SOCK_PACKET：过时了，不要再新程序中使用。</li>\r\n</ol>\r\n&nbsp;','SOCKET 函数使用(译)','','inherit','open','open','','418-revision-v1','','','2015-07-29 13:53:11','2015-07-29 13:53:11','',418,'http://unasm.com/2015/07/422/',0,'revision','',0),(421,1,'2015-07-29 13:51:07','2015-07-29 13:51:07','源自：http://man7.org/linux/man-pages/man2/socket.2.html\r\n<h4>函数名</h4>\r\nsocket - 为通信创建一个节点。\r\n<h4>定义</h4>\r\n\r\n[cpp]\r\n #include &lt;sys/types.h&gt;          /* See NOTES */\r\n       #include &lt;sys/socket.h&gt;\r\n       int socket(int domain, int type, int protocol);\r\n[/cpp]\r\n\r\n<h4>描述</h4>\r\nsocket函数创建一个通信节点，并返回一个描述符。\r\n\r\n参数domain 指的是通信地址，这个决定了 protocol 用于通信的协议。具体的通信协议在&lt;sys/socket.h&gt;中定义，\r\n\r\n目前定义的协议有：\r\n\r\n[cpp]\r\n       AF_UNIX, AF_LOCAL   本地协议              unix(7)\r\n       AF_INET             IPv4 网络协议         ip(7)\r\n       AF_INET6            IPv6 网络协议         ipv6(7)\r\n       AF_IPX              IPX - Novell 协议\r\n       AF_NETLINK          内核用户接口设备协议    netlink(7)\r\n       AF_X25              ITU-T X.25 / ISO-8208 protocol   x25(7)\r\n       AF_AX25             Amateur radio AX.25 protocol\r\n       AF_ATMPVC           Access to raw ATM PVCs\r\n       AF_APPLETALK        AppleTalk                        ddp(7)\r\n       AF_PACKET           Low level packet interface       packet(7)\r\n       AF_ALG              Interface to kernel crypto API\r\n[/cpp]\r\n\r\nsocket通信中有type参数，标明通信的方式，目前定义的通信方式有：\r\n<ol>\r\n	<li>\r\n<pre><b>SOCK_STREAM ：双向可靠，有连接的二进制流通信，大型数据传输，也可以支持。</b></pre>\r\n</li>\r\n	<li>\r\n<pre><b>SOCK_DGRAM ：支持 数据包通信（</b>无连接，最大长度固定的通信机制,UDP）。</pre>\r\n</li>\r\n	<li>\r\n<pre><b>SOCK_SEQPACKET：提供一种双向可靠，最大长度固定的有链接的通信，每次调用时候每个消费者都需要读取整个包。</b></pre>\r\n</li>\r\n	<li>\r\n<pre><b>SOCK_RAW：提供一种原生的网络通信方式（用于自定义通信）</b></pre>\r\n</li>\r\n	<li>\r\n<pre><b>SOCK_RDM: 可靠数据报，但是不保证传输顺序。</b></pre>\r\n</li>\r\n	<li>\r\n<pre><b>SOCK_PACKET：过时了，不要再新程序中使用。\r\n\r\n\r\n\r\n</b></pre>\r\n</li>\r\n</ol>\r\n&nbsp;','SOCKET 函数使用(译)','','inherit','open','open','','418-revision-v1','','','2015-07-29 13:51:07','2015-07-29 13:51:07','',418,'http://unasm.com/2015/07/421/',0,'revision','',0),(423,1,'2015-07-29 13:55:13','2015-07-29 13:55:13','源自：http://man7.org/linux/man-pages/man2/socket.2.html\r\n<h4>函数名</h4>\r\nsocket - 为通信创建一个节点。\r\n<h4>定义</h4>\r\n\r\n[cpp]\r\n #include &lt;sys/types.h&gt;          /* See NOTES */\r\n #include &lt;sys/socket.h&gt;\r\n int socket(int domain, int type, int protocol);\r\n[/cpp]\r\n\r\n<h4>描述</h4>\r\nsocket函数创建一个通信节点，并返回一个描述符。\r\n\r\n参数domain 指的是通信地址，这个决定了 protocol 用于通信的协议。具体的通信协议在&lt;sys/socket.h&gt;中定义，\r\n\r\n目前定义的协议有：\r\n\r\n[cpp]\r\n       AF_UNIX, AF_LOCAL   本地协议              unix(7)\r\n       AF_INET             IPv4 网络协议         ip(7)\r\n       AF_INET6            IPv6 网络协议         ipv6(7)\r\n       AF_IPX              IPX - Novell 协议\r\n       AF_NETLINK          内核用户接口设备协议    netlink(7)\r\n       AF_X25              ITU-T X.25 / ISO-8208 protocol   x25(7)\r\n       AF_AX25             Amateur radio AX.25 protocol\r\n       AF_ATMPVC           Access to raw ATM PVCs\r\n       AF_APPLETALK        AppleTalk                        ddp(7)\r\n       AF_PACKET           Low level packet interface       packet(7)\r\n       AF_ALG              Interface to kernel crypto API\r\n[/cpp]\r\n\r\nsocket通信中有type参数，标明通信的方式，目前定义的通信方式有：\r\n<ol>\r\n	<li>SOCK_STREAM ：双向可靠，有连接的二进制流通信，大型数据传输，也可以支持。</li>\r\n	<li>SOCK_DGRAM ：支持 数据包通信（</b>无连接，最大长度固定的通信机制,UDP）。</li>\r\n	<li>SOCK_SEQPACKET：提供一种双向可靠，最大长度固定的有链接的通信，每次调用时候每个消费者都需要读取整个包。</li>\r\n	<li>SOCK_RAW：提供一种原生的网络通信方式（用于自定义通信，黑客，高级网络通信）</li>\r\n	<li>SOCK_RDM: 可靠数据报，但是不保证传输顺序。</li>\r\n        <li>SOCK_PACKET：过时了，不要再新程序中使用。</li>\r\n</ol>\r\n不是所有的通信方式都可以被全部的通信协议支持的。','SOCKET 函数使用(译)','','inherit','open','open','','418-revision-v1','','','2015-07-29 13:55:13','2015-07-29 13:55:13','',418,'http://unasm.com/2015/07/423/',0,'revision','',0),(424,1,'2015-07-30 02:28:52','2015-07-30 02:28:52','源自：http://man7.org/linux/man-pages/man2/socket.2.html\r\n<h4>函数名</h4>\r\nsocket - 为通信创建一个节点。\r\n<h4>定义</h4>\r\n\r\n[cpp]\r\n #include &lt;sys/types.h&gt;          /* See NOTES */\r\n #include &lt;sys/socket.h&gt;\r\n int socket(int domain, int type, int protocol);\r\n[/cpp]\r\n\r\n<h4>描述</h4>\r\nsocket函数创建一个通信节点，并返回一个描述符。\r\n\r\n参数domain 指的是通信地址，这个决定了 protocol 用于通信的协议。具体的通信协议在&lt;sys/socket.h&gt;中定义，\r\n\r\n目前定义的协议有：\r\n\r\n[cpp]\r\n       AF_UNIX, AF_LOCAL   本地协议              unix(7)\r\n       AF_INET             IPv4 网络协议         ip(7)\r\n       AF_INET6            IPv6 网络协议         ipv6(7)\r\n       AF_IPX              IPX - Novell 协议\r\n       AF_NETLINK          内核用户接口设备协议    netlink(7)\r\n       AF_X25              ITU-T X.25 / ISO-8208 protocol   x25(7)\r\n       AF_AX25             Amateur radio AX.25 protocol\r\n       AF_ATMPVC           Access to raw ATM PVCs\r\n       AF_APPLETALK        AppleTalk                        ddp(7)\r\n       AF_PACKET           Low level packet interface       packet(7)\r\n       AF_ALG              Interface to kernel crypto API\r\n[/cpp]\r\n\r\nsocket通信中有type参数，标明通信的方式，目前定义的通信方式有：\r\n<ol>\r\n	<li>SOCK_STREAM ：双向可靠，有连接的二进制流通信，大型数据传输，也可以支持。</li>\r\n	<li>SOCK_DGRAM ：支持 数据包通信（</b>无连接，最大长度固定的通信机制,UDP）。</li>\r\n	<li>SOCK_SEQPACKET：提供一种双向可靠，最大长度固定的有链接的通信，每次调用时候每个消费者都需要读取整个包。</li>\r\n	<li>SOCK_RAW：提供一种原生的网络通信方式（用于自定义通信，黑客，高级网络通信）</li>\r\n	<li>SOCK_RDM: 可靠数据报，但是不保证传输顺序。</li>\r\n        <li>SOCK_PACKET：过时了，不要再新程序中使用。</li>\r\n</ol>\r\n不是全部的通信协议都支持所有的通信方式的。','SOCKET 函数使用(译)','','inherit','open','open','','418-revision-v1','','','2015-07-30 02:28:52','2015-07-30 02:28:52','',418,'http://unasm.com/2015/07/424/',0,'revision','',0),(425,1,'2015-07-30 06:17:12','2015-07-30 06:17:12','[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式，验证,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,db.Query的rows，千万要及时close\r\n还有一个，就是\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n，从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，请使用信道的方式。\r\n\r\n单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到15个协程，发现单协程请求处理速度达到420/s。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n\r\n&nbsp;','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-30 06:17:12','2015-07-30 06:17:12','',409,'http://unasm.com/2015/07/425/',0,'revision','',0),(426,1,'2015-07-30 06:45:22','2015-07-30 06:45:22','[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式，验证,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,db.Query的rows，千万要及时close\r\n还有一个，就是\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n，从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，请使用信道的方式。\r\n\r\n单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到15个协程，发现单协程请求处理速度达到420/s,全部2747019个查询,花了1030ms。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n\r\n&nbsp;','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-30 06:45:22','2015-07-30 06:45:22','',409,'http://unasm.com/2015/07/426/',0,'revision','',0),(427,1,'2015-07-30 06:51:51','2015-07-30 06:51:51','[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式，验证,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,db.Query的rows，千万要及时close\r\n还有一个，就是\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n，从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，请使用信道的方式。\r\n\r\n单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030ms。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n\r\n&nbsp;','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-30 06:51:51','2015-07-30 06:51:51','',409,'http://unasm.com/2015/07/427/',0,'revision','',0),(428,1,'2015-07-30 06:55:14','2015-07-30 06:55:14','[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式，验证,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,db.Query的rows，千万要及时close\r\n还有一个，就是\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n，从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，请使用信道的方式。\r\n\r\n在不限制协程总量的情况下，单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，此时协程数量在35个左右，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030ms,协程15个的时候，但协程处理请求速度达到420/s，增加了一点，但是不多，可见不同的机器，不同的处理能力，线程数量和请求速度并非是负相关的。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n\r\n&nbsp;','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-30 06:55:14','2015-07-30 06:55:14','',409,'http://unasm.com/2015/07/428/',0,'revision','',0),(429,1,'2015-07-30 09:45:42','2015-07-30 09:45:42','[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式，验证,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,db.Query的rows，千万要及时close\r\n还有一个，就是\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n，从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，请使用信道的方式。\r\n\r\n在不限制协程总量的情况下，单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，此时协程数量在35个左右，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030ms,协程15个的时候，但协程处理请求速度达到420/s，增加了一点，但是不多，可见不同的机器，不同的处理能力，线程数量和请求速度并非是负相关的。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n发现database/sql里，没有设置Query超时的地方，也就是如果一个query发出去，很久很久没有响应，程序会一直处于等待阶段，这个会很影响效率\r\n\r\n&nbsp;','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-30 09:45:42','2015-07-30 09:45:42','',409,'http://unasm.com/2015/07/429/',0,'revision','',0),(430,1,'2015-07-30 10:16:13','2015-07-30 10:16:13','[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式，验证,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,db.Query的rows，千万要及时close\r\n还有一个，就是\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n，从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，请使用信道的方式。\r\n\r\n在不限制协程总量的情况下，单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，此时协程数量在35个左右，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030ms,协程15个的时候，但协程处理请求速度达到420/s，增加了一点，但是不多，可见不同的机器，不同的处理能力，线程数量和请求速度并非是负相关的。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n发现database/sql里，没有设置Query超时的地方，也就是如果一个query发出去，很久很久没有响应，程序会一直处于等待阶段，这个会很影响效率\r\n\r\n信道这东西，不仅读取的时候会阻塞，插入的时候，也会阻塞。\r\n&nbsp;','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-30 10:16:13','2015-07-30 10:16:13','',409,'http://unasm.com/2015/07/430/',0,'revision','',0),(431,1,'2015-07-30 10:16:47','2015-07-30 10:16:47','[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式，验证,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,db.Query的rows，千万要及时close\r\n还有一个，就是\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n，从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，请使用信道的方式。\r\n\r\n在不限制协程总量的情况下，单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，此时协程数量在35个左右，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030ms,协程15个的时候，但协程处理请求速度达到420/s，增加了一点，但是不多，可见不同的机器，不同的处理能力，线程数量和请求速度并非是负相关的。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n发现database/sql里，没有设置Query超时的地方，也就是如果一个query发出去，很久很久没有响应，程序会一直处于等待阶段，这个会很影响效率\r\n\r\n信道这东西，不仅读取的时候会阻塞，插入的时候，也会阻塞，向一个信道中输入值，如果那边迟迟不读，这边也会一直阻塞。\r\n&nbsp;','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-30 10:16:47','2015-07-30 10:16:47','',409,'http://unasm.com/2015/07/431/',0,'revision','',0),(432,1,'2015-07-30 10:24:11','2015-07-30 10:24:11','[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式，验证,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,db.Query的rows，千万要及时close\r\n还有一个，就是\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n，从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，请使用信道的方式。\r\n\r\n在不限制协程总量的情况下，单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，此时协程数量在35个左右，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030ms,协程15个的时候，但协程处理请求速度达到420/s，增加了一点，但是不多，可见不同的机器，不同的处理能力，线程数量和请求速度并非是负相关的。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n发现database/sql里，没有设置Query超时的地方，也就是如果一个query发出去，很久很久没有响应，程序会一直处于等待阶段，这个会很影响效率\r\n\r\n信道这东西，不仅读取的时候会阻塞，插入的时候，也会阻塞，向一个信道中输入值，如果那边迟迟不读，这边也会一直阻塞。这个会影响调用的先后顺序。\r\n&nbsp;','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-30 10:24:11','2015-07-30 10:24:11','',409,'http://unasm.com/2015/07/432/',0,'revision','',0),(433,1,'2015-07-30 12:37:58','2015-07-30 12:37:58','[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式，验证,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,db.Query的rows，千万要及时close\r\n还有一个，就是\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n，从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，请使用信道的方式。\r\n\r\n在不限制协程总量的情况下，单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，此时协程数量在35个左右，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030ms,协程15个的时候，但协程处理请求速度达到420/s，增加了一点，但是不多，可见不同的机器，不同的处理能力，线程数量和请求速度并非是负相关的。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n发现database/sql里，没有设置Query超时的地方，也就是如果一个query发出去，很久很久没有响应，程序会一直处于等待阶段，这个会很影响效率\r\n\r\n信道这东西，不仅读取的时候会阻塞，插入的时候，也会阻塞，向一个信道中输入值，如果那边迟迟不读，这边也会一直阻塞。这个会影响调用的先后顺序。\r\ntime.NewTimer 可以返回一个定时器对象timer，在设定时间之后， timer中的信道属性C会被赋予一个值，但是如果提前调用了timer.Stop(),time.C会一直处于阻塞状态，例如\r\n[php]\r\n ticker := time.NewTimer(time.Second * 400)                                                                                                                                \r\n     go func() {\r\n         //防止超时\r\n      &lt;-ticker.C\r\n      timeOut = 1\r\n      defer ticker.Stop()\r\n     }()   \r\n     defer func() {\r\n        // 如果已经被关闭，会返回false，如果没有，提前触发\r\n       Println(&quot;closing ticker.C : &quot;, ticker.Reset(time.Second*0))\r\n  }()   \r\n[/php]\r\n注意，如果在第二个defer 里面调用 ticker.Stop()的话，则 上面的协程会一直阻塞在 <-ticker.C，因为ticker已经Stop了，永远都不会有数据写入ticker.C，但是信道本身并没有被关闭，而且，因为是 receive-only channel ，所以并没有办法手动close，唯一的办法只能是任由时间到，然后自己触发ticker.C然后 defer ticker.Stop(),如果无法忍受资源浪费，可以像我那样，提前触发，通过Reset的方式，当然，如果已经Close了，Reset会返回false，无伤大雅。\r\n&nbsp;','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-30 12:37:58','2015-07-30 12:37:58','',409,'http://unasm.com/2015/07/433/',0,'revision','',0),(434,1,'2015-07-30 12:40:30','2015-07-30 12:40:30','[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，需要谨慎的控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式，验证,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,db.Query的rows，千万要及时close\r\n还有一个，就是\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n，从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，请使用信道的方式。\r\n\r\n在不限制协程总量的情况下，单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，此时协程数量在35个左右，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030ms,协程15个的时候，但协程处理请求速度达到420/s，增加了一点，但是不多，可见不同的机器，不同的处理能力，线程数量和请求速度并非是负相关的。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n发现database/sql里，没有设置Query超时的地方，也就是如果一个query发出去，很久很久没有响应，程序会一直处于等待阶段，这个会很影响效率\r\n\r\n信道这东西，不仅读取的时候会阻塞，插入的时候，也会阻塞，向一个信道中输入值，如果那边迟迟不读，这边也会一直阻塞。这个会影响调用的先后顺序。\r\ntime.NewTimer 可以返回一个定时器对象timer，在设定时间之后， timer中的信道属性C会被赋予一个值，但是如果提前调用了timer.Stop(),time.C会一直处于阻塞状态，例如\r\n[php]\r\n ticker := time.NewTimer(time.Second * 400)                                                                                                                                \r\n     go func() {\r\n         //防止超时\r\n      &lt;-ticker.C\r\n      timeOut = 1\r\n      defer ticker.Stop()\r\n     }()   \r\n     defer func() {\r\n        // 如果已经被关闭，会返回false，如果没有，提前触发\r\n       Println(&quot;closing ticker.C : &quot;, ticker.Reset(time.Second*0))\r\n  }()   \r\n[/php]\r\n注意，如果在第二个defer 里面调用 ticker.Stop()的话，则 上面的协程会一直阻塞在 <-ticker.C，因为ticker已经Stop了，永远都不会有数据写入ticker.C，但是信道本身并没有被关闭，而且，因为是 receive-only channel ，所以并没有办法手动close，唯一的办法只能是任由时间到，然后自己触发ticker.C然后 defer ticker.Stop(),如果无法忍受资源浪费，可以像我那样，提前触发，通过Reset的方式，当然，如果已经Close了，Reset会返回false，无伤大雅。\r\n&nbsp;','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-30 12:40:30','2015-07-30 12:40:30','',409,'http://unasm.com/2015/07/434/',0,'revision','',0),(435,1,'2015-07-30 12:41:06','2015-07-30 12:41:06','[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，需要谨慎的控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式验证,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,db.Query的rows，千万要及时close\r\n还有一个，就是\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n，从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，请使用信道的方式。\r\n\r\n在不限制协程总量的情况下，单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，此时协程数量在35个左右，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030ms,协程15个的时候，但协程处理请求速度达到420/s，增加了一点，但是不多，可见不同的机器，不同的处理能力，线程数量和请求速度并非是负相关的。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n发现database/sql里，没有设置Query超时的地方，也就是如果一个query发出去，很久很久没有响应，程序会一直处于等待阶段，这个会很影响效率\r\n\r\n信道这东西，不仅读取的时候会阻塞，插入的时候，也会阻塞，向一个信道中输入值，如果那边迟迟不读，这边也会一直阻塞。这个会影响调用的先后顺序。\r\ntime.NewTimer 可以返回一个定时器对象timer，在设定时间之后， timer中的信道属性C会被赋予一个值，但是如果提前调用了timer.Stop(),time.C会一直处于阻塞状态，例如\r\n[php]\r\n ticker := time.NewTimer(time.Second * 400)                                                                                                                                \r\n     go func() {\r\n         //防止超时\r\n      &lt;-ticker.C\r\n      timeOut = 1\r\n      defer ticker.Stop()\r\n     }()   \r\n     defer func() {\r\n        // 如果已经被关闭，会返回false，如果没有，提前触发\r\n       Println(&quot;closing ticker.C : &quot;, ticker.Reset(time.Second*0))\r\n  }()   \r\n[/php]\r\n注意，如果在第二个defer 里面调用 ticker.Stop()的话，则 上面的协程会一直阻塞在 <-ticker.C，因为ticker已经Stop了，永远都不会有数据写入ticker.C，但是信道本身并没有被关闭，而且，因为是 receive-only channel ，所以并没有办法手动close，唯一的办法只能是任由时间到，然后自己触发ticker.C然后 defer ticker.Stop(),如果无法忍受资源浪费，可以像我那样，提前触发，通过Reset的方式，当然，如果已经Close了，Reset会返回false，无伤大雅。\r\n&nbsp;','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-30 12:41:06','2015-07-30 12:41:06','',409,'http://unasm.com/2015/07/435/',0,'revision','',0),(436,1,'2015-07-30 12:41:25','2015-07-30 12:41:25','[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，需要谨慎的控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式验证有无缺失,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,db.Query的rows，千万要及时close\r\n还有一个，就是\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n，从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，请使用信道的方式。\r\n\r\n在不限制协程总量的情况下，单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，此时协程数量在35个左右，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030ms,协程15个的时候，但协程处理请求速度达到420/s，增加了一点，但是不多，可见不同的机器，不同的处理能力，线程数量和请求速度并非是负相关的。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n发现database/sql里，没有设置Query超时的地方，也就是如果一个query发出去，很久很久没有响应，程序会一直处于等待阶段，这个会很影响效率\r\n\r\n信道这东西，不仅读取的时候会阻塞，插入的时候，也会阻塞，向一个信道中输入值，如果那边迟迟不读，这边也会一直阻塞。这个会影响调用的先后顺序。\r\ntime.NewTimer 可以返回一个定时器对象timer，在设定时间之后， timer中的信道属性C会被赋予一个值，但是如果提前调用了timer.Stop(),time.C会一直处于阻塞状态，例如\r\n[php]\r\n ticker := time.NewTimer(time.Second * 400)                                                                                                                                \r\n     go func() {\r\n         //防止超时\r\n      &lt;-ticker.C\r\n      timeOut = 1\r\n      defer ticker.Stop()\r\n     }()   \r\n     defer func() {\r\n        // 如果已经被关闭，会返回false，如果没有，提前触发\r\n       Println(&quot;closing ticker.C : &quot;, ticker.Reset(time.Second*0))\r\n  }()   \r\n[/php]\r\n注意，如果在第二个defer 里面调用 ticker.Stop()的话，则 上面的协程会一直阻塞在 <-ticker.C，因为ticker已经Stop了，永远都不会有数据写入ticker.C，但是信道本身并没有被关闭，而且，因为是 receive-only channel ，所以并没有办法手动close，唯一的办法只能是任由时间到，然后自己触发ticker.C然后 defer ticker.Stop(),如果无法忍受资源浪费，可以像我那样，提前触发，通过Reset的方式，当然，如果已经Close了，Reset会返回false，无伤大雅。\r\n&nbsp;','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-30 12:41:25','2015-07-30 12:41:25','',409,'http://unasm.com/2015/07/436/',0,'revision','',0),(438,1,'2015-07-30 12:48:06','2015-07-30 12:48:06','\r\n[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，需要谨慎的控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式验证有无缺失,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,因为系统的可以打开的文件描述符是有上限的，一般来说是1024个，并发的时候，忘记关闭了，后面的就没有位置了。db.Query的rows千万要及时关闭。\r\n\r\n还有一个，就是下面的报错\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，在尽可能的情况下，将闭包独立差费成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，可以使用信道的方式。\r\n\r\n在不限制协程总量的情况下，单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，此时协程数量在35个左右，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030ms,协程15个的时候，但协程处理请求速度达到420/s，增加了一点，但是不多，可见不同的机器，不同的处理能力，线程数量和请求速度并非是负相关的。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n发现database/sql里，没有设置Query超时的地方，也就是如果一个query发出去，很久很久没有响应，程序会一直处于等待阶段，这个会很影响效率\r\n\r\n信道这东西，不仅读取的时候会阻塞，插入的时候，也会阻塞，向一个信道中输入值，如果那边迟迟不读，这边也会一直阻塞。这个会影响调用的先后顺序。\r\ntime.NewTimer 可以返回一个定时器对象timer，在设定时间之后， timer中的信道属性C会被赋予一个值，但是如果提前调用了timer.Stop(),time.C会一直处于阻塞状态，例如\r\n\r\n[php]\r\n ticker := time.NewTimer(time.Second * 400)\r\n     go func() {\r\n         //防止超时\r\n      &lt;-ticker.C\r\n      timeOut = 1\r\n      defer ticker.Stop()\r\n     }()\r\n     defer func() {\r\n        // 如果已经被关闭，会返回false，如果没有，提前触发\r\n       Println(&quot;closing ticker.C : &quot;, ticker.Reset(time.Second*0))\r\n  }()\r\n[/php]\r\n\r\n注意，如果在第二个defer 里面调用 ticker.Stop()的话，则 上面的协程会一直阻塞在 &lt;-ticker.C，因为ticker已经Stop了，永远都不会有数据写入ticker.C，但是信道本身并没有被关闭，而且，因为是 receive-only channel ，所以并没有办法手动close，唯一的办法只能是任由时间到，然后自己触发ticker.C然后 defer ticker.Stop(),如果无法忍受资源浪费，可以像我那样，提前触发，通过Reset的方式，当然，如果已经Close了，Reset会返回false，无伤大雅。','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-30 12:48:06','2015-07-30 12:48:06','',409,'http://unasm.com/2015/07/438/',0,'revision','',0),(437,1,'2015-07-30 12:44:56','2015-07-30 12:44:56','\r\n[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，需要谨慎的控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式验证有无缺失,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,因为系统的可以打开的文件描述符是有上限的，一般来说是1024个，并发的时候，忘记关闭了，后面的就没有位置了。db.Query的rows千万要及时关闭。\r\n\r\n还有一个，就是下面的报错\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n\r\n从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。</pre>\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，将闭包独立成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，请使用信道的方式。\r\n\r\n在不限制协程总量的情况下，单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，此时协程数量在35个左右，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030ms,协程15个的时候，但协程处理请求速度达到420/s，增加了一点，但是不多，可见不同的机器，不同的处理能力，线程数量和请求速度并非是负相关的。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n发现database/sql里，没有设置Query超时的地方，也就是如果一个query发出去，很久很久没有响应，程序会一直处于等待阶段，这个会很影响效率\r\n\r\n信道这东西，不仅读取的时候会阻塞，插入的时候，也会阻塞，向一个信道中输入值，如果那边迟迟不读，这边也会一直阻塞。这个会影响调用的先后顺序。\r\ntime.NewTimer 可以返回一个定时器对象timer，在设定时间之后， timer中的信道属性C会被赋予一个值，但是如果提前调用了timer.Stop(),time.C会一直处于阻塞状态，例如\r\n\r\n[php]\r\n ticker := time.NewTimer(time.Second * 400)                                                                                                                                \r\n     go func() {\r\n         //防止超时\r\n      &lt;-ticker.C\r\n      timeOut = 1\r\n      defer ticker.Stop()\r\n     }()   \r\n     defer func() {\r\n        // 如果已经被关闭，会返回false，如果没有，提前触发\r\n       Println(&quot;closing ticker.C : &quot;, ticker.Reset(time.Second*0))\r\n  }()   \r\n[/php]\r\n\r\n注意，如果在第二个defer 里面调用 ticker.Stop()的话，则 上面的协程会一直阻塞在 &lt;-ticker.C，因为ticker已经Stop了，永远都不会有数据写入ticker.C，但是信道本身并没有被关闭，而且，因为是 receive-only channel ，所以并没有办法手动close，唯一的办法只能是任由时间到，然后自己触发ticker.C然后 defer ticker.Stop(),如果无法忍受资源浪费，可以像我那样，提前触发，通过Reset的方式，当然，如果已经Close了，Reset会返回false，无伤大雅。','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-30 12:44:56','2015-07-30 12:44:56','',409,'http://unasm.com/2015/07/437/',0,'revision','',0),(439,1,'2015-07-30 13:42:28','2015-07-30 13:42:28','\r\n[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，需要谨慎的控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式验证有无缺失,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,因为系统的可以打开的文件描述符是有上限的，一般来说是1024个，并发的时候，忘记关闭了，后面的就没有位置了。db.Query的rows千万要及时关闭。\r\n\r\n还有一个，就是下面的报错\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，在尽可能的情况下，将闭包独立差费成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，可以使用信道的方式。\r\n\r\n在不限制协程总量的情况下，单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，此时协程数量在35个左右，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030ms,协程15个的时候，但协程处理请求速度达到420/s，增加了一点，但是不多，可见不同的机器，不同的处理能力，线程数量和请求速度并非是负相关的。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n\r\n发现database/sql里，没有设置Query超时的地方，也就是如果一个query发出去，很久很久没有响应，程序会一直处于等待阶段，这个会很影响效率\r\n\r\n信道这东西，不仅读取的时候会阻塞，插入的时候，也会阻塞，向一个信道中输入值，如果那边迟迟不读，这边也会一直阻塞。这个会影响调用的先后顺序。\r\ntime.NewTimer 可以返回一个定时器对象timer，在设定时间之后， timer中的信道属性C会被赋予一个值，但是如果提前调用了timer.Stop(),time.C会一直处于阻塞状态，例如\r\n\r\n[php]\r\n ticker := time.NewTimer(time.Second * 400)\r\n     go func() {\r\n         //防止超时\r\n      &lt;-ticker.C\r\n      timeOut = 1\r\n      defer ticker.Stop()\r\n     }()\r\n     defer func() {\r\n        // 如果已经被关闭，会返回false，如果没有，提前触发\r\n       Println(&quot;closing ticker.C : &quot;, ticker.Reset(time.Second*0))\r\n  }()\r\n[/php]\r\n\r\n注意，如果在第二个defer 里面调用 ticker.Stop()的话，则 上面的协程会一直阻塞在 &lt;-ticker.C，因为ticker已经Stop了，永远都不会有数据写入ticker.C，但是信道本身并没有被关闭，还在阻塞等待，而且，因为是 receive-only channel ，所以并没有办法手动close，结果就是该协程就一直卡死在那里，像一个僵尸进程。唯一的办法只能是任由时间到，然后自己触发ticker.C然后 defer ticker.Stop(),如果无法忍受资源浪费，可以像我那样，提前触发，通过Reset的方式，当然，如果已经Close了，Reset会返回false，无伤大雅。','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-30 13:42:28','2015-07-30 13:42:28','',409,'http://unasm.com/2015/07/439/',0,'revision','',0),(440,1,'2015-07-31 06:59:24','2015-07-31 06:59:24','\r\n[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，需要谨慎的控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式验证有无缺失,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,因为系统的可以打开的文件描述符是有上限的，一般来说是1024个，并发的时候，忘记关闭了，后面的就没有位置了。db.Query的rows千万要及时关闭。\r\n\r\n还有一个，就是下面的报错\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，在尽可能的情况下，将闭包独立差费成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，可以使用信道的方式。\r\n\r\n在不限制协程总量的情况下，单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，此时协程数量在35个左右，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030s,协程15个的时候，但协程处理请求速度达到420/s，增加了一点，但是不多，可见不同的机器，不同的处理能力，线程数量和请求速度并非是负相关的。467s处理请求189135个，\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n\r\n发现database/sql里，没有设置Query超时的地方，也就是如果一个query发出去，很久很久没有响应，程序会一直处于等待阶段，这个会很影响效率\r\n\r\n信道这东西，不仅读取的时候会阻塞，插入的时候，也会阻塞，向一个信道中输入值，如果那边迟迟不读，这边也会一直阻塞。这个会影响调用的先后顺序。\r\n\r\ntime.NewTimer 可以返回一个定时器对象timer，在设定时间之后， timer中的信道属性C会被赋予一个值，但是如果提前调用了timer.Stop(),time.C会一直处于阻塞状态，例如\r\n\r\n[php]\r\n ticker := time.NewTimer(time.Second * 400)\r\n     go func() {\r\n         //防止超时\r\n      &lt;-ticker.C\r\n      timeOut = 1\r\n      defer ticker.Stop()\r\n     }()\r\n     defer func() {\r\n        // 如果已经被关闭，会返回false，如果没有，提前触发\r\n       Println(&quot;closing ticker.C : &quot;, ticker.Reset(time.Second*0))\r\n  }()\r\n[/php]\r\n\r\n注意，如果在第二个defer 里面调用 ticker.Stop()的话，则 上面的协程会一直阻塞在 &lt;-ticker.C，因为ticker已经Stop了，永远都不会有数据写入ticker.C，但是信道本身并没有被关闭，还在阻塞等待，而且，因为是 receive-only channel ，所以并没有办法手动close，结果就是该协程就一直卡死在那里，像一个僵尸进程。唯一的办法只能是任由时间到，然后自己触发ticker.C然后 defer ticker.Stop(),如果无法忍受资源浪费，可以像我那样，提前触发，通过Reset的方式，当然，如果已经Close了，Reset会返回false，无伤大雅。','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-31 06:59:24','2015-07-31 06:59:24','',409,'http://unasm.com/2015/07/440/',0,'revision','',0),(442,1,'2015-07-31 08:57:02','2015-07-31 08:57:02','英文源自：<a title=\"http://man7.org/linux/man-pages/man2/epoll_wait.2.html\" href=\"http://man7.org/linux/man-pages/man2/epoll_wait.2.html\" target=\"_blank\">http://man7.org/linux/man-pages/man2/epoll_wait.2.html</a>\r\n<h3>梗概</h3>\r\n\r\n[cpp]\r\n #include &lt;sys/epoll.h&gt;\r\n int epoll_wait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout);\r\n int epoll_pwait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout,\r\n                      const sigset_t *sigmask);\r\n[/cpp]\r\n\r\n<h3>描述</h3>\r\nepoll_wait 该系统等待 epoll的实例化文件描述符epfd 响应，events指针指向响应的事件列表，这些事件是之前在epfd通过epoll_ctl注册的文件描述符的响应，maxevents 该参数必须大于0，表示响应的最大的时间数量。\r\ntimeout参数指定epoll_wait阻塞的时间。该函数会在下列情况下停止：\r\n<ol>\r\n	<li>每一个epfd上注册的文件描述符都有了响应。</li>\r\n	<li>该调用被信号句柄终止</li>\r\n	<li>或者超时，超过了timeout</li>\r\n</ol>\r\ntimeout 精确到系统的时钟的粒度，内核的调度的延迟意味着阻塞的时间会有一丁点的超时。如果timeout设置成-1，意味着无限期的阻塞，设置成0意味着函数立即返回，不管是不是有事件响应。\r\n\r\nepoll_event 定义如下\r\n\r\n[cpp]\r\n typedef union epoll_data {\r\n         void    *ptr;\r\n         int      fd;\r\n         uint32_t u32;\r\n         uint64_t u64;\r\n } epoll_data_t;\r\n\r\n struct epoll_event {\r\n        uint32_t     events;    /* Epoll events */\r\n        epoll_data_t data;      /* User data variable */\r\n };\r\n[/cpp]\r\n\r\ndata 返回的结构体会包含与epoll_ctl 相同的数据，而events 会包含一个时间位列。\r\n<h3>返回值</h3>\r\n成功的时候，epoll_wait 会返回就绪的 描述字数量，如果 timeout 毫秒内没有文件描述子变成可用返回0。出错的时候，epoll_wait 返回-1，errno会被设置成对应的值。\r\n<h3>错误</h3>\r\n<ol>\r\n	<li>EBADF  epfd 不是正确的文件描述符。</li>\r\n	<li>EFAULT  <i>events 不可写。</i></li>\r\n	<li>EINTR   函数被中断了。</li>\r\n	<li>EINVAL epfd 不是epoll 文件描述字，或者maxevents 小于等于0；</li>\r\n</ol>','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-31 08:57:02','2015-07-31 08:57:02','',335,'http://unasm.com/2015/07/442/',0,'revision','',0),(441,1,'2015-07-31 08:24:27','2015-07-31 08:24:27','英文源自：<a title=\"http://man7.org/linux/man-pages/man2/epoll_wait.2.html\" href=\"http://man7.org/linux/man-pages/man2/epoll_wait.2.html\" target=\"_blank\">http://man7.org/linux/man-pages/man2/epoll_wait.2.html</a>\r\n<h3>梗概</h3>\r\n\r\n[cpp]\r\n #include &lt;sys/epoll.h&gt;\r\n int epoll_wait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout);\r\n int epoll_pwait(int epfd, struct epoll_event *events,\r\n                      int maxevents, int timeout,\r\n                      const sigset_t *sigmask);\r\n[/cpp]\r\n\r\n<h3>描述</h3>\r\nepoll_wait 该系统等待 epoll的实例化文件描述符epfd 响应，events指针指向响应的事件列表，这些事件是之前在epfd通过epoll_ctl注册的文件描述符的响应，maxevents 该参数必须大于0，表示响应的最大的时间数量。\r\ntimeout参数指定epoll_wait阻塞的时间。该函数会在下列情况下停止：\r\n<ol>\r\n	<li>每一个epfd上注册的文件描述符都有了响应。</li>\r\n	<li>该调用被信号句柄终止</li>\r\n	<li>或者超时，超过了timeout</li>\r\n</ol>\r\ntimeout 会使用系统的时钟，内核的调度意味着阻塞的时间会有一丁点的超时。如果timeout设置成-1，意味着无限期的阻塞，设置成0意味着函数立即返回，不管是不是有事件响应。\r\n\r\nepoll_event 定义如下\r\n\r\n[cpp]\r\n typedef union epoll_data {\r\n         void    *ptr;\r\n         int      fd;\r\n         uint32_t u32;\r\n         uint64_t u64;\r\n } epoll_data_t;\r\n\r\n struct epoll_event {\r\n        uint32_t     events;    /* Epoll events */\r\n        epoll_data_t data;      /* User data variable */\r\n };\r\n[/cpp]\r\n\r\ndata 返回的结构体会包含与epoll_ctl 相同的数据，而events 会包含一个时间位列。\r\n<h3>epoll_pwait</h3>\r\n与epoll_wait的关系就像select和pselect 一样（不懂）。\r\n<h3>返回值</h3>\r\n成功的时候，epoll_wait 会返回就绪的 请求I/O 描述字数量，或者是0，表示timeout 毫秒内没有文件描述子变成可用。出错的时候，epoll_wait 返回-1，errno会被设置成对应的值。\r\n<h3>错误</h3>\r\n<ol>\r\n	<li>EBADF  epfd 不是正确的文件描述符。</li>\r\n	<li>EFAULT  <i>events 不可写。</i></li>\r\n	<li>EINTR   函数被中断了。</li>\r\n	<li>EINVAL epfd 不是epoll 文件描述字，或者maxevents 小于等于0；</li>\r\n</ol>','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-31 08:24:27','2015-07-31 08:24:27','',335,'http://unasm.com/2015/07/441/',0,'revision','',0),(443,1,'2015-07-31 10:05:33','2015-07-31 10:05:33','\r\n[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，需要谨慎的控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式验证有无缺失,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,因为系统的可以打开的文件描述符是有上限的，一般来说是1024个，并发的时候，忘记关闭了，后面的就没有位置了。db.Query的rows千万要及时关闭。\r\n\r\n还有一个，就是下面的报错\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，在尽可能的情况下，将闭包独立差费成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，可以使用信道的方式。\r\n\r\n在不限制协程总量的情况下，单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，此时协程数量在35个左右，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030s,协程15个的时候，但协程处理请求速度达到420/s，增加了一点，但是不多，可见不同的机器，不同的处理能力，线程数量和请求速度并非是负相关的。467s处理请求189135个，\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n\r\n发现database/sql里，没有设置Query超时的地方，也就是如果一个query发出去，很久很久没有响应，程序会一直处于等待阶段，这个会很影响效率\r\n\r\n信道这东西，不仅读取的时候会阻塞，插入的时候，也会阻塞，向一个信道中输入值，如果那边迟迟不读，这边也会一直阻塞。这个会影响调用的先后顺序。\r\n\r\ntime.NewTimer 可以返回一个定时器对象timer，在设定时间之后， timer中的信道属性C会被赋予一个值，但是如果提前调用了timer.Stop(),time.C会一直处于阻塞状态，例如\r\n\r\n[php]\r\n ticker := time.NewTimer(time.Second * 400)\r\n     go func() {\r\n         //防止超时\r\n      &lt;-ticker.C\r\n      timeOut = 1\r\n      defer ticker.Stop()\r\n     }()\r\n     defer func() {\r\n        // 如果已经被关闭，会返回false，如果没有，提前触发\r\n       Println(&quot;closing ticker.C : &quot;, ticker.Reset(time.Second*0))\r\n  }()\r\n[/php]\r\n\r\n注意，如果在第二个defer 里面调用 ticker.Stop()的话，则 上面的协程会一直阻塞在 &lt;-ticker.C，因为ticker已经Stop了，永远都不会有数据写入ticker.C，但是信道本身并没有被关闭，还在阻塞等待，而且，因为是 receive-only channel ，所以并没有办法手动close，结果就是该协程就一直卡死在那里，像一个僵尸进程。唯一的办法只能是任由时间到，然后自己触发ticker.C然后 defer ticker.Stop(),如果无法忍受资源浪费，可以像我那样，提前触发，通过Reset的方式，当然，如果已经Close了，Reset会返回false，无伤大雅。\r\n\r\n谨慎的对待阻塞，认真思考触发的条件，真的，不然程序就会卡死在某个你不小心触发的条件下','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-31 10:05:33','2015-07-31 10:05:33','',409,'http://unasm.com/2015/07/443/',0,'revision','',0),(444,1,'2015-07-31 10:05:46','2015-07-31 10:05:46','<p>英文源自：<a title=\"http://man7.org/linux/man-pages/man2/epoll_wait.2.html\" href=\"http://man7.org/linux/man-pages/man2/epoll_wait.2.html\" target=\"_blank\">http://man7.org/linux/man-pages/man2/epoll_wait.2.html</a></p>\r\n<h3>梗概</h3>\r\n<p>[cpp]&lt;br /&gt;\r\n #include &amp;lt;sys/epoll.h&amp;gt;&lt;br /&gt;\r\n int epoll_wait(int epfd, struct epoll_event *events,&lt;br /&gt;\r\n                      int maxevents, int timeout);&lt;br /&gt;\r\n int epoll_pwait(int epfd, struct epoll_event *events,&lt;br /&gt;\r\n                      int maxevents, int timeout,&lt;br /&gt;\r\n                      const sigset_t *sigmask);&lt;br /&gt;\r\n[/cpp]</p>\r\n<h3>描述</h3>\r\n<p>epoll_wait 该系统等待 epoll的实例化文件描述符epfd 响应，events指针指向响应的事件列表，这些事件是之前在epfd通过epoll_ctl注册的文件描述符的响应，maxevents 该参数必须大于0，表示响应的最大的时间数量。<br />\r\ntimeout参数指定epoll_wait阻塞的时间。该函数会在下列情况下停止：</p>\r\n<ol>\r\n<li>每一个epfd上注册的文件描述符都有了响应。</li>\r\n<li>该调用被信号句柄终止</li>\r\n<li>或者超时，超过了timeout</li>\r\n</ol>\r\n<p>timeout 精确到系统的时钟的粒度，内核的调度的延迟意味着阻塞的时间会有一丁点的超时。如果timeout设置成-1，意味着无限期的阻塞，设置成0意味着函数立即返回，不管是不是有事件响应。</p>\r\n<p>epoll_event 定义如下</p>\r\n<p>[cpp]&lt;br /&gt;\r\n typedef union epoll_data {&lt;br /&gt;\r\n         void    *ptr;&lt;br /&gt;\r\n         int      fd;&lt;br /&gt;\r\n         uint32_t u32;&lt;br /&gt;\r\n         uint64_t u64;&lt;br /&gt;\r\n } epoll_data_t;&lt;/p&gt;\r\n&lt;p&gt; struct epoll_event {&lt;br /&gt;\r\n        uint32_t     events;    /* Epoll events */&lt;br /&gt;\r\n        epoll_data_t data;      /* User data variable */&lt;br /&gt;\r\n };&lt;br /&gt;\r\n[/cpp]</p>\r\n<p>data 返回的结构体会包含与epoll_ctl 相同的数据，而events 会包含一个时间位列。</p>\r\n<h3>返回值</h3>\r\n<p>成功的时候，epoll_wait 会返回就绪的 描述字数量，如果 timeout 毫秒内没有文件描述子变成可用返回0。出错的时候，epoll_wait 返回-1，errno会被设置成对应的值。</p>\r\n<h3>错误</h3>\r\n<ol>\r\n<li>EBADF  epfd 不是正确的文件描述符。</li>\r\n<li>EFAULT  <i>events 不可写。</i></li>\r\n<li>EINTR   函数被中断了。</li>\r\n<li>EINVAL epfd 不是epoll 文件描述字，或者maxevents 小于等于0；</li>\r\n</ol>\r\n','epoll_wait 函数(译)','','inherit','open','open','','335-revision-v1','','','2015-07-31 10:05:46','2015-07-31 10:05:46','',335,'http://unasm.com/2015/07/444/',0,'revision','',0),(445,1,'2015-07-31 10:08:55','2015-07-31 10:08:55','\r\n[php]\r\nback_data starting ........\r\ncatch_data starting ........\r\ncatch_service_data starting ........\r\nchannel starting ........\r\ncontrol_config starting ........\r\nchannel  is right\r\ncatch_service_data  is right\r\ncontrol_config  is right\r\nedit_data starting ........\r\nkeyword_pic starting ........\r\nback_data  is right\r\ncatch_data  is right\r\nkeyword_pic  is right\r\nlog starting ........\r\nmissed_news_data starting ........\r\nopen_course_attent starting ........\r\npublish_log_v2 starting ........\r\npush_billiards starting ........\r\npush_chinese_basketball starting ........\r\npush_chinese_football starting ........\r\npush_international_football starting ........\r\npush_list starting ........\r\npush_nba starting ........\r\npush_news starting ........\r\npush_other starting ........\r\npush_table_tennis starting ........\r\npush_tennis starting ........\r\npush_volleyball starting ........\r\nroll_news starting ........\r\nservice_catch_data_v2 starting ........\r\nservice_config_v2 starting ........\r\nsports_ad starting ........\r\nsports_client_living starting ........\r\nservice_config_v2  is right\r\nservice_catch_data_v2  is right\r\nsports_ad  is right\r\npush_list  is right\r\nsports_client_living  is right\r\n[/php]\r\n\r\n上面的列表，也是挺壮观的，反应了goroutine之间的异步与结果的反馈。\r\n实际证明，就算是goroutine的数量不受限制，也不意味着系统资源不受限制，系统描述符，mysql,redis的连接数量，却不是不受限制的，需要谨慎的控制最大的连接打开数量，及时关闭释放系统资源。\r\n\r\n需求是这样的，要迁库，dba迁了之后，要求我们开发验证一下数据是不是全对，我就用go跑脚本，从数据库里面读取数据，通过md5获取指纹的方式验证有无缺失,之所以使用go，就是考虑到多进程，php单进程很慢，还有想尝试一下新的语言特性。\r\n\r\n实际跑的时候，遇到的问题是第一个文件描述符未关闭，导致后来的后来无法继续添加查询,因为系统的可以打开的文件描述符是有上限的，一般来说是1024个，并发的时候，忘记关闭了，后面的就没有位置了。db.Query的rows千万要及时关闭。\r\n\r\n还有一个，就是下面的报错\r\n\r\n[php]err:dial tcp 10.55.28.33:3727: cannot assign requested address [/php]\r\n\r\n从网上搜了下，说是数据库压力过大的时候报错，看了下DBA的监控平台，的确，当时的查询压力很大，就限制了下goroutine的数量上限，一旦达到这个阀值，就让后来的请求先sleep，等待前面的完之后，再开始查询，这个时候看了下监控平台，压力小了很多，考虑到go开启的时候，本身就有了7个goroutine处理自身，我将goroutine的上限设置在了21个。看了下因数据库压力过大的时候的报错，大约是达到35个goroutine的时候。\r\n\r\n使用go开启goroutine的时候，尽可能的不要使用闭包的方式，因为闭包内部是可以访问父域内的变量的，也是可以修改父域的变量的，很容易造成不必要的干扰，在尽可能的情况下，将闭包独立差费成函数，很大程度增加了可读性，减少了耦合，降低了复杂度，如果和父域之间需要通信，可以使用信道的方式。\r\n\r\n在不限制协程总量的情况下，单个goroutine处理mysql 请求的速度大约是160/s,通过top命令查看，发现 %CPU 一直在130上下波动，%MEM 一直是 11.2 ，此时协程数量在35个左右，可见多协程对 %CPU的使用率是挺高的,如果限制全部goroutine的数量，比如最大达到25个协程，发现单协程请求处理速度达到400/s,全部2747019个查询,花了1030s,协程15个的时候，但协程处理请求速度达到420/s，增加了一点，但是不多，可见不同的机器，不同的处理能力，线程数量和请求速度并非是负相关的。577s 内处理db请求 1800466，平均3120/s,并发的效率还是很高的。\r\n\r\n如果在main函数里面开启go，一定要注意main函数退出之后，其他的goroutine也会自动退出，所以必须有一种机制，让主进程等所有的goroutine完成之后，再退出。\r\n\r\n在协程数量达到15个的时候，服务器CPU负载其实不高，但是达到25的时候，负载还是比较高的，由此可见，goroutine虽然简单优雅，但是协程间的切换还是比较花时间的。\r\n\r\n发现database/sql里，没有设置Query超时的地方，也就是如果一个query发出去，很久很久没有响应，程序会一直处于等待阶段，这个会很影响效率\r\n\r\n信道这东西，不仅读取的时候会阻塞，插入的时候，也会阻塞，向一个信道中输入值，如果那边迟迟不读，这边也会一直阻塞。这个会影响调用的先后顺序。\r\n\r\ntime.NewTimer 可以返回一个定时器对象timer，在设定时间之后， timer中的信道属性C会被赋予一个值，但是如果提前调用了timer.Stop(),time.C会一直处于阻塞状态，例如\r\n\r\n[php]\r\n ticker := time.NewTimer(time.Second * 400)\r\n     go func() {\r\n         //防止超时\r\n      &lt;-ticker.C\r\n      timeOut = 1\r\n      defer ticker.Stop()\r\n     }()\r\n     defer func() {\r\n        // 如果已经被关闭，会返回false，如果没有，提前触发\r\n       Println(&quot;closing ticker.C : &quot;, ticker.Reset(time.Second*0))\r\n  }()\r\n[/php]\r\n\r\n注意，如果在第二个defer 里面调用 ticker.Stop()的话，则 上面的协程会一直阻塞在 &lt;-ticker.C，因为ticker已经Stop了，永远都不会有数据写入ticker.C，但是信道本身并没有被关闭，还在阻塞等待，而且，因为是 receive-only channel ，所以并没有办法手动close，结果就是该协程就一直卡死在那里，像一个僵尸进程。唯一的办法只能是任由时间到，然后自己触发ticker.C然后 defer ticker.Stop(),如果无法忍受资源浪费，可以像我那样，提前触发，通过Reset的方式，当然，如果已经Close了，Reset会返回false，无伤大雅。\r\n\r\n谨慎的对待阻塞，认真思考触发的条件，真的，不然程序就会卡死在某个你不小心触发的条件下','golang 并发查库','','inherit','open','open','','409-revision-v1','','','2015-07-31 10:08:55','2015-07-31 10:08:55','',409,'http://unasm.com/2015/07/445/',0,'revision','',0),(446,1,'2015-08-01 08:49:02','2015-08-01 08:49:02','源自：http://man7.org/linux/man-pages/man2/socket.2.html\r\n<h4>函数名</h4>\r\nsocket - 为通信创建一个节点。\r\n<h4>定义</h4>\r\n\r\n[cpp]\r\n #include &lt;sys/types.h&gt;          /* See NOTES */\r\n #include &lt;sys/socket.h&gt;\r\n int socket(int domain, int type, int protocol);\r\n[/cpp]\r\n\r\n<h4>描述</h4>\r\nsocket函数创建一个通信节点，并返回一个描述符。\r\n\r\n参数domain 指的是通信地址，这个决定了 protocol 用于通信的协议。具体的通信协议在&lt;sys/socket.h&gt;中定义，\r\n\r\n目前定义的协议有：\r\n\r\n[cpp]\r\n       AF_UNIX, AF_LOCAL   本地协议              unix(7)\r\n       AF_INET             IPv4 网络协议         ip(7)\r\n       AF_INET6            IPv6 网络协议         ipv6(7)\r\n       AF_IPX              IPX - Novell 协议\r\n       AF_NETLINK          内核用户接口设备协议    netlink(7)\r\n       AF_X25              ITU-T X.25 / ISO-8208 protocol   x25(7)\r\n       AF_AX25             Amateur radio AX.25 protocol\r\n       AF_ATMPVC           Access to raw ATM PVCs\r\n       AF_APPLETALK        AppleTalk                        ddp(7)\r\n       AF_PACKET           Low level packet interface       packet(7)\r\n       AF_ALG              Interface to kernel crypto API\r\n[/cpp]\r\n\r\nsocket通信中有type参数，标明通信的方式，目前定义的通信方式有：\r\n<ol>\r\n	<li>SOCK_STREAM ：双向可靠，有连接的二进制流通信，大型数据传输，也可以支持。</li>\r\n	<li>SOCK_DGRAM ：支持 数据包通信（无连接，最大长度固定的通信机制,UDP）。</li>\r\n	<li>SOCK_SEQPACKET：提供一种双向可靠，最大长度固定的有链接的通信，每次调用时候每个消费者都需要读取整个包。</li>\r\n	<li>SOCK_RAW：提供一种原生的网络通信方式（用于自定义通信，黑客，高级网络通信）</li>\r\n	<li>SOCK_RDM: 可靠数据报，但是不保证传输顺序。</li>\r\n	<li>SOCK_PACKET：过时了，不要再新程序中使用。</li>\r\n</ol>\r\n不是全部的通信协议都支持所有的通信方式的。Linux 2.6.27之后，type参数有了第二个作用：指定socket类型的情况下，它可能包含一些位运算或者下面的值，去修正socket的行为\r\n<ol>\r\n	<li><b>SOCK_NONBLOCK</b> 在新打开的设置O_NONBLOCK 文件状态符,有了这个标志位，就不用再每次调用fcntl()了。</li>\r\n	<li>\r\n          <b> SOCK_CLOEXEC 在新打开的文件描述符上面设置 FD_CLOEXEC  标志位，看O_CLOEXEC 在open函数中的作用，就知道这个标志位的意义了</b>\r\n        </li>\r\n</ol>','SOCKET 函数使用(译)','','inherit','open','open','','418-revision-v1','','','2015-08-01 08:49:02','2015-08-01 08:49:02','',418,'http://unasm.com/2015/08/446/',0,'revision','',0),(447,1,'2015-08-01 17:49:51','2015-08-01 17:49:51','源自：http://man7.org/linux/man-pages/man2/socket.2.html\r\n<h4>函数名</h4>\r\nsocket - 为通信创建一个节点。\r\n<h4>定义</h4>\r\n\r\n[cpp]\r\n #include &lt;sys/types.h&gt;          /* See NOTES */\r\n #include &lt;sys/socket.h&gt;\r\n int socket(int domain, int type, int protocol);\r\n[/cpp]\r\n\r\n<h4>描述</h4>\r\nsocket函数创建一个通信节点，并返回一个描述符。\r\n\r\n参数domain 指的是通信地址，这个决定了 protocol 用于通信的协议。具体的通信协议在&lt;sys/socket.h&gt;中定义，\r\n\r\n目前定义的协议有：\r\n\r\n[cpp]\r\n       AF_UNIX, AF_LOCAL   本地协议              unix(7)\r\n       AF_INET             IPv4 网络协议         ip(7)\r\n       AF_INET6            IPv6 网络协议         ipv6(7)\r\n       AF_IPX              IPX - Novell 协议\r\n       AF_NETLINK          内核用户接口设备协议    netlink(7)\r\n       AF_X25              ITU-T X.25 / ISO-8208 protocol   x25(7)\r\n       AF_AX25             Amateur radio AX.25 protocol\r\n       AF_ATMPVC           Access to raw ATM PVCs\r\n       AF_APPLETALK        AppleTalk                        ddp(7)\r\n       AF_PACKET           Low level packet interface       packet(7)\r\n       AF_ALG              Interface to kernel crypto API\r\n[/cpp]\r\n\r\nsocket通信中有type参数，标明通信的方式，目前定义的通信方式有：\r\n<ol>\r\n	<li>SOCK_STREAM ：双向可靠，有连接的二进制流通信，大型数据传输，也可以支持。</li>\r\n	<li>SOCK_DGRAM ：支持 数据包通信（无连接，最大长度固定的通信机制,UDP）。</li>\r\n	<li>SOCK_SEQPACKET：提供一种双向可靠，最大长度固定的有链接的通信，每次调用时候每个消费者都需要读取整个包。</li>\r\n	<li>SOCK_RAW：提供一种原生的网络通信方式（用于自定义通信，黑客，高级网络通信）</li>\r\n	<li>SOCK_RDM: 可靠数据报，但是不保证传输顺序。</li>\r\n	<li>SOCK_PACKET：过时了，不要再新程序中使用。</li>\r\n</ol>\r\n不是全部的通信协议都支持所有的通信方式的。Linux 2.6.27之后，type参数有了第二个作用：指定socket类型的情况下，它可能包含一些位运算或者下面的值，去修正socket的行为\r\n<ol>\r\n	<li><b>SOCK_NONBLOCK</b> 在新打开的设置O_NONBLOCK 文件状态符,有了这个标志位，就不用再每次调用fcntl()了。</li>\r\n	<li><b> SOCK_CLOEXEC 在新打开的文件描述符上面设置 FD_CLOEXEC 标志位，看O_CLOEXEC 在open函数中的作用，就知道这个标志位的意义了</b></li>\r\n</ol>\r\nprotocol 指定socket中用的协议。一般来说，一种socket类型，只有一种协议对应，这个时候，protocol 可以为0，但是也存在一种socket类型有多重通信协议，这个时候，就必须指定具体的通信协议。协议号指定为通信的时候被取代的“通信域”。\r\nSOCK_STREAM 类型是双工通信的二进制流。不限制通信量的大小。在收发数据的时候，socket流必须是在连接状态的，连接是通过 connect()函数创建','SOCKET 函数使用(译)','','inherit','open','open','','418-revision-v1','','','2015-08-01 17:49:51','2015-08-01 17:49:51','',418,'http://unasm.com/2015/08/447/',0,'revision','',0),(448,1,'2015-08-02 17:08:41','2015-08-02 17:08:41','源自：http://man7.org/linux/man-pages/man2/socket.2.html\r\n<h4>函数名</h4>\r\nsocket - 为通信创建一个节点。\r\n<h4>定义</h4>\r\n\r\n[cpp]\r\n #include &lt;sys/types.h&gt;          /* See NOTES */\r\n #include &lt;sys/socket.h&gt;\r\n int socket(int domain, int type, int protocol);\r\n[/cpp]\r\n\r\n<h4>描述</h4>\r\nsocket函数创建一个通信节点，并返回一个描述符。\r\n\r\n参数domain 指的是通信地址，这个决定了 protocol 用于通信的协议。具体的通信协议在&lt;sys/socket.h&gt;中定义，\r\n\r\n目前定义的协议有：\r\n\r\n[cpp]\r\n       AF_UNIX, AF_LOCAL   本地协议              unix(7)\r\n       AF_INET             IPv4 网络协议         ip(7)\r\n       AF_INET6            IPv6 网络协议         ipv6(7)\r\n       AF_IPX              IPX - Novell 协议\r\n       AF_NETLINK          内核用户接口设备协议    netlink(7)\r\n       AF_X25              ITU-T X.25 / ISO-8208 protocol   x25(7)\r\n       AF_AX25             Amateur radio AX.25 protocol\r\n       AF_ATMPVC           Access to raw ATM PVCs\r\n       AF_APPLETALK        AppleTalk                        ddp(7)\r\n       AF_PACKET           Low level packet interface       packet(7)\r\n       AF_ALG              Interface to kernel crypto API\r\n[/cpp]\r\n\r\nsocket通信中有type参数，标明通信的方式，目前定义的通信方式有：\r\n<ol>\r\n	<li>SOCK_STREAM ：双向可靠，有连接的二进制流通信，大型数据传输，也可以支持。</li>\r\n	<li>SOCK_DGRAM ：支持 数据包通信（无连接，最大长度固定的通信机制,UDP）。</li>\r\n	<li>SOCK_SEQPACKET：提供一种双向可靠，最大长度固定的有链接的通信，每次调用时候每个消费者都需要读取整个包。</li>\r\n	<li>SOCK_RAW：提供一种原生的网络通信方式（用于自定义通信，黑客，高级网络通信）</li>\r\n	<li>SOCK_RDM: 可靠数据报，但是不保证传输顺序。</li>\r\n	<li>SOCK_PACKET：过时了，不要再新程序中使用。</li>\r\n</ol>\r\n不是全部的通信协议都支持所有的通信方式的。Linux 2.6.27之后，type参数有了第二个作用：指定socket类型的情况下，它可能包含一些位运算或者下面的值，去修正socket的行为\r\n<ol>\r\n	<li><b>SOCK_NONBLOCK</b> 在新打开的设置O_NONBLOCK 文件状态符,有了这个标志位，就不用再每次调用fcntl()了。对于socket 的recv()和send()采用非阻塞的方式，对于磁盘I/O ，非阻塞并不产生效果</li>\r\n	<li><b> SOCK_CLOEXEC 在新打开的文件描述符上面设置 FD_CLOEXEC 标志位，看O_CLOEXEC 在open函数中的作用，就知道这个标志位的意义了</b></li>\r\n</ol>\r\nprotocol 指定socket中用的协议。一般来说，一种socket类型，只有一种协议对应，这个时候，protocol 可以为0，但是也存在一种socket类型有多重通信协议，这个时候，就必须指定具体的通信协议。协议号指定为通信的时候被取代的“通信域”。\r\nSOCK_STREAM 类型是双工通信的二进制流。不限制通信量的大小。在收发数据的时候，socket流必须是在连接状态的，连接是通过 connect()函数创建','SOCKET 函数使用(译)','','inherit','open','open','','418-revision-v1','','','2015-08-02 17:08:41','2015-08-02 17:08:41','',418,'http://unasm.com/2015/08/448/',0,'revision','',0),(451,1,'2015-08-03 03:24:22','2015-08-03 03:24:22','源自：http://man7.org/linux/man-pages/man2/socket.2.html\n<h4>函数名</h4>\nsocket - 为通信创建一个节点。\n<h4>定义</h4>\n\n[cpp]\n #include &amp;lt;sys/types.h&amp;gt;          /* See NOTES */\n #include &amp;lt;sys/socket.h&amp;gt;\n int socket(int domain, int type, int protocol);\n[/cpp]\n\n<h4>描述</h4>\nsocket函数创建一个通信节点，并返回一个描述符。\n\n参数domain 指的是通信地址，这个决定了 protocol 用于通信的协议。具体的通信协议在&lt;sys/socket.h&gt;中定义，\n\n目前定义的协议有：\n\n[cpp]\n       AF_UNIX, AF_LOCAL   本地协议              unix(7)\n       AF_INET             IPv4 网络协议         ip(7)\n       AF_INET6            IPv6 网络协议         ipv6(7)\n       AF_IPX              IPX - Novell 协议\n       AF_NETLINK          内核用户接口设备协议    netlink(7)\n       AF_X25              ITU-T X.25 / ISO-8208 protocol   x25(7)\n       AF_AX25             Amateur radio AX.25 protocol\n       AF_ATMPVC           Access to raw ATM PVCs\n       AF_APPLETALK        AppleTalk                        ddp(7)\n       AF_PACKET           Low level packet interface       packet(7)\n       AF_ALG              Interface to kernel crypto API\n[/cpp]\n\nsocket通信中有type参数，标明通信的方式，目前定义的通信方式有：\n<ol>\n	<li>SOCK_STREAM ：双向可靠，有连接的二进制流通信，大型数据传输，也可以支持。</li>\n	<li>SOCK_DGRAM ：支持 数据包通信（无连接，最大长度固定的通信机制,UDP）。</li>\n	<li>SOCK_SEQPACKET：提供一种双向可靠，最大长度固定的有链接的通信，每次调用时候每个消费者都需要读取整个包。</li>\n	<li>SOCK_RAW：提供一种原生的网络通信方式（用于自定义通信，黑客，高级网络通信）</li>\n	<li>SOCK_RDM: 可靠数据报，但是不保证传输顺序。</li>\n	<li>SOCK_PACKET：过时了，不要再新程序中使用。</li>\n</ol>\n不是全部的通信协议都支持所有的通信方式的。Linux 2.6.27之后，type参数有了第二个作用：指定socket类型的情况下，它可能包含一些位运算或者下面的值，去修正socket的行为\n<ol>\n	<li><b>SOCK_NONBLOCK</b> 在新打开的设置O_NONBLOCK 文件状态符,有了这个标志位，就不用再每次调用fcntl()了。对于socket 的recv()和send()采用非阻塞的方式，对于磁盘I/O ，非阻塞并不产生效果</li>\n	<li><b> SOCK_CLOEXEC 在新打开的文件描述符上面设置 FD_CLOEXEC 标志位，看O_CLOEXEC 在open函数中的作用，就知道这个标志位的意义了</b></li>\n</ol>\nprotocol 指定socket中用的协议。一般来说，一种socket类型，只有一种协议对应，这个时候，protocol 可以为0，但是也存在一种socket类型有多重通信协议，这个时候，就必须指定具体的通信协议。协议号指定为通信的时候被取代的“通信域”。\nSOCK_STREAM 类型是双工通信的二进制流。不限制通信量的大小。在收发数据的时候，socket流必须是在连接状态的，连接是通过 connect()函数创建,连接之后，数据通过read和write或者其他的变体，比如send,recv 传输。通过close关闭会话。大数据包可以通过send发送，recv接受。\n\nSOCK_STREAM 通信协议保证数据不会丢失或者重复，如果有数据段在一个合理的时间内不能成功发送,该连接会被认为已死，如果设置了SO_KEEPALIVE，socket协议会检查是不是有其他的符合通信协议的链路存在，如果在已断开的流里收发数据，该进程会收到SIGPIPE 信号，会令未处理该信号的进程异常退出。\nSOCK_SEQPACKET 和SOCK_STREAM 类似，唯一的区别是调用read()的时候，返回的只是请求的数据量。多余的数据会被丢弃,数据报范围内的数据都会被保留。\n\nSOCK_DGRAM和SOCK_RAW 允许发送数据包给sendto 函数，数据包通常有recvfrom接收，该函数返回下一个数据包内容，以及发送者的地址。\n\nSOCK_PACKET 是一个过气的函数，用于从设备驱动直接接收原生的数据包，使用packet函数替代。\n','SOCKET 函数使用(译)','','inherit','open','open','','418-revision-v1','','','2015-08-03 03:24:22','2015-08-03 03:24:22','',418,'http://unasm.com/2015/08/451/',0,'revision','',0),(449,1,'2015-08-03 02:47:40','2015-08-03 02:47:40','源自：http://man7.org/linux/man-pages/man2/socket.2.html\r\n<h4>函数名</h4>\r\nsocket - 为通信创建一个节点。\r\n<h4>定义</h4>\r\n\r\n[cpp]\r\n #include &lt;sys/types.h&gt;          /* See NOTES */\r\n #include &lt;sys/socket.h&gt;\r\n int socket(int domain, int type, int protocol);\r\n[/cpp]\r\n\r\n<h4>描述</h4>\r\nsocket函数创建一个通信节点，并返回一个描述符。\r\n\r\n参数domain 指的是通信地址，这个决定了 protocol 用于通信的协议。具体的通信协议在&lt;sys/socket.h&gt;中定义，\r\n\r\n目前定义的协议有：\r\n\r\n[cpp]\r\n       AF_UNIX, AF_LOCAL   本地协议              unix(7)\r\n       AF_INET             IPv4 网络协议         ip(7)\r\n       AF_INET6            IPv6 网络协议         ipv6(7)\r\n       AF_IPX              IPX - Novell 协议\r\n       AF_NETLINK          内核用户接口设备协议    netlink(7)\r\n       AF_X25              ITU-T X.25 / ISO-8208 protocol   x25(7)\r\n       AF_AX25             Amateur radio AX.25 protocol\r\n       AF_ATMPVC           Access to raw ATM PVCs\r\n       AF_APPLETALK        AppleTalk                        ddp(7)\r\n       AF_PACKET           Low level packet interface       packet(7)\r\n       AF_ALG              Interface to kernel crypto API\r\n[/cpp]\r\n\r\nsocket通信中有type参数，标明通信的方式，目前定义的通信方式有：\r\n<ol>\r\n	<li>SOCK_STREAM ：双向可靠，有连接的二进制流通信，大型数据传输，也可以支持。</li>\r\n	<li>SOCK_DGRAM ：支持 数据包通信（无连接，最大长度固定的通信机制,UDP）。</li>\r\n	<li>SOCK_SEQPACKET：提供一种双向可靠，最大长度固定的有链接的通信，每次调用时候每个消费者都需要读取整个包。</li>\r\n	<li>SOCK_RAW：提供一种原生的网络通信方式（用于自定义通信，黑客，高级网络通信）</li>\r\n	<li>SOCK_RDM: 可靠数据报，但是不保证传输顺序。</li>\r\n	<li>SOCK_PACKET：过时了，不要再新程序中使用。</li>\r\n</ol>\r\n不是全部的通信协议都支持所有的通信方式的。Linux 2.6.27之后，type参数有了第二个作用：指定socket类型的情况下，它可能包含一些位运算或者下面的值，去修正socket的行为\r\n<ol>\r\n	<li><b>SOCK_NONBLOCK</b> 在新打开的设置O_NONBLOCK 文件状态符,有了这个标志位，就不用再每次调用fcntl()了。对于socket 的recv()和send()采用非阻塞的方式，对于磁盘I/O ，非阻塞并不产生效果</li>\r\n	<li><b> SOCK_CLOEXEC 在新打开的文件描述符上面设置 FD_CLOEXEC 标志位，看O_CLOEXEC 在open函数中的作用，就知道这个标志位的意义了</b></li>\r\n</ol>\r\nprotocol 指定socket中用的协议。一般来说，一种socket类型，只有一种协议对应，这个时候，protocol 可以为0，但是也存在一种socket类型有多重通信协议，这个时候，就必须指定具体的通信协议。协议号指定为通信的时候被取代的“通信域”。\r\nSOCK_STREAM 类型是双工通信的二进制流。不限制通信量的大小。在收发数据的时候，socket流必须是在连接状态的，连接是通过 connect()函数创建,连接之后，数据通过read和write或者其他的变体，比如send,recv 传输。通过close关闭会话。大数据包可以通过send发送，recv接受。\r\n\r\nSOCK_STREAM 通信协议保证数据不会丢失或者重复，如果有数据段在一个合理的时间内不能成功发送,该连接会被认为已死，如果设置了SO_KEEPALIVE，socket协议会检查是不是有其他的符合通信协议的链路存在，如果在已断开的流里收发数据，该进程会收到SIGPIPE 信号，会令未处理该信号的进程异常退出。\r\nSOCK_SEQPACKET 和SOCK_STREAM 类似，唯一的区别是调用read()的时候，返回的只是请求的数据量。多余的数据会被丢弃,数据报范围内的数据都会被保留。\r\n\r\nSOCK_DGRAM和SOCK_RAW 允许发送数据包给sendto 函数，数据包通常有recvfrom接收，该函数返回下一个数据包内容，以及发送者的地址。\r\n\r\nSOCK_PACKET 是一个过气的函数，用于从设备驱动直接接收原生的数据包，使用packet函数替代。\r\n\r\nfcntl 的F_SETOWN 操作可以用于','SOCKET 函数使用(译)','','inherit','open','open','','418-revision-v1','','','2015-08-03 02:47:40','2015-08-03 02:47:40','',418,'http://unasm.com/2015/08/449/',0,'revision','',0),(450,1,'2015-08-03 03:20:09','2015-08-03 03:20:09','源自：http://man7.org/linux/man-pages/man2/socket.2.html\r\n<h4>函数名</h4>\r\nsocket - 为通信创建一个节点。\r\n<h4>定义</h4>\r\n\r\n[cpp]\r\n #include &lt;sys/types.h&gt;          /* See NOTES */\r\n #include &lt;sys/socket.h&gt;\r\n int socket(int domain, int type, int protocol);\r\n[/cpp]\r\n\r\n<h4>描述</h4>\r\nsocket函数创建一个通信节点，并返回一个描述符。\r\n\r\n参数domain 指的是通信地址，这个决定了 protocol 用于通信的协议。具体的通信协议在&lt;sys/socket.h&gt;中定义，\r\n\r\n目前定义的协议有：\r\n\r\n[cpp]\r\n       AF_UNIX, AF_LOCAL   本地协议              unix(7)\r\n       AF_INET             IPv4 网络协议         ip(7)\r\n       AF_INET6            IPv6 网络协议         ipv6(7)\r\n       AF_IPX              IPX - Novell 协议\r\n       AF_NETLINK          内核用户接口设备协议    netlink(7)\r\n       AF_X25              ITU-T X.25 / ISO-8208 protocol   x25(7)\r\n       AF_AX25             Amateur radio AX.25 protocol\r\n       AF_ATMPVC           Access to raw ATM PVCs\r\n       AF_APPLETALK        AppleTalk                        ddp(7)\r\n       AF_PACKET           Low level packet interface       packet(7)\r\n       AF_ALG              Interface to kernel crypto API\r\n[/cpp]\r\n\r\nsocket通信中有type参数，标明通信的方式，目前定义的通信方式有：\r\n<ol>\r\n	<li>SOCK_STREAM ：双向可靠，有连接的二进制流通信，大型数据传输，也可以支持。</li>\r\n	<li>SOCK_DGRAM ：支持 数据包通信（无连接，最大长度固定的通信机制,UDP）。</li>\r\n	<li>SOCK_SEQPACKET：提供一种双向可靠，最大长度固定的有链接的通信，每次调用时候每个消费者都需要读取整个包。</li>\r\n	<li>SOCK_RAW：提供一种原生的网络通信方式（用于自定义通信，黑客，高级网络通信）</li>\r\n	<li>SOCK_RDM: 可靠数据报，但是不保证传输顺序。</li>\r\n	<li>SOCK_PACKET：过时了，不要再新程序中使用。</li>\r\n</ol>\r\n不是全部的通信协议都支持所有的通信方式的。Linux 2.6.27之后，type参数有了第二个作用：指定socket类型的情况下，它可能包含一些位运算或者下面的值，去修正socket的行为\r\n<ol>\r\n	<li><b>SOCK_NONBLOCK</b> 在新打开的设置O_NONBLOCK 文件状态符,有了这个标志位，就不用再每次调用fcntl()了。对于socket 的recv()和send()采用非阻塞的方式，对于磁盘I/O ，非阻塞并不产生效果</li>\r\n	<li><b> SOCK_CLOEXEC 在新打开的文件描述符上面设置 FD_CLOEXEC 标志位，看O_CLOEXEC 在open函数中的作用，就知道这个标志位的意义了</b></li>\r\n</ol>\r\nprotocol 指定socket中用的协议。一般来说，一种socket类型，只有一种协议对应，这个时候，protocol 可以为0，但是也存在一种socket类型有多重通信协议，这个时候，就必须指定具体的通信协议。协议号指定为通信的时候被取代的“通信域”。\r\nSOCK_STREAM 类型是双工通信的二进制流。不限制通信量的大小。在收发数据的时候，socket流必须是在连接状态的，连接是通过 connect()函数创建,连接之后，数据通过read和write或者其他的变体，比如send,recv 传输。通过close关闭会话。大数据包可以通过send发送，recv接受。\r\n\r\nSOCK_STREAM 通信协议保证数据不会丢失或者重复，如果有数据段在一个合理的时间内不能成功发送,该连接会被认为已死，如果设置了SO_KEEPALIVE，socket协议会检查是不是有其他的符合通信协议的链路存在，如果在已断开的流里收发数据，该进程会收到SIGPIPE 信号，会令未处理该信号的进程异常退出。\r\nSOCK_SEQPACKET 和SOCK_STREAM 类似，唯一的区别是调用read()的时候，返回的只是请求的数据量。多余的数据会被丢弃,数据报范围内的数据都会被保留。\r\n\r\nSOCK_DGRAM和SOCK_RAW 允许发送数据包给sendto 函数，数据包通常有recvfrom接收，该函数返回下一个数据包内容，以及发送者的地址。\r\n\r\nSOCK_PACKET 是一个过气的函数，用于从设备驱动直接接收原生的数据包，使用packet函数替代。\r\n','SOCKET 函数使用(译)','','inherit','open','open','','418-revision-v1','','','2015-08-03 03:20:09','2015-08-03 03:20:09','',418,'http://unasm.com/2015/08/450/',0,'revision','',0),(452,1,'2015-08-03 08:22:42','2015-08-03 08:22:42','<b>函数名</b> listen : 监听socket连接\r\n\r\n[cpp]\r\n #include &lt;sys/types.h&gt;          /* See NOTES */\r\n #include &lt;sys/socket.h&gt;\r\n int listen(int sockfd, int backlog);\r\n[/cpp]\r\n\r\n<h4>描述</h4>\r\n该函数把 sockfd 变成了被动连接，也就是说，socket 要使用accept() 接收到达的连接请求。\r\n\r\nsockfd 参数是 类型为SOCK_SEQPACKET或者SOCK_STREAM(tcp)的socket字\r\n\r\nbacklog 参数 定义了sockfd请求队列的最大长度，如果请求队列满了，客户端会收到ECONNREFUSED的错误或者如果协议支持重传，该请求会被忽略，之后会再次尝试连接。\r\n<h4>返回值</h4>\r\n成功返回0，失败返回-1，并且置位errno。\r\n<h4>错误情况</h4>\r\n<ol>\r\n	<li>EADDRINUSE : 其他的socket 已经在监听了该端口。</li>\r\n	<li>EADDRINUSE(和上面一样): socket并未和某一个固定端口绑定，和一个临时端口绑定了，所有的临时端口都被占用了。</li>\r\n	<li>EBADF:无效的描述符。</li>\r\n	<li>ENOTSOCK：不是socket类型的套字节。</li>\r\n	<li>EOPNOTSUPP：该类型并不支持listen操作。</li>\r\n</ol>\r\n<h4>注意</h4>\r\n在开始接收连接的步骤如下：\r\n<ol>\r\n	<li>必须通过socket()创建一个socket 描述符</li>\r\n	<li>使用bind与本地的端口绑定，其他的socket才可能和它连接。</li>\r\n	<li>必须通过listen 指定请求连接队列的大小。</li>\r\n	<li>使用accept 函数接收。</li>\r\n</ol>\r\n','Listen 函数使用手册(译)','','publish','open','open','','listen-%e5%87%bd%e6%95%b0%e4%bd%bf%e7%94%a8%e6%89%8b%e5%86%8c%e8%af%91','','','2015-08-03 09:11:28','2015-08-03 09:11:28','',0,'http://unasm.com/?p=452',0,'post','',0),(453,1,'2015-08-03 08:22:42','2015-08-03 08:22:42','<b>函数名</b> listen : 监听socket连接\r\n\r\n[cpp]\r\n #include &lt;sys/types.h&gt;          /* See NOTES */\r\n #include &lt;sys/socket.h&gt;\r\n int listen(int sockfd, int backlog);\r\n[/cpp]\r\n<h4>描述</h4>\r\n该函数把 sockfd 变成了被动连接，也就是说，socket 要使用accept() 接收到达的连接请求。\r\n\r\nsockfd 参数是 类型为SOCK_SEQPACKET或者SOCK_STREAM(tcp)的socket字\r\n\r\nbacklog 参数 定义了sockfd请求队列的最大长度，如果请求队列满了，客户端会收到ECONNREFUSED的错误或者如果协议支持重传，该请求会被忽略，之后会再次尝试连接。\r\n\r\n<h4>返回值</h4>\r\n成功返回0，失败返回-1，并且置位errno。\r\n<h4>错误情况</h4>','Listen 函数使用手册(译)','','inherit','open','open','','452-revision-v1','','','2015-08-03 08:22:42','2015-08-03 08:22:42','',452,'http://unasm.com/2015/08/453/',0,'revision','',0),(454,1,'2015-08-03 09:10:27','2015-08-03 09:10:27','<b>函数名</b> listen : 监听socket连接\n\n[cpp]\n #include &lt;sys/types.h&gt;          /* See NOTES */\n #include &lt;sys/socket.h&gt;\n int listen(int sockfd, int backlog);\n[/cpp]\n\n<h4>描述</h4>\n该函数把 sockfd 变成了被动连接，也就是说，socket 要使用accept() 接收到达的连接请求。\n\nsockfd 参数是 类型为SOCK_SEQPACKET或者SOCK_STREAM(tcp)的socket字\n\nbacklog 参数 定义了sockfd请求队列的最大长度，如果请求队列满了，客户端会收到ECONNREFUSED的错误或者如果协议支持重传，该请求会被忽略，之后会再次尝试连接。\n<h4>返回值</h4>\n成功返回0，失败返回-1，并且置位errno。\n<h4>错误情况</h4>\n<ol>\n	<li>EADDRINUSE : 其他的socket 已经在监听了该端口。</li>\n	<li>EADDRINUSE(和上面一样): socket并未和某一个固定端口绑定，和一个临时端口绑定了，所有的临时端口都被占用了。</li>\n	<li>EBADF:无效的描述符。</li>\n	<li>ENOTSOCK：不是socket类型的套字节。</li>\n	<li>EOPNOTSUPP：该类型并不支持listen操作。</li>\n</ol>\n<h4>注意</h4>\n在开始接收连接的步骤如下：\n<ol>\n	<li>必须通过socket()创建一个socket 描述符</li>\n	<li>使用bind与本地的端口绑定，其他的socket才可能和它连接。</li>\n	<li>必须通过listen 指定请求连接队列的大小。</li>\n	<li>使用accept 函数接收。</li>\n</ol>\n','Listen 函数使用手册(译)','','inherit','open','open','','452-autosave-v1','','','2015-08-03 09:10:27','2015-08-03 09:10:27','',452,'http://unasm.com/2015/08/454/',0,'revision','',0),(455,1,'2015-08-03 09:11:04','2015-08-03 09:11:04','<b>函数名</b> listen : 监听socket连接\r\n\r\n[cpp]\r\n #include &lt;sys/types.h&gt;          /* See NOTES */\r\n #include &lt;sys/socket.h&gt;\r\n int listen(int sockfd, int backlog);\r\n[/cpp]\r\n\r\n<h4>描述</h4>\r\n该函数把 sockfd 变成了被动连接，也就是说，socket 要使用accept() 接收到达的连接请求。\r\n\r\nsockfd 参数是 类型为SOCK_SEQPACKET或者SOCK_STREAM(tcp)的socket字\r\n\r\nbacklog 参数 定义了sockfd请求队列的最大长度，如果请求队列满了，客户端会收到ECONNREFUSED的错误或者如果协议支持重传，该请求会被忽略，之后会再次尝试连接。\r\n<h4>返回值</h4>\r\n成功返回0，失败返回-1，并且置位errno。\r\n<h4>错误情况</h4>\r\n<ol>\r\n	<li>EADDRINUSE : 其他的socket 已经在监听了该端口。</li>\r\n	<li>EADDRINUSE(和上面一样): socket并未和某一个固定端口绑定，和一个临时端口绑定了，所有的临时端口都被占用了。</li>\r\n	<li>EBADF:无效的描述符。</li>\r\n	<li>ENOTSOCK：不是socket类型的套字节。</li>\r\n	<li>EOPNOTSUPP：该类型并不支持listen操作。</li>\r\n</ol>\r\n<h4>注意</h4>\r\n在开始接收连接的步骤如下：\r\n<ol>\r\n	<li>必须通过socket()创建一个socket 描述符</li>\r\n	<li>使用bind与本地的端口绑定，其他的socket才可能和它连接。</li>\r\n	<li>必须通过listen 指定请求连接队列的大小。</li>\r\n	<li>使用accept 函数接收。</li>\r\n</ol>\r\n','Listen 函数使用手册(译)','','inherit','open','open','','452-revision-v1','','','2015-08-03 09:11:04','2015-08-03 09:11:04','',452,'http://unasm.com/2015/08/455/',0,'revision','',0),(456,1,'2015-08-04 03:09:26','2015-08-04 03:09:26','自由不是所心所欲，而是可以选择最适合的方式。\n\n最近接手了论坛，我还记得前任维护者那同情感叹的眼神，事到如今，我也知道为什么了。\n\n第一条：<b>不要随便使用全局变量，不要随便全局变量，不要随便使用全局变量</b>。\n\n在阅读discuz源码的时候，时常看到一个变量，不明白什么含义，经历怎样的处理，来到当前所在的地方，往往需要回溯，变量的定义可能是上层文件（该文件include/require本文件），也可能是自己include的子文件，随随便便的一个global，就将自己查找范围扩大无数倍，更有甚者，discuz将Get/Post/Server中的变量提出来，通过&amp;&amp;$_POST[$key] = $val的方式，硬生生的把一个本来还容易理解的全局变量，变成了极其容易和局部变量混淆的变量，结果就是回溯，回溯，再回溯。global有时候是必须的，但不是随意的，甚至是危险的，有时候，会和普通变量重名，互相干扰，可能在无意中被修改，过长的作用链，从前向后贯穿整个代码生命周期，也极大的增加了耦合度，复杂度。\n\n第二条：<b>注释很重要</b>，真的很重要。\n\n一个几乎没有注释的代码，会让后来的接手者痛不欲生，写代码的时候，书写的人只有一种想法，但是后来的人却需要在1000种猜测选择中来回揣摩，以及不断的印证，花费的时间，远远超过维护一份好的注释的时间。\n\n第三条：<b>尽可能的复用代码，使用函数</b>，通过参数传递变量。\n\n阅读一份800+行代码，没有一个函数，全部平铺直叙的写下来，看起来让人昏昏欲睡，这样的代码，完全是写代码的的人不肯动脑子，没有仔细思考某一个功能的独立性，没有考虑复用的可能，看着if和else里面惊人相似的代码，这么长，这么长，他们到底有什么不同，恨不得在脑子里面实现diff，单纯的一个if/else ，15寸的屏幕还放不下。用函数，把巨大的代码块切割成一个一个的小func，然后组织起来，阅读起来轻松愉快，后续更改维护，也不会牵一发而动全身。\n\n软件工程里有一个约定，就是一个函数的长度，不要超过一个屏幕，这个是非常必要的。当然，还有一个过期的约定，就是宽度尽量不超过80个字符，redis的作者居然也还在恪守着这个原则。\n\n我阅读过PHP的软件规范，大括号的位置，= if 左右的空格，变量的命名等等约定，相比于上面几条来说，都是浮云，这些做不好，挺多就是难看点，上面的做不好，就是要人命的。而且，上面的，真的是软件开发里面最最基础的，相信大部分人都知道。','软件编码规范及基本注意事项(discuz缺陷)','','inherit','open','open','','405-autosave-v1','','','2015-08-04 03:09:26','2015-08-04 03:09:26','',405,'http://unasm.com/2015/08/456/',0,'revision','',0),(457,1,'2015-08-04 02:56:26','2015-08-04 02:56:26','\r\n自由不是所心所欲，而是可以选择最适合的方式。\r\n最近接手了论坛，我还记得前任维护者那同情感叹的眼神，事到如今，我也知道为什么了。\r\n\r\n第一条：<b>不要随便使用全局变量，不要随便全局变量，不要随便使用全局变量</b>。\r\n在阅读discuz源码的时候，时常看到一个变量，不明白什么含义，经历怎样的处理，来到当前所在的地方，往往需要回溯，变量的定义可能是上层文件（该文件include/require本文件），也可能是自己include的子文件，随随便便的一个global，就将自己查找范围扩大无数倍，更有甚者，discuz将Get/Post/Server中的变量提出来，通过&&$_POST[$key] = $val的方式，硬生生的把一个本来还容易理解的全局变量，变成了极其容易和局部变量混淆的变量，结果就是回溯，回溯，再回溯。global有时候是必须的，但不是随意的，甚至是危险的，有时候，会和普通变量重名，互相干扰，可能在无意中被修改，过长的作用链，从前向后贯穿整个代码生命周期，也极大的增加了耦合度，复杂度。\r\n第二条：<b>注释很重要</b>，真的很重要。\r\n一个几乎没有注释的代码，会让后来的接手者痛不欲生，写代码的时候，书写的人只有一种想法，但是后来的人却需要在1000种猜测选择中来回揣摩，以及不断的印证，花费的时间，远远超过维护一份好的注释的时间。\r\n第三条：<b>尽可能的复用代码，使用函数</b>，通过参数传递变量。\r\n阅读一份800+行代码，没有一个函数，全部平铺直叙的写下来，看起来让人昏昏欲睡，这样的代码，完全是写代码的的人不肯动脑子，没有仔细思考某一个功能的独立性，没有考虑复用的可能，看着if和else里面惊人相似的代码，这么长，这么长，他们到底有什么不同，恨不得在脑子里面实现diff，单纯的一个if/else ，15寸的屏幕还放不下。用函数，把巨大的代码块切割成一个一个的小func，然后组织起来，阅读起来轻松愉快，后续更改维护，也不会牵一发而动全身。\r\n软件工程里有一个约定，就是一个函数的长度，不要超过一个屏幕，这个是非常必要的。当然，还有一个过期的约定，就是宽度尽量不超过80个字符，redis的作者居然也还在恪守着这个原则。\r\n\r\n我阅读过PHP的软件规范，大括号的位置，= if 左右的空格，变量的命名等等约定，相比于上面几条来说，都是浮云，这些做不好，挺多就是难看点，上面的做不好，就是要人命的。','软件编码规范以及基本注意事项(discuz缺陷)','','inherit','open','open','','405-revision-v1','','','2015-08-04 02:56:26','2015-08-04 02:56:26','',405,'http://unasm.com/2015/08/457/',0,'revision','',0),(458,1,'2015-08-04 02:57:21','2015-08-04 02:57:21','自由不是所心所欲，而是可以选择最适合的方式。\r\n\r\n最近接手了论坛，我还记得前任维护者那同情感叹的眼神，事到如今，我也知道为什么了。\r\n\r\n第一条：<b>不要随便使用全局变量，不要随便全局变量，不要随便使用全局变量</b>。\r\n\r\n在阅读discuz源码的时候，时常看到一个变量，不明白什么含义，经历怎样的处理，来到当前所在的地方，往往需要回溯，变量的定义可能是上层文件（该文件include/require本文件），也可能是自己include的子文件，随随便便的一个global，就将自己查找范围扩大无数倍，更有甚者，discuz将Get/Post/Server中的变量提出来，通过&amp;&amp;$_POST[$key] = $val的方式，硬生生的把一个本来还容易理解的全局变量，变成了极其容易和局部变量混淆的变量，结果就是回溯，回溯，再回溯。global有时候是必须的，但不是随意的，甚至是危险的，有时候，会和普通变量重名，互相干扰，可能在无意中被修改，过长的作用链，从前向后贯穿整个代码生命周期，也极大的增加了耦合度，复杂度。\r\n\r\n&nbsp;\r\n\r\n第二条：<b>注释很重要</b>，真的很重要。\r\n\r\n一个几乎没有注释的代码，会让后来的接手者痛不欲生，写代码的时候，书写的人只有一种想法，但是后来的人却需要在1000种猜测选择中来回揣摩，以及不断的印证，花费的时间，远远超过维护一份好的注释的时间。\r\n\r\n第三条：<b>尽可能的复用代码，使用函数</b>，通过参数传递变量。\r\n\r\n阅读一份800+行代码，没有一个函数，全部平铺直叙的写下来，看起来让人昏昏欲睡，这样的代码，完全是写代码的的人不肯动脑子，没有仔细思考某一个功能的独立性，没有考虑复用的可能，看着if和else里面惊人相似的代码，这么长，这么长，他们到底有什么不同，恨不得在脑子里面实现diff，单纯的一个if/else ，15寸的屏幕还放不下。用函数，把巨大的代码块切割成一个一个的小func，然后组织起来，阅读起来轻松愉快，后续更改维护，也不会牵一发而动全身。\r\n\r\n软件工程里有一个约定，就是一个函数的长度，不要超过一个屏幕，这个是非常必要的。当然，还有一个过期的约定，就是宽度尽量不超过80个字符，redis的作者居然也还在恪守着这个原则。\r\n\r\n我阅读过PHP的软件规范，大括号的位置，= if 左右的空格，变量的命名等等约定，相比于上面几条来说，都是浮云，这些做不好，挺多就是难看点，上面的做不好，就是要人命的。','软件编码规范以及基本注意事项(discuz缺陷)','','inherit','open','open','','405-revision-v1','','','2015-08-04 02:57:21','2015-08-04 02:57:21','',405,'http://unasm.com/2015/08/458/',0,'revision','',0),(459,1,'2015-08-04 02:57:44','2015-08-04 02:57:44','自由不是所心所欲，而是可以选择最适合的方式。\r\n\r\n最近接手了论坛，我还记得前任维护者那同情感叹的眼神，事到如今，我也知道为什么了。\r\n\r\n第一条：<b>不要随便使用全局变量，不要随便全局变量，不要随便使用全局变量</b>。\r\n\r\n在阅读discuz源码的时候，时常看到一个变量，不明白什么含义，经历怎样的处理，来到当前所在的地方，往往需要回溯，变量的定义可能是上层文件（该文件include/require本文件），也可能是自己include的子文件，随随便便的一个global，就将自己查找范围扩大无数倍，更有甚者，discuz将Get/Post/Server中的变量提出来，通过&amp;&amp;$_POST[$key] = $val的方式，硬生生的把一个本来还容易理解的全局变量，变成了极其容易和局部变量混淆的变量，结果就是回溯，回溯，再回溯。global有时候是必须的，但不是随意的，甚至是危险的，有时候，会和普通变量重名，互相干扰，可能在无意中被修改，过长的作用链，从前向后贯穿整个代码生命周期，也极大的增加了耦合度，复杂度。\r\n\r\n第二条：<b>注释很重要</b>，真的很重要。\r\n\r\n一个几乎没有注释的代码，会让后来的接手者痛不欲生，写代码的时候，书写的人只有一种想法，但是后来的人却需要在1000种猜测选择中来回揣摩，以及不断的印证，花费的时间，远远超过维护一份好的注释的时间。\r\n\r\n第三条：<b>尽可能的复用代码，使用函数</b>，通过参数传递变量。\r\n\r\n阅读一份800+行代码，没有一个函数，全部平铺直叙的写下来，看起来让人昏昏欲睡，这样的代码，完全是写代码的的人不肯动脑子，没有仔细思考某一个功能的独立性，没有考虑复用的可能，看着if和else里面惊人相似的代码，这么长，这么长，他们到底有什么不同，恨不得在脑子里面实现diff，单纯的一个if/else ，15寸的屏幕还放不下。用函数，把巨大的代码块切割成一个一个的小func，然后组织起来，阅读起来轻松愉快，后续更改维护，也不会牵一发而动全身。\r\n\r\n软件工程里有一个约定，就是一个函数的长度，不要超过一个屏幕，这个是非常必要的。当然，还有一个过期的约定，就是宽度尽量不超过80个字符，redis的作者居然也还在恪守着这个原则。\r\n\r\n我阅读过PHP的软件规范，大括号的位置，= if 左右的空格，变量的命名等等约定，相比于上面几条来说，都是浮云，这些做不好，挺多就是难看点，上面的做不好，就是要人命的。','软件编码规范以及基本注意事项(discuz缺陷)','','inherit','open','open','','405-revision-v1','','','2015-08-04 02:57:44','2015-08-04 02:57:44','',405,'http://unasm.com/2015/08/459/',0,'revision','',0),(460,1,'2015-08-04 03:06:13','2015-08-04 03:06:13','自由不是所心所欲，而是可以选择最适合的方式。\r\n\r\n最近接手了论坛，我还记得前任维护者那同情感叹的眼神，事到如今，我也知道为什么了。\r\n\r\n第一条：<b>不要随便使用全局变量，不要随便全局变量，不要随便使用全局变量</b>。\r\n\r\n在阅读discuz源码的时候，时常看到一个变量，不明白什么含义，经历怎样的处理，来到当前所在的地方，往往需要回溯，变量的定义可能是上层文件（该文件include/require本文件），也可能是自己include的子文件，随随便便的一个global，就将自己查找范围扩大无数倍，更有甚者，discuz将Get/Post/Server中的变量提出来，通过&amp;&amp;$_POST[$key] = $val的方式，硬生生的把一个本来还容易理解的全局变量，变成了极其容易和局部变量混淆的变量，结果就是回溯，回溯，再回溯。global有时候是必须的，但不是随意的，甚至是危险的，有时候，会和普通变量重名，互相干扰，可能在无意中被修改，过长的作用链，从前向后贯穿整个代码生命周期，也极大的增加了耦合度，复杂度。\r\n\r\n第二条：<b>注释很重要</b>，真的很重要。\r\n\r\n一个几乎没有注释的代码，会让后来的接手者痛不欲生，写代码的时候，书写的人只有一种想法，但是后来的人却需要在1000种猜测选择中来回揣摩，以及不断的印证，花费的时间，远远超过维护一份好的注释的时间。\r\n\r\n第三条：<b>尽可能的复用代码，使用函数</b>，通过参数传递变量。\r\n\r\n阅读一份800+行代码，没有一个函数，全部平铺直叙的写下来，看起来让人昏昏欲睡，这样的代码，完全是写代码的的人不肯动脑子，没有仔细思考某一个功能的独立性，没有考虑复用的可能，看着if和else里面惊人相似的代码，这么长，这么长，他们到底有什么不同，恨不得在脑子里面实现diff，单纯的一个if/else ，15寸的屏幕还放不下。用函数，把巨大的代码块切割成一个一个的小func，然后组织起来，阅读起来轻松愉快，后续更改维护，也不会牵一发而动全身。\r\n\r\n软件工程里有一个约定，就是一个函数的长度，不要超过一个屏幕，这个是非常必要的。当然，还有一个过期的约定，就是宽度尽量不超过80个字符，redis的作者居然也还在恪守着这个原则。\r\n\r\n我阅读过PHP的软件规范，大括号的位置，= if 左右的空格，变量的命名等等约定，相比于上面几条来说，都是浮云，这些做不好，挺多就是难看点，上面的做不好，就是要人命的。','软件编码规范及基本注意事项(discuz缺陷)','','inherit','open','open','','405-revision-v1','','','2015-08-04 03:06:13','2015-08-04 03:06:13','',405,'http://unasm.com/2015/08/460/',0,'revision','',0),(461,1,'2015-08-04 03:09:52','2015-08-04 03:09:52','自由不是所心所欲，而是可以选择最适合的方式。\r\n\r\n最近接手了论坛，我还记得前任维护者那同情感叹的眼神，事到如今，我也知道为什么了。\r\n\r\n第一条：<b>不要随便使用全局变量，不要随便全局变量，不要随便使用全局变量</b>。\r\n\r\n在阅读discuz源码的时候，时常看到一个变量，不明白什么含义，经历怎样的处理，来到当前所在的地方，往往需要回溯，变量的定义可能是上层文件（该文件include/require本文件），也可能是自己include的子文件，随随便便的一个global，就将自己查找范围扩大无数倍，更有甚者，discuz将Get/Post/Server中的变量提出来，通过&amp;&amp;$_POST[$key] = $val的方式，硬生生的把一个本来还容易理解的全局变量，变成了极其容易和局部变量混淆的变量，结果就是回溯，回溯，再回溯。global有时候是必须的，但不是随意的，甚至是危险的，有时候，会和普通变量重名，互相干扰，可能在无意中被修改，过长的作用链，从前向后贯穿整个代码生命周期，也极大的增加了耦合度，复杂度。\r\n\r\n第二条：<b>注释很重要</b>，真的很重要。\r\n\r\n一个几乎没有注释的代码，会让后来的接手者痛不欲生，写代码的时候，书写的人只有一种想法，但是后来的人却需要在1000种猜测选择中来回揣摩，以及不断的印证，花费的时间，远远超过维护一份好的注释的时间。\r\n\r\n第三条：<b>尽可能的复用代码，使用函数</b>，通过参数传递变量。\r\n\r\n阅读一份800+行代码，没有一个函数，全部平铺直叙的写下来，看起来让人昏昏欲睡，这样的代码，完全是写代码的的人不肯动脑子，没有仔细思考某一个功能的独立性，没有考虑复用的可能，看着if和else里面惊人相似的代码，这么长，这么长，他们到底有什么不同，恨不得在脑子里面实现diff，单纯的一个if/else ，15寸的屏幕还放不下。用函数，把巨大的代码块切割成一个一个的小func，然后组织起来，阅读起来轻松愉快，后续更改维护，也不会牵一发而动全身。\r\n\r\n软件工程里有一个约定，就是一个函数的长度，不要超过一个屏幕，这个是非常必要的。当然，还有一个过期的约定，就是宽度尽量不超过80个字符，redis的作者居然也还在恪守着这个原则。\r\n\r\n我阅读过PHP的软件规范，大括号的位置，= if 左右的空格，变量的命名等等约定，相比于上面几条来说，都是浮云，这些做不好，挺多就是难看点，上面的做不好，就是要人命的。而且，上面的，真的是软件开发里面最最基础的，相信大部分人都知道。','软件编码规范及基本注意事项(discuz缺陷)','','inherit','open','open','','405-revision-v1','','','2015-08-04 03:09:52','2015-08-04 03:09:52','',405,'http://unasm.com/2015/08/461/',0,'revision','',0),(462,1,'2015-08-04 03:39:09','2015-08-04 03:39:09','自由不是所心所欲，而是自由选择最适合的方式。\r\n\r\n最近接手了论坛，我还记得前任维护者那同情感叹的眼神，事到如今，我也知道为什么了。\r\n\r\n第一条：<b>不要随便使用全局变量，不要随便全局变量，不要随便使用全局变量</b>。\r\n\r\n在阅读discuz源码的时候，时常看到一个变量，不明白什么含义，经历怎样的处理，来到当前所在的地方，往往需要回溯，变量的定义可能是上层文件（该文件include/require本文件），也可能是自己include的子文件，随随便便的一个global，就将自己查找范围扩大无数倍，更有甚者，discuz将Get/Post/Server中的变量提出来，通过&amp;&amp;$_POST[$key] = $val的方式，硬生生的把一个本来还容易理解的全局变量，变成了极其容易和局部变量混淆的变量，结果就是回溯，回溯，再回溯。global有时候是必须的，但不是随意的，甚至是危险的，有时候，会和普通变量重名，互相干扰，可能在无意中被修改，过长的作用链，从前向后贯穿整个代码生命周期，也极大的增加了耦合度，复杂度。\r\n\r\n第二条：<b>注释很重要</b>，真的很重要。\r\n\r\n一个几乎没有注释的代码，会让后来的接手者痛不欲生，写代码的时候，书写的人只有一种想法，但是后来的人却需要在1000种猜测选择中来回揣摩，以及不断的印证，花费的时间，远远超过维护一份好的注释的时间。\r\n\r\n第三条：<b>尽可能的复用代码，使用函数</b>，通过参数传递变量。\r\n\r\n阅读一份800+行代码，没有一个函数，全部平铺直叙的写下来，看起来让人昏昏欲睡，这样的代码，完全是写代码的的人不肯动脑子，没有仔细思考某一个功能的独立性，没有考虑复用的可能，看着if和else里面惊人相似的代码，这么长，这么长，他们到底有什么不同，恨不得在脑子里面实现diff，单纯的一个if/else ，15寸的屏幕还放不下。用函数，把巨大的代码块切割成一个一个的小func，然后组织起来，阅读起来轻松愉快，后续更改维护，也不会牵一发而动全身。\r\n\r\n软件工程里有一个约定，就是一个函数的长度，不要超过一个屏幕，这个是非常必要的。当然，还有一个过期的约定，就是宽度尽量不超过80个字符，redis的作者居然也还在恪守着这个原则。\r\n\r\n我阅读过PHP的软件规范，大括号的位置，= if 左右的空格，变量的命名等等约定，相比于上面几条来说，都是浮云，这些做不好，挺多就是难看点，上面的做不好，就是要人命的。而且，上面的，真的是软件开发里面最最基础的，相信大部分人都知道。','软件编码规范及基本注意事项(discuz缺陷)','','inherit','open','open','','405-revision-v1','','','2015-08-04 03:39:09','2015-08-04 03:39:09','',405,'http://unasm.com/2015/08/462/',0,'revision','',0),(464,1,'2015-08-06 12:10:27','2015-08-06 12:10:27','一切都要从main开始说起。\r\n\r\nmain里面调用了两个函数，initServer和aeMain,在initServer里面，redis创建并初始化了各种socket文件，该listen的listen,该add的add，而aeMain则根据server.el，事件调度器，进入while(1)循环，处理事务。\r\n\r\ninitServer中，抛开对信号的处理，变量的初始化，单纯说网络通信和事件调度,要从initServer的第31行说起\r\n\r\n[cpp]\r\nserver.el = aeCreateEventLoop(server.maxclients+REDIS_EVENTLOOP_FDSET_INCR);\r\n[/cpp]\r\n\r\n首先创建事件调度器,redis的事件，包括文本事件和时间事件，文本事件其实是各种socket套字节的响应监听，包括本地的socket通信，主从复制的通信，客户端的连接通信等等，时间事件的添加是在两个地方，一个是redis.c里面，每1ms执行serverCron函数，另一个是redis-benchmark.c里面，每1ms执行showThroughput函数。\r\n\r\n下面就是时间调度器server.el的定义，时间事件是以单链表的形式，无序的保存在timeEventHead中的，events中保存的，则是全部的文本事件。fired是在全部响应的文本事件列表，一个全部的，一个是已经响应的，需要accept的。\r\n\r\n[cpp]\r\ntypedef struct aeEventLoop {\r\n    int maxfd;   /* highest file descriptor currently registered */\r\n    // 目前已追踪的最大描述符\r\n    int setsize; /* max number of file descriptors tracked */\r\n    // 用于生成时间事件 id\r\n    long long timeEventNextId;\r\n    // 最后一次执行时间事件的时间\r\n    time_t lastTime;     /* Used to detect system clock skew */\r\n    // 已注册的文件事件,unix哲学: 一切都是文件\r\n    // acceptUnixHandler 处理文件类型的时间\r\n    aeFileEvent *events; /* Registered events */\r\n    // 已就绪的文件事件\r\n    aeFiredEvent *fired; /* Fired events */\r\n    // 时间事件,链表\r\n    aeTimeEvent *timeEventHead;\r\n    // 事件处理器的开关\r\n    int stop;\r\n    // 多路复用库的私有数据\r\n        // aeApiState 的 实例化数据\r\n    void *apidata; /* This is used for polling API specific data */\r\n\r\n    // 在处理事件前要执行的函数\r\n    aeBeforeSleepProc *beforesleep;\r\n\r\n} aeEventLoop;\r\n[/cpp]\r\n\r\n创建了全局唯一的server.el之后，开始创建网络接口，server.port 默认是6379,哨兵模式下是26379，如果启动时候有指定，就是启动时指定的数。server.ipfd是用来保存生成的套字节的，ipfd_count 是对应的数量,具体绑定的本地地址以及地址类型(ipv4,ipv6)是保存在server.bindaddr中，对应的数量是server.bindaddr_count,这些本地地址是启动的时候需要在参数中指定的，如果没有指定，这里就是没有，因为不同的套字节监听相同的端口，server.port，需要端口复用，所以地址必须不能相同,全部的都是端口都是非阻塞的哦，响应在aeMain中呢。\r\n\r\n[cpp]\r\n if (server.port != 0 &amp;&amp;\r\n          listenToPort(server.port,server.ipfd,&amp;server.ipfd_count) == REDIS_ERR)\r\n          exit(1);\r\n[/cpp]\r\n\r\nlistenToPort 函数直接就实现了从socket 到listen的全部流程,剩下的就是坐等响应，然后accept了。有兴趣可以自己追踪到listenToPort中看看如何创建一个socket。\r\n\r\n接着是创建一个本地的socket文件，redis进程和其他的进程通信的时候需要,当redis和其客户端在同一个服务器上的时候，是通过本地socket通信实现的。server.unixsocket是socket文件的路径，server.unixsocketperm是socket文件的权限，同样设置成非阻塞模式。\r\n\r\n[cpp]\r\n  if (server.unixsocket != NULL) {\r\n          unlink(server.unixsocket); /* don\'t care if this fails */\r\n          server.sofd = anetUnixServer(server.neterr,server.unixsocket,\r\n              server.unixsocketperm, server.tcp_backlog);\r\n         if (server.sofd == ANET_ERR) {\r\n              redisLog(REDIS_WARNING, &quot;Opening socket: %s&quot;, server.neterr);\r\n              exit(1);\r\n         }\r\n         anetNonBlock(NULL,server.sofd);\r\n  }\r\n[/cpp]\r\n\r\n跳过一个长长的对db的初始化过程，来到这句代码。之前有提到，redis的时间事件几乎可以认为只是用来调用serverCron的，那这里就是创建一个事件事件，并加到timeEventHead 链表里面的。\r\n我能感觉到，作者当初这么设计，是认为自己会有很多类型的时间事件需要处理，所以用来一种通用的方式来，后来发现，只是需要serverCron定时处理罢了。其实实现定时，是有很多简单设计的。\r\n\r\n[cpp]\r\n if(aeCreateTimeEvent(server.el, 1, serverCron, NULL, NULL) == AE_ERR) {\r\n         redisPanic(&quot;Can\'t create the serverCron time event.&quot;);\r\n         exit(1);\r\n  }\r\n[/cpp]\r\n\r\n接着是整个事件调度的最最核心的地方，也是反应器模式最灵魂的地方，将之前所有的套字节绑定到epoll/poll的套字节上面，并传入对应的响应处理函数。acceptTcpHandler ，就是server.ipfd这些套字节响应的时候，需要调用的处理函数，AE_READABLE表示该套字节是用来读的，将来触发的，是读操作的注册函数。有兴趣建议看一下aeCreateFileEvent,我看了epoll的部分，\r\n\r\n[cpp]\r\n    for (j = 0; j &lt; server.ipfd_count; j++) {\r\n                //为ipfd 添加事件处理，放在epoll的监听列表里面\r\n        if (aeCreateFileEvent(server.el, server.ipfd[j], AE_READABLE,\r\n            acceptTcpHandler,NULL) == AE_ERR)\r\n            {\r\n                redisPanic(\r\n                    &quot;Unrecoverable error creating server.ipfd file event.&quot;);\r\n            }\r\n    }\r\n\r\n[/cpp]\r\n\r\n下面是为本地的socket套字节注册到epoll/poll上的写法，功能类似，回调函数不同，这个事acceptUnixHandler。\r\n\r\n[cpp]\r\n if (server.sofd &gt; 0 &amp;&amp;\r\n                        aeCreateFileEvent(\r\n                                server.el,\r\n                                server.sofd,\r\n                                AE_READABLE,\r\n                                acceptUnixHandler,\r\n                                NULL\r\n                        ) == AE_ERR) redisPanic(&quot;Unrecoverable error creating server.sofd file event.&quot;);\r\n[/cpp]\r\n\r\n至此将所有的套字节初始化，绑定完毕，之后，如何调度处理呢？请看 <a title=\"redis的事件调度器 epoll\" href=\"http://unasm.com/2015/07/354/\">redis的事件调度器 epoll</a>\r\n恩，该文章还有待再次润色','redis源码分析之网络通信和事件调度篇','','publish','open','open','','redis-%e7%bd%91%e7%bb%9c%e9%80%9a%e4%bf%a1%e5%92%8c%e4%ba%8b%e4%bb%b6%e8%b0%83%e5%ba%a6','','\nhttp://unasm.com/2015/07/354/','2015-08-07 04:00:13','2015-08-07 04:00:13','',0,'http://unasm.com/?p=464',0,'post','',0),(465,1,'2015-08-06 12:10:27','2015-08-06 12:10:27','<strong></strong>先占坑','redis 网络通信和事件调度','','inherit','open','open','','464-revision-v1','','','2015-08-06 12:10:27','2015-08-06 12:10:27','',464,'http://unasm.com/2015/08/465/',0,'revision','',0),(466,1,'2015-08-06 12:15:18','2015-08-06 12:15:18','先占坑','redis 网络通信和事件调度','','inherit','open','open','','464-revision-v1','','','2015-08-06 12:15:18','2015-08-06 12:15:18','',464,'http://unasm.com/2015/08/466/',0,'revision','',0),(467,1,'2015-08-06 13:32:57','2015-08-06 13:32:57','一切都要从main开始说起。\n\nmain里面调用了两个函数，initServer和<span class=\"s1\">a</span><span class=\"s2\">eMain,在initServer里面，redis创建并初始化了各种socket文件，该listen的listen,该add的add，而aeMain则根据server.el，事件调度器，进入while(1)循环，处理事务。</span>\n\ninitServer中，抛开对信号的处理，变量的初始化，单纯说网络通信和事件调度,要从initServer的第31行说起\n\n[cpp]\nserver.el = aeCreateEventLoop(server.maxclients+REDIS_EVENTLOOP_FDSET_INCR);  \n[/cpp]\n\n首先创建事件调度器,redis的事件，包括文本事件和时间事件，文本事件其实是各种socket套字节的响应监听，包括本地的socket通信，主从复制的通信，客户端的连接通信等等，时间事件主要是在两个地方，一个是redis.c里面，想要每1ms执行serverCron函数，另一个是redis-benchmark.c里面，每1ms执行showThroughput函数，就再也没有其他的定时事件了。下面就是时间调度器server.el的定义，时间事件是以单链表的形式，无序的保存在timeEventHead中的，events中保存的，则是全部的文本事件。fired是在全部响应的文本事件列表，一个全部的，一个是已经响应的，需要accept的。\n\n[cpp]\ntypedef struct aeEventLoop {\n    int maxfd;   /* highest file descriptor currently registered */\n    // 目前已追踪的最大描述符\n    int setsize; /* max number of file descriptors tracked */\n    // 用于生成时间事件 id\n    long long timeEventNextId;\n    // 最后一次执行时间事件的时间\n    time_t lastTime;     /* Used to detect system clock skew */\n    // 已注册的文件事件,unix哲学: 一切都是文件\n        // acceptUnixHandler 处理文件类型的时间\n    aeFileEvent *events; /* Registered events */\n    // 已就绪的文件事件\n    aeFiredEvent *fired; /* Fired events */\n    // 时间事件,链表\n    aeTimeEvent *timeEventHead;\n    // 事件处理器的开关\n    int stop;\n    // 多路复用库的私有数据\n        // aeApiState 的 实例化数据\n    void *apidata; /* This is used for polling API specific data */\n\n    // 在处理事件前要执行的函数\n    aeBeforeSleepProc *beforesleep;\n\n} aeEventLoop;\n[/cpp]\n\n创建了全局唯一的server.el之后，开始创建网络接口，server.port 默认是6379,哨兵模式下是26379，如果启动时候有指定，就是启动时指定的数。server.ipfd是用来保存生成的套字节的，ipfd_count 是对应的数量,具体绑定的本地地址以及地址类型(ipv4,ipv6)是保存在server.bindaddr中，对应的数量是server.bindaddr_count,这些本地地址是启动的时候需要在参数中指定的，如果没有指定，这里就是没有，因为不同的套字节监听相同的端口，server.port，需要端口复用，所以地址必须不能相同,全部的都是端口都是非阻塞的哦，响应在aeMain中呢。\n\n[cpp]\n if (server.port != 0 &amp;&amp;                                                                                                                                                   \n          listenToPort(server.port,server.ipfd,&amp;server.ipfd_count) == REDIS_ERR)\n          exit(1);\n[/cpp]\n\nlistenToPort 函数直接就实现了从socket 到listen的全部流程,剩下的就是坐等响应，然后accept了。有兴趣可以自己追踪到listenToPort中看看如何创建一个socket。\n接着是创建一个本地的socket文件，redis进程和其他的进程通信的时候需要,当redis和其客户端在同一个服务器上的时候，是通过本地socket通信实现的。server.unixsocket是socket文件的路径，server.unixsocketperm是socket文件的权限，同样设置成非阻塞模式。\n\n[cpp]\n  if (server.unixsocket != NULL) {                                                                                                                                          \n          unlink(server.unixsocket); /* don\'t care if this fails */\n          server.sofd = anetUnixServer(server.neterr,server.unixsocket,\n              server.unixsocketperm, server.tcp_backlog);\n         if (server.sofd == ANET_ERR) {\n              redisLog(REDIS_WARNING, &quot;Opening socket: %s&quot;, server.neterr);\n              exit(1);                                                                                       \n         }                                                                                                  \n         anetNonBlock(NULL,server.sofd);\n  }            \n[/cpp]\n\n跳过一个长长的对db的初始化过程，来到这句代码。之前有提到，redis的时间事件几乎可以认为只是用来调用serverCron的，那这里就是创建一个事件事件，并加到timeEventHead 链表里面的。\n我能感觉到，作者当初这么设计，是认为自己会有很多类型的时间事件需要处理，所以用来一种通用的方式来，后来发现，只是需要serverCron定时处理罢了。其实实现定时，是有很多简单设计的。\n\n[cpp]\n if(aeCreateTimeEvent(server.el, 1, serverCron, NULL, NULL) == AE_ERR) {\n         redisPanic(&quot;Can\'t create the serverCron time event.&quot;);\n         exit(1);\n  }    \n[/cpp]\n\n接着是整个事件调度的最最核心的地方，也是反应器模式最灵魂的地方，将之前所有的套字节绑定到epoll/poll的套字节上面，并传入对应的响应处理函数。acceptTcpHandler ，就是server.ipfd这些套字节响应的时候，需要调用的处理函数，AE_READABLE表示该套字节是用来读的，将来触发的，是读操作的注册函数。有兴趣建议看一下aeCreateFileEvent,我看了epoll的部分，\n\n[cpp]\n    for (j = 0; j &lt; server.ipfd_count; j++) {\n                //为ipfd 添加事件处理，放在epoll的监听列表里面\n        if (aeCreateFileEvent(server.el, server.ipfd[j], AE_READABLE,\n            acceptTcpHandler,NULL) == AE_ERR)\n            {\n                redisPanic(\n                    &quot;Unrecoverable error creating server.ipfd file event.&quot;);\n            }\n    }\n\n[/cpp]\n\n下面是为本地的socket套字节注册到epoll/poll上的写法，功能类似，回调函数不同，这个事acceptUnixHandler。\n\n[cpp]\n if (server.sofd &gt; 0 &amp;&amp;\n                        aeCreateFileEvent(\n                                server.el,\n                                server.sofd,\n                                AE_READABLE,\n                                acceptUnixHandler,\n                                NULL\n                        ) == AE_ERR) redisPanic(&quot;Unrecoverable error creating server.sofd file event.&quot;);\n[/cpp]\n\n至此将所有的套字节初始化，绑定完毕，之后，如何调度处理呢？请看\n<h1 class=\"entry-title\">redis的事件调度器 epoll</h1>','redis源码分析之网络通信和事件调度篇','','inherit','open','open','','464-autosave-v1','','','2015-08-06 13:32:57','2015-08-06 13:32:57','',464,'http://unasm.com/2015/08/467/',0,'revision','',0),(468,1,'2015-08-06 12:37:55','2015-08-06 12:37:55','一切都要从main开始说起。\r\n\r\nmain里面调用了两个函数，initServer和<span class=\"s1\">a</span><span class=\"s2\">eMain,在initServer里面，redis创建并初始化了各种socket文件，该listen的listen,该add的add，而aeMain则根据server.el，事件调度器，进入while(1)循环，处理事务。</span>\r\n\r\ninitServer中，抛开对信号的处理，变量的初始化，单纯说网络通信和事件调度,要从initServer的第31行说起\r\n\r\n[cpp]\r\nserver.el = aeCreateEventLoop(server.maxclients+REDIS_EVENTLOOP_FDSET_INCR);  \r\n[/cpp]\r\n首先创建事件调度器,redis的事件，包括文本事件和时间事件，文本事件其实是各种socket套字节的响应监听，包括本地的socket通信，主从复制的通信，客户端的连接通信等等，时间事件主要是在两个地方，一个是redis.c里面，想要每1ms执行serverCron函数，另一个是redis-benchmark.c里面，每1ms执行showThroughput函数，就再也没有其他的定时事件了。下面就是时间调度器server.el的定义，时间事件是以单链表的形式，无序的保存在timeEventHead中的，events中保存的，则是全部的文本事件。\r\n[cpp]\r\ntypedef struct aeEventLoop {\r\n    int maxfd;   /* highest file descriptor currently registered */\r\n    // 目前已追踪的最大描述符\r\n    int setsize; /* max number of file descriptors tracked */\r\n    // 用于生成时间事件 id\r\n    long long timeEventNextId;\r\n    // 最后一次执行时间事件的时间\r\n    time_t lastTime;     /* Used to detect system clock skew */\r\n    // 已注册的文件事件,unix哲学: 一切都是文件\r\n        // acceptUnixHandler 处理文件类型的时间\r\n    aeFileEvent *events; /* Registered events */\r\n    // 已就绪的文件事件\r\n    aeFiredEvent *fired; /* Fired events */\r\n    // 时间事件,链表\r\n    aeTimeEvent *timeEventHead;\r\n    // 事件处理器的开关\r\n    int stop;\r\n    // 多路复用库的私有数据\r\n        // aeApiState 的 实例化数据\r\n    void *apidata; /* This is used for polling API specific data */\r\n\r\n    // 在处理事件前要执行的函数\r\n    aeBeforeSleepProc *beforesleep;\r\n\r\n} aeEventLoop;\r\n[/cpp]','redis 网络通信和事件调度','','inherit','open','open','','464-revision-v1','','','2015-08-06 12:37:55','2015-08-06 12:37:55','',464,'http://unasm.com/2015/08/468/',0,'revision','',0),(469,1,'2015-08-06 13:15:11','2015-08-06 13:15:11','一切都要从main开始说起。\r\n\r\nmain里面调用了两个函数，initServer和<span class=\"s1\">a</span><span class=\"s2\">eMain,在initServer里面，redis创建并初始化了各种socket文件，该listen的listen,该add的add，而aeMain则根据server.el，事件调度器，进入while(1)循环，处理事务。</span>\r\n\r\ninitServer中，抛开对信号的处理，变量的初始化，单纯说网络通信和事件调度,要从initServer的第31行说起\r\n\r\n[cpp]\r\nserver.el = aeCreateEventLoop(server.maxclients+REDIS_EVENTLOOP_FDSET_INCR);  \r\n[/cpp]\r\n\r\n首先创建事件调度器,redis的事件，包括文本事件和时间事件，文本事件其实是各种socket套字节的响应监听，包括本地的socket通信，主从复制的通信，客户端的连接通信等等，时间事件主要是在两个地方，一个是redis.c里面，想要每1ms执行serverCron函数，另一个是redis-benchmark.c里面，每1ms执行showThroughput函数，就再也没有其他的定时事件了。下面就是时间调度器server.el的定义，时间事件是以单链表的形式，无序的保存在timeEventHead中的，events中保存的，则是全部的文本事件。fired是在全部响应的文本事件列表，一个全部的，一个是已经响应的，需要accept的。\r\n\r\n[cpp]\r\ntypedef struct aeEventLoop {\r\n    int maxfd;   /* highest file descriptor currently registered */\r\n    // 目前已追踪的最大描述符\r\n    int setsize; /* max number of file descriptors tracked */\r\n    // 用于生成时间事件 id\r\n    long long timeEventNextId;\r\n    // 最后一次执行时间事件的时间\r\n    time_t lastTime;     /* Used to detect system clock skew */\r\n    // 已注册的文件事件,unix哲学: 一切都是文件\r\n        // acceptUnixHandler 处理文件类型的时间\r\n    aeFileEvent *events; /* Registered events */\r\n    // 已就绪的文件事件\r\n    aeFiredEvent *fired; /* Fired events */\r\n    // 时间事件,链表\r\n    aeTimeEvent *timeEventHead;\r\n    // 事件处理器的开关\r\n    int stop;\r\n    // 多路复用库的私有数据\r\n        // aeApiState 的 实例化数据\r\n    void *apidata; /* This is used for polling API specific data */\r\n\r\n    // 在处理事件前要执行的函数\r\n    aeBeforeSleepProc *beforesleep;\r\n\r\n} aeEventLoop;\r\n[/cpp]\r\n创建了全局唯一的server.el之后，开始创建网络接口，server.port 默认是6379,哨兵模式下是26379，如果启动时候有指定，就是启动时指定的数。server.ipfd是用来保存生成的套字节的，ipfd_count 是对应的数量,具体绑定的本地地址以及地址类型(ipv4,ipv6)是保存在server.bindaddr中，对应的数量是server.bindaddr_count,这些本地地址是启动的时候需要在参数中指定的，如果没有指定，这里就是没有，因为不同的套字节监听相同的端口，server.port，需要端口复用，所以地址必须不能相同,全部的都是端口都是非阻塞的哦，响应在aeMain中呢。\r\n[cpp]\r\n if (server.port != 0 &amp;&amp;                                                                                                                                                   \r\n          listenToPort(server.port,server.ipfd,&amp;server.ipfd_count) == REDIS_ERR)\r\n          exit(1);\r\n[/cpp]\r\nlistenToPort 函数直接就实现了从socket 到listen的全部流程,剩下的就是坐等响应，然后accept了。有兴趣可以自己追踪到listenToPort中看看如何创建一个socket。\r\n接着是创建一个本地的socket文件，redis进程和其他的进程通信的时候需要,当redis和其客户端在同一个服务器上的时候，是通过本地socket通信实现的。server.unixsocket是socket文件的路径，server.unixsocketperm是socket文件的权限，同样设置成非阻塞模式。\r\n[cpp]\r\n  if (server.unixsocket != NULL) {                                                                                                                                          \r\n          unlink(server.unixsocket); /* don\'t care if this fails */\r\n          server.sofd = anetUnixServer(server.neterr,server.unixsocket,\r\n              server.unixsocketperm, server.tcp_backlog);\r\n         if (server.sofd == ANET_ERR) {\r\n              redisLog(REDIS_WARNING, &quot;Opening socket: %s&quot;, server.neterr);\r\n              exit(1);                                                                                       \r\n         }                                                                                                  \r\n         anetNonBlock(NULL,server.sofd);\r\n  }            \r\n[/cpp]\r\n\r\n跳过一个长长的对db的初始化过程，来到这句代码。之前有提到，redis的时间事件几乎可以认为只是用来调用serverCron的，那这里就是创建一个事件事件，并加到timeEventHead 链表里面的。\r\n[cpp]\r\n if(aeCreateTimeEvent(server.el, 1, serverCron, NULL, NULL) == AE_ERR) {\r\n         redisPanic(&quot;Can\'t create the serverCron time event.&quot;);\r\n         exit(1);\r\n  }    \r\n[/cpp]','redis源码分析之网络通信和事件调度篇','','inherit','open','open','','464-revision-v1','','','2015-08-06 13:15:11','2015-08-06 13:15:11','',464,'http://unasm.com/2015/08/469/',0,'revision','',0),(470,1,'2015-08-06 13:31:53','2015-08-06 13:31:53','一切都要从main开始说起。\r\n\r\nmain里面调用了两个函数，initServer和<span class=\"s1\">a</span><span class=\"s2\">eMain,在initServer里面，redis创建并初始化了各种socket文件，该listen的listen,该add的add，而aeMain则根据server.el，事件调度器，进入while(1)循环，处理事务。</span>\r\n\r\ninitServer中，抛开对信号的处理，变量的初始化，单纯说网络通信和事件调度,要从initServer的第31行说起\r\n\r\n[cpp]\r\nserver.el = aeCreateEventLoop(server.maxclients+REDIS_EVENTLOOP_FDSET_INCR);  \r\n[/cpp]\r\n\r\n首先创建事件调度器,redis的事件，包括文本事件和时间事件，文本事件其实是各种socket套字节的响应监听，包括本地的socket通信，主从复制的通信，客户端的连接通信等等，时间事件主要是在两个地方，一个是redis.c里面，想要每1ms执行serverCron函数，另一个是redis-benchmark.c里面，每1ms执行showThroughput函数，就再也没有其他的定时事件了。下面就是时间调度器server.el的定义，时间事件是以单链表的形式，无序的保存在timeEventHead中的，events中保存的，则是全部的文本事件。fired是在全部响应的文本事件列表，一个全部的，一个是已经响应的，需要accept的。\r\n\r\n[cpp]\r\ntypedef struct aeEventLoop {\r\n    int maxfd;   /* highest file descriptor currently registered */\r\n    // 目前已追踪的最大描述符\r\n    int setsize; /* max number of file descriptors tracked */\r\n    // 用于生成时间事件 id\r\n    long long timeEventNextId;\r\n    // 最后一次执行时间事件的时间\r\n    time_t lastTime;     /* Used to detect system clock skew */\r\n    // 已注册的文件事件,unix哲学: 一切都是文件\r\n        // acceptUnixHandler 处理文件类型的时间\r\n    aeFileEvent *events; /* Registered events */\r\n    // 已就绪的文件事件\r\n    aeFiredEvent *fired; /* Fired events */\r\n    // 时间事件,链表\r\n    aeTimeEvent *timeEventHead;\r\n    // 事件处理器的开关\r\n    int stop;\r\n    // 多路复用库的私有数据\r\n        // aeApiState 的 实例化数据\r\n    void *apidata; /* This is used for polling API specific data */\r\n\r\n    // 在处理事件前要执行的函数\r\n    aeBeforeSleepProc *beforesleep;\r\n\r\n} aeEventLoop;\r\n[/cpp]\r\n创建了全局唯一的server.el之后，开始创建网络接口，server.port 默认是6379,哨兵模式下是26379，如果启动时候有指定，就是启动时指定的数。server.ipfd是用来保存生成的套字节的，ipfd_count 是对应的数量,具体绑定的本地地址以及地址类型(ipv4,ipv6)是保存在server.bindaddr中，对应的数量是server.bindaddr_count,这些本地地址是启动的时候需要在参数中指定的，如果没有指定，这里就是没有，因为不同的套字节监听相同的端口，server.port，需要端口复用，所以地址必须不能相同,全部的都是端口都是非阻塞的哦，响应在aeMain中呢。\r\n[cpp]\r\n if (server.port != 0 &amp;&amp;                                                                                                                                                   \r\n          listenToPort(server.port,server.ipfd,&amp;server.ipfd_count) == REDIS_ERR)\r\n          exit(1);\r\n[/cpp]\r\nlistenToPort 函数直接就实现了从socket 到listen的全部流程,剩下的就是坐等响应，然后accept了。有兴趣可以自己追踪到listenToPort中看看如何创建一个socket。\r\n接着是创建一个本地的socket文件，redis进程和其他的进程通信的时候需要,当redis和其客户端在同一个服务器上的时候，是通过本地socket通信实现的。server.unixsocket是socket文件的路径，server.unixsocketperm是socket文件的权限，同样设置成非阻塞模式。\r\n[cpp]\r\n  if (server.unixsocket != NULL) {                                                                                                                                          \r\n          unlink(server.unixsocket); /* don\'t care if this fails */\r\n          server.sofd = anetUnixServer(server.neterr,server.unixsocket,\r\n              server.unixsocketperm, server.tcp_backlog);\r\n         if (server.sofd == ANET_ERR) {\r\n              redisLog(REDIS_WARNING, &quot;Opening socket: %s&quot;, server.neterr);\r\n              exit(1);                                                                                       \r\n         }                                                                                                  \r\n         anetNonBlock(NULL,server.sofd);\r\n  }            \r\n[/cpp]\r\n\r\n跳过一个长长的对db的初始化过程，来到这句代码。之前有提到，redis的时间事件几乎可以认为只是用来调用serverCron的，那这里就是创建一个事件事件，并加到timeEventHead 链表里面的。\r\n我能感觉到，作者当初这么设计，是认为自己会有很多类型的时间事件需要处理，所以用来一种通用的方式来，后来发现，只是需要serverCron定时处理罢了。其实实现定时，是有很多简单设计的。\r\n[cpp]\r\n if(aeCreateTimeEvent(server.el, 1, serverCron, NULL, NULL) == AE_ERR) {\r\n         redisPanic(&quot;Can\'t create the serverCron time event.&quot;);\r\n         exit(1);\r\n  }    \r\n[/cpp]\r\n\r\n接着是整个事件调度的最最核心的地方，也是反应器模式最灵魂的地方，将之前所有的套字节绑定到epoll/poll的套字节上面，并传入对应的响应处理函数。acceptTcpHandler ，就是server.ipfd这些套字节响应的时候，需要调用的处理函数，AE_READABLE表示该套字节是用来读的，将来触发的，是读操作的注册函数。有兴趣建议看一下aeCreateFileEvent,我看了epoll的部分，\r\n[cpp]\r\n    for (j = 0; j &lt; server.ipfd_count; j++) {\r\n                //为ipfd 添加事件处理，放在epoll的监听列表里面\r\n        if (aeCreateFileEvent(server.el, server.ipfd[j], AE_READABLE,\r\n            acceptTcpHandler,NULL) == AE_ERR)\r\n            {\r\n                redisPanic(\r\n                    &quot;Unrecoverable error creating server.ipfd file event.&quot;);\r\n            }\r\n    }\r\n\r\n[/cpp]\r\n下面是为本地的socket套字节注册到epoll/poll上的写法，功能类似，回调函数不同，这个事acceptUnixHandler。\r\n[cpp]\r\n if (server.sofd &gt; 0 &amp;&amp;\r\n                        aeCreateFileEvent(\r\n                                server.el,\r\n                                server.sofd,\r\n                                AE_READABLE,\r\n                                acceptUnixHandler,\r\n                                NULL\r\n                        ) == AE_ERR) redisPanic(&quot;Unrecoverable error creating server.sofd file event.&quot;);\r\n[/cpp]\r\n至此将所有的套字节初始化，绑定完毕，之后，如何调度处理呢？请看','redis源码分析之网络通信和事件调度篇','','inherit','open','open','','464-revision-v1','','','2015-08-06 13:31:53','2015-08-06 13:31:53','',464,'http://unasm.com/2015/08/470/',0,'revision','',0),(471,1,'2015-08-06 13:33:33','2015-08-06 13:33:33','一切都要从main开始说起。\r\n\r\nmain里面调用了两个函数，initServer和<span class=\"s1\">a</span><span class=\"s2\">eMain,在initServer里面，redis创建并初始化了各种socket文件，该listen的listen,该add的add，而aeMain则根据server.el，事件调度器，进入while(1)循环，处理事务。</span>\r\n\r\ninitServer中，抛开对信号的处理，变量的初始化，单纯说网络通信和事件调度,要从initServer的第31行说起\r\n\r\n[cpp]\r\nserver.el = aeCreateEventLoop(server.maxclients+REDIS_EVENTLOOP_FDSET_INCR);  \r\n[/cpp]\r\n\r\n首先创建事件调度器,redis的事件，包括文本事件和时间事件，文本事件其实是各种socket套字节的响应监听，包括本地的socket通信，主从复制的通信，客户端的连接通信等等，时间事件主要是在两个地方，一个是redis.c里面，想要每1ms执行serverCron函数，另一个是redis-benchmark.c里面，每1ms执行showThroughput函数，就再也没有其他的定时事件了。下面就是时间调度器server.el的定义，时间事件是以单链表的形式，无序的保存在timeEventHead中的，events中保存的，则是全部的文本事件。fired是在全部响应的文本事件列表，一个全部的，一个是已经响应的，需要accept的。\r\n\r\n[cpp]\r\ntypedef struct aeEventLoop {\r\n    int maxfd;   /* highest file descriptor currently registered */\r\n    // 目前已追踪的最大描述符\r\n    int setsize; /* max number of file descriptors tracked */\r\n    // 用于生成时间事件 id\r\n    long long timeEventNextId;\r\n    // 最后一次执行时间事件的时间\r\n    time_t lastTime;     /* Used to detect system clock skew */\r\n    // 已注册的文件事件,unix哲学: 一切都是文件\r\n        // acceptUnixHandler 处理文件类型的时间\r\n    aeFileEvent *events; /* Registered events */\r\n    // 已就绪的文件事件\r\n    aeFiredEvent *fired; /* Fired events */\r\n    // 时间事件,链表\r\n    aeTimeEvent *timeEventHead;\r\n    // 事件处理器的开关\r\n    int stop;\r\n    // 多路复用库的私有数据\r\n        // aeApiState 的 实例化数据\r\n    void *apidata; /* This is used for polling API specific data */\r\n\r\n    // 在处理事件前要执行的函数\r\n    aeBeforeSleepProc *beforesleep;\r\n\r\n} aeEventLoop;\r\n[/cpp]\r\n\r\n创建了全局唯一的server.el之后，开始创建网络接口，server.port 默认是6379,哨兵模式下是26379，如果启动时候有指定，就是启动时指定的数。server.ipfd是用来保存生成的套字节的，ipfd_count 是对应的数量,具体绑定的本地地址以及地址类型(ipv4,ipv6)是保存在server.bindaddr中，对应的数量是server.bindaddr_count,这些本地地址是启动的时候需要在参数中指定的，如果没有指定，这里就是没有，因为不同的套字节监听相同的端口，server.port，需要端口复用，所以地址必须不能相同,全部的都是端口都是非阻塞的哦，响应在aeMain中呢。\r\n\r\n[cpp]\r\n if (server.port != 0 &amp;&amp;                                                                                                                                                   \r\n          listenToPort(server.port,server.ipfd,&amp;server.ipfd_count) == REDIS_ERR)\r\n          exit(1);\r\n[/cpp]\r\n\r\nlistenToPort 函数直接就实现了从socket 到listen的全部流程,剩下的就是坐等响应，然后accept了。有兴趣可以自己追踪到listenToPort中看看如何创建一个socket。\r\n接着是创建一个本地的socket文件，redis进程和其他的进程通信的时候需要,当redis和其客户端在同一个服务器上的时候，是通过本地socket通信实现的。server.unixsocket是socket文件的路径，server.unixsocketperm是socket文件的权限，同样设置成非阻塞模式。\r\n\r\n[cpp]\r\n  if (server.unixsocket != NULL) {                                                                                                                                          \r\n          unlink(server.unixsocket); /* don\'t care if this fails */\r\n          server.sofd = anetUnixServer(server.neterr,server.unixsocket,\r\n              server.unixsocketperm, server.tcp_backlog);\r\n         if (server.sofd == ANET_ERR) {\r\n              redisLog(REDIS_WARNING, &quot;Opening socket: %s&quot;, server.neterr);\r\n              exit(1);                                                                                       \r\n         }                                                                                                  \r\n         anetNonBlock(NULL,server.sofd);\r\n  }            \r\n[/cpp]\r\n\r\n跳过一个长长的对db的初始化过程，来到这句代码。之前有提到，redis的时间事件几乎可以认为只是用来调用serverCron的，那这里就是创建一个事件事件，并加到timeEventHead 链表里面的。\r\n我能感觉到，作者当初这么设计，是认为自己会有很多类型的时间事件需要处理，所以用来一种通用的方式来，后来发现，只是需要serverCron定时处理罢了。其实实现定时，是有很多简单设计的。\r\n\r\n[cpp]\r\n if(aeCreateTimeEvent(server.el, 1, serverCron, NULL, NULL) == AE_ERR) {\r\n         redisPanic(&quot;Can\'t create the serverCron time event.&quot;);\r\n         exit(1);\r\n  }    \r\n[/cpp]\r\n\r\n接着是整个事件调度的最最核心的地方，也是反应器模式最灵魂的地方，将之前所有的套字节绑定到epoll/poll的套字节上面，并传入对应的响应处理函数。acceptTcpHandler ，就是server.ipfd这些套字节响应的时候，需要调用的处理函数，AE_READABLE表示该套字节是用来读的，将来触发的，是读操作的注册函数。有兴趣建议看一下aeCreateFileEvent,我看了epoll的部分，\r\n\r\n[cpp]\r\n    for (j = 0; j &lt; server.ipfd_count; j++) {\r\n                //为ipfd 添加事件处理，放在epoll的监听列表里面\r\n        if (aeCreateFileEvent(server.el, server.ipfd[j], AE_READABLE,\r\n            acceptTcpHandler,NULL) == AE_ERR)\r\n            {\r\n                redisPanic(\r\n                    &quot;Unrecoverable error creating server.ipfd file event.&quot;);\r\n            }\r\n    }\r\n\r\n[/cpp]\r\n\r\n下面是为本地的socket套字节注册到epoll/poll上的写法，功能类似，回调函数不同，这个事acceptUnixHandler。\r\n\r\n[cpp]\r\n if (server.sofd &gt; 0 &amp;&amp;\r\n                        aeCreateFileEvent(\r\n                                server.el,\r\n                                server.sofd,\r\n                                AE_READABLE,\r\n                                acceptUnixHandler,\r\n                                NULL\r\n                        ) == AE_ERR) redisPanic(&quot;Unrecoverable error creating server.sofd file event.&quot;);\r\n[/cpp]\r\n\r\n至此将所有的套字节初始化，绑定完毕，之后，如何调度处理呢？请看\r\n<a title=\"redis的事件调度器 epoll\" href=\"http://unasm.com/2015/07/354/\">redis的事件调度器 epoll</a>','redis源码分析之网络通信和事件调度篇','','inherit','open','open','','464-revision-v1','','','2015-08-06 13:33:33','2015-08-06 13:33:33','',464,'http://unasm.com/2015/08/471/',0,'revision','',0),(472,1,'2015-08-06 13:34:21','2015-08-06 13:34:21','一切都要从main开始说起。\r\n\r\nmain里面调用了两个函数，initServer和aeMain,在initServer里面，redis创建并初始化了各种socket文件，该listen的listen,该add的add，而aeMain则根据server.el，事件调度器，进入while(1)循环，处理事务。</span>\r\n\r\ninitServer中，抛开对信号的处理，变量的初始化，单纯说网络通信和事件调度,要从initServer的第31行说起\r\n\r\n[cpp]\r\nserver.el = aeCreateEventLoop(server.maxclients+REDIS_EVENTLOOP_FDSET_INCR);  \r\n[/cpp]\r\n\r\n首先创建事件调度器,redis的事件，包括文本事件和时间事件，文本事件其实是各种socket套字节的响应监听，包括本地的socket通信，主从复制的通信，客户端的连接通信等等，时间事件主要是在两个地方，一个是redis.c里面，想要每1ms执行serverCron函数，另一个是redis-benchmark.c里面，每1ms执行showThroughput函数，就再也没有其他的定时事件了。下面就是时间调度器server.el的定义，时间事件是以单链表的形式，无序的保存在timeEventHead中的，events中保存的，则是全部的文本事件。fired是在全部响应的文本事件列表，一个全部的，一个是已经响应的，需要accept的。\r\n\r\n[cpp]\r\ntypedef struct aeEventLoop {\r\n    int maxfd;   /* highest file descriptor currently registered */\r\n    // 目前已追踪的最大描述符\r\n    int setsize; /* max number of file descriptors tracked */\r\n    // 用于生成时间事件 id\r\n    long long timeEventNextId;\r\n    // 最后一次执行时间事件的时间\r\n    time_t lastTime;     /* Used to detect system clock skew */\r\n    // 已注册的文件事件,unix哲学: 一切都是文件\r\n        // acceptUnixHandler 处理文件类型的时间\r\n    aeFileEvent *events; /* Registered events */\r\n    // 已就绪的文件事件\r\n    aeFiredEvent *fired; /* Fired events */\r\n    // 时间事件,链表\r\n    aeTimeEvent *timeEventHead;\r\n    // 事件处理器的开关\r\n    int stop;\r\n    // 多路复用库的私有数据\r\n        // aeApiState 的 实例化数据\r\n    void *apidata; /* This is used for polling API specific data */\r\n\r\n    // 在处理事件前要执行的函数\r\n    aeBeforeSleepProc *beforesleep;\r\n\r\n} aeEventLoop;\r\n[/cpp]\r\n\r\n创建了全局唯一的server.el之后，开始创建网络接口，server.port 默认是6379,哨兵模式下是26379，如果启动时候有指定，就是启动时指定的数。server.ipfd是用来保存生成的套字节的，ipfd_count 是对应的数量,具体绑定的本地地址以及地址类型(ipv4,ipv6)是保存在server.bindaddr中，对应的数量是server.bindaddr_count,这些本地地址是启动的时候需要在参数中指定的，如果没有指定，这里就是没有，因为不同的套字节监听相同的端口，server.port，需要端口复用，所以地址必须不能相同,全部的都是端口都是非阻塞的哦，响应在aeMain中呢。\r\n\r\n[cpp]\r\n if (server.port != 0 &amp;&amp;                                                                                                                                                   \r\n          listenToPort(server.port,server.ipfd,&amp;server.ipfd_count) == REDIS_ERR)\r\n          exit(1);\r\n[/cpp]\r\n\r\nlistenToPort 函数直接就实现了从socket 到listen的全部流程,剩下的就是坐等响应，然后accept了。有兴趣可以自己追踪到listenToPort中看看如何创建一个socket。\r\n接着是创建一个本地的socket文件，redis进程和其他的进程通信的时候需要,当redis和其客户端在同一个服务器上的时候，是通过本地socket通信实现的。server.unixsocket是socket文件的路径，server.unixsocketperm是socket文件的权限，同样设置成非阻塞模式。\r\n\r\n[cpp]\r\n  if (server.unixsocket != NULL) {                                                                                                                                          \r\n          unlink(server.unixsocket); /* don\'t care if this fails */\r\n          server.sofd = anetUnixServer(server.neterr,server.unixsocket,\r\n              server.unixsocketperm, server.tcp_backlog);\r\n         if (server.sofd == ANET_ERR) {\r\n              redisLog(REDIS_WARNING, &quot;Opening socket: %s&quot;, server.neterr);\r\n              exit(1);                                                                                       \r\n         }                                                                                                  \r\n         anetNonBlock(NULL,server.sofd);\r\n  }            \r\n[/cpp]\r\n\r\n跳过一个长长的对db的初始化过程，来到这句代码。之前有提到，redis的时间事件几乎可以认为只是用来调用serverCron的，那这里就是创建一个事件事件，并加到timeEventHead 链表里面的。\r\n我能感觉到，作者当初这么设计，是认为自己会有很多类型的时间事件需要处理，所以用来一种通用的方式来，后来发现，只是需要serverCron定时处理罢了。其实实现定时，是有很多简单设计的。\r\n\r\n[cpp]\r\n if(aeCreateTimeEvent(server.el, 1, serverCron, NULL, NULL) == AE_ERR) {\r\n         redisPanic(&quot;Can\'t create the serverCron time event.&quot;);\r\n         exit(1);\r\n  }    \r\n[/cpp]\r\n\r\n接着是整个事件调度的最最核心的地方，也是反应器模式最灵魂的地方，将之前所有的套字节绑定到epoll/poll的套字节上面，并传入对应的响应处理函数。acceptTcpHandler ，就是server.ipfd这些套字节响应的时候，需要调用的处理函数，AE_READABLE表示该套字节是用来读的，将来触发的，是读操作的注册函数。有兴趣建议看一下aeCreateFileEvent,我看了epoll的部分，\r\n\r\n[cpp]\r\n    for (j = 0; j &lt; server.ipfd_count; j++) {\r\n                //为ipfd 添加事件处理，放在epoll的监听列表里面\r\n        if (aeCreateFileEvent(server.el, server.ipfd[j], AE_READABLE,\r\n            acceptTcpHandler,NULL) == AE_ERR)\r\n            {\r\n                redisPanic(\r\n                    &quot;Unrecoverable error creating server.ipfd file event.&quot;);\r\n            }\r\n    }\r\n\r\n[/cpp]\r\n\r\n下面是为本地的socket套字节注册到epoll/poll上的写法，功能类似，回调函数不同，这个事acceptUnixHandler。\r\n\r\n[cpp]\r\n if (server.sofd &gt; 0 &amp;&amp;\r\n                        aeCreateFileEvent(\r\n                                server.el,\r\n                                server.sofd,\r\n                                AE_READABLE,\r\n                                acceptUnixHandler,\r\n                                NULL\r\n                        ) == AE_ERR) redisPanic(&quot;Unrecoverable error creating server.sofd file event.&quot;);\r\n[/cpp]\r\n\r\n至此将所有的套字节初始化，绑定完毕，之后，如何调度处理呢？请看\r\n<a title=\"redis的事件调度器 epoll\" href=\"http://unasm.com/2015/07/354/\">redis的事件调度器 epoll</a>','redis源码分析之网络通信和事件调度篇','','inherit','open','open','','464-revision-v1','','','2015-08-06 13:34:21','2015-08-06 13:34:21','',464,'http://unasm.com/2015/08/472/',0,'revision','',0),(483,1,'2015-08-07 03:58:38','2015-08-07 03:58:38','一切都要从main开始说起。\r\n\r\nmain里面调用了两个函数，initServer和aeMain,在initServer里面，redis创建并初始化了各种socket文件，该listen的listen,该add的add，而aeMain则根据server.el，事件调度器，进入while(1)循环，处理事务。\r\n\r\ninitServer中，抛开对信号的处理，变量的初始化，单纯说网络通信和事件调度,要从initServer的第31行说起\r\n\r\n[cpp]\r\nserver.el = aeCreateEventLoop(server.maxclients+REDIS_EVENTLOOP_FDSET_INCR);\r\n[/cpp]\r\n\r\n首先创建事件调度器,redis的事件，包括文本事件和时间事件，文本事件其实是各种socket套字节的响应监听，包括本地的socket通信，主从复制的通信，客户端的连接通信等等，时间事件的添加是在两个地方，一个是redis.c里面，每1ms执行serverCron函数，另一个是redis-benchmark.c里面，每1ms执行showThroughput函数。\r\n\r\n下面就是时间调度器server.el的定义，时间事件是以单链表的形式，无序的保存在timeEventHead中的，events中保存的，则是全部的文本事件。fired是在全部响应的文本事件列表，一个全部的，一个是已经响应的，需要accept的。\r\n\r\n[cpp]\r\ntypedef struct aeEventLoop {\r\n    int maxfd;   /* highest file descriptor currently registered */\r\n    // 目前已追踪的最大描述符\r\n    int setsize; /* max number of file descriptors tracked */\r\n    // 用于生成时间事件 id\r\n    long long timeEventNextId;\r\n    // 最后一次执行时间事件的时间\r\n    time_t lastTime;     /* Used to detect system clock skew */\r\n    // 已注册的文件事件,unix哲学: 一切都是文件\r\n    // acceptUnixHandler 处理文件类型的时间\r\n    aeFileEvent *events; /* Registered events */\r\n    // 已就绪的文件事件\r\n    aeFiredEvent *fired; /* Fired events */\r\n    // 时间事件,链表\r\n    aeTimeEvent *timeEventHead;\r\n    // 事件处理器的开关\r\n    int stop;\r\n    // 多路复用库的私有数据\r\n        // aeApiState 的 实例化数据\r\n    void *apidata; /* This is used for polling API specific data */\r\n\r\n    // 在处理事件前要执行的函数\r\n    aeBeforeSleepProc *beforesleep;\r\n\r\n} aeEventLoop;\r\n[/cpp]\r\n\r\n创建了全局唯一的server.el之后，开始创建网络接口，server.port 默认是6379,哨兵模式下是26379，如果启动时候有指定，就是启动时指定的数。server.ipfd是用来保存生成的套字节的，ipfd_count 是对应的数量,具体绑定的本地地址以及地址类型(ipv4,ipv6)是保存在server.bindaddr中，对应的数量是server.bindaddr_count,这些本地地址是启动的时候需要在参数中指定的，如果没有指定，这里就是没有，因为不同的套字节监听相同的端口，server.port，需要端口复用，所以地址必须不能相同,全部的都是端口都是非阻塞的哦，响应在aeMain中呢。\r\n\r\n[cpp]\r\n if (server.port != 0 &amp;&amp;\r\n          listenToPort(server.port,server.ipfd,&amp;server.ipfd_count) == REDIS_ERR)\r\n          exit(1);\r\n[/cpp]\r\n\r\nlistenToPort 函数直接就实现了从socket 到listen的全部流程,剩下的就是坐等响应，然后accept了。有兴趣可以自己追踪到listenToPort中看看如何创建一个socket。\r\n\r\n接着是创建一个本地的socket文件，redis进程和其他的进程通信的时候需要,当redis和其客户端在同一个服务器上的时候，是通过本地socket通信实现的。server.unixsocket是socket文件的路径，server.unixsocketperm是socket文件的权限，同样设置成非阻塞模式。\r\n\r\n[cpp]\r\n  if (server.unixsocket != NULL) {\r\n          unlink(server.unixsocket); /* don\'t care if this fails */\r\n          server.sofd = anetUnixServer(server.neterr,server.unixsocket,\r\n              server.unixsocketperm, server.tcp_backlog);\r\n         if (server.sofd == ANET_ERR) {\r\n              redisLog(REDIS_WARNING, &quot;Opening socket: %s&quot;, server.neterr);\r\n              exit(1);\r\n         }\r\n         anetNonBlock(NULL,server.sofd);\r\n  }\r\n[/cpp]\r\n\r\n跳过一个长长的对db的初始化过程，来到这句代码。之前有提到，redis的时间事件几乎可以认为只是用来调用serverCron的，那这里就是创建一个事件事件，并加到timeEventHead 链表里面的。\r\n我能感觉到，作者当初这么设计，是认为自己会有很多类型的时间事件需要处理，所以用来一种通用的方式来，后来发现，只是需要serverCron定时处理罢了。其实实现定时，是有很多简单设计的。\r\n\r\n[cpp]\r\n if(aeCreateTimeEvent(server.el, 1, serverCron, NULL, NULL) == AE_ERR) {\r\n         redisPanic(&quot;Can\'t create the serverCron time event.&quot;);\r\n         exit(1);\r\n  }\r\n[/cpp]\r\n\r\n接着是整个事件调度的最最核心的地方，也是反应器模式最灵魂的地方，将之前所有的套字节绑定到epoll/poll的套字节上面，并传入对应的响应处理函数。acceptTcpHandler ，就是server.ipfd这些套字节响应的时候，需要调用的处理函数，AE_READABLE表示该套字节是用来读的，将来触发的，是读操作的注册函数。有兴趣建议看一下aeCreateFileEvent,我看了epoll的部分，\r\n\r\n[cpp]\r\n    for (j = 0; j &lt; server.ipfd_count; j++) {\r\n                //为ipfd 添加事件处理，放在epoll的监听列表里面\r\n        if (aeCreateFileEvent(server.el, server.ipfd[j], AE_READABLE,\r\n            acceptTcpHandler,NULL) == AE_ERR)\r\n            {\r\n                redisPanic(\r\n                    &quot;Unrecoverable error creating server.ipfd file event.&quot;);\r\n            }\r\n    }\r\n\r\n[/cpp]\r\n\r\n下面是为本地的socket套字节注册到epoll/poll上的写法，功能类似，回调函数不同，这个事acceptUnixHandler。\r\n\r\n[cpp]\r\n if (server.sofd &gt; 0 &amp;&amp;\r\n                        aeCreateFileEvent(\r\n                                server.el,\r\n                                server.sofd,\r\n                                AE_READABLE,\r\n                                acceptUnixHandler,\r\n                                NULL\r\n                        ) == AE_ERR) redisPanic(&quot;Unrecoverable error creating server.sofd file event.&quot;);\r\n[/cpp]\r\n\r\n至此将所有的套字节初始化，绑定完毕，之后，如何调度处理呢？请看 <a title=\"redis的事件调度器 epoll\" href=\"http://unasm.com/2015/07/354/\">redis的事件调度器 epoll</a>\r\n恩，该文章还有待再次润色','redis源码分析之网络通信和事件调度篇','','inherit','open','open','','464-revision-v1','','','2015-08-07 03:58:38','2015-08-07 03:58:38','',464,'http://unasm.com/2015/08/483/',0,'revision','',0),(473,1,'2015-08-06 13:35:17','2015-08-06 13:35:17','一切都要从main开始说起。\r\n\r\nmain里面调用了两个函数，initServer和aeMain,在initServer里面，redis创建并初始化了各种socket文件，该listen的listen,该add的add，而aeMain则根据server.el，事件调度器，进入while(1)循环，处理事务。</span>\r\n\r\ninitServer中，抛开对信号的处理，变量的初始化，单纯说网络通信和事件调度,要从initServer的第31行说起\r\n\r\n[cpp]\r\nserver.el = aeCreateEventLoop(server.maxclients+REDIS_EVENTLOOP_FDSET_INCR);  \r\n[/cpp]\r\n\r\n首先创建事件调度器,redis的事件，包括文本事件和时间事件，文本事件其实是各种socket套字节的响应监听，包括本地的socket通信，主从复制的通信，客户端的连接通信等等，时间事件主要是在两个地方，一个是redis.c里面，想要每1ms执行serverCron函数，另一个是redis-benchmark.c里面，每1ms执行showThroughput函数，就再也没有其他的定时事件了。下面就是时间调度器server.el的定义，时间事件是以单链表的形式，无序的保存在timeEventHead中的，events中保存的，则是全部的文本事件。fired是在全部响应的文本事件列表，一个全部的，一个是已经响应的，需要accept的。\r\n\r\n[cpp]\r\ntypedef struct aeEventLoop {\r\n    int maxfd;   /* highest file descriptor currently registered */\r\n    // 目前已追踪的最大描述符\r\n    int setsize; /* max number of file descriptors tracked */\r\n    // 用于生成时间事件 id\r\n    long long timeEventNextId;\r\n    // 最后一次执行时间事件的时间\r\n    time_t lastTime;     /* Used to detect system clock skew */\r\n    // 已注册的文件事件,unix哲学: 一切都是文件\r\n        // acceptUnixHandler 处理文件类型的时间\r\n    aeFileEvent *events; /* Registered events */\r\n    // 已就绪的文件事件\r\n    aeFiredEvent *fired; /* Fired events */\r\n    // 时间事件,链表\r\n    aeTimeEvent *timeEventHead;\r\n    // 事件处理器的开关\r\n    int stop;\r\n    // 多路复用库的私有数据\r\n        // aeApiState 的 实例化数据\r\n    void *apidata; /* This is used for polling API specific data */\r\n\r\n    // 在处理事件前要执行的函数\r\n    aeBeforeSleepProc *beforesleep;\r\n\r\n} aeEventLoop;\r\n[/cpp]\r\n\r\n创建了全局唯一的server.el之后，开始创建网络接口，server.port 默认是6379,哨兵模式下是26379，如果启动时候有指定，就是启动时指定的数。server.ipfd是用来保存生成的套字节的，ipfd_count 是对应的数量,具体绑定的本地地址以及地址类型(ipv4,ipv6)是保存在server.bindaddr中，对应的数量是server.bindaddr_count,这些本地地址是启动的时候需要在参数中指定的，如果没有指定，这里就是没有，因为不同的套字节监听相同的端口，server.port，需要端口复用，所以地址必须不能相同,全部的都是端口都是非阻塞的哦，响应在aeMain中呢。\r\n\r\n[cpp]\r\n if (server.port != 0 &amp;&amp;                                                                                                                                                   \r\n          listenToPort(server.port,server.ipfd,&amp;server.ipfd_count) == REDIS_ERR)\r\n          exit(1);\r\n[/cpp]\r\n\r\nlistenToPort 函数直接就实现了从socket 到listen的全部流程,剩下的就是坐等响应，然后accept了。有兴趣可以自己追踪到listenToPort中看看如何创建一个socket。\r\n接着是创建一个本地的socket文件，redis进程和其他的进程通信的时候需要,当redis和其客户端在同一个服务器上的时候，是通过本地socket通信实现的。server.unixsocket是socket文件的路径，server.unixsocketperm是socket文件的权限，同样设置成非阻塞模式。\r\n\r\n[cpp]\r\n  if (server.unixsocket != NULL) {                                                                                                                                          \r\n          unlink(server.unixsocket); /* don\'t care if this fails */\r\n          server.sofd = anetUnixServer(server.neterr,server.unixsocket,\r\n              server.unixsocketperm, server.tcp_backlog);\r\n         if (server.sofd == ANET_ERR) {\r\n              redisLog(REDIS_WARNING, &quot;Opening socket: %s&quot;, server.neterr);\r\n              exit(1);                                                                                       \r\n         }                                                                                                  \r\n         anetNonBlock(NULL,server.sofd);\r\n  }            \r\n[/cpp]\r\n\r\n跳过一个长长的对db的初始化过程，来到这句代码。之前有提到，redis的时间事件几乎可以认为只是用来调用serverCron的，那这里就是创建一个事件事件，并加到timeEventHead 链表里面的。\r\n我能感觉到，作者当初这么设计，是认为自己会有很多类型的时间事件需要处理，所以用来一种通用的方式来，后来发现，只是需要serverCron定时处理罢了。其实实现定时，是有很多简单设计的。\r\n\r\n[cpp]\r\n if(aeCreateTimeEvent(server.el, 1, serverCron, NULL, NULL) == AE_ERR) {\r\n         redisPanic(&quot;Can\'t create the serverCron time event.&quot;);\r\n         exit(1);\r\n  }    \r\n[/cpp]\r\n\r\n接着是整个事件调度的最最核心的地方，也是反应器模式最灵魂的地方，将之前所有的套字节绑定到epoll/poll的套字节上面，并传入对应的响应处理函数。acceptTcpHandler ，就是server.ipfd这些套字节响应的时候，需要调用的处理函数，AE_READABLE表示该套字节是用来读的，将来触发的，是读操作的注册函数。有兴趣建议看一下aeCreateFileEvent,我看了epoll的部分，\r\n\r\n[cpp]\r\n    for (j = 0; j &lt; server.ipfd_count; j++) {\r\n                //为ipfd 添加事件处理，放在epoll的监听列表里面\r\n        if (aeCreateFileEvent(server.el, server.ipfd[j], AE_READABLE,\r\n            acceptTcpHandler,NULL) == AE_ERR)\r\n            {\r\n                redisPanic(\r\n                    &quot;Unrecoverable error creating server.ipfd file event.&quot;);\r\n            }\r\n    }\r\n\r\n[/cpp]\r\n\r\n下面是为本地的socket套字节注册到epoll/poll上的写法，功能类似，回调函数不同，这个事acceptUnixHandler。\r\n\r\n[cpp]\r\n if (server.sofd &gt; 0 &amp;&amp;\r\n                        aeCreateFileEvent(\r\n                                server.el,\r\n                                server.sofd,\r\n                                AE_READABLE,\r\n                                acceptUnixHandler,\r\n                                NULL\r\n                        ) == AE_ERR) redisPanic(&quot;Unrecoverable error creating server.sofd file event.&quot;);\r\n[/cpp]\r\n\r\n至此将所有的套字节初始化，绑定完毕，之后，如何调度处理呢？请看\r\n<a title=\"redis的事件调度器 epoll\" href=\"http://unasm.com/2015/07/354/\">redis的事件调度器 epoll</a>\r\n恩，该文章还有待再次润色','redis源码分析之网络通信和事件调度篇','','inherit','open','open','','464-revision-v1','','','2015-08-06 13:35:17','2015-08-06 13:35:17','',464,'http://unasm.com/2015/08/473/',0,'revision','',0),(474,1,'2015-08-06 13:38:17','2015-08-06 13:38:17','一切都要从main开始说起。\r\n\r\nmain里面调用了两个函数，initServer和aeMain,在initServer里面，redis创建并初始化了各种socket文件，该listen的listen,该add的add，而aeMain则根据server.el，事件调度器，进入while(1)循环，处理事务。\r\n\r\ninitServer中，抛开对信号的处理，变量的初始化，单纯说网络通信和事件调度,要从initServer的第31行说起\r\n\r\n[cpp]\r\nserver.el = aeCreateEventLoop(server.maxclients+REDIS_EVENTLOOP_FDSET_INCR);  \r\n[/cpp]\r\n\r\n首先创建事件调度器,redis的事件，包括文本事件和时间事件，文本事件其实是各种socket套字节的响应监听，包括本地的socket通信，主从复制的通信，客户端的连接通信等等，时间事件主要是在两个地方，一个是redis.c里面，想要每1ms执行serverCron函数，另一个是redis-benchmark.c里面，每1ms执行showThroughput函数，就再也没有其他的定时事件了。下面就是时间调度器server.el的定义，时间事件是以单链表的形式，无序的保存在timeEventHead中的，events中保存的，则是全部的文本事件。fired是在全部响应的文本事件列表，一个全部的，一个是已经响应的，需要accept的。\r\n\r\n[cpp]\r\ntypedef struct aeEventLoop {\r\n    int maxfd;   /* highest file descriptor currently registered */\r\n    // 目前已追踪的最大描述符\r\n    int setsize; /* max number of file descriptors tracked */\r\n    // 用于生成时间事件 id\r\n    long long timeEventNextId;\r\n    // 最后一次执行时间事件的时间\r\n    time_t lastTime;     /* Used to detect system clock skew */\r\n    // 已注册的文件事件,unix哲学: 一切都是文件\r\n        // acceptUnixHandler 处理文件类型的时间\r\n    aeFileEvent *events; /* Registered events */\r\n    // 已就绪的文件事件\r\n    aeFiredEvent *fired; /* Fired events */\r\n    // 时间事件,链表\r\n    aeTimeEvent *timeEventHead;\r\n    // 事件处理器的开关\r\n    int stop;\r\n    // 多路复用库的私有数据\r\n        // aeApiState 的 实例化数据\r\n    void *apidata; /* This is used for polling API specific data */\r\n\r\n    // 在处理事件前要执行的函数\r\n    aeBeforeSleepProc *beforesleep;\r\n\r\n} aeEventLoop;\r\n[/cpp]\r\n\r\n创建了全局唯一的server.el之后，开始创建网络接口，server.port 默认是6379,哨兵模式下是26379，如果启动时候有指定，就是启动时指定的数。server.ipfd是用来保存生成的套字节的，ipfd_count 是对应的数量,具体绑定的本地地址以及地址类型(ipv4,ipv6)是保存在server.bindaddr中，对应的数量是server.bindaddr_count,这些本地地址是启动的时候需要在参数中指定的，如果没有指定，这里就是没有，因为不同的套字节监听相同的端口，server.port，需要端口复用，所以地址必须不能相同,全部的都是端口都是非阻塞的哦，响应在aeMain中呢。\r\n\r\n[cpp]\r\n if (server.port != 0 &amp;&amp;                                                                                                                                                   \r\n          listenToPort(server.port,server.ipfd,&amp;server.ipfd_count) == REDIS_ERR)\r\n          exit(1);\r\n[/cpp]\r\n\r\nlistenToPort 函数直接就实现了从socket 到listen的全部流程,剩下的就是坐等响应，然后accept了。有兴趣可以自己追踪到listenToPort中看看如何创建一个socket。\r\n\r\n接着是创建一个本地的socket文件，redis进程和其他的进程通信的时候需要,当redis和其客户端在同一个服务器上的时候，是通过本地socket通信实现的。server.unixsocket是socket文件的路径，server.unixsocketperm是socket文件的权限，同样设置成非阻塞模式。\r\n\r\n[cpp]\r\n  if (server.unixsocket != NULL) {                                                                                                                                          \r\n          unlink(server.unixsocket); /* don\'t care if this fails */\r\n          server.sofd = anetUnixServer(server.neterr,server.unixsocket,\r\n              server.unixsocketperm, server.tcp_backlog);\r\n         if (server.sofd == ANET_ERR) {\r\n              redisLog(REDIS_WARNING, &quot;Opening socket: %s&quot;, server.neterr);\r\n              exit(1);                                                                                       \r\n         }                                                                                                  \r\n         anetNonBlock(NULL,server.sofd);\r\n  }            \r\n[/cpp]\r\n\r\n跳过一个长长的对db的初始化过程，来到这句代码。之前有提到，redis的时间事件几乎可以认为只是用来调用serverCron的，那这里就是创建一个事件事件，并加到timeEventHead 链表里面的。\r\n我能感觉到，作者当初这么设计，是认为自己会有很多类型的时间事件需要处理，所以用来一种通用的方式来，后来发现，只是需要serverCron定时处理罢了。其实实现定时，是有很多简单设计的。\r\n\r\n[cpp]\r\n if(aeCreateTimeEvent(server.el, 1, serverCron, NULL, NULL) == AE_ERR) {\r\n         redisPanic(&quot;Can\'t create the serverCron time event.&quot;);\r\n         exit(1);\r\n  }    \r\n[/cpp]\r\n\r\n接着是整个事件调度的最最核心的地方，也是反应器模式最灵魂的地方，将之前所有的套字节绑定到epoll/poll的套字节上面，并传入对应的响应处理函数。acceptTcpHandler ，就是server.ipfd这些套字节响应的时候，需要调用的处理函数，AE_READABLE表示该套字节是用来读的，将来触发的，是读操作的注册函数。有兴趣建议看一下aeCreateFileEvent,我看了epoll的部分，\r\n\r\n[cpp]\r\n    for (j = 0; j &lt; server.ipfd_count; j++) {\r\n                //为ipfd 添加事件处理，放在epoll的监听列表里面\r\n        if (aeCreateFileEvent(server.el, server.ipfd[j], AE_READABLE,\r\n            acceptTcpHandler,NULL) == AE_ERR)\r\n            {\r\n                redisPanic(\r\n                    &quot;Unrecoverable error creating server.ipfd file event.&quot;);\r\n            }\r\n    }\r\n\r\n[/cpp]\r\n\r\n下面是为本地的socket套字节注册到epoll/poll上的写法，功能类似，回调函数不同，这个事acceptUnixHandler。\r\n\r\n[cpp]\r\n if (server.sofd &gt; 0 &amp;&amp;\r\n                        aeCreateFileEvent(\r\n                                server.el,\r\n                                server.sofd,\r\n                                AE_READABLE,\r\n                                acceptUnixHandler,\r\n                                NULL\r\n                        ) == AE_ERR) redisPanic(&quot;Unrecoverable error creating server.sofd file event.&quot;);\r\n[/cpp]\r\n\r\n至此将所有的套字节初始化，绑定完毕，之后，如何调度处理呢？请看 <a title=\"redis的事件调度器 epoll\" href=\"http://unasm.com/2015/07/354/\">redis的事件调度器 epoll</a>\r\n恩，该文章还有待再次润色','redis源码分析之网络通信和事件调度篇','','inherit','open','open','','464-revision-v1','','','2015-08-06 13:38:17','2015-08-06 13:38:17','',464,'http://unasm.com/2015/08/474/',0,'revision','',0),(476,1,'2015-08-07 02:42:55','2015-08-07 02:42:55','这个可以视为\r\n<a title=\"redis源码分析之网络通信和事件调度篇\" href=\"http://unasm.com/2015/08/464/\" target=\"_blank\">redis源码分析之网络通信和事件调度篇</a> 的下一篇,主要涉及 ae.c + ae_epoll.c 两个文件不到一千行代码，从redis.c的main调用aeMain开始。\r\n<pre>下面是aeMain 函数的全部代码。\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n\r\n    eventLoop-&gt;stop = 0;\r\n\r\n    while (!eventLoop-&gt;stop) {\r\n\r\n        // 如果有需要在事件处理前执行的函数，那么运行它\r\n        if (eventLoop-&gt;beforesleep != NULL)\r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n\r\n        // 开始处理事件\r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);\r\n    }\r\n}\r\n[/cpp]\r\n\r\neventLoop 就是redis的事件调度器，可以看到这里就是一个死循环，只要stop不置位，就会不停循环。aeProcessEvents 处理epoll的响应事件。\r\n\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\n\r\nflags表示的是要处理的事件类型，其实一共是两种类型的事件，文件类型，事件类型，事件类型的事件是未来尚未发生的，文件类型的事件嘛，主要是I/O事件，再说，unix哲学里面，一切都是文件。\r\n\r\naeProcessEvents 第一个if判断无意义，略过，第二个if/else ,那一大块代码段，是用来设置事件时间的。if/else之后有这么一行,前面的十几二十行就是为了得到不同情况下的tvp参数，也就是最近的时间事件 到达时间。\r\n\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\r\n\r\naeApiPoll 返回了当前已经可读可处理的事件列表 eventLoop-&gt;fired ，以及numevents数量。\r\n后面接着的for循环，就是对已经响应的事件进行处理。这里其实存在一个很经典的设计模式，观察者模式。\r\n“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\r\n文件描述字发生变化，通知对应的调度器，调度器调用预先注册好的函数处理，调度器通过epoll观察着全部的I/O变化。\r\n之前说了，一共其实只有两种事件，一个文件事件，一个时间事件，对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\r\n这里逻辑很简单，就是找对应的处理函数，然后把参数什么的传递给他们处理。挺适合goroutine的，直接开协程处理，哈哈。\r\n\r\n[cpp]\r\n for (j = 0; j &lt; numevents; j++) {\r\n            // 从已就绪数组中获取事件\r\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\r\n\r\n            int mask = eventLoop-&gt;fired[j].mask;\r\n            int fd = eventLoop-&gt;fired[j].fd;\r\n            int rfired = 0;\r\n\r\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\r\n             * event removed an element that fired and we still didn\'t\r\n             * processed, so we check if the event is still valid. */\r\n            // 读事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\r\n                // rfired 确保读/写事件只能执行其中一个\r\n                rfired = 1;\r\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            // 写事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\r\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\r\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n\r\n            processed++;\r\n }\r\n[/cpp]\r\n\r\n回头接着说aeApiPoll 函数。逻辑也很简单，主要是对<a title=\"epoll_wait\" href=\"http://unasm.sinaapp.com/?p=335\" target=\"_blank\">epoll_wait </a>函数的使用,这里我对官方的epoll_wait做了一个翻译。epoll_wait 会在三种情况下返回，停止阻塞。\r\n一个是被中断，一个是超时，一个是所有的描述字都得到了响应，也就是说，虽然epoll是为异步非阻塞i/o提供的解决方案，到底还是会有一定程度的阻塞的，只是不会为一个I/O阻塞，而是在监测所有的I/O的时候阻塞。\r\n\r\n[cpp]\r\n   if (e-&gt;events &amp; EPOLLIN) mask |= AE_READABLE;\r\n   if (e-&gt;events &amp; EPOLLOUT) mask |= AE_WRITABLE;\r\n   if (e-&gt;events &amp; EPOLLERR) mask |= AE_WRITABLE;\r\n   if (e-&gt;events &amp; EPOLLHUP) mask |= AE_WRITABLE;\r\n[/cpp]\r\n\r\n这里挺有意思的。就是判断什么情况下，i/o套字节可读，可写，原来EPOLLERR和EPOLLHUP也是可写的。','redis的事件调度器  epoll','','inherit','open','open','','354-revision-v1','','','2015-08-07 02:42:55','2015-08-07 02:42:55','',354,'http://unasm.com/2015/08/476/',0,'revision','',0),(477,1,'2015-08-07 02:53:16','2015-08-07 02:53:16','这个可以视为\r\n<a title=\"redis源码分析之网络通信和事件调度篇\" href=\"http://unasm.com/2015/08/464/\" target=\"_blank\">redis源码分析之网络通信和事件调度篇</a> 的下一篇,主要涉及 ae.c + ae_epoll.c 两个文件不到一千行代码，从redis.c的main调用aeMain开始。\r\n<pre>下面是aeMain 函数的全部代码。</pre>\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n\r\n    eventLoop-&gt;stop = 0;\r\n\r\n    while (!eventLoop-&gt;stop) {\r\n\r\n        // 如果有需要在事件处理前执行的函数，那么运行它\r\n        if (eventLoop-&gt;beforesleep != NULL)\r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n\r\n        // 开始处理事件\r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);\r\n    }\r\n}\r\n[/cpp]\r\n\r\neventLoop 是redis的事件调度器，可以看到这里就是一个死循环，只要 eventLoop-&gt;stop 不置位，就会不停循环，不断地处理事务。aeProcessEvents 具体处理epoll的响应事件。 在全部代码里面grep了一下，尚未发现 eventLoop-&gt;beforesleep 可以被用到的时候，应该一直都是NULL的。\r\n\r\n下面是 aeProcessEvents的定义，flags表示要处理的事件类型，根据调用的时候的参数，可以看到是要处理全部的事件类型，也就是AE_ALL_EVENTS，\r\n\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\n\r\n这是AE_ALL_EVENTS的定义，可见对于redis来说，全部事件包括时间和文本的两种事件。\r\n\r\n[cpp]\r\n#define AE_ALL_EVENTS (AE_FILE_EVENTS|AE_TIME_EVENTS)&lt;/pre&gt;\r\n&lt;pre&gt;[/cpp]\r\n\r\nunix哲学里面，一切都是文件。\r\n\r\n我们步入到aeProcessEvents中，看看在redis的主循环中，到底都做了那些事情。\r\n\r\naeProcessEvents 第一个if判断无意义，略过，第二个if/else ,那一大块代码段，是用来设置事件时间的。if/else之后有这么一行,前面的十几二十行就是为了得到不同情况下的tvp参数，也就是最近的时间事件 到达时间。\r\n\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\r\n\r\naeApiPoll 返回了当前已经可读可处理的事件列表 eventLoop-&gt;fired ，以及numevents数量。\r\n后面接着的for循环，就是对已经响应的事件进行处理。这里其实存在一个很经典的设计模式，观察者模式。\r\n“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\r\n文件描述字发生变化，通知对应的调度器，调度器调用预先注册好的函数处理，调度器通过epoll观察着全部的I/O变化。\r\n之前说了，一共其实只有两种事件，一个文件事件，一个时间事件，对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\r\n这里逻辑很简单，就是找对应的处理函数，然后把参数什么的传递给他们处理。挺适合goroutine的，直接开协程处理，哈哈。\r\n\r\n[cpp]\r\n for (j = 0; j &lt; numevents; j++) {\r\n            // 从已就绪数组中获取事件\r\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\r\n\r\n            int mask = eventLoop-&gt;fired[j].mask;\r\n            int fd = eventLoop-&gt;fired[j].fd;\r\n            int rfired = 0;\r\n\r\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\r\n             * event removed an element that fired and we still didn\'t\r\n             * processed, so we check if the event is still valid. */\r\n            // 读事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\r\n                // rfired 确保读/写事件只能执行其中一个\r\n                rfired = 1;\r\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            // 写事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\r\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\r\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n\r\n            processed++;\r\n }\r\n[/cpp]\r\n\r\n回头接着说aeApiPoll 函数。逻辑也很简单，主要是对<a title=\"epoll_wait\" href=\"http://unasm.sinaapp.com/?p=335\" target=\"_blank\">epoll_wait </a>函数的使用,这里我对官方的epoll_wait做了一个翻译。epoll_wait 会在三种情况下返回，停止阻塞。\r\n一个是被中断，一个是超时，一个是所有的描述字都得到了响应，也就是说，虽然epoll是为异步非阻塞i/o提供的解决方案，到底还是会有一定程度的阻塞的，只是不会为一个I/O阻塞，而是在监测所有的I/O的时候阻塞。\r\n\r\n[cpp]\r\n   if (e-&gt;events &amp; EPOLLIN) mask |= AE_READABLE;\r\n   if (e-&gt;events &amp; EPOLLOUT) mask |= AE_WRITABLE;\r\n   if (e-&gt;events &amp; EPOLLERR) mask |= AE_WRITABLE;\r\n   if (e-&gt;events &amp; EPOLLHUP) mask |= AE_WRITABLE;\r\n[/cpp]\r\n\r\n这里挺有意思的。就是判断什么情况下，i/o套字节可读，可写，原来EPOLLERR和EPOLLHUP也是可写的。','redis的事件调度器  epoll','','inherit','open','open','','354-revision-v1','','','2015-08-07 02:53:16','2015-08-07 02:53:16','',354,'http://unasm.com/2015/08/477/',0,'revision','',0),(478,1,'2015-08-07 03:28:41','2015-08-07 03:28:41','这个可以视为 <a title=\"redis源码分析之网络通信和事件调度篇\" href=\"http://unasm.com/2015/08/464/\" target=\"_blank\">redis源码分析之网络通信和事件调度篇</a>  的下一篇,主要涉及 ae.c + ae_epoll.c 两个文件不到一千行代码，从redis.c的main调用aeMain开始。\r\n<pre>下面是aeMain 函数的全部代码。</pre>\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n\r\n    eventLoop-&gt;stop = 0;\r\n\r\n    while (!eventLoop-&gt;stop) {\r\n\r\n        // 如果有需要在事件处理前执行的函数，那么运行它\r\n        if (eventLoop-&gt;beforesleep != NULL)\r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n\r\n        // 开始处理事件\r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);\r\n    }\r\n}\r\n[/cpp]\r\n\r\neventLoop 是redis的事件调度器，可以看到这里就是一个死循环，只要 eventLoop-&gt;stop 不置位，就会不停循环，不断地处理事务。aeProcessEvents 具体处理epoll的响应事件。 在全部代码里面grep了一下，尚未发现 eventLoop-&gt;beforesleep 可以被用到的时候，应该一直都是NULL的。\r\n\r\n下面是 aeProcessEvents的定义，flags表示要处理的事件类型，根据调用的时候的参数，可以看到是要处理全部的事件类型，也就是AE_ALL_EVENTS，\r\n\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\n\r\n这是AE_ALL_EVENTS的定义，可见对于redis来说，全部事件包括时间和文本的两种事件。\r\n\r\n[cpp]\r\n#define AE_ALL_EVENTS (AE_FILE_EVENTS|AE_TIME_EVENTS)\r\n[/cpp]\r\n\r\nunix哲学里面，一切都是文件。\r\n\r\n我们步入到aeProcessEvents中，看看在redis的主循环中，到底都做了那些事情。\r\n\r\naeProcessEvents 前两个 if/else ,42行代码，主要是为了得到下一次时间事件到来还有多久，设置tvp变量，由此决定文本事件的阻塞时间，正常来说，serverCron每1ms执行一次。作者的意图，就是在不耽误后台进程处理的情况下，阻塞尽可能长的事件，获取尽可能多的响应，增大处理的效率。\r\n\r\n之后来到这一行,将得到的tvp变量和事件调度器传递给epoll处理函数，获取tvp事件内响应的全部套字节列表。epoll观察着全部的I/O变化。\r\n\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\r\n\r\n这个就是整个事件处理器的最最核心的一句，<a title=\"epoll_wait 详解\" href=\"http://unasm.com/2015/07/335/\">epoll_wait</a> ，获取tvp的时间内，注册在state-&gt;epfd上的全部响应套字节，保存在state-&gt;events中，并返回数量，保存在变量retval中。\r\n\r\n[cpp]\r\n&lt;span class=&quot;s1&quot; style=&quot;font-family: Georgia, \'Times New Roman\', \'Bitstream Charter\', Times, serif; font-size: 13px; line-height: 19px;&quot;&gt;retval = epoll_wait(state-&gt;epfd,state-&gt;events,eventLoop-&gt;setsize,&lt;/span&gt;&lt;span class=&quot;s1&quot; style=&quot;font-family: Georgia, \'Times New Roman\', \'Bitstream Charter\', Times, serif; font-size: 13px; line-height: 19px;&quot;&gt; tvp ? (tvp-&gt;tv_sec*&lt;/span&gt;&lt;span class=&quot;s4&quot; style=&quot;font-family: Georgia, \'Times New Roman\', \'Bitstream Charter\', Times, serif; font-size: 13px; line-height: 19px;&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;s1&quot; style=&quot;font-family: Georgia, \'Times New Roman\', \'Bitstream Charter\', Times, serif; font-size: 13px; line-height: 19px;&quot;&gt; + tvp-&gt;tv_usec/&lt;/span&gt;&lt;span class=&quot;s4&quot; style=&quot;font-family: Georgia, \'Times New Roman\', \'Bitstream Charter\', Times, serif; font-size: 13px; line-height: 19px;&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;s1&quot; style=&quot;font-family: Georgia, \'Times New Roman\', \'Bitstream Charter\', Times, serif; font-size: 13px; line-height: 19px;&quot;&gt;) : -1);\r\n&lt;/span&gt;[/cpp]\r\n\r\n很经典的设计模式，观察者模式。“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\r\n\r\nstate-&gt;events中是socket描述字的列表，后面需要后续处理，调用当初注册在对应对象列表上的函数，“做出相应反应”。\r\n\r\n[cpp]\r\n\r\n for (j = 0; j &lt; numevents; j++) {&lt;/pre&gt;\r\n&lt;pre&gt;// 从已就绪数组中获取事件\r\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\r\n\r\n            int mask = eventLoop-&gt;fired[j].mask;\r\n            int fd = eventLoop-&gt;fired[j].fd;\r\n            int rfired = 0;\r\n\r\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\r\n             * event removed an element that fired and we still didn\'t\r\n             * processed, so we check if the event is still valid. */\r\n            // 读事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\r\n                // rfired 确保读/写事件只能执行其中一个\r\n                rfired = 1;\r\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            // 写事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\r\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\r\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n\r\n            processed++;\r\n }\r\n[/cpp]\r\n\r\n响应之后对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\r\n这里的读响应的后续处理函数，函数指针 rfileProc 主要是 acceptTcpHandler和 acceptUnixHandler ，如果想看具体如何处理socket的响应，可以追踪进去。','redis的事件调度器  epoll','','inherit','open','open','','354-revision-v1','','','2015-08-07 03:28:41','2015-08-07 03:28:41','',354,'http://unasm.com/2015/08/478/',0,'revision','',0),(479,1,'2015-08-07 03:33:37','2015-08-07 03:33:37','这个可以视为 <a title=\"redis源码分析之网络通信和事件调度篇\" href=\"http://unasm.com/2015/08/464/\" target=\"_blank\">redis源码分析之网络通信和事件调度篇</a>  的下一篇,主要涉及 ae.c + ae_epoll.c 两个文件不到一千行代码，从redis.c的main调用aeMain开始。\r\n下面是aeMain 函数的全部代码。\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n\r\n    eventLoop-&gt;stop = 0;\r\n\r\n    while (!eventLoop-&gt;stop) {\r\n\r\n        // 如果有需要在事件处理前执行的函数，那么运行它\r\n        if (eventLoop-&gt;beforesleep != NULL)\r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n\r\n        // 开始处理事件\r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);\r\n    }\r\n}\r\n[/cpp]\r\n\r\neventLoop 是redis的事件调度器，可以看到这里就是一个死循环，只要 eventLoop-&gt;stop 不置位，就会不停循环，不断地处理事务。aeProcessEvents 具体处理epoll的响应事件。 在全部代码里面grep了一下，尚未发现 eventLoop-&gt;beforesleep 可以被用到的时候，应该一直都是NULL的。\r\n\r\n下面是 aeProcessEvents的定义，flags表示要处理的事件类型，根据调用的时候的参数，可以看到是要处理全部的事件类型，也就是AE_ALL_EVENTS，\r\n\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\n\r\n这是AE_ALL_EVENTS的定义，可见对于redis来说，全部事件包括时间和文本的两种事件。\r\n\r\n[cpp]\r\n#define AE_ALL_EVENTS (AE_FILE_EVENTS|AE_TIME_EVENTS)\r\n[/cpp]\r\n\r\nunix哲学里面，一切都是文件。\r\n\r\n我们步入到aeProcessEvents中，看看在redis的主循环中，到底都做了那些事情。\r\n\r\naeProcessEvents 前两个 if/else ,42行代码，主要是为了得到下一次时间事件到来还有多久，设置tvp变量，由此决定文本事件的阻塞时间，正常来说，serverCron每1ms执行一次。作者的意图，就是在不耽误后台进程处理的情况下，阻塞尽可能长的事件，获取尽可能多的响应，增大处理的效率。\r\n\r\n之后来到这一行,将得到的tvp变量和事件调度器传递给epoll处理函数，获取tvp事件内响应的全部套字节列表。epoll观察着全部的I/O变化。\r\n\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\r\n\r\n这个就是整个事件处理器的最最核心的一句，<a title=\"epoll_wait 详解\" href=\"http://unasm.com/2015/07/335/\">epoll_wait</a> ，获取tvp的时间内，注册在state-&gt;epfd上的全部响应套字节，保存在state-&gt;events中，并返回数量，保存在变量retval中。\r\n\r\n[cpp]\r\nretval = epoll_wait(state-&gt;epfd,state-&gt;events,eventLoop-&gt;setsize, tvp ? (tvp-&gt;tv_sec*1000 + tvp-&gt;tv_usec/1000) : -1); \r\n[/cpp]\r\n\r\n很经典的设计模式，观察者模式。“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\r\n\r\nstate-&gt;events中是socket描述字的列表，后面需要后续处理，调用当初注册在对应对象列表上的函数，“做出相应反应”。\r\n\r\n[cpp]\r\n\r\n for (j = 0; j &lt; numevents; j++) {\r\n// 从已就绪数组中获取事件\r\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\r\n\r\n            int mask = eventLoop-&gt;fired[j].mask;\r\n            int fd = eventLoop-&gt;fired[j].fd;\r\n            int rfired = 0;\r\n\r\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\r\n             * event removed an element that fired and we still didn\'t\r\n             * processed, so we check if the event is still valid. */\r\n            // 读事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\r\n                // rfired 确保读/写事件只能执行其中一个\r\n                rfired = 1;\r\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            // 写事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\r\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\r\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n\r\n            processed++;\r\n }\r\n[/cpp]\r\n\r\n响应之后对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\r\n这里的读响应的后续处理函数，函数指针 rfileProc 主要是 acceptTcpHandler和 acceptUnixHandler ，如果想看具体如何处理socket的响应，可以追踪进去。\r\n\r\n[cpp]\r\nif (flags &amp; AE_TIME_EVENTS) processed += processTimeEvents(eventLoop);   \r\n[/cpp]\r\n因为已经阻塞了tvp的时间，所以processTimeEvents中肯定是有内容需要处理的。','redis的事件调度器  epoll','','inherit','open','open','','354-revision-v1','','','2015-08-07 03:33:37','2015-08-07 03:33:37','',354,'http://unasm.com/2015/08/479/',0,'revision','',0),(480,1,'2015-08-07 03:35:22','2015-08-07 03:35:22','这个可以视为 <a title=\"redis源码分析之网络通信和事件调度篇\" href=\"http://unasm.com/2015/08/464/\" target=\"_blank\">redis源码分析之网络通信和事件调度篇</a>  的下一篇,主要涉及 ae.c + ae_epoll.c 两个文件不到一千行代码，从redis.c的main调用aeMain开始。\r\n下面是aeMain 函数的全部代码。\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n\r\n    eventLoop-&gt;stop = 0;\r\n\r\n    while (!eventLoop-&gt;stop) {\r\n\r\n        // 如果有需要在事件处理前执行的函数，那么运行它\r\n        if (eventLoop-&gt;beforesleep != NULL)\r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n\r\n        // 开始处理事件\r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);\r\n    }\r\n}\r\n[/cpp]\r\n\r\neventLoop 是redis的事件调度器，可以看到这里就是一个死循环，只要 eventLoop-&gt;stop 不置位，就会不停循环，不断地处理事务。aeProcessEvents 具体处理epoll的响应事件。 在全部代码里面grep了一下，尚未发现 eventLoop-&gt;beforesleep 可以被用到的时候，应该一直都是NULL的。\r\n\r\n下面是 aeProcessEvents的定义，flags表示要处理的事件类型，根据调用的时候的参数，可以看到是要处理全部的事件类型，也就是AE_ALL_EVENTS，\r\n\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\n\r\n这是AE_ALL_EVENTS的定义，可见对于redis来说，全部事件包括时间和文本的两种事件。\r\n\r\n[cpp]\r\n#define AE_ALL_EVENTS (AE_FILE_EVENTS|AE_TIME_EVENTS)\r\n[/cpp]\r\n\r\nunix哲学里面，一切都是文件。\r\n\r\n我们步入到aeProcessEvents中，看看在redis的主循环中，到底都做了那些事情。\r\n\r\naeProcessEvents 前两个 if/else ,42行代码，主要是为了得到下一次时间事件到来还有多久，设置tvp变量，由此决定文本事件的阻塞时间，正常来说，serverCron每1ms执行一次。作者的意图，就是在不耽误后台进程处理的情况下，阻塞尽可能长的事件，获取尽可能多的响应，增大处理的效率。\r\n\r\n之后来到这一行,将得到的tvp变量和事件调度器传递给epoll处理函数，获取tvp事件内响应的全部套字节列表。epoll观察着全部的I/O变化。\r\n\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\r\n\r\n这个就是整个事件处理器的最最核心的一句，<a title=\"epoll_wait 详解\" href=\"http://unasm.com/2015/07/335/\">epoll_wait</a> ，获取tvp的时间内，注册在state-&gt;epfd上的全部响应套字节，保存在state-&gt;events中，并返回数量，保存在变量retval中。\r\n\r\n[cpp]\r\nretval = epoll_wait(state-&gt;epfd,state-&gt;events,eventLoop-&gt;setsize, tvp ? (tvp-&gt;tv_sec*1000 + tvp-&gt;tv_usec/1000) : -1); \r\n[/cpp]\r\n\r\n很经典的设计模式，观察者模式。“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\r\n\r\nstate-&gt;events中是socket描述字的列表，后面需要后续处理，调用当初注册在对应对象列表上的函数，“做出相应反应”。\r\n\r\n[cpp]\r\n\r\n for (j = 0; j &lt; numevents; j++) {\r\n// 从已就绪数组中获取事件\r\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\r\n\r\n            int mask = eventLoop-&gt;fired[j].mask;\r\n            int fd = eventLoop-&gt;fired[j].fd;\r\n            int rfired = 0;\r\n\r\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\r\n             * event removed an element that fired and we still didn\'t\r\n             * processed, so we check if the event is still valid. */\r\n            // 读事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\r\n                // rfired 确保读/写事件只能执行其中一个\r\n                rfired = 1;\r\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            // 写事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\r\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\r\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n\r\n            processed++;\r\n }\r\n[/cpp]\r\n\r\n响应之后对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\r\n这里的读响应的后续处理函数，函数指针 rfileProc 主要是 acceptTcpHandler和 acceptUnixHandler ，如果想看具体如何处理socket的响应，可以追踪进去。\r\n\r\n[cpp]\r\nif (flags &amp; AE_TIME_EVENTS) processed += processTimeEvents(eventLoop);   \r\n[/cpp]\r\n\r\n因为已经阻塞了tvp的时间，所以processTimeEvents中肯定是有内容需要处理的。也就是开始执行serverCron，执行redis的后台进程。\r\n关于serverCron的解析，欢迎查看 <a title=\"serverCron解析\" href=\"http://unasm.com/2015/07/394/\">http://unasm.com/2015/07/394/</a>','redis的事件调度器  epoll','','inherit','open','open','','354-revision-v1','','','2015-08-07 03:35:22','2015-08-07 03:35:22','',354,'http://unasm.com/2015/08/480/',0,'revision','',0),(481,1,'2015-08-07 03:38:15','2015-08-07 03:38:15','这个可以视为 <a title=\"redis源码分析之网络通信和事件调度篇\" href=\"http://unasm.com/2015/08/464/\" target=\"_blank\">redis源码分析之网络通信和事件调度篇</a>  的下一篇,主要涉及 ae.c + ae_epoll.c 两个文件不到一千行代码，从redis.c的main调用aeMain开始。\r\n下面是aeMain 函数的全部代码。\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n\r\n    eventLoop-&gt;stop = 0;\r\n\r\n    while (!eventLoop-&gt;stop) {\r\n\r\n        // 如果有需要在事件处理前执行的函数，那么运行它\r\n        if (eventLoop-&gt;beforesleep != NULL)\r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n\r\n        // 开始处理事件\r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);\r\n    }\r\n}\r\n[/cpp]\r\n\r\neventLoop 是redis的事件调度器，可以看到这里就是一个死循环，只要 eventLoop-&gt;stop 不置位，就会不停循环，不断地处理事务，实际上，除了在benchmark之外，没有任何地方将stop置为1，也就是永远都不会触发stop = 1 的情况。aeProcessEvents 具体处理epoll的响应事件。 在全部代码里面grep了一下，尚未发现 eventLoop-&gt;beforesleep 可以被用到的时候，应该一直都是NULL的。\r\n\r\n下面是 aeProcessEvents的定义，flags表示要处理的事件类型，根据调用的时候的参数，可以看到是要处理全部的事件类型，也就是AE_ALL_EVENTS，\r\n\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\n\r\n这是AE_ALL_EVENTS的定义，可见对于redis来说，全部事件包括时间和文本的两种事件。\r\n\r\n[cpp]\r\n#define AE_ALL_EVENTS (AE_FILE_EVENTS|AE_TIME_EVENTS)\r\n[/cpp]\r\n\r\nunix哲学里面，一切都是文件。\r\n\r\n我们步入到aeProcessEvents中，看看在redis的主循环中，到底都做了那些事情。\r\n\r\naeProcessEvents 前两个 if/else ,42行代码，主要是为了得到下一次时间事件到来还有多久，设置tvp变量，由此决定文本事件的阻塞时间，正常来说，serverCron每1ms执行一次。作者的意图，就是在不耽误后台进程处理的情况下，阻塞尽可能长的事件，获取尽可能多的响应，增大处理的效率。\r\n\r\n之后来到这一行,将得到的tvp变量和事件调度器传递给epoll处理函数，获取tvp事件内响应的全部套字节列表。epoll观察着全部的I/O变化。\r\n\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\r\n\r\n这个就是整个事件处理器的最最核心的一句，<a title=\"epoll_wait 详解\" href=\"http://unasm.com/2015/07/335/\">epoll_wait</a> ，获取tvp的时间内，注册在state-&gt;epfd上的全部响应套字节，保存在state-&gt;events中，并返回数量，保存在变量retval中。\r\n\r\n[cpp]\r\nretval = epoll_wait(state-&gt;epfd,state-&gt;events,eventLoop-&gt;setsize, tvp ? (tvp-&gt;tv_sec*1000 + tvp-&gt;tv_usec/1000) : -1);\r\n[/cpp]\r\n\r\n很经典的设计模式，观察者模式。“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\r\n\r\nstate-&gt;events中是socket描述字的列表，后面需要后续处理，调用当初注册在对应对象列表上的函数，“做出相应反应”。\r\n\r\n[cpp]\r\n\r\n for (j = 0; j &lt; numevents; j++) {\r\n// 从已就绪数组中获取事件\r\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\r\n\r\n            int mask = eventLoop-&gt;fired[j].mask;\r\n            int fd = eventLoop-&gt;fired[j].fd;\r\n            int rfired = 0;\r\n\r\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\r\n             * event removed an element that fired and we still didn\'t\r\n             * processed, so we check if the event is still valid. */\r\n            // 读事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\r\n                // rfired 确保读/写事件只能执行其中一个\r\n                rfired = 1;\r\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            // 写事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\r\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\r\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n\r\n            processed++;\r\n }\r\n[/cpp]\r\n\r\n响应之后对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\r\n这里的读响应的后续处理函数，函数指针 rfileProc 主要是 acceptTcpHandler和 acceptUnixHandler ，如果想看具体如何处理socket的响应，可以追踪进去。\r\n\r\n[cpp]\r\nif (flags &amp; AE_TIME_EVENTS) processed += processTimeEvents(eventLoop);\r\n[/cpp]\r\n\r\n因为已经阻塞了tvp的时间，所以processTimeEvents中肯定是有内容需要处理的。也就是开始执行serverCron，执行redis的后台进程。\r\n关于serverCron的解析，欢迎查看 <a title=\"serverCron解析\" href=\"http://unasm.com/2015/07/394/\">http://unasm.com/2015/07/394/</a>','redis的事件调度器  epoll','','inherit','open','open','','354-revision-v1','','','2015-08-07 03:38:15','2015-08-07 03:38:15','',354,'http://unasm.com/2015/08/481/',0,'revision','',0),(482,1,'2015-08-07 03:42:02','2015-08-07 03:42:02','这个可以视为 <a title=\"redis源码分析之网络通信和事件调度篇\" href=\"http://unasm.com/2015/08/464/\" target=\"_blank\">redis源码分析之网络通信和事件调度篇</a>  的下一篇,主要涉及 ae.c + ae_epoll.c 两个文件不到一千行代码，从redis.c的main调用aeMain开始。\r\n下面是aeMain 函数的全部代码。\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n\r\n    eventLoop-&gt;stop = 0;\r\n\r\n    while (!eventLoop-&gt;stop) {\r\n\r\n        // 如果有需要在事件处理前执行的函数，那么运行它\r\n        if (eventLoop-&gt;beforesleep != NULL)\r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n\r\n        // 开始处理事件\r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);\r\n    }\r\n}\r\n[/cpp]\r\n\r\neventLoop 是redis的事件调度器，可以看到这里就是一个死循环，只要 eventLoop-&gt;stop 不置位，就会不停循环，不断地处理事务，实际上，除了在benchmark之外，没有任何地方将stop置为1，也就是永远都不会触发stop = 1 的情况。aeProcessEvents 具体处理epoll的响应事件。 在全部代码里面grep了一下，尚未发现 eventLoop-&gt;beforesleep 可以被用到的时候，应该一直都是NULL的。\r\n\r\n下面是 aeProcessEvents的定义，flags表示要处理的事件类型，根据调用的时候的参数，可以看到是要处理全部的事件类型，也就是AE_ALL_EVENTS，\r\n\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\n\r\n这是AE_ALL_EVENTS的定义，可见对于redis来说，全部事件包括时间和文本的两种事件。\r\n\r\n[cpp]\r\n#define AE_ALL_EVENTS (AE_FILE_EVENTS|AE_TIME_EVENTS)\r\n[/cpp]\r\n\r\nunix哲学里面，一切都是文件。\r\n\r\n我们步入到aeProcessEvents中，看看在redis的主循环中，到底都做了那些事情。\r\n\r\naeProcessEvents 前两个 if/else ,42行代码，主要是为了得到下一次时间事件到来还有多久，设置tvp变量，由此决定文本事件的阻塞时间，正常来说，serverCron每1ms执行一次。作者的意图，就是在不耽误后台进程处理的情况下，阻塞尽可能长的事件，获取尽可能多的响应，增大处理的效率。\r\n\r\n之后来到这一行,将得到的tvp变量和事件调度器传递给epoll处理函数，获取tvp事件内响应的全部套字节列表。epoll观察着全部的I/O变化。\r\n\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\r\n\r\n这个就是整个事件处理器的最最核心的一句，<a title=\"epoll_wait 详解\" href=\"http://unasm.com/2015/07/335/\">epoll_wait</a> ，获取tvp的时间内，注册在state-&gt;epfd上的全部响应套字节，保存在state-&gt;events中，并返回数量，保存在变量retval中。\r\n\r\n[cpp]\r\nretval = epoll_wait(state-&gt;epfd,state-&gt;events,eventLoop-&gt;setsize, tvp ? (tvp-&gt;tv_sec*1000 + tvp-&gt;tv_usec/1000) : -1);\r\n[/cpp]\r\n\r\n很经典的设计模式，观察者模式。“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\r\n\r\nstate-&gt;events中是socket描述字的列表，后面需要后续处理，调用当初注册在对应对象列表上的函数，“做出相应反应”。\r\n\r\n[cpp]\r\n\r\n for (j = 0; j &lt; numevents; j++) {\r\n// 从已就绪数组中获取事件\r\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\r\n\r\n            int mask = eventLoop-&gt;fired[j].mask;\r\n            int fd = eventLoop-&gt;fired[j].fd;\r\n            int rfired = 0;\r\n\r\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\r\n             * event removed an element that fired and we still didn\'t\r\n             * processed, so we check if the event is still valid. */\r\n            // 读事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\r\n                // rfired 确保读/写事件只能执行其中一个\r\n                rfired = 1;\r\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            // 写事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\r\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\r\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n\r\n            processed++;\r\n }\r\n[/cpp]\r\n\r\n响应之后对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\r\n\r\n读响应的后续处理函数，函数指针 rfileProc 主要是 acceptTcpHandler和 acceptUnixHandler ，如果想看具体如何处理socket的响应，可以追踪进去。\r\n\r\n[cpp]\r\nif (flags &amp; AE_TIME_EVENTS) processed += processTimeEvents(eventLoop);\r\n[/cpp]\r\n\r\n因为已经阻塞了tvp的时间，所以processTimeEvents中肯定是有内容需要处理的。也就是开始执行serverCron，执行redis的后台进程。\r\n关于serverCron的解析，欢迎查看 <a title=\"serverCron解析\" href=\"http://unasm.com/2015/07/394/\">http://unasm.com/2015/07/394/</a>','redis的事件调度器  epoll','','inherit','open','open','','354-revision-v1','','','2015-08-07 03:42:02','2015-08-07 03:42:02','',354,'http://unasm.com/2015/08/482/',0,'revision','',0),(484,1,'2015-08-07 04:01:47','2015-08-07 04:01:47','这个可以视为 <a title=\"redis源码分析之网络通信和事件调度篇\" href=\"http://unasm.com/2015/08/464/\" target=\"_blank\">redis源码分析之网络通信和事件调度篇</a>  的下一篇,主要涉及 ae.c + ae_epoll.c 两个文件不到一千行代码，从redis.c的main调用aeMain开始。\r\n下面是aeMain 函数的全部代码。\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n\r\n    eventLoop-&gt;stop = 0;\r\n\r\n    while (!eventLoop-&gt;stop) {\r\n\r\n        // 如果有需要在事件处理前执行的函数，那么运行它\r\n        if (eventLoop-&gt;beforesleep != NULL)\r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n\r\n        // 开始处理事件\r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);\r\n    }\r\n}\r\n[/cpp]\r\n\r\neventLoop 是redis的事件调度器，可以看到这里就是一个死循环，只要 eventLoop-&gt;stop 不置位，就会不停循环，不断地处理事务，实际上，除了在benchmark之外，没有任何地方将stop置为1，也就是永远都不会触发stop = 1 的情况。aeProcessEvents 具体处理epoll的响应事件。 在全部代码里面grep了一下，尚未发现 eventLoop-&gt;beforesleep 可以被用到的时候，应该一直都是NULL的。\r\n\r\n下面是 aeProcessEvents的定义，flags表示要处理的事件类型，根据调用的时候的参数，可以看到是要处理全部的事件类型，也就是AE_ALL_EVENTS，\r\n\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\n\r\n这是AE_ALL_EVENTS的定义，可见对于redis来说，全部事件包括时间和文本的两种事件。\r\n\r\n[cpp]\r\n#define AE_ALL_EVENTS (AE_FILE_EVENTS|AE_TIME_EVENTS)\r\n[/cpp]\r\n\r\nunix哲学里面，一切都是文件。\r\n\r\n我们步入到aeProcessEvents中，看看在redis的主循环中，到底都做了那些事情。\r\n\r\naeProcessEvents 前两个 if/else ,42行代码，主要是为了得到下一次时间事件到来还有多久，设置tvp变量，由此决定文本事件的阻塞时间，正常来说，serverCron每1ms执行一次。作者的意图，就是在不耽误后台进程处理的情况下，阻塞尽可能长的事件，获取尽可能多的响应，增大处理的效率。\r\n\r\n之后来到这一行,将得到的tvp变量和事件调度器传递给epoll处理函数，获取tvp事件内响应的全部套字节列表。epoll观察着全部的I/O变化。\r\n\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\r\n\r\n这个就是整个事件处理器的最最核心的一句，<a title=\"epoll_wait 详解\" href=\"http://unasm.com/2015/07/335/\">epoll_wait</a> ，获取tvp的时间内，注册在state-&gt;epfd上的全部响应套字节，保存在state-&gt;events中，并返回数量，保存在变量retval中。\r\n\r\n[cpp]\r\nretval = epoll_wait(state-&gt;epfd,state-&gt;events,eventLoop-&gt;setsize, tvp ? (tvp-&gt;tv_sec*1000 + tvp-&gt;tv_usec/1000) : -1);\r\n[/cpp]\r\n\r\n很经典的设计模式，观察者模式。“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\r\n\r\nstate-&gt;events中是socket描述字的列表，后面需要后续处理，调用当初注册在对应对象列表上的函数，“做出相应反应”。\r\n\r\n[cpp]\r\n\r\n for (j = 0; j &lt; numevents; j++) {\r\n// 从已就绪数组中获取事件\r\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\r\n\r\n            int mask = eventLoop-&gt;fired[j].mask;\r\n            int fd = eventLoop-&gt;fired[j].fd;\r\n            int rfired = 0;\r\n\r\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\r\n             * event removed an element that fired and we still didn\'t\r\n             * processed, so we check if the event is still valid. */\r\n            // 读事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\r\n                // rfired 确保读/写事件只能执行其中一个\r\n                rfired = 1;\r\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            // 写事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\r\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\r\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n\r\n            processed++;\r\n }\r\n[/cpp]\r\n\r\n响应之后对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\r\n\r\n读响应的后续处理函数，函数指针 rfileProc 主要是 acceptTcpHandler和 acceptUnixHandler ，如果想看具体如何处理socket的响应，可以追踪进去。\r\n\r\n[cpp]\r\nif (flags &amp; AE_TIME_EVENTS) processed += processTimeEvents(eventLoop);\r\n[/cpp]\r\n\r\n因为已经阻塞了tvp的时间，所以processTimeEvents中肯定是有内容需要处理的。也就是开始执行serverCron，执行redis的后台进程。\r\n\r\n关于serverCron的解析，欢迎查看 <a title=\"serverCron解析\" href=\"http://unasm.com/2015/07/394/\">http://unasm.com/2015/07/394/</a>','redis 源码分析之事件调度器 epoll','','inherit','open','open','','354-revision-v1','','','2015-08-07 04:01:47','2015-08-07 04:01:47','',354,'http://unasm.com/2015/08/484/',0,'revision','',0),(488,1,'2015-08-07 07:42:43','2015-08-07 07:42:43','Redis的serverCron大约是每1ms执行一次，并非严格1ms，一般来说，会有一定程度的延迟，\r\n\r\nserverCron函数的三个参数，在函数内部都没有被使用，会有警告出来，所以使用REDIS_NOTUSED去除，不使用，为什么还传递这三个参数呢?莫非是为了格式的一致性么？\r\n\r\n1.serverCron 设置 setitimer，超时的时候，进程会收到一个SIGALRM信号。redis 根据这个信号，打印 logStackTrace 信息，排查超时的原因。在生产环境，是不会做这种事情的。\r\n\r\n2.redis更新全局事件变量，在要求不是很高的时候，通过读取该时间变量，默认为当前事件，可以节省时间，加快速度。\r\n<pre>3.更新Lru时间，getLRUClock()函数如下</pre>\r\n\r\n[cpp]\r\nreturn (mstime()/REDIS_LRU_CLOCK_RESOLUTION) &amp; REDIS_LRU_CLOCK_MAX;\r\n[/cpp]\r\n\r\n翻译出来就是(mstime() / 1000) &amp; ( (1 &lt;&lt; 24 )- 1),这个时间，大概是380天的样子,lruclock每380天一个轮回。\r\n\r\n4.如果之前收到了 <span class=\"s1\">SIGT</span><span class=\"s2\">E</span><span class=\"s1\">RM 信号，并不会立即做什么事情，只是将</span><span class=\"s1\">server.shutdown_as</span><span class=\"s2\">a</span><span class=\"s1\">p 置位</span>，这里判断shutdown_asap , 调用<span class=\"s1\">prepareForShut</span><span class=\"s2\">d</span><span class=\"s1\">own ,</span>关闭服务器，退出执行。但是如果没有退出成功，就不退出了，打印Log，然后移除标志位。\r\n\r\n5.每50s，打印一次全部数据库的键值对，过期键的数量。\r\n\r\n6.如果不是处于哨兵模式，每50s，记录一次客户端连接的数量，以及redis从库的数量。处于哨兵模式的时候，服务器所做的事情，就是监控其他服务器是否正常，它的客户端，就是几个固定的服务器 ，并没有打印客户端连接的必要。\r\n\r\n7.clientsCron(),检查所有的客户端连接，是否有可以释放的，每次至少检查50个客户端，如果符合以下条件，就断开客户端连接。\r\nredis越来越复杂了。\r\n\r\n[cpp]\r\nif (server.maxidletime &amp;&amp;\r\n// 不检查作为从服务器的客户端\r\n!(c-&gt;flags &amp; REDIS_SLAVE) &amp;&amp;\r\n// 不检查作为主服务器的客户端\r\n!(c-&gt;flags &amp; REDIS_MASTER) &amp;&amp;\r\n// 不检查被阻塞的客户端\r\n!(c-&gt;flags &amp; REDIS_BLOCKED) &amp;&amp;\r\n// 不检查订阅了频道的客户端\r\ndictSize(c-&gt;pubsub_channels) == 0 &amp;&amp;\r\n// 不检查订阅了模式的客户端,因为可能是监控器？？？\r\nlistLength(c-&gt;pubsub_patterns) == 0 &amp;&amp;\r\n// 客户端最后一次与服务器通讯的时间已经超过了 maxidletime 时间\r\n(now - c-&gt;lastinteraction &gt; server.maxidletime))\r\n[/cpp]\r\n\r\n同时检查这些客户端是不是可以缩小查询缓冲，节省内存。条件是 <span class=\"s1\">1.  查询缓冲区的大小大于 BIG_ARG 以及 querybuf_peak ，2.  </span>客户端不活跃，并且缓冲区大于 1k的时候，减小缓冲区。怎么判断是否活跃呢，超过2s内没有任何交互，就判断为不活跃。\r\n\r\n8. databasesCron(),定时脚本中，需要对db进行的操作,包括清除过期键以及判断是否需要rehash\r\n\r\n9.检查aof和rdb是否进行的时候，使用了wait3(&amp;statloc,WNOHANG,NULL))\r\n\r\nWNOHANG:return immediately if no child has exited。通过非阻塞的方式查询子进程是否完成，而是通过每次cron查询的方式，大概是要做的事情太多了吧。rdb或者aof完成之后，执行backgroundSaveDoneHandler(exitcode,bysignal) 或者是 backgroundRewriteDoneHandler(exitcode,bysignal)\r\n\r\n10.如果server.aof_flush_postponed_start置位，也即是每秒刷新aof文件，则刷新aof文件。\r\nreplicationCron,每10s执行一次， 重连接主服务器、向主服务器发送 ACK 、判断数据发送失败情况、断开本服务器超时的从服务器，等等\r\n\r\n11.关闭需要异步关闭释放的客户端。\r\n\r\n12.每10s，重新连接一次主服务器，发送ACK，断开超时的从服务器等。\r\n\r\n13.如果服务器运行在集群模式下，那么每秒钟执行一次集群操作。\r\n14.如果处于哨兵模式下， 每秒中执行一次sentinelTimer()','Redis 源码分析之serverCron(定时循环)解析','','inherit','open','open','','394-revision-v1','','','2015-08-07 07:42:43','2015-08-07 07:42:43','',394,'http://unasm.com/2015/08/488/',0,'revision','',0),(487,1,'2015-08-07 07:29:31','2015-08-07 07:29:31','Redis的serverCron大约是每1ms执行一次，并非严格1ms，一般来说，会有一定程度的延迟，\r\n\r\nserverCron函数的三个参数，在函数内部都没有被使用，会有警告出来，所以使用REDIS_NOTUSED去除，不使用，为什么还传递这三个参数呢?莫非是为了格式的一致性么？\r\n\r\n1.serverCron 设置 setitimer，超时的时候，进程会收到一个SIGALRM信号。redis 根据这个信号，打印 logStackTrace 信息，排查超时的原因。在生产环境，是不会做这种事情的。\r\n\r\n2.redis更新全局事件变量，在要求不是很高的时候，通过读取该时间变量，默认为当前事件，可以节省时间，加快速度。\r\n<pre>3.更新Lru时间，getLRUClock()函数如下</pre>\r\n\r\n[cpp]\r\nreturn (mstime()/REDIS_LRU_CLOCK_RESOLUTION) &amp; REDIS_LRU_CLOCK_MAX;\r\n[/cpp]\r\n\r\n翻译出来就是(mstime() / 1000) &amp; ( (1 &lt;&lt; 24 )- 1),这个时间，大概是380天的样子,lruclock每380天一个轮回。\r\n\r\n4.如果之前收到了 <span class=\"s1\">SIGT</span><span class=\"s2\">E</span><span class=\"s1\">RM 信号，并不会立即做什么事情，只是将</span><span class=\"s1\">server.shutdown_as</span><span class=\"s2\">a</span><span class=\"s1\">p 置位</span>，这里判断shutdown_asap , 调用<span class=\"s1\">prepareForShut</span><span class=\"s2\">d</span><span class=\"s1\">own ,</span>关闭服务器，退出执行。但是如果没有退出成功，就不退出了，打印Log，然后移除标志位。\r\n\r\n5.每50s，打印一次全部数据库的键值对，过期键的数量。\r\n\r\n6.如果不是处于哨兵模式，每50s，记录一次客户端连接的数量，以及redis从库的数量。处于哨兵模式的时候，服务器所做的事情，就是监控其他服务器是否正常，它的客户端，就是几个固定的服务器 ，并没有打印客户端连接的必要。\r\n\r\nclientsCron(),检查所有的客户端连接，是否有可以释放的，每次至少检查50个客户端，如果符合以下条件，就断开客户端连接。\r\nredis越来越复杂了。\r\n\r\n[cpp]\r\nif (server.maxidletime &amp;&amp;\r\n// 不检查作为从服务器的客户端\r\n!(c-&gt;flags &amp; REDIS_SLAVE) &amp;&amp;\r\n// 不检查作为主服务器的客户端\r\n!(c-&gt;flags &amp; REDIS_MASTER) &amp;&amp;\r\n// 不检查被阻塞的客户端\r\n!(c-&gt;flags &amp; REDIS_BLOCKED) &amp;&amp;\r\n// 不检查订阅了频道的客户端\r\ndictSize(c-&gt;pubsub_channels) == 0 &amp;&amp;\r\n// 不检查订阅了模式的客户端,因为可能是监控器？？？\r\nlistLength(c-&gt;pubsub_patterns) == 0 &amp;&amp;\r\n// 客户端最后一次与服务器通讯的时间已经超过了 maxidletime 时间\r\n(now - c-&gt;lastinteraction &gt; server.maxidletime))\r\n[/cpp]\r\n\r\n同时检查这些客户端是不是可以缩小查询缓冲，节省内存。\r\n<p class=\"p1\"><span class=\"s1\">当 1.查询缓冲区的大小大于 BIG_ARG 以及 querybuf_peak ，2.</span>客户端不活跃，并且缓冲区大于 1k的时候，减小缓冲区。怎么判断是否活跃呢，超过2s内没有任何交互，就判断为不活跃。</p>\r\n下个函数，databasesCron(),定时脚本中，需要对db进行的操作,包括清除过期键以及判断是否需要rehash\r\n\r\n检查aof和rdb是否进行的时候，使用了wait3(&amp;statloc,WNOHANG,NULL))\r\nWNOHANG:return immediately if no child has exited。非阻塞的方式查询子进程是否完成，而是通过每次cron查询的方式，大概是要做的事情太多了吧。rdb或者aof完成之后，执行backgroundSaveDoneHandler(exitcode,bysignal) 或者是 backgroundRewriteDoneHandler(exitcode,bysignal)\r\n\r\n如果server.aof_flush_postponed_start置位，也即是每秒刷新aof文件，则刷新aof文件。\r\nreplicationCron,每10s执行一次， 重连接主服务器、向主服务器发送 ACK 、判断数据发送失败情况、断开本服务器超时的从服务器，等等\r\n\r\n如果服务器运行在集群模式下，那么每秒钟执行一次集群操作。\r\n如果处于哨兵模式下， 每秒中执行一次sentinelTimer()\r\n\r\n[cpp]\r\nint serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {\r\nint j;\r\nREDIS_NOTUSED(eventLoop);\r\nREDIS_NOTUSED(id);\r\nREDIS_NOTUSED(clientData);\r\n\r\nif (server.watchdog_period) watchdogScheduleSignal(server.watchdog_period);\r\n\r\nupdateCachedTime();\r\n\r\n//保存每秒执行的命令数量\r\nrun_with_period(100) trackOperationsPerSecond();\r\nserver.lruclock = getLRUClock();\r\n\r\nif (zmalloc_used_memory() &gt; server.stat_peak_memory)\r\nserver.stat_peak_memory = zmalloc_used_memory();\r\n\r\nserver.resident_set_size = zmalloc_get_rss();\r\n\r\nif (server.shutdown_asap) {\r\nif (prepareForShutdown(0) == REDIS_OK) exit(0);\r\n\r\nredisLog(REDIS_WARNING,&amp;quot;SIGTERM received but errors trying to shut down the server, check the logs for more information&amp;quot;);\r\nserver.shutdown_asap = 0;\r\n}\r\n\r\nrun_with_period(5000) {\r\nfor (j = 0; j &lt; server.dbnum; j++) {\r\nlong long size, used, vkeys;\r\n\r\nsize = dictSlots(server.db[j].dict);\r\nused = dictSize(server.db[j].dict);\r\nvkeys = dictSize(server.db[j].expires);\r\n\r\nif (used || vkeys) {\r\nredisLog(REDIS_VERBOSE,&amp;quot;DB %d: %lld keys (%lld volatile) in %lld slots HT.&amp;quot;,j,used,vkeys,size);\r\n}\r\n}\r\n}\r\n\r\nif (!server.sentinel_mode) {\r\nrun_with_period(5000) {\r\nredisLog(REDIS_VERBOSE,\r\n&amp;quot;%lu clients connected (%lu slaves), %zu bytes in use&amp;quot;,\r\nlistLength(server.clients)-listLength(server.slaves),\r\nlistLength(server.slaves),\r\nzmalloc_used_memory());\r\n}\r\n}\r\nclientsCron();\r\ndatabasesCron();\r\n//在rdb和aof都没有执行的情况下，如果需要执行aof，通过通过fork子进程执行aof\r\nif (server.rdb_child_pid == -1 &amp;&amp; server.aof_child_pid == -1 &amp;&amp;\r\nserver.aof_rewrite_scheduled)\r\n{\r\nrewriteAppendOnlyFileBackground();\r\n}\r\n\r\n//rdb或者是aof如果正在进行，等待子进程完成，这里的wait3,使用的是unix的select方式。\r\nif (server.rdb_child_pid != -1 || server.aof_child_pid != -1) {\r\nint statloc;\r\npid_t pid;\r\n\r\nif ((pid = wait3(&amp;statloc,WNOHANG,NULL)) != 0) {\r\nint exitcode = WEXITSTATUS(statloc);\r\nint bysignal = 0;\r\nif (WIFSIGNALED(statloc)) bysignal = WTERMSIG(statloc);\r\n\r\nif (pid == server.rdb_child_pid) {\r\nbackgroundSaveDoneHandler(exitcode,bysignal);\r\n\r\n} else if (pid == server.aof_child_pid) {\r\nbackgroundRewriteDoneHandler(exitcode,bysignal);\r\n} else {\r\nredisLog(REDIS_WARNING,\r\n&amp;quot;Warning, detected child with unmatched pid: %ld&amp;quot;,\r\n(long)pid);\r\n}\r\nupdateDictResizePolicy();\r\n}\r\n} else {\r\nfor (j = 0; j &lt; server.saveparamslen; j++) {\r\nstruct saveparam *sp = server.saveparams+j;\r\nif (server.dirty &gt;= sp-&gt;changes &amp;&amp;\r\nserver.unixtime-server.lastsave &gt; sp-&gt;seconds &amp;&amp;\r\n(server.unixtime-server.lastbgsave_try &gt;\r\nREDIS_BGSAVE_RETRY_DELAY ||\r\nserver.lastbgsave_status == REDIS_OK))\r\n{\r\nredisLog(REDIS_NOTICE,&amp;quot;%d changes in %d seconds. Saving...&amp;quot;,\r\nsp-&gt;changes, (int)sp-&gt;seconds);\r\n// 执行 BGSAVE\r\nrdbSaveBackground(server.rdb_filename);\r\nbreak;\r\n}\r\n}\r\n\r\nif (server.rdb_child_pid == -1 &amp;&amp;\r\nserver.aof_child_pid == -1 &amp;&amp;\r\nserver.aof_rewrite_perc &amp;&amp;\r\n// AOF 文件的当前大小大于执行 BGREWRITEAOF 所需的最小大小\r\nserver.aof_current_size &gt; server.aof_rewrite_min_size)\r\n{\r\n// 上一次完成 AOF 写入之后，AOF 文件的大小\r\nlong long base = server.aof_rewrite_base_size ?\r\nserver.aof_rewrite_base_size : 1;\r\n\r\n// AOF 文件当前的体积相对于 base 的体积的百分比\r\nlong long growth = (server.aof_current_size*100/base) - 100;\r\n\r\n// 如果增长体积的百分比超过了 growth ，那么执行 BGREWRITEAOF\r\nif (growth &gt;= server.aof_rewrite_perc) {\r\nredisLog(REDIS_NOTICE,&amp;quot;Starting automatic rewriting of AOF on %lld%% growth&amp;quot;,growth);\r\n// 执行 BGREWRITEAOF\r\nrewriteAppendOnlyFileBackground();\r\n}\r\n}\r\n}\r\n\r\nif (server.aof_flush_postponed_start) flushAppendOnlyFile(0);\r\n\r\nrun_with_period(1000) {\r\nif (server.aof_last_write_status == REDIS_ERR)\r\nflushAppendOnlyFile(0);\r\n}\r\n\r\nfreeClientsInAsyncFreeQueue();\r\n\r\nclientsArePaused(); /* Don\'t check return value, just use the side effect. */\r\nrun_with_period(1000) replicationCron();\r\n\r\nrun_with_period(100) {\r\nif (server.cluster_enabled) clusterCron();\r\n}\r\n\r\nrun_with_period(100) {\r\nif (server.sentinel_mode) sentinelTimer();\r\n}\r\n\r\nrun_with_period(1000) {\r\nmigrateCloseTimedoutSockets();\r\n}\r\n\r\nserver.cronloops++;\r\nreturn 1000/server.hz;\r\n}\r\n[/cpp]\r\n','Redis 源码分析之serverCron(定时循环)解析','','inherit','open','open','','394-revision-v1','','','2015-08-07 07:29:31','2015-08-07 07:29:31','',394,'http://unasm.com/2015/08/487/',0,'revision','',0),(489,1,'2015-08-10 04:19:41','2015-08-10 04:19:41','<a title=\"Median of Two Sorted Arrays \" href=\"https://leetcode.com/problems/median-of-two-sorted-arrays/\" target=\"_blank\">Median of Two Sorted Arrays</a>\r\n\r\n求两个有序数组的中位数的题，以前想了很久，没搞定，后来再看，发现原来很简单。\r\n\r\n主要还是二分的思想，但是不能做到严格意义log(m+n),只是统计意义上的log(m+n);\r\n\r\n想法很简单，就是在第一个数组中找到当前的中位数，然后在第二个数组中log(N)查找位置，看这个数字距离真正的中位数是大了，还是小了，如果小了，好，那所有小于这个数字的数都排除掉，更新待查找的区间，然后重新找新区间中位数，再次对比距离真正中位数的距离。\r\n\r\n首先确定两个变量，max1,min1，表示第一个数组的未被排除区间，min2,max2表示第二个数组的未被排除区间。left,right 表示仍需要排除的的数字大小，中位数，也就是这个数字的左边有一半小于它的数需要去掉，右边有一半大于它的书去掉，剩下的，就是真正的中位数。所以当left = 0 的时候，也即是目前剩下的最小的，因为比它小的一半，刚刚好被去掉完了。剩下的就是了。\r\n\r\n思想是这样的，真正处理的时候，就需要考虑很多特殊情况，因为两个数组，是没有办法把全部的数都排除，然后剩下的刚刚就是想要的，所以当有一个数组，剩下只有一个或者两个的时候，就停止排除，然后合并数组，从其中找到我们想要的数字，根据left和right可以轻松做到这一点。\r\n\r\n代码连结如下：\r\n\r\n<a title=\"https://github.com/unasm/utils/blob/test/4.c\" href=\"https://github.com/unasm/utils/blob/test/4.c\" target=\"_blank\">https://github.com/unasm/utils/blob/test/4.c</a>','Median of Two Sorted Arrays [leetcode 4]','','publish','open','open','','median-of-two-sorted-arrays-leetcode-4','','','2015-08-10 04:20:03','2015-08-10 04:20:03','',0,'http://unasm.com/?p=489',0,'post','',0),(490,1,'2015-08-10 04:19:41','2015-08-10 04:19:41','<a title=\"Median of Two Sorted Arrays \" href=\"https://leetcode.com/problems/median-of-two-sorted-arrays/\" target=\"_blank\">Median of Two Sorted Arrays</a>\r\n\r\n求两个有序数组的中位数的题，以前想了很久，没搞定，后来再看，发现原来很简单。\r\n\r\n主要还是二分的思想，但是不能做到严格意义log(m+n),只是统计意义上的log(m+n);\r\n\r\n想法很简单，就是在第一个数组中找到当前的中位数，然后在第二个数组中log(N)查找位置，看这个数字距离真正的中位数是大了，还是小了，如果小了，好，那所有小于这个数字的数都排除掉，更新待查找的区间，然后重新找新区间中位数，再次对比距离真正中位数的距离。\r\n\r\n首先确定两个变量，max1,min1，表示第一个数组的未被排除区间，min2,max2表示第二个数组的未被排除区间。left,right 表示仍需要排除的的数字大小，中位数，也就是这个数字的左边有一半小于它的数需要去掉，右边有一半大于它的书去掉，剩下的，就是真正的中位数。所以当left = 0 的时候，也即是目前剩下的最小的，因为比它小的一半，刚刚好被去掉完了。剩下的就是了。\r\n\r\n思想是这样的，真正处理的时候，就需要考虑很多特殊情况，因为两个数组，是没有办法把全部的数都排除，然后剩下的刚刚就是想要的，所以当有一个数组，剩下只有一个或者两个的时候，就停止排除，然后合并数组，从其中找到我们想要的数字，根据left和right可以轻松做到这一点。\r\n\r\n&nbsp;\r\n\r\n代码连结如下：\r\n\r\n<a title=\"https://github.com/unasm/utils/blob/test/4.c\" href=\"https://github.com/unasm/utils/blob/test/4.c\" target=\"_blank\">https://github.com/unasm/utils/blob/test/4.c</a>','Median of Two Sorted Arrays [leetcode 4]','','inherit','open','open','','489-revision-v1','','','2015-08-10 04:19:41','2015-08-10 04:19:41','',489,'http://unasm.com/2015/08/490/',0,'revision','',0),(491,1,'2015-08-10 04:20:03','2015-08-10 04:20:03','<a title=\"Median of Two Sorted Arrays \" href=\"https://leetcode.com/problems/median-of-two-sorted-arrays/\" target=\"_blank\">Median of Two Sorted Arrays</a>\r\n\r\n求两个有序数组的中位数的题，以前想了很久，没搞定，后来再看，发现原来很简单。\r\n\r\n主要还是二分的思想，但是不能做到严格意义log(m+n),只是统计意义上的log(m+n);\r\n\r\n想法很简单，就是在第一个数组中找到当前的中位数，然后在第二个数组中log(N)查找位置，看这个数字距离真正的中位数是大了，还是小了，如果小了，好，那所有小于这个数字的数都排除掉，更新待查找的区间，然后重新找新区间中位数，再次对比距离真正中位数的距离。\r\n\r\n首先确定两个变量，max1,min1，表示第一个数组的未被排除区间，min2,max2表示第二个数组的未被排除区间。left,right 表示仍需要排除的的数字大小，中位数，也就是这个数字的左边有一半小于它的数需要去掉，右边有一半大于它的书去掉，剩下的，就是真正的中位数。所以当left = 0 的时候，也即是目前剩下的最小的，因为比它小的一半，刚刚好被去掉完了。剩下的就是了。\r\n\r\n思想是这样的，真正处理的时候，就需要考虑很多特殊情况，因为两个数组，是没有办法把全部的数都排除，然后剩下的刚刚就是想要的，所以当有一个数组，剩下只有一个或者两个的时候，就停止排除，然后合并数组，从其中找到我们想要的数字，根据left和right可以轻松做到这一点。\r\n\r\n代码连结如下：\r\n\r\n<a title=\"https://github.com/unasm/utils/blob/test/4.c\" href=\"https://github.com/unasm/utils/blob/test/4.c\" target=\"_blank\">https://github.com/unasm/utils/blob/test/4.c</a>','Median of Two Sorted Arrays [leetcode 4]','','inherit','open','open','','489-revision-v1','','','2015-08-10 04:20:03','2015-08-10 04:20:03','',489,'http://unasm.com/2015/08/491/',0,'revision','',0),(492,1,'2015-08-13 03:47:31','2015-08-13 03:47:31','这个可以视为 <a title=\"redis源码分析之网络通信和事件调度篇\" href=\"http://unasm.com/2015/08/464/\" target=\"_blank\">redis源码分析之网络通信和事件调度篇</a>  的下一篇,主要涉及 ae.c + ae_epoll.c 两个文件不到一千行代码，从redis.c的main调用aeMain开始。\r\n下面是aeMain 函数的全部代码。\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n\r\n    eventLoop-&gt;stop = 0;\r\n\r\n    while (!eventLoop-&gt;stop) {\r\n\r\n        // 如果有需要在事件处理前执行的函数，那么运行它\r\n        if (eventLoop-&gt;beforesleep != NULL)\r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n\r\n        // 开始处理事件\r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);\r\n    }\r\n}\r\n[/cpp]\r\n\r\neventLoop 是redis的事件调度器，可以看到这里就是一个死循环，只要 eventLoop-&gt;stop 不置位，就会不停循环，不断地处理事务，实际上，除了在benchmark之外，没有任何地方将stop置为1，也就是永远都不会触发stop = 1 的情况。aeProcessEvents 具体处理epoll的响应事件。 在全部代码里面grep了一下，尚未发现 eventLoop-&gt;beforesleep 可以被用到的时候，应该一直都是NULL的。\r\n\r\n下面是 aeProcessEvents的定义，flags表示要处理的事件类型，根据调用的时候的参数，可以看到是要处理全部的事件类型，也就是AE_ALL_EVENTS，\r\n\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\n\r\n这是AE_ALL_EVENTS的定义，可见对于redis来说，全部事件包括时间和文本的两种事件。\r\n\r\n[cpp]\r\n#define AE_ALL_EVENTS (AE_FILE_EVENTS|AE_TIME_EVENTS)\r\n[/cpp]\r\n\r\nunix哲学里面，一切都是文件。\r\n\r\n我们步入到aeProcessEvents中，看看在redis的主循环中，到底都做了那些事情。\r\n\r\naeProcessEvents 前两个 if/else ,42行代码，主要是为了得到下一次时间事件到来还有多久，设置tvp变量，由此决定文本事件的阻塞时间，正常来说，serverCron每1ms执行一次。作者的意图，就是在不耽误后台进程处理的情况下，阻塞尽可能长的事件，获取尽可能多的响应，增大处理的效率。\r\n\r\n之后来到这一行,将得到的tvp变量和事件调度器传递给epoll处理函数，获取tvp事件内响应的全部套字节列表。epoll观察着全部的I/O变化。\r\n\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\r\n\r\n这个就是整个事件处理器的最最核心的一句，<a title=\"epoll_wait 详解\" href=\"http://unasm.com/2015/07/335/\">epoll_wait</a> ，获取tvp的时间内，注册在state-&gt;epfd上的全部响应套字节，保存在state-&gt;events中，并返回数量，保存在变量retval中。\r\n\r\n[cpp]\r\nretval = epoll_wait(state-&gt;epfd,state-&gt;events,eventLoop-&gt;setsize, tvp ? (tvp-&gt;tv_sec*1000 + tvp-&gt;tv_usec/1000) : -1);\r\n[/cpp]\r\n\r\n很经典的设计模式，观察者模式。“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\r\n\r\nstate-&gt;events中是socket描述字的列表，后面需要后续处理，调用当初注册在对应对象列表上的函数，“做出相应反应”。\r\n\r\n[cpp]\r\n\r\n for (j = 0; j &lt; numevents; j++) {\r\n// 从已就绪数组中获取事件\r\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\r\n\r\n            int mask = eventLoop-&gt;fired[j].mask;\r\n            int fd = eventLoop-&gt;fired[j].fd;\r\n            int rfired = 0;\r\n\r\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\r\n             * event removed an element that fired and we still didn\'t\r\n             * processed, so we check if the event is still valid. */\r\n            // 读事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\r\n                // rfired 确保读/写事件只能执行其中一个\r\n                rfired = 1;\r\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            // 写事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\r\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\r\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n\r\n            processed++;\r\n }\r\n[/cpp]\r\n\r\n响应之后对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\r\n\r\n读响应的后续处理函数，函数指针 rfileProc 主要是 acceptTcpHandler和 acceptUnixHandler ，如果想看具体如何处理socket的响应，可以追踪进去。\r\n\r\n而写的后续响应函数 ，保存在函数指针wfileProc中的，<span class=\"s1\">sendReplyToClie</span><span class=\"s2\">n</span><span class=\"s1\">t ，将回复用户的查询内容的，当时并不真正写，而是首先注册到epoll里面，集中处理。</span>\r\n\r\n[cpp]\r\nif (flags &amp; AE_TIME_EVENTS) processed += processTimeEvents(eventLoop);\r\n[/cpp]\r\n\r\n因为已经阻塞了tvp的时间，所以processTimeEvents中肯定是有内容需要处理的。也就是开始执行serverCron，执行redis的后台进程。\r\n\r\n关于serverCron的解析，欢迎查看 <a title=\"serverCron解析\" href=\"http://unasm.com/2015/07/394/\">http://unasm.com/2015/07/394/</a>','redis 源码分析之事件调度器 epoll','','inherit','open','open','','354-revision-v1','','','2015-08-13 03:47:31','2015-08-13 03:47:31','',354,'http://unasm.com/2015/08/492/',0,'revision','',0),(493,1,'2015-08-13 03:49:05','2015-08-13 03:49:05','这个可以视为 <a title=\"redis源码分析之网络通信和事件调度篇\" href=\"http://unasm.com/2015/08/464/\" target=\"_blank\">redis源码分析之网络通信和事件调度篇</a>  的下一篇,主要涉及 ae.c + ae_epoll.c 两个文件不到一千行代码，从redis.c的main调用aeMain开始。\r\n下面是aeMain 函数的全部代码。\r\n\r\n[cpp]\r\nvoid aeMain(aeEventLoop *eventLoop) {\r\n\r\n    eventLoop-&gt;stop = 0;\r\n\r\n    while (!eventLoop-&gt;stop) {\r\n\r\n        // 如果有需要在事件处理前执行的函数，那么运行它\r\n        if (eventLoop-&gt;beforesleep != NULL)\r\n            eventLoop-&gt;beforesleep(eventLoop);                                          \r\n\r\n        // 开始处理事件\r\n        aeProcessEvents(eventLoop, AE_ALL_EVENTS);\r\n    }\r\n}\r\n[/cpp]\r\n\r\neventLoop 是redis的事件调度器，可以看到这里就是一个死循环，只要 eventLoop-&gt;stop 不置位，就会不停循环，不断地处理事务，实际上，除了在benchmark之外，没有任何地方将stop置为1，也就是永远都不会触发stop = 1 的情况。aeProcessEvents 具体处理epoll的响应事件。 在全部代码里面grep了一下，尚未发现 eventLoop-&gt;beforesleep 可以被用到的时候，应该一直都是NULL的。\r\n\r\n下面是 aeProcessEvents的定义，flags表示要处理的事件类型，根据调用的时候的参数，可以看到是要处理全部的事件类型，也就是AE_ALL_EVENTS，\r\n\r\n[cpp]int aeProcessEvents(aeEventLoop *eventLoop, int flags) [/cpp]\r\n\r\n这是AE_ALL_EVENTS的定义，可见对于redis来说，全部事件包括时间和文本的两种事件。\r\n\r\n[cpp]\r\n#define AE_ALL_EVENTS (AE_FILE_EVENTS|AE_TIME_EVENTS)\r\n[/cpp]\r\n\r\nunix哲学里面，一切都是文件。\r\n\r\n我们步入到aeProcessEvents中，看看在redis的主循环中，到底都做了那些事情。\r\n\r\naeProcessEvents 前两个 if/else ,42行代码，主要是为了得到下一次时间事件到来还有多久，设置tvp变量，由此决定文本事件的阻塞时间，正常来说，serverCron每1ms执行一次。作者的意图，就是在不耽误后台进程处理的情况下，阻塞尽可能长的事件，获取尽可能多的响应，增大处理的效率。\r\n\r\n之后来到这一行,将得到的tvp变量和事件调度器传递给epoll处理函数，获取tvp事件内响应的全部套字节列表。epoll观察着全部的I/O变化。\r\n\r\n[cpp]numevents = aeApiPoll(eventLoop, tvp);[/cpp]\r\n\r\n这个就是整个事件处理器的最最核心的一句，<a title=\"epoll_wait 详解\" href=\"http://unasm.com/2015/07/335/\">epoll_wait</a> ，获取tvp的时间内，注册在state-&gt;epfd上的全部响应套字节，保存在state-&gt;events中，并返回数量，保存在变量retval中。\r\n\r\n[cpp]\r\nretval = epoll_wait(state-&gt;epfd,state-&gt;events,eventLoop-&gt;setsize, tvp ? (tvp-&gt;tv_sec*1000 + tvp-&gt;tv_usec/1000) : -1);\r\n[/cpp]\r\n\r\n很经典的设计模式，观察者模式。“一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应”\r\n\r\nstate-&gt;events中是socket描述字的列表，后面需要后续处理，调用当初注册在对应对象列表上的函数，“做出相应反应”。\r\n\r\n[cpp]\r\n\r\n for (j = 0; j &lt; numevents; j++) {\r\n// 从已就绪数组中获取事件\r\n            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];\r\n\r\n            int mask = eventLoop-&gt;fired[j].mask;\r\n            int fd = eventLoop-&gt;fired[j].fd;\r\n            int rfired = 0;\r\n\r\n           /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed\r\n             * event removed an element that fired and we still didn\'t\r\n             * processed, so we check if the event is still valid. */\r\n            // 读事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {\r\n                // rfired 确保读/写事件只能执行其中一个\r\n                rfired = 1;\r\n                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n            // 写事件\r\n            if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {\r\n                if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)\r\n                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);\r\n            }\r\n\r\n            processed++;\r\n }\r\n[/cpp]\r\n\r\n响应之后对应的处理函数，都注册在对应的函数指针里面aeFileEvent的rfileProc和wfileProc指针里面，这个要比nodejs的回调，感觉方便得多，因为模型简单易懂高效，也不会因为回调增加无谓的复杂度。\r\n\r\n读响应的后续处理函数，函数指针 rfileProc 主要是 acceptTcpHandler和 acceptUnixHandler ，如果想看具体如何处理socket的响应，可以追踪进去。\r\n\r\n而写的后续响应函数 ，保存在函数指针wfileProc中的，<span class=\"s1\">sendReplyToClie</span><span class=\"s2\">n</span><span class=\"s1\">t ，将回复用户的查询内容的，当时并不真正写，而是首先注册到epoll里面，集中处理。</span>\r\n\r\n当然，要回复客户端内容，并不是真的一定需要进入事件循环的，可以 使用 <span class=\"s1\">flushSl</span><span class=\"s2\">a</span><span class=\"s1\">vesOutputBuffers，立刻做出响应。</span>\r\n\r\n[cpp]\r\nif (flags &amp; AE_TIME_EVENTS) processed += processTimeEvents(eventLoop);\r\n[/cpp]\r\n\r\n因为已经阻塞了tvp的时间，所以processTimeEvents中肯定是有内容需要处理的。也就是开始执行serverCron，执行redis的后台进程。\r\n\r\n关于serverCron的解析，欢迎查看 <a title=\"serverCron解析\" href=\"http://unasm.com/2015/07/394/\">http://unasm.com/2015/07/394/</a>','redis 源码分析之事件调度器 epoll','','inherit','open','open','','354-revision-v1','','','2015-08-13 03:49:05','2015-08-13 03:49:05','',354,'http://unasm.com/2015/08/493/',0,'revision','',0),(495,1,'2015-08-17 03:46:14','2015-08-17 03:46:14','什么是golang 的 goroutines,线程，协程(Coroutine)，进程，轻量级线程？从网上搜来的资料来看，应该是更接近第四种,在用户态运行的，避免了上下文切换的线程。\r\n\r\n从官方手册得来的定义是:They\'re called <em>goroutines</em> because the existing terms—threads, coroutines, processes, and so on—convey inaccurate connotations. it is a function executing concurrently with other goroutines in the same address space.\r\n\r\n这里有一个连接，对几种并发和goroutine进行了一个比较详细的分析比较\r\n<a href=\"http://www.csdn123.com/html/blogs/20130505/9353.htm\">http://www.csdn123.com/html/blogs/20130505/9353.htm</a>\r\n\r\n下面是goroutines的调度器设计示意图。\r\n\r\n<img class=\"alignnone\" src=\"http://sports.sina.com.cn/golf/goroutine.jpg\" alt=\"goroutine设计图\" width=\"593\" height=\"593\" />\r\n\r\n&nbsp;\r\n\r\nM ： 下面汇编生成的线程，代表了实际处理运行代码的线程，通过对比pthread_create的汇编，结论是两者并不相同。包括所有的阻塞的，非阻塞的，空闲的等等。通过runtime·notewakeup,runtime·notesleep, runtime·noteclear 可以更改其运行状态。\r\n\r\nG ：就是通过 go func 创建的并发函数片段，主要存储在P(处理器)以及一个全局的G单向链表之中，如果一个G(任务)执行完毕，也会被收回空间，压缩栈之后，放在一个空闲G列表中，等待复用。\r\n\r\nP ： 虚拟出来的处理器，代表了能同时运行的M的个数，内部有一个长度为256的循环列表，存储了交给本P处理的G，多余的无法分配的，放在全局列表中，等待其他的P处理。\r\n\r\n整个模型可以抽象成排队买票的情景，M是业务员，卖票的，P是窗口的个数，G是买票的人，每个窗口只能有一个业务员处理任务，每个CPU同时只能有一个线程，业务员之间，存在轮班倒的情况，也有可能业务员因为客户的需求比较特殊，外出办理去了，也就是线程处于阻塞状态，该窗口就交给别的业务员。排队的人分两个队，一个是每个窗口前面的小队伍，还有一个是没有确定窗口的长队伍。\r\n\r\nG之所以分两处存储，主要是考虑到并发时候，读取全局列表需要锁和阻塞，经常读取，会影响效率。而全部存储在P中，又面临各个P之间分配不均，造成CPU闲置的问题。\r\n\r\n我们说下整个流程，首先在程序开始的时候，go初始化出固定个数的P，整个数量默认是1，如果环境变量有GOMAXPROCS，则设置成该值，如果调用函数<span class=\"s1\">runtime.</span><span class=\"s2\">GOMAXPROCS(),则设置成传入的值，P的个数应该根据主机的情况设置。初始化出来的P，第一个用于处理本流程，其余暂时处于Pidle状态，所有的P都保存在runtime·allp中。</span>\r\n\r\n之后系统创建一个G，用于运行main函数，在main函数中，初始化栈大小，使用一个单独的M专门用于处理newsysmon,该函数用于系统监控，完成长时间没有触发的事件，比如垃圾回收，因syscall 阻塞的P，抢占G任务通知等。该线程会尽可能的保证运行，因为M(线程)必须占有一个P(处理器)才可以运行，所以main函数的时候，失去一个空闲的P(处理器)。\r\n\r\n之后，每次编译器遇到go func就会调用newproc函数，创建并初始化一个G对象，该对象原始大小仅2K，这个也就是许多人号称的，\"可以轻松创建几万个协程的原因吧\"。\r\n\r\n初始化栈和变量之后，将G优先存储在P(处理器)本地，如果没有空位，则存储在全局列表中，因为创建该G的P(处理器)肯定是已经在运行状态了，检查还有没有一个空闲的P(处理器)，如果有，则唤醒或者新建一个M(线程)，然后该M(线程)与空闲的P结合，开始处理任务。\r\n\r\n新唤醒的M(线程)结合P(处理器)之后，需要获得G，需要被处理的任务 ，如何获取G呢，从前到后，依次检查 P的本地，全局列表，已经响应的网络任务，其他的P，再次检查全局队列，如果该过程中得到了可执行的G任务，则执行该任务。不然解除和P的绑定，P(处理器)进入空闲状态，再次检查其他的P和网络任务，如果能获得G任务，则再次申请处理器，执行G任务，如果还没有获得，只能休眠M(线程)。\r\n\r\n在一个G任务执行完毕之后，系统会调用goexit函数，依次倒序执行所有注册过的defer ，将执行完毕的G放回P.gfree复用链表中，回收空间，压缩栈，然后查找可执行的G任务，如果能找到，则再次开始执行。注意，获取可执行的G任务后，跳转使用的指令是long jmp,也就是虽然是通过递归的方式循环执行任务的，但是一旦开始，就再也不会递归回调用的地方了。也就是说，两次G任务之间，是不会回朔的。当然，考虑到G之间的彼此独立，也没有回朔的理由。\r\n\r\n这就是创建协程的汇编，不同平台略有不同，仔细和fork,pthread_create的汇编对比后，得到的结论是，这个既不是进程，也不是线程，而是go自己实现的协程。\r\n\r\n[cpp]\r\n// int32 clone(int32 flags, void *stack, M *mp, G *gp, void (*fn)(void));\r\nTEXT runtime·clone(SB),NOSPLIT,$0\r\n MOVL $120, AX // clone\r\n MOVL flags+4(SP), BX\r\n MOVL stack+8(SP), CX\r\n MOVL $0, DX // parent tid ptr\r\n MOVL $0, DI // child tid ptr\r\n\r\n // Copy mp, gp, fn off parent stack for use by child.\r\n SUBL $16, CX\r\n MOVL mm+12(SP), SI\r\n MOVL SI, 0(CX)\r\n MOVL gg+16(SP), SI\r\n MOVL SI, 4(CX)\r\n MOVL fn+20(SP), SI\r\n MOVL SI, 8(CX)\r\n MOVL $1234, 12(CX)\r\n\r\n // cannot use CALL *runtime·_vdso(SB) here, because\r\n // the stack changes during the system call (after\r\n // CALL *runtime·_vdso(SB), the child is still using\r\n // the parent\'s stack when executing its RET instruction).\r\n INT $0x80\r\n\r\n // In parent, return.\r\n CMPL AX, $0\r\n JEQ 3(PC)\r\n MOVL AX, ret+20(FP)\r\n RET\r\n\r\n // Paranoia: check that SP is as we expect.\r\n MOVL mm+8(FP), BP\r\n CMPL BP, $1234\r\n JEQ 2(PC)\r\n INT $3\r\n\r\n // Initialize AX to Linux tid\r\n MOVL $224, AX\r\n CALL *runtime·_vdso(SB)\r\n\r\n // In child on new stack. Reload registers (paranoia).\r\n MOVL 0(SP), BX // m\r\n MOVL flags+0(FP), DX // g\r\n MOVL stk+4(FP), SI // fn\r\n\r\n MOVL AX, m_procid(BX) // save tid as m-&gt;procid\r\n\r\n // set up ldt 7+id to point at m-&gt;tls.\r\n // newosproc left the id in tls[0].\r\n LEAL m_tls(BX), BP\r\n MOVL 0(BP), DI\r\n ADDL $7, DI // m0 is LDT#7. count up.\r\n // setldt(tls#, &amp;tls, sizeof tls)\r\n PUSHAL // save registers\r\n PUSHL $32 // sizeof tls\r\n PUSHL BP // &amp;tls\r\n PUSHL DI // tls #\r\n CALL runtime·setldt(SB)\r\n POPL AX\r\n POPL AX\r\n POPL AX\r\n POPAL \r\n\r\n // Now segment is established. Initialize m, g.\r\n get_tls(AX)\r\n MOVL DX, g(AX)\r\n MOVL BX, g_m(DX)\r\n\r\n CALL runtime·stackcheck(SB) // smashes AX, CX\r\n MOVL 0(DX), DX // paranoia; check they are not nil\r\n MOVL 0(BX), BX\r\n\r\n // more paranoia; check that stack splitting code works\r\n PUSHAL\r\n CALL runtime·emptyfunc(SB)\r\n POPAL \r\n\r\n CALL SI // fn()\r\n CALL runtime·exit1(SB)\r\n MOVL $0x1234, 0x1005\r\n[/cpp]\r\n','从源码角度分析 golang 协程 goroutines','','publish','open','open','','%e4%bb%8e%e6%ba%90%e7%a0%81%e8%a7%92%e5%ba%a6%e5%88%86%e6%9e%90-golang-%e5%8d%8f%e7%a8%8b-goroutine','','','2015-08-19 07:36:23','2015-08-19 07:36:23','',0,'http://unasm.com/?p=495',0,'post','',0),(496,1,'2015-08-17 03:46:14','2015-08-17 03:46:14','先占坑','从源码角度分析 golang 协程 goroutine','','inherit','open','open','','495-revision-v1','','','2015-08-17 03:46:14','2015-08-17 03:46:14','',495,'http://unasm.com/2015/08/496/',0,'revision','',0),(497,1,'2015-08-18 07:50:41','2015-08-18 07:50:41','什么是golang 的 goroutines,线程，协程，进程，轻量级线程？从网上搜来的资料来看，应该是更接近第四种,在用户态运行的，避免了上下文切换的线程。\n\n从官方手册得来的定义是:They\'re called <em>goroutines</em> because the existing terms—threads, coroutines, processes, and so on—convey inaccurate connotations. it is a function executing concurrently with other goroutines in the same address space.\n\n这里有一个连接，对几种并发和goroutine进行了一个比较详细的分析比较\n<a href=\"http://www.csdn123.com/html/blogs/20130505/9353.htm\">http://www.csdn123.com/html/blogs/20130505/9353.htm</a>\n\n下面是goroutines的调度器设计示意图。\n\n<img class=\"alignnone\" src=\"http://sports.sina.com.cn/golf/goroutine.jpg\" alt=\"goroutine设计图\" width=\"593\" height=\"593\" />\n\n&nbsp;\n\nM ： 下面汇编生成的线程，代表了实际处理运行代码的线程。包括所有的阻塞的，非阻塞的，空闲的等等。通过runtime·notewakeup,runtime·notesleep, runtime·noteclear 可以更改其运行状态。\n\nG ：就是通过go关键字而创建的并发函数片段，主要存储在P中，以及一个全局的G单向链表之中，如果一个G执行完毕，也会被收回空间，压缩栈之后，放在一个空闲G列表中，等待复用。\n\nP ： 虚拟出来的处理器，代表了能同时运行的M的个数，内部有一个长度为256的循环列表，存储了交给本P处理的G，多余的无法分配的，放在全局列表中，等待其他的P处理。\n\n整个模型可以抽象成排队买票的情景，M是业务员，卖票的，P是窗口的个数，G是买票的人，每个窗口只能有一个业务员处理任务，每个CPU同时只能有一个线程，业务员之间，存在轮班倒的情况，也有可能业务员因为客户的需求比较特殊，外出办理去了，也就是线程处于阻塞状态，该窗口就交给别的业务员。排队的人分两个队，一个是每个窗口前面的小队伍，还有一个是没有确定窗口的长队伍。\n\nG之所以分两处存储，主要是考虑到并发时候，读取全局列表需要锁和阻塞，经常读取，会影响效率。而全部存储在P中，又面临各个P之间分配不均，造成CPU闲置的问题。\n\n&nbsp;\n\n我们说下整个流程，首先在程序开始的时候，go初始化出固定个数的P，整个数量默认是1，如果环境变量有GOMAXPROCS，则设置成该值，如果调用函数<span class=\"s1\">runtime.</span><span class=\"s2\">GOMAXPROCS(),则设置成传入的值，P的个数应该根据主机的情况设置。初始化出来的P，第一个用于处理本流程，其余暂时处于Pidle状态，所有的P都保存在runtime·allp中。</span>\n\n之后系统创建一个G，用于运行main函数，在main函数中，初始化栈大小，使用一个单独的M专门用于处理newsysmon,该函数用于系统监控，完成长时间没有触发的事件，比如垃圾回收，因syscall 阻塞的P，抢占G任务通知等。该线程会尽可能的保证运行，因为M(线程)必须占有一个P(处理器)才可以运行，所以main函数的时候，失去一个空闲的P(处理器)。\n\n之后，每次编译器遇到go func就会调用newproc函数，创建并初始化一个G对象，该对象原始大小仅2K，这个也就是许多人号称的，\"可以轻松创建几万个协程的原因吧\"。\n\n初始化栈和变量之后，将G优先存储在P(处理器)本地，如果没有空位，则存储在全局列表中，因为创建该G的P(处理器)肯定是已经在运行状态了，检查还有没有一个空闲的P(处理器)，如果有，则唤醒或者新建一个M(线程)，然后该M(线程)与空闲的P结合，开始处理任务。\n\n新唤醒的M(线程)结合P(处理器)之后，需要获得G，需要被处理的任务 ，如何获取G呢，从前到后，依次检查 P的本地，全局列表，已经响应的网络任务，其他的P，再次检查全局队列，如果该过程中得到了可执行的G任务，则执行该任务。不然解除和P的绑定，P(处理器)进入空闲状态，再次检查其他的P和网络任务，如果能获得G任务，则再次申请处理器，执行G任务，如果还没有获得，只能休眠M(线程)。\n\n在一个G任务执行完毕之后，系统会调用goexit函数，依次倒序执行所有注册过的defer ，将执行完毕的G放回P.gfree复用链表中，回收空间，压缩栈，然后查找可执行的G任务，如果能找到，则再次开始执行。注意，获取可执行的G任务后，跳转使用的指令是long jmp,也就是虽然是通过递归的方式循环执行任务的，但是一旦开始，就再也不会递归回调用的地方了。也就是说，两次G任务之间，是不会回朔的。当然，考虑到G之间的彼此独立，也没有回朔的理由。\n\n这就是创建协程的汇编，不同平台略有不同，仔细和fork,pthread_create的汇编对比后，得到的结论是，这个既不是进程，也不是线程，而是go自己实现的协程。\n\n[cpp]\n// int32 clone(int32 flags, void *stack, M *mp, G *gp, void (*fn)(void));\nTEXT runtime·clone(SB),NOSPLIT,$0\n MOVL $120, AX // clone\n MOVL flags+4(SP), BX\n MOVL stack+8(SP), CX\n MOVL $0, DX // parent tid ptr\n MOVL $0, DI // child tid ptr\n\n // Copy mp, gp, fn off parent stack for use by child.\n SUBL $16, CX\n MOVL mm+12(SP), SI\n MOVL SI, 0(CX)\n MOVL gg+16(SP), SI\n MOVL SI, 4(CX)\n MOVL fn+20(SP), SI\n MOVL SI, 8(CX)\n MOVL $1234, 12(CX)\n\n // cannot use CALL *runtime·_vdso(SB) here, because\n // the stack changes during the system call (after\n // CALL *runtime·_vdso(SB), the child is still using\n // the parent\'s stack when executing its RET instruction).\n INT $0x80\n\n // In parent, return.\n CMPL AX, $0\n JEQ 3(PC)\n MOVL AX, ret+20(FP)\n RET\n\n // Paranoia: check that SP is as we expect.\n MOVL mm+8(FP), BP\n CMPL BP, $1234\n JEQ 2(PC)\n INT $3\n\n // Initialize AX to Linux tid\n MOVL $224, AX\n CALL *runtime·_vdso(SB)\n\n // In child on new stack. Reload registers (paranoia).\n MOVL 0(SP), BX // m\n MOVL flags+0(FP), DX // g\n MOVL stk+4(FP), SI // fn\n\n MOVL AX, m_procid(BX) // save tid as m-&gt;procid\n\n // set up ldt 7+id to point at m-&gt;tls.\n // newosproc left the id in tls[0].\n LEAL m_tls(BX), BP\n MOVL 0(BP), DI\n ADDL $7, DI // m0 is LDT#7. count up.\n // setldt(tls#, &amp;tls, sizeof tls)\n PUSHAL // save registers\n PUSHL $32 // sizeof tls\n PUSHL BP // &amp;tls\n PUSHL DI // tls #\n CALL runtime·setldt(SB)\n POPL AX\n POPL AX\n POPL AX\n POPAL \n\n // Now segment is established. Initialize m, g.\n get_tls(AX)\n MOVL DX, g(AX)\n MOVL BX, g_m(DX)\n\n CALL runtime·stackcheck(SB) // smashes AX, CX\n MOVL 0(DX), DX // paranoia; check they are not nil\n MOVL 0(BX), BX\n\n // more paranoia; check that stack splitting code works\n PUSHAL\n CALL runtime·emptyfunc(SB)\n POPAL \n\n CALL SI // fn()\n CALL runtime·exit1(SB)\n MOVL $0x1234, 0x1005\n[/cpp]\n','从源码角度分析 golang 协程 goroutines','','inherit','open','open','','495-autosave-v1','','','2015-08-18 07:50:41','2015-08-18 07:50:41','',495,'http://unasm.com/2015/08/497/',0,'revision','',0),(499,1,'2015-08-17 11:58:09','2015-08-17 11:58:09','什么是golang 的 goroutines,线程，协程，进程，轻量级进程？都不是，是下面的这段代码，当年没学好汇编，看不懂，但是可以断定的是肯定不是前三种一样的存在，从网上搜来的资料来看，应该是更接近第四种,在用户态运行的，避免了上下文切换的进程。\r\n\r\n这里有一个连接，对几种并发和goroutine进行了一个比较详细的分析比较\r\n<a href=\"http://www.csdn123.com/html/blogs/20130505/9353.htm\">http://www.csdn123.com/html/blogs/20130505/9353.htm</a>\r\n\r\n从官方手册得来的定义是:They\'re called <em>goroutines</em> because the existing terms—threads, coroutines, processes, and so on—convey inaccurate connotations. it is a function executing concurrently with other goroutines in the same address space.\r\n\r\n[cpp]\r\n// int32 clone(int32 flags, void *stack, M *mp, G *gp, void (*fn)(void));\r\nTEXT runtime·clone(SB),NOSPLIT,$0\r\n    MOVL    $120, AX    // clone\r\n    MOVL    flags+4(SP), BX\r\n    MOVL    stack+8(SP), CX\r\n    MOVL    $0, DX  // parent tid ptr\r\n    MOVL    $0, DI  // child tid ptr\r\n\r\n    // Copy mp, gp, fn off parent stack for use by child.\r\n    SUBL    $16, CX\r\n    MOVL    mm+12(SP), SI\r\n    MOVL    SI, 0(CX)\r\n    MOVL    gg+16(SP), SI\r\n    MOVL    SI, 4(CX)\r\n    MOVL    fn+20(SP), SI\r\n    MOVL    SI, 8(CX)\r\n    MOVL    $1234, 12(CX)\r\n\r\n    // cannot use CALL *runtime·_vdso(SB) here, because\r\n    // the stack changes during the system call (after\r\n    // CALL *runtime·_vdso(SB), the child is still using\r\n    // the parent\'s stack when executing its RET instruction).\r\n    INT $0x80\r\n\r\n    // In parent, return.\r\n    CMPL    AX, $0\r\n    JEQ 3(PC)\r\n    MOVL    AX, ret+20(FP)\r\n    RET\r\n\r\n    // Paranoia: check that SP is as we expect.\r\n    MOVL    mm+8(FP), BP\r\n    CMPL    BP, $1234\r\n    JEQ 2(PC)\r\n    INT $3\r\n\r\n    // Initialize AX to Linux tid\r\n    MOVL    $224, AX\r\n    CALL    *runtime·_vdso(SB)\r\n\r\n    // In child on new stack.  Reload registers (paranoia).\r\n    MOVL    0(SP), BX   // m\r\n    MOVL    flags+0(FP), DX // g\r\n    MOVL    stk+4(FP), SI   // fn\r\n\r\n    MOVL    AX, m_procid(BX)    // save tid as m-&gt;procid\r\n\r\n    // set up ldt 7+id to point at m-&gt;tls.\r\n    // newosproc left the id in tls[0].\r\n    LEAL    m_tls(BX), BP\r\n    MOVL    0(BP), DI\r\n    ADDL    $7, DI  // m0 is LDT#7. count up.\r\n    // setldt(tls#, &amp;tls, sizeof tls)\r\n    PUSHAL  // save registers\r\n    PUSHL   $32 // sizeof tls\r\n    PUSHL   BP  // &amp;tls\r\n    PUSHL   DI  // tls #\r\n    CALL    runtime·setldt(SB)\r\n    POPL    AX\r\n    POPL    AX\r\n    POPL    AX\r\n    POPAL \r\n\r\n    // Now segment is established.  Initialize m, g.\r\n    get_tls(AX)\r\n    MOVL    DX, g(AX)\r\n    MOVL    BX, g_m(DX)\r\n\r\n    CALL    runtime·stackcheck(SB)  // smashes AX, CX\r\n    MOVL    0(DX), DX   // paranoia; check they are not nil\r\n    MOVL    0(BX), BX\r\n\r\n    // more paranoia; check that stack splitting code works\r\n    PUSHAL\r\n    CALL    runtime·emptyfunc(SB)\r\n    POPAL \r\n\r\n    CALL    SI  // fn()\r\n    CALL    runtime·exit1(SB)\r\n    MOVL    $0x1234, 0x1005\r\n[/cpp]\r\n','从源码角度分析 golang 协程 goroutines','','inherit','open','open','','495-revision-v1','','','2015-08-17 11:58:09','2015-08-17 11:58:09','',495,'http://unasm.com/2015/08/499/',0,'revision','',0),(498,1,'2015-08-17 09:24:03','2015-08-17 09:24:03','什么是golang 的 goroutine,线程，协程，进程，轻量级进程？都不是，是下面的这段代码，当年没学好汇编，看不懂，但是可以断定的是肯定不是前三种一样的存在，从网上搜来的资料来看，应该是更接近第四种,在用户态运行的，避免了上下文切换的进程。\r\n\r\n这里有一个连接，对几种并发和goroutine进行了一个比较详细的分析比较\r\n<a href=\"http://www.csdn123.com/html/blogs/20130505/9353.htm\">http://www.csdn123.com/html/blogs/20130505/9353.htm</a>\r\n\r\n[cpp]\r\n// int32 clone(int32 flags, void *stack, M *mp, G *gp, void (*fn)(void));\r\nTEXT runtime·clone(SB),NOSPLIT,$0\r\n    MOVL    $120, AX    // clone\r\n    MOVL    flags+4(SP), BX\r\n    MOVL    stack+8(SP), CX\r\n    MOVL    $0, DX  // parent tid ptr                                                                                                                                             \r\n    MOVL    $0, DI  // child tid ptr\r\n       \r\n    // Copy mp, gp, fn off parent stack for use by child.\r\n    SUBL    $16, CX\r\n    MOVL    mm+12(SP), SI\r\n    MOVL    SI, 0(CX)\r\n    MOVL    gg+16(SP), SI\r\n    MOVL    SI, 4(CX)\r\n    MOVL    fn+20(SP), SI\r\n    MOVL    SI, 8(CX)\r\n    MOVL    $1234, 12(CX)\r\n       \r\n    // cannot use CALL *runtime·_vdso(SB) here, because\r\n    // the stack changes during the system call (after\r\n    // CALL *runtime·_vdso(SB), the child is still using\r\n    // the parent\'s stack when executing its RET instruction).\r\n    INT $0x80\r\n       \r\n    // In parent, return.\r\n    CMPL    AX, $0\r\n    JEQ 3(PC)\r\n    MOVL    AX, ret+20(FP)\r\n    RET\r\n       \r\n    // Paranoia: check that SP is as we expect.\r\n    MOVL    mm+8(FP), BP\r\n    CMPL    BP, $1234\r\n    JEQ 2(PC)\r\n    INT $3\r\n\r\n    // Initialize AX to Linux tid \r\n    MOVL    $224, AX\r\n    CALL    *runtime·_vdso(SB)\r\n             \r\n    // In child on new stack.  Reload registers (paranoia).\r\n    MOVL    0(SP), BX   // m\r\n    MOVL    flags+0(FP), DX // g\r\n    MOVL    stk+4(FP), SI   // fn\r\n             \r\n    MOVL    AX, m_procid(BX)    // save tid as m-&gt;procid\r\n             \r\n    // set up ldt 7+id to point at m-&gt;tls.\r\n    // newosproc left the id in tls[0].\r\n    LEAL    m_tls(BX), BP\r\n    MOVL    0(BP), DI\r\n    ADDL    $7, DI  // m0 is LDT#7. count up.\r\n    // setldt(tls#, &amp;tls, sizeof tls)\r\n    PUSHAL  // save registers\r\n    PUSHL   $32 // sizeof tls \r\n    PUSHL   BP  // &amp;tls\r\n    PUSHL   DI  // tls #\r\n    CALL    runtime·setldt(SB)\r\n    POPL    AX  \r\n    POPL    AX  \r\n    POPL    AX  \r\n    POPAL \r\n             \r\n    // Now segment is established.  Initialize m, g.\r\n    get_tls(AX)\r\n    MOVL    DX, g(AX)\r\n    MOVL    BX, g_m(DX)\r\n             \r\n    CALL    runtime·stackcheck(SB)  // smashes AX, CX\r\n    MOVL    0(DX), DX   // paranoia; check they are not nil\r\n    MOVL    0(BX), BX\r\n             \r\n    // more paranoia; check that stack splitting code works                                                                                                                       \r\n    PUSHAL\r\n    CALL    runtime·emptyfunc(SB)\r\n    POPAL \r\n          \r\n    CALL    SI  // fn()\r\n    CALL    runtime·exit1(SB)\r\n    MOVL    $0x1234, 0x1005\r\n[/cpp]\r\n','从源码角度分析 golang 协程 goroutine','','inherit','open','open','','495-revision-v1','','','2015-08-17 09:24:03','2015-08-17 09:24:03','',495,'http://unasm.com/2015/08/498/',0,'revision','',0),(500,1,'2015-08-18 05:48:43','2015-08-18 05:48:43','什么是golang 的 goroutines,线程，协程，进程，轻量级线程？从网上搜来的资料来看，应该是更接近第四种,在用户态运行的，避免了上下文切换的线程。\r\n\r\n这里有一个连接，对几种并发和goroutine进行了一个比较详细的分析比较\r\n<a href=\"http://www.csdn123.com/html/blogs/20130505/9353.htm\">http://www.csdn123.com/html/blogs/20130505/9353.htm</a>\r\n\r\n从官方手册得来的定义是:They\'re called <em>goroutines</em> because the existing terms—threads, coroutines, processes, and so on—convey inaccurate connotations. it is a function executing concurrently with other goroutines in the same address space.\r\n\r\n[cpp]\r\n// int32 clone(int32 flags, void *stack, M *mp, G *gp, void (*fn)(void));\r\nTEXT runtime·clone(SB),NOSPLIT,$0\r\n    MOVL    $120, AX    // clone\r\n    MOVL    flags+4(SP), BX\r\n    MOVL    stack+8(SP), CX\r\n    MOVL    $0, DX  // parent tid ptr\r\n    MOVL    $0, DI  // child tid ptr\r\n\r\n    // Copy mp, gp, fn off parent stack for use by child.\r\n    SUBL    $16, CX\r\n    MOVL    mm+12(SP), SI\r\n    MOVL    SI, 0(CX)\r\n    MOVL    gg+16(SP), SI\r\n    MOVL    SI, 4(CX)\r\n    MOVL    fn+20(SP), SI\r\n    MOVL    SI, 8(CX)\r\n    MOVL    $1234, 12(CX)\r\n\r\n    // cannot use CALL *runtime·_vdso(SB) here, because\r\n    // the stack changes during the system call (after\r\n    // CALL *runtime·_vdso(SB), the child is still using\r\n    // the parent\'s stack when executing its RET instruction).\r\n    INT $0x80\r\n\r\n    // In parent, return.\r\n    CMPL    AX, $0\r\n    JEQ 3(PC)\r\n    MOVL    AX, ret+20(FP)\r\n    RET\r\n\r\n    // Paranoia: check that SP is as we expect.\r\n    MOVL    mm+8(FP), BP\r\n    CMPL    BP, $1234\r\n    JEQ 2(PC)\r\n    INT $3\r\n\r\n    // Initialize AX to Linux tid\r\n    MOVL    $224, AX\r\n    CALL    *runtime·_vdso(SB)\r\n\r\n    // In child on new stack.  Reload registers (paranoia).\r\n    MOVL    0(SP), BX   // m\r\n    MOVL    flags+0(FP), DX // g\r\n    MOVL    stk+4(FP), SI   // fn\r\n\r\n    MOVL    AX, m_procid(BX)    // save tid as m-&gt;procid\r\n\r\n    // set up ldt 7+id to point at m-&gt;tls.\r\n    // newosproc left the id in tls[0].\r\n    LEAL    m_tls(BX), BP\r\n    MOVL    0(BP), DI\r\n    ADDL    $7, DI  // m0 is LDT#7. count up.\r\n    // setldt(tls#, &amp;tls, sizeof tls)\r\n    PUSHAL  // save registers\r\n    PUSHL   $32 // sizeof tls\r\n    PUSHL   BP  // &amp;tls\r\n    PUSHL   DI  // tls #\r\n    CALL    runtime·setldt(SB)\r\n    POPL    AX\r\n    POPL    AX\r\n    POPL    AX\r\n    POPAL \r\n\r\n    // Now segment is established.  Initialize m, g.\r\n    get_tls(AX)\r\n    MOVL    DX, g(AX)\r\n    MOVL    BX, g_m(DX)\r\n\r\n    CALL    runtime·stackcheck(SB)  // smashes AX, CX\r\n    MOVL    0(DX), DX   // paranoia; check they are not nil\r\n    MOVL    0(BX), BX\r\n\r\n    // more paranoia; check that stack splitting code works\r\n    PUSHAL\r\n    CALL    runtime·emptyfunc(SB)\r\n    POPAL \r\n\r\n    CALL    SI  // fn()\r\n    CALL    runtime·exit1(SB)\r\n    MOVL    $0x1234, 0x1005\r\n[/cpp]\r\n\r\n下面是goroutines的调度器设计示意图。\r\nM就是上面这段汇编\r\n\r\n<img class=\"alignnone\" src=\"http://sports.sina.com.cn/golf/goroutine.jpg\" alt=\"goroutine设计图\" width=\"593\" height=\"593\" /></pre>','从源码角度分析 golang 协程 goroutines','','inherit','open','open','','495-revision-v1','','','2015-08-18 05:48:43','2015-08-18 05:48:43','',495,'http://unasm.com/2015/08/500/',0,'revision','',0),(501,1,'2015-08-18 05:49:04','2015-08-18 05:49:04','什么是golang 的 goroutines,线程，协程，进程，轻量级线程？从网上搜来的资料来看，应该是更接近第四种,在用户态运行的，避免了上下文切换的线程。\r\n\r\n从官方手册得来的定义是:They\'re called <em>goroutines</em> because the existing terms—threads, coroutines, processes, and so on—convey inaccurate connotations. it is a function executing concurrently with other goroutines in the same address space.\r\n\r\n这里有一个连接，对几种并发和goroutine进行了一个比较详细的分析比较\r\n<a href=\"http://www.csdn123.com/html/blogs/20130505/9353.htm\">http://www.csdn123.com/html/blogs/20130505/9353.htm</a>\r\n\r\n&nbsp;\r\n\r\n[cpp]\r\n// int32 clone(int32 flags, void *stack, M *mp, G *gp, void (*fn)(void));\r\nTEXT runtime·clone(SB),NOSPLIT,$0\r\n    MOVL    $120, AX    // clone\r\n    MOVL    flags+4(SP), BX\r\n    MOVL    stack+8(SP), CX\r\n    MOVL    $0, DX  // parent tid ptr\r\n    MOVL    $0, DI  // child tid ptr\r\n\r\n    // Copy mp, gp, fn off parent stack for use by child.\r\n    SUBL    $16, CX\r\n    MOVL    mm+12(SP), SI\r\n    MOVL    SI, 0(CX)\r\n    MOVL    gg+16(SP), SI\r\n    MOVL    SI, 4(CX)\r\n    MOVL    fn+20(SP), SI\r\n    MOVL    SI, 8(CX)\r\n    MOVL    $1234, 12(CX)\r\n\r\n    // cannot use CALL *runtime·_vdso(SB) here, because\r\n    // the stack changes during the system call (after\r\n    // CALL *runtime·_vdso(SB), the child is still using\r\n    // the parent\'s stack when executing its RET instruction).\r\n    INT $0x80\r\n\r\n    // In parent, return.\r\n    CMPL    AX, $0\r\n    JEQ 3(PC)\r\n    MOVL    AX, ret+20(FP)\r\n    RET\r\n\r\n    // Paranoia: check that SP is as we expect.\r\n    MOVL    mm+8(FP), BP\r\n    CMPL    BP, $1234\r\n    JEQ 2(PC)\r\n    INT $3\r\n\r\n    // Initialize AX to Linux tid\r\n    MOVL    $224, AX\r\n    CALL    *runtime·_vdso(SB)\r\n\r\n    // In child on new stack.  Reload registers (paranoia).\r\n    MOVL    0(SP), BX   // m\r\n    MOVL    flags+0(FP), DX // g\r\n    MOVL    stk+4(FP), SI   // fn\r\n\r\n    MOVL    AX, m_procid(BX)    // save tid as m-&gt;procid\r\n\r\n    // set up ldt 7+id to point at m-&gt;tls.\r\n    // newosproc left the id in tls[0].\r\n    LEAL    m_tls(BX), BP\r\n    MOVL    0(BP), DI\r\n    ADDL    $7, DI  // m0 is LDT#7. count up.\r\n    // setldt(tls#, &amp;tls, sizeof tls)\r\n    PUSHAL  // save registers\r\n    PUSHL   $32 // sizeof tls\r\n    PUSHL   BP  // &amp;tls\r\n    PUSHL   DI  // tls #\r\n    CALL    runtime·setldt(SB)\r\n    POPL    AX\r\n    POPL    AX\r\n    POPL    AX\r\n    POPAL \r\n\r\n    // Now segment is established.  Initialize m, g.\r\n    get_tls(AX)\r\n    MOVL    DX, g(AX)\r\n    MOVL    BX, g_m(DX)\r\n\r\n    CALL    runtime·stackcheck(SB)  // smashes AX, CX\r\n    MOVL    0(DX), DX   // paranoia; check they are not nil\r\n    MOVL    0(BX), BX\r\n\r\n    // more paranoia; check that stack splitting code works\r\n    PUSHAL\r\n    CALL    runtime·emptyfunc(SB)\r\n    POPAL \r\n\r\n    CALL    SI  // fn()\r\n    CALL    runtime·exit1(SB)\r\n    MOVL    $0x1234, 0x1005\r\n[/cpp]\r\n\r\n下面是goroutines的调度器设计示意图。\r\nM就是上面这段汇编\r\n\r\n<img class=\"alignnone\" src=\"http://sports.sina.com.cn/golf/goroutine.jpg\" alt=\"goroutine设计图\" width=\"593\" height=\"593\" />','从源码角度分析 golang 协程 goroutines','','inherit','open','open','','495-revision-v1','','','2015-08-18 05:49:04','2015-08-18 05:49:04','',495,'http://unasm.com/2015/08/501/',0,'revision','',0),(502,1,'2015-08-18 06:26:03','2015-08-18 06:26:03','什么是golang 的 goroutines,线程，协程，进程，轻量级线程？从网上搜来的资料来看，应该是更接近第四种,在用户态运行的，避免了上下文切换的线程。\r\n\r\n从官方手册得来的定义是:They\'re called <em>goroutines</em> because the existing terms—threads, coroutines, processes, and so on—convey inaccurate connotations. it is a function executing concurrently with other goroutines in the same address space.\r\n\r\n这里有一个连接，对几种并发和goroutine进行了一个比较详细的分析比较\r\n<a href=\"http://www.csdn123.com/html/blogs/20130505/9353.htm\">http://www.csdn123.com/html/blogs/20130505/9353.htm</a>\r\n\r\n&nbsp;\r\n\r\n[cpp]\r\n// int32 clone(int32 flags, void *stack, M *mp, G *gp, void (*fn)(void));\r\nTEXT runtime·clone(SB),NOSPLIT,$0\r\n    MOVL    $120, AX    // clone\r\n    MOVL    flags+4(SP), BX\r\n    MOVL    stack+8(SP), CX\r\n    MOVL    $0, DX  // parent tid ptr\r\n    MOVL    $0, DI  // child tid ptr\r\n\r\n    // Copy mp, gp, fn off parent stack for use by child.\r\n    SUBL    $16, CX\r\n    MOVL    mm+12(SP), SI\r\n    MOVL    SI, 0(CX)\r\n    MOVL    gg+16(SP), SI\r\n    MOVL    SI, 4(CX)\r\n    MOVL    fn+20(SP), SI\r\n    MOVL    SI, 8(CX)\r\n    MOVL    $1234, 12(CX)\r\n\r\n    // cannot use CALL *runtime·_vdso(SB) here, because\r\n    // the stack changes during the system call (after\r\n    // CALL *runtime·_vdso(SB), the child is still using\r\n    // the parent\'s stack when executing its RET instruction).\r\n    INT $0x80\r\n\r\n    // In parent, return.\r\n    CMPL    AX, $0\r\n    JEQ 3(PC)\r\n    MOVL    AX, ret+20(FP)\r\n    RET\r\n\r\n    // Paranoia: check that SP is as we expect.\r\n    MOVL    mm+8(FP), BP\r\n    CMPL    BP, $1234\r\n    JEQ 2(PC)\r\n    INT $3\r\n\r\n    // Initialize AX to Linux tid\r\n    MOVL    $224, AX\r\n    CALL    *runtime·_vdso(SB)\r\n\r\n    // In child on new stack.  Reload registers (paranoia).\r\n    MOVL    0(SP), BX   // m\r\n    MOVL    flags+0(FP), DX // g\r\n    MOVL    stk+4(FP), SI   // fn\r\n\r\n    MOVL    AX, m_procid(BX)    // save tid as m-&gt;procid\r\n\r\n    // set up ldt 7+id to point at m-&gt;tls.\r\n    // newosproc left the id in tls[0].\r\n    LEAL    m_tls(BX), BP\r\n    MOVL    0(BP), DI\r\n    ADDL    $7, DI  // m0 is LDT#7. count up.\r\n    // setldt(tls#, &amp;tls, sizeof tls)\r\n    PUSHAL  // save registers\r\n    PUSHL   $32 // sizeof tls\r\n    PUSHL   BP  // &amp;tls\r\n    PUSHL   DI  // tls #\r\n    CALL    runtime·setldt(SB)\r\n    POPL    AX\r\n    POPL    AX\r\n    POPL    AX\r\n    POPAL \r\n\r\n    // Now segment is established.  Initialize m, g.\r\n    get_tls(AX)\r\n    MOVL    DX, g(AX)\r\n    MOVL    BX, g_m(DX)\r\n\r\n    CALL    runtime·stackcheck(SB)  // smashes AX, CX\r\n    MOVL    0(DX), DX   // paranoia; check they are not nil\r\n    MOVL    0(BX), BX\r\n\r\n    // more paranoia; check that stack splitting code works\r\n    PUSHAL\r\n    CALL    runtime·emptyfunc(SB)\r\n    POPAL \r\n\r\n    CALL    SI  // fn()\r\n    CALL    runtime·exit1(SB)\r\n    MOVL    $0x1234, 0x1005\r\n[/cpp]\r\n\r\n下面是goroutines的调度器设计示意图。\r\nM ： 上面这段汇编生成的线程，代表了实际处理运行代码的线程。包括所有的阻塞的，非阻塞的，空闲的等等。通过runtime·notewakeup,runtime·notesleep, runtime·noteclear 可以更改其运行状态。\r\n\r\nG ：就是通过go关键字而创建的并发函数片段，主要存储在P中，以及一个全局的G单向链表之中，如果一个G执行完毕，也会被收回空间，压缩栈之后，放在一个空闲G列表中，等待复用。\r\n\r\nP ： 虚拟出来的处理器，代表了能同时运行的M的个数，内部有一个长度为256的循环列表，存储了交给本P处理的G，多余的无法分配的，放在全局列表中，等待其他的P处理。\r\n\r\nG之所以分两处存储，主要是考虑到并发时候，读取全局列表需要锁和阻塞，经常读取，会影响效率。而全部存储在P中，又面临各个P之间分配不均，造成CPU闲置的问题。\r\n\r\n我们说下整个流程，首先在程序开始的时候，go初始化出固定个数的P，整个数量默认是1，如果环境变量有GOMAXPROCS，则设置成该值，如果调用函数<span class=\"s1\">runtime.</span><span class=\"s2\">GOMAXPROCS(),则设置成传入的值，P的个数应该根据主机的情况设置。初始化出来的P，第一个用于处理本流程，其余暂时处于Pidle状态，所有的P都保存在runtime·allp中。</span>\r\n\r\n&nbsp;\r\n\r\n<img class=\"alignnone\" src=\"http://sports.sina.com.cn/golf/goroutine.jpg\" alt=\"goroutine设计图\" width=\"593\" height=\"593\" />','从源码角度分析 golang 协程 goroutines','','inherit','open','open','','495-revision-v1','','','2015-08-18 06:26:03','2015-08-18 06:26:03','',495,'http://unasm.com/2015/08/502/',0,'revision','',0),(503,1,'2015-08-18 06:49:32','2015-08-18 06:49:32','什么是golang 的 goroutines,线程，协程，进程，轻量级线程？从网上搜来的资料来看，应该是更接近第四种,在用户态运行的，避免了上下文切换的线程。\r\n\r\n从官方手册得来的定义是:They\'re called <em>goroutines</em> because the existing terms—threads, coroutines, processes, and so on—convey inaccurate connotations. it is a function executing concurrently with other goroutines in the same address space.\r\n\r\n这里有一个连接，对几种并发和goroutine进行了一个比较详细的分析比较\r\n<a href=\"http://www.csdn123.com/html/blogs/20130505/9353.htm\">http://www.csdn123.com/html/blogs/20130505/9353.htm</a>\r\n\r\n&nbsp;\r\n\r\n[cpp]\r\n// int32 clone(int32 flags, void *stack, M *mp, G *gp, void (*fn)(void));\r\nTEXT runtime·clone(SB),NOSPLIT,$0\r\n    MOVL    $120, AX    // clone\r\n    MOVL    flags+4(SP), BX\r\n    MOVL    stack+8(SP), CX\r\n    MOVL    $0, DX  // parent tid ptr\r\n    MOVL    $0, DI  // child tid ptr\r\n\r\n    // Copy mp, gp, fn off parent stack for use by child.\r\n    SUBL    $16, CX\r\n    MOVL    mm+12(SP), SI\r\n    MOVL    SI, 0(CX)\r\n    MOVL    gg+16(SP), SI\r\n    MOVL    SI, 4(CX)\r\n    MOVL    fn+20(SP), SI\r\n    MOVL    SI, 8(CX)\r\n    MOVL    $1234, 12(CX)\r\n\r\n    // cannot use CALL *runtime·_vdso(SB) here, because\r\n    // the stack changes during the system call (after\r\n    // CALL *runtime·_vdso(SB), the child is still using\r\n    // the parent\'s stack when executing its RET instruction).\r\n    INT $0x80\r\n\r\n    // In parent, return.\r\n    CMPL    AX, $0\r\n    JEQ 3(PC)\r\n    MOVL    AX, ret+20(FP)\r\n    RET\r\n\r\n    // Paranoia: check that SP is as we expect.\r\n    MOVL    mm+8(FP), BP\r\n    CMPL    BP, $1234\r\n    JEQ 2(PC)\r\n    INT $3\r\n\r\n    // Initialize AX to Linux tid\r\n    MOVL    $224, AX\r\n    CALL    *runtime·_vdso(SB)\r\n\r\n    // In child on new stack.  Reload registers (paranoia).\r\n    MOVL    0(SP), BX   // m\r\n    MOVL    flags+0(FP), DX // g\r\n    MOVL    stk+4(FP), SI   // fn\r\n\r\n    MOVL    AX, m_procid(BX)    // save tid as m-&gt;procid\r\n\r\n    // set up ldt 7+id to point at m-&gt;tls.\r\n    // newosproc left the id in tls[0].\r\n    LEAL    m_tls(BX), BP\r\n    MOVL    0(BP), DI\r\n    ADDL    $7, DI  // m0 is LDT#7. count up.\r\n    // setldt(tls#, &amp;tls, sizeof tls)\r\n    PUSHAL  // save registers\r\n    PUSHL   $32 // sizeof tls\r\n    PUSHL   BP  // &amp;tls\r\n    PUSHL   DI  // tls #\r\n    CALL    runtime·setldt(SB)\r\n    POPL    AX\r\n    POPL    AX\r\n    POPL    AX\r\n    POPAL \r\n\r\n    // Now segment is established.  Initialize m, g.\r\n    get_tls(AX)\r\n    MOVL    DX, g(AX)\r\n    MOVL    BX, g_m(DX)\r\n\r\n    CALL    runtime·stackcheck(SB)  // smashes AX, CX\r\n    MOVL    0(DX), DX   // paranoia; check they are not nil\r\n    MOVL    0(BX), BX\r\n\r\n    // more paranoia; check that stack splitting code works\r\n    PUSHAL\r\n    CALL    runtime·emptyfunc(SB)\r\n    POPAL \r\n\r\n    CALL    SI  // fn()\r\n    CALL    runtime·exit1(SB)\r\n    MOVL    $0x1234, 0x1005\r\n[/cpp]\r\n\r\n下面是goroutines的调度器设计示意图。\r\nM ： 上面这段汇编生成的线程，代表了实际处理运行代码的线程。包括所有的阻塞的，非阻塞的，空闲的等等。通过runtime·notewakeup,runtime·notesleep, runtime·noteclear 可以更改其运行状态。\r\n\r\nG ：就是通过go关键字而创建的并发函数片段，主要存储在P中，以及一个全局的G单向链表之中，如果一个G执行完毕，也会被收回空间，压缩栈之后，放在一个空闲G列表中，等待复用。\r\n\r\nP ： 虚拟出来的处理器，代表了能同时运行的M的个数，内部有一个长度为256的循环列表，存储了交给本P处理的G，多余的无法分配的，放在全局列表中，等待其他的P处理。\r\n\r\nG之所以分两处存储，主要是考虑到并发时候，读取全局列表需要锁和阻塞，经常读取，会影响效率。而全部存储在P中，又面临各个P之间分配不均，造成CPU闲置的问题。\r\n\r\n我们说下整个流程，首先在程序开始的时候，go初始化出固定个数的P，整个数量默认是1，如果环境变量有GOMAXPROCS，则设置成该值，如果调用函数<span class=\"s1\">runtime.</span><span class=\"s2\">GOMAXPROCS(),则设置成传入的值，P的个数应该根据主机的情况设置。初始化出来的P，第一个用于处理本流程，其余暂时处于Pidle状态，所有的P都保存在runtime·allp中。</span>\r\n\r\n之后系统创建一个G，用于运行main函数，在main函数中，初始化栈大小，使用一个单独的M专门用于处理newsysmon,该函数用于系统监控，完成长时间没有触发的事件，比如垃圾回收，因syscall 阻塞的P，抢占G任务通知等。该线程会尽可能的保证运行，因为M必须占有一个P才可以运行，所以main函数的时候，失去一个P。\r\n\r\n之后，每次编译器遇到go func就会调用newproc函数，创建并初始化一个G对象，该对象原始大小仅2K，这个也就是许多人号称的，\"可以轻松创建几万个协程的原因吧\"\r\n\r\n&nbsp;\r\n\r\n<img class=\"alignnone\" src=\"http://sports.sina.com.cn/golf/goroutine.jpg\" alt=\"goroutine设计图\" width=\"593\" height=\"593\" />','从源码角度分析 golang 协程 goroutines','','inherit','open','open','','495-revision-v1','','','2015-08-18 06:49:32','2015-08-18 06:49:32','',495,'http://unasm.com/2015/08/503/',0,'revision','',0),(506,1,'2015-08-18 07:28:59','2015-08-18 07:28:59','什么是golang 的 goroutines,线程，协程，进程，轻量级线程？从网上搜来的资料来看，应该是更接近第四种,在用户态运行的，避免了上下文切换的线程。\r\n\r\n从官方手册得来的定义是:They\'re called <em>goroutines</em> because the existing terms—threads, coroutines, processes, and so on—convey inaccurate connotations. it is a function executing concurrently with other goroutines in the same address space.\r\n\r\n这里有一个连接，对几种并发和goroutine进行了一个比较详细的分析比较\r\n<a href=\"http://www.csdn123.com/html/blogs/20130505/9353.htm\">http://www.csdn123.com/html/blogs/20130505/9353.htm</a>\r\n\r\n下面是goroutines的调度器设计示意图。\r\n\r\n<img class=\"alignnone\" src=\"http://sports.sina.com.cn/golf/goroutine.jpg\" alt=\"goroutine设计图\" width=\"593\" height=\"593\" />\r\n\r\nM ： 上面这段汇编生成的线程，代表了实际处理运行代码的线程。包括所有的阻塞的，非阻塞的，空闲的等等。通过runtime·notewakeup,runtime·notesleep, runtime·noteclear 可以更改其运行状态。\r\n\r\nG ：就是通过go关键字而创建的并发函数片段，主要存储在P中，以及一个全局的G单向链表之中，如果一个G执行完毕，也会被收回空间，压缩栈之后，放在一个空闲G列表中，等待复用。\r\n\r\nP ： 虚拟出来的处理器，代表了能同时运行的M的个数，内部有一个长度为256的循环列表，存储了交给本P处理的G，多余的无法分配的，放在全局列表中，等待其他的P处理。\r\n\r\nG之所以分两处存储，主要是考虑到并发时候，读取全局列表需要锁和阻塞，经常读取，会影响效率。而全部存储在P中，又面临各个P之间分配不均，造成CPU闲置的问题。\r\n\r\n我们说下整个流程，首先在程序开始的时候，go初始化出固定个数的P，整个数量默认是1，如果环境变量有GOMAXPROCS，则设置成该值，如果调用函数<span class=\"s1\">runtime.</span><span class=\"s2\">GOMAXPROCS(),则设置成传入的值，P的个数应该根据主机的情况设置。初始化出来的P，第一个用于处理本流程，其余暂时处于Pidle状态，所有的P都保存在runtime·allp中。</span>\r\n\r\n之后系统创建一个G，用于运行main函数，在main函数中，初始化栈大小，使用一个单独的M专门用于处理newsysmon,该函数用于系统监控，完成长时间没有触发的事件，比如垃圾回收，因syscall 阻塞的P，抢占G任务通知等。该线程会尽可能的保证运行，因为M(线程)必须占有一个P(处理器)才可以运行，所以main函数的时候，失去一个空闲的P(处理器)。\r\n\r\n之后，每次编译器遇到go func就会调用newproc函数，创建并初始化一个G对象，该对象原始大小仅2K，这个也就是许多人号称的，\"可以轻松创建几万个协程的原因吧\"。\r\n\r\n初始化栈和变量之后，将G优先存储在P(处理器)本地，如果没有空位，则存储在全局列表中，因为创建该G的P(处理器)肯定是已经在运行状态了，检查还有没有一个空闲的P(处理器)，如果有，则唤醒或者新建一个M(线程)，然后该M(线程)与空闲的P结合，开始处理任务。\r\n\r\n新唤醒的M(线程)结合P(处理器)之后，需要获得G，需要被处理的任务 ，如何获取G呢，从前到后，依次检查 P的本地，全局列表，已经响应的网络任务，其他的P，再次检查全局队列，如果该过程中得到了可执行的G任务，则执行该任务。不然解除和P的绑定，P(处理器)进入空闲状态，再次检查其他的P和网络任务，如果能获得G任务，则再次申请处理器，执行G任务，如果还没有获得，只能休眠M(线程)。\r\n\r\n在一个G任务执行完毕之后，系统会调用goexit函数，依次倒序执行所有注册过的defer ，将执行完毕的G放回P.gfree复用链表中，回收空间，压缩栈，然后查找可执行的G任务，如果能找到，则再次开始执行。注意，获取可执行的G任务后，跳转使用的指令是long jmp,也就是虽然是通过递归的方式循环执行任务的，但是一旦开始，就再也不会递归回调用的地方了。也就是说，两次G任务之间，是不会回朔的。当然，考虑到G之间的彼此独立，也没有回朔的理由。\r\n\r\n这就是创建协程的汇编，不同平台略有不同，仔细和fork,pthread_create的汇编对比后，得到的结论是，这个既不是进程，也不是线程，而是go自己实现的协程。\r\n\r\n[cpp]\r\n// int32 clone(int32 flags, void *stack, M *mp, G *gp, void (*fn)(void));\r\nTEXT runtime·clone(SB),NOSPLIT,$0\r\n MOVL $120, AX // clone\r\n MOVL flags+4(SP), BX\r\n MOVL stack+8(SP), CX\r\n MOVL $0, DX // parent tid ptr\r\n MOVL $0, DI // child tid ptr\r\n\r\n // Copy mp, gp, fn off parent stack for use by child.\r\n SUBL $16, CX\r\n MOVL mm+12(SP), SI\r\n MOVL SI, 0(CX)\r\n MOVL gg+16(SP), SI\r\n MOVL SI, 4(CX)\r\n MOVL fn+20(SP), SI\r\n MOVL SI, 8(CX)\r\n MOVL $1234, 12(CX)\r\n\r\n // cannot use CALL *runtime·_vdso(SB) here, because\r\n // the stack changes during the system call (after\r\n // CALL *runtime·_vdso(SB), the child is still using\r\n // the parent\'s stack when executing its RET instruction).\r\n INT $0x80\r\n\r\n // In parent, return.\r\n CMPL AX, $0\r\n JEQ 3(PC)\r\n MOVL AX, ret+20(FP)\r\n RET\r\n\r\n // Paranoia: check that SP is as we expect.\r\n MOVL mm+8(FP), BP\r\n CMPL BP, $1234\r\n JEQ 2(PC)\r\n INT $3\r\n\r\n // Initialize AX to Linux tid\r\n MOVL $224, AX\r\n CALL *runtime·_vdso(SB)\r\n\r\n // In child on new stack. Reload registers (paranoia).\r\n MOVL 0(SP), BX // m\r\n MOVL flags+0(FP), DX // g\r\n MOVL stk+4(FP), SI // fn\r\n\r\n MOVL AX, m_procid(BX) // save tid as m-&gt;procid\r\n\r\n // set up ldt 7+id to point at m-&gt;tls.\r\n // newosproc left the id in tls[0].\r\n LEAL m_tls(BX), BP\r\n MOVL 0(BP), DI\r\n ADDL $7, DI // m0 is LDT#7. count up.\r\n // setldt(tls#, &amp;tls, sizeof tls)\r\n PUSHAL // save registers\r\n PUSHL $32 // sizeof tls\r\n PUSHL BP // &amp;tls\r\n PUSHL DI // tls #\r\n CALL runtime·setldt(SB)\r\n POPL AX\r\n POPL AX\r\n POPL AX\r\n POPAL \r\n\r\n // Now segment is established. Initialize m, g.\r\n get_tls(AX)\r\n MOVL DX, g(AX)\r\n MOVL BX, g_m(DX)\r\n\r\n CALL runtime·stackcheck(SB) // smashes AX, CX\r\n MOVL 0(DX), DX // paranoia; check they are not nil\r\n MOVL 0(BX), BX\r\n\r\n // more paranoia; check that stack splitting code works\r\n PUSHAL\r\n CALL runtime·emptyfunc(SB)\r\n POPAL \r\n\r\n CALL SI // fn()\r\n CALL runtime·exit1(SB)\r\n MOVL $0x1234, 0x1005\r\n[/cpp]\r\n','从源码角度分析 golang 协程 goroutines','','inherit','open','open','','495-revision-v1','','','2015-08-18 07:28:59','2015-08-18 07:28:59','',495,'http://unasm.com/2015/08/506/',0,'revision','',0),(504,1,'2015-08-18 07:21:56','2015-08-18 07:21:56','什么是golang 的 goroutines,线程，协程，进程，轻量级线程？从网上搜来的资料来看，应该是更接近第四种,在用户态运行的，避免了上下文切换的线程。\r\n\r\n从官方手册得来的定义是:They\'re called <em>goroutines</em> because the existing terms—threads, coroutines, processes, and so on—convey inaccurate connotations. it is a function executing concurrently with other goroutines in the same address space.\r\n\r\n这里有一个连接，对几种并发和goroutine进行了一个比较详细的分析比较\r\n<a href=\"http://www.csdn123.com/html/blogs/20130505/9353.htm\">http://www.csdn123.com/html/blogs/20130505/9353.htm</a>\r\n\r\n&nbsp;\r\n\r\n[cpp]\r\n// int32 clone(int32 flags, void *stack, M *mp, G *gp, void (*fn)(void));\r\nTEXT runtime·clone(SB),NOSPLIT,$0\r\n    MOVL    $120, AX    // clone\r\n    MOVL    flags+4(SP), BX\r\n    MOVL    stack+8(SP), CX\r\n    MOVL    $0, DX  // parent tid ptr\r\n    MOVL    $0, DI  // child tid ptr\r\n\r\n    // Copy mp, gp, fn off parent stack for use by child.\r\n    SUBL    $16, CX\r\n    MOVL    mm+12(SP), SI\r\n    MOVL    SI, 0(CX)\r\n    MOVL    gg+16(SP), SI\r\n    MOVL    SI, 4(CX)\r\n    MOVL    fn+20(SP), SI\r\n    MOVL    SI, 8(CX)\r\n    MOVL    $1234, 12(CX)\r\n\r\n    // cannot use CALL *runtime·_vdso(SB) here, because\r\n    // the stack changes during the system call (after\r\n    // CALL *runtime·_vdso(SB), the child is still using\r\n    // the parent\'s stack when executing its RET instruction).\r\n    INT $0x80\r\n\r\n    // In parent, return.\r\n    CMPL    AX, $0\r\n    JEQ 3(PC)\r\n    MOVL    AX, ret+20(FP)\r\n    RET\r\n\r\n    // Paranoia: check that SP is as we expect.\r\n    MOVL    mm+8(FP), BP\r\n    CMPL    BP, $1234\r\n    JEQ 2(PC)\r\n    INT $3\r\n\r\n    // Initialize AX to Linux tid\r\n    MOVL    $224, AX\r\n    CALL    *runtime·_vdso(SB)\r\n\r\n    // In child on new stack.  Reload registers (paranoia).\r\n    MOVL    0(SP), BX   // m\r\n    MOVL    flags+0(FP), DX // g\r\n    MOVL    stk+4(FP), SI   // fn\r\n\r\n    MOVL    AX, m_procid(BX)    // save tid as m-&gt;procid\r\n\r\n    // set up ldt 7+id to point at m-&gt;tls.\r\n    // newosproc left the id in tls[0].\r\n    LEAL    m_tls(BX), BP\r\n    MOVL    0(BP), DI\r\n    ADDL    $7, DI  // m0 is LDT#7. count up.\r\n    // setldt(tls#, &amp;tls, sizeof tls)\r\n    PUSHAL  // save registers\r\n    PUSHL   $32 // sizeof tls\r\n    PUSHL   BP  // &amp;tls\r\n    PUSHL   DI  // tls #\r\n    CALL    runtime·setldt(SB)\r\n    POPL    AX\r\n    POPL    AX\r\n    POPL    AX\r\n    POPAL \r\n\r\n    // Now segment is established.  Initialize m, g.\r\n    get_tls(AX)\r\n    MOVL    DX, g(AX)\r\n    MOVL    BX, g_m(DX)\r\n\r\n    CALL    runtime·stackcheck(SB)  // smashes AX, CX\r\n    MOVL    0(DX), DX   // paranoia; check they are not nil\r\n    MOVL    0(BX), BX\r\n\r\n    // more paranoia; check that stack splitting code works\r\n    PUSHAL\r\n    CALL    runtime·emptyfunc(SB)\r\n    POPAL \r\n\r\n    CALL    SI  // fn()\r\n    CALL    runtime·exit1(SB)\r\n    MOVL    $0x1234, 0x1005\r\n[/cpp]\r\n\r\n下面是goroutines的调度器设计示意图。\r\nM ： 上面这段汇编生成的线程，代表了实际处理运行代码的线程。包括所有的阻塞的，非阻塞的，空闲的等等。通过runtime·notewakeup,runtime·notesleep, runtime·noteclear 可以更改其运行状态。\r\n\r\nG ：就是通过go关键字而创建的并发函数片段，主要存储在P中，以及一个全局的G单向链表之中，如果一个G执行完毕，也会被收回空间，压缩栈之后，放在一个空闲G列表中，等待复用。\r\n\r\nP ： 虚拟出来的处理器，代表了能同时运行的M的个数，内部有一个长度为256的循环列表，存储了交给本P处理的G，多余的无法分配的，放在全局列表中，等待其他的P处理。\r\n\r\nG之所以分两处存储，主要是考虑到并发时候，读取全局列表需要锁和阻塞，经常读取，会影响效率。而全部存储在P中，又面临各个P之间分配不均，造成CPU闲置的问题。\r\n\r\n我们说下整个流程，首先在程序开始的时候，go初始化出固定个数的P，整个数量默认是1，如果环境变量有GOMAXPROCS，则设置成该值，如果调用函数<span class=\"s1\">runtime.</span><span class=\"s2\">GOMAXPROCS(),则设置成传入的值，P的个数应该根据主机的情况设置。初始化出来的P，第一个用于处理本流程，其余暂时处于Pidle状态，所有的P都保存在runtime·allp中。</span>\r\n\r\n之后系统创建一个G，用于运行main函数，在main函数中，初始化栈大小，使用一个单独的M专门用于处理newsysmon,该函数用于系统监控，完成长时间没有触发的事件，比如垃圾回收，因syscall 阻塞的P，抢占G任务通知等。该线程会尽可能的保证运行，因为M(线程)必须占有一个P(处理器)才可以运行，所以main函数的时候，失去一个空闲的P(处理器)。\r\n\r\n之后，每次编译器遇到go func就会调用newproc函数，创建并初始化一个G对象，该对象原始大小仅2K，这个也就是许多人号称的，\"可以轻松创建几万个协程的原因吧\"。\r\n\r\n初始化栈和变量之后，将G优先存储在P(处理器)本地，如果没有空位，则存储在全局列表中，因为创建该G的P(处理器)肯定是已经在运行状态了，检查还有没有一个空闲的P(处理器)，如果有，则唤醒或者新建一个M(线程)，然后该M(线程)与空闲的P结合，开始处理任务。\r\n\r\n新唤醒的M(线程)结合P(处理器)之后，需要获得G，需要被处理的任务 ，如何获取G呢，从前到后，依次检查 P的本地，全局列表，已经响应的网络任务，其他的P，再次检查全局队列，如果该过程中得到了可执行的G任务，则执行该任务。不然解除和P的绑定，P(处理器)进入空闲状态，再次检查其他的P和网络任务，如果能获得G任务，则再次申请处理器，执行G任务，如果还没有获得，只能休眠M(线程)。\r\n\r\n在一个G任务执行完毕之后，系统会调用goexit函数，依次倒序执行所有注册过的defer ，将执行完毕的G放回P.gfree复用链表中，回收空间，压缩栈，然后查找可执行的G任务，如果能找到，则再次开始执行。注意，获取可执行的G任务后，跳转使用的指令是long jmp,也就是虽然是通过递归的方式循环执行任务的，但是一旦开始，就再也不会递归回调用的地方了。也就是说，两次G任务之间，是不会回朔的。当然，考虑到G之间的彼此独立，也没有回朔的理由。\r\n\r\n<img class=\"alignnone\" src=\"http://sports.sina.com.cn/golf/goroutine.jpg\" alt=\"goroutine设计图\" width=\"593\" height=\"593\" />','从源码角度分析 golang 协程 goroutines','','inherit','open','open','','495-revision-v1','','','2015-08-18 07:21:56','2015-08-18 07:21:56','',495,'http://unasm.com/2015/08/504/',0,'revision','',0),(505,1,'2015-08-18 07:22:34','2015-08-18 07:22:34','什么是golang 的 goroutines,线程，协程，进程，轻量级线程？从网上搜来的资料来看，应该是更接近第四种,在用户态运行的，避免了上下文切换的线程。\r\n\r\n从官方手册得来的定义是:They\'re called <em>goroutines</em> because the existing terms—threads, coroutines, processes, and so on—convey inaccurate connotations. it is a function executing concurrently with other goroutines in the same address space.\r\n\r\n这里有一个连接，对几种并发和goroutine进行了一个比较详细的分析比较\r\n<a href=\"http://www.csdn123.com/html/blogs/20130505/9353.htm\">http://www.csdn123.com/html/blogs/20130505/9353.htm</a>\r\n\r\n&nbsp;\r\n\r\n[cpp]\r\n// int32 clone(int32 flags, void *stack, M *mp, G *gp, void (*fn)(void));\r\nTEXT runtime·clone(SB),NOSPLIT,$0\r\n    MOVL    $120, AX    // clone\r\n    MOVL    flags+4(SP), BX\r\n    MOVL    stack+8(SP), CX\r\n    MOVL    $0, DX  // parent tid ptr\r\n    MOVL    $0, DI  // child tid ptr\r\n\r\n    // Copy mp, gp, fn off parent stack for use by child.\r\n    SUBL    $16, CX\r\n    MOVL    mm+12(SP), SI\r\n    MOVL    SI, 0(CX)\r\n    MOVL    gg+16(SP), SI\r\n    MOVL    SI, 4(CX)\r\n    MOVL    fn+20(SP), SI\r\n    MOVL    SI, 8(CX)\r\n    MOVL    $1234, 12(CX)\r\n\r\n    // cannot use CALL *runtime·_vdso(SB) here, because\r\n    // the stack changes during the system call (after\r\n    // CALL *runtime·_vdso(SB), the child is still using\r\n    // the parent\'s stack when executing its RET instruction).\r\n    INT $0x80\r\n\r\n    // In parent, return.\r\n    CMPL    AX, $0\r\n    JEQ 3(PC)\r\n    MOVL    AX, ret+20(FP)\r\n    RET\r\n\r\n    // Paranoia: check that SP is as we expect.\r\n    MOVL    mm+8(FP), BP\r\n    CMPL    BP, $1234\r\n    JEQ 2(PC)\r\n    INT $3\r\n\r\n    // Initialize AX to Linux tid\r\n    MOVL    $224, AX\r\n    CALL    *runtime·_vdso(SB)\r\n\r\n    // In child on new stack.  Reload registers (paranoia).\r\n    MOVL    0(SP), BX   // m\r\n    MOVL    flags+0(FP), DX // g\r\n    MOVL    stk+4(FP), SI   // fn\r\n\r\n    MOVL    AX, m_procid(BX)    // save tid as m-&gt;procid\r\n\r\n    // set up ldt 7+id to point at m-&gt;tls.\r\n    // newosproc left the id in tls[0].\r\n    LEAL    m_tls(BX), BP\r\n    MOVL    0(BP), DI\r\n    ADDL    $7, DI  // m0 is LDT#7. count up.\r\n    // setldt(tls#, &amp;tls, sizeof tls)\r\n    PUSHAL  // save registers\r\n    PUSHL   $32 // sizeof tls\r\n    PUSHL   BP  // &amp;tls\r\n    PUSHL   DI  // tls #\r\n    CALL    runtime·setldt(SB)\r\n    POPL    AX\r\n    POPL    AX\r\n    POPL    AX\r\n    POPAL \r\n\r\n    // Now segment is established.  Initialize m, g.\r\n    get_tls(AX)\r\n    MOVL    DX, g(AX)\r\n    MOVL    BX, g_m(DX)\r\n\r\n    CALL    runtime·stackcheck(SB)  // smashes AX, CX\r\n    MOVL    0(DX), DX   // paranoia; check they are not nil\r\n    MOVL    0(BX), BX\r\n\r\n    // more paranoia; check that stack splitting code works\r\n    PUSHAL\r\n    CALL    runtime·emptyfunc(SB)\r\n    POPAL \r\n\r\n    CALL    SI  // fn()\r\n    CALL    runtime·exit1(SB)\r\n    MOVL    $0x1234, 0x1005\r\n[/cpp]\r\n\r\n下面是goroutines的调度器设计示意图。\r\n\r\n<img class=\"alignnone\" src=\"http://sports.sina.com.cn/golf/goroutine.jpg\" alt=\"goroutine设计图\" width=\"593\" height=\"593\" />\r\nM ： 上面这段汇编生成的线程，代表了实际处理运行代码的线程。包括所有的阻塞的，非阻塞的，空闲的等等。通过runtime·notewakeup,runtime·notesleep, runtime·noteclear 可以更改其运行状态。\r\n\r\nG ：就是通过go关键字而创建的并发函数片段，主要存储在P中，以及一个全局的G单向链表之中，如果一个G执行完毕，也会被收回空间，压缩栈之后，放在一个空闲G列表中，等待复用。\r\n\r\nP ： 虚拟出来的处理器，代表了能同时运行的M的个数，内部有一个长度为256的循环列表，存储了交给本P处理的G，多余的无法分配的，放在全局列表中，等待其他的P处理。\r\n\r\nG之所以分两处存储，主要是考虑到并发时候，读取全局列表需要锁和阻塞，经常读取，会影响效率。而全部存储在P中，又面临各个P之间分配不均，造成CPU闲置的问题。\r\n\r\n我们说下整个流程，首先在程序开始的时候，go初始化出固定个数的P，整个数量默认是1，如果环境变量有GOMAXPROCS，则设置成该值，如果调用函数<span class=\"s1\">runtime.</span><span class=\"s2\">GOMAXPROCS(),则设置成传入的值，P的个数应该根据主机的情况设置。初始化出来的P，第一个用于处理本流程，其余暂时处于Pidle状态，所有的P都保存在runtime·allp中。</span>\r\n\r\n之后系统创建一个G，用于运行main函数，在main函数中，初始化栈大小，使用一个单独的M专门用于处理newsysmon,该函数用于系统监控，完成长时间没有触发的事件，比如垃圾回收，因syscall 阻塞的P，抢占G任务通知等。该线程会尽可能的保证运行，因为M(线程)必须占有一个P(处理器)才可以运行，所以main函数的时候，失去一个空闲的P(处理器)。\r\n\r\n之后，每次编译器遇到go func就会调用newproc函数，创建并初始化一个G对象，该对象原始大小仅2K，这个也就是许多人号称的，\"可以轻松创建几万个协程的原因吧\"。\r\n\r\n初始化栈和变量之后，将G优先存储在P(处理器)本地，如果没有空位，则存储在全局列表中，因为创建该G的P(处理器)肯定是已经在运行状态了，检查还有没有一个空闲的P(处理器)，如果有，则唤醒或者新建一个M(线程)，然后该M(线程)与空闲的P结合，开始处理任务。\r\n\r\n新唤醒的M(线程)结合P(处理器)之后，需要获得G，需要被处理的任务 ，如何获取G呢，从前到后，依次检查 P的本地，全局列表，已经响应的网络任务，其他的P，再次检查全局队列，如果该过程中得到了可执行的G任务，则执行该任务。不然解除和P的绑定，P(处理器)进入空闲状态，再次检查其他的P和网络任务，如果能获得G任务，则再次申请处理器，执行G任务，如果还没有获得，只能休眠M(线程)。\r\n\r\n在一个G任务执行完毕之后，系统会调用goexit函数，依次倒序执行所有注册过的defer ，将执行完毕的G放回P.gfree复用链表中，回收空间，压缩栈，然后查找可执行的G任务，如果能找到，则再次开始执行。注意，获取可执行的G任务后，跳转使用的指令是long jmp,也就是虽然是通过递归的方式循环执行任务的，但是一旦开始，就再也不会递归回调用的地方了。也就是说，两次G任务之间，是不会回朔的。当然，考虑到G之间的彼此独立，也没有回朔的理由。','从源码角度分析 golang 协程 goroutines','','inherit','open','open','','495-revision-v1','','','2015-08-18 07:22:34','2015-08-18 07:22:34','',495,'http://unasm.com/2015/08/505/',0,'revision','',0),(507,1,'2015-08-18 07:31:06','2015-08-18 07:31:06','什么是golang 的 goroutines,线程，协程，进程，轻量级线程？从网上搜来的资料来看，应该是更接近第四种,在用户态运行的，避免了上下文切换的线程。\r\n\r\n从官方手册得来的定义是:They\'re called <em>goroutines</em> because the existing terms—threads, coroutines, processes, and so on—convey inaccurate connotations. it is a function executing concurrently with other goroutines in the same address space.\r\n\r\n这里有一个连接，对几种并发和goroutine进行了一个比较详细的分析比较\r\n<a href=\"http://www.csdn123.com/html/blogs/20130505/9353.htm\">http://www.csdn123.com/html/blogs/20130505/9353.htm</a>\r\n\r\n下面是goroutines的调度器设计示意图。\r\n\r\n<img class=\"alignnone\" src=\"http://sports.sina.com.cn/golf/goroutine.jpg\" alt=\"goroutine设计图\" width=\"593\" height=\"593\" />\r\n\r\nM ： 下面汇编生成的线程，代表了实际处理运行代码的线程。包括所有的阻塞的，非阻塞的，空闲的等等。通过runtime·notewakeup,runtime·notesleep, runtime·noteclear 可以更改其运行状态。\r\n\r\nG ：就是通过go关键字而创建的并发函数片段，主要存储在P中，以及一个全局的G单向链表之中，如果一个G执行完毕，也会被收回空间，压缩栈之后，放在一个空闲G列表中，等待复用。\r\n\r\nP ： 虚拟出来的处理器，代表了能同时运行的M的个数，内部有一个长度为256的循环列表，存储了交给本P处理的G，多余的无法分配的，放在全局列表中，等待其他的P处理。\r\n\r\nG之所以分两处存储，主要是考虑到并发时候，读取全局列表需要锁和阻塞，经常读取，会影响效率。而全部存储在P中，又面临各个P之间分配不均，造成CPU闲置的问题。\r\n\r\n我们说下整个流程，首先在程序开始的时候，go初始化出固定个数的P，整个数量默认是1，如果环境变量有GOMAXPROCS，则设置成该值，如果调用函数<span class=\"s1\">runtime.</span><span class=\"s2\">GOMAXPROCS(),则设置成传入的值，P的个数应该根据主机的情况设置。初始化出来的P，第一个用于处理本流程，其余暂时处于Pidle状态，所有的P都保存在runtime·allp中。</span>\r\n\r\n之后系统创建一个G，用于运行main函数，在main函数中，初始化栈大小，使用一个单独的M专门用于处理newsysmon,该函数用于系统监控，完成长时间没有触发的事件，比如垃圾回收，因syscall 阻塞的P，抢占G任务通知等。该线程会尽可能的保证运行，因为M(线程)必须占有一个P(处理器)才可以运行，所以main函数的时候，失去一个空闲的P(处理器)。\r\n\r\n之后，每次编译器遇到go func就会调用newproc函数，创建并初始化一个G对象，该对象原始大小仅2K，这个也就是许多人号称的，\"可以轻松创建几万个协程的原因吧\"。\r\n\r\n初始化栈和变量之后，将G优先存储在P(处理器)本地，如果没有空位，则存储在全局列表中，因为创建该G的P(处理器)肯定是已经在运行状态了，检查还有没有一个空闲的P(处理器)，如果有，则唤醒或者新建一个M(线程)，然后该M(线程)与空闲的P结合，开始处理任务。\r\n\r\n新唤醒的M(线程)结合P(处理器)之后，需要获得G，需要被处理的任务 ，如何获取G呢，从前到后，依次检查 P的本地，全局列表，已经响应的网络任务，其他的P，再次检查全局队列，如果该过程中得到了可执行的G任务，则执行该任务。不然解除和P的绑定，P(处理器)进入空闲状态，再次检查其他的P和网络任务，如果能获得G任务，则再次申请处理器，执行G任务，如果还没有获得，只能休眠M(线程)。\r\n\r\n在一个G任务执行完毕之后，系统会调用goexit函数，依次倒序执行所有注册过的defer ，将执行完毕的G放回P.gfree复用链表中，回收空间，压缩栈，然后查找可执行的G任务，如果能找到，则再次开始执行。注意，获取可执行的G任务后，跳转使用的指令是long jmp,也就是虽然是通过递归的方式循环执行任务的，但是一旦开始，就再也不会递归回调用的地方了。也就是说，两次G任务之间，是不会回朔的。当然，考虑到G之间的彼此独立，也没有回朔的理由。\r\n\r\n这就是创建协程的汇编，不同平台略有不同，仔细和fork,pthread_create的汇编对比后，得到的结论是，这个既不是进程，也不是线程，而是go自己实现的协程。\r\n\r\n[cpp]\r\n// int32 clone(int32 flags, void *stack, M *mp, G *gp, void (*fn)(void));\r\nTEXT runtime·clone(SB),NOSPLIT,$0\r\n MOVL $120, AX // clone\r\n MOVL flags+4(SP), BX\r\n MOVL stack+8(SP), CX\r\n MOVL $0, DX // parent tid ptr\r\n MOVL $0, DI // child tid ptr\r\n\r\n // Copy mp, gp, fn off parent stack for use by child.\r\n SUBL $16, CX\r\n MOVL mm+12(SP), SI\r\n MOVL SI, 0(CX)\r\n MOVL gg+16(SP), SI\r\n MOVL SI, 4(CX)\r\n MOVL fn+20(SP), SI\r\n MOVL SI, 8(CX)\r\n MOVL $1234, 12(CX)\r\n\r\n // cannot use CALL *runtime·_vdso(SB) here, because\r\n // the stack changes during the system call (after\r\n // CALL *runtime·_vdso(SB), the child is still using\r\n // the parent\'s stack when executing its RET instruction).\r\n INT $0x80\r\n\r\n // In parent, return.\r\n CMPL AX, $0\r\n JEQ 3(PC)\r\n MOVL AX, ret+20(FP)\r\n RET\r\n\r\n // Paranoia: check that SP is as we expect.\r\n MOVL mm+8(FP), BP\r\n CMPL BP, $1234\r\n JEQ 2(PC)\r\n INT $3\r\n\r\n // Initialize AX to Linux tid\r\n MOVL $224, AX\r\n CALL *runtime·_vdso(SB)\r\n\r\n // In child on new stack. Reload registers (paranoia).\r\n MOVL 0(SP), BX // m\r\n MOVL flags+0(FP), DX // g\r\n MOVL stk+4(FP), SI // fn\r\n\r\n MOVL AX, m_procid(BX) // save tid as m-&gt;procid\r\n\r\n // set up ldt 7+id to point at m-&gt;tls.\r\n // newosproc left the id in tls[0].\r\n LEAL m_tls(BX), BP\r\n MOVL 0(BP), DI\r\n ADDL $7, DI // m0 is LDT#7. count up.\r\n // setldt(tls#, &amp;tls, sizeof tls)\r\n PUSHAL // save registers\r\n PUSHL $32 // sizeof tls\r\n PUSHL BP // &amp;tls\r\n PUSHL DI // tls #\r\n CALL runtime·setldt(SB)\r\n POPL AX\r\n POPL AX\r\n POPL AX\r\n POPAL \r\n\r\n // Now segment is established. Initialize m, g.\r\n get_tls(AX)\r\n MOVL DX, g(AX)\r\n MOVL BX, g_m(DX)\r\n\r\n CALL runtime·stackcheck(SB) // smashes AX, CX\r\n MOVL 0(DX), DX // paranoia; check they are not nil\r\n MOVL 0(BX), BX\r\n\r\n // more paranoia; check that stack splitting code works\r\n PUSHAL\r\n CALL runtime·emptyfunc(SB)\r\n POPAL \r\n\r\n CALL SI // fn()\r\n CALL runtime·exit1(SB)\r\n MOVL $0x1234, 0x1005\r\n[/cpp]\r\n','从源码角度分析 golang 协程 goroutines','','inherit','open','open','','495-revision-v1','','','2015-08-18 07:31:06','2015-08-18 07:31:06','',495,'http://unasm.com/2015/08/507/',0,'revision','',0),(508,1,'2015-08-18 07:51:50','2015-08-18 07:51:50','什么是golang 的 goroutines,线程，协程，进程，轻量级线程？从网上搜来的资料来看，应该是更接近第四种,在用户态运行的，避免了上下文切换的线程。\r\n\r\n从官方手册得来的定义是:They\'re called <em>goroutines</em> because the existing terms—threads, coroutines, processes, and so on—convey inaccurate connotations. it is a function executing concurrently with other goroutines in the same address space.\r\n\r\n这里有一个连接，对几种并发和goroutine进行了一个比较详细的分析比较\r\n<a href=\"http://www.csdn123.com/html/blogs/20130505/9353.htm\">http://www.csdn123.com/html/blogs/20130505/9353.htm</a>\r\n\r\n下面是goroutines的调度器设计示意图。\r\n\r\n<img class=\"alignnone\" src=\"http://sports.sina.com.cn/golf/goroutine.jpg\" alt=\"goroutine设计图\" width=\"593\" height=\"593\" />\r\n\r\n&nbsp;\r\n\r\nM ： 下面汇编生成的线程，代表了实际处理运行代码的线程。包括所有的阻塞的，非阻塞的，空闲的等等。通过runtime·notewakeup,runtime·notesleep, runtime·noteclear 可以更改其运行状态。\r\n\r\nG ：就是通过go关键字而创建的并发函数片段，主要存储在P中，以及一个全局的G单向链表之中，如果一个G执行完毕，也会被收回空间，压缩栈之后，放在一个空闲G列表中，等待复用。\r\n\r\nP ： 虚拟出来的处理器，代表了能同时运行的M的个数，内部有一个长度为256的循环列表，存储了交给本P处理的G，多余的无法分配的，放在全局列表中，等待其他的P处理。\r\n\r\n整个模型可以抽象成排队买票的情景，M是业务员，卖票的，P是窗口的个数，G是买票的人，每个窗口只能有一个业务员处理任务，每个CPU同时只能有一个线程，业务员之间，存在轮班倒的情况，也有可能业务员因为客户的需求比较特殊，外出办理去了，也就是线程处于阻塞状态，该窗口就交给别的业务员。排队的人分两个队，一个是每个窗口前面的小队伍，还有一个是没有确定窗口的长队伍。\r\n\r\nG之所以分两处存储，主要是考虑到并发时候，读取全局列表需要锁和阻塞，经常读取，会影响效率。而全部存储在P中，又面临各个P之间分配不均，造成CPU闲置的问题。\r\n\r\n我们说下整个流程，首先在程序开始的时候，go初始化出固定个数的P，整个数量默认是1，如果环境变量有GOMAXPROCS，则设置成该值，如果调用函数<span class=\"s1\">runtime.</span><span class=\"s2\">GOMAXPROCS(),则设置成传入的值，P的个数应该根据主机的情况设置。初始化出来的P，第一个用于处理本流程，其余暂时处于Pidle状态，所有的P都保存在runtime·allp中。</span>\r\n\r\n之后系统创建一个G，用于运行main函数，在main函数中，初始化栈大小，使用一个单独的M专门用于处理newsysmon,该函数用于系统监控，完成长时间没有触发的事件，比如垃圾回收，因syscall 阻塞的P，抢占G任务通知等。该线程会尽可能的保证运行，因为M(线程)必须占有一个P(处理器)才可以运行，所以main函数的时候，失去一个空闲的P(处理器)。\r\n\r\n之后，每次编译器遇到go func就会调用newproc函数，创建并初始化一个G对象，该对象原始大小仅2K，这个也就是许多人号称的，\"可以轻松创建几万个协程的原因吧\"。\r\n\r\n初始化栈和变量之后，将G优先存储在P(处理器)本地，如果没有空位，则存储在全局列表中，因为创建该G的P(处理器)肯定是已经在运行状态了，检查还有没有一个空闲的P(处理器)，如果有，则唤醒或者新建一个M(线程)，然后该M(线程)与空闲的P结合，开始处理任务。\r\n\r\n新唤醒的M(线程)结合P(处理器)之后，需要获得G，需要被处理的任务 ，如何获取G呢，从前到后，依次检查 P的本地，全局列表，已经响应的网络任务，其他的P，再次检查全局队列，如果该过程中得到了可执行的G任务，则执行该任务。不然解除和P的绑定，P(处理器)进入空闲状态，再次检查其他的P和网络任务，如果能获得G任务，则再次申请处理器，执行G任务，如果还没有获得，只能休眠M(线程)。\r\n\r\n在一个G任务执行完毕之后，系统会调用goexit函数，依次倒序执行所有注册过的defer ，将执行完毕的G放回P.gfree复用链表中，回收空间，压缩栈，然后查找可执行的G任务，如果能找到，则再次开始执行。注意，获取可执行的G任务后，跳转使用的指令是long jmp,也就是虽然是通过递归的方式循环执行任务的，但是一旦开始，就再也不会递归回调用的地方了。也就是说，两次G任务之间，是不会回朔的。当然，考虑到G之间的彼此独立，也没有回朔的理由。\r\n\r\n这就是创建协程的汇编，不同平台略有不同，仔细和fork,pthread_create的汇编对比后，得到的结论是，这个既不是进程，也不是线程，而是go自己实现的协程。\r\n\r\n[cpp]\r\n// int32 clone(int32 flags, void *stack, M *mp, G *gp, void (*fn)(void));\r\nTEXT runtime·clone(SB),NOSPLIT,$0\r\n MOVL $120, AX // clone\r\n MOVL flags+4(SP), BX\r\n MOVL stack+8(SP), CX\r\n MOVL $0, DX // parent tid ptr\r\n MOVL $0, DI // child tid ptr\r\n\r\n // Copy mp, gp, fn off parent stack for use by child.\r\n SUBL $16, CX\r\n MOVL mm+12(SP), SI\r\n MOVL SI, 0(CX)\r\n MOVL gg+16(SP), SI\r\n MOVL SI, 4(CX)\r\n MOVL fn+20(SP), SI\r\n MOVL SI, 8(CX)\r\n MOVL $1234, 12(CX)\r\n\r\n // cannot use CALL *runtime·_vdso(SB) here, because\r\n // the stack changes during the system call (after\r\n // CALL *runtime·_vdso(SB), the child is still using\r\n // the parent\'s stack when executing its RET instruction).\r\n INT $0x80\r\n\r\n // In parent, return.\r\n CMPL AX, $0\r\n JEQ 3(PC)\r\n MOVL AX, ret+20(FP)\r\n RET\r\n\r\n // Paranoia: check that SP is as we expect.\r\n MOVL mm+8(FP), BP\r\n CMPL BP, $1234\r\n JEQ 2(PC)\r\n INT $3\r\n\r\n // Initialize AX to Linux tid\r\n MOVL $224, AX\r\n CALL *runtime·_vdso(SB)\r\n\r\n // In child on new stack. Reload registers (paranoia).\r\n MOVL 0(SP), BX // m\r\n MOVL flags+0(FP), DX // g\r\n MOVL stk+4(FP), SI // fn\r\n\r\n MOVL AX, m_procid(BX) // save tid as m-&gt;procid\r\n\r\n // set up ldt 7+id to point at m-&gt;tls.\r\n // newosproc left the id in tls[0].\r\n LEAL m_tls(BX), BP\r\n MOVL 0(BP), DI\r\n ADDL $7, DI // m0 is LDT#7. count up.\r\n // setldt(tls#, &amp;tls, sizeof tls)\r\n PUSHAL // save registers\r\n PUSHL $32 // sizeof tls\r\n PUSHL BP // &amp;tls\r\n PUSHL DI // tls #\r\n CALL runtime·setldt(SB)\r\n POPL AX\r\n POPL AX\r\n POPL AX\r\n POPAL \r\n\r\n // Now segment is established. Initialize m, g.\r\n get_tls(AX)\r\n MOVL DX, g(AX)\r\n MOVL BX, g_m(DX)\r\n\r\n CALL runtime·stackcheck(SB) // smashes AX, CX\r\n MOVL 0(DX), DX // paranoia; check they are not nil\r\n MOVL 0(BX), BX\r\n\r\n // more paranoia; check that stack splitting code works\r\n PUSHAL\r\n CALL runtime·emptyfunc(SB)\r\n POPAL \r\n\r\n CALL SI // fn()\r\n CALL runtime·exit1(SB)\r\n MOVL $0x1234, 0x1005\r\n[/cpp]\r\n','从源码角度分析 golang 协程 goroutines','','inherit','open','open','','495-revision-v1','','','2015-08-18 07:51:50','2015-08-18 07:51:50','',495,'http://unasm.com/2015/08/508/',0,'revision','',0),(509,1,'2015-08-18 07:52:53','2015-08-18 07:52:53','什么是golang 的 goroutines,线程，协程，进程，轻量级线程？从网上搜来的资料来看，应该是更接近第四种,在用户态运行的，避免了上下文切换的线程。\r\n\r\n从官方手册得来的定义是:They\'re called <em>goroutines</em> because the existing terms—threads, coroutines, processes, and so on—convey inaccurate connotations. it is a function executing concurrently with other goroutines in the same address space.\r\n\r\n这里有一个连接，对几种并发和goroutine进行了一个比较详细的分析比较\r\n<a href=\"http://www.csdn123.com/html/blogs/20130505/9353.htm\">http://www.csdn123.com/html/blogs/20130505/9353.htm</a>\r\n\r\n下面是goroutines的调度器设计示意图。\r\n\r\n<img class=\"alignnone\" src=\"http://sports.sina.com.cn/golf/goroutine.jpg\" alt=\"goroutine设计图\" width=\"593\" height=\"593\" />\r\n\r\n&nbsp;\r\n\r\nM ： 下面汇编生成的线程，代表了实际处理运行代码的线程。包括所有的阻塞的，非阻塞的，空闲的等等。通过runtime·notewakeup,runtime·notesleep, runtime·noteclear 可以更改其运行状态。\r\n\r\nG ：就是通过 go func 创建的并发函数片段，主要存储在P(处理器)以及一个全局的G单向链表之中，如果一个G(任务)执行完毕，也会被收回空间，压缩栈之后，放在一个空闲G列表中，等待复用。\r\n\r\nP ： 虚拟出来的处理器，代表了能同时运行的M的个数，内部有一个长度为256的循环列表，存储了交给本P处理的G，多余的无法分配的，放在全局列表中，等待其他的P处理。\r\n\r\n整个模型可以抽象成排队买票的情景，M是业务员，卖票的，P是窗口的个数，G是买票的人，每个窗口只能有一个业务员处理任务，每个CPU同时只能有一个线程，业务员之间，存在轮班倒的情况，也有可能业务员因为客户的需求比较特殊，外出办理去了，也就是线程处于阻塞状态，该窗口就交给别的业务员。排队的人分两个队，一个是每个窗口前面的小队伍，还有一个是没有确定窗口的长队伍。\r\n\r\nG之所以分两处存储，主要是考虑到并发时候，读取全局列表需要锁和阻塞，经常读取，会影响效率。而全部存储在P中，又面临各个P之间分配不均，造成CPU闲置的问题。\r\n\r\n我们说下整个流程，首先在程序开始的时候，go初始化出固定个数的P，整个数量默认是1，如果环境变量有GOMAXPROCS，则设置成该值，如果调用函数<span class=\"s1\">runtime.</span><span class=\"s2\">GOMAXPROCS(),则设置成传入的值，P的个数应该根据主机的情况设置。初始化出来的P，第一个用于处理本流程，其余暂时处于Pidle状态，所有的P都保存在runtime·allp中。</span>\r\n\r\n之后系统创建一个G，用于运行main函数，在main函数中，初始化栈大小，使用一个单独的M专门用于处理newsysmon,该函数用于系统监控，完成长时间没有触发的事件，比如垃圾回收，因syscall 阻塞的P，抢占G任务通知等。该线程会尽可能的保证运行，因为M(线程)必须占有一个P(处理器)才可以运行，所以main函数的时候，失去一个空闲的P(处理器)。\r\n\r\n之后，每次编译器遇到go func就会调用newproc函数，创建并初始化一个G对象，该对象原始大小仅2K，这个也就是许多人号称的，\"可以轻松创建几万个协程的原因吧\"。\r\n\r\n初始化栈和变量之后，将G优先存储在P(处理器)本地，如果没有空位，则存储在全局列表中，因为创建该G的P(处理器)肯定是已经在运行状态了，检查还有没有一个空闲的P(处理器)，如果有，则唤醒或者新建一个M(线程)，然后该M(线程)与空闲的P结合，开始处理任务。\r\n\r\n新唤醒的M(线程)结合P(处理器)之后，需要获得G，需要被处理的任务 ，如何获取G呢，从前到后，依次检查 P的本地，全局列表，已经响应的网络任务，其他的P，再次检查全局队列，如果该过程中得到了可执行的G任务，则执行该任务。不然解除和P的绑定，P(处理器)进入空闲状态，再次检查其他的P和网络任务，如果能获得G任务，则再次申请处理器，执行G任务，如果还没有获得，只能休眠M(线程)。\r\n\r\n在一个G任务执行完毕之后，系统会调用goexit函数，依次倒序执行所有注册过的defer ，将执行完毕的G放回P.gfree复用链表中，回收空间，压缩栈，然后查找可执行的G任务，如果能找到，则再次开始执行。注意，获取可执行的G任务后，跳转使用的指令是long jmp,也就是虽然是通过递归的方式循环执行任务的，但是一旦开始，就再也不会递归回调用的地方了。也就是说，两次G任务之间，是不会回朔的。当然，考虑到G之间的彼此独立，也没有回朔的理由。\r\n\r\n这就是创建协程的汇编，不同平台略有不同，仔细和fork,pthread_create的汇编对比后，得到的结论是，这个既不是进程，也不是线程，而是go自己实现的协程。\r\n\r\n[cpp]\r\n// int32 clone(int32 flags, void *stack, M *mp, G *gp, void (*fn)(void));\r\nTEXT runtime·clone(SB),NOSPLIT,$0\r\n MOVL $120, AX // clone\r\n MOVL flags+4(SP), BX\r\n MOVL stack+8(SP), CX\r\n MOVL $0, DX // parent tid ptr\r\n MOVL $0, DI // child tid ptr\r\n\r\n // Copy mp, gp, fn off parent stack for use by child.\r\n SUBL $16, CX\r\n MOVL mm+12(SP), SI\r\n MOVL SI, 0(CX)\r\n MOVL gg+16(SP), SI\r\n MOVL SI, 4(CX)\r\n MOVL fn+20(SP), SI\r\n MOVL SI, 8(CX)\r\n MOVL $1234, 12(CX)\r\n\r\n // cannot use CALL *runtime·_vdso(SB) here, because\r\n // the stack changes during the system call (after\r\n // CALL *runtime·_vdso(SB), the child is still using\r\n // the parent\'s stack when executing its RET instruction).\r\n INT $0x80\r\n\r\n // In parent, return.\r\n CMPL AX, $0\r\n JEQ 3(PC)\r\n MOVL AX, ret+20(FP)\r\n RET\r\n\r\n // Paranoia: check that SP is as we expect.\r\n MOVL mm+8(FP), BP\r\n CMPL BP, $1234\r\n JEQ 2(PC)\r\n INT $3\r\n\r\n // Initialize AX to Linux tid\r\n MOVL $224, AX\r\n CALL *runtime·_vdso(SB)\r\n\r\n // In child on new stack. Reload registers (paranoia).\r\n MOVL 0(SP), BX // m\r\n MOVL flags+0(FP), DX // g\r\n MOVL stk+4(FP), SI // fn\r\n\r\n MOVL AX, m_procid(BX) // save tid as m-&gt;procid\r\n\r\n // set up ldt 7+id to point at m-&gt;tls.\r\n // newosproc left the id in tls[0].\r\n LEAL m_tls(BX), BP\r\n MOVL 0(BP), DI\r\n ADDL $7, DI // m0 is LDT#7. count up.\r\n // setldt(tls#, &amp;tls, sizeof tls)\r\n PUSHAL // save registers\r\n PUSHL $32 // sizeof tls\r\n PUSHL BP // &amp;tls\r\n PUSHL DI // tls #\r\n CALL runtime·setldt(SB)\r\n POPL AX\r\n POPL AX\r\n POPL AX\r\n POPAL \r\n\r\n // Now segment is established. Initialize m, g.\r\n get_tls(AX)\r\n MOVL DX, g(AX)\r\n MOVL BX, g_m(DX)\r\n\r\n CALL runtime·stackcheck(SB) // smashes AX, CX\r\n MOVL 0(DX), DX // paranoia; check they are not nil\r\n MOVL 0(BX), BX\r\n\r\n // more paranoia; check that stack splitting code works\r\n PUSHAL\r\n CALL runtime·emptyfunc(SB)\r\n POPAL \r\n\r\n CALL SI // fn()\r\n CALL runtime·exit1(SB)\r\n MOVL $0x1234, 0x1005\r\n[/cpp]\r\n','从源码角度分析 golang 协程 goroutines','','inherit','open','open','','495-revision-v1','','','2015-08-18 07:52:53','2015-08-18 07:52:53','',495,'http://unasm.com/2015/08/509/',0,'revision','',0),(510,1,'2015-08-18 07:56:53','2015-08-18 07:56:53','什么是golang 的 goroutines,线程，协程(Coroutine)，进程，轻量级线程？从网上搜来的资料来看，应该是更接近第四种,在用户态运行的，避免了上下文切换的线程。\r\n\r\n从官方手册得来的定义是:They\'re called <em>goroutines</em> because the existing terms—threads, coroutines, processes, and so on—convey inaccurate connotations. it is a function executing concurrently with other goroutines in the same address space.\r\n\r\n这里有一个连接，对几种并发和goroutine进行了一个比较详细的分析比较\r\n<a href=\"http://www.csdn123.com/html/blogs/20130505/9353.htm\">http://www.csdn123.com/html/blogs/20130505/9353.htm</a>\r\n\r\n下面是goroutines的调度器设计示意图。\r\n\r\n<img class=\"alignnone\" src=\"http://sports.sina.com.cn/golf/goroutine.jpg\" alt=\"goroutine设计图\" width=\"593\" height=\"593\" />\r\n\r\n&nbsp;\r\n\r\nM ： 下面汇编生成的线程，代表了实际处理运行代码的线程。包括所有的阻塞的，非阻塞的，空闲的等等。通过runtime·notewakeup,runtime·notesleep, runtime·noteclear 可以更改其运行状态。\r\n\r\nG ：就是通过 go func 创建的并发函数片段，主要存储在P(处理器)以及一个全局的G单向链表之中，如果一个G(任务)执行完毕，也会被收回空间，压缩栈之后，放在一个空闲G列表中，等待复用。\r\n\r\nP ： 虚拟出来的处理器，代表了能同时运行的M的个数，内部有一个长度为256的循环列表，存储了交给本P处理的G，多余的无法分配的，放在全局列表中，等待其他的P处理。\r\n\r\n整个模型可以抽象成排队买票的情景，M是业务员，卖票的，P是窗口的个数，G是买票的人，每个窗口只能有一个业务员处理任务，每个CPU同时只能有一个线程，业务员之间，存在轮班倒的情况，也有可能业务员因为客户的需求比较特殊，外出办理去了，也就是线程处于阻塞状态，该窗口就交给别的业务员。排队的人分两个队，一个是每个窗口前面的小队伍，还有一个是没有确定窗口的长队伍。\r\n\r\nG之所以分两处存储，主要是考虑到并发时候，读取全局列表需要锁和阻塞，经常读取，会影响效率。而全部存储在P中，又面临各个P之间分配不均，造成CPU闲置的问题。\r\n\r\n我们说下整个流程，首先在程序开始的时候，go初始化出固定个数的P，整个数量默认是1，如果环境变量有GOMAXPROCS，则设置成该值，如果调用函数<span class=\"s1\">runtime.</span><span class=\"s2\">GOMAXPROCS(),则设置成传入的值，P的个数应该根据主机的情况设置。初始化出来的P，第一个用于处理本流程，其余暂时处于Pidle状态，所有的P都保存在runtime·allp中。</span>\r\n\r\n之后系统创建一个G，用于运行main函数，在main函数中，初始化栈大小，使用一个单独的M专门用于处理newsysmon,该函数用于系统监控，完成长时间没有触发的事件，比如垃圾回收，因syscall 阻塞的P，抢占G任务通知等。该线程会尽可能的保证运行，因为M(线程)必须占有一个P(处理器)才可以运行，所以main函数的时候，失去一个空闲的P(处理器)。\r\n\r\n之后，每次编译器遇到go func就会调用newproc函数，创建并初始化一个G对象，该对象原始大小仅2K，这个也就是许多人号称的，\"可以轻松创建几万个协程的原因吧\"。\r\n\r\n初始化栈和变量之后，将G优先存储在P(处理器)本地，如果没有空位，则存储在全局列表中，因为创建该G的P(处理器)肯定是已经在运行状态了，检查还有没有一个空闲的P(处理器)，如果有，则唤醒或者新建一个M(线程)，然后该M(线程)与空闲的P结合，开始处理任务。\r\n\r\n新唤醒的M(线程)结合P(处理器)之后，需要获得G，需要被处理的任务 ，如何获取G呢，从前到后，依次检查 P的本地，全局列表，已经响应的网络任务，其他的P，再次检查全局队列，如果该过程中得到了可执行的G任务，则执行该任务。不然解除和P的绑定，P(处理器)进入空闲状态，再次检查其他的P和网络任务，如果能获得G任务，则再次申请处理器，执行G任务，如果还没有获得，只能休眠M(线程)。\r\n\r\n在一个G任务执行完毕之后，系统会调用goexit函数，依次倒序执行所有注册过的defer ，将执行完毕的G放回P.gfree复用链表中，回收空间，压缩栈，然后查找可执行的G任务，如果能找到，则再次开始执行。注意，获取可执行的G任务后，跳转使用的指令是long jmp,也就是虽然是通过递归的方式循环执行任务的，但是一旦开始，就再也不会递归回调用的地方了。也就是说，两次G任务之间，是不会回朔的。当然，考虑到G之间的彼此独立，也没有回朔的理由。\r\n\r\n这就是创建协程的汇编，不同平台略有不同，仔细和fork,pthread_create的汇编对比后，得到的结论是，这个既不是进程，也不是线程，而是go自己实现的协程。\r\n\r\n[cpp]\r\n// int32 clone(int32 flags, void *stack, M *mp, G *gp, void (*fn)(void));\r\nTEXT runtime·clone(SB),NOSPLIT,$0\r\n MOVL $120, AX // clone\r\n MOVL flags+4(SP), BX\r\n MOVL stack+8(SP), CX\r\n MOVL $0, DX // parent tid ptr\r\n MOVL $0, DI // child tid ptr\r\n\r\n // Copy mp, gp, fn off parent stack for use by child.\r\n SUBL $16, CX\r\n MOVL mm+12(SP), SI\r\n MOVL SI, 0(CX)\r\n MOVL gg+16(SP), SI\r\n MOVL SI, 4(CX)\r\n MOVL fn+20(SP), SI\r\n MOVL SI, 8(CX)\r\n MOVL $1234, 12(CX)\r\n\r\n // cannot use CALL *runtime·_vdso(SB) here, because\r\n // the stack changes during the system call (after\r\n // CALL *runtime·_vdso(SB), the child is still using\r\n // the parent\'s stack when executing its RET instruction).\r\n INT $0x80\r\n\r\n // In parent, return.\r\n CMPL AX, $0\r\n JEQ 3(PC)\r\n MOVL AX, ret+20(FP)\r\n RET\r\n\r\n // Paranoia: check that SP is as we expect.\r\n MOVL mm+8(FP), BP\r\n CMPL BP, $1234\r\n JEQ 2(PC)\r\n INT $3\r\n\r\n // Initialize AX to Linux tid\r\n MOVL $224, AX\r\n CALL *runtime·_vdso(SB)\r\n\r\n // In child on new stack. Reload registers (paranoia).\r\n MOVL 0(SP), BX // m\r\n MOVL flags+0(FP), DX // g\r\n MOVL stk+4(FP), SI // fn\r\n\r\n MOVL AX, m_procid(BX) // save tid as m-&gt;procid\r\n\r\n // set up ldt 7+id to point at m-&gt;tls.\r\n // newosproc left the id in tls[0].\r\n LEAL m_tls(BX), BP\r\n MOVL 0(BP), DI\r\n ADDL $7, DI // m0 is LDT#7. count up.\r\n // setldt(tls#, &amp;tls, sizeof tls)\r\n PUSHAL // save registers\r\n PUSHL $32 // sizeof tls\r\n PUSHL BP // &amp;tls\r\n PUSHL DI // tls #\r\n CALL runtime·setldt(SB)\r\n POPL AX\r\n POPL AX\r\n POPL AX\r\n POPAL \r\n\r\n // Now segment is established. Initialize m, g.\r\n get_tls(AX)\r\n MOVL DX, g(AX)\r\n MOVL BX, g_m(DX)\r\n\r\n CALL runtime·stackcheck(SB) // smashes AX, CX\r\n MOVL 0(DX), DX // paranoia; check they are not nil\r\n MOVL 0(BX), BX\r\n\r\n // more paranoia; check that stack splitting code works\r\n PUSHAL\r\n CALL runtime·emptyfunc(SB)\r\n POPAL \r\n\r\n CALL SI // fn()\r\n CALL runtime·exit1(SB)\r\n MOVL $0x1234, 0x1005\r\n[/cpp]\r\n','从源码角度分析 golang 协程 goroutines','','inherit','open','open','','495-revision-v1','','','2015-08-18 07:56:53','2015-08-18 07:56:53','',495,'http://unasm.com/2015/08/510/',0,'revision','',0),(511,1,'2015-08-19 07:35:23','2015-08-19 07:35:23','什么是golang 的 goroutines,线程，协程(Coroutine)，进程，轻量级线程？从网上搜来的资料来看，应该是更接近第四种,在用户态运行的，避免了上下文切换的线程。\r\n\r\n从官方手册得来的定义是:They\'re called <em>goroutines</em> because the existing terms—threads, coroutines, processes, and so on—convey inaccurate connotations. it is a function executing concurrently with other goroutines in the same address space.\r\n\r\n这里有一个连接，对几种并发和goroutine进行了一个比较详细的分析比较\r\n<a href=\"http://www.csdn123.com/html/blogs/20130505/9353.htm\">http://www.csdn123.com/html/blogs/20130505/9353.htm</a>\r\n\r\n下面是goroutines的调度器设计示意图。\r\n\r\n<img class=\"alignnone\" src=\"http://sports.sina.com.cn/golf/goroutine.jpg\" alt=\"goroutine设计图\" width=\"593\" height=\"593\" />\r\n\r\n&nbsp;\r\n\r\nM ： 下面汇编生成的线程，代表了实际处理运行代码的线程，通过对比pthread_create的汇编，结论是两者并不相同。包括所有的阻塞的，非阻塞的，空闲的等等。通过runtime·notewakeup,runtime·notesleep, runtime·noteclear 可以更改其运行状态。\r\n\r\nG ：就是通过 go func 创建的并发函数片段，主要存储在P(处理器)以及一个全局的G单向链表之中，如果一个G(任务)执行完毕，也会被收回空间，压缩栈之后，放在一个空闲G列表中，等待复用。\r\n\r\nP ： 虚拟出来的处理器，代表了能同时运行的M的个数，内部有一个长度为256的循环列表，存储了交给本P处理的G，多余的无法分配的，放在全局列表中，等待其他的P处理。\r\n\r\n整个模型可以抽象成排队买票的情景，M是业务员，卖票的，P是窗口的个数，G是买票的人，每个窗口只能有一个业务员处理任务，每个CPU同时只能有一个线程，业务员之间，存在轮班倒的情况，也有可能业务员因为客户的需求比较特殊，外出办理去了，也就是线程处于阻塞状态，该窗口就交给别的业务员。排队的人分两个队，一个是每个窗口前面的小队伍，还有一个是没有确定窗口的长队伍。\r\n\r\nG之所以分两处存储，主要是考虑到并发时候，读取全局列表需要锁和阻塞，经常读取，会影响效率。而全部存储在P中，又面临各个P之间分配不均，造成CPU闲置的问题。\r\n\r\n我们说下整个流程，首先在程序开始的时候，go初始化出固定个数的P，整个数量默认是1，如果环境变量有GOMAXPROCS，则设置成该值，如果调用函数<span class=\"s1\">runtime.</span><span class=\"s2\">GOMAXPROCS(),则设置成传入的值，P的个数应该根据主机的情况设置。初始化出来的P，第一个用于处理本流程，其余暂时处于Pidle状态，所有的P都保存在runtime·allp中。</span>\r\n\r\n之后系统创建一个G，用于运行main函数，在main函数中，初始化栈大小，使用一个单独的M专门用于处理newsysmon,该函数用于系统监控，完成长时间没有触发的事件，比如垃圾回收，因syscall 阻塞的P，抢占G任务通知等。该线程会尽可能的保证运行，因为M(线程)必须占有一个P(处理器)才可以运行，所以main函数的时候，失去一个空闲的P(处理器)。\r\n\r\n之后，每次编译器遇到go func就会调用newproc函数，创建并初始化一个G对象，该对象原始大小仅2K，这个也就是许多人号称的，\"可以轻松创建几万个协程的原因吧\"。\r\n\r\n初始化栈和变量之后，将G优先存储在P(处理器)本地，如果没有空位，则存储在全局列表中，因为创建该G的P(处理器)肯定是已经在运行状态了，检查还有没有一个空闲的P(处理器)，如果有，则唤醒或者新建一个M(线程)，然后该M(线程)与空闲的P结合，开始处理任务。\r\n\r\n新唤醒的M(线程)结合P(处理器)之后，需要获得G，需要被处理的任务 ，如何获取G呢，从前到后，依次检查 P的本地，全局列表，已经响应的网络任务，其他的P，再次检查全局队列，如果该过程中得到了可执行的G任务，则执行该任务。不然解除和P的绑定，P(处理器)进入空闲状态，再次检查其他的P和网络任务，如果能获得G任务，则再次申请处理器，执行G任务，如果还没有获得，只能休眠M(线程)。\r\n\r\n在一个G任务执行完毕之后，系统会调用goexit函数，依次倒序执行所有注册过的defer ，将执行完毕的G放回P.gfree复用链表中，回收空间，压缩栈，然后查找可执行的G任务，如果能找到，则再次开始执行。注意，获取可执行的G任务后，跳转使用的指令是long jmp,也就是虽然是通过递归的方式循环执行任务的，但是一旦开始，就再也不会递归回调用的地方了。也就是说，两次G任务之间，是不会回朔的。当然，考虑到G之间的彼此独立，也没有回朔的理由。\r\n\r\n这就是创建协程的汇编，不同平台略有不同，仔细和fork,pthread_create的汇编对比后，得到的结论是，这个既不是进程，也不是线程，而是go自己实现的协程。\r\n\r\n[cpp]\r\n// int32 clone(int32 flags, void *stack, M *mp, G *gp, void (*fn)(void));\r\nTEXT runtime·clone(SB),NOSPLIT,$0\r\n MOVL $120, AX // clone\r\n MOVL flags+4(SP), BX\r\n MOVL stack+8(SP), CX\r\n MOVL $0, DX // parent tid ptr\r\n MOVL $0, DI // child tid ptr\r\n\r\n // Copy mp, gp, fn off parent stack for use by child.\r\n SUBL $16, CX\r\n MOVL mm+12(SP), SI\r\n MOVL SI, 0(CX)\r\n MOVL gg+16(SP), SI\r\n MOVL SI, 4(CX)\r\n MOVL fn+20(SP), SI\r\n MOVL SI, 8(CX)\r\n MOVL $1234, 12(CX)\r\n\r\n // cannot use CALL *runtime·_vdso(SB) here, because\r\n // the stack changes during the system call (after\r\n // CALL *runtime·_vdso(SB), the child is still using\r\n // the parent\'s stack when executing its RET instruction).\r\n INT $0x80\r\n\r\n // In parent, return.\r\n CMPL AX, $0\r\n JEQ 3(PC)\r\n MOVL AX, ret+20(FP)\r\n RET\r\n\r\n // Paranoia: check that SP is as we expect.\r\n MOVL mm+8(FP), BP\r\n CMPL BP, $1234\r\n JEQ 2(PC)\r\n INT $3\r\n\r\n // Initialize AX to Linux tid\r\n MOVL $224, AX\r\n CALL *runtime·_vdso(SB)\r\n\r\n // In child on new stack. Reload registers (paranoia).\r\n MOVL 0(SP), BX // m\r\n MOVL flags+0(FP), DX // g\r\n MOVL stk+4(FP), SI // fn\r\n\r\n MOVL AX, m_procid(BX) // save tid as m-&gt;procid\r\n\r\n // set up ldt 7+id to point at m-&gt;tls.\r\n // newosproc left the id in tls[0].\r\n LEAL m_tls(BX), BP\r\n MOVL 0(BP), DI\r\n ADDL $7, DI // m0 is LDT#7. count up.\r\n // setldt(tls#, &amp;tls, sizeof tls)\r\n PUSHAL // save registers\r\n PUSHL $32 // sizeof tls\r\n PUSHL BP // &amp;tls\r\n PUSHL DI // tls #\r\n CALL runtime·setldt(SB)\r\n POPL AX\r\n POPL AX\r\n POPL AX\r\n POPAL \r\n\r\n // Now segment is established. Initialize m, g.\r\n get_tls(AX)\r\n MOVL DX, g(AX)\r\n MOVL BX, g_m(DX)\r\n\r\n CALL runtime·stackcheck(SB) // smashes AX, CX\r\n MOVL 0(DX), DX // paranoia; check they are not nil\r\n MOVL 0(BX), BX\r\n\r\n // more paranoia; check that stack splitting code works\r\n PUSHAL\r\n CALL runtime·emptyfunc(SB)\r\n POPAL \r\n\r\n CALL SI // fn()\r\n CALL runtime·exit1(SB)\r\n MOVL $0x1234, 0x1005\r\n[/cpp]\r\n','从源码角度分析 golang 协程 goroutines','','inherit','open','open','','495-revision-v1','','','2015-08-19 07:35:23','2015-08-19 07:35:23','',495,'http://unasm.com/2015/08/511/',0,'revision','',0),(512,1,'2015-08-24 02:12:22','2015-08-24 02:12:22','在redis 2.8之前，是没有日志追加的，主从每次断开之后，从服务器与主服务器再次连接的时候，主服务器是把自己的全部内容通过bgsave生成一个RDB文件，传递给从服务器，从服务器根据全量的文件初始化redis数据库。在 唐福林大神 给我们开redis培训的时候，就提到了redis的这个问题，一个TCP连接的崩溃就会导致大量数据的传输，以至于不得不hash打散，减小每个端口的数据量。\r\n\r\nredis之后，有断开重连，追加日志的功能的，也就是redis的主从断开之后，主新加了300k的内容之后，从库再次连接，不用同步全量的3G内容，只需要同步这新加的300k数据就好。\r\n\r\n我们先说一下这个部分重同步的实现机制，主服务器维护一个循环队列，从服务器维护一个offset变量，每次与从服务器同步之后，从服务器都会将同步的字节量加到offset中，表示目前从主服务器获得的全部日志量，主服务器也会将这些传递给从服务器的数据保存在循环队列中，维护两个变量server.repl_backlog_off 以及server.repl_backlog_histlen ，前者表示循环队列中保存的，日志量的最小值，小于该值的日志都不在循环队列中，后者表示队列中数据的长度。加起来就是循环队列的全部数据量。\r\n\r\nsync请求的时候，从服务器将offset 传递过来，主服务器判断该offset值之后的数据，是否全部都在循环队列中，如果是，将这些数据全部传递给从服务器，完成数据同步，否则全量重传。\r\n\r\n具体怎么做到的呢？故事要从 syncCommand（replication.c）开始说起。\r\n\r\n[cpp]\r\nvoid syncCommand(redisClient *c)\r\n[/cpp]\r\n\r\n客户端发出sync的请求，事件调度器将对应的操作引导到了这里。\r\n\r\n首先，可以进行这种操作的，必须是刚刚连接的客户端，不能是已经同步完毕的从服务器，也不能是哨兵服务器，必须是刚刚连接的从服务器，所以函数的开头判断了该客户端的身份。\r\n\r\n[cpp]\r\nif (c-&gt;flags &amp; REDIS_SLAVE) return;\r\n[/cpp]\r\n\r\n新连接的从服务器，但是与主服务器的连接还没有准备好，是不能够同步的，所以也要拒绝。\r\n因为必须保证一个干净的回复缓冲区，为拷贝其他的从客户端准备，所以缓冲区有内容的客户端，也不能sync同步的。\r\n\r\nsyncCommand 根据 请求是psync，还是sync做了一个判断，psync，也就是只追加缺少部分的数据的命令，sync，是同步全量数据库数据的命令。如果客户端请求的是sync，那直接执行sync，如果请求的是psync,函数会调用masterTryPartialResynchronization(redisClient *c) 尝试进行部分重同步。\r\n\r\n之所以说是尝试，是因为需要满足几个条件，才可以，不满足的话，只能是全量sync了。\r\n\r\n1.服务器的runid和master_runid必须一致，每个服务器，无论主从，运行的时候，都有一个自己的id，从服务器之后跟之前的主服务器重连的时候，才可以部分重同步，否则只能全量重同步，所以从服务器传来的master_runid必须等于该服务器的id，也就是说这个服务器的之前的主服务器。\r\n\r\n2.请求参数中，必须有psync_offset 参数，不是整数，或者超出int范围，都是不可以的。你不告诉我你还差多少，我怎么把你少的给你呢？\r\n\r\n如果这两个条件满足，就可以传输追加的数据了，通过函数 addReplyReplicationBacklog(redisClient *c, long long offset)因为是循环队列，所以数据在队列中可能不是顺序存储的，而是分成两段的，所以可能会分两次传输。\r\n\r\n传输完毕之后，主服务器将该客户端标记成从服务器，放在从服务器列表里面，成为再也不能sync的从服务器。\r\n\r\n上述内容参考了《Redis设计与实现》','主从断开重连后数据同步 -- redis源码分析','','publish','open','open','','redis%e6%ba%90%e7%a0%81%e5%88%86%e6%9e%90%e4%b9%8b%e9%83%a8%e5%88%86%e5%90%8c%e6%ad%a5%e9%87%8d%e4%bc%a0','','','2015-08-24 08:33:58','2015-08-24 08:33:58','',0,'http://unasm.com/?p=512',0,'post','',0),(513,1,'2015-08-24 02:12:22','2015-08-24 02:12:22','','redis源码分析之部分同步重传','','inherit','open','open','','512-revision-v1','','','2015-08-24 02:12:22','2015-08-24 02:12:22','',512,'http://unasm.com/2015/08/513/',0,'revision','',0),(514,1,'2015-08-24 02:12:46','2015-08-24 02:12:46','先占坑','redis源码分析之部分同步重传','','inherit','open','open','','512-revision-v1','','','2015-08-24 02:12:46','2015-08-24 02:12:46','',512,'http://unasm.com/2015/08/514/',0,'revision','',0),(515,1,'2015-08-24 08:32:44','2015-08-24 08:32:44','在redis 2.8之前，是没有日志追加的，主从每次断开之后，从服务器与主服务器再次连接的时候，主服务器是把自己的全部内容通过bgsave生成一个RDB文件，传递给从服务器，从服务器根据全量的文件初始化redis数据库。在 唐福林大神 给我们开redis培训的时候，就提到了redis的这个问题，一个TCP连接的崩溃就会导致大量数据的传输，以至于不得不hash打散，减小每个端口的数据量。\n\nredis之后，有断开重连，追加日志的功能的，也就是redis的主从断开之后，主新加了300k的内容之后，从库再次连接，不用同步全量的3G内容，只需要同步这新加的300k数据就好。\n\n我们先说一下这个部分重同步的实现机制，主服务器维护一个循环队列，从服务器维护一个offset变量，每次与从服务器同步之后，从服务器都会将同步的字节量加到offset中，表示目前从主服务器获得的全部日志量，主服务器也会将这些传递给从服务器的数据保存在循环队列中，维护两个变量server.repl_backlog_off 以及server.repl_backlog_histlen ，前者表示循环队列中保存的，日志量的最小值，小于该值的日志都不在循环队列中，后者表示队列中数据的长度。加起来就是循环队列的全部数据量。\n\nsync请求的时候，从服务器将offset 传递过来，主服务器判断该offset值之后的数据，是否全部都在循环队列中，如果是，将这些数据全部传递给从服务器，完成数据同步，否则全量重传。\n\n具体怎么做到的呢？故事要从 syncCommand（replication.c）开始说起。\n\n[cpp]\nvoid syncCommand(redisClient *c)\n[/cpp]\n\n客户端发出sync的请求，事件调度器将对应的操作引导到了这里。\n\n首先，可以进行这种操作的，必须是刚刚连接的客户端，不能是已经同步完毕的从服务器，也不能是哨兵服务器，必须是刚刚连接的从服务器，所以函数的开头判断了该客户端的身份。\n\n[cpp]\nif (c-&gt;flags &amp; REDIS_SLAVE) return;\n[/cpp]\n\n新连接的从服务器，但是与主服务器的连接还没有准备好，是不能够同步的，所以也要拒绝。\n因为必须保证一个干净的回复缓冲区，为拷贝其他的从客户端准备，所以缓冲区有内容的客户端，也不能sync同步的。\n\nsyncCommand 根据 请求是psync，还是sync做了一个判断，psync，也就是只追加缺少部分的数据的命令，sync，是同步全量数据库数据的命令。如果客户端请求的是sync，那直接执行sync，如果请求的是psync,函数会调用masterTryPartialResynchronization(redisClient *c) 尝试进行部分重同步。\n\n之所以说是尝试，是因为需要满足几个条件，才可以，不满足的话，只能是全量sync了。\n\n1.服务器的runid和master_runid必须一致，每个服务器，无论主从，运行的时候，都有一个自己的id，从服务器之后跟之前的主服务器重连的时候，才可以部分重同步，否则只能全量重同步，所以从服务器传来的master_runid必须等于该服务器的id，也就是说这个服务器的之前的主服务器。\n\n2.请求参数中，必须有psync_offset 参数，不是整数，或者超出int范围，都是不可以的。你不告诉我你还差多少，我怎么把你少的给你呢？\n\n如果这两个条件满足，就可以传输追加的数据了，通过函数 addReplyReplicationBacklog(redisClient *c, long long offset)因为是循环队列，所以数据在队列中可能不是顺序存储的，而是分成两段的，所以可能会分两次传输。\n\n上述内容参考了《Redis设计与实现》','主从断开重连后数据同步 -- redis源码分析','','inherit','open','open','','512-autosave-v1','','','2015-08-24 08:32:44','2015-08-24 08:32:44','',512,'http://unasm.com/2015/08/515/',0,'revision','',0),(516,1,'2015-08-24 07:03:00','2015-08-24 07:03:00','在redis 2.8之前，是没有日志追加的，主从每次断开之后，从服务器与主服务器再次连接的时候，主服务器是把自己的全部内容通过bgsave生成一个RDB文件，传递给从服务器，从服务器根据全量的文件初始化redis数据库。在唐福林大神给我们开redis培训的时候，就提到了redis的这个问题，一个跑了很久的redis数据库重启，同步的时候，阻塞的网络，因为要传的数据太大了，以至于不得不hash打散数据库，减小每个库的量。','redis源码分析之部分同步重传','','inherit','open','open','','512-revision-v1','','','2015-08-24 07:03:00','2015-08-24 07:03:00','',512,'http://unasm.com/2015/08/516/',0,'revision','',0),(517,1,'2015-08-24 07:08:06','2015-08-24 07:08:06','在redis 2.8之前，是没有日志追加的，主从每次断开之后，从服务器与主服务器再次连接的时候，主服务器是把自己的全部内容通过bgsave生成一个RDB文件，传递给从服务器，从服务器根据全量的文件初始化redis数据库。在唐福林大神给我们开redis培训的时候，就提到了redis的这个问题，一个跑了很久的redis数据库重启，同步的时候，阻塞的网络，因为要传的数据太大了，以至于不得不hash打散数据库，减小每个库的量。\r\n\r\nredis之后，有断开重连，追加日志的功能的，也就是redis的主从断开之后，主新加了300k的内容之后，从库再次连接，不用同步全量的3G内容，只需要同步这新加的300k数据就好。\r\n\r\n怎么做到的呢？故事要从 syncCommand（replication.c）开始说起。','redis源码分析之部分同步重传','','inherit','open','open','','512-revision-v1','','','2015-08-24 07:08:06','2015-08-24 07:08:06','',512,'http://unasm.com/2015/08/517/',0,'revision','',0),(518,1,'2015-08-24 07:09:12','2015-08-24 07:09:12','在redis 2.8之前，是没有日志追加的，主从每次断开之后，从服务器与主服务器再次连接的时候，主服务器是把自己的全部内容通过bgsave生成一个RDB文件，传递给从服务器，从服务器根据全量的文件初始化redis数据库。在唐福林大神给我们开redis培训的时候，就提到了redis的这个问题，一个跑了很久的redis数据库重启，同步的时候，阻塞的网络，因为要传的数据太大了，以至于不得不hash打散数据库，减小每个库的量。\r\n\r\nredis之后，有断开重连，追加日志的功能的，也就是redis的主从断开之后，主新加了300k的内容之后，从库再次连接，不用同步全量的3G内容，只需要同步这新加的300k数据就好。\r\n\r\n怎么做到的呢？故事要从 syncCommand（replication.c）开始说起。\r\n[cpp]\r\nvoid syncCommand(redisClient *c) \r\n[/cpp]\r\n客户端发出sync的请求，事件调度器将对应的操作引导到了这里。','redis源码分析之部分同步重传','','inherit','open','open','','512-revision-v1','','','2015-08-24 07:09:12','2015-08-24 07:09:12','',512,'http://unasm.com/2015/08/518/',0,'revision','',0),(519,1,'2015-08-24 08:20:47','2015-08-24 08:20:47','在redis 2.8之前，是没有日志追加的，主从每次断开之后，从服务器与主服务器再次连接的时候，主服务器是把自己的全部内容通过bgsave生成一个RDB文件，传递给从服务器，从服务器根据全量的文件初始化redis数据库。在唐福林大神给我们开redis培训的时候，就提到了redis的这个问题，一个跑了很久的redis数据库重启，同步的时候，阻塞的网络，因为要传的数据太大了，以至于不得不hash打散数据库，减小每个库的量。\r\n\r\nredis之后，有断开重连，追加日志的功能的，也就是redis的主从断开之后，主新加了300k的内容之后，从库再次连接，不用同步全量的3G内容，只需要同步这新加的300k数据就好。\r\n\r\n我们先说一下这个部分重同步的实现机制，主服务器维护一个循环队列，从服务器维护一个offset变量，每次与从服务器同步之后，从服务器都会将同步的字节量加到offset中，表示目前从主服务器获得的全部日志量，主服务器也会将这些传递给从服务器的数据保存在循环队列中，维护两个变量server.repl_backlog_off 以及server.repl_backlog_histlen ，前者表示循环队列中保存的，日志量的最小值，小于该值的日志都不在循环队列中，后者表示队列中数据的长度。加起来就是循环队列的全部数据量。\r\n\r\nsync请求的时候，从服务器将offset 传递过来，主服务器判断该offset值之后的数据，是否全部都在循环队列中，如果是，将这些数据全部传递给从服务器，完成数据同步，否则全量重传。\r\n\r\n具体怎么做到的呢？故事要从 syncCommand（replication.c）开始说起。\r\n\r\n[cpp]\r\nvoid syncCommand(redisClient *c) \r\n[/cpp]\r\n\r\n客户端发出sync的请求，事件调度器将对应的操作引导到了这里。\r\n\r\n首先，可以进行这种操作的，必须是刚刚连接的客户端，不能是已经同步完毕的从服务器，也不能是哨兵服务器，所以函数的开头判断了该客户端的身份。\r\n[cpp]\r\nif (c-&gt;flags &amp; REDIS_SLAVE) return; \r\n[/cpp]\r\n\r\n新连接的从服务器，但是与主服务器的连接还没有准备好，是不能够同步的，所以也要拒绝。\r\n因为必须保证一个干净的回复缓冲区，为拷贝其他的从客户端准备，所以缓冲区有内容的客户端，也不能sync同步的。\r\n\r\nsyncCommand 根据 请求是psync，还是sync做了一个判断，psync，也就是只追加缺少部分的数据的命令，sync，是同步全量数据库数据的命令。\r\n如果客户端请求的是sync，那直接执行sync，如果请求的是psync,函数会调用masterTryPartialResynchronization(redisClient *c) 尝试进行部分重同步。\r\n\r\n之所以说是尝试，是因为需要满足几个条件，才可以，不满足的话，只能是全量sync了。\r\n1.服务器的runid和master_runid必须一致，每个服务器，无论主从，运行的时候，都有一个自己的id，从服务器之后跟之前的主服务器重连的时候，才可以部分重同步，否则只能全量重同步，因为从服务器传来的master_runid必须等于该服务器的id，也就是从服务器的之前的主服务器。\r\n2.请求参数中，必须有psync_offset 参数，不是整数，或者超出int范围，都是不可以的。你不告诉我你还差多少，我怎么把你少的给你呢？\r\n\r\n如果这两个条件满足，就可以传输追加的数据了，通过函数 addReplyReplicationBacklog(redisClient *c, long long offset)\r\n因为是循环队列，所以数据在队列中可能不是顺序存储的，而是分成两段的，所以可能会分两次传输。','主从断开重连后数据同步 -- redis源码分析','','inherit','open','open','','512-revision-v1','','','2015-08-24 08:20:47','2015-08-24 08:20:47','',512,'http://unasm.com/2015/08/519/',0,'revision','',0),(521,1,'2015-08-24 08:22:49','2015-08-24 08:22:49','在redis 2.8之前，是没有日志追加的，主从每次断开之后，从服务器与主服务器再次连接的时候，主服务器是把自己的全部内容通过bgsave生成一个RDB文件，传递给从服务器，从服务器根据全量的文件初始化redis数据库。在 唐福林大神 给我们开redis培训的时候，就提到了redis的这个问题，一个跑了很久的redis数据库重启，同步的时候，阻塞的网络，因为要传的数据太大了，以至于不得不hash打散数据库，减小每个库的量。\r\n\r\nredis之后，有断开重连，追加日志的功能的，也就是redis的主从断开之后，主新加了300k的内容之后，从库再次连接，不用同步全量的3G内容，只需要同步这新加的300k数据就好。\r\n\r\n我们先说一下这个部分重同步的实现机制，主服务器维护一个循环队列，从服务器维护一个offset变量，每次与从服务器同步之后，从服务器都会将同步的字节量加到offset中，表示目前从主服务器获得的全部日志量，主服务器也会将这些传递给从服务器的数据保存在循环队列中，维护两个变量server.repl_backlog_off 以及server.repl_backlog_histlen ，前者表示循环队列中保存的，日志量的最小值，小于该值的日志都不在循环队列中，后者表示队列中数据的长度。加起来就是循环队列的全部数据量。\r\n\r\nsync请求的时候，从服务器将offset 传递过来，主服务器判断该offset值之后的数据，是否全部都在循环队列中，如果是，将这些数据全部传递给从服务器，完成数据同步，否则全量重传。\r\n\r\n具体怎么做到的呢？故事要从 syncCommand（replication.c）开始说起。\r\n\r\n[cpp]\r\nvoid syncCommand(redisClient *c)\r\n[/cpp]\r\n\r\n客户端发出sync的请求，事件调度器将对应的操作引导到了这里。\r\n\r\n首先，可以进行这种操作的，必须是刚刚连接的客户端，不能是已经同步完毕的从服务器，也不能是哨兵服务器，所以函数的开头判断了该客户端的身份。\r\n\r\n[cpp]\r\nif (c-&gt;flags &amp; REDIS_SLAVE) return;\r\n[/cpp]\r\n\r\n新连接的从服务器，但是与主服务器的连接还没有准备好，是不能够同步的，所以也要拒绝。\r\n因为必须保证一个干净的回复缓冲区，为拷贝其他的从客户端准备，所以缓冲区有内容的客户端，也不能sync同步的。\r\n\r\nsyncCommand 根据 请求是psync，还是sync做了一个判断，psync，也就是只追加缺少部分的数据的命令，sync，是同步全量数据库数据的命令。如果客户端请求的是sync，那直接执行sync，如果请求的是psync,函数会调用masterTryPartialResynchronization(redisClient *c) 尝试进行部分重同步。\r\n\r\n之所以说是尝试，是因为需要满足几个条件，才可以，不满足的话，只能是全量sync了。\r\n1.服务器的runid和master_runid必须一致，每个服务器，无论主从，运行的时候，都有一个自己的id，从服务器之后跟之前的主服务器重连的时候，才可以部分重同步，否则只能全量重同步，因为从服务器传来的master_runid必须等于该服务器的id，也就是从服务器的之前的主服务器。\r\n2.请求参数中，必须有psync_offset 参数，不是整数，或者超出int范围，都是不可以的。你不告诉我你还差多少，我怎么把你少的给你呢？\r\n\r\n如果这两个条件满足，就可以传输追加的数据了，通过函数 addReplyReplicationBacklog(redisClient *c, long long offset)\r\n因为是循环队列，所以数据在队列中可能不是顺序存储的，而是分成两段的，所以可能会分两次传输。','主从断开重连后数据同步 -- redis源码分析','','inherit','open','open','','512-revision-v1','','','2015-08-24 08:22:49','2015-08-24 08:22:49','',512,'http://unasm.com/2015/08/521/',0,'revision','',0),(520,1,'2015-08-24 08:21:17','2015-08-24 08:21:17','在redis 2.8之前，是没有日志追加的，主从每次断开之后，从服务器与主服务器再次连接的时候，主服务器是把自己的全部内容通过bgsave生成一个RDB文件，传递给从服务器，从服务器根据全量的文件初始化redis数据库。在 唐福林大神 给我们开redis培训的时候，就提到了redis的这个问题，一个跑了很久的redis数据库重启，同步的时候，阻塞的网络，因为要传的数据太大了，以至于不得不hash打散数据库，减小每个库的量。\r\n\r\nredis之后，有断开重连，追加日志的功能的，也就是redis的主从断开之后，主新加了300k的内容之后，从库再次连接，不用同步全量的3G内容，只需要同步这新加的300k数据就好。\r\n\r\n我们先说一下这个部分重同步的实现机制，主服务器维护一个循环队列，从服务器维护一个offset变量，每次与从服务器同步之后，从服务器都会将同步的字节量加到offset中，表示目前从主服务器获得的全部日志量，主服务器也会将这些传递给从服务器的数据保存在循环队列中，维护两个变量server.repl_backlog_off 以及server.repl_backlog_histlen ，前者表示循环队列中保存的，日志量的最小值，小于该值的日志都不在循环队列中，后者表示队列中数据的长度。加起来就是循环队列的全部数据量。\r\n\r\nsync请求的时候，从服务器将offset 传递过来，主服务器判断该offset值之后的数据，是否全部都在循环队列中，如果是，将这些数据全部传递给从服务器，完成数据同步，否则全量重传。\r\n\r\n具体怎么做到的呢？故事要从 syncCommand（replication.c）开始说起。\r\n\r\n[cpp]\r\nvoid syncCommand(redisClient *c) \r\n[/cpp]\r\n\r\n客户端发出sync的请求，事件调度器将对应的操作引导到了这里。\r\n\r\n首先，可以进行这种操作的，必须是刚刚连接的客户端，不能是已经同步完毕的从服务器，也不能是哨兵服务器，所以函数的开头判断了该客户端的身份。\r\n[cpp]\r\nif (c-&gt;flags &amp; REDIS_SLAVE) return; \r\n[/cpp]\r\n\r\n新连接的从服务器，但是与主服务器的连接还没有准备好，是不能够同步的，所以也要拒绝。\r\n因为必须保证一个干净的回复缓冲区，为拷贝其他的从客户端准备，所以缓冲区有内容的客户端，也不能sync同步的。\r\n\r\nsyncCommand 根据 请求是psync，还是sync做了一个判断，psync，也就是只追加缺少部分的数据的命令，sync，是同步全量数据库数据的命令。\r\n如果客户端请求的是sync，那直接执行sync，如果请求的是psync,函数会调用masterTryPartialResynchronization(redisClient *c) 尝试进行部分重同步。\r\n\r\n之所以说是尝试，是因为需要满足几个条件，才可以，不满足的话，只能是全量sync了。\r\n1.服务器的runid和master_runid必须一致，每个服务器，无论主从，运行的时候，都有一个自己的id，从服务器之后跟之前的主服务器重连的时候，才可以部分重同步，否则只能全量重同步，因为从服务器传来的master_runid必须等于该服务器的id，也就是从服务器的之前的主服务器。\r\n2.请求参数中，必须有psync_offset 参数，不是整数，或者超出int范围，都是不可以的。你不告诉我你还差多少，我怎么把你少的给你呢？\r\n\r\n如果这两个条件满足，就可以传输追加的数据了，通过函数 addReplyReplicationBacklog(redisClient *c, long long offset)\r\n因为是循环队列，所以数据在队列中可能不是顺序存储的，而是分成两段的，所以可能会分两次传输。','主从断开重连后数据同步 -- redis源码分析','','inherit','open','open','','512-revision-v1','','','2015-08-24 08:21:17','2015-08-24 08:21:17','',512,'http://unasm.com/2015/08/520/',0,'revision','',0),(522,1,'2015-08-24 08:24:35','2015-08-24 08:24:35','在redis 2.8之前，是没有日志追加的，主从每次断开之后，从服务器与主服务器再次连接的时候，主服务器是把自己的全部内容通过bgsave生成一个RDB文件，传递给从服务器，从服务器根据全量的文件初始化redis数据库。在 唐福林大神 给我们开redis培训的时候，就提到了redis的这个问题，一个跑了很久的redis数据库重启，同步的时候，阻塞的网络，因为要传的数据太大了，以至于不得不hash打散数据库，减小每个库的量。\r\n\r\nredis之后，有断开重连，追加日志的功能的，也就是redis的主从断开之后，主新加了300k的内容之后，从库再次连接，不用同步全量的3G内容，只需要同步这新加的300k数据就好。\r\n\r\n我们先说一下这个部分重同步的实现机制，主服务器维护一个循环队列，从服务器维护一个offset变量，每次与从服务器同步之后，从服务器都会将同步的字节量加到offset中，表示目前从主服务器获得的全部日志量，主服务器也会将这些传递给从服务器的数据保存在循环队列中，维护两个变量server.repl_backlog_off 以及server.repl_backlog_histlen ，前者表示循环队列中保存的，日志量的最小值，小于该值的日志都不在循环队列中，后者表示队列中数据的长度。加起来就是循环队列的全部数据量。\r\n\r\nsync请求的时候，从服务器将offset 传递过来，主服务器判断该offset值之后的数据，是否全部都在循环队列中，如果是，将这些数据全部传递给从服务器，完成数据同步，否则全量重传。\r\n\r\n具体怎么做到的呢？故事要从 syncCommand（replication.c）开始说起。\r\n\r\n[cpp]\r\nvoid syncCommand(redisClient *c)\r\n[/cpp]\r\n\r\n客户端发出sync的请求，事件调度器将对应的操作引导到了这里。\r\n\r\n首先，可以进行这种操作的，必须是刚刚连接的客户端，不能是已经同步完毕的从服务器，也不能是哨兵服务器，所以函数的开头判断了该客户端的身份。\r\n\r\n[cpp]\r\nif (c-&gt;flags &amp; REDIS_SLAVE) return;\r\n[/cpp]\r\n\r\n新连接的从服务器，但是与主服务器的连接还没有准备好，是不能够同步的，所以也要拒绝。\r\n因为必须保证一个干净的回复缓冲区，为拷贝其他的从客户端准备，所以缓冲区有内容的客户端，也不能sync同步的。\r\n\r\nsyncCommand 根据 请求是psync，还是sync做了一个判断，psync，也就是只追加缺少部分的数据的命令，sync，是同步全量数据库数据的命令。如果客户端请求的是sync，那直接执行sync，如果请求的是psync,函数会调用masterTryPartialResynchronization(redisClient *c) 尝试进行部分重同步。\r\n\r\n之所以说是尝试，是因为需要满足几个条件，才可以，不满足的话，只能是全量sync了。\r\n1.服务器的runid和master_runid必须一致，每个服务器，无论主从，运行的时候，都有一个自己的id，从服务器之后跟之前的主服务器重连的时候，才可以部分重同步，否则只能全量重同步，所以从服务器传来的master_runid必须等于该服务器的id，也就是说这个服务器的之前的主服务器。\r\n2.请求参数中，必须有psync_offset 参数，不是整数，或者超出int范围，都是不可以的。你不告诉我你还差多少，我怎么把你少的给你呢？\r\n\r\n如果这两个条件满足，就可以传输追加的数据了，通过函数 addReplyReplicationBacklog(redisClient *c, long long offset)\r\n因为是循环队列，所以数据在队列中可能不是顺序存储的，而是分成两段的，所以可能会分两次传输。','主从断开重连后数据同步 -- redis源码分析','','inherit','open','open','','512-revision-v1','','','2015-08-24 08:24:35','2015-08-24 08:24:35','',512,'http://unasm.com/2015/08/522/',0,'revision','',0),(523,1,'2015-08-24 08:26:40','2015-08-24 08:26:40','在redis 2.8之前，是没有日志追加的，主从每次断开之后，从服务器与主服务器再次连接的时候，主服务器是把自己的全部内容通过bgsave生成一个RDB文件，传递给从服务器，从服务器根据全量的文件初始化redis数据库。在 唐福林大神 给我们开redis培训的时候，就提到了redis的这个问题，一个跑了很久的redis数据库重启，同步的时候，阻塞的网络，因为要传的数据太大了，以至于不得不hash打散数据库，减小每个库的量。\r\n\r\nredis之后，有断开重连，追加日志的功能的，也就是redis的主从断开之后，主新加了300k的内容之后，从库再次连接，不用同步全量的3G内容，只需要同步这新加的300k数据就好。\r\n\r\n我们先说一下这个部分重同步的实现机制，主服务器维护一个循环队列，从服务器维护一个offset变量，每次与从服务器同步之后，从服务器都会将同步的字节量加到offset中，表示目前从主服务器获得的全部日志量，主服务器也会将这些传递给从服务器的数据保存在循环队列中，维护两个变量server.repl_backlog_off 以及server.repl_backlog_histlen ，前者表示循环队列中保存的，日志量的最小值，小于该值的日志都不在循环队列中，后者表示队列中数据的长度。加起来就是循环队列的全部数据量。\r\n\r\nsync请求的时候，从服务器将offset 传递过来，主服务器判断该offset值之后的数据，是否全部都在循环队列中，如果是，将这些数据全部传递给从服务器，完成数据同步，否则全量重传。\r\n\r\n具体怎么做到的呢？故事要从 syncCommand（replication.c）开始说起。\r\n\r\n[cpp]\r\nvoid syncCommand(redisClient *c)\r\n[/cpp]\r\n\r\n客户端发出sync的请求，事件调度器将对应的操作引导到了这里。\r\n\r\n首先，可以进行这种操作的，必须是刚刚连接的客户端，不能是已经同步完毕的从服务器，也不能是哨兵服务器，所以函数的开头判断了该客户端的身份。\r\n\r\n[cpp]\r\nif (c-&gt;flags &amp; REDIS_SLAVE) return;\r\n[/cpp]\r\n\r\n新连接的从服务器，但是与主服务器的连接还没有准备好，是不能够同步的，所以也要拒绝。\r\n因为必须保证一个干净的回复缓冲区，为拷贝其他的从客户端准备，所以缓冲区有内容的客户端，也不能sync同步的。\r\n\r\nsyncCommand 根据 请求是psync，还是sync做了一个判断，psync，也就是只追加缺少部分的数据的命令，sync，是同步全量数据库数据的命令。如果客户端请求的是sync，那直接执行sync，如果请求的是psync,函数会调用masterTryPartialResynchronization(redisClient *c) 尝试进行部分重同步。\r\n\r\n之所以说是尝试，是因为需要满足几个条件，才可以，不满足的话，只能是全量sync了。\r\n1.服务器的runid和master_runid必须一致，每个服务器，无论主从，运行的时候，都有一个自己的id，从服务器之后跟之前的主服务器重连的时候，才可以部分重同步，否则只能全量重同步，所以从服务器传来的master_runid必须等于该服务器的id，也就是说这个服务器的之前的主服务器。\r\n2.请求参数中，必须有psync_offset 参数，不是整数，或者超出int范围，都是不可以的。你不告诉我你还差多少，我怎么把你少的给你呢？\r\n\r\n如果这两个条件满足，就可以传输追加的数据了，通过函数 addReplyReplicationBacklog(redisClient *c, long long offset)因为是循环队列，所以数据在队列中可能不是顺序存储的，而是分成两段的，所以可能会分两次传输。\r\n\r\n上述内容参考了《Redis设计与实现》','主从断开重连后数据同步 -- redis源码分析','','inherit','open','open','','512-revision-v1','','','2015-08-24 08:26:40','2015-08-24 08:26:40','',512,'http://unasm.com/2015/08/523/',0,'revision','',0),(524,1,'2015-08-24 08:30:38','2015-08-24 08:30:38','在redis 2.8之前，是没有日志追加的，主从每次断开之后，从服务器与主服务器再次连接的时候，主服务器是把自己的全部内容通过bgsave生成一个RDB文件，传递给从服务器，从服务器根据全量的文件初始化redis数据库。在 唐福林大神 给我们开redis培训的时候，就提到了redis的这个问题，一个TCP连接的崩溃就会导致大量数据的传输，以至于不得不hash打散，减小每个端口的数据量。\r\n\r\nredis之后，有断开重连，追加日志的功能的，也就是redis的主从断开之后，主新加了300k的内容之后，从库再次连接，不用同步全量的3G内容，只需要同步这新加的300k数据就好。\r\n\r\n我们先说一下这个部分重同步的实现机制，主服务器维护一个循环队列，从服务器维护一个offset变量，每次与从服务器同步之后，从服务器都会将同步的字节量加到offset中，表示目前从主服务器获得的全部日志量，主服务器也会将这些传递给从服务器的数据保存在循环队列中，维护两个变量server.repl_backlog_off 以及server.repl_backlog_histlen ，前者表示循环队列中保存的，日志量的最小值，小于该值的日志都不在循环队列中，后者表示队列中数据的长度。加起来就是循环队列的全部数据量。\r\n\r\nsync请求的时候，从服务器将offset 传递过来，主服务器判断该offset值之后的数据，是否全部都在循环队列中，如果是，将这些数据全部传递给从服务器，完成数据同步，否则全量重传。\r\n\r\n具体怎么做到的呢？故事要从 syncCommand（replication.c）开始说起。\r\n\r\n[cpp]\r\nvoid syncCommand(redisClient *c)\r\n[/cpp]\r\n\r\n客户端发出sync的请求，事件调度器将对应的操作引导到了这里。\r\n\r\n首先，可以进行这种操作的，必须是刚刚连接的客户端，不能是已经同步完毕的从服务器，也不能是哨兵服务器，所以函数的开头判断了该客户端的身份。\r\n\r\n[cpp]\r\nif (c-&gt;flags &amp; REDIS_SLAVE) return;\r\n[/cpp]\r\n\r\n新连接的从服务器，但是与主服务器的连接还没有准备好，是不能够同步的，所以也要拒绝。\r\n因为必须保证一个干净的回复缓冲区，为拷贝其他的从客户端准备，所以缓冲区有内容的客户端，也不能sync同步的。\r\n\r\nsyncCommand 根据 请求是psync，还是sync做了一个判断，psync，也就是只追加缺少部分的数据的命令，sync，是同步全量数据库数据的命令。如果客户端请求的是sync，那直接执行sync，如果请求的是psync,函数会调用masterTryPartialResynchronization(redisClient *c) 尝试进行部分重同步。\r\n\r\n之所以说是尝试，是因为需要满足几个条件，才可以，不满足的话，只能是全量sync了。\r\n\r\n1.服务器的runid和master_runid必须一致，每个服务器，无论主从，运行的时候，都有一个自己的id，从服务器之后跟之前的主服务器重连的时候，才可以部分重同步，否则只能全量重同步，所以从服务器传来的master_runid必须等于该服务器的id，也就是说这个服务器的之前的主服务器。\r\n\r\n2.请求参数中，必须有psync_offset 参数，不是整数，或者超出int范围，都是不可以的。你不告诉我你还差多少，我怎么把你少的给你呢？\r\n\r\n如果这两个条件满足，就可以传输追加的数据了，通过函数 addReplyReplicationBacklog(redisClient *c, long long offset)因为是循环队列，所以数据在队列中可能不是顺序存储的，而是分成两段的，所以可能会分两次传输。\r\n\r\n上述内容参考了《Redis设计与实现》','主从断开重连后数据同步 -- redis源码分析','','inherit','open','open','','512-revision-v1','','','2015-08-24 08:30:38','2015-08-24 08:30:38','',512,'http://unasm.com/2015/08/524/',0,'revision','',0),(525,1,'2015-08-24 08:33:58','2015-08-24 08:33:58','在redis 2.8之前，是没有日志追加的，主从每次断开之后，从服务器与主服务器再次连接的时候，主服务器是把自己的全部内容通过bgsave生成一个RDB文件，传递给从服务器，从服务器根据全量的文件初始化redis数据库。在 唐福林大神 给我们开redis培训的时候，就提到了redis的这个问题，一个TCP连接的崩溃就会导致大量数据的传输，以至于不得不hash打散，减小每个端口的数据量。\r\n\r\nredis之后，有断开重连，追加日志的功能的，也就是redis的主从断开之后，主新加了300k的内容之后，从库再次连接，不用同步全量的3G内容，只需要同步这新加的300k数据就好。\r\n\r\n我们先说一下这个部分重同步的实现机制，主服务器维护一个循环队列，从服务器维护一个offset变量，每次与从服务器同步之后，从服务器都会将同步的字节量加到offset中，表示目前从主服务器获得的全部日志量，主服务器也会将这些传递给从服务器的数据保存在循环队列中，维护两个变量server.repl_backlog_off 以及server.repl_backlog_histlen ，前者表示循环队列中保存的，日志量的最小值，小于该值的日志都不在循环队列中，后者表示队列中数据的长度。加起来就是循环队列的全部数据量。\r\n\r\nsync请求的时候，从服务器将offset 传递过来，主服务器判断该offset值之后的数据，是否全部都在循环队列中，如果是，将这些数据全部传递给从服务器，完成数据同步，否则全量重传。\r\n\r\n具体怎么做到的呢？故事要从 syncCommand（replication.c）开始说起。\r\n\r\n[cpp]\r\nvoid syncCommand(redisClient *c)\r\n[/cpp]\r\n\r\n客户端发出sync的请求，事件调度器将对应的操作引导到了这里。\r\n\r\n首先，可以进行这种操作的，必须是刚刚连接的客户端，不能是已经同步完毕的从服务器，也不能是哨兵服务器，必须是刚刚连接的从服务器，所以函数的开头判断了该客户端的身份。\r\n\r\n[cpp]\r\nif (c-&gt;flags &amp; REDIS_SLAVE) return;\r\n[/cpp]\r\n\r\n新连接的从服务器，但是与主服务器的连接还没有准备好，是不能够同步的，所以也要拒绝。\r\n因为必须保证一个干净的回复缓冲区，为拷贝其他的从客户端准备，所以缓冲区有内容的客户端，也不能sync同步的。\r\n\r\nsyncCommand 根据 请求是psync，还是sync做了一个判断，psync，也就是只追加缺少部分的数据的命令，sync，是同步全量数据库数据的命令。如果客户端请求的是sync，那直接执行sync，如果请求的是psync,函数会调用masterTryPartialResynchronization(redisClient *c) 尝试进行部分重同步。\r\n\r\n之所以说是尝试，是因为需要满足几个条件，才可以，不满足的话，只能是全量sync了。\r\n\r\n1.服务器的runid和master_runid必须一致，每个服务器，无论主从，运行的时候，都有一个自己的id，从服务器之后跟之前的主服务器重连的时候，才可以部分重同步，否则只能全量重同步，所以从服务器传来的master_runid必须等于该服务器的id，也就是说这个服务器的之前的主服务器。\r\n\r\n2.请求参数中，必须有psync_offset 参数，不是整数，或者超出int范围，都是不可以的。你不告诉我你还差多少，我怎么把你少的给你呢？\r\n\r\n如果这两个条件满足，就可以传输追加的数据了，通过函数 addReplyReplicationBacklog(redisClient *c, long long offset)因为是循环队列，所以数据在队列中可能不是顺序存储的，而是分成两段的，所以可能会分两次传输。\r\n\r\n传输完毕之后，主服务器将该客户端标记成从服务器，放在从服务器列表里面，成为再也不能sync的从服务器。\r\n\r\n上述内容参考了《Redis设计与实现》','主从断开重连后数据同步 -- redis源码分析','','inherit','open','open','','512-revision-v1','','','2015-08-24 08:33:58','2015-08-24 08:33:58','',512,'http://unasm.com/2015/08/525/',0,'revision','',0),(526,1,'2015-08-24 08:55:53','2015-08-24 08:55:53','Redis是以Hash的方式在内存中组织的，所有的值都统一在一个hash之下，结构如下\r\n\r\n<img class=\"alignnone\" src=\"http://www.sinaimg.cn/dy/news/2015/ab.png\" alt=\"redis结构设计\" width=\"820\" height=\"260\" />\r\n\r\n以一种方便理解的说法来说，就是所有的Redis的数据，都是存储在dictht这个结构体里面，size，used，sizemask记录了一些属性，table指向由dictEntery构成的数组,hash数组,使用拉链法处理冲突，字符串转int 用的是 MurmurHash2算法(具体实现见下面 dictGenHashFunction函数)。\r\n\r\ndictEntry的定义挺有意思的。\r\n\r\n[cpp]\r\ntypedef struct dictEntry {\r\n\r\n    // 键\r\n    void *key;\r\n\r\n    // key的类型\r\n    union {\r\n        void *val;\r\n        uint64_t u64;\r\n        int64_t s64;\r\n    } v;\r\n    // 指向下个哈希表节点，形成链表\r\n    struct dictEntry *next;\r\n} dictEntry;\r\n[/cpp]\r\n\r\nkey , void 指针，指向的是存储的值的名字，无论是string，还是hash，保存的时候，都有一个对应的指定的名字，就是保存在这里的，union中，保存的是值，无论是hash，还是string，list尽在一个union之中,尚未发现u64以及s64用途，因为是拉链法，所以next指针指向下一个相同key值的entry。\r\n\r\n两个void指针，指向的都是一个结构体,robj,其实对于key来说，一个sds就可以了，这里使用robj或许是为了统一化的考虑吧，而对于val，robj则是后续处理的关键，\r\n\r\n[cpp]\r\ntypedef struct redisObject {\r\n    // 类型\r\n    unsigned type:4;\r\n    // 编码\r\n    unsigned encoding:4;\r\n    // 对象最后一次被访问的时间\r\n    unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */\r\n    // 引用计数\r\n    int refcount;\r\n    // 指向实际值的指针\r\n    void *ptr;\r\n} robj;\r\n[/cpp]\r\n\r\n简单吧，这个就是redis的存储设计，一个拉链hash以及void指针的巧妙使用而已。\r\n\r\n把结构说了个大概，剩下的，就是如何保存这个结构，把这个巨大的hash保存在文件里面。我们从rdb.c的int rdbSave(char *filename) 开始，filename是保存成的rdb文件名字，不过redis是先生成一个临时文件，待临时文件生成完毕，数据存储好，然后更改文件名，应该是防止丢失覆盖数据的。\r\n\r\n创建临时文件，初始化rio，生成hash迭代器，遍历数据库之后，开始进入核心的地方,\r\n\r\n[cpp]\r\n        while((de = dictNext(di)) != NULL) {\r\n            sds keystr = dictGetKey(de);\r\n            robj key, *o = dictGetVal(de);\r\n            long long expire;\r\n\r\n            // 根据 keystr ，在栈中创建一个 key 对象\r\n            initStaticStringObject(key,keystr);\r\n\r\n            // 获取键的过期时间\r\n            expire = getExpire(db,&amp;key);\r\n\r\n            // 保存键值对数据\r\n            if (rdbSaveKeyValuePair(&amp;rdb,&amp;key,o,expire,now) == -1) goto werr;\r\n        }\r\n[/cpp]\r\n\r\ndi可以理解为之前提到的hash数组,dictNext的作用，就是从di这个数组中得到下一个dictEntry值，从0开始，一直遍历到最后，没有太多要说的，不过要注意，di的hash数组是有两个的，一个是rehash使用的。\r\n\r\n在这个while循环里面，主要得到三个值，一个是keystr，sds结构，一个是o，就是保存值的地方，这里依然使用的robj,因为o的结构比较复杂多变，一会需要特殊处理，所以不像key那样直接将就将robj中存储的sds提出来了。第三个值是expire，键的过期事件，这个时间也是单独一个hash存储的，保存在rdb文件中的，就是这三个值，k,v以及过期事件，now 是当前的时间戳，过期的变量不保存进rdb。\r\n\r\n进入rdbSaveKeyValuePair函数，\r\n\r\n[cpp]\r\nint rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val,\r\n                        long long expiretime, long long now)\r\n{\r\n    /* Save the expire time\r\n     *\r\n     * 保存键的过期时间\r\n     */\r\n    if (expiretime != -1) {\r\n        /* If this key is already expired skip it\r\n         */\r\n        if (expiretime &lt; now) return 0;\r\n\r\n        if (rdbSaveType(rdb,REDIS_RDB_OPCODE_EXPIRETIME_MS) == -1) return -1;\r\n        if (rdbSaveMillisecondTime(rdb,expiretime) == -1) return -1;\r\n    }\r\n\r\n    /* Save type, key, value\r\n     *\r\n     * 保存类型，键，值\r\n     */\r\n    if (rdbSaveObjectType(rdb,val) == -1) return -1;\r\n    if (rdbSaveStringObject(rdb,key) == -1) return -1;\r\n    if (rdbSaveObject(rdb,val) == -1) return -1;\r\n\r\n    return 1;\r\n}\r\n[/cpp]\r\n\r\n第一个if不表，后三个if，第一个先保存类型，将来解析的时候，先读取这个，然后确定后面的数据格式。redis共5种数据类型，除了string之外，每种类型底层实现各对应 2 - 3 种数据结构。\r\n<ol>\r\n	<li>List       由压缩列表，双端列表</li>\r\n	<li>set         整数列表和hash表</li>\r\n	<li>zset       压缩列表和跳跃表,hash表</li>\r\n	<li>Hash    压缩列表和hash表</li>\r\n</ol>\r\n第一个if 将对应的结构类型存储，第二个，将key值存储，直接调用的就是string类型的保存，第三种调用的函数是rdbSaveObject，该函数对val进行了判断，针对不同类型数据，进行不同的处理。\r\n\r\n该函数有点长，贴出来一个zset的存储吧，感受下是如何存储的，其他的都是类似的处理。\r\n\r\n[cpp]\r\n } else if (o-&gt;type == REDIS_ZSET) {\r\n        /* Save a sorted set value */\r\n        if (o-&gt;encoding == REDIS_ENCODING_ZIPLIST) {\r\n            size_t l = ziplistBlobLen((unsigned char*)o-&gt;ptr);\r\n\r\n            // 以字符串对象的形式保存整个 ZIPLIST 有序集\r\n            if ((n = rdbSaveRawString(rdb,o-&gt;ptr,l)) == -1) return -1;\r\n            nwritten += n;\r\n        } else if (o-&gt;encoding == REDIS_ENCODING_SKIPLIST) {\r\n            zset *zs = o-&gt;ptr;\r\n            dictIterator *di = dictGetIterator(zs-&gt;dict);\r\n            dictEntry *de; \r\n\r\n            if ((n = rdbSaveLen(rdb,dictSize(zs-&gt;dict))) == -1) return -1;\r\n            nwritten += n;\r\n\r\n            // 遍历有序集\r\n            while((de = dictNext(di)) != NULL) {\r\n                robj *eleobj = dictGetKey(de);\r\n                double *score = dictGetVal(de);\r\n\r\n                // 以字符串对象的形式保存集合成员\r\n                if ((n = rdbSaveStringObject(rdb,eleobj)) == -1) return -1;\r\n                nwritten += n;\r\n\r\n                // 成员分值（一个双精度浮点数）会被转换成字符串\r\n                // 然后保存到 rdb 中\r\n                if ((n = rdbSaveDoubleValue(rdb,*score)) == -1) return -1;\r\n                nwritten += n;\r\n            }\r\n            dictReleaseIterator(di);\r\n        }\r\n[/cpp]\r\n\r\nzset的保存，之所以选择zset，是因为zset的结构是所有的数据结构中最复杂的，可以看到，zset中，同时使用了hash字典和skiplist两种结构，为了效率，不惜double了内存\r\n\r\n[cpp]\r\ntypedef struct zset {                                                                                                                                                          \r\n\r\n    // 字典，键为成员，值为分值\r\n    // 用于支持 O(1) 复杂度的按成员取分值操作\r\n    dict *dict;\r\n\r\n    // 跳跃表，按分值排序成员\r\n    // 用于支持平均复杂度为 O(log N) 的按分值定位成员操作\r\n    // 以及范围操作\r\n    zskiplist *zsl;\r\n\r\n} zset;\r\n[/cpp]\r\n\r\nMurmurHash2的实现算法\r\n\r\n[cpp]\r\nunsigned int dictGenHashFunction(const void *key, int len) {\r\n    /* \'m\' and \'r\' are mixing constants generated offline.\r\n     They\'re not really \'magic\', they just happen to work well.  */\r\n    uint32_t seed = dict_hash_function_seed;\r\n    //也是24位的数字\r\n    const uint32_t m = 0x5bd1e995;\r\n    const int r = 24;\r\n\r\n    /* Initialize the hash to a \'random\' value */\r\n    uint32_t h = seed ^ len; \r\n\r\n    /* Mix 4 bytes at a time into the hash */\r\n    const unsigned char *data = (const unsigned char *)key;\r\n\r\n    while(len &gt;= 4) {\r\n        uint32_t k = *(uint32_t*)data;\r\n\r\n        k *= m;\r\n        k ^= k &gt;&gt; r;\r\n        k *= m;\r\n\r\n        h *= m;\r\n        h ^= k;\r\n\r\n        data += 4;\r\n        len -= 4;\r\n    }\r\n\r\n    /* Handle the last few bytes of the input array  */\r\n    switch(len) {\r\n    case 3: h ^= data[2] &lt;&lt; 16;\r\n    case 2: h ^= data[1] &lt;&lt; 8;\r\n    case 1: h ^= data[0]; h *= m;\r\n    };   \r\n\r\n    /* Do a few final mixes of the hash to ensure the last few\r\n     * bytes are well-incorporated. */\r\n    h ^= h &gt;&gt; 13;\r\n    h *= m;\r\n    h ^= h &gt;&gt; 15;\r\n\r\n    return (unsigned int)h;\r\n}\r\n[/cpp]\r\n\r\n图片来自《Redis设计与实现》，并参考了其内容。','RDB落地全量数据及Redis存储设计 -- redis源码分析','','publish','open','open','','rdb%e5%90%8c%e6%ad%a5%e8%90%bd%e5%9c%b0redis%e5%85%a8%e9%87%8f%e6%95%b0%e6%8d%ae-redis%e6%ba%90%e7%a0%81%e5%88%86%e6%9e%90','','','2015-08-25 09:28:32','2015-08-25 09:28:32','',0,'http://unasm.com/?p=526',0,'post','',0),(527,1,'2015-08-24 08:55:53','2015-08-24 08:55:53','先挖坑，等自己跳进去','RDB同步落地redis全量数据 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-24 08:55:53','2015-08-24 08:55:53','',526,'http://unasm.com/2015/08/527/',0,'revision','',0),(528,1,'2015-08-24 08:56:04','2015-08-24 08:56:04','<p>先挖坑，等自己跳进去</p>\r\n','RDB同步落地redis全量数据 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-24 08:56:04','2015-08-24 08:56:04','',526,'http://unasm.com/2015/08/528/',0,'revision','',0),(529,1,'2015-08-24 08:56:19','2015-08-24 08:56:19','<p>先挖坑，等自己跳进去</p>\r\n','RDB同步落地全量数据 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-24 08:56:19','2015-08-24 08:56:19','',526,'http://unasm.com/2015/08/529/',0,'revision','',0),(531,1,'2015-08-25 09:24:19','2015-08-25 09:24:19','Redis是以Hash的方式在内存中组织的，所有的值都统一在一个hash之下，结构如下\n\n<img class=\"alignnone\" src=\"http://www.sinaimg.cn/dy/news/2015/ab.png\" alt=\"redis结构设计\" width=\"820\" height=\"260\" />\n\n以一种方便理解的说法来说，就是所有的Redis的数据，都是存储在dictht这个结构体里面，size，used，sizemask记录了一些属性，table指向由dictEntery构成的数组,hash数组,使用拉链法处理冲突，字符串转int 用的是 MurmurHash2算法(具体实现见下面 dictGenHashFunction函数)。\n\ndictEntry的定义挺有意思的。\n\n[cpp]\ntypedef struct dictEntry {\n\n    // 键\n    void *key;\n\n    // key的类型\n    union {\n        void *val;\n        uint64_t u64;\n        int64_t s64;\n    } v;\n    // 指向下个哈希表节点，形成链表\n    struct dictEntry *next;\n} dictEntry;\n[/cpp]\n\nkey , void 指针，指向的是存储的值的名字，无论是string，还是hash，保存的时候，都有一个对应的指定的名字，就是保存在这里的，union中，保存的是值，无论是hash，还是string，list尽在一个union之中,尚未发现u64以及s64用途，因为是拉链法，所以next指针指向下一个相同key值的entry。\n\n两个void指针，指向的都是一个结构体,robj,其实对于key来说，一个sds就可以了，这里使用robj或许是为了统一化的考虑吧，而对于val，robj则是后续处理的关键，\n\n[cpp]\ntypedef struct redisObject {\n    // 类型\n    unsigned type:4;\n    // 编码\n    unsigned encoding:4;\n    // 对象最后一次被访问的时间\n    unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */\n    // 引用计数\n    int refcount;\n    // 指向实际值的指针\n    void *ptr;\n} robj;\n[/cpp]\n\n简单吧，这个就是redis的存储设计，一个拉链hash以及void指针的巧妙使用而已。\n\n把结构说了个大概，剩下的，就是如何保存这个结构，把这个巨大的hash保存在文件里面。我们从rdb.c的int rdbSave(char *filename) 开始，filename是保存成的rdb文件名字，不过redis是先生成一个临时文件，待临时文件生成完毕，数据存储好，然后更改文件名，应该是防止丢失覆盖数据的。\n\n创建临时文件，初始化rio，生成hash迭代器，遍历数据库之后，开始进入核心的地方,\n\n[cpp]\n        while((de = dictNext(di)) != NULL) {\n            sds keystr = dictGetKey(de);\n            robj key, *o = dictGetVal(de);\n            long long expire;\n\n            // 根据 keystr ，在栈中创建一个 key 对象\n            initStaticStringObject(key,keystr);\n\n            // 获取键的过期时间\n            expire = getExpire(db,&amp;key);\n\n            // 保存键值对数据\n            if (rdbSaveKeyValuePair(&amp;rdb,&amp;key,o,expire,now) == -1) goto werr;\n        }\n[/cpp]\n\ndi可以理解为之前提到的hash数组,dictNext的作用，就是从di这个数组中得到下一个dictEntry值，从0开始，一直遍历到最后，没有太多要说的，不过要注意，di的hash数组是有两个的，一个是rehash使用的。\n\n在这个while循环里面，主要得到三个值，一个是keystr，sds结构，一个是o，就是保存值的地方，这里依然使用的robj,因为o的结构比较复杂多变，一会需要特殊处理，所以不像key那样直接将就将robj中存储的sds提出来了。第三个值是expire，键的过期事件，这个时间也是单独一个hash存储的，保存在rdb文件中的，就是这三个值，k,v以及过期事件，now 是当前的时间戳，过期的变量不保存进rdb。\n\n进入rdbSaveKeyValuePair函数，\n\n[cpp]\nint rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val,\n                        long long expiretime, long long now)\n{\n    /* Save the expire time\n     *\n     * 保存键的过期时间\n     */\n    if (expiretime != -1) {\n        /* If this key is already expired skip it\n         */\n        if (expiretime &lt; now) return 0;\n\n        if (rdbSaveType(rdb,REDIS_RDB_OPCODE_EXPIRETIME_MS) == -1) return -1;\n        if (rdbSaveMillisecondTime(rdb,expiretime) == -1) return -1;\n    }\n\n    /* Save type, key, value\n     *\n     * 保存类型，键，值\n     */\n    if (rdbSaveObjectType(rdb,val) == -1) return -1;\n    if (rdbSaveStringObject(rdb,key) == -1) return -1;\n    if (rdbSaveObject(rdb,val) == -1) return -1;\n\n    return 1;\n}\n[/cpp]\n\n第一个if不表，后三个if，第一个先保存类型，将来解析的时候，先读取这个，然后确定后面的数据格式。redis共5种数据类型，除了string之外，每种类型底层实现各对应 2 - 3 种数据结构。\n<ol>\n	<li>List       由压缩列表，双端列表</li>\n	<li>set         整数列表和hash表</li>\n	<li>zset       压缩列表和跳跃表,hash表</li>\n	<li>Hash    压缩列表和hash表</li>\n</ol>\n第一个if 将对应的结构类型存储，第二个，将key值存储，直接调用的就是string类型的保存，第三种调用的函数是rdbSaveObject，该函数对val进行了判断，针对不同类型数据，进行不同的处理。\n\n该函数有点长，贴出来一个zset的存储吧，感受下是如何存储的，其他的都是类似的处理。\n\n[cpp]\n } else if (o-&gt;type == REDIS_ZSET) {\n        /* Save a sorted set value */\n        if (o-&gt;encoding == REDIS_ENCODING_ZIPLIST) {\n            size_t l = ziplistBlobLen((unsigned char*)o-&gt;ptr);\n\n            // 以字符串对象的形式保存整个 ZIPLIST 有序集\n            if ((n = rdbSaveRawString(rdb,o-&gt;ptr,l)) == -1) return -1;\n            nwritten += n;\n        } else if (o-&gt;encoding == REDIS_ENCODING_SKIPLIST) {\n            zset *zs = o-&gt;ptr;\n            dictIterator *di = dictGetIterator(zs-&gt;dict);\n            dictEntry *de; \n\n            if ((n = rdbSaveLen(rdb,dictSize(zs-&gt;dict))) == -1) return -1;\n            nwritten += n;\n\n            // 遍历有序集\n            while((de = dictNext(di)) != NULL) {\n                robj *eleobj = dictGetKey(de);\n                double *score = dictGetVal(de);\n\n                // 以字符串对象的形式保存集合成员\n                if ((n = rdbSaveStringObject(rdb,eleobj)) == -1) return -1;\n                nwritten += n;\n\n                // 成员分值（一个双精度浮点数）会被转换成字符串\n                // 然后保存到 rdb 中\n                if ((n = rdbSaveDoubleValue(rdb,*score)) == -1) return -1;\n                nwritten += n;\n            }\n            dictReleaseIterator(di);\n        }\n[/cpp]\n\nzset的保存，之所以选择zset，是因为zset的结构是所有的数据结构中最复杂的，可以看到，zset中，同时使用了hash字典和skiplist两种结构，为了效率，不惜double了内存\n\n[cpp]\ntypedef struct zset {                                                                                                                                                          \n\n    // 字典，键为成员，值为分值\n    // 用于支持 O(1) 复杂度的按成员取分值操作\n    dict *dict;\n\n    // 跳跃表，按分值排序成员\n    // 用于支持平均复杂度为 O(log N) 的按分值定位成员操作\n    // 以及范围操作\n    zskiplist *zsl;\n\n} zset;\n[/cpp]\n\nMurmurHash2的实现算法\n\n[cpp]\nunsigned int dictGenHashFunction(const void *key, int len) {\n    /* \'m\' and \'r\' are mixing constants generated offline.\n     They\'re not really \'magic\', they just happen to work well.  */\n    uint32_t seed = dict_hash_function_seed;\n    //也是24位的数字\n    const uint32_t m = 0x5bd1e995;\n    const int r = 24;\n\n    /* Initialize the hash to a \'random\' value */\n    uint32_t h = seed ^ len; \n\n    /* Mix 4 bytes at a time into the hash */\n    const unsigned char *data = (const unsigned char *)key;\n\n    while(len &gt;= 4) {\n        uint32_t k = *(uint32_t*)data;\n\n        k *= m;\n        k ^= k &gt;&gt; r;\n        k *= m;\n\n        h *= m;\n        h ^= k;\n\n        data += 4;\n        len -= 4;\n    }\n\n    /* Handle the last few bytes of the input array  */\n    switch(len) {\n    case 3: h ^= data[2] &lt;&lt; 16;\n    case 2: h ^= data[1] &lt;&lt; 8;\n    case 1: h ^= data[0]; h *= m;\n    };   \n\n    /* Do a few final mixes of the hash to ensure the last few\n     * bytes are well-incorporated. */\n    h ^= h &gt;&gt; 13;\n    h *= m;\n    h ^= h &gt;&gt; 15;\n\n    return (unsigned int)h;\n}\n[/cpp]\n\n图片来自《Redis设计与实现》，并参考了其内容。','RDB落地全量数据及Redis存储设计 -- redis源码分析','','inherit','open','open','','526-autosave-v1','','','2015-08-25 09:24:19','2015-08-25 09:24:19','',526,'http://unasm.com/2015/08/531/',0,'revision','',0),(532,1,'2015-08-25 07:19:39','2015-08-25 07:19:39','Redis是以Hash的方式在内存中组织的，所有的值都统一在一个hash之下，结构如下\r\n\r\n<img class=\"alignnone\" src=\"http://www.sinaimg.cn/dy/news/2015/ab.png\" alt=\"redis结构设计\" width=\"820\" height=\"260\" />\r\n\r\n以一种方便理解的说法来说，就是所有的Redis的数据，都是存储在dictht这个结构里面，size，used，sizemask记录了一些属性，table指向由dictEntery构成的数组,hash数组,使用拉链法处理冲突，字符串转int 用的是 MurmurHash2算法(具体实现见dictGenHashFunction函数)。\r\ndictEntry的定义挺有意思的。\r\n[cpp]\r\ntypedef struct dictEntry {\r\n               \r\n    // 键   \r\n    void *key;\r\n               \r\n    // key的类型\r\n    union { \r\n        void *val;\r\n        uint64_t u64;\r\n        int64_t s64;\r\n    } v;       \r\n               \r\n    // 指向下个哈希表节点，形成链表\r\n    struct dictEntry *next;\r\n               \r\n} dictEntry;         \r\n[/cpp]\r\nkey , void 指针，指向的是存储的值的名字，无论是string，还是hash，保存的时候，都有一个对应的指定的名字，就是保存在这里的，以SDS的方式保存起来，结构体中保存的只是地址，union中，保存的是值，无论是hash，还是string，list尽在一个union之中,尚未发现u64以及s64用途，因为是拉链法，所以next指针指向下一个相同key值的entry。\r\n简单吧，这个就是redis的存储设计，一个拉链hash以及void指针的巧妙使用而已。\r\n\r\n\r\n[cpp]\r\nunsigned int dictGenHashFunction(const void *key, int len) {\r\n    /* \'m\' and \'r\' are mixing constants generated offline.\r\n     They\'re not really \'magic\', they just happen to work well.  */\r\n    uint32_t seed = dict_hash_function_seed;\r\n    //也是24位的数字\r\n    const uint32_t m = 0x5bd1e995;                                                                                                                                                \r\n    const int r = 24;\r\n \r\n    /* Initialize the hash to a \'random\' value */\r\n    uint32_t h = seed ^ len; \r\n \r\n    /* Mix 4 bytes at a time into the hash */\r\n    const unsigned char *data = (const unsigned char *)key;\r\n \r\n    while(len &gt;= 4) { \r\n        uint32_t k = *(uint32_t*)data;\r\n \r\n        k *= m;\r\n        k ^= k &gt;&gt; r;\r\n        k *= m;\r\n \r\n        h *= m;\r\n        h ^= k;\r\n \r\n        data += 4;\r\n        len -= 4;\r\n    }\r\n \r\n    /* Handle the last few bytes of the input array  */\r\n    switch(len) {\r\n    case 3: h ^= data[2] &lt;&lt; 16;\r\n    case 2: h ^= data[1] &lt;&lt; 8;\r\n    case 1: h ^= data[0]; h *= m;\r\n    };   \r\n \r\n    /* Do a few final mixes of the hash to ensure the last few\r\n     * bytes are well-incorporated. */\r\n    h ^= h &gt;&gt; 13;\r\n    h *= m;\r\n    h ^= h &gt;&gt; 15;\r\n \r\n    return (unsigned int)h;\r\n}\r\n[/cpp]\r\n\r\n\r\n&nbsp;','RDB落地全量数据及Redis 存储设计 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-25 07:19:39','2015-08-25 07:19:39','',526,'http://unasm.com/2015/08/532/',0,'revision','',0),(533,1,'2015-08-25 07:29:41','2015-08-25 07:29:41','Redis是以Hash的方式在内存中组织的，所有的值都统一在一个hash之下，结构如下\r\n\r\n<img class=\"alignnone\" src=\"http://www.sinaimg.cn/dy/news/2015/ab.png\" alt=\"redis结构设计\" width=\"820\" height=\"260\" />\r\n\r\n以一种方便理解的说法来说，就是所有的Redis的数据，都是存储在dictht这个结构体里面，size，used，sizemask记录了一些属性，table指向由dictEntery构成的数组,hash数组,使用拉链法处理冲突，字符串转int 用的是 MurmurHash2算法(具体实现见dictGenHashFunction函数)。\r\ndictEntry的定义挺有意思的。\r\n\r\n[cpp]\r\ntypedef struct dictEntry {\r\n               \r\n    // 键   \r\n    void *key;\r\n               \r\n    // key的类型\r\n    union { \r\n        void *val;\r\n        uint64_t u64;\r\n        int64_t s64;\r\n    } v;       \r\n    // 指向下个哈希表节点，形成链表\r\n    struct dictEntry *next;\r\n} dictEntry;         \r\n[/cpp]\r\n\r\nkey , void 指针，指向的是存储的值的名字，无论是string，还是hash，保存的时候，都有一个对应的指定的名字，就是保存在这里的，union中，保存的是值，无论是hash，还是string，list尽在一个union之中,尚未发现u64以及s64用途，因为是拉链法，所以next指针指向下一个相同key值的entry。\r\n\r\n两个void指针，指向的都是一个结构体,robj,其实对于key来说，一个sds就可以了，这里使用robj或许是为了统一化的考虑吧，而对于val，robj则是后续处理的关键，\r\n[cpp]\r\ntypedef struct redisObject {\r\n    // 类型\r\n    unsigned type:4;\r\n    // 编码\r\n    unsigned encoding:4;\r\n    // 对象最后一次被访问的时间\r\n    unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */\r\n    // 引用计数\r\n    int refcount;\r\n    // 指向实际值的指针\r\n    void *ptr;                                                                                                                                             \r\n} robj;\r\n[/cpp]\r\n\r\n简单吧，这个就是redis的存储设计，一个拉链hash以及void指针的巧妙使用而已。\r\n\r\n[cpp]\r\nunsigned int dictGenHashFunction(const void *key, int len) {\r\n    /* \'m\' and \'r\' are mixing constants generated offline.\r\n     They\'re not really \'magic\', they just happen to work well.  */\r\n    uint32_t seed = dict_hash_function_seed;\r\n    //也是24位的数字\r\n    const uint32_t m = 0x5bd1e995;                                                                                                                                                \r\n    const int r = 24;\r\n \r\n    /* Initialize the hash to a \'random\' value */\r\n    uint32_t h = seed ^ len; \r\n \r\n    /* Mix 4 bytes at a time into the hash */\r\n    const unsigned char *data = (const unsigned char *)key;\r\n \r\n    while(len &gt;= 4) { \r\n        uint32_t k = *(uint32_t*)data;\r\n \r\n        k *= m;\r\n        k ^= k &gt;&gt; r;\r\n        k *= m;\r\n \r\n        h *= m;\r\n        h ^= k;\r\n \r\n        data += 4;\r\n        len -= 4;\r\n    }\r\n \r\n    /* Handle the last few bytes of the input array  */\r\n    switch(len) {\r\n    case 3: h ^= data[2] &lt;&lt; 16;\r\n    case 2: h ^= data[1] &lt;&lt; 8;\r\n    case 1: h ^= data[0]; h *= m;\r\n    };   \r\n \r\n    /* Do a few final mixes of the hash to ensure the last few\r\n     * bytes are well-incorporated. */\r\n    h ^= h &gt;&gt; 13;\r\n    h *= m;\r\n    h ^= h &gt;&gt; 15;\r\n \r\n    return (unsigned int)h;\r\n}\r\n[/cpp]\r\n\r\n&nbsp;','RDB落地全量数据及Redis 存储设计 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-25 07:29:41','2015-08-25 07:29:41','',526,'http://unasm.com/2015/08/533/',0,'revision','',0),(534,1,'2015-08-25 08:10:29','2015-08-25 08:10:29','Redis是以Hash的方式在内存中组织的，所有的值都统一在一个hash之下，结构如下\r\n\r\n<img class=\"alignnone\" src=\"http://www.sinaimg.cn/dy/news/2015/ab.png\" alt=\"redis结构设计\" width=\"820\" height=\"260\" />\r\n\r\n以一种方便理解的说法来说，就是所有的Redis的数据，都是存储在dictht这个结构体里面，size，used，sizemask记录了一些属性，table指向由dictEntery构成的数组,hash数组,使用拉链法处理冲突，字符串转int 用的是 MurmurHash2算法(具体实现见dictGenHashFunction函数)。\r\ndictEntry的定义挺有意思的。\r\n\r\n[cpp]\r\ntypedef struct dictEntry {\r\n               \r\n    // 键   \r\n    void *key;\r\n               \r\n    // key的类型\r\n    union { \r\n        void *val;\r\n        uint64_t u64;\r\n        int64_t s64;\r\n    } v;       \r\n    // 指向下个哈希表节点，形成链表\r\n    struct dictEntry *next;\r\n} dictEntry;         \r\n[/cpp]\r\n\r\nkey , void 指针，指向的是存储的值的名字，无论是string，还是hash，保存的时候，都有一个对应的指定的名字，就是保存在这里的，union中，保存的是值，无论是hash，还是string，list尽在一个union之中,尚未发现u64以及s64用途，因为是拉链法，所以next指针指向下一个相同key值的entry。\r\n\r\n两个void指针，指向的都是一个结构体,robj,其实对于key来说，一个sds就可以了，这里使用robj或许是为了统一化的考虑吧，而对于val，robj则是后续处理的关键，\r\n[cpp]\r\ntypedef struct redisObject {\r\n    // 类型\r\n    unsigned type:4;\r\n    // 编码\r\n    unsigned encoding:4;\r\n    // 对象最后一次被访问的时间\r\n    unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */\r\n    // 引用计数\r\n    int refcount;\r\n    // 指向实际值的指针\r\n    void *ptr;                                                                                                                                             \r\n} robj;\r\n[/cpp]\r\n简单吧，这个就是redis的存储设计，一个拉链hash以及void指针的巧妙使用而已。\r\n把结构说了个大概，剩下的，就是如何保存这个结构，把这个巨大的hash保存在文件里面。我们从rdb.c的int rdbSave(char *filename) 开始，filename是保存成的rdb文件名字，不过redis是先生成一个临时文件，待临时文件生成完毕，数据存储好，然后更改文件名，应该是防止丢失覆盖的。\r\n\r\n[cpp]\r\nunsigned int dictGenHashFunction(const void *key, int len) {\r\n    /* \'m\' and \'r\' are mixing constants generated offline.\r\n     They\'re not really \'magic\', they just happen to work well.  */\r\n    uint32_t seed = dict_hash_function_seed;\r\n    //也是24位的数字\r\n    const uint32_t m = 0x5bd1e995;                                                                                                                                                \r\n    const int r = 24;\r\n \r\n    /* Initialize the hash to a \'random\' value */\r\n    uint32_t h = seed ^ len; \r\n \r\n    /* Mix 4 bytes at a time into the hash */\r\n    const unsigned char *data = (const unsigned char *)key;\r\n \r\n    while(len &gt;= 4) { \r\n        uint32_t k = *(uint32_t*)data;\r\n \r\n        k *= m;\r\n        k ^= k &gt;&gt; r;\r\n        k *= m;\r\n \r\n        h *= m;\r\n        h ^= k;\r\n \r\n        data += 4;\r\n        len -= 4;\r\n    }\r\n \r\n    /* Handle the last few bytes of the input array  */\r\n    switch(len) {\r\n    case 3: h ^= data[2] &lt;&lt; 16;\r\n    case 2: h ^= data[1] &lt;&lt; 8;\r\n    case 1: h ^= data[0]; h *= m;\r\n    };   \r\n \r\n    /* Do a few final mixes of the hash to ensure the last few\r\n     * bytes are well-incorporated. */\r\n    h ^= h &gt;&gt; 13;\r\n    h *= m;\r\n    h ^= h &gt;&gt; 15;\r\n \r\n    return (unsigned int)h;\r\n}\r\n[/cpp]\r\n\r\n&nbsp;','RDB落地全量数据及Redis 存储设计 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-25 08:10:29','2015-08-25 08:10:29','',526,'http://unasm.com/2015/08/534/',0,'revision','',0),(535,1,'2015-08-25 08:15:42','2015-08-25 08:15:42','Redis是以Hash的方式在内存中组织的，所有的值都统一在一个hash之下，结构如下\r\n\r\n<img class=\"alignnone\" src=\"http://www.sinaimg.cn/dy/news/2015/ab.png\" alt=\"redis结构设计\" width=\"820\" height=\"260\" />\r\n\r\n以一种方便理解的说法来说，就是所有的Redis的数据，都是存储在dictht这个结构体里面，size，used，sizemask记录了一些属性，table指向由dictEntery构成的数组,hash数组,使用拉链法处理冲突，字符串转int 用的是 MurmurHash2算法(具体实现见dictGenHashFunction函数)。\r\ndictEntry的定义挺有意思的。\r\n\r\n[cpp]\r\ntypedef struct dictEntry {\r\n               \r\n    // 键   \r\n    void *key;\r\n               \r\n    // key的类型\r\n    union { \r\n        void *val;\r\n        uint64_t u64;\r\n        int64_t s64;\r\n    } v;       \r\n    // 指向下个哈希表节点，形成链表\r\n    struct dictEntry *next;\r\n} dictEntry;         \r\n[/cpp]\r\n\r\nkey , void 指针，指向的是存储的值的名字，无论是string，还是hash，保存的时候，都有一个对应的指定的名字，就是保存在这里的，union中，保存的是值，无论是hash，还是string，list尽在一个union之中,尚未发现u64以及s64用途，因为是拉链法，所以next指针指向下一个相同key值的entry。\r\n\r\n两个void指针，指向的都是一个结构体,robj,其实对于key来说，一个sds就可以了，这里使用robj或许是为了统一化的考虑吧，而对于val，robj则是后续处理的关键，\r\n[cpp]\r\ntypedef struct redisObject {\r\n    // 类型\r\n    unsigned type:4;\r\n    // 编码\r\n    unsigned encoding:4;\r\n    // 对象最后一次被访问的时间\r\n    unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */\r\n    // 引用计数\r\n    int refcount;\r\n    // 指向实际值的指针\r\n    void *ptr;                                                                                                                                             \r\n} robj;\r\n[/cpp]\r\n简单吧，这个就是redis的存储设计，一个拉链hash以及void指针的巧妙使用而已。\r\n把结构说了个大概，剩下的，就是如何保存这个结构，把这个巨大的hash保存在文件里面。我们从rdb.c的int rdbSave(char *filename) 开始，filename是保存成的rdb文件名字，不过redis是先生成一个临时文件，待临时文件生成完毕，数据存储好，然后更改文件名，应该是防止丢失覆盖数据的。\r\n创建临时文件，初始化rio，生成hash迭代器之后，开始进入核心的地方\r\n[cpp]\r\n        while((de = dictNext(di)) != NULL) {\r\n            sds keystr = dictGetKey(de);\r\n            robj key, *o = dictGetVal(de);\r\n            long long expire;\r\n             \r\n            // 根据 keystr ，在栈中创建一个 key 对象\r\n            initStaticStringObject(key,keystr);\r\n             \r\n            // 获取键的过期时间\r\n            expire = getExpire(db,&amp;key);\r\n             \r\n            // 保存键值对数据\r\n            if (rdbSaveKeyValuePair(&amp;rdb,&amp;key,o,expire,now) == -1) goto werr;\r\n        }    \r\n[/cpp]\r\n\r\n\r\n[cpp]\r\nunsigned int dictGenHashFunction(const void *key, int len) {\r\n    /* \'m\' and \'r\' are mixing constants generated offline.\r\n     They\'re not really \'magic\', they just happen to work well.  */\r\n    uint32_t seed = dict_hash_function_seed;\r\n    //也是24位的数字\r\n    const uint32_t m = 0x5bd1e995;                                                                                                                                                \r\n    const int r = 24;\r\n \r\n    /* Initialize the hash to a \'random\' value */\r\n    uint32_t h = seed ^ len; \r\n \r\n    /* Mix 4 bytes at a time into the hash */\r\n    const unsigned char *data = (const unsigned char *)key;\r\n \r\n    while(len &gt;= 4) { \r\n        uint32_t k = *(uint32_t*)data;\r\n \r\n        k *= m;\r\n        k ^= k &gt;&gt; r;\r\n        k *= m;\r\n \r\n        h *= m;\r\n        h ^= k;\r\n \r\n        data += 4;\r\n        len -= 4;\r\n    }\r\n \r\n    /* Handle the last few bytes of the input array  */\r\n    switch(len) {\r\n    case 3: h ^= data[2] &lt;&lt; 16;\r\n    case 2: h ^= data[1] &lt;&lt; 8;\r\n    case 1: h ^= data[0]; h *= m;\r\n    };   \r\n \r\n    /* Do a few final mixes of the hash to ensure the last few\r\n     * bytes are well-incorporated. */\r\n    h ^= h &gt;&gt; 13;\r\n    h *= m;\r\n    h ^= h &gt;&gt; 15;\r\n \r\n    return (unsigned int)h;\r\n}\r\n[/cpp]\r\n\r\n&nbsp;','RDB落地全量数据及Redis 存储设计 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-25 08:15:42','2015-08-25 08:15:42','',526,'http://unasm.com/2015/08/535/',0,'revision','',0),(536,1,'2015-08-25 08:22:29','2015-08-25 08:22:29','Redis是以Hash的方式在内存中组织的，所有的值都统一在一个hash之下，结构如下\r\n\r\n<img class=\"alignnone\" src=\"http://www.sinaimg.cn/dy/news/2015/ab.png\" alt=\"redis结构设计\" width=\"820\" height=\"260\" />\r\n\r\n以一种方便理解的说法来说，就是所有的Redis的数据，都是存储在dictht这个结构体里面，size，used，sizemask记录了一些属性，table指向由dictEntery构成的数组,hash数组,使用拉链法处理冲突，字符串转int 用的是 MurmurHash2算法(具体实现见dictGenHashFunction函数)。\r\ndictEntry的定义挺有意思的。\r\n\r\n[cpp]\r\ntypedef struct dictEntry {\r\n               \r\n    // 键   \r\n    void *key;\r\n               \r\n    // key的类型\r\n    union { \r\n        void *val;\r\n        uint64_t u64;\r\n        int64_t s64;\r\n    } v;       \r\n    // 指向下个哈希表节点，形成链表\r\n    struct dictEntry *next;\r\n} dictEntry;         \r\n[/cpp]\r\n\r\nkey , void 指针，指向的是存储的值的名字，无论是string，还是hash，保存的时候，都有一个对应的指定的名字，就是保存在这里的，union中，保存的是值，无论是hash，还是string，list尽在一个union之中,尚未发现u64以及s64用途，因为是拉链法，所以next指针指向下一个相同key值的entry。\r\n\r\n两个void指针，指向的都是一个结构体,robj,其实对于key来说，一个sds就可以了，这里使用robj或许是为了统一化的考虑吧，而对于val，robj则是后续处理的关键，\r\n[cpp]\r\ntypedef struct redisObject {\r\n    // 类型\r\n    unsigned type:4;\r\n    // 编码\r\n    unsigned encoding:4;\r\n    // 对象最后一次被访问的时间\r\n    unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */\r\n    // 引用计数\r\n    int refcount;\r\n    // 指向实际值的指针\r\n    void *ptr;                                                                                                                                             \r\n} robj;\r\n[/cpp]\r\n简单吧，这个就是redis的存储设计，一个拉链hash以及void指针的巧妙使用而已。\r\n把结构说了个大概，剩下的，就是如何保存这个结构，把这个巨大的hash保存在文件里面。我们从rdb.c的int rdbSave(char *filename) 开始，filename是保存成的rdb文件名字，不过redis是先生成一个临时文件，待临时文件生成完毕，数据存储好，然后更改文件名，应该是防止丢失覆盖数据的。\r\n创建临时文件，初始化rio，生成hash迭代器，遍历数据库之后，开始进入核心的地方,\r\n[cpp]\r\n        while((de = dictNext(di)) != NULL) {\r\n            sds keystr = dictGetKey(de);\r\n            robj key, *o = dictGetVal(de);\r\n            long long expire;\r\n             \r\n            // 根据 keystr ，在栈中创建一个 key 对象\r\n            initStaticStringObject(key,keystr);\r\n             \r\n            // 获取键的过期时间\r\n            expire = getExpire(db,&amp;key);\r\n             \r\n            // 保存键值对数据\r\n            if (rdbSaveKeyValuePair(&amp;rdb,&amp;key,o,expire,now) == -1) goto werr;\r\n        }    \r\n[/cpp]\r\n\r\ndi可以理解为之前提交的hash数组,dictNext的作用，就是从di这个数组中得到下一个\r\n\r\n[cpp]\r\nunsigned int dictGenHashFunction(const void *key, int len) {\r\n    /* \'m\' and \'r\' are mixing constants generated offline.\r\n     They\'re not really \'magic\', they just happen to work well.  */\r\n    uint32_t seed = dict_hash_function_seed;\r\n    //也是24位的数字\r\n    const uint32_t m = 0x5bd1e995;                                                                                                                                                \r\n    const int r = 24;\r\n \r\n    /* Initialize the hash to a \'random\' value */\r\n    uint32_t h = seed ^ len; \r\n \r\n    /* Mix 4 bytes at a time into the hash */\r\n    const unsigned char *data = (const unsigned char *)key;\r\n \r\n    while(len &gt;= 4) { \r\n        uint32_t k = *(uint32_t*)data;\r\n \r\n        k *= m;\r\n        k ^= k &gt;&gt; r;\r\n        k *= m;\r\n \r\n        h *= m;\r\n        h ^= k;\r\n \r\n        data += 4;\r\n        len -= 4;\r\n    }\r\n \r\n    /* Handle the last few bytes of the input array  */\r\n    switch(len) {\r\n    case 3: h ^= data[2] &lt;&lt; 16;\r\n    case 2: h ^= data[1] &lt;&lt; 8;\r\n    case 1: h ^= data[0]; h *= m;\r\n    };   \r\n \r\n    /* Do a few final mixes of the hash to ensure the last few\r\n     * bytes are well-incorporated. */\r\n    h ^= h &gt;&gt; 13;\r\n    h *= m;\r\n    h ^= h &gt;&gt; 15;\r\n \r\n    return (unsigned int)h;\r\n}\r\n[/cpp]\r\n\r\n&nbsp;','RDB落地全量数据及Redis 存储设计 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-25 08:22:29','2015-08-25 08:22:29','',526,'http://unasm.com/2015/08/536/',0,'revision','',0),(537,1,'2015-08-25 08:30:37','2015-08-25 08:30:37','Redis是以Hash的方式在内存中组织的，所有的值都统一在一个hash之下，结构如下\r\n\r\n<img class=\"alignnone\" src=\"http://www.sinaimg.cn/dy/news/2015/ab.png\" alt=\"redis结构设计\" width=\"820\" height=\"260\" />\r\n\r\n以一种方便理解的说法来说，就是所有的Redis的数据，都是存储在dictht这个结构体里面，size，used，sizemask记录了一些属性，table指向由dictEntery构成的数组,hash数组,使用拉链法处理冲突，字符串转int 用的是 MurmurHash2算法(具体实现见dictGenHashFunction函数)。\r\ndictEntry的定义挺有意思的。\r\n\r\n[cpp]\r\ntypedef struct dictEntry {\r\n               \r\n    // 键   \r\n    void *key;\r\n               \r\n    // key的类型\r\n    union { \r\n        void *val;\r\n        uint64_t u64;\r\n        int64_t s64;\r\n    } v;       \r\n    // 指向下个哈希表节点，形成链表\r\n    struct dictEntry *next;\r\n} dictEntry;         \r\n[/cpp]\r\n\r\nkey , void 指针，指向的是存储的值的名字，无论是string，还是hash，保存的时候，都有一个对应的指定的名字，就是保存在这里的，union中，保存的是值，无论是hash，还是string，list尽在一个union之中,尚未发现u64以及s64用途，因为是拉链法，所以next指针指向下一个相同key值的entry。\r\n\r\n两个void指针，指向的都是一个结构体,robj,其实对于key来说，一个sds就可以了，这里使用robj或许是为了统一化的考虑吧，而对于val，robj则是后续处理的关键，\r\n[cpp]\r\ntypedef struct redisObject {\r\n    // 类型\r\n    unsigned type:4;\r\n    // 编码\r\n    unsigned encoding:4;\r\n    // 对象最后一次被访问的时间\r\n    unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */\r\n    // 引用计数\r\n    int refcount;\r\n    // 指向实际值的指针\r\n    void *ptr;                                                                                                                                             \r\n} robj;\r\n[/cpp]\r\n简单吧，这个就是redis的存储设计，一个拉链hash以及void指针的巧妙使用而已。\r\n把结构说了个大概，剩下的，就是如何保存这个结构，把这个巨大的hash保存在文件里面。我们从rdb.c的int rdbSave(char *filename) 开始，filename是保存成的rdb文件名字，不过redis是先生成一个临时文件，待临时文件生成完毕，数据存储好，然后更改文件名，应该是防止丢失覆盖数据的。\r\n创建临时文件，初始化rio，生成hash迭代器，遍历数据库之后，开始进入核心的地方,\r\n[cpp]\r\n        while((de = dictNext(di)) != NULL) {\r\n            sds keystr = dictGetKey(de);\r\n            robj key, *o = dictGetVal(de);\r\n            long long expire;\r\n             \r\n            // 根据 keystr ，在栈中创建一个 key 对象\r\n            initStaticStringObject(key,keystr);\r\n             \r\n            // 获取键的过期时间\r\n            expire = getExpire(db,&amp;key);\r\n             \r\n            // 保存键值对数据\r\n            if (rdbSaveKeyValuePair(&amp;rdb,&amp;key,o,expire,now) == -1) goto werr;\r\n        }    \r\n[/cpp]\r\n\r\ndi可以理解为之前提到的hash数组,dictNext的作用，就是从di这个数组中得到下一个dictEntry值，从0开始，一直遍历到最后，没有太多要说的，不过要注意，di的hash数组是有两个的，一个是rehash使用的。\r\n在这个while循环里面，主要得到三个值，一个是keystr，sds结构，一个是o，就是保存值的地方，这里依然使用的robj,因为o的结构比较复杂多变，一会需要特殊处理，所以不像key那样直接将\r\n\r\n[cpp]\r\nunsigned int dictGenHashFunction(const void *key, int len) {\r\n    /* \'m\' and \'r\' are mixing constants generated offline.\r\n     They\'re not really \'magic\', they just happen to work well.  */\r\n    uint32_t seed = dict_hash_function_seed;\r\n    //也是24位的数字\r\n    const uint32_t m = 0x5bd1e995;                                                                                                                                                \r\n    const int r = 24;\r\n \r\n    /* Initialize the hash to a \'random\' value */\r\n    uint32_t h = seed ^ len; \r\n \r\n    /* Mix 4 bytes at a time into the hash */\r\n    const unsigned char *data = (const unsigned char *)key;\r\n \r\n    while(len &gt;= 4) { \r\n        uint32_t k = *(uint32_t*)data;\r\n \r\n        k *= m;\r\n        k ^= k &gt;&gt; r;\r\n        k *= m;\r\n \r\n        h *= m;\r\n        h ^= k;\r\n \r\n        data += 4;\r\n        len -= 4;\r\n    }\r\n \r\n    /* Handle the last few bytes of the input array  */\r\n    switch(len) {\r\n    case 3: h ^= data[2] &lt;&lt; 16;\r\n    case 2: h ^= data[1] &lt;&lt; 8;\r\n    case 1: h ^= data[0]; h *= m;\r\n    };   \r\n \r\n    /* Do a few final mixes of the hash to ensure the last few\r\n     * bytes are well-incorporated. */\r\n    h ^= h &gt;&gt; 13;\r\n    h *= m;\r\n    h ^= h &gt;&gt; 15;\r\n \r\n    return (unsigned int)h;\r\n}\r\n[/cpp]\r\n\r\n&nbsp;','RDB落地全量数据及Redis 存储设计 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-25 08:30:37','2015-08-25 08:30:37','',526,'http://unasm.com/2015/08/537/',0,'revision','',0),(538,1,'2015-08-25 08:35:26','2015-08-25 08:35:26','Redis是以Hash的方式在内存中组织的，所有的值都统一在一个hash之下，结构如下\r\n\r\n<img class=\"alignnone\" src=\"http://www.sinaimg.cn/dy/news/2015/ab.png\" alt=\"redis结构设计\" width=\"820\" height=\"260\" />\r\n\r\n以一种方便理解的说法来说，就是所有的Redis的数据，都是存储在dictht这个结构体里面，size，used，sizemask记录了一些属性，table指向由dictEntery构成的数组,hash数组,使用拉链法处理冲突，字符串转int 用的是 MurmurHash2算法(具体实现见dictGenHashFunction函数)。\r\ndictEntry的定义挺有意思的。\r\n\r\n[cpp]\r\ntypedef struct dictEntry {\r\n               \r\n    // 键   \r\n    void *key;\r\n               \r\n    // key的类型\r\n    union { \r\n        void *val;\r\n        uint64_t u64;\r\n        int64_t s64;\r\n    } v;       \r\n    // 指向下个哈希表节点，形成链表\r\n    struct dictEntry *next;\r\n} dictEntry;         \r\n[/cpp]\r\n\r\nkey , void 指针，指向的是存储的值的名字，无论是string，还是hash，保存的时候，都有一个对应的指定的名字，就是保存在这里的，union中，保存的是值，无论是hash，还是string，list尽在一个union之中,尚未发现u64以及s64用途，因为是拉链法，所以next指针指向下一个相同key值的entry。\r\n\r\n两个void指针，指向的都是一个结构体,robj,其实对于key来说，一个sds就可以了，这里使用robj或许是为了统一化的考虑吧，而对于val，robj则是后续处理的关键，\r\n[cpp]\r\ntypedef struct redisObject {\r\n    // 类型\r\n    unsigned type:4;\r\n    // 编码\r\n    unsigned encoding:4;\r\n    // 对象最后一次被访问的时间\r\n    unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */\r\n    // 引用计数\r\n    int refcount;\r\n    // 指向实际值的指针\r\n    void *ptr;                                                                                                                                             \r\n} robj;\r\n[/cpp]\r\n简单吧，这个就是redis的存储设计，一个拉链hash以及void指针的巧妙使用而已。\r\n把结构说了个大概，剩下的，就是如何保存这个结构，把这个巨大的hash保存在文件里面。我们从rdb.c的int rdbSave(char *filename) 开始，filename是保存成的rdb文件名字，不过redis是先生成一个临时文件，待临时文件生成完毕，数据存储好，然后更改文件名，应该是防止丢失覆盖数据的。\r\n创建临时文件，初始化rio，生成hash迭代器，遍历数据库之后，开始进入核心的地方,\r\n[cpp]\r\n        while((de = dictNext(di)) != NULL) {\r\n            sds keystr = dictGetKey(de);\r\n            robj key, *o = dictGetVal(de);\r\n            long long expire;\r\n             \r\n            // 根据 keystr ，在栈中创建一个 key 对象\r\n            initStaticStringObject(key,keystr);\r\n             \r\n            // 获取键的过期时间\r\n            expire = getExpire(db,&amp;key);\r\n             \r\n            // 保存键值对数据\r\n            if (rdbSaveKeyValuePair(&amp;rdb,&amp;key,o,expire,now) == -1) goto werr;\r\n        }    \r\n[/cpp]\r\n\r\ndi可以理解为之前提到的hash数组,dictNext的作用，就是从di这个数组中得到下一个dictEntry值，从0开始，一直遍历到最后，没有太多要说的，不过要注意，di的hash数组是有两个的，一个是rehash使用的。\r\n在这个while循环里面，主要得到三个值，一个是keystr，sds结构，一个是o，就是保存值的地方，这里依然使用的robj,因为o的结构比较复杂多变，一会需要特殊处理，所以不像key那样直接将就将robj中存储的sds提出来了。第三个值是expire，键的过期事件，这个时间也是单独一个hash存储的，保存在rdb文件中的，就是这三个值，k,v以及过期事件，now 是当前的时间戳，过期的变量不保存。\r\n\r\n[cpp]\r\nunsigned int dictGenHashFunction(const void *key, int len) {\r\n    /* \'m\' and \'r\' are mixing constants generated offline.\r\n     They\'re not really \'magic\', they just happen to work well.  */\r\n    uint32_t seed = dict_hash_function_seed;\r\n    //也是24位的数字\r\n    const uint32_t m = 0x5bd1e995;                                                                                                                                                \r\n    const int r = 24;\r\n \r\n    /* Initialize the hash to a \'random\' value */\r\n    uint32_t h = seed ^ len; \r\n \r\n    /* Mix 4 bytes at a time into the hash */\r\n    const unsigned char *data = (const unsigned char *)key;\r\n \r\n    while(len &gt;= 4) { \r\n        uint32_t k = *(uint32_t*)data;\r\n \r\n        k *= m;\r\n        k ^= k &gt;&gt; r;\r\n        k *= m;\r\n \r\n        h *= m;\r\n        h ^= k;\r\n \r\n        data += 4;\r\n        len -= 4;\r\n    }\r\n \r\n    /* Handle the last few bytes of the input array  */\r\n    switch(len) {\r\n    case 3: h ^= data[2] &lt;&lt; 16;\r\n    case 2: h ^= data[1] &lt;&lt; 8;\r\n    case 1: h ^= data[0]; h *= m;\r\n    };   \r\n \r\n    /* Do a few final mixes of the hash to ensure the last few\r\n     * bytes are well-incorporated. */\r\n    h ^= h &gt;&gt; 13;\r\n    h *= m;\r\n    h ^= h &gt;&gt; 15;\r\n \r\n    return (unsigned int)h;\r\n}\r\n[/cpp]\r\n\r\n&nbsp;','RDB落地全量数据及Redis 存储设计 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-25 08:35:26','2015-08-25 08:35:26','',526,'http://unasm.com/2015/08/538/',0,'revision','',0),(539,1,'2015-08-25 08:39:21','2015-08-25 08:39:21','Redis是以Hash的方式在内存中组织的，所有的值都统一在一个hash之下，结构如下\r\n\r\n<img class=\"alignnone\" src=\"http://www.sinaimg.cn/dy/news/2015/ab.png\" alt=\"redis结构设计\" width=\"820\" height=\"260\" />\r\n\r\n以一种方便理解的说法来说，就是所有的Redis的数据，都是存储在dictht这个结构体里面，size，used，sizemask记录了一些属性，table指向由dictEntery构成的数组,hash数组,使用拉链法处理冲突，字符串转int 用的是 MurmurHash2算法(具体实现见dictGenHashFunction函数)。\r\ndictEntry的定义挺有意思的。\r\n\r\n[cpp]\r\ntypedef struct dictEntry {\r\n               \r\n    // 键   \r\n    void *key;\r\n               \r\n    // key的类型\r\n    union { \r\n        void *val;\r\n        uint64_t u64;\r\n        int64_t s64;\r\n    } v;       \r\n    // 指向下个哈希表节点，形成链表\r\n    struct dictEntry *next;\r\n} dictEntry;         \r\n[/cpp]\r\n\r\nkey , void 指针，指向的是存储的值的名字，无论是string，还是hash，保存的时候，都有一个对应的指定的名字，就是保存在这里的，union中，保存的是值，无论是hash，还是string，list尽在一个union之中,尚未发现u64以及s64用途，因为是拉链法，所以next指针指向下一个相同key值的entry。\r\n\r\n两个void指针，指向的都是一个结构体,robj,其实对于key来说，一个sds就可以了，这里使用robj或许是为了统一化的考虑吧，而对于val，robj则是后续处理的关键，\r\n[cpp]\r\ntypedef struct redisObject {\r\n    // 类型\r\n    unsigned type:4;\r\n    // 编码\r\n    unsigned encoding:4;\r\n    // 对象最后一次被访问的时间\r\n    unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */\r\n    // 引用计数\r\n    int refcount;\r\n    // 指向实际值的指针\r\n    void *ptr;                                                                                                                                             \r\n} robj;\r\n[/cpp]\r\n简单吧，这个就是redis的存储设计，一个拉链hash以及void指针的巧妙使用而已。\r\n把结构说了个大概，剩下的，就是如何保存这个结构，把这个巨大的hash保存在文件里面。我们从rdb.c的int rdbSave(char *filename) 开始，filename是保存成的rdb文件名字，不过redis是先生成一个临时文件，待临时文件生成完毕，数据存储好，然后更改文件名，应该是防止丢失覆盖数据的。\r\n创建临时文件，初始化rio，生成hash迭代器，遍历数据库之后，开始进入核心的地方,\r\n[cpp]\r\n        while((de = dictNext(di)) != NULL) {\r\n            sds keystr = dictGetKey(de);\r\n            robj key, *o = dictGetVal(de);\r\n            long long expire;\r\n             \r\n            // 根据 keystr ，在栈中创建一个 key 对象\r\n            initStaticStringObject(key,keystr);\r\n             \r\n            // 获取键的过期时间\r\n            expire = getExpire(db,&amp;key);\r\n             \r\n            // 保存键值对数据\r\n            if (rdbSaveKeyValuePair(&amp;rdb,&amp;key,o,expire,now) == -1) goto werr;\r\n        }    \r\n[/cpp]\r\n\r\ndi可以理解为之前提到的hash数组,dictNext的作用，就是从di这个数组中得到下一个dictEntry值，从0开始，一直遍历到最后，没有太多要说的，不过要注意，di的hash数组是有两个的，一个是rehash使用的。\r\n在这个while循环里面，主要得到三个值，一个是keystr，sds结构，一个是o，就是保存值的地方，这里依然使用的robj,因为o的结构比较复杂多变，一会需要特殊处理，所以不像key那样直接将就将robj中存储的sds提出来了。第三个值是expire，键的过期事件，这个时间也是单独一个hash存储的，保存在rdb文件中的，就是这三个值，k,v以及过期事件，now 是当前的时间戳，过期的变量不保存进rdb。\r\n进入rdbSaveKeyValuePair函数，\r\n\r\n[cpp]\r\nint rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val,\r\n                        long long expiretime, long long now)                                                                                                                      \r\n{\r\n    /* Save the expire time \r\n     *\r\n     * 保存键的过期时间\r\n     */\r\n    if (expiretime != -1) {\r\n        /* If this key is already expired skip it \r\n         *\r\n         * 不写入已经过期的键\r\n         */\r\n        if (expiretime &lt; now) return 0;\r\n \r\n        if (rdbSaveType(rdb,REDIS_RDB_OPCODE_EXPIRETIME_MS) == -1) return -1;\r\n        if (rdbSaveMillisecondTime(rdb,expiretime) == -1) return -1;\r\n    }\r\n \r\n    /* Save type, key, value \r\n     *\r\n     * 保存类型，键，值\r\n     */\r\n    if (rdbSaveObjectType(rdb,val) == -1) return -1;\r\n    if (rdbSaveStringObject(rdb,key) == -1) return -1;\r\n    if (rdbSaveObject(rdb,val) == -1) return -1;\r\n \r\n    return 1;\r\n}\r\n[/cpp]\r\n\r\n[cpp]\r\nunsigned int dictGenHashFunction(const void *key, int len) {\r\n    /* \'m\' and \'r\' are mixing constants generated offline.\r\n     They\'re not really \'magic\', they just happen to work well.  */\r\n    uint32_t seed = dict_hash_function_seed;\r\n    //也是24位的数字\r\n    const uint32_t m = 0x5bd1e995;                                                                                                                                                \r\n    const int r = 24;\r\n \r\n    /* Initialize the hash to a \'random\' value */\r\n    uint32_t h = seed ^ len; \r\n \r\n    /* Mix 4 bytes at a time into the hash */\r\n    const unsigned char *data = (const unsigned char *)key;\r\n \r\n    while(len &gt;= 4) { \r\n        uint32_t k = *(uint32_t*)data;\r\n \r\n        k *= m;\r\n        k ^= k &gt;&gt; r;\r\n        k *= m;\r\n \r\n        h *= m;\r\n        h ^= k;\r\n \r\n        data += 4;\r\n        len -= 4;\r\n    }\r\n \r\n    /* Handle the last few bytes of the input array  */\r\n    switch(len) {\r\n    case 3: h ^= data[2] &lt;&lt; 16;\r\n    case 2: h ^= data[1] &lt;&lt; 8;\r\n    case 1: h ^= data[0]; h *= m;\r\n    };   \r\n \r\n    /* Do a few final mixes of the hash to ensure the last few\r\n     * bytes are well-incorporated. */\r\n    h ^= h &gt;&gt; 13;\r\n    h *= m;\r\n    h ^= h &gt;&gt; 15;\r\n \r\n    return (unsigned int)h;\r\n}\r\n[/cpp]\r\n\r\n&nbsp;','RDB落地全量数据及Redis 存储设计 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-25 08:39:21','2015-08-25 08:39:21','',526,'http://unasm.com/2015/08/539/',0,'revision','',0),(540,1,'2015-08-25 08:43:20','2015-08-25 08:43:20','Redis是以Hash的方式在内存中组织的，所有的值都统一在一个hash之下，结构如下\r\n\r\n<img class=\"alignnone\" src=\"http://www.sinaimg.cn/dy/news/2015/ab.png\" alt=\"redis结构设计\" width=\"820\" height=\"260\" />\r\n\r\n以一种方便理解的说法来说，就是所有的Redis的数据，都是存储在dictht这个结构体里面，size，used，sizemask记录了一些属性，table指向由dictEntery构成的数组,hash数组,使用拉链法处理冲突，字符串转int 用的是 MurmurHash2算法(具体实现见dictGenHashFunction函数)。\r\ndictEntry的定义挺有意思的。\r\n\r\n[cpp]\r\ntypedef struct dictEntry {\r\n               \r\n    // 键   \r\n    void *key;\r\n               \r\n    // key的类型\r\n    union { \r\n        void *val;\r\n        uint64_t u64;\r\n        int64_t s64;\r\n    } v;       \r\n    // 指向下个哈希表节点，形成链表\r\n    struct dictEntry *next;\r\n} dictEntry;         \r\n[/cpp]\r\n\r\nkey , void 指针，指向的是存储的值的名字，无论是string，还是hash，保存的时候，都有一个对应的指定的名字，就是保存在这里的，union中，保存的是值，无论是hash，还是string，list尽在一个union之中,尚未发现u64以及s64用途，因为是拉链法，所以next指针指向下一个相同key值的entry。\r\n\r\n两个void指针，指向的都是一个结构体,robj,其实对于key来说，一个sds就可以了，这里使用robj或许是为了统一化的考虑吧，而对于val，robj则是后续处理的关键，\r\n[cpp]\r\ntypedef struct redisObject {\r\n    // 类型\r\n    unsigned type:4;\r\n    // 编码\r\n    unsigned encoding:4;\r\n    // 对象最后一次被访问的时间\r\n    unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */\r\n    // 引用计数\r\n    int refcount;\r\n    // 指向实际值的指针\r\n    void *ptr;                                                                                                                                             \r\n} robj;\r\n[/cpp]\r\n简单吧，这个就是redis的存储设计，一个拉链hash以及void指针的巧妙使用而已。\r\n把结构说了个大概，剩下的，就是如何保存这个结构，把这个巨大的hash保存在文件里面。我们从rdb.c的int rdbSave(char *filename) 开始，filename是保存成的rdb文件名字，不过redis是先生成一个临时文件，待临时文件生成完毕，数据存储好，然后更改文件名，应该是防止丢失覆盖数据的。\r\n创建临时文件，初始化rio，生成hash迭代器，遍历数据库之后，开始进入核心的地方,\r\n[cpp]\r\n        while((de = dictNext(di)) != NULL) {\r\n            sds keystr = dictGetKey(de);\r\n            robj key, *o = dictGetVal(de);\r\n            long long expire;\r\n             \r\n            // 根据 keystr ，在栈中创建一个 key 对象\r\n            initStaticStringObject(key,keystr);\r\n             \r\n            // 获取键的过期时间\r\n            expire = getExpire(db,&amp;key);\r\n             \r\n            // 保存键值对数据\r\n            if (rdbSaveKeyValuePair(&amp;rdb,&amp;key,o,expire,now) == -1) goto werr;\r\n        }    \r\n[/cpp]\r\n\r\ndi可以理解为之前提到的hash数组,dictNext的作用，就是从di这个数组中得到下一个dictEntry值，从0开始，一直遍历到最后，没有太多要说的，不过要注意，di的hash数组是有两个的，一个是rehash使用的。\r\n在这个while循环里面，主要得到三个值，一个是keystr，sds结构，一个是o，就是保存值的地方，这里依然使用的robj,因为o的结构比较复杂多变，一会需要特殊处理，所以不像key那样直接将就将robj中存储的sds提出来了。第三个值是expire，键的过期事件，这个时间也是单独一个hash存储的，保存在rdb文件中的，就是这三个值，k,v以及过期事件，now 是当前的时间戳，过期的变量不保存进rdb。\r\n进入rdbSaveKeyValuePair函数，\r\n\r\n[cpp]\r\nint rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val,\r\n                        long long expiretime, long long now)                                                                                                                      \r\n{\r\n    /* Save the expire time \r\n     *\r\n     * 保存键的过期时间\r\n     */\r\n    if (expiretime != -1) {\r\n        /* If this key is already expired skip it \r\n         */\r\n        if (expiretime &lt; now) return 0;\r\n \r\n        if (rdbSaveType(rdb,REDIS_RDB_OPCODE_EXPIRETIME_MS) == -1) return -1;\r\n        if (rdbSaveMillisecondTime(rdb,expiretime) == -1) return -1;\r\n    }\r\n \r\n    /* Save type, key, value \r\n     *\r\n     * 保存类型，键，值\r\n     */\r\n    if (rdbSaveObjectType(rdb,val) == -1) return -1;\r\n    if (rdbSaveStringObject(rdb,key) == -1) return -1;\r\n    if (rdbSaveObject(rdb,val) == -1) return -1;\r\n \r\n    return 1;\r\n}\r\n[/cpp]\r\n\r\n第一个if不表，后三个if，第一个先保存类型，将来解析的时候，先读取这个，然后确定后面的数据格式。redis共5种数据类型，除了string之外，每种类型底层实现各对应两种数据结构\r\n[cpp]\r\nunsigned int dictGenHashFunction(const void *key, int len) {\r\n    /* \'m\' and \'r\' are mixing constants generated offline.\r\n     They\'re not really \'magic\', they just happen to work well.  */\r\n    uint32_t seed = dict_hash_function_seed;\r\n    //也是24位的数字\r\n    const uint32_t m = 0x5bd1e995;                                                                                                                                                \r\n    const int r = 24;\r\n \r\n    /* Initialize the hash to a \'random\' value */\r\n    uint32_t h = seed ^ len; \r\n \r\n    /* Mix 4 bytes at a time into the hash */\r\n    const unsigned char *data = (const unsigned char *)key;\r\n \r\n    while(len &gt;= 4) { \r\n        uint32_t k = *(uint32_t*)data;\r\n \r\n        k *= m;\r\n        k ^= k &gt;&gt; r;\r\n        k *= m;\r\n \r\n        h *= m;\r\n        h ^= k;\r\n \r\n        data += 4;\r\n        len -= 4;\r\n    }\r\n \r\n    /* Handle the last few bytes of the input array  */\r\n    switch(len) {\r\n    case 3: h ^= data[2] &lt;&lt; 16;\r\n    case 2: h ^= data[1] &lt;&lt; 8;\r\n    case 1: h ^= data[0]; h *= m;\r\n    };   \r\n \r\n    /* Do a few final mixes of the hash to ensure the last few\r\n     * bytes are well-incorporated. */\r\n    h ^= h &gt;&gt; 13;\r\n    h *= m;\r\n    h ^= h &gt;&gt; 15;\r\n \r\n    return (unsigned int)h;\r\n}\r\n[/cpp]\r\n\r\n&nbsp;','RDB落地全量数据及Redis 存储设计 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-25 08:43:20','2015-08-25 08:43:20','',526,'http://unasm.com/2015/08/540/',0,'revision','',0),(542,1,'2015-08-25 08:55:44','2015-08-25 08:55:44','Redis是以Hash的方式在内存中组织的，所有的值都统一在一个hash之下，结构如下\r\n\r\n<img class=\"alignnone\" src=\"http://www.sinaimg.cn/dy/news/2015/ab.png\" alt=\"redis结构设计\" width=\"820\" height=\"260\" />\r\n\r\n以一种方便理解的说法来说，就是所有的Redis的数据，都是存储在dictht这个结构体里面，size，used，sizemask记录了一些属性，table指向由dictEntery构成的数组,hash数组,使用拉链法处理冲突，字符串转int 用的是 MurmurHash2算法(具体实现见dictGenHashFunction函数)。\r\ndictEntry的定义挺有意思的。\r\n\r\n[cpp]\r\ntypedef struct dictEntry {\r\n\r\n    // 键\r\n    void *key;\r\n\r\n    // key的类型\r\n    union {\r\n        void *val;\r\n        uint64_t u64;\r\n        int64_t s64;\r\n    } v;\r\n    // 指向下个哈希表节点，形成链表\r\n    struct dictEntry *next;\r\n} dictEntry;\r\n[/cpp]\r\n\r\nkey , void 指针，指向的是存储的值的名字，无论是string，还是hash，保存的时候，都有一个对应的指定的名字，就是保存在这里的，union中，保存的是值，无论是hash，还是string，list尽在一个union之中,尚未发现u64以及s64用途，因为是拉链法，所以next指针指向下一个相同key值的entry。\r\n\r\n两个void指针，指向的都是一个结构体,robj,其实对于key来说，一个sds就可以了，这里使用robj或许是为了统一化的考虑吧，而对于val，robj则是后续处理的关键，\r\n\r\n[cpp]\r\ntypedef struct redisObject {\r\n    // 类型\r\n    unsigned type:4;\r\n    // 编码\r\n    unsigned encoding:4;\r\n    // 对象最后一次被访问的时间\r\n    unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */\r\n    // 引用计数\r\n    int refcount;\r\n    // 指向实际值的指针\r\n    void *ptr;\r\n} robj;\r\n[/cpp]\r\n\r\n简单吧，这个就是redis的存储设计，一个拉链hash以及void指针的巧妙使用而已。\r\n把结构说了个大概，剩下的，就是如何保存这个结构，把这个巨大的hash保存在文件里面。我们从rdb.c的int rdbSave(char *filename) 开始，filename是保存成的rdb文件名字，不过redis是先生成一个临时文件，待临时文件生成完毕，数据存储好，然后更改文件名，应该是防止丢失覆盖数据的。\r\n创建临时文件，初始化rio，生成hash迭代器，遍历数据库之后，开始进入核心的地方,\r\n\r\n[cpp]\r\n        while((de = dictNext(di)) != NULL) {\r\n            sds keystr = dictGetKey(de);\r\n            robj key, *o = dictGetVal(de);\r\n            long long expire;\r\n\r\n            // 根据 keystr ，在栈中创建一个 key 对象\r\n            initStaticStringObject(key,keystr);\r\n\r\n            // 获取键的过期时间\r\n            expire = getExpire(db,&amp;key);\r\n\r\n            // 保存键值对数据\r\n            if (rdbSaveKeyValuePair(&amp;rdb,&amp;key,o,expire,now) == -1) goto werr;\r\n        }\r\n[/cpp]\r\n\r\ndi可以理解为之前提到的hash数组,dictNext的作用，就是从di这个数组中得到下一个dictEntry值，从0开始，一直遍历到最后，没有太多要说的，不过要注意，di的hash数组是有两个的，一个是rehash使用的。\r\n在这个while循环里面，主要得到三个值，一个是keystr，sds结构，一个是o，就是保存值的地方，这里依然使用的robj,因为o的结构比较复杂多变，一会需要特殊处理，所以不像key那样直接将就将robj中存储的sds提出来了。第三个值是expire，键的过期事件，这个时间也是单独一个hash存储的，保存在rdb文件中的，就是这三个值，k,v以及过期事件，now 是当前的时间戳，过期的变量不保存进rdb。\r\n进入rdbSaveKeyValuePair函数，\r\n\r\n[cpp]\r\nint rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val,\r\n                        long long expiretime, long long now)\r\n{\r\n    /* Save the expire time\r\n     *\r\n     * 保存键的过期时间\r\n     */\r\n    if (expiretime != -1) {\r\n        /* If this key is already expired skip it\r\n         */\r\n        if (expiretime &lt; now) return 0;\r\n\r\n        if (rdbSaveType(rdb,REDIS_RDB_OPCODE_EXPIRETIME_MS) == -1) return -1;\r\n        if (rdbSaveMillisecondTime(rdb,expiretime) == -1) return -1;\r\n    }\r\n\r\n    /* Save type, key, value\r\n     *\r\n     * 保存类型，键，值\r\n     */\r\n    if (rdbSaveObjectType(rdb,val) == -1) return -1;\r\n    if (rdbSaveStringObject(rdb,key) == -1) return -1;\r\n    if (rdbSaveObject(rdb,val) == -1) return -1;\r\n\r\n    return 1;\r\n}\r\n[/cpp]\r\n\r\n第一个if不表，后三个if，第一个先保存类型，将来解析的时候，先读取这个，然后确定后面的数据格式。redis共5种数据类型，除了string之外，每种类型底层实现各对应两种数据结构。\r\n<ol>\r\n	<li>List       由压缩列表，双端列表</li>\r\n	<li>set         整数列表和hash表</li>\r\n	<li>zset       压缩列表和跳跃表</li>\r\n	<li>Hash    压缩列表和hash表</li>\r\n</ol>\r\n第一个if 将对应的结构类型存储，第二个，将key值存储，直接调用的就是string类型的保存，第三种调用的函数是rdbSaveObject，该函数对val进行了判断，针对不同类型数据，进行不同的处理。\r\n\r\n[cpp]\r\nunsigned int dictGenHashFunction(const void *key, int len) {\r\n    /* \'m\' and \'r\' are mixing constants generated offline.\r\n     They\'re not really \'magic\', they just happen to work well.  */\r\n    uint32_t seed = dict_hash_function_seed;\r\n    //也是24位的数字\r\n    const uint32_t m = 0x5bd1e995;\r\n    const int r = 24;\r\n\r\n    /* Initialize the hash to a \'random\' value */\r\n    uint32_t h = seed ^ len; \r\n\r\n    /* Mix 4 bytes at a time into the hash */\r\n    const unsigned char *data = (const unsigned char *)key;\r\n\r\n    while(len &gt;= 4) {\r\n        uint32_t k = *(uint32_t*)data;\r\n\r\n        k *= m;\r\n        k ^= k &gt;&gt; r;\r\n        k *= m;\r\n\r\n        h *= m;\r\n        h ^= k;\r\n\r\n        data += 4;\r\n        len -= 4;\r\n    }\r\n\r\n    /* Handle the last few bytes of the input array  */\r\n    switch(len) {\r\n    case 3: h ^= data[2] &lt;&lt; 16;\r\n    case 2: h ^= data[1] &lt;&lt; 8;\r\n    case 1: h ^= data[0]; h *= m;\r\n    };   \r\n\r\n    /* Do a few final mixes of the hash to ensure the last few\r\n     * bytes are well-incorporated. */\r\n    h ^= h &gt;&gt; 13;\r\n    h *= m;\r\n    h ^= h &gt;&gt; 15;\r\n\r\n    return (unsigned int)h;\r\n}\r\n[/cpp]\r\n\r\n&nbsp;','RDB落地全量数据及Redis 存储设计 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-25 08:55:44','2015-08-25 08:55:44','',526,'http://unasm.com/2015/08/542/',0,'revision','',0),(541,1,'2015-08-25 08:48:32','2015-08-25 08:48:32','Redis是以Hash的方式在内存中组织的，所有的值都统一在一个hash之下，结构如下\r\n\r\n<img class=\"alignnone\" src=\"http://www.sinaimg.cn/dy/news/2015/ab.png\" alt=\"redis结构设计\" width=\"820\" height=\"260\" />\r\n\r\n以一种方便理解的说法来说，就是所有的Redis的数据，都是存储在dictht这个结构体里面，size，used，sizemask记录了一些属性，table指向由dictEntery构成的数组,hash数组,使用拉链法处理冲突，字符串转int 用的是 MurmurHash2算法(具体实现见dictGenHashFunction函数)。\r\ndictEntry的定义挺有意思的。\r\n\r\n[cpp]\r\ntypedef struct dictEntry {\r\n               \r\n    // 键   \r\n    void *key;\r\n               \r\n    // key的类型\r\n    union { \r\n        void *val;\r\n        uint64_t u64;\r\n        int64_t s64;\r\n    } v;       \r\n    // 指向下个哈希表节点，形成链表\r\n    struct dictEntry *next;\r\n} dictEntry;         \r\n[/cpp]\r\n\r\nkey , void 指针，指向的是存储的值的名字，无论是string，还是hash，保存的时候，都有一个对应的指定的名字，就是保存在这里的，union中，保存的是值，无论是hash，还是string，list尽在一个union之中,尚未发现u64以及s64用途，因为是拉链法，所以next指针指向下一个相同key值的entry。\r\n\r\n两个void指针，指向的都是一个结构体,robj,其实对于key来说，一个sds就可以了，这里使用robj或许是为了统一化的考虑吧，而对于val，robj则是后续处理的关键，\r\n\r\n[cpp]\r\ntypedef struct redisObject {\r\n    // 类型\r\n    unsigned type:4;\r\n    // 编码\r\n    unsigned encoding:4;\r\n    // 对象最后一次被访问的时间\r\n    unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */\r\n    // 引用计数\r\n    int refcount;\r\n    // 指向实际值的指针\r\n    void *ptr;                                                                                                                                             \r\n} robj;\r\n[/cpp]\r\n\r\n简单吧，这个就是redis的存储设计，一个拉链hash以及void指针的巧妙使用而已。\r\n把结构说了个大概，剩下的，就是如何保存这个结构，把这个巨大的hash保存在文件里面。我们从rdb.c的int rdbSave(char *filename) 开始，filename是保存成的rdb文件名字，不过redis是先生成一个临时文件，待临时文件生成完毕，数据存储好，然后更改文件名，应该是防止丢失覆盖数据的。\r\n创建临时文件，初始化rio，生成hash迭代器，遍历数据库之后，开始进入核心的地方,\r\n\r\n[cpp]\r\n        while((de = dictNext(di)) != NULL) {\r\n            sds keystr = dictGetKey(de);\r\n            robj key, *o = dictGetVal(de);\r\n            long long expire;\r\n             \r\n            // 根据 keystr ，在栈中创建一个 key 对象\r\n            initStaticStringObject(key,keystr);\r\n             \r\n            // 获取键的过期时间\r\n            expire = getExpire(db,&amp;key);\r\n             \r\n            // 保存键值对数据\r\n            if (rdbSaveKeyValuePair(&amp;rdb,&amp;key,o,expire,now) == -1) goto werr;\r\n        }    \r\n[/cpp]\r\n\r\ndi可以理解为之前提到的hash数组,dictNext的作用，就是从di这个数组中得到下一个dictEntry值，从0开始，一直遍历到最后，没有太多要说的，不过要注意，di的hash数组是有两个的，一个是rehash使用的。\r\n在这个while循环里面，主要得到三个值，一个是keystr，sds结构，一个是o，就是保存值的地方，这里依然使用的robj,因为o的结构比较复杂多变，一会需要特殊处理，所以不像key那样直接将就将robj中存储的sds提出来了。第三个值是expire，键的过期事件，这个时间也是单独一个hash存储的，保存在rdb文件中的，就是这三个值，k,v以及过期事件，now 是当前的时间戳，过期的变量不保存进rdb。\r\n进入rdbSaveKeyValuePair函数，\r\n\r\n[cpp]\r\nint rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val,\r\n                        long long expiretime, long long now)                                                                                                                      \r\n{\r\n    /* Save the expire time \r\n     *\r\n     * 保存键的过期时间\r\n     */\r\n    if (expiretime != -1) {\r\n        /* If this key is already expired skip it \r\n         */\r\n        if (expiretime &lt; now) return 0;\r\n \r\n        if (rdbSaveType(rdb,REDIS_RDB_OPCODE_EXPIRETIME_MS) == -1) return -1;\r\n        if (rdbSaveMillisecondTime(rdb,expiretime) == -1) return -1;\r\n    }\r\n \r\n    /* Save type, key, value \r\n     *\r\n     * 保存类型，键，值\r\n     */\r\n    if (rdbSaveObjectType(rdb,val) == -1) return -1;\r\n    if (rdbSaveStringObject(rdb,key) == -1) return -1;\r\n    if (rdbSaveObject(rdb,val) == -1) return -1;\r\n \r\n    return 1;\r\n}\r\n[/cpp]\r\n\r\n第一个if不表，后三个if，第一个先保存类型，将来解析的时候，先读取这个，然后确定后面的数据格式。redis共5种数据类型，除了string之外，每种类型底层实现各对应两种数据结构。\r\n<ol>\r\n	<li>List       由压缩列表，双端列表，不同情况结构不同</li>\r\n	<li>set         整数列表和hash表</li>\r\n	<li>zset       压缩列表和跳跃表</li>\r\n	<li>Hash    压缩列表和hash表</li>\r\n</ol>\r\n\r\n[cpp]\r\nunsigned int dictGenHashFunction(const void *key, int len) {\r\n    /* \'m\' and \'r\' are mixing constants generated offline.\r\n     They\'re not really \'magic\', they just happen to work well.  */\r\n    uint32_t seed = dict_hash_function_seed;\r\n    //也是24位的数字\r\n    const uint32_t m = 0x5bd1e995;                                                                                                                                                \r\n    const int r = 24;\r\n \r\n    /* Initialize the hash to a \'random\' value */\r\n    uint32_t h = seed ^ len; \r\n \r\n    /* Mix 4 bytes at a time into the hash */\r\n    const unsigned char *data = (const unsigned char *)key;\r\n \r\n    while(len &gt;= 4) { \r\n        uint32_t k = *(uint32_t*)data;\r\n \r\n        k *= m;\r\n        k ^= k &gt;&gt; r;\r\n        k *= m;\r\n \r\n        h *= m;\r\n        h ^= k;\r\n \r\n        data += 4;\r\n        len -= 4;\r\n    }\r\n \r\n    /* Handle the last few bytes of the input array  */\r\n    switch(len) {\r\n    case 3: h ^= data[2] &lt;&lt; 16;\r\n    case 2: h ^= data[1] &lt;&lt; 8;\r\n    case 1: h ^= data[0]; h *= m;\r\n    };   \r\n \r\n    /* Do a few final mixes of the hash to ensure the last few\r\n     * bytes are well-incorporated. */\r\n    h ^= h &gt;&gt; 13;\r\n    h *= m;\r\n    h ^= h &gt;&gt; 15;\r\n \r\n    return (unsigned int)h;\r\n}\r\n[/cpp]\r\n\r\n&nbsp;','RDB落地全量数据及Redis 存储设计 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-25 08:48:32','2015-08-25 08:48:32','',526,'http://unasm.com/2015/08/541/',0,'revision','',0),(543,1,'2015-08-25 09:03:53','2015-08-25 09:03:53','Redis是以Hash的方式在内存中组织的，所有的值都统一在一个hash之下，结构如下\r\n\r\n<img class=\"alignnone\" src=\"http://www.sinaimg.cn/dy/news/2015/ab.png\" alt=\"redis结构设计\" width=\"820\" height=\"260\" />\r\n\r\n以一种方便理解的说法来说，就是所有的Redis的数据，都是存储在dictht这个结构体里面，size，used，sizemask记录了一些属性，table指向由dictEntery构成的数组,hash数组,使用拉链法处理冲突，字符串转int 用的是 MurmurHash2算法(具体实现见下面 dictGenHashFunction函数)。\r\ndictEntry的定义挺有意思的。\r\n\r\n[cpp]\r\ntypedef struct dictEntry {\r\n\r\n    // 键\r\n    void *key;\r\n\r\n    // key的类型\r\n    union {\r\n        void *val;\r\n        uint64_t u64;\r\n        int64_t s64;\r\n    } v;\r\n    // 指向下个哈希表节点，形成链表\r\n    struct dictEntry *next;\r\n} dictEntry;\r\n[/cpp]\r\n\r\nkey , void 指针，指向的是存储的值的名字，无论是string，还是hash，保存的时候，都有一个对应的指定的名字，就是保存在这里的，union中，保存的是值，无论是hash，还是string，list尽在一个union之中,尚未发现u64以及s64用途，因为是拉链法，所以next指针指向下一个相同key值的entry。\r\n\r\n两个void指针，指向的都是一个结构体,robj,其实对于key来说，一个sds就可以了，这里使用robj或许是为了统一化的考虑吧，而对于val，robj则是后续处理的关键，\r\n\r\n[cpp]\r\ntypedef struct redisObject {\r\n    // 类型\r\n    unsigned type:4;\r\n    // 编码\r\n    unsigned encoding:4;\r\n    // 对象最后一次被访问的时间\r\n    unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */\r\n    // 引用计数\r\n    int refcount;\r\n    // 指向实际值的指针\r\n    void *ptr;\r\n} robj;\r\n[/cpp]\r\n\r\n简单吧，这个就是redis的存储设计，一个拉链hash以及void指针的巧妙使用而已。\r\n把结构说了个大概，剩下的，就是如何保存这个结构，把这个巨大的hash保存在文件里面。我们从rdb.c的int rdbSave(char *filename) 开始，filename是保存成的rdb文件名字，不过redis是先生成一个临时文件，待临时文件生成完毕，数据存储好，然后更改文件名，应该是防止丢失覆盖数据的。\r\n创建临时文件，初始化rio，生成hash迭代器，遍历数据库之后，开始进入核心的地方,\r\n\r\n[cpp]\r\n        while((de = dictNext(di)) != NULL) {\r\n            sds keystr = dictGetKey(de);\r\n            robj key, *o = dictGetVal(de);\r\n            long long expire;\r\n\r\n            // 根据 keystr ，在栈中创建一个 key 对象\r\n            initStaticStringObject(key,keystr);\r\n\r\n            // 获取键的过期时间\r\n            expire = getExpire(db,&amp;key);\r\n\r\n            // 保存键值对数据\r\n            if (rdbSaveKeyValuePair(&amp;rdb,&amp;key,o,expire,now) == -1) goto werr;\r\n        }\r\n[/cpp]\r\n\r\ndi可以理解为之前提到的hash数组,dictNext的作用，就是从di这个数组中得到下一个dictEntry值，从0开始，一直遍历到最后，没有太多要说的，不过要注意，di的hash数组是有两个的，一个是rehash使用的。\r\n在这个while循环里面，主要得到三个值，一个是keystr，sds结构，一个是o，就是保存值的地方，这里依然使用的robj,因为o的结构比较复杂多变，一会需要特殊处理，所以不像key那样直接将就将robj中存储的sds提出来了。第三个值是expire，键的过期事件，这个时间也是单独一个hash存储的，保存在rdb文件中的，就是这三个值，k,v以及过期事件，now 是当前的时间戳，过期的变量不保存进rdb。\r\n进入rdbSaveKeyValuePair函数，\r\n\r\n[cpp]\r\nint rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val,\r\n                        long long expiretime, long long now)\r\n{\r\n    /* Save the expire time\r\n     *\r\n     * 保存键的过期时间\r\n     */\r\n    if (expiretime != -1) {\r\n        /* If this key is already expired skip it\r\n         */\r\n        if (expiretime &lt; now) return 0;\r\n\r\n        if (rdbSaveType(rdb,REDIS_RDB_OPCODE_EXPIRETIME_MS) == -1) return -1;\r\n        if (rdbSaveMillisecondTime(rdb,expiretime) == -1) return -1;\r\n    }\r\n\r\n    /* Save type, key, value\r\n     *\r\n     * 保存类型，键，值\r\n     */\r\n    if (rdbSaveObjectType(rdb,val) == -1) return -1;\r\n    if (rdbSaveStringObject(rdb,key) == -1) return -1;\r\n    if (rdbSaveObject(rdb,val) == -1) return -1;\r\n\r\n    return 1;\r\n}\r\n[/cpp]\r\n\r\n第一个if不表，后三个if，第一个先保存类型，将来解析的时候，先读取这个，然后确定后面的数据格式。redis共5种数据类型，除了string之外，每种类型底层实现各对应两种数据结构。\r\n<ol>\r\n	<li>List       由压缩列表，双端列表</li>\r\n	<li>set         整数列表和hash表</li>\r\n	<li>zset       压缩列表和跳跃表</li>\r\n	<li>Hash    压缩列表和hash表</li>\r\n</ol>\r\n第一个if 将对应的结构类型存储，第二个，将key值存储，直接调用的就是string类型的保存，第三种调用的函数是rdbSaveObject，该函数对val进行了判断，针对不同类型数据，进行不同的处理。\r\n该函数有点长，贴出来一个zset的存储吧，感受下是如何存储的，其他的都是类似的处理。\r\n[cpp]\r\n } else if (o-&gt;type == REDIS_ZSET) {\r\n        /* Save a sorted set value */\r\n        if (o-&gt;encoding == REDIS_ENCODING_ZIPLIST) {\r\n            size_t l = ziplistBlobLen((unsigned char*)o-&gt;ptr);\r\n             \r\n            // 以字符串对象的形式保存整个 ZIPLIST 有序集                                                                                                                          \r\n            if ((n = rdbSaveRawString(rdb,o-&gt;ptr,l)) == -1) return -1;\r\n            nwritten += n;\r\n        } else if (o-&gt;encoding == REDIS_ENCODING_SKIPLIST) {\r\n            zset *zs = o-&gt;ptr;\r\n            dictIterator *di = dictGetIterator(zs-&gt;dict);\r\n            dictEntry *de; \r\n             \r\n            if ((n = rdbSaveLen(rdb,dictSize(zs-&gt;dict))) == -1) return -1;\r\n            nwritten += n;\r\n             \r\n            // 遍历有序集\r\n            while((de = dictNext(di)) != NULL) {\r\n                robj *eleobj = dictGetKey(de);\r\n                double *score = dictGetVal(de);\r\n             \r\n                // 以字符串对象的形式保存集合成员\r\n                if ((n = rdbSaveStringObject(rdb,eleobj)) == -1) return -1;\r\n                nwritten += n;\r\n             \r\n                // 成员分值（一个双精度浮点数）会被转换成字符串\r\n                // 然后保存到 rdb 中\r\n                if ((n = rdbSaveDoubleValue(rdb,*score)) == -1) return -1;\r\n                nwritten += n;\r\n            }\r\n            dictReleaseIterator(di);\r\n        }\r\n[/cpp]\r\n\r\nzset的保存，之所以选择zset，是因为zset的结构是所有的数据结构中最复杂的，可以看到，zset中，同时使用了hash字典和skiplist两种结构，为了效率，不惜double了内存\r\n[cpp]\r\ntypedef struct zset {                                                                                                                                                          \r\n \r\n    // 字典，键为成员，值为分值\r\n    // 用于支持 O(1) 复杂度的按成员取分值操作\r\n    dict *dict;\r\n \r\n    // 跳跃表，按分值排序成员\r\n    // 用于支持平均复杂度为 O(log N) 的按分值定位成员操作\r\n    // 以及范围操作\r\n    zskiplist *zsl;\r\n \r\n} zset;\r\n[/cpp]\r\n\r\nMurmurHash2的实现算法\r\n[cpp]\r\nunsigned int dictGenHashFunction(const void *key, int len) {\r\n    /* \'m\' and \'r\' are mixing constants generated offline.\r\n     They\'re not really \'magic\', they just happen to work well.  */\r\n    uint32_t seed = dict_hash_function_seed;\r\n    //也是24位的数字\r\n    const uint32_t m = 0x5bd1e995;\r\n    const int r = 24;\r\n\r\n    /* Initialize the hash to a \'random\' value */\r\n    uint32_t h = seed ^ len; \r\n\r\n    /* Mix 4 bytes at a time into the hash */\r\n    const unsigned char *data = (const unsigned char *)key;\r\n\r\n    while(len &gt;= 4) {\r\n        uint32_t k = *(uint32_t*)data;\r\n\r\n        k *= m;\r\n        k ^= k &gt;&gt; r;\r\n        k *= m;\r\n\r\n        h *= m;\r\n        h ^= k;\r\n\r\n        data += 4;\r\n        len -= 4;\r\n    }\r\n\r\n    /* Handle the last few bytes of the input array  */\r\n    switch(len) {\r\n    case 3: h ^= data[2] &lt;&lt; 16;\r\n    case 2: h ^= data[1] &lt;&lt; 8;\r\n    case 1: h ^= data[0]; h *= m;\r\n    };   \r\n\r\n    /* Do a few final mixes of the hash to ensure the last few\r\n     * bytes are well-incorporated. */\r\n    h ^= h &gt;&gt; 13;\r\n    h *= m;\r\n    h ^= h &gt;&gt; 15;\r\n\r\n    return (unsigned int)h;\r\n}\r\n[/cpp]\r\n\r\n&nbsp;','RDB落地全量数据及Redis 存储设计 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-25 09:03:53','2015-08-25 09:03:53','',526,'http://unasm.com/2015/08/543/',0,'revision','',0),(546,1,'2015-08-25 09:15:48','2015-08-25 09:15:48','Redis是以Hash的方式在内存中组织的，所有的值都统一在一个hash之下，结构如下\r\n\r\n<img class=\"alignnone\" src=\"http://www.sinaimg.cn/dy/news/2015/ab.png\" alt=\"redis结构设计\" width=\"820\" height=\"260\" />\r\n\r\n以一种方便理解的说法来说，就是所有的Redis的数据，都是存储在dictht这个结构体里面，size，used，sizemask记录了一些属性，table指向由dictEntery构成的数组,hash数组,使用拉链法处理冲突，字符串转int 用的是 MurmurHash2算法(具体实现见下面 dictGenHashFunction函数)。\r\ndictEntry的定义挺有意思的。\r\n\r\n[cpp]\r\ntypedef struct dictEntry {\r\n\r\n    // 键\r\n    void *key;\r\n\r\n    // key的类型\r\n    union {\r\n        void *val;\r\n        uint64_t u64;\r\n        int64_t s64;\r\n    } v;\r\n    // 指向下个哈希表节点，形成链表\r\n    struct dictEntry *next;\r\n} dictEntry;\r\n[/cpp]\r\n\r\nkey , void 指针，指向的是存储的值的名字，无论是string，还是hash，保存的时候，都有一个对应的指定的名字，就是保存在这里的，union中，保存的是值，无论是hash，还是string，list尽在一个union之中,尚未发现u64以及s64用途，因为是拉链法，所以next指针指向下一个相同key值的entry。\r\n\r\n两个void指针，指向的都是一个结构体,robj,其实对于key来说，一个sds就可以了，这里使用robj或许是为了统一化的考虑吧，而对于val，robj则是后续处理的关键，\r\n\r\n[cpp]\r\ntypedef struct redisObject {\r\n    // 类型\r\n    unsigned type:4;\r\n    // 编码\r\n    unsigned encoding:4;\r\n    // 对象最后一次被访问的时间\r\n    unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */\r\n    // 引用计数\r\n    int refcount;\r\n    // 指向实际值的指针\r\n    void *ptr;\r\n} robj;\r\n[/cpp]\r\n\r\n简单吧，这个就是redis的存储设计，一个拉链hash以及void指针的巧妙使用而已。\r\n把结构说了个大概，剩下的，就是如何保存这个结构，把这个巨大的hash保存在文件里面。我们从rdb.c的int rdbSave(char *filename) 开始，filename是保存成的rdb文件名字，不过redis是先生成一个临时文件，待临时文件生成完毕，数据存储好，然后更改文件名，应该是防止丢失覆盖数据的。\r\n创建临时文件，初始化rio，生成hash迭代器，遍历数据库之后，开始进入核心的地方,\r\n\r\n[cpp]\r\n        while((de = dictNext(di)) != NULL) {\r\n            sds keystr = dictGetKey(de);\r\n            robj key, *o = dictGetVal(de);\r\n            long long expire;\r\n\r\n            // 根据 keystr ，在栈中创建一个 key 对象\r\n            initStaticStringObject(key,keystr);\r\n\r\n            // 获取键的过期时间\r\n            expire = getExpire(db,&amp;key);\r\n\r\n            // 保存键值对数据\r\n            if (rdbSaveKeyValuePair(&amp;rdb,&amp;key,o,expire,now) == -1) goto werr;\r\n        }\r\n[/cpp]\r\n\r\ndi可以理解为之前提到的hash数组,dictNext的作用，就是从di这个数组中得到下一个dictEntry值，从0开始，一直遍历到最后，没有太多要说的，不过要注意，di的hash数组是有两个的，一个是rehash使用的。\r\n\r\n在这个while循环里面，主要得到三个值，一个是keystr，sds结构，一个是o，就是保存值的地方，这里依然使用的robj,因为o的结构比较复杂多变，一会需要特殊处理，所以不像key那样直接将就将robj中存储的sds提出来了。第三个值是expire，键的过期事件，这个时间也是单独一个hash存储的，保存在rdb文件中的，就是这三个值，k,v以及过期事件，now 是当前的时间戳，过期的变量不保存进rdb。\r\n进入rdbSaveKeyValuePair函数，\r\n\r\n[cpp]\r\nint rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val,\r\n                        long long expiretime, long long now)\r\n{\r\n    /* Save the expire time\r\n     *\r\n     * 保存键的过期时间\r\n     */\r\n    if (expiretime != -1) {\r\n        /* If this key is already expired skip it\r\n         */\r\n        if (expiretime &lt; now) return 0;\r\n\r\n        if (rdbSaveType(rdb,REDIS_RDB_OPCODE_EXPIRETIME_MS) == -1) return -1;\r\n        if (rdbSaveMillisecondTime(rdb,expiretime) == -1) return -1;\r\n    }\r\n\r\n    /* Save type, key, value\r\n     *\r\n     * 保存类型，键，值\r\n     */\r\n    if (rdbSaveObjectType(rdb,val) == -1) return -1;\r\n    if (rdbSaveStringObject(rdb,key) == -1) return -1;\r\n    if (rdbSaveObject(rdb,val) == -1) return -1;\r\n\r\n    return 1;\r\n}\r\n[/cpp]\r\n\r\n第一个if不表，后三个if，第一个先保存类型，将来解析的时候，先读取这个，然后确定后面的数据格式。redis共5种数据类型，除了string之外，每种类型底层实现各对应 2 - 3 种数据结构。\r\n<ol>\r\n	<li>List       由压缩列表，双端列表</li>\r\n	<li>set         整数列表和hash表</li>\r\n	<li>zset       压缩列表和跳跃表,hash表</li>\r\n	<li>Hash    压缩列表和hash表</li>\r\n</ol>\r\n第一个if 将对应的结构类型存储，第二个，将key值存储，直接调用的就是string类型的保存，第三种调用的函数是rdbSaveObject，该函数对val进行了判断，针对不同类型数据，进行不同的处理。\r\n\r\n该函数有点长，贴出来一个zset的存储吧，感受下是如何存储的，其他的都是类似的处理。\r\n\r\n[cpp]\r\n } else if (o-&gt;type == REDIS_ZSET) {\r\n        /* Save a sorted set value */\r\n        if (o-&gt;encoding == REDIS_ENCODING_ZIPLIST) {\r\n            size_t l = ziplistBlobLen((unsigned char*)o-&gt;ptr);\r\n\r\n            // 以字符串对象的形式保存整个 ZIPLIST 有序集\r\n            if ((n = rdbSaveRawString(rdb,o-&gt;ptr,l)) == -1) return -1;\r\n            nwritten += n;\r\n        } else if (o-&gt;encoding == REDIS_ENCODING_SKIPLIST) {\r\n            zset *zs = o-&gt;ptr;\r\n            dictIterator *di = dictGetIterator(zs-&gt;dict);\r\n            dictEntry *de; \r\n\r\n            if ((n = rdbSaveLen(rdb,dictSize(zs-&gt;dict))) == -1) return -1;\r\n            nwritten += n;\r\n\r\n            // 遍历有序集\r\n            while((de = dictNext(di)) != NULL) {\r\n                robj *eleobj = dictGetKey(de);\r\n                double *score = dictGetVal(de);\r\n\r\n                // 以字符串对象的形式保存集合成员\r\n                if ((n = rdbSaveStringObject(rdb,eleobj)) == -1) return -1;\r\n                nwritten += n;\r\n\r\n                // 成员分值（一个双精度浮点数）会被转换成字符串\r\n                // 然后保存到 rdb 中\r\n                if ((n = rdbSaveDoubleValue(rdb,*score)) == -1) return -1;\r\n                nwritten += n;\r\n            }\r\n            dictReleaseIterator(di);\r\n        }\r\n[/cpp]\r\n\r\nzset的保存，之所以选择zset，是因为zset的结构是所有的数据结构中最复杂的，可以看到，zset中，同时使用了hash字典和skiplist两种结构，为了效率，不惜double了内存\r\n\r\n[cpp]\r\ntypedef struct zset {                                                                                                                                                          \r\n\r\n    // 字典，键为成员，值为分值\r\n    // 用于支持 O(1) 复杂度的按成员取分值操作\r\n    dict *dict;\r\n\r\n    // 跳跃表，按分值排序成员\r\n    // 用于支持平均复杂度为 O(log N) 的按分值定位成员操作\r\n    // 以及范围操作\r\n    zskiplist *zsl;\r\n\r\n} zset;\r\n[/cpp]\r\n\r\nMurmurHash2的实现算法\r\n\r\n[cpp]\r\nunsigned int dictGenHashFunction(const void *key, int len) {\r\n    /* \'m\' and \'r\' are mixing constants generated offline.\r\n     They\'re not really \'magic\', they just happen to work well.  */\r\n    uint32_t seed = dict_hash_function_seed;\r\n    //也是24位的数字\r\n    const uint32_t m = 0x5bd1e995;\r\n    const int r = 24;\r\n\r\n    /* Initialize the hash to a \'random\' value */\r\n    uint32_t h = seed ^ len; \r\n\r\n    /* Mix 4 bytes at a time into the hash */\r\n    const unsigned char *data = (const unsigned char *)key;\r\n\r\n    while(len &gt;= 4) {\r\n        uint32_t k = *(uint32_t*)data;\r\n\r\n        k *= m;\r\n        k ^= k &gt;&gt; r;\r\n        k *= m;\r\n\r\n        h *= m;\r\n        h ^= k;\r\n\r\n        data += 4;\r\n        len -= 4;\r\n    }\r\n\r\n    /* Handle the last few bytes of the input array  */\r\n    switch(len) {\r\n    case 3: h ^= data[2] &lt;&lt; 16;\r\n    case 2: h ^= data[1] &lt;&lt; 8;\r\n    case 1: h ^= data[0]; h *= m;\r\n    };   \r\n\r\n    /* Do a few final mixes of the hash to ensure the last few\r\n     * bytes are well-incorporated. */\r\n    h ^= h &gt;&gt; 13;\r\n    h *= m;\r\n    h ^= h &gt;&gt; 15;\r\n\r\n    return (unsigned int)h;\r\n}\r\n[/cpp]\r\n\r\n图片来自《Redis设计与实现》，并参考了其内容。','RDB落地全量数据及Redis存储设计 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-25 09:15:48','2015-08-25 09:15:48','',526,'http://unasm.com/2015/08/546/',0,'revision','',0),(545,1,'2015-08-25 09:15:05','2015-08-25 09:15:05','Redis是以Hash的方式在内存中组织的，所有的值都统一在一个hash之下，结构如下\r\n\r\n<img class=\"alignnone\" src=\"http://www.sinaimg.cn/dy/news/2015/ab.png\" alt=\"redis结构设计\" width=\"820\" height=\"260\" />\r\n\r\n以一种方便理解的说法来说，就是所有的Redis的数据，都是存储在dictht这个结构体里面，size，used，sizemask记录了一些属性，table指向由dictEntery构成的数组,hash数组,使用拉链法处理冲突，字符串转int 用的是 MurmurHash2算法(具体实现见下面 dictGenHashFunction函数)。\r\ndictEntry的定义挺有意思的。\r\n\r\n[cpp]\r\ntypedef struct dictEntry {\r\n\r\n    // 键\r\n    void *key;\r\n\r\n    // key的类型\r\n    union {\r\n        void *val;\r\n        uint64_t u64;\r\n        int64_t s64;\r\n    } v;\r\n    // 指向下个哈希表节点，形成链表\r\n    struct dictEntry *next;\r\n} dictEntry;\r\n[/cpp]\r\n\r\nkey , void 指针，指向的是存储的值的名字，无论是string，还是hash，保存的时候，都有一个对应的指定的名字，就是保存在这里的，union中，保存的是值，无论是hash，还是string，list尽在一个union之中,尚未发现u64以及s64用途，因为是拉链法，所以next指针指向下一个相同key值的entry。\r\n\r\n两个void指针，指向的都是一个结构体,robj,其实对于key来说，一个sds就可以了，这里使用robj或许是为了统一化的考虑吧，而对于val，robj则是后续处理的关键，\r\n\r\n[cpp]\r\ntypedef struct redisObject {\r\n    // 类型\r\n    unsigned type:4;\r\n    // 编码\r\n    unsigned encoding:4;\r\n    // 对象最后一次被访问的时间\r\n    unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */\r\n    // 引用计数\r\n    int refcount;\r\n    // 指向实际值的指针\r\n    void *ptr;\r\n} robj;\r\n[/cpp]\r\n\r\n简单吧，这个就是redis的存储设计，一个拉链hash以及void指针的巧妙使用而已。\r\n把结构说了个大概，剩下的，就是如何保存这个结构，把这个巨大的hash保存在文件里面。我们从rdb.c的int rdbSave(char *filename) 开始，filename是保存成的rdb文件名字，不过redis是先生成一个临时文件，待临时文件生成完毕，数据存储好，然后更改文件名，应该是防止丢失覆盖数据的。\r\n创建临时文件，初始化rio，生成hash迭代器，遍历数据库之后，开始进入核心的地方,\r\n\r\n[cpp]\r\n        while((de = dictNext(di)) != NULL) {\r\n            sds keystr = dictGetKey(de);\r\n            robj key, *o = dictGetVal(de);\r\n            long long expire;\r\n\r\n            // 根据 keystr ，在栈中创建一个 key 对象\r\n            initStaticStringObject(key,keystr);\r\n\r\n            // 获取键的过期时间\r\n            expire = getExpire(db,&amp;key);\r\n\r\n            // 保存键值对数据\r\n            if (rdbSaveKeyValuePair(&amp;rdb,&amp;key,o,expire,now) == -1) goto werr;\r\n        }\r\n[/cpp]\r\n\r\ndi可以理解为之前提到的hash数组,dictNext的作用，就是从di这个数组中得到下一个dictEntry值，从0开始，一直遍历到最后，没有太多要说的，不过要注意，di的hash数组是有两个的，一个是rehash使用的。\r\n\r\n在这个while循环里面，主要得到三个值，一个是keystr，sds结构，一个是o，就是保存值的地方，这里依然使用的robj,因为o的结构比较复杂多变，一会需要特殊处理，所以不像key那样直接将就将robj中存储的sds提出来了。第三个值是expire，键的过期事件，这个时间也是单独一个hash存储的，保存在rdb文件中的，就是这三个值，k,v以及过期事件，now 是当前的时间戳，过期的变量不保存进rdb。\r\n进入rdbSaveKeyValuePair函数，\r\n\r\n[cpp]\r\nint rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val,\r\n                        long long expiretime, long long now)\r\n{\r\n    /* Save the expire time\r\n     *\r\n     * 保存键的过期时间\r\n     */\r\n    if (expiretime != -1) {\r\n        /* If this key is already expired skip it\r\n         */\r\n        if (expiretime &lt; now) return 0;\r\n\r\n        if (rdbSaveType(rdb,REDIS_RDB_OPCODE_EXPIRETIME_MS) == -1) return -1;\r\n        if (rdbSaveMillisecondTime(rdb,expiretime) == -1) return -1;\r\n    }\r\n\r\n    /* Save type, key, value\r\n     *\r\n     * 保存类型，键，值\r\n     */\r\n    if (rdbSaveObjectType(rdb,val) == -1) return -1;\r\n    if (rdbSaveStringObject(rdb,key) == -1) return -1;\r\n    if (rdbSaveObject(rdb,val) == -1) return -1;\r\n\r\n    return 1;\r\n}\r\n[/cpp]\r\n\r\n第一个if不表，后三个if，第一个先保存类型，将来解析的时候，先读取这个，然后确定后面的数据格式。redis共5种数据类型，除了string之外，每种类型底层实现各对应 2 - 3 种数据结构。\r\n<ol>\r\n	<li>List       由压缩列表，双端列表</li>\r\n	<li>set         整数列表和hash表</li>\r\n	<li>zset       压缩列表和跳跃表,hash表</li>\r\n	<li>Hash    压缩列表和hash表</li>\r\n</ol>\r\n第一个if 将对应的结构类型存储，第二个，将key值存储，直接调用的就是string类型的保存，第三种调用的函数是rdbSaveObject，该函数对val进行了判断，针对不同类型数据，进行不同的处理。\r\n\r\n该函数有点长，贴出来一个zset的存储吧，感受下是如何存储的，其他的都是类似的处理。\r\n\r\n[cpp]\r\n } else if (o-&gt;type == REDIS_ZSET) {\r\n        /* Save a sorted set value */\r\n        if (o-&gt;encoding == REDIS_ENCODING_ZIPLIST) {\r\n            size_t l = ziplistBlobLen((unsigned char*)o-&gt;ptr);\r\n\r\n            // 以字符串对象的形式保存整个 ZIPLIST 有序集\r\n            if ((n = rdbSaveRawString(rdb,o-&gt;ptr,l)) == -1) return -1;\r\n            nwritten += n;\r\n        } else if (o-&gt;encoding == REDIS_ENCODING_SKIPLIST) {\r\n            zset *zs = o-&gt;ptr;\r\n            dictIterator *di = dictGetIterator(zs-&gt;dict);\r\n            dictEntry *de; \r\n\r\n            if ((n = rdbSaveLen(rdb,dictSize(zs-&gt;dict))) == -1) return -1;\r\n            nwritten += n;\r\n\r\n            // 遍历有序集\r\n            while((de = dictNext(di)) != NULL) {\r\n                robj *eleobj = dictGetKey(de);\r\n                double *score = dictGetVal(de);\r\n\r\n                // 以字符串对象的形式保存集合成员\r\n                if ((n = rdbSaveStringObject(rdb,eleobj)) == -1) return -1;\r\n                nwritten += n;\r\n\r\n                // 成员分值（一个双精度浮点数）会被转换成字符串\r\n                // 然后保存到 rdb 中\r\n                if ((n = rdbSaveDoubleValue(rdb,*score)) == -1) return -1;\r\n                nwritten += n;\r\n            }\r\n            dictReleaseIterator(di);\r\n        }\r\n[/cpp]\r\n\r\nzset的保存，之所以选择zset，是因为zset的结构是所有的数据结构中最复杂的，可以看到，zset中，同时使用了hash字典和skiplist两种结构，为了效率，不惜double了内存\r\n\r\n[cpp]\r\ntypedef struct zset {                                                                                                                                                          \r\n\r\n    // 字典，键为成员，值为分值\r\n    // 用于支持 O(1) 复杂度的按成员取分值操作\r\n    dict *dict;\r\n\r\n    // 跳跃表，按分值排序成员\r\n    // 用于支持平均复杂度为 O(log N) 的按分值定位成员操作\r\n    // 以及范围操作\r\n    zskiplist *zsl;\r\n\r\n} zset;\r\n[/cpp]\r\n\r\nMurmurHash2的实现算法\r\n\r\n[cpp]\r\nunsigned int dictGenHashFunction(const void *key, int len) {\r\n    /* \'m\' and \'r\' are mixing constants generated offline.\r\n     They\'re not really \'magic\', they just happen to work well.  */\r\n    uint32_t seed = dict_hash_function_seed;\r\n    //也是24位的数字\r\n    const uint32_t m = 0x5bd1e995;\r\n    const int r = 24;\r\n\r\n    /* Initialize the hash to a \'random\' value */\r\n    uint32_t h = seed ^ len; \r\n\r\n    /* Mix 4 bytes at a time into the hash */\r\n    const unsigned char *data = (const unsigned char *)key;\r\n\r\n    while(len &gt;= 4) {\r\n        uint32_t k = *(uint32_t*)data;\r\n\r\n        k *= m;\r\n        k ^= k &gt;&gt; r;\r\n        k *= m;\r\n\r\n        h *= m;\r\n        h ^= k;\r\n\r\n        data += 4;\r\n        len -= 4;\r\n    }\r\n\r\n    /* Handle the last few bytes of the input array  */\r\n    switch(len) {\r\n    case 3: h ^= data[2] &lt;&lt; 16;\r\n    case 2: h ^= data[1] &lt;&lt; 8;\r\n    case 1: h ^= data[0]; h *= m;\r\n    };   \r\n\r\n    /* Do a few final mixes of the hash to ensure the last few\r\n     * bytes are well-incorporated. */\r\n    h ^= h &gt;&gt; 13;\r\n    h *= m;\r\n    h ^= h &gt;&gt; 15;\r\n\r\n    return (unsigned int)h;\r\n}\r\n[/cpp]\r\n\r\n\r\n图片来自《Redis设计与实现》，并参考了其内容。</pre>','RDB落地全量数据及Redis 存储设计 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-25 09:15:05','2015-08-25 09:15:05','',526,'http://unasm.com/2015/08/545/',0,'revision','',0),(544,1,'2015-08-25 09:13:48','2015-08-25 09:13:48','Redis是以Hash的方式在内存中组织的，所有的值都统一在一个hash之下，结构如下\r\n\r\n<img class=\"alignnone\" src=\"http://www.sinaimg.cn/dy/news/2015/ab.png\" alt=\"redis结构设计\" width=\"820\" height=\"260\" />\r\n\r\n以一种方便理解的说法来说，就是所有的Redis的数据，都是存储在dictht这个结构体里面，size，used，sizemask记录了一些属性，table指向由dictEntery构成的数组,hash数组,使用拉链法处理冲突，字符串转int 用的是 MurmurHash2算法(具体实现见下面 dictGenHashFunction函数)。\r\ndictEntry的定义挺有意思的。\r\n\r\n[cpp]\r\ntypedef struct dictEntry {\r\n\r\n    // 键\r\n    void *key;\r\n\r\n    // key的类型\r\n    union {\r\n        void *val;\r\n        uint64_t u64;\r\n        int64_t s64;\r\n    } v;\r\n    // 指向下个哈希表节点，形成链表\r\n    struct dictEntry *next;\r\n} dictEntry;\r\n[/cpp]\r\n\r\nkey , void 指针，指向的是存储的值的名字，无论是string，还是hash，保存的时候，都有一个对应的指定的名字，就是保存在这里的，union中，保存的是值，无论是hash，还是string，list尽在一个union之中,尚未发现u64以及s64用途，因为是拉链法，所以next指针指向下一个相同key值的entry。\r\n\r\n两个void指针，指向的都是一个结构体,robj,其实对于key来说，一个sds就可以了，这里使用robj或许是为了统一化的考虑吧，而对于val，robj则是后续处理的关键，\r\n\r\n[cpp]\r\ntypedef struct redisObject {\r\n    // 类型\r\n    unsigned type:4;\r\n    // 编码\r\n    unsigned encoding:4;\r\n    // 对象最后一次被访问的时间\r\n    unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */\r\n    // 引用计数\r\n    int refcount;\r\n    // 指向实际值的指针\r\n    void *ptr;\r\n} robj;\r\n[/cpp]\r\n\r\n简单吧，这个就是redis的存储设计，一个拉链hash以及void指针的巧妙使用而已。\r\n把结构说了个大概，剩下的，就是如何保存这个结构，把这个巨大的hash保存在文件里面。我们从rdb.c的int rdbSave(char *filename) 开始，filename是保存成的rdb文件名字，不过redis是先生成一个临时文件，待临时文件生成完毕，数据存储好，然后更改文件名，应该是防止丢失覆盖数据的。\r\n创建临时文件，初始化rio，生成hash迭代器，遍历数据库之后，开始进入核心的地方,\r\n\r\n[cpp]\r\n        while((de = dictNext(di)) != NULL) {\r\n            sds keystr = dictGetKey(de);\r\n            robj key, *o = dictGetVal(de);\r\n            long long expire;\r\n\r\n            // 根据 keystr ，在栈中创建一个 key 对象\r\n            initStaticStringObject(key,keystr);\r\n\r\n            // 获取键的过期时间\r\n            expire = getExpire(db,&amp;key);\r\n\r\n            // 保存键值对数据\r\n            if (rdbSaveKeyValuePair(&amp;rdb,&amp;key,o,expire,now) == -1) goto werr;\r\n        }\r\n[/cpp]\r\n\r\ndi可以理解为之前提到的hash数组,dictNext的作用，就是从di这个数组中得到下一个dictEntry值，从0开始，一直遍历到最后，没有太多要说的，不过要注意，di的hash数组是有两个的，一个是rehash使用的。\r\n\r\n在这个while循环里面，主要得到三个值，一个是keystr，sds结构，一个是o，就是保存值的地方，这里依然使用的robj,因为o的结构比较复杂多变，一会需要特殊处理，所以不像key那样直接将就将robj中存储的sds提出来了。第三个值是expire，键的过期事件，这个时间也是单独一个hash存储的，保存在rdb文件中的，就是这三个值，k,v以及过期事件，now 是当前的时间戳，过期的变量不保存进rdb。\r\n进入rdbSaveKeyValuePair函数，\r\n\r\n[cpp]\r\nint rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val,\r\n                        long long expiretime, long long now)\r\n{\r\n    /* Save the expire time\r\n     *\r\n     * 保存键的过期时间\r\n     */\r\n    if (expiretime != -1) {\r\n        /* If this key is already expired skip it\r\n         */\r\n        if (expiretime &lt; now) return 0;\r\n\r\n        if (rdbSaveType(rdb,REDIS_RDB_OPCODE_EXPIRETIME_MS) == -1) return -1;\r\n        if (rdbSaveMillisecondTime(rdb,expiretime) == -1) return -1;\r\n    }\r\n\r\n    /* Save type, key, value\r\n     *\r\n     * 保存类型，键，值\r\n     */\r\n    if (rdbSaveObjectType(rdb,val) == -1) return -1;\r\n    if (rdbSaveStringObject(rdb,key) == -1) return -1;\r\n    if (rdbSaveObject(rdb,val) == -1) return -1;\r\n\r\n    return 1;\r\n}\r\n[/cpp]\r\n\r\n第一个if不表，后三个if，第一个先保存类型，将来解析的时候，先读取这个，然后确定后面的数据格式。redis共5种数据类型，除了string之外，每种类型底层实现各对应 2 - 3 种数据结构。\r\n<ol>\r\n	<li>List       由压缩列表，双端列表</li>\r\n	<li>set         整数列表和hash表</li>\r\n	<li>zset       压缩列表和跳跃表,hash表</li>\r\n	<li>Hash    压缩列表和hash表</li>\r\n</ol>\r\n第一个if 将对应的结构类型存储，第二个，将key值存储，直接调用的就是string类型的保存，第三种调用的函数是rdbSaveObject，该函数对val进行了判断，针对不同类型数据，进行不同的处理。\r\n\r\n该函数有点长，贴出来一个zset的存储吧，感受下是如何存储的，其他的都是类似的处理。\r\n\r\n[cpp]\r\n } else if (o-&gt;type == REDIS_ZSET) {\r\n        /* Save a sorted set value */\r\n        if (o-&gt;encoding == REDIS_ENCODING_ZIPLIST) {\r\n            size_t l = ziplistBlobLen((unsigned char*)o-&gt;ptr);\r\n             \r\n            // 以字符串对象的形式保存整个 ZIPLIST 有序集                                                                                                                          \r\n            if ((n = rdbSaveRawString(rdb,o-&gt;ptr,l)) == -1) return -1;\r\n            nwritten += n;\r\n        } else if (o-&gt;encoding == REDIS_ENCODING_SKIPLIST) {\r\n            zset *zs = o-&gt;ptr;\r\n            dictIterator *di = dictGetIterator(zs-&gt;dict);\r\n            dictEntry *de; \r\n             \r\n            if ((n = rdbSaveLen(rdb,dictSize(zs-&gt;dict))) == -1) return -1;\r\n            nwritten += n;\r\n             \r\n            // 遍历有序集\r\n            while((de = dictNext(di)) != NULL) {\r\n                robj *eleobj = dictGetKey(de);\r\n                double *score = dictGetVal(de);\r\n             \r\n                // 以字符串对象的形式保存集合成员\r\n                if ((n = rdbSaveStringObject(rdb,eleobj)) == -1) return -1;\r\n                nwritten += n;\r\n             \r\n                // 成员分值（一个双精度浮点数）会被转换成字符串\r\n                // 然后保存到 rdb 中\r\n                if ((n = rdbSaveDoubleValue(rdb,*score)) == -1) return -1;\r\n                nwritten += n;\r\n            }\r\n            dictReleaseIterator(di);\r\n        }\r\n[/cpp]\r\n\r\nzset的保存，之所以选择zset，是因为zset的结构是所有的数据结构中最复杂的，可以看到，zset中，同时使用了hash字典和skiplist两种结构，为了效率，不惜double了内存\r\n\r\n[cpp]\r\ntypedef struct zset {                                                                                                                                                          \r\n \r\n    // 字典，键为成员，值为分值\r\n    // 用于支持 O(1) 复杂度的按成员取分值操作\r\n    dict *dict;\r\n \r\n    // 跳跃表，按分值排序成员\r\n    // 用于支持平均复杂度为 O(log N) 的按分值定位成员操作\r\n    // 以及范围操作\r\n    zskiplist *zsl;\r\n \r\n} zset;\r\n[/cpp]\r\n\r\nMurmurHash2的实现算法\r\n\r\n[cpp]\r\nunsigned int dictGenHashFunction(const void *key, int len) {\r\n    /* \'m\' and \'r\' are mixing constants generated offline.\r\n     They\'re not really \'magic\', they just happen to work well.  */\r\n    uint32_t seed = dict_hash_function_seed;\r\n    //也是24位的数字\r\n    const uint32_t m = 0x5bd1e995;\r\n    const int r = 24;\r\n\r\n    /* Initialize the hash to a \'random\' value */\r\n    uint32_t h = seed ^ len; \r\n\r\n    /* Mix 4 bytes at a time into the hash */\r\n    const unsigned char *data = (const unsigned char *)key;\r\n\r\n    while(len &gt;= 4) {\r\n        uint32_t k = *(uint32_t*)data;\r\n\r\n        k *= m;\r\n        k ^= k &gt;&gt; r;\r\n        k *= m;\r\n\r\n        h *= m;\r\n        h ^= k;\r\n\r\n        data += 4;\r\n        len -= 4;\r\n    }\r\n\r\n    /* Handle the last few bytes of the input array  */\r\n    switch(len) {\r\n    case 3: h ^= data[2] &lt;&lt; 16;\r\n    case 2: h ^= data[1] &lt;&lt; 8;\r\n    case 1: h ^= data[0]; h *= m;\r\n    };   \r\n\r\n    /* Do a few final mixes of the hash to ensure the last few\r\n     * bytes are well-incorporated. */\r\n    h ^= h &gt;&gt; 13;\r\n    h *= m;\r\n    h ^= h &gt;&gt; 15;\r\n\r\n    return (unsigned int)h;\r\n}\r\n[/cpp]\r\n\r\n&nbsp;','RDB落地全量数据及Redis 存储设计 -- redis源码分析','','inherit','open','open','','526-revision-v1','','','2015-08-25 09:13:48','2015-08-25 09:13:48','',526,'http://unasm.com/2015/08/544/',0,'revision','',0),(558,1,'2015-10-14 12:04:18','2015-10-14 12:04:18','会有坑，先diff 一下，不然有可能在没有冲突的情况下，直接覆盖文件','git merge 的时候','','publish','open','open','','git-merge-%e7%9a%84%e6%97%b6%e5%80%99','','','2015-10-14 12:04:32','2015-10-14 12:04:32','',0,'http://unasm.com/?p=558',0,'post','',0),(559,1,'2015-10-14 12:04:18','2015-10-14 12:04:18','会有坑，先merge 一下，不然有可能在没有冲突的情况下，直接覆盖文件','git merge 的时候','','inherit','open','open','','558-revision-v1','','','2015-10-14 12:04:18','2015-10-14 12:04:18','',558,'http://unasm.com/2015/10/559/',0,'revision','',0),(560,1,'2015-10-14 12:04:25','2015-10-14 12:04:25','会有坑，先diff 一下，不然有可能在没有冲突的情况下，直接覆盖文件','git merge 的时候','','inherit','open','open','','558-revision-v1','','','2015-10-14 12:04:25','2015-10-14 12:04:25','',558,'http://unasm.com/2015/10/560/',0,'revision','',0),(562,1,'2015-11-10 08:24:32','2015-11-10 08:24:32','<ul>\r\n	<li>直接在线上修改代码(出现语法错误，导致丢失数据若干条)</li>\r\n	<li>程序连接数据库权限过高，导致数据表被drop,紧急恢复数据，丢失数据若干小时</li>\r\n	<li>私自上线，没有严格的CR,代码质量不可控，功能不完全可控</li>\r\n</ul>','不规范的操作','','publish','open','open','','%e4%b8%8d%e8%a7%84%e8%8c%83%e7%9a%84%e6%93%8d%e4%bd%9c','','','2015-11-10 08:24:45','2015-11-10 08:24:45','',0,'http://unasm.com/?p=562',0,'post','',0),(563,1,'2015-11-10 08:24:32','2015-11-10 08:24:32','<ul>\r\n	<li>直接在线上修改代码(出现语法错误，导致丢失数据若干条)</li>\r\n	<li>程序连接数据库权限过高，导致数据表被drop,紧急恢复数据，丢失数据若干小时</li>\r\n	<li>私自上线，没有严格的CR,代码质量不可控，功能不完全可控</li>\r\n</ul>','不规范的操作','','inherit','open','open','','562-revision-v1','','','2015-11-10 08:24:32','2015-11-10 08:24:32','',562,'http://unasm.com/2015/11/563/',0,'revision','',0),(565,1,'2016-01-29 15:53:46','2016-01-29 15:53:46','<ol>\r\n	<li class=\"p1\"><span class=\"s1\"> explain select * from auth where id in (select max(id) from auth where uid = \'551875694158684788\' &amp;&amp; type = \'wage\' &amp;&amp; last_event = \'0\' &amp;&amp; status &lt; \'9\');</span></li>\r\n</ol>\r\n<p class=\"p1\"><span class=\"s1\">+----+--------------------+-------+------+---------------+------+---------+-------+------+-------------+</span></p>\r\n<p class=\"p1\"><span class=\"s1\">| id | select_type<span class=\"Apple-converted-space\">        </span>| table | type | possible_keys | key<span class=\"Apple-converted-space\">  </span>| key_len | ref <span class=\"Apple-converted-space\">  </span>| rows | Extra <span class=\"Apple-converted-space\">      </span>|</span></p>\r\n<p class=\"p1\"><span class=\"s1\">+----+--------------------+-------+------+---------------+------+---------+-------+------+-------------+</span></p>\r\n<p class=\"p1\"><span class=\"s1\">|<span class=\"Apple-converted-space\">  </span>1 | PRIMARY<span class=\"Apple-converted-space\">            </span>| auth<span class=\"Apple-converted-space\">  </span>| ALL<span class=\"Apple-converted-space\">  </span>| NULL<span class=\"Apple-converted-space\">          </span>| NULL | NULL<span class=\"Apple-converted-space\">    </span>| NULL<span class=\"Apple-converted-space\">  </span>| 1181 | Using where |</span></p>\r\n<p class=\"p1\"><span class=\"s1\">|<span class=\"Apple-converted-space\">  </span>2 | DEPENDENT SUBQUERY | auth<span class=\"Apple-converted-space\">  </span>| ref<span class=\"Apple-converted-space\">  </span>| uid <span class=\"Apple-converted-space\">          </span>| uid<span class=\"Apple-converted-space\">  </span>| 90<span class=\"Apple-converted-space\">      </span>| const | <span class=\"Apple-converted-space\">  </span>90 | Using where |</span></p>\r\n<p class=\"p1\"><span class=\"s1\">+----+--------------------+-------+------+---------------+------+---------+-------+------+-------------+</span></p>\r\n<p class=\"p1\"><span class=\"s1\">2 rows in set (0.00 sec)</span></p>\r\n\r\n<ol>\r\n	<li class=\"p1\"><span class=\"s1\"> explain select * from auth where id<span class=\"Apple-converted-space\">  </span>= (select max(id) from auth where uid = \'551875694158684788\' &amp;&amp; type = \'wage\' &amp;&amp; last_event = \'0\' &amp;&amp; status &lt; \'9\');</span></li>\r\n</ol>\r\n<p class=\"p1\"><span class=\"s1\">+----+-------------+-------+-------+---------------+---------+---------+-------+------+-------------+</span></p>\r\n<p class=\"p1\"><span class=\"s1\">| id | select_type | table | type<span class=\"Apple-converted-space\">  </span>| possible_keys | key <span class=\"Apple-converted-space\">    </span>| key_len | ref <span class=\"Apple-converted-space\">  </span>| rows | Extra <span class=\"Apple-converted-space\">      </span>|</span></p>\r\n<p class=\"p1\"><span class=\"s1\">+----+-------------+-------+-------+---------------+---------+---------+-------+------+-------------+</span></p>\r\n<p class=\"p1\"><span class=\"s1\">|<span class=\"Apple-converted-space\">  </span>1 | PRIMARY <span class=\"Apple-converted-space\">    </span>| auth<span class=\"Apple-converted-space\">  </span>| const | PRIMARY <span class=\"Apple-converted-space\">      </span>| PRIMARY | 4 <span class=\"Apple-converted-space\">      </span>| const |<span class=\"Apple-converted-space\">    </span>1 | <span class=\"Apple-converted-space\">            </span>|</span></p>\r\n<p class=\"p1\"><span class=\"s1\">|<span class=\"Apple-converted-space\">  </span>2 | SUBQUERY<span class=\"Apple-converted-space\">    </span>| auth<span class=\"Apple-converted-space\">  </span>| ref <span class=\"Apple-converted-space\">  </span>| uid <span class=\"Apple-converted-space\">          </span>| uid <span class=\"Apple-converted-space\">    </span>| 90<span class=\"Apple-converted-space\">      </span>| <span class=\"Apple-converted-space\">      </span>| <span class=\"Apple-converted-space\">  </span>90 | Using where |</span></p>\r\n<p class=\"p1\"><span class=\"s1\">+----+-------------+-------+-------+---------------+---------+---------+-------+------+-------------+</span></p>\r\n<p class=\"p1\"><span class=\"s1\">2 rows in set (0.00 sec)</span></p>\r\n<p class=\"p1\"></p>\r\n<p class=\"p1\">多有意思的现象，只是把 in  换成了 = 而已，性能变化居然如此之大</p>\r\n<p class=\"p1\"></p>','','','publish','open','open','','565','','','2016-01-29 15:53:46','2016-01-29 15:53:46','',0,'http://unasm.com/?p=565',0,'post','',0),(552,1,'2015-09-30 12:49:56','2015-09-30 12:49:56','被rz坑了，上传了一个文件，结果变成了一堆的乱码文件.\r\n\r\n怎么删除这些乱码文件呢，文件名是乱码，不能rm + 文件名删除。\r\n\r\nls -i\r\n得到对应的i节点,\r\nfind ./ -inum 1232136 -exec mv {} ./test.txt \\;\r\n根据对应的i节点，把乱码的文件名修改成其他的名字\r\n就这样','删除乱码文件名','','publish','open','open','','552','','','2015-09-30 12:50:11','2015-09-30 12:50:11','',0,'http://unasm.com/?p=552',0,'post','',0),(553,1,'2015-09-30 12:49:56','2015-09-30 12:49:56','被rz坑了，上传了一个文件，结果变成了一堆的乱码文件.\r\n\r\n怎么删除这些乱码文件呢，文件名是乱码，不能rm + 文件名删除。\r\n\r\nls -i\r\n得到对应的i节点,\r\nfind ./ -inum 1232136 -exec mv {} ./test.txt \\;\r\n根据对应的i节点，把乱码的文件名修改成其他的名字\r\n就这样','','','inherit','open','open','','552-revision-v1','','','2015-09-30 12:49:56','2015-09-30 12:49:56','',552,'http://unasm.com/2015/09/553/',0,'revision','',0),(554,1,'2015-09-30 12:50:11','2015-09-30 12:50:11','被rz坑了，上传了一个文件，结果变成了一堆的乱码文件.\r\n\r\n怎么删除这些乱码文件呢，文件名是乱码，不能rm + 文件名删除。\r\n\r\nls -i\r\n得到对应的i节点,\r\nfind ./ -inum 1232136 -exec mv {} ./test.txt \\;\r\n根据对应的i节点，把乱码的文件名修改成其他的名字\r\n就这样','删除乱码文件名','','inherit','open','open','','552-revision-v1','','','2015-09-30 12:50:11','2015-09-30 12:50:11','',552,'http://unasm.com/2015/09/554/',0,'revision','',0),(555,1,'2015-09-30 13:16:08','2015-09-30 13:16:08','1. adduser djm\r\n2. passwd   djm\r\n3.usermod -g root djm 添加root组权限\r\n4. vi /etc/sudoers 添加用户到sudoers，可以切换到sudo','linux 添加用户','','publish','open','open','','linux-%e6%b7%bb%e5%8a%a0%e7%94%a8%e6%88%b7','','','2015-09-30 13:16:08','2015-09-30 13:16:08','',0,'http://unasm.com/?p=555',0,'post','',0),(556,1,'2015-09-30 13:16:08','2015-09-30 13:16:08','1. adduser djm\r\n2. passwd   djm\r\n3.usermod -g root djm 添加root组权限\r\n4. vi /etc/sudoers 添加用户到sudoers，可以切换到sudo','linux 添加用户','','inherit','open','open','','555-revision-v1','','','2015-09-30 13:16:08','2015-09-30 13:16:08','',555,'http://unasm.com/2015/09/556/',0,'revision','',0),(566,1,'2016-01-29 15:53:46','2016-01-29 15:53:46','<ol>\r\n	<li class=\"p1\"><span class=\"s1\"> explain select * from auth where id in (select max(id) from auth where uid = \'551875694158684788\' &amp;&amp; type = \'wage\' &amp;&amp; last_event = \'0\' &amp;&amp; status &lt; \'9\');</span></li>\r\n</ol>\r\n<p class=\"p1\"><span class=\"s1\">+----+--------------------+-------+------+---------------+------+---------+-------+------+-------------+</span></p>\r\n<p class=\"p1\"><span class=\"s1\">| id | select_type<span class=\"Apple-converted-space\">        </span>| table | type | possible_keys | key<span class=\"Apple-converted-space\">  </span>| key_len | ref <span class=\"Apple-converted-space\">  </span>| rows | Extra <span class=\"Apple-converted-space\">      </span>|</span></p>\r\n<p class=\"p1\"><span class=\"s1\">+----+--------------------+-------+------+---------------+------+---------+-------+------+-------------+</span></p>\r\n<p class=\"p1\"><span class=\"s1\">|<span class=\"Apple-converted-space\">  </span>1 | PRIMARY<span class=\"Apple-converted-space\">            </span>| auth<span class=\"Apple-converted-space\">  </span>| ALL<span class=\"Apple-converted-space\">  </span>| NULL<span class=\"Apple-converted-space\">          </span>| NULL | NULL<span class=\"Apple-converted-space\">    </span>| NULL<span class=\"Apple-converted-space\">  </span>| 1181 | Using where |</span></p>\r\n<p class=\"p1\"><span class=\"s1\">|<span class=\"Apple-converted-space\">  </span>2 | DEPENDENT SUBQUERY | auth<span class=\"Apple-converted-space\">  </span>| ref<span class=\"Apple-converted-space\">  </span>| uid <span class=\"Apple-converted-space\">          </span>| uid<span class=\"Apple-converted-space\">  </span>| 90<span class=\"Apple-converted-space\">      </span>| const | <span class=\"Apple-converted-space\">  </span>90 | Using where |</span></p>\r\n<p class=\"p1\"><span class=\"s1\">+----+--------------------+-------+------+---------------+------+---------+-------+------+-------------+</span></p>\r\n<p class=\"p1\"><span class=\"s1\">2 rows in set (0.00 sec)</span></p>\r\n\r\n<ol>\r\n	<li class=\"p1\"><span class=\"s1\"> explain select * from auth where id<span class=\"Apple-converted-space\">  </span>= (select max(id) from auth where uid = \'551875694158684788\' &amp;&amp; type = \'wage\' &amp;&amp; last_event = \'0\' &amp;&amp; status &lt; \'9\');</span></li>\r\n</ol>\r\n<p class=\"p1\"><span class=\"s1\">+----+-------------+-------+-------+---------------+---------+---------+-------+------+-------------+</span></p>\r\n<p class=\"p1\"><span class=\"s1\">| id | select_type | table | type<span class=\"Apple-converted-space\">  </span>| possible_keys | key <span class=\"Apple-converted-space\">    </span>| key_len | ref <span class=\"Apple-converted-space\">  </span>| rows | Extra <span class=\"Apple-converted-space\">      </span>|</span></p>\r\n<p class=\"p1\"><span class=\"s1\">+----+-------------+-------+-------+---------------+---------+---------+-------+------+-------------+</span></p>\r\n<p class=\"p1\"><span class=\"s1\">|<span class=\"Apple-converted-space\">  </span>1 | PRIMARY <span class=\"Apple-converted-space\">    </span>| auth<span class=\"Apple-converted-space\">  </span>| const | PRIMARY <span class=\"Apple-converted-space\">      </span>| PRIMARY | 4 <span class=\"Apple-converted-space\">      </span>| const |<span class=\"Apple-converted-space\">    </span>1 | <span class=\"Apple-converted-space\">            </span>|</span></p>\r\n<p class=\"p1\"><span class=\"s1\">|<span class=\"Apple-converted-space\">  </span>2 | SUBQUERY<span class=\"Apple-converted-space\">    </span>| auth<span class=\"Apple-converted-space\">  </span>| ref <span class=\"Apple-converted-space\">  </span>| uid <span class=\"Apple-converted-space\">          </span>| uid <span class=\"Apple-converted-space\">    </span>| 90<span class=\"Apple-converted-space\">      </span>| <span class=\"Apple-converted-space\">      </span>| <span class=\"Apple-converted-space\">  </span>90 | Using where |</span></p>\r\n<p class=\"p1\"><span class=\"s1\">+----+-------------+-------+-------+---------------+---------+---------+-------+------+-------------+</span></p>\r\n<p class=\"p1\"><span class=\"s1\">2 rows in set (0.00 sec)</span></p>\r\n<p class=\"p1\"></p>\r\n<p class=\"p1\">多有意思的现象，只是把 in  换成了 = 而已，性能变化居然如此之大</p>\r\n<p class=\"p1\"></p>','','','inherit','open','open','','565-revision-v1','','','2016-01-29 15:53:46','2016-01-29 15:53:46','',565,'http://unasm.com/2016/01/566/',0,'revision','',0),(567,1,'2016-02-04 12:51:11','2016-02-04 12:51:11','已经毕业一年半了，怎么说呢，毕业之后的日子，比毕业之前的任何阶段都精彩，都充实，跳了一次槽。从新浪来到借贷宝，前者悠然自由，后者紧张而刺激，旅游了很多次，上海，青岛，哈尔滨，太原，以北京为中心辐射了半个中国，玩了很多很多东西，滑雪，射箭，冰刀，羽毛球，台球，保龄球，吃了很多很多美食，而体重并没有增加，曾经有过六块腹肌，现在若隐若现，追了一个姑娘，然后失恋了，至今心痛，\"如果他赢得比武大会，并为亚夏拉冠上爱与美的王冠，也许战争就不会发生\"。想想以前的日子，贫穷落后的乡下小孩，懂得什么叫选择呢，又能有什么选择呢，知识与力量的感觉，是如此的甜美，还有什么能比意气风发更加让人沉醉。\r\n\r\n在新浪的日子是快乐自由的，陈晨是一位非常照顾下属的领导，新浪也有很多在技术上的积淀和规范，也是学到了不少东西。小组内的人不多不少，刚刚好一车，他时常会带上全部的人去周围玩，我坐前面，他们三个坐后面，陈晨开车，一起出去玩，云蒙山，白石山，晚上回来一起大吃一顿，周末的时候也会一起吃顿烤羊肉什么的，巴依老爷去过好几次，回龙观的灰太狼烤肉，阿西亚烤肉等等，有次和敏之组的人一起去海边玩，十几个人一起抢一瓶酒喝，一起吃烤肉串，那些日子真的挺开心的。\r\n\r\n周末的时候，也会跟大学的校友们一起打打羽毛球，承蒙校友们指点教导，慢慢的，从什么都不懂，到现在能和很多俱乐部的爱好者们战个来回，卢峰真是为成电北京羽毛球队的发展尽心尽力，叶成鹏，罗达兄师兄也组织了不少次。 有时候也会找以前的老朋友一起打打台球什么的，虽然还是会被很多很多人虐杀，不过，到底也能进球了。\r\n\r\n后来机缘巧合，垠阔少年在群里问有没有谁对借贷宝感兴趣，我一看，那不是那个遍地撒钱，系统还崩溃了的公司么？顿时心动，觉得大有可为，就来试试，虽然被大神景埕面试时候碾压了，不过最终还是收留了，虽然办离职手续的时候，也拿了滴滴和蘑菇街的offer，恩，被小米拒绝，不过最终还是选择了借贷宝。\r\n\r\n9月份入职，和宗术一起开发了地推卡券第一期，之后独自开发了第二期，第三期，又和宗术一起开发了商户系统第一期，第二期，维护了拉新系统的一堆第三方接口，最后会盟用户，交易，支付，好友，网关等等系统，一起开发企业版。我想并没有辜负面试时候那句话吧，“我想来这边做点事情”。\r\n\r\n借贷宝高手如云，这些日子学到的elk和jenkins，让我觉得自己慢慢像个高级工程师了，希望在借贷宝，能成长为一个真正的高级工程师。\r\n\r\n手里慢慢有了点钱，开始尝试下股票，7月份大跌之后到8月份，真是一段黄金日子，看了一些投资方面的书，如麦基尔的漫步华尔街  ,格雷厄姆的聪明的投资者，索罗斯的金融炼金术，看了点股市趋势分析。不过，这个始终是副业，投入的精力和回报真不成比例，只能是培养下投资的理念，保持对经济和金融的敏感罢了。\r\n\r\n“二十三年虚度，业无所成，心无所依”。\r\n\r\n春节之后，我就是二十四了。\r\n\r\n命运的风吹个不停， 生命本若不系之舟，愿所有远航的舵手都能到达最初希望的地方。','2016的总结','','publish','open','open','','%e8%ae%b0%e6%af%95%e4%b8%9a%e4%b9%8b%e5%90%8e%e7%9a%84%e6%97%a5%e5%ad%90','','','2016-02-04 12:55:55','2016-02-04 12:55:55','',0,'http://unasm.com/?p=567',0,'post','',0),(568,1,'2016-02-04 12:51:11','2016-02-04 12:51:11','已经毕业一年半了，怎么说呢，毕业之后的日子，比毕业之前的任何阶段都精彩，都充实，跳了一次槽。从新浪来到借贷宝，前者悠然自由，后者紧张而刺激，旅游了很多次，上海，青岛，哈尔滨，太原，以北京为中心辐射了半个中国，玩了很多很多东西，滑雪，射箭，冰刀，羽毛球，台球，保龄球，吃了很多很多美食，而体重并没有增加，曾经有过六块腹肌，现在若隐若现，追了一个姑娘，然后失恋了，至今心痛，\"如果他赢得比武大会，并为亚夏拉冠上爱与美的王冠，也许战争就不会发生\"。想想以前的日子，贫穷落后的乡下小孩，懂得什么叫选择呢，又能有什么选择呢，知识与力量的感觉，是如此的甜美，还有什么能比意气风发更加让人沉醉。\r\n\r\n在新浪的日子是快乐自由的，陈晨是一位非常照顾下属的领导，新浪也有很多在技术上的积淀和规范，也是学到了不少东西。小组内的人不多不少，刚刚好一车，他市场会带上全部的人去周围玩，我坐前面，他们三个坐后面，陈晨开车，一起出去玩一次，云蒙山，白石山，晚上回来一起大吃一顿，周末的时候也会一起吃顿烤羊肉什么的，巴依老爷去过好几次，回龙观的灰太狼烤肉，阿西亚烤肉等等，有次和敏之组的人一起去海边玩，十几个人一起抢一瓶酒喝，一起吃烤肉串，那些日子真的挺开心的。\r\n\r\n周末的时候，也会跟大学的校友们一起打打羽毛球，承蒙校友们指点教导，慢慢的，从什么都不懂，到现在能和很多俱乐部的爱好者们战个来回，卢峰真是为成电北京羽毛球队的发展尽心尽力，叶成鹏，罗达兄师兄也组织了不少次。 有时候也会找以前的老朋友一起打打台球什么的，虽然还是会被很多很多人虐杀，不过，到底也能进球了。\r\n\r\n后来机缘巧合，垠阔少年在群里问有没有谁对借贷宝感兴趣，我一看，那不是那个遍地撒钱，系统还崩溃了的公司么？顿时心动，觉得大有可为，就来试试，虽然被大神景埕面试时候碾压了，不过最终还是收留了，虽然办离职手续的时候，也拿了滴滴和蘑菇街的offer，恩，被小米拒绝，不过最终还是选择了借贷宝。\r\n\r\n9月份入职，和宗术一起开发了地推卡券第一期，之后独自开发了第二期，第三期，又和宗术一起开发了商户系统第一期，第二期，维护了拉新系统的一堆第三方接口，最后会盟用户，交易，支付，好友，网关等等系统，一起开发企业版。我想并没有辜负面试时候那句话吧，“我想来这边做点事情”。\r\n\r\n借贷宝高手如云，这些日子学到的elk和jenkins，让我觉得自己慢慢像个高级工程师了，希望在借贷宝，能成长为一个真正的高级工程师。\r\n\r\n手里慢慢有了点钱，开始尝试下股票，7月份大跌之后到8月份，真是一段黄金日子，看了一些投资方面的书，如麦基尔的漫步华尔街  ,格雷厄姆的聪明的投资者，索罗斯的金融炼金术，看了点股市趋势分析。不过，这个始终是副业，投入的精力和回报真不成比例，只能是培养下投资的理念，保持对经济和金融的敏感罢了。\r\n\r\n“二十三年虚度，业无所成，心无所依”。\r\n\r\n春节之后，我就是二十四了。\r\n\r\n命运的风吹个不停， 生命本若不系之舟，愿所有远航的舵手都能到达最初希望的地方。','记毕业之后的日子','','inherit','open','open','','567-revision-v1','','','2016-02-04 12:51:11','2016-02-04 12:51:11','',567,'http://unasm.com/2016/02/568/',0,'revision','',0),(569,1,'2016-02-04 12:51:46','2016-02-04 12:51:46','已经毕业一年半了，怎么说呢，毕业之后的日子，比毕业之前的任何阶段都精彩，都充实，跳了一次槽。从新浪来到借贷宝，前者悠然自由，后者紧张而刺激，旅游了很多次，上海，青岛，哈尔滨，太原，以北京为中心辐射了半个中国，玩了很多很多东西，滑雪，射箭，冰刀，羽毛球，台球，保龄球，吃了很多很多美食，而体重并没有增加，曾经有过六块腹肌，现在若隐若现，追了一个姑娘，然后失恋了，至今心痛，\"如果他赢得比武大会，并为亚夏拉冠上爱与美的王冠，也许战争就不会发生\"。想想以前的日子，贫穷落后的乡下小孩，懂得什么叫选择呢，又能有什么选择呢，知识与力量的感觉，是如此的甜美，还有什么能比意气风发更加让人沉醉。\r\n\r\n在新浪的日子是快乐自由的，陈晨是一位非常照顾下属的领导，新浪也有很多在技术上的积淀和规范，也是学到了不少东西。小组内的人不多不少，刚刚好一车，他市场会带上全部的人去周围玩，我坐前面，他们三个坐后面，陈晨开车，一起出去玩一次，云蒙山，白石山，晚上回来一起大吃一顿，周末的时候也会一起吃顿烤羊肉什么的，巴依老爷去过好几次，回龙观的灰太狼烤肉，阿西亚烤肉等等，有次和敏之组的人一起去海边玩，十几个人一起抢一瓶酒喝，一起吃烤肉串，那些日子真的挺开心的。\r\n\r\n周末的时候，也会跟大学的校友们一起打打羽毛球，承蒙校友们指点教导，慢慢的，从什么都不懂，到现在能和很多俱乐部的爱好者们战个来回，卢峰真是为成电北京羽毛球队的发展尽心尽力，叶成鹏，罗达兄师兄也组织了不少次。 有时候也会找以前的老朋友一起打打台球什么的，虽然还是会被很多很多人虐杀，不过，到底也能进球了。\r\n\r\n后来机缘巧合，垠阔少年在群里问有没有谁对借贷宝感兴趣，我一看，那不是那个遍地撒钱，系统还崩溃了的公司么？顿时心动，觉得大有可为，就来试试，虽然被大神景埕面试时候碾压了，不过最终还是收留了，虽然办离职手续的时候，也拿了滴滴和蘑菇街的offer，恩，被小米拒绝，不过最终还是选择了借贷宝。\r\n\r\n9月份入职，和宗术一起开发了地推卡券第一期，之后独自开发了第二期，第三期，又和宗术一起开发了商户系统第一期，第二期，维护了拉新系统的一堆第三方接口，最后会盟用户，交易，支付，好友，网关等等系统，一起开发企业版。我想并没有辜负面试时候那句话吧，“我想来这边做点事情”。\r\n\r\n借贷宝高手如云，这些日子学到的elk和jenkins，让我觉得自己慢慢像个高级工程师了，希望在借贷宝，能成长为一个真正的高级工程师。\r\n\r\n手里慢慢有了点钱，开始尝试下股票，7月份大跌之后到8月份，真是一段黄金日子，看了一些投资方面的书，如麦基尔的漫步华尔街  ,格雷厄姆的聪明的投资者，索罗斯的金融炼金术，看了点股市趋势分析。不过，这个始终是副业，投入的精力和回报真不成比例，只能是培养下投资的理念，保持对经济和金融的敏感罢了。\r\n\r\n“二十三年虚度，业无所成，心无所依”。\r\n\r\n春节之后，我就是二十四了。\r\n\r\n命运的风吹个不停， 生命本若不系之舟，愿所有远航的舵手都能到达最初希望的地方。','2016的总结','','inherit','open','open','','567-revision-v1','','','2016-02-04 12:51:46','2016-02-04 12:51:46','',567,'http://unasm.com/2016/02/569/',0,'revision','',0),(570,1,'2016-02-04 12:54:03','2016-02-04 12:54:03','已经毕业一年半了，怎么说呢，毕业之后的日子，比毕业之前的任何阶段都精彩，都充实，跳了一次槽。从新浪来到借贷宝，前者悠然自由，后者紧张而刺激，旅游了很多次，上海，青岛，哈尔滨，太原，以北京为中心辐射了半个中国，玩了很多很多东西，滑雪，射箭，冰刀，羽毛球，台球，保龄球，吃了很多很多美食，而体重并没有增加，曾经有过六块腹肌，现在若隐若现，追了一个姑娘，然后失恋了，至今心痛，\"如果他赢得比武大会，并为亚夏拉冠上爱与美的王冠，也许战争就不会发生\"。想想以前的日子，贫穷落后的乡下小孩，懂得什么叫选择呢，又能有什么选择呢，知识与力量的感觉，是如此的甜美，还有什么能比意气风发更加让人沉醉。\r\n\r\n在新浪的日子是快乐自由的，陈晨是一位非常照顾下属的领导，新浪也有很多在技术上的积淀和规范，也是学到了不少东西。小组内的人不多不少，刚刚好一车，他时常会带上全部的人去周围玩，我坐前面，他们三个坐后面，陈晨开车，一起出去玩，云蒙山，白石山，晚上回来一起大吃一顿，周末的时候也会一起吃顿烤羊肉什么的，巴依老爷去过好几次，回龙观的灰太狼烤肉，阿西亚烤肉等等，有次和敏之组的人一起去海边玩，十几个人一起抢一瓶酒喝，一起吃烤肉串，那些日子真的挺开心的。\r\n\r\n周末的时候，也会跟大学的校友们一起打打羽毛球，承蒙校友们指点教导，慢慢的，从什么都不懂，到现在能和很多俱乐部的爱好者们战个来回，卢峰真是为成电北京羽毛球队的发展尽心尽力，叶成鹏，罗达兄师兄也组织了不少次。 有时候也会找以前的老朋友一起打打台球什么的，虽然还是会被很多很多人虐杀，不过，到底也能进球了。\r\n\r\n后来机缘巧合，垠阔少年在群里问有没有谁对借贷宝感兴趣，我一看，那不是那个遍地撒钱，系统还崩溃了的公司么？顿时心动，觉得大有可为，就来试试，虽然被大神景埕面试时候碾压了，不过最终还是收留了，虽然办离职手续的时候，也拿了滴滴和蘑菇街的offer，恩，被小米拒绝，不过最终还是选择了借贷宝。\r\n\r\n9月份入职，和宗术一起开发了地推卡券第一期，之后独自开发了第二期，第三期，又和宗术一起开发了商户系统第一期，第二期，维护了拉新系统的一堆第三方接口，最后会盟用户，交易，支付，好友，网关等等系统，一起开发企业版。我想并没有辜负面试时候那句话吧，“我想来这边做点事情”。\r\n\r\n借贷宝高手如云，这些日子学到的elk和jenkins，让我觉得自己慢慢像个高级工程师了，希望在借贷宝，能成长为一个真正的高级工程师。\r\n\r\n手里慢慢有了点钱，开始尝试下股票，7月份大跌之后到8月份，真是一段黄金日子，看了一些投资方面的书，如麦基尔的漫步华尔街  ,格雷厄姆的聪明的投资者，索罗斯的金融炼金术，看了点股市趋势分析。不过，这个始终是副业，投入的精力和回报真不成比例，只能是培养下投资的理念，保持对经济和金融的敏感罢了。\r\n\r\n“二十三年虚度，业无所成，心无所依”。\r\n\r\n春节之后，我就是二十四了。\r\n\r\n命运的风吹个不停， 生命本若不系之舟，愿所有远航的舵手都能到达最初希望的地方。','2016的总结','','inherit','open','open','','567-revision-v1','','','2016-02-04 12:54:03','2016-02-04 12:54:03','',567,'http://unasm.com/2016/02/570/',0,'revision','',0),(572,1,'2016-02-12 04:54:29','2016-02-12 04:54:29','<p class=\"p2\"><span class=\"s1\">马上就要回去了</span><span class=\"s2\">，</span><span class=\"s1\">我觉得还是早点工作比较好，乡下的日子，谈不上开心，更多的 ，是责任</span></p>\r\n<p class=\"p2\"><span class=\"s1\">回到村子里，见到了各种不幸，别人家的，自己家的。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">就说自己家吧，老爸老妈就是很头疼的问题，老妈受不了家里无聊的日子，还是想出去打工，忙碌着，日子充实的多。老爸还是想留在家里，一来不缺钱，二来也不用受苦。老妈老爸的关系谈不上恩爱，远远不是相亲相爱，互相扶持， 生活在一起更多的是责任。老爸六十多了，做事情难免不得体，不招老板待见，母亲勤劳而叨唠，老爸向来不做家务，他们年纪越来越大了，没个彼此照应，出点问题该怎么办呢。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">说到不缺钱，也就是还有生活费罢了，面对一点波折，瞬间回到贫困线。就以这次老哥相亲吧，媒人说到房子，爸妈的底细我是明白的，多年经营，也不过一处房子，如果真按照农村的规矩，给两个儿子办婚礼，怕是还要为难，所以说到房子的时候，难免底气不足，说话也有点耍赖，少了点父亲的担当。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">然后再说我老哥吧，这次相亲，去之前我就明白没可能，所以怂恿，不过想让他碰壁，认清现实而已。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">他其实挺俊俏的，至少以前是这样，太瘦了，现在有点尖嘴猴腮，衣服都是很早以前的了，质量差，也没个样子，整个人太没自信了，看不出一点魄力在，整个人驼背缩肩，形容猥琐，虽然他以前是个羞涩的美少年，现在也不过是农村里不值得多看一眼的loser罢了。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">其实相貌什么无所谓了，我心痛的是他的思想。大学白上了，完全白上了。大学并没有从思想上改变他，依旧是以前的那个自卑且自负的愤青，排斥着外界的思想，固执的认为自己是对的，不，不是，只是拒绝承认，他明白自己穷，丑，工资低，没前途未来，只是拒绝承认。用自嘲和自我伤害来抵御外界的规劝和否定。恩恩，你说的都对，可我他妈的就是这样，你能怎么着。不能怎么着，只是这样下去，你还是穷，还是没房子，没老婆，这是你想要的么，如果不是，那咱们能换种方式么。几年过去了，除了年纪，我感觉不到他的变化。他还是个农村人，教育的意义首先在于做人，其次是技能。而他，什么都没得到。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">承认现实是很痛苦的事情，他需要日复一日，日复一日的对自己痛恨否定和反思，每一刻都不忘记自己的身份，地位和现实，把渴望改变的火焰融进自己血液里面，让它充满自己的大脑。然后才能浴火重生，看到更加宽广美好的世界。</span></p>\r\n“Never forget what you are, for surely the world will not. Make it your strength. Then it can never be your weakness. Armour yourself in it, and it will never be used to hurt you”。\r\n\r\n永远不要拒绝新的思想，永远要虚心聆听别人的建议，哪怕听完后吐他一脸说“老子都懂”，然后用自己拿可怜的小脑瓜是思考下，是不是有道理的，是的话，又该何去何从。\r\n<p class=\"p2\"><span class=\"s1\">再说相亲吧，听说对方是一个市师范学校的，呵呵，我似乎感觉到了她的进退两难。既不甘心上了大学之后重新回到农村，也没能力在城市里面立足。挑剔的看着每一个上门求婚的男人，斟酌着所有提出的条件，也明白，不可能有人拯救自己。很快，她会在年龄，父母，越来越渺茫的希望和一个条件还算可以的求婚者的压力之下屈服，重新回到农村，放弃以前的各种向往，戴上现实的镣铐，跟一个根本无法接受的人一辈子，出于压力，出于责任，出于无奈，一辈子，就像我父亲,我母亲。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">没有像城里的孩子那样从父辈那里继承来智慧和资产，却偏偏向往着城里的生活，我们这一代人，注定要承受着，迷茫，压力，无奈。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">农村，社会的底层，真是充满了各种各样的不幸地方的集合体。每个人都在本性，责任和能力之间不断的抉择。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">一个女儿偷走了母亲的全部积蓄，和男友私奔了，父母闹离婚，兄长的婚事被搁置，而这个女儿，个人认为也会被男友骗的一干二净吧。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">一个男孩，从小被父亲娇生惯养，现在老父无能了，男孩的心智还停留在过去，偌大的汉子，居然无法打工挣钱，还在啃老，一家几口，挤在从爷爷那里继承来的房子。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">被全家人寄予厚望的大学生，毕业后找不到工作，要年迈的父母寄生活费，后来搞传销去了，然后进了监狱。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">小学校长家的儿子长大了，让父亲托关系找了一份月薪2k的工作（开着20w的车）。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">抛开这个小村庄里这些典型的例子,就算是个正常的人家，也不过重复着打工，攒钱，盖房子，娶老婆，生孩子，然后打工，攒钱，盖房子，给二儿子盖房子娶老婆，生孩子，然后养孩子，然后孩子打工，攒钱……循环如是，面对一点点生活的波动，便是举家多年应对的灾难。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">再说点普遍的现象吧，前面提到相亲，那就说结婚吧。这边有个风俗，是定亲的时候，男方要给女方一笔钱，名为“下帖”，而这笔钱，已经从最初的几千，慢慢的上万以至于十万之数，就是一个农村还算有准备的家庭能拿出的全部现金的上限或者一定程度的溢出了上限。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\"> </span>我不清楚这里有多少卖女儿的成分在，但是从结果上考量，两家结为亲家，钱从一家转到另一家，本身并没有财富的增加，如果说，在嫁女儿之前，就已经将对方家庭的财力耗尽，那男方家庭因此为难，会不会怀恨在心，那么可不可以说，女儿还没有嫁过去之前，便已经埋下了家庭争执的祸根，就算是这笔钱，以后通过，比如说嫁妆，彩礼什么的方式返回，那么，返回的物品是必须的么？能不能减少些，留足现金抵抗风险，正确的方式，是不是双方以新家庭能更好的面对未来作为出发点来量力而行整个结婚过程的所有选择。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">完全没有一点资产和负债的概念，农村愚昧之普遍一至于斯，农村的孩子，能从父母那里继承到什么处世的智慧呢。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">最后说点闹心的事情，已经四五个人登门借钱了，不胜其烦，差点因为这个和父亲生气，Fuck。 <span class=\"Apple-converted-space\">       </span></span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">       </span></span></p>','乡下','','private','open','open','','%e4%b9%a1%e4%b8%8b','','','2016-06-06 07:01:03','2016-06-06 07:01:03','',0,'http://unasm.com/?p=572',0,'post','',0),(575,1,'2016-02-12 04:56:46','2016-02-12 04:56:46','<p class=\"p2\"><span class=\"s1\">马上就要回去了</span><span class=\"s2\">，</span><span class=\"s1\">我觉得还是早点工作比较好，乡下的日子，谈不上开心，更多的 ，是责任</span></p>\r\n<p class=\"p2\"><span class=\"s1\">回到村子里，见到了各种不幸，别人家的，自己家的。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">就说自己家吧，老爸老妈就是很头疼的问题，老妈受不了家里无聊的日子，还是想出去打工，忙碌着，日子充实的多。老爸还是想留在家里，一来不缺钱，二来也不用受苦。老妈老爸的关系谈不上恩爱，远远不是相亲相爱，互相扶持， 生活在一起更多的是责任。老爸六十多了，做事情难免不得体，不招老板待见，母亲勤劳而叨唠，老爸向来不做家务，他们年纪越来越大了，没个彼此照应，出点问题该怎么办呢。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">说到不缺钱，也就是还有生活费罢了，面对一点波折，瞬间回到贫困线。就以这次老哥相亲吧，媒人说到房子，爸妈的底细我是明白的，多年经营，也不过一处房子，如果真按照农村的规矩，给两个儿子办婚礼，怕是还要为难，所以说到房子的时候，难免底气不足，说话也有点耍赖，少了点父亲的担当。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">然后再说我老哥吧，这次相亲，去之前我就明白没可能，所以怂恿，不过想让他碰壁，认清现实而已。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">他其实挺俊俏的，至少以前是这样，太瘦了，现在有点尖嘴猴腮，衣服都是很早以前的了，质量差，也没个样子，整个人太没自信了，看不出一点魄力在，整个人驼背缩肩，形容猥琐，虽然他以前是个羞涩的美少年，现在也不过是农村里不值得多看一眼的loser罢了。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">其实相貌什么无所谓了，我心痛的是他的思想。大学白上了，完全白上了。大学并没有从思想上改变他，依旧是以前的那个自卑且自负的愤青，排斥着外界的思想，固执的认为自己是对的，不，不是，只是拒绝承认，他明白自己穷，丑，工资低，没前途未来，只是拒绝承认。用自嘲和自我伤害来抵御外界的规劝和否定。恩恩，你说的都对，可我他妈的就是这样，你能怎么着。不能怎么着，只是这样下去，你还是穷，还是没房子，没老婆，这是你想要的么，如果不是，那咱们能换种方式么。几年过去了，除了年纪，我感觉不到他的变化。他还是个农村人，教育的意义首先在于做人，其次是技能。而他，什么都没得到。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">承认现实是很痛苦的事情，他需要日复一日，日复一日的对自己痛恨否定和反思，每一刻都不忘记自己的身份，地位和现实，把渴望改变的火焰融进自己血液里面，让它充满自己的大脑。然后才能浴火重生，看到更加宽广美好的世界。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">永远不要拒绝新的思想，永远要虚心聆听别人的建议，哪怕听完后吐他一脸说“老子都懂”，然后用自己拿可怜的小脑瓜是思考下，是不是有道理的，是的话，又该何去何从。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">再说相亲吧，听说对方是一个市师范学校的，呵呵，我似乎感觉到了她的进退两难。既不甘心上了大学之后重新回到农村，也没能力在城市里面立足。挑剔的看着每一个上门求婚的男人，斟酌着所有提出的条件，也明白，不可能有人拯救自己。很快，她会在年龄，父母，越来越渺茫的希望和一个条件还算可以的求婚者的压力之下屈服，重新回到农村，放弃以前的各种向往，戴上现实的镣铐，跟一个根本无法接受的人一辈子，出于压力，出于责任，出于无奈，一辈子，就像我父亲,我母亲。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">没有像城里的孩子那样从父辈那里继承来智慧和资产，却偏偏向往着城里的生活，我们这一代人，注定要承受着，迷茫，压力，无奈。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">农村，社会的底层，真是充满了各种各样的不幸地方的集合体。每个人都在本性，责任和能力之间不断的抉择。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">一个女儿偷走了母亲的全部积蓄，和男友私奔了，父母闹离婚，兄长的婚事被搁置，而这个女儿，个人认为也会被男友骗的一干二净吧。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">一个男孩，从小被父亲娇生惯养，现在老父无能了，男孩的心智还停留在过去，偌大的汉子，居然无法打工挣钱，还在啃老，一家几口，挤在从爷爷那里继承来的房子。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">被全家人寄予厚望的大学生，毕业后找不到工作，要年迈的父母寄生活费，后来搞传销去了，然后进了监狱。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">小学校长家的儿子长大了，让父亲托关系找了一份月薪2k的工作（开着20w的车）。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">抛开这个小村庄里这些典型的例子,就算是个正常的人家，也不过重复着打工，攒钱，盖房子，娶老婆，生孩子，然后打工，攒钱，盖房子，给二儿子盖房子娶老婆，生孩子，然后养孩子，然后孩子打工，攒钱……循环如是，面对一点点生活的波动，便是举家多年应对的灾难。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">再说点普遍的现象吧，前面提到相亲，那就说结婚吧。这边有个风俗，是定亲的时候，男方要给女方一笔钱，名为“下帖”，而这笔钱，已经从最初的几千，慢慢的上万以至于十万之数，就是一个农村还算有准备的家庭能拿出的全部现金的上限或者一定程度的溢出了上限。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\"> </span>我不清楚这里有多少卖女儿的成分在，但是从结果上考量，两家结为亲家，钱从一家转到另一家，本身并没有财富的增加，如果说，在嫁女儿之前，就已经将对方家庭的财力耗尽，那男方家庭因此为难，会不会怀恨在心，那么可不可以说，女儿还没有嫁过去之前，便已经埋下了家庭争执的祸根，就算是这笔钱，以后通过，比如说嫁妆，彩礼什么的方式返回，那么，返回的物品是必须的么？能不能减少些，留足现金抵抗风险，正确的方式，是不是双方以新家庭能更好的面对未来作为出发点来量力而行整个结婚过程的所有选择。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">完全没有一点资产和负债的概念，农村愚昧之普遍一至于斯，农村的孩子，能从父母那里继承到什么处世的智慧呢。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">最后说点闹心的事情，已经四五个人登门借钱了，不胜其烦，差点因为这个和父亲生气，Fuck。 <span class=\"Apple-converted-space\">       </span></span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">       </span></span></p>','乡下','','inherit','open','open','','572-revision-v1','','','2016-02-12 04:56:46','2016-02-12 04:56:46','',572,'http://unasm.com/2016/02/575/',0,'revision','',0),(573,1,'2016-02-12 04:54:29','2016-02-12 04:54:29','<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>马上就要回去了</span><span class=\"s2\">，</span><span class=\"s1\">我觉得还是早点工作比较好，乡下的日子，谈不上开心，更多的 ，是责任</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>回到村子里，见到了各种不幸，别人家的，自己家的。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">    </span>就说自己家吧，老爸老妈就是很头疼的问题，老妈受不了家里无聊的日子，还是想出去打工，忙碌着，日子充实的多。老爸还是想留在家里，一来不缺钱，二来也不用受苦。老妈老爸的关系谈不上恩爱，远远不是相亲相爱，互相扶持， 生活在一起更多的是责任。老爸六十多了，做事情难免不得体，不招老板待见，母亲勤劳而叨唠，老爸向来不做家务，他们年纪越来越大了，没个彼此照应，出点问题该怎么办呢。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>说到不缺钱，也就是还有生活费罢了，面对一点波折，瞬间回到贫困线。就以这次老哥相亲吧，媒人说到房子，爸妈的底细我是明白的，多年经营，也不过一处房子，如果真按照农村的规矩，给两个儿子办婚礼，怕是还要为难，所以说到房子的时候，难免底气不足，说话也有点耍赖，少了点父亲的担当。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>然后再说我老哥吧，这次相亲，去之前我就明白没可能，所以怂恿，不过想让他碰壁，认清现实而已。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>他其实挺俊俏的，至少以前是这样，太瘦了，现在有点尖嘴猴腮，衣服都是很早以前的了，质量差，也没个样子，整个人太没自信了，看不出一点魄力在，整个人驼背缩肩，形容猥琐，虽然他以前是个羞涩的美少年，现在也不过是农村里不值得多看一眼的loser罢了。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>其实相貌什么无所谓了，我心痛的是他的思想。大学白上了，完全白上了。大学并没有从思想上改变他，依旧是以前的那个自卑且自负的愤青，排斥着外界的思想，固执的认为自己是对的，不，不是，只是拒绝承认，他明白自己穷，丑，工资低，没前途未来，只是拒绝承认。用自嘲和自我伤害来抵御外界的规劝和否定。恩恩，你说的都对，可我他妈的就是这样，你能怎么着。不能怎么着，只是这样下去，你还是穷，还是没房子，没老婆，这是你想要的么，如果不是，那咱们能换种方式么。几年过去了，除了年纪，我感觉不到他的变化。他还是个农村人，教育的意义首先在于做人，其次是技能。而他，什么都没得到。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">       </span>承认现实是很痛苦的事情，他需要日复一日，日复一日的对自己痛恨否定和反思，每一刻都不忘记自己的身份，地位和现实，把渴望改变的火焰融进自己血液里面，让它充满自己的大脑。然后才能浴火重生，看到更加宽广美好的世界。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">       </span>永远不要拒绝新的思想，永远要虚心聆听别人的建议，哪怕听完后吐他一脸说“老子都懂”，然后用自己拿可怜的小脑瓜是思考下，是不是有道理的，是的话，又该何去何从。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">       </span>再说相亲吧，听说对方是一个市师范学校的，呵呵，我似乎感觉到了她的进退两难。既不甘心上了大学之后重新回到农村，也没能力在城市里面立足。挑剔的看着每一个上门求婚的男人，斟酌着所有提出的条件，也明白，不可能有人拯救自己。很快，她会在年龄，父母，越来越渺茫的希望和一个条件还算可以的求婚者的压力之下屈服，重新回到农村，放弃以前的各种向往，戴上现实的镣铐，跟一个根本无法接受的人一辈子，出于压力，出于责任，出于无奈，一辈子，就像我父亲,我母亲。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">      </span>没有像城里的孩子那样从父辈那里继承来智慧和资产，却偏偏向往着城里的生活，我们这一代人，注定要承受着，迷茫，压力，无奈。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">      </span>农村，社会的底层，真是充满了各种各样的不幸地方的集合体。每个人都在本性，责任和能力之间不断的抉择。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">       </span>一个女儿偷走了母亲的全部积蓄，和男友私奔了，父母闹离婚，兄长的婚事被搁置，而这个女儿，个人认为也会被男友骗的一干二净吧。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">       </span>一个男孩，从小被父亲娇生惯养，现在老父无能了，男孩的心智还停留在过去，偌大的汉子，居然无法打工挣钱，还在啃老，一家几口，挤在从爷爷那里继承来的房子。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>被全家人寄予厚望的大学生，毕业后找不到工作，要年迈的父母寄生活费，后来搞传销去了，然后进了监狱。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>小学校长家的儿子长大了，让父亲托关系找了一份月薪2k的工作（开着20w的车）。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>抛开这个小村庄里这些典型的例子,就算是个正常的人家，也不过重复着打工，攒钱，盖房子，娶老婆，生孩子，然后打工，攒钱，盖房子，给二儿子盖房子娶老婆，生孩子，然后养孩子，然后孩子打工，攒钱……循环如是，面对一点点生活的波动，便是举家多年应对的灾难。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>再说点普遍的现象吧，前面提到相亲，那就说结婚吧。这边有个风俗，是定亲的时候，男方要给女方一笔钱，名为“下帖”，而这笔钱，已经从最初的几千，慢慢的上万以至于十万之数，就是一个农村还算有准备的家庭能拿出的全部现金的上限或者一定程度的溢出了上限。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>我不清楚这里有多少卖女儿的成分在，但是从结果上考量，两家结为亲家，钱从一家转到另一家，本身并没有财富的增加，如果说，在嫁女儿之前，就已经将对方家庭的财力耗尽，那男方家庭因此为难，会不会怀恨在心，那么可不可以说，女儿还没有嫁过去之前，便已经埋下了家庭争执的祸根，就算是这笔钱，以后通过，比如说嫁妆，彩礼什么的方式返回，那么，返回的物品是必须的么？能不能减少些，留足现金抵抗风险，正确的方式，是不是双方以新家庭能更好的面对未来作为出发点来量力而行整个结婚过程的所有选择。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>完全没有一点资产和负债的概念，农村愚昧之普遍一至于斯，农村的孩子，能从父母那里继承到什么处世的智慧呢。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\">        </span>最后说点闹心的事情，已经四五个人登门借钱了，不胜其烦，差点因为这个和父亲生气，Fuck。 <span class=\"Apple-converted-space\">       </span></span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">       </span></span></p>','乡下','','inherit','open','open','','572-revision-v1','','','2016-02-12 04:54:29','2016-02-12 04:54:29','',572,'http://unasm.com/2016/02/573/',0,'revision','',0),(574,1,'2016-02-12 10:28:28','2016-02-12 10:28:28','<p class=\"p2\"><span class=\"s1\">马上就要回去了</span><span class=\"s2\">，</span><span class=\"s1\">我觉得还是早点工作比较好，乡下的日子，谈不上开心，更多的 ，是责任</span></p>\n<p class=\"p2\"><span class=\"s1\">回到村子里，见到了各种不幸，别人家的，自己家的。</span></p>\n<p class=\"p2\"><span class=\"s1\">就说自己家吧，老爸老妈就是很头疼的问题，老妈受不了家里无聊的日子，还是想出去打工，忙碌着，日子充实的多。老爸还是想留在家里，一来不缺钱，二来也不用受苦。老妈老爸的关系谈不上恩爱，远远不是相亲相爱，互相扶持， 生活在一起更多的是责任。老爸六十多了，做事情难免不得体，不招老板待见，母亲勤劳而叨唠，老爸向来不做家务，他们年纪越来越大了，没个彼此照应，出点问题该怎么办呢。</span></p>\n<p class=\"p2\"><span class=\"s1\">说到不缺钱，也就是还有生活费罢了，面对一点波折，瞬间回到贫困线。就以这次老哥相亲吧，媒人说到房子，爸妈的底细我是明白的，多年经营，也不过一处房子，如果真按照农村的规矩，给两个儿子办婚礼，怕是还要为难，所以说到房子的时候，难免底气不足，说话也有点耍赖，少了点父亲的担当。</span></p>\n<p class=\"p2\"><span class=\"s1\">然后再说我老哥吧，这次相亲，去之前我就明白没可能，所以怂恿，不过想让他碰壁，认清现实而已。</span></p>\n<p class=\"p2\"><span class=\"s1\">他其实挺俊俏的，至少以前是这样，太瘦了，现在有点尖嘴猴腮，衣服都是很早以前的了，质量差，也没个样子，整个人太没自信了，看不出一点魄力在，整个人驼背缩肩，形容猥琐，虽然他以前是个羞涩的美少年，现在也不过是农村里不值得多看一眼的loser罢了。</span></p>\n<p class=\"p2\"><span class=\"s1\">其实相貌什么无所谓了，我心痛的是他的思想。大学白上了，完全白上了。大学并没有从思想上改变他，依旧是以前的那个自卑且自负的愤青，排斥着外界的思想，固执的认为自己是对的，不，不是，只是拒绝承认，他明白自己穷，丑，工资低，没前途未来，只是拒绝承认。用自嘲和自我伤害来抵御外界的规劝和否定。恩恩，你说的都对，可我他妈的就是这样，你能怎么着。不能怎么着，只是这样下去，你还是穷，还是没房子，没老婆，这是你想要的么，如果不是，那咱们能换种方式么。几年过去了，除了年纪，我感觉不到他的变化。他还是个农村人，教育的意义首先在于做人，其次是技能。而他，什么都没得到。</span></p>\n<p class=\"p2\"><span class=\"s1\">承认现实是很痛苦的事情，他需要日复一日，日复一日的对自己痛恨否定和反思，每一刻都不忘记自己的身份，地位和现实，把渴望改变的火焰融进自己血液里面，让它充满自己的大脑。然后才能浴火重生，看到更加宽广美好的世界。</span></p>\n<p class=\"p2\">Never forget who you are  , because the world will not</p>\n<p class=\"p2\"><span class=\"s1\">永远不要拒绝新的思想，永远要虚心聆听别人的建议，哪怕听完后吐他一脸说“老子都懂”，然后用自己拿可怜的小脑瓜是思考下，是不是有道理的，是的话，又该何去何从。</span></p>\n<p class=\"p2\"><span class=\"s1\">再说相亲吧，听说对方是一个市师范学校的，呵呵，我似乎感觉到了她的进退两难。既不甘心上了大学之后重新回到农村，也没能力在城市里面立足。挑剔的看着每一个上门求婚的男人，斟酌着所有提出的条件，也明白，不可能有人拯救自己。很快，她会在年龄，父母，越来越渺茫的希望和一个条件还算可以的求婚者的压力之下屈服，重新回到农村，放弃以前的各种向往，戴上现实的镣铐，跟一个根本无法接受的人一辈子，出于压力，出于责任，出于无奈，一辈子，就像我父亲,我母亲。</span></p>\n<p class=\"p2\"><span class=\"s1\">没有像城里的孩子那样从父辈那里继承来智慧和资产，却偏偏向往着城里的生活，我们这一代人，注定要承受着，迷茫，压力，无奈。</span></p>\n<p class=\"p2\"><span class=\"s1\">农村，社会的底层，真是充满了各种各样的不幸地方的集合体。每个人都在本性，责任和能力之间不断的抉择。</span></p>\n<p class=\"p2\"><span class=\"s1\">一个女儿偷走了母亲的全部积蓄，和男友私奔了，父母闹离婚，兄长的婚事被搁置，而这个女儿，个人认为也会被男友骗的一干二净吧。</span></p>\n<p class=\"p2\"><span class=\"s1\">一个男孩，从小被父亲娇生惯养，现在老父无能了，男孩的心智还停留在过去，偌大的汉子，居然无法打工挣钱，还在啃老，一家几口，挤在从爷爷那里继承来的房子。</span></p>\n<p class=\"p2\"><span class=\"s1\">被全家人寄予厚望的大学生，毕业后找不到工作，要年迈的父母寄生活费，后来搞传销去了，然后进了监狱。</span></p>\n<p class=\"p2\"><span class=\"s1\">小学校长家的儿子长大了，让父亲托关系找了一份月薪2k的工作（开着20w的车）。</span></p>\n<p class=\"p2\"><span class=\"s1\">抛开这个小村庄里这些典型的例子,就算是个正常的人家，也不过重复着打工，攒钱，盖房子，娶老婆，生孩子，然后打工，攒钱，盖房子，给二儿子盖房子娶老婆，生孩子，然后养孩子，然后孩子打工，攒钱……循环如是，面对一点点生活的波动，便是举家多年应对的灾难。</span></p>\n<p class=\"p2\"><span class=\"s1\">再说点普遍的现象吧，前面提到相亲，那就说结婚吧。这边有个风俗，是定亲的时候，男方要给女方一笔钱，名为“下帖”，而这笔钱，已经从最初的几千，慢慢的上万以至于十万之数，就是一个农村还算有准备的家庭能拿出的全部现金的上限或者一定程度的溢出了上限。</span></p>\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\"> </span>我不清楚这里有多少卖女儿的成分在，但是从结果上考量，两家结为亲家，钱从一家转到另一家，本身并没有财富的增加，如果说，在嫁女儿之前，就已经将对方家庭的财力耗尽，那男方家庭因此为难，会不会怀恨在心，那么可不可以说，女儿还没有嫁过去之前，便已经埋下了家庭争执的祸根，就算是这笔钱，以后通过，比如说嫁妆，彩礼什么的方式返回，那么，返回的物品是必须的么？能不能减少些，留足现金抵抗风险，正确的方式，是不是双方以新家庭能更好的面对未来作为出发点来量力而行整个结婚过程的所有选择。</span></p>\n<p class=\"p2\"><span class=\"s1\">完全没有一点资产和负债的概念，农村愚昧之普遍一至于斯，农村的孩子，能从父母那里继承到什么处世的智慧呢。</span></p>\n<p class=\"p2\"><span class=\"s1\">最后说点闹心的事情，已经四五个人登门借钱了，不胜其烦，差点因为这个和父亲生气，Fuck。 <span class=\"Apple-converted-space\">       </span></span></p>\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">       </span></span></p>','乡下','','inherit','open','open','','572-autosave-v1','','','2016-02-12 10:28:28','2016-02-12 10:28:28','',572,'http://unasm.com/2016/02/574/',0,'revision','',0),(576,1,'2016-02-12 10:30:00','2016-02-12 10:30:00','<p class=\"p2\"><span class=\"s1\">马上就要回去了</span><span class=\"s2\">，</span><span class=\"s1\">我觉得还是早点工作比较好，乡下的日子，谈不上开心，更多的 ，是责任</span></p>\r\n<p class=\"p2\"><span class=\"s1\">回到村子里，见到了各种不幸，别人家的，自己家的。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">就说自己家吧，老爸老妈就是很头疼的问题，老妈受不了家里无聊的日子，还是想出去打工，忙碌着，日子充实的多。老爸还是想留在家里，一来不缺钱，二来也不用受苦。老妈老爸的关系谈不上恩爱，远远不是相亲相爱，互相扶持， 生活在一起更多的是责任。老爸六十多了，做事情难免不得体，不招老板待见，母亲勤劳而叨唠，老爸向来不做家务，他们年纪越来越大了，没个彼此照应，出点问题该怎么办呢。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">说到不缺钱，也就是还有生活费罢了，面对一点波折，瞬间回到贫困线。就以这次老哥相亲吧，媒人说到房子，爸妈的底细我是明白的，多年经营，也不过一处房子，如果真按照农村的规矩，给两个儿子办婚礼，怕是还要为难，所以说到房子的时候，难免底气不足，说话也有点耍赖，少了点父亲的担当。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">然后再说我老哥吧，这次相亲，去之前我就明白没可能，所以怂恿，不过想让他碰壁，认清现实而已。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">他其实挺俊俏的，至少以前是这样，太瘦了，现在有点尖嘴猴腮，衣服都是很早以前的了，质量差，也没个样子，整个人太没自信了，看不出一点魄力在，整个人驼背缩肩，形容猥琐，虽然他以前是个羞涩的美少年，现在也不过是农村里不值得多看一眼的loser罢了。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">其实相貌什么无所谓了，我心痛的是他的思想。大学白上了，完全白上了。大学并没有从思想上改变他，依旧是以前的那个自卑且自负的愤青，排斥着外界的思想，固执的认为自己是对的，不，不是，只是拒绝承认，他明白自己穷，丑，工资低，没前途未来，只是拒绝承认。用自嘲和自我伤害来抵御外界的规劝和否定。恩恩，你说的都对，可我他妈的就是这样，你能怎么着。不能怎么着，只是这样下去，你还是穷，还是没房子，没老婆，这是你想要的么，如果不是，那咱们能换种方式么。几年过去了，除了年纪，我感觉不到他的变化。他还是个农村人，教育的意义首先在于做人，其次是技能。而他，什么都没得到。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">承认现实是很痛苦的事情，他需要日复一日，日复一日的对自己痛恨否定和反思，每一刻都不忘记自己的身份，地位和现实，把渴望改变的火焰融进自己血液里面，让它充满自己的大脑。然后才能浴火重生，看到更加宽广美好的世界。</span></p>\r\n“Never forget what you are, for surely the world will not. Make it your strength. Then it can never be your weakness. Armour yourself in it, and it will never be used to hurt you”。\r\n永远不要拒绝新的思想，永远要虚心聆听别人的建议，哪怕听完后吐他一脸说“老子都懂”，然后用自己拿可怜的小脑瓜是思考下，是不是有道理的，是的话，又该何去何从。\r\n<p class=\"p2\"><span class=\"s1\">再说相亲吧，听说对方是一个市师范学校的，呵呵，我似乎感觉到了她的进退两难。既不甘心上了大学之后重新回到农村，也没能力在城市里面立足。挑剔的看着每一个上门求婚的男人，斟酌着所有提出的条件，也明白，不可能有人拯救自己。很快，她会在年龄，父母，越来越渺茫的希望和一个条件还算可以的求婚者的压力之下屈服，重新回到农村，放弃以前的各种向往，戴上现实的镣铐，跟一个根本无法接受的人一辈子，出于压力，出于责任，出于无奈，一辈子，就像我父亲,我母亲。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">没有像城里的孩子那样从父辈那里继承来智慧和资产，却偏偏向往着城里的生活，我们这一代人，注定要承受着，迷茫，压力，无奈。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">农村，社会的底层，真是充满了各种各样的不幸地方的集合体。每个人都在本性，责任和能力之间不断的抉择。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">一个女儿偷走了母亲的全部积蓄，和男友私奔了，父母闹离婚，兄长的婚事被搁置，而这个女儿，个人认为也会被男友骗的一干二净吧。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">一个男孩，从小被父亲娇生惯养，现在老父无能了，男孩的心智还停留在过去，偌大的汉子，居然无法打工挣钱，还在啃老，一家几口，挤在从爷爷那里继承来的房子。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">被全家人寄予厚望的大学生，毕业后找不到工作，要年迈的父母寄生活费，后来搞传销去了，然后进了监狱。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">小学校长家的儿子长大了，让父亲托关系找了一份月薪2k的工作（开着20w的车）。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">抛开这个小村庄里这些典型的例子,就算是个正常的人家，也不过重复着打工，攒钱，盖房子，娶老婆，生孩子，然后打工，攒钱，盖房子，给二儿子盖房子娶老婆，生孩子，然后养孩子，然后孩子打工，攒钱……循环如是，面对一点点生活的波动，便是举家多年应对的灾难。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">再说点普遍的现象吧，前面提到相亲，那就说结婚吧。这边有个风俗，是定亲的时候，男方要给女方一笔钱，名为“下帖”，而这笔钱，已经从最初的几千，慢慢的上万以至于十万之数，就是一个农村还算有准备的家庭能拿出的全部现金的上限或者一定程度的溢出了上限。</span></p>\r\n<p class=\"p2\"><span class=\"s1\"><span class=\"Apple-converted-space\"> </span>我不清楚这里有多少卖女儿的成分在，但是从结果上考量，两家结为亲家，钱从一家转到另一家，本身并没有财富的增加，如果说，在嫁女儿之前，就已经将对方家庭的财力耗尽，那男方家庭因此为难，会不会怀恨在心，那么可不可以说，女儿还没有嫁过去之前，便已经埋下了家庭争执的祸根，就算是这笔钱，以后通过，比如说嫁妆，彩礼什么的方式返回，那么，返回的物品是必须的么？能不能减少些，留足现金抵抗风险，正确的方式，是不是双方以新家庭能更好的面对未来作为出发点来量力而行整个结婚过程的所有选择。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">完全没有一点资产和负债的概念，农村愚昧之普遍一至于斯，农村的孩子，能从父母那里继承到什么处世的智慧呢。</span></p>\r\n<p class=\"p2\"><span class=\"s1\">最后说点闹心的事情，已经四五个人登门借钱了，不胜其烦，差点因为这个和父亲生气，Fuck。 <span class=\"Apple-converted-space\">       </span></span></p>\r\n<p class=\"p1\"><span class=\"s1\"><span class=\"Apple-converted-space\">       </span></span></p>','乡下','','inherit','open','open','','572-revision-v1','','','2016-02-12 10:30:00','2016-02-12 10:30:00','',572,'http://unasm.com/2016/02/576/',0,'revision','',0),(623,1,'2016-09-18 12:52:35','2016-09-18 12:52:35','下面是我对怎么样 写代码才能够 降低系统的复杂性，增加可读性的一些思考和建议，凡事不可绝对，存在即合理，所以我会用一些，尽量或者尽可能等词汇等，表明大部分情况下遵循这些建议应该是比较优的。\r\n\r\n代码规范：\r\n\r\n<strong>1.尽量使用抛异常的方式，返回错误码的方式，或者自定义的返回错误的方式</strong>\r\n\r\n如果 调用函数的时候，函数内部发生了错误，上层如何知道内部发生了错误，发生了哪种错误？ 以前尝试过调用函数的时候，函数返回 [errno =&gt; 2011021 , errmsg =&gt; \'连接数据库超时\', data =&gt; [] ]这种格式的数据，如果errno 为0的时候代表正常，需要的数据在data中，否则错误原因和错误类型可以根据 errno, errmsg 确定。\r\n\r\n比如\r\n<pre>$data = getChannelList($id);\r\nif ($data[\'errno\'] !== 0 ) {\r\n\r\n}\r\n</pre>\r\n但是这样做的坏处是 整个代码里面，充满了errno的判断。而这些判断，就经验而论，更多的是一层层的传递给上层，直到最后返回给用户。\r\n\r\n异常的方式给了错误一种默认处理方式，就是<strong>直接中断请求，直接结束，处理错误</strong>（展示或者记录日志），而不需要层层传递，简单粗暴，但是非常适合web开发，Web开发的每个请求处理，一般如流一般，层层检查处理，直到最后保存数据或者返回数据，中间有错误，如果有错误，告知用户错误原因，所以这种情况下，抛异常的中断的方式非常适合， 如果外界需要特殊处理异常，或者某函数异常不影响请求流， 可以在外层try catch，屏蔽错误。\r\n\r\n<strong>2. function 内部 尽量 避免使用this，尽量避免 new 对象。</strong>\r\n\r\n编程就应该就像堆积木一样简单，如果一个func ,其参数就是全部输入，return 的值就是全部的返回值，那花括号包裹的代码块就是一个整体，就是一块积木。\r\n当阅读到这个func的时候，拿到了全部的传入参数，一行行走下去，总是能够理解这个func的作用的, 而不需要回溯到某个上层，看某个this-&gt;属性 是如何设置的，对此时的func的行为有着怎样的影响。\r\n\r\n 比如下面的Class Excel , 调用的时候先new 一个 对象初始化Data，然后中间经过一些逻辑，然后开始调用某功能函数A，当读到$this-&gt;data的时候，第一件事情，是不是先想下，$this-&gt;data 存储的值是什么？什么时间存储的，中间有没有调用setData,调用了几次， 哪里调用的，影响有多大？为了明确这些可能的疑问而回溯到上层代码，就增加了系统的复杂性。换言之， formatMultiRegions 与 __construct 以及 setData 交叠在一起，共同完成了 一件事情，而交叠的部分，可能与其他的逻辑也是混杂在一起，增加理解成本。\r\n\r\n 所以如果按照我建议的话，此处应该 改成 Excel_Better, 需要用到功能函数formatMultiRegions的时候， 传入参数Data，整个formatMultiRegions 的行为 就仅仅与data 有关，并不需要关心data经历过怎么样的处理变化,也并不需要回溯到 上层代码才能理解本函数,也就是 formatMultiRegions 就是一块被此时此刻才被用到的积木。\r\n  调用之前不知道其存在，调用之后不必在意其存在过，如流水一般，流过了，就不再需要关心，只是想要的数据向下传递。\r\n\r\n反面栗子：\r\n<pre>namespace app\\models; \r\nuse Yii; \r\nclass Excel \r\n{     \r\n    protected $data = null;     \r\n    //初始化Excel对象     \r\n    public function __construct(Array &amp;$data)     {           \r\n         $this---&gt;phpExcel = new \\PHPExcel();\r\n        $this-&gt;data = $data;\r\n    }   \r\n    //某功能函数A\r\n    public function formatMultiRegions()\r\n    {   \r\n        $data = $this-&gt;data;\r\n        if ($data) { \r\n  \r\n        }\r\n        $mark = array_values(array_splice($data, 0, 1));\r\n        return $mark;\r\n    }   \r\n    //某功能函数B\r\n    public function formatPie()\r\n    {   \r\n        $data = $this-&gt;data;\r\n        foreach ($data as $region=&gt;$list) {\r\n\r\n        }   \r\n        return [$lines];\r\n    }  \r\n    // 修改data值\r\n    private function setData($data)\r\n    {   \r\n        $this-&gt;data = $data;\r\n    }   \r\n}\r\n</pre>\r\n推荐 demo :\r\n<pre>namespace app\\models; \r\nuse Yii; \r\nclass Excel_Better\r\n{     \r\n     //某功能函数A     \r\n    public static function formatMultiRegions($data)     \r\n    {            \r\n       if ($data) {            \r\n       }         \r\n       $mark = array_values(array_splice($data, 0, 1));         \r\n       return $mark;     \r\n    }        \r\n    //某功能函数B     \r\n    public static function formatPie($data)     \r\n    {            \r\n        foreach ($data as $region=--&gt;$list){\r\n\r\n        }   \r\n        return [$lines];\r\n    }  \r\n}\r\n</pre>\r\n3，异常 集中处理\r\n\r\n换言之，如果捕获到了异常，打算怎么办呢？如果没有特殊需求，不如不处理，在项目的某一处函数几种处理异常，根据不同的异常类型，根据不同的环境，选择不同的展示方式。\r\n但是有些情况，比如超时重连，或者 异步通知重试等有特殊处理的需求的时候，建议捕获异常，并酌情处理。\r\n\r\n4. 日志 尽量记录 完整的上下文，能够复现当时的场景 ，\r\n\r\n一 . 更新数据库的日志至少需要记录四项 where条件，原来的数据，新的数据，更新的数据库返回值。\r\n\r\n二 . 异常日志要记录 输入数据，错误代码行号，错误文件，错误原因，最好记录调用栈。、\r\n\r\n三 . 对于一个记录用户请求的 日志来说，应该记录下，POST，GET 参数，用户的uid(如果有)，处理该请求的机器，以及系统的返回值\r\n\r\n5. 尽量避免if 的层层嵌套，遇到错误 直接返回或者处理，避免过长的代码段之间，互相牵扯\r\n\r\n反面demo :\r\n<pre>       if(!empty($id)) {\r\n                $data = Channel::findIdentity($id);\r\n                if(!empty($data)) {\r\n                    $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \r\n                    if ($result) {\r\n                        $logData = [\r\n                            \'user_id\' =&gt; $user_id,\r\n                            \'to_user_id\' =&gt; $data[\'user_id\'],\r\n                            \'create_time\' =&gt; time(),\r\n                            \'status\' =&gt; OperatLog::STATUS_DEL,\r\n                            \'reason\' =&gt; $delReason,\r\n                            \'type\' =&gt; OperatLog::TYPE_CHANNEL,\r\n                            \'old_data\' =&gt; json_encode($data),\r\n                        ];   \r\n                        OperatLog::addInfo($logData);\r\n                        return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\r\n                    }    \r\n                    return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\r\n                }    \r\n                return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\r\n            }    \r\n            return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\r\n</pre>\r\n这个 其实是一个还能接受的代码段，某种意义上，还有点美感， 但是如果if 包裹的代码段 超过一屏， 则理解成本就会变得难以接受。\r\n\r\n当我们看到一个if的时候， 我们需要 知道if 的 判断条件，开始和结束，是否有else 等，当我们看到 第二个 if 的时候，我们需要 知道 被第一个 通过的情况下进入的，然后同样需要 了解 if 的开始 结束等，然后第三个， 当我们读完第三个 if 退出的时候，需要了解第二个是否有else ， if/else 块 之后又 是什么，当前段代码是在第几个if块 之后，等等。总之if的嵌套增大了代码的理解成本。\r\n\r\n代码应该是 像 积木一样一块块累积起来的，不同的积木之间，应该尽量减少牵扯。\r\n所以按照我的想法，代码应该写成如下：\r\n<pre>         if(empty($id)) {\r\n               return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\r\n         }\r\n         $data = Channel::findIdentity($id);\r\n         if(!empty($data)) {\r\n             return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\r\n         }\r\n  \r\n         $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \r\n         if (!$result) {\r\n             return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\r\n         }\r\n \r\n         $logData = [\r\n               \'user_id\' =&gt; $user_id,\r\n               \'to_user_id\' =&gt; $data[\'user_id\'],\r\n               \'create_time\' =&gt; time(),\r\n               \'status\' =&gt; OperatLog::STATUS_DEL,\r\n               \'reason\' =&gt; $delReason,\r\n               \'type\' =&gt; OperatLog::TYPE_CHANNEL,\r\n               \'old_data\' =&gt; json_encode($data),\r\n         ];   \r\n         OperatLog::addInfo($logData);\r\n         return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\r\n     \r\n</pre>\r\n6. 多表更新或者 删除，添加数据，多个sql语句，加上事务和回滚，原因相信无可争议，只是很多人未必注意。\r\n虽然一般情况下不加事务也不会出问题，但是有了问题，就要修数据，修数据就可能引出各种问题。\r\n个人 比较推崇的一个模板如下，try catch 只有 两个出口，要不一直走到commit，要不在catch里面rollback.\r\n<pre>   $trans = Yii::$app-&gt;db-&gt;beginTransaction();\r\n        try {\r\n            $promotionAddData = array(\r\n                //\'region_manage\' =&gt; $region_manage_id,\r\n                \'update_time\' =&gt; time(),\r\n                \'update_user_id\' =&gt; UserService::getUserId(),\r\n                \'is_deleted\' =&gt; 1,\r\n            );  \r\n            $isUpdate = PromotionLeader::updateInfo($id, $promotionAddData);\r\n            if (!$isUpdate) {\r\n                throw new JdbException(\'更新数据库异常\', 18400177);\r\n            }   \r\n            UserAccount::deleteRow($promotionLeaderInfo[\'user_id\']);\r\n            $trans-&gt;commit();\r\n        } catch (\\Exception $e) {\r\n            $trans-&gt;rollback();\r\n            throw $e; \r\n        }   \r\n        return [\'errno\' =&gt; 200, \'errmsg\' =&gt; \'推广组长数据操作成功\'];\r\n</pre>\r\n7. 错误码尽可能 整个系统唯一，方便迅速定位错误。\r\n\r\n当后端与FE通过json数据 交互的时候，一般来说，0或者200代表ok，其他代表错误就能满足需求，所以在需求层面上，错误码的定义无关紧要，所以一些系统返回400，500，这种仿 http的错误码。\r\n出于排查错误的目的而言，错误码应该尽可能的唯一，当看到系统返回的内容的时候，大概就清楚这段文本大概是系统那段代码处理返回的。比如上面demo 程序中 18400177 ，这种错误码肯定系统内很难重复，生成规则是当前光标所在的列数 + 400（错误的性质,仿http错误码） + 当前行号，某些ide还可以加上当前文件总行数等，达到一个更加随机的错误码。\r\n当然，还有其他的方式，比如在返回值里面，加冗余字段，标明返回数据在系统的位置信息，也可以。\r\n这种全随机的方式，缺点在于很难对所有的错误进行一个统计的归类处理。\r\n\r\n8. 尽量使用静态方法，减少new的数量。\r\n\r\n将代码 主要 用来处理逻辑上，而非各种语言的语法上，与效率无关，只是为了代码的可读性，如下面的两个demo，既然new 可以去掉，就尽量减少代码行数，增加可读性，重心在逻辑，而非语法。\r\n\r\n反面demo：\r\n<pre>  function test() {\r\n      $modelA = new ModelA;\r\n      $userId =  $modelA-&gt;getInfo($_GET[\'id\']);\r\n      $modelB = new ModelB;\r\n      return $modelB-&gt;getList($userId);\r\n  }\r\n</pre>\r\n推荐例程：\r\n<pre>  function test() {\r\n      $userId =  modelA::getInfo($_GET[\'id\']);\r\n      return $modelB::getList($userId);\r\n  }\r\n</pre>','编程规范','','publish','open','open','','%e7%bc%96%e7%a8%8b%e8%a7%84%e8%8c%83','','','2016-09-24 07:26:39','2016-09-24 07:26:39','',0,'http://unasm.com/?p=623',0,'post','',1),(579,1,'2016-06-07 03:25:55','2016-06-07 03:25:55','先说结论吧，php5.6的 情况下，php 原生速度稳定性略微优于swoole,相差不大，php7的性能 在这种场景下要 提升接近一倍的性能，在php7的时候，swoole 表现比php原生 大约有20%的提升，极限情况下,php 原生要比swoole并发略高，但是有一定程度的超时。\r\ngolang的性能，在100行excel的情况下，并发是220s,cpu 20%， 是当时的php 的10倍左右，瓶颈在于数据库，数据库服务器的cpu达到60%，250个插入进程并发执行， 如果进一步优化插入的sql，可以达到更高。\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n<h2>第一步 ，excel 三行 ， 100线程下压测</h2>\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n<h2>第二步 ，excel 100行 ， 100线程下压测</h2>\r\n\r\n1. Swoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\n2. php原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n\r\n3.php7 swoole 表现：cpu 消耗 40%左右，某一个cpu稳定在96%左右，\r\n\r\n<pre>\r\nsummary +    255 in     9s =   29.6/s Avg:  2534 Min:   400 Max:  3368 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary +    920 in    30s =   30.7/s Avg:  3273 Min:  2867 Max:  3634 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   1175 in    39s =   30.5/s Avg:  3112 Min:   400 Max:  3634 Err:     0 (0.00%)\r\nsummary +    928 in    30s =   30.9/s Avg:  3208 Min:  2784 Max:  3690 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   2103 in    69s =   30.7/s Avg:  3155 Min:   400 Max:  3690 Err:     0 (0.00%)\r\n</pre>\r\n<h2>第三步 ，excel 500行 ， 100线程下压测</h2>\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\ngolang 的压测结果，cpu在20%左右，qps 220/s，左右，响应1100ms,瓶颈在于数据库插入速度，\r\n\r\n<pre>\r\nsummary +   5520 in    25s =  220.7/s Avg:  1119 Min:   524 Max:  1501 Err:     0 (0.00%) Active: 250 Started: 250 Finished: 0\r\nsummary =   5521 in    26s =  213.0/s Avg:  1119 Min:   524 Max:  1501 Err:     0 (0.00%)\r\nsummary +   6675 in    30s =  222.5/s Avg:  1123 Min:   860 Max:  1411 Err:     0 (0.00%) Active: 250 Started: 250 Finished: 0\r\nsummary =  12196 in    56s =  218.1/s Avg:  1121 Min:   524 Max:  1501 Err:     0 (0.00%)\r\n</pre>\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\n<pre>\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\n</pre>\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\n<pre>\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\r\n</pre>\r\n\r\nphp7在swoole 下的表现：平均响应时间为230ms 左右，没有超时，很稳定,八核 cpu 消耗 一个cpu 95%,两个20%，其他10%左右。\r\n\r\n<pre>\r\nsummary =   1704 in   134s =   12.7/s Avg:   235 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    410 in    30s =   13.6/s Avg:   219 Min:   192 Max:   490 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2114 in   164s =   12.9/s Avg:   232 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    431 in    30s =   14.4/s Avg:   208 Min:   189 Max:   370 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2545 in   194s =   13.1/s Avg:   228 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    422 in    30s =   14.1/s Avg:   213 Min:   188 Max:   416 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2967 in   224s =   13.2/s Avg:   226 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    426 in    30s =   14.2/s Avg:   210 Min:   190 Max:   327 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   3393 in   254s =   13.4/s Avg:   224 Min:   177 Max:  1294 Err:     0 (0.00%)\r\n</pre>\r\n\r\n\r\n\r\nphp7在原生的表现：平均响应时间为300左右，没有超时，很稳定,8核cpu 一个在80%，其他四个在15%左右波动，其他为0%。\r\n<pre>\r\nsummary +    213 in    23s =    9.4/s Avg:   311 Min:   247 Max:   685 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    306 in    30s =   10.2/s Avg:   294 Min:   240 Max:   448 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    519 in    53s =    9.8/s Avg:   301 Min:   240 Max:   685 Err:     0 (0.00%)\r\n</pre>\r\n\r\n<h2>php7 极限 </h2>\r\nphp7 原生 ，excel 500行 ，极限 是 43并发，响应6S左右，cpu普遍达到96%，并出现相当的超时。\r\n<pre>\r\nsummary +    607 in  15.5s =   39.2/s Avg:  4099 Min:   877 Max: 11613 Err:     7 (1.15%) Active: 300 Started: 300 Finished: 0\r\nsummary +   1293 in    30s =   43.2/s Avg:  5237 Min:  3302 Max: 35598 Err:    33 (2.55%) Active: 300 Started: 300 Finished: 0\r\nsummary =   1900 in  45.4s =   41.8/s Avg:  4874 Min:   877 Max: 35598 Err:    40 (2.11%)\r\nsummary +   1353 in  30.2s =   44.8/s Avg:  8237 Min:  3309 Max: 63005 Err:    90 (6.65%) Active: 300 Started: 300 Finished: 0\r\nsummary =   3253 in    76s =   43.0/s Avg:  6272 Min:   877 Max: 63005 Err:   130 (4.00%)\r\n</pre>\r\nphp7 原生 swoole excel 500行 ，极限是37/s，响应7.3s 很稳定没有出现超时，cpu 达到上限。\r\n<pre>\r\nsummary +    651 in    19s =   34.9/s Avg:  6306 Min:  2548 Max: 14280 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary +   1109 in    30s =   37.0/s Avg:  7973 Min:  2449 Max: 23094 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary =   1760 in    49s =   36.2/s Avg:  7356 Min:  2449 Max: 23094 Err:     0 (0.00%)\r\nsummary +   1159 in    30s =   38.6/s Avg:  7784 Min:  2584 Max: 24136 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary =   2919 in    79s =   37.1/s Avg:  7526 Min:  2449 Max: 24136 Err:     0 (0.00%)\r\n</pre>','php 原生，swoole, golang 针对上传excel性能对比','','publish','open','open','','php-%e5%8e%9f%e7%94%9f%ef%bc%8cswoole-golang-%e9%92%88%e5%af%b9%e4%b8%8a%e4%bc%a0excel%e6%80%a7%e8%83%bd%e5%af%b9%e6%af%94','','','2016-06-13 12:43:33','2016-06-13 12:43:33','',0,'http://unasm.com/?p=579',0,'post','',0),(580,1,'2016-06-07 00:56:13','2016-06-07 00:56:13','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，其中php 部分代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，响应时间，为3S - 3.1S左右, 平均 1.6%的超时\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，响应时间，为3.1-3.2S左右, 平均 0%的超时\r\n\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n\r\n&nbsp;\r\n\r\nSwoole :   No of Samples 100    Latest Sample  70193ms  Average 41520  Deviation  16960\r\n\r\nphp原生 :   No of Samples 100    Latest Sample  112728ms  Average 72768   Deviation  13906\r\n\r\n&nbsp;','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-07 00:56:13','2016-06-07 00:56:13','',579,'http://unasm.com/2016/06/580/',0,'revision','',0),(581,1,'2016-06-07 01:11:31','2016-06-07 01:11:31','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，其中php 部分代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，响应时间，为3S - 3.1S左右, 平均 1.6%的超时\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，响应时间，为3.1-3.2S左右, 平均 0%的超时\r\n\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n\r\nphp原生 : 平均稳定在96%，响应时间为3.4S,超时为0%。\r\n\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n&nbsp;\r\n\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n\r\n&nbsp;\r\n\r\nphp原生 : 平均稳定在96%，响应时间为3.4S,超时为0%。\r\n\r\n&nbsp;','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-07 01:11:31','2016-06-07 01:11:31','',579,'http://unasm.com/2016/06/581/',0,'revision','',0),(582,1,'2016-06-07 01:20:30','2016-06-07 01:20:30','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，其中php 部分代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，响应时间，为3S - 3.1S左右, 平均 1.6%的超时\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，响应时间，为3.1-3.2S左右, 平均 0%的超时\r\n\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n\r\nphp原生 : 平均稳定在96%，响应时间为3.4S,超时为0%。\r\n\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n&nbsp;\r\n\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，响应时间，为左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1963 in 118s = 16.7/s Avg: 5021 Min: 0 Max: 65247 Err: 59 (3.01%)\r\nsummary + 498 in 30s = 16.6/s Avg: 6613 Min: 0 Max: 63452 Err: 33 (6.63%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2461 in 148s = 16.6/s Avg: 5343 Min: 0 Max: 65247 Err: 92 (3.74%)\r\nsummary + 482 in 30s = 16.0/s Avg: 6150 Min: 2 Max: 60003 Err: 27 (5.60%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2943 in 178s = 16.5/s Avg: 5475 Min: 0 Max: 65247 Err: 119 (4.04%)\r\n\r\nphp原生 : 平均稳定在96%，响应时间为4.5S,超时为0%。\r\n\r\n&nbsp;\r\n\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n\r\n&nbsp;','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-07 01:20:30','2016-06-07 01:20:30','',579,'http://unasm.com/2016/06/582/',0,'revision','',0),(583,1,'2016-06-07 01:20:52','2016-06-07 01:20:52','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，其中php 部分代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，响应时间，为3S - 3.1S左右, 平均 1.6%的超时\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，响应时间，为3.1-3.2S左右, 平均 0%的超时\r\n\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n\r\nphp原生 : 平均稳定在96%，响应时间为3.4S,超时为0%。\r\n\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n&nbsp;\r\n\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1963 in 118s = 16.7/s Avg: 5021 Min: 0 Max: 65247 Err: 59 (3.01%)\r\nsummary + 498 in 30s = 16.6/s Avg: 6613 Min: 0 Max: 63452 Err: 33 (6.63%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2461 in 148s = 16.6/s Avg: 5343 Min: 0 Max: 65247 Err: 92 (3.74%)\r\nsummary + 482 in 30s = 16.0/s Avg: 6150 Min: 2 Max: 60003 Err: 27 (5.60%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2943 in 178s = 16.5/s Avg: 5475 Min: 0 Max: 65247 Err: 119 (4.04%)\r\n\r\nphp原生 : 平均稳定在96%，响应时间为4.5S,超时为0%。\r\n\r\n&nbsp;\r\n\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n\r\n&nbsp;','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-07 01:20:52','2016-06-07 01:20:52','',579,'http://unasm.com/2016/06/583/',0,'revision','',0),(584,1,'2016-06-07 03:11:59','2016-06-07 03:11:59','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS  29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n\r\nphp原生 : 平均稳定在96%，响应时间为3.4S,超时为0%。\r\n\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n&nbsp;\r\n\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1963 in 118s = 16.7/s Avg: 5021 Min: 0 Max: 65247 Err: 59 (3.01%)\r\nsummary + 498 in 30s = 16.6/s Avg: 6613 Min: 0 Max: 63452 Err: 33 (6.63%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2461 in 148s = 16.6/s Avg: 5343 Min: 0 Max: 65247 Err: 92 (3.74%)\r\nsummary + 482 in 30s = 16.0/s Avg: 6150 Min: 2 Max: 60003 Err: 27 (5.60%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2943 in 178s = 16.5/s Avg: 5475 Min: 0 Max: 65247 Err: 119 (4.04%)\r\n\r\nphp原生 : 平均稳定在96%，响应时间为4.5S,超时为0%。\r\n\r\n\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n\r\n&nbsp;','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-07 03:11:59','2016-06-07 03:11:59','',579,'http://unasm.com/2016/06/584/',0,'revision','',0),(585,1,'2016-06-07 03:12:49','2016-06-07 03:12:49','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS  29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n\r\nphp原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n&nbsp;\r\n\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1963 in 118s = 16.7/s Avg: 5021 Min: 0 Max: 65247 Err: 59 (3.01%)\r\nsummary + 498 in 30s = 16.6/s Avg: 6613 Min: 0 Max: 63452 Err: 33 (6.63%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2461 in 148s = 16.6/s Avg: 5343 Min: 0 Max: 65247 Err: 92 (3.74%)\r\nsummary + 482 in 30s = 16.0/s Avg: 6150 Min: 2 Max: 60003 Err: 27 (5.60%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2943 in 178s = 16.5/s Avg: 5475 Min: 0 Max: 65247 Err: 119 (4.04%)\r\n\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n\r\n\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n\r\n&nbsp;','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-07 03:12:49','2016-06-07 03:12:49','',579,'http://unasm.com/2016/06/585/',0,'revision','',0),(586,1,'2016-06-07 03:22:59','2016-06-07 03:22:59','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1963 in 118s = 16.7/s Avg: 5021 Min: 0 Max: 65247 Err: 59 (3.01%)\r\nsummary + 498 in 30s = 16.6/s Avg: 6613 Min: 0 Max: 63452 Err: 33 (6.63%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2461 in 148s = 16.6/s Avg: 5343 Min: 0 Max: 65247 Err: 92 (3.74%)\r\nsummary + 482 in 30s = 16.0/s Avg: 6150 Min: 2 Max: 60003 Err: 27 (5.60%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2943 in 178s = 16.5/s Avg: 5475 Min: 0 Max: 65247 Err: 119 (4.04%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-07 03:22:59','2016-06-07 03:22:59','',579,'http://unasm.com/2016/06/586/',0,'revision','',0),(588,1,'2016-06-07 06:37:10','2016-06-07 06:37:10','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1963 in 118s = 16.7/s Avg: 5021 Min: 0 Max: 65247 Err: 59 (3.01%)\r\nsummary + 498 in 30s = 16.6/s Avg: 6613 Min: 0 Max: 63452 Err: 33 (6.63%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2461 in 148s = 16.6/s Avg: 5343 Min: 0 Max: 65247 Err: 92 (3.74%)\r\nsummary + 482 in 30s = 16.0/s Avg: 6150 Min: 2 Max: 60003 Err: 27 (5.60%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2943 in 178s = 16.5/s Avg: 5475 Min: 0 Max: 65247 Err: 119 (4.04%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\nsummary +     31 in    59s =    0.5/s Avg:  4337 Min:     1 Max: 60531 Err:     2 (6.45%) Active: 3 Started: 3 Finished: 0\r\nsummary =    383 in   254s =    1.5/s Avg:  1699 Min:     1 Max: 60531 Err:     8 (2.09%)\r\nsummary +    168 in   150s =    1.1/s Avg:  3315 Min:   306 Max: 60091 Err:     8 (4.76%) Active: 3 Started: 3 Finished: 0\r\nsummary =    551 in   404s =    1.4/s Avg:  2192 Min:     1 Max: 60531 Err:    16 (2.90%)\r\nsummary +     26 in  60.4s =    0.4/s Avg:  2755 Min:   329 Max: 60052 Err:     1 (3.85%) Active: 3 Started: 3 Finished: 0\r\nsummary =    577 in   464s =    1.2/s Avg:  2217 Min:     1 Max: 60531 Err:    17 (2.95%)\r\nsummary +     15 in  63.3s =    0.2/s Avg: 12342 Min:   363 Max: 60059 Err:     3 (20.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    592 in   528s =    1.1/s Avg:  2473 Min:     1 Max: 60531 Err:    20 (3.38%)','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-07 06:37:10','2016-06-07 06:37:10','',579,'http://unasm.com/2016/06/588/',0,'revision','',0),(589,1,'2016-06-07 06:40:52','2016-06-07 06:40:52','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1963 in 118s = 16.7/s Avg: 5021 Min: 0 Max: 65247 Err: 59 (3.01%)\r\nsummary + 498 in 30s = 16.6/s Avg: 6613 Min: 0 Max: 63452 Err: 33 (6.63%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2461 in 148s = 16.6/s Avg: 5343 Min: 0 Max: 65247 Err: 92 (3.74%)\r\nsummary + 482 in 30s = 16.0/s Avg: 6150 Min: 2 Max: 60003 Err: 27 (5.60%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2943 in 178s = 16.5/s Avg: 5475 Min: 0 Max: 65247 Err: 119 (4.04%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\nsummary +     31 in    59s =    0.5/s Avg:  4337 Min:     1 Max: 60531 Err:     2 (6.45%) Active: 3 Started: 3 Finished: 0\r\nsummary =    383 in   254s =    1.5/s Avg:  1699 Min:     1 Max: 60531 Err:     8 (2.09%)\r\nsummary +    168 in   150s =    1.1/s Avg:  3315 Min:   306 Max: 60091 Err:     8 (4.76%) Active: 3 Started: 3 Finished: 0\r\nsummary =    551 in   404s =    1.4/s Avg:  2192 Min:     1 Max: 60531 Err:    16 (2.90%)\r\nsummary +     26 in  60.4s =    0.4/s Avg:  2755 Min:   329 Max: 60052 Err:     1 (3.85%) Active: 3 Started: 3 Finished: 0\r\nsummary =    577 in   464s =    1.2/s Avg:  2217 Min:     1 Max: 60531 Err:    17 (2.95%)\r\nsummary +     15 in  63.3s =    0.2/s Avg: 12342 Min:   363 Max: 60059 Err:     3 (20.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    592 in   528s =    1.1/s Avg:  2473 Min:     1 Max: 60531 Err:    20 (3.38%)\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\n        summary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-07 06:40:52','2016-06-07 06:40:52','',579,'http://unasm.com/2016/06/589/',0,'revision','',0),(590,1,'2016-06-07 06:41:47','2016-06-07 06:41:47','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1963 in 118s = 16.7/s Avg: 5021 Min: 0 Max: 65247 Err: 59 (3.01%)\r\nsummary + 498 in 30s = 16.6/s Avg: 6613 Min: 0 Max: 63452 Err: 33 (6.63%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2461 in 148s = 16.6/s Avg: 5343 Min: 0 Max: 65247 Err: 92 (3.74%)\r\nsummary + 482 in 30s = 16.0/s Avg: 6150 Min: 2 Max: 60003 Err: 27 (5.60%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2943 in 178s = 16.5/s Avg: 5475 Min: 0 Max: 65247 Err: 119 (4.04%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\n<pre>\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\nsummary +     31 in    59s =    0.5/s Avg:  4337 Min:     1 Max: 60531 Err:     2 (6.45%) Active: 3 Started: 3 Finished: 0\r\nsummary =    383 in   254s =    1.5/s Avg:  1699 Min:     1 Max: 60531 Err:     8 (2.09%)\r\nsummary +    168 in   150s =    1.1/s Avg:  3315 Min:   306 Max: 60091 Err:     8 (4.76%) Active: 3 Started: 3 Finished: 0\r\nsummary =    551 in   404s =    1.4/s Avg:  2192 Min:     1 Max: 60531 Err:    16 (2.90%)\r\nsummary +     26 in  60.4s =    0.4/s Avg:  2755 Min:   329 Max: 60052 Err:     1 (3.85%) Active: 3 Started: 3 Finished: 0\r\nsummary =    577 in   464s =    1.2/s Avg:  2217 Min:     1 Max: 60531 Err:    17 (2.95%)\r\nsummary +     15 in  63.3s =    0.2/s Avg: 12342 Min:   363 Max: 60059 Err:     3 (20.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    592 in   528s =    1.1/s Avg:  2473 Min:     1 Max: 60531 Err:    20 (3.38%)\r\n</pre>\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\n<pre>\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\r\n</pre>','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-07 06:41:47','2016-06-07 06:41:47','',579,'http://unasm.com/2016/06/590/',0,'revision','',0),(591,1,'2016-06-11 15:10:18','2016-06-11 15:10:18','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1963 in 118s = 16.7/s Avg: 5021 Min: 0 Max: 65247 Err: 59 (3.01%)\r\nsummary + 498 in 30s = 16.6/s Avg: 6613 Min: 0 Max: 63452 Err: 33 (6.63%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2461 in 148s = 16.6/s Avg: 5343 Min: 0 Max: 65247 Err: 92 (3.74%)\r\nsummary + 482 in 30s = 16.0/s Avg: 6150 Min: 2 Max: 60003 Err: 27 (5.60%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2943 in 178s = 16.5/s Avg: 5475 Min: 0 Max: 65247 Err: 119 (4.04%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\n<pre>\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\nsummary +     31 in    59s =    0.5/s Avg:  4337 Min:     1 Max: 60531 Err:     2 (6.45%) Active: 3 Started: 3 Finished: 0\r\nsummary =    383 in   254s =    1.5/s Avg:  1699 Min:     1 Max: 60531 Err:     8 (2.09%)\r\nsummary +    168 in   150s =    1.1/s Avg:  3315 Min:   306 Max: 60091 Err:     8 (4.76%) Active: 3 Started: 3 Finished: 0\r\nsummary =    551 in   404s =    1.4/s Avg:  2192 Min:     1 Max: 60531 Err:    16 (2.90%)\r\nsummary +     26 in  60.4s =    0.4/s Avg:  2755 Min:   329 Max: 60052 Err:     1 (3.85%) Active: 3 Started: 3 Finished: 0\r\nsummary =    577 in   464s =    1.2/s Avg:  2217 Min:     1 Max: 60531 Err:    17 (2.95%)\r\nsummary +     15 in  63.3s =    0.2/s Avg: 12342 Min:   363 Max: 60059 Err:     3 (20.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    592 in   528s =    1.1/s Avg:  2473 Min:     1 Max: 60531 Err:    20 (3.38%)\r\n</pre>\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\n<pre>\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\r\n</pre>\r\n\r\nphp7在swoole 下的表现：平均响应时间为160ms左右，没有超时，很稳定\r\n\r\nsummary +    421 in  24.3s =   17.3/s Avg:   169 Min:   144 Max:   252 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    566 in    30s =   18.8/s Avg:   159 Min:   146 Max:   227 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    987 in  54.3s =   18.2/s Avg:   163 Min:   144 Max:   252 Err:     0 (0.00%)\r\nsummary +    559 in    30s =   18.7/s Avg:   160 Min:   147 Max:   249 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   1546 in  84.3s =   18.3/s Avg:   162 Min:   144 Max:   252 Err:     0 (0.00%)\r\nsummary +    557 in    30s =   18.6/s Avg:   161 Min:   150 Max:   195 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2103 in   114s =   18.4/s Avg:   162 Min:   144 Max:   252 Err:     0 (0.00%)','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-11 15:10:18','2016-06-11 15:10:18','',579,'http://unasm.com/2016/06/591/',0,'revision','',0),(594,1,'2016-06-12 03:11:55','2016-06-12 03:11:55','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1963 in 118s = 16.7/s Avg: 5021 Min: 0 Max: 65247 Err: 59 (3.01%)\r\nsummary + 498 in 30s = 16.6/s Avg: 6613 Min: 0 Max: 63452 Err: 33 (6.63%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2461 in 148s = 16.6/s Avg: 5343 Min: 0 Max: 65247 Err: 92 (3.74%)\r\nsummary + 482 in 30s = 16.0/s Avg: 6150 Min: 2 Max: 60003 Err: 27 (5.60%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2943 in 178s = 16.5/s Avg: 5475 Min: 0 Max: 65247 Err: 119 (4.04%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\n<pre>\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\nsummary +     31 in    59s =    0.5/s Avg:  4337 Min:     1 Max: 60531 Err:     2 (6.45%) Active: 3 Started: 3 Finished: 0\r\nsummary =    383 in   254s =    1.5/s Avg:  1699 Min:     1 Max: 60531 Err:     8 (2.09%)\r\nsummary +    168 in   150s =    1.1/s Avg:  3315 Min:   306 Max: 60091 Err:     8 (4.76%) Active: 3 Started: 3 Finished: 0\r\nsummary =    551 in   404s =    1.4/s Avg:  2192 Min:     1 Max: 60531 Err:    16 (2.90%)\r\nsummary +     26 in  60.4s =    0.4/s Avg:  2755 Min:   329 Max: 60052 Err:     1 (3.85%) Active: 3 Started: 3 Finished: 0\r\nsummary =    577 in   464s =    1.2/s Avg:  2217 Min:     1 Max: 60531 Err:    17 (2.95%)\r\nsummary +     15 in  63.3s =    0.2/s Avg: 12342 Min:   363 Max: 60059 Err:     3 (20.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    592 in   528s =    1.1/s Avg:  2473 Min:     1 Max: 60531 Err:    20 (3.38%)\r\n</pre>\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\n<pre>\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\r\n</pre>\r\n\r\nphp7在swoole 下的表现：平均响应时间为160ms左右，没有超时，很稳定\r\n\r\nsummary +    421 in  24.3s =   17.3/s Avg:   169 Min:   144 Max:   252 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    566 in    30s =   18.8/s Avg:   159 Min:   146 Max:   227 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    987 in  54.3s =   18.2/s Avg:   163 Min:   144 Max:   252 Err:     0 (0.00%)\r\nsummary +    559 in    30s =   18.7/s Avg:   160 Min:   147 Max:   249 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   1546 in  84.3s =   18.3/s Avg:   162 Min:   144 Max:   252 Err:     0 (0.00%)\r\nsummary +    557 in    30s =   18.6/s Avg:   161 Min:   150 Max:   195 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2103 in   114s =   18.4/s Avg:   162 Min:   144 Max:   252 Err:     0 (0.00%)\r\n\r\n\r\n\r\nphp7在原生的表现：平均响应时间为205左右，没有超时，很稳定\r\n<pre>\r\nsummary +    127 in  11.5s =   11.1/s Avg:   257 Min:   208 Max:   457 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    351 in    30s =   11.7/s Avg:   255 Min:   211 Max:   382 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    478 in  41.4s =   11.6/s Avg:   256 Min:   208 Max:   457 Err:     0 (0.00%)\r\nsummary +    353 in    30s =   11.8/s Avg:   255 Min:   203 Max:   397 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    831 in  71.4s =   11.6/s Avg:   255 Min:   203 Max:   457 Err:     0 (0.00%)\r\n</pre>','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-12 03:11:55','2016-06-12 03:11:55','',579,'http://unasm.com/2016/06/594/',0,'revision','',0),(593,1,'2016-06-11 16:04:09','2016-06-11 16:04:09','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1963 in 118s = 16.7/s Avg: 5021 Min: 0 Max: 65247 Err: 59 (3.01%)\r\nsummary + 498 in 30s = 16.6/s Avg: 6613 Min: 0 Max: 63452 Err: 33 (6.63%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2461 in 148s = 16.6/s Avg: 5343 Min: 0 Max: 65247 Err: 92 (3.74%)\r\nsummary + 482 in 30s = 16.0/s Avg: 6150 Min: 2 Max: 60003 Err: 27 (5.60%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2943 in 178s = 16.5/s Avg: 5475 Min: 0 Max: 65247 Err: 119 (4.04%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\n<pre>\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\nsummary +     31 in    59s =    0.5/s Avg:  4337 Min:     1 Max: 60531 Err:     2 (6.45%) Active: 3 Started: 3 Finished: 0\r\nsummary =    383 in   254s =    1.5/s Avg:  1699 Min:     1 Max: 60531 Err:     8 (2.09%)\r\nsummary +    168 in   150s =    1.1/s Avg:  3315 Min:   306 Max: 60091 Err:     8 (4.76%) Active: 3 Started: 3 Finished: 0\r\nsummary =    551 in   404s =    1.4/s Avg:  2192 Min:     1 Max: 60531 Err:    16 (2.90%)\r\nsummary +     26 in  60.4s =    0.4/s Avg:  2755 Min:   329 Max: 60052 Err:     1 (3.85%) Active: 3 Started: 3 Finished: 0\r\nsummary =    577 in   464s =    1.2/s Avg:  2217 Min:     1 Max: 60531 Err:    17 (2.95%)\r\nsummary +     15 in  63.3s =    0.2/s Avg: 12342 Min:   363 Max: 60059 Err:     3 (20.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    592 in   528s =    1.1/s Avg:  2473 Min:     1 Max: 60531 Err:    20 (3.38%)\r\n</pre>\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\n<pre>\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\r\n</pre>\r\n\r\nphp7在swoole 下的表现：平均响应时间为160ms左右，没有超时，很稳定\r\n\r\nsummary +    421 in  24.3s =   17.3/s Avg:   169 Min:   144 Max:   252 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    566 in    30s =   18.8/s Avg:   159 Min:   146 Max:   227 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    987 in  54.3s =   18.2/s Avg:   163 Min:   144 Max:   252 Err:     0 (0.00%)\r\nsummary +    559 in    30s =   18.7/s Avg:   160 Min:   147 Max:   249 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   1546 in  84.3s =   18.3/s Avg:   162 Min:   144 Max:   252 Err:     0 (0.00%)\r\nsummary +    557 in    30s =   18.6/s Avg:   161 Min:   150 Max:   195 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2103 in   114s =   18.4/s Avg:   162 Min:   144 Max:   252 Err:     0 (0.00%)\r\n\r\n\r\n\r\nphp7在原生的表现：平均响应时间为205左右，没有超时，很稳定\r\n\r\nsummary +    127 in  11.5s =   11.1/s Avg:   257 Min:   208 Max:   457 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    351 in    30s =   11.7/s Avg:   255 Min:   211 Max:   382 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    478 in  41.4s =   11.6/s Avg:   256 Min:   208 Max:   457 Err:     0 (0.00%)\r\nsummary +    353 in    30s =   11.8/s Avg:   255 Min:   203 Max:   397 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    831 in  71.4s =   11.6/s Avg:   255 Min:   203 Max:   457 Err:     0 (0.00%)','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-11 16:04:09','2016-06-11 16:04:09','',579,'http://unasm.com/2016/06/593/',0,'revision','',0),(595,1,'2016-06-12 03:12:10','2016-06-12 03:12:10','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1963 in 118s = 16.7/s Avg: 5021 Min: 0 Max: 65247 Err: 59 (3.01%)\r\nsummary + 498 in 30s = 16.6/s Avg: 6613 Min: 0 Max: 63452 Err: 33 (6.63%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2461 in 148s = 16.6/s Avg: 5343 Min: 0 Max: 65247 Err: 92 (3.74%)\r\nsummary + 482 in 30s = 16.0/s Avg: 6150 Min: 2 Max: 60003 Err: 27 (5.60%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2943 in 178s = 16.5/s Avg: 5475 Min: 0 Max: 65247 Err: 119 (4.04%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\n<pre>\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\nsummary +     31 in    59s =    0.5/s Avg:  4337 Min:     1 Max: 60531 Err:     2 (6.45%) Active: 3 Started: 3 Finished: 0\r\nsummary =    383 in   254s =    1.5/s Avg:  1699 Min:     1 Max: 60531 Err:     8 (2.09%)\r\nsummary +    168 in   150s =    1.1/s Avg:  3315 Min:   306 Max: 60091 Err:     8 (4.76%) Active: 3 Started: 3 Finished: 0\r\nsummary =    551 in   404s =    1.4/s Avg:  2192 Min:     1 Max: 60531 Err:    16 (2.90%)\r\nsummary +     26 in  60.4s =    0.4/s Avg:  2755 Min:   329 Max: 60052 Err:     1 (3.85%) Active: 3 Started: 3 Finished: 0\r\nsummary =    577 in   464s =    1.2/s Avg:  2217 Min:     1 Max: 60531 Err:    17 (2.95%)\r\nsummary +     15 in  63.3s =    0.2/s Avg: 12342 Min:   363 Max: 60059 Err:     3 (20.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    592 in   528s =    1.1/s Avg:  2473 Min:     1 Max: 60531 Err:    20 (3.38%)\r\n</pre>\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\n<pre>\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\r\n</pre>\r\n\r\nphp7在swoole 下的表现：平均响应时间为160ms左右，没有超时，很稳定\r\n\r\n<pre>\r\nsummary +    421 in  24.3s =   17.3/s Avg:   169 Min:   144 Max:   252 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    566 in    30s =   18.8/s Avg:   159 Min:   146 Max:   227 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    987 in  54.3s =   18.2/s Avg:   163 Min:   144 Max:   252 Err:     0 (0.00%)\r\nsummary +    559 in    30s =   18.7/s Avg:   160 Min:   147 Max:   249 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   1546 in  84.3s =   18.3/s Avg:   162 Min:   144 Max:   252 Err:     0 (0.00%)\r\nsummary +    557 in    30s =   18.6/s Avg:   161 Min:   150 Max:   195 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2103 in   114s =   18.4/s Avg:   162 Min:   144 Max:   252 Err:     0 (0.00%)\r\n</pre>\r\n\r\n\r\n\r\nphp7在原生的表现：平均响应时间为205左右，没有超时，很稳定\r\n<pre>\r\nsummary +    127 in  11.5s =   11.1/s Avg:   257 Min:   208 Max:   457 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    351 in    30s =   11.7/s Avg:   255 Min:   211 Max:   382 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    478 in  41.4s =   11.6/s Avg:   256 Min:   208 Max:   457 Err:     0 (0.00%)\r\nsummary +    353 in    30s =   11.8/s Avg:   255 Min:   203 Max:   397 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    831 in  71.4s =   11.6/s Avg:   255 Min:   203 Max:   457 Err:     0 (0.00%)\r\n</pre>','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-12 03:12:10','2016-06-12 03:12:10','',579,'http://unasm.com/2016/06/595/',0,'revision','',0),(598,1,'2016-06-12 06:17:56','2016-06-12 06:17:56','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\n1. Swoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\n2. php原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n\r\n3.php7 swoole 表现：cpu 消耗 40%左右，某一个cpu稳定在96%左右，\r\n\r\n<pre>\r\nsummary +    255 in     9s =   29.6/s Avg:  2534 Min:   400 Max:  3368 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary +    920 in    30s =   30.7/s Avg:  3273 Min:  2867 Max:  3634 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   1175 in    39s =   30.5/s Avg:  3112 Min:   400 Max:  3634 Err:     0 (0.00%)\r\nsummary +    928 in    30s =   30.9/s Avg:  3208 Min:  2784 Max:  3690 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   2103 in    69s =   30.7/s Avg:  3155 Min:   400 Max:  3690 Err:     0 (0.00%)\r\n</pre>\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1963 in 118s = 16.7/s Avg: 5021 Min: 0 Max: 65247 Err: 59 (3.01%)\r\nsummary + 498 in 30s = 16.6/s Avg: 6613 Min: 0 Max: 63452 Err: 33 (6.63%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2461 in 148s = 16.6/s Avg: 5343 Min: 0 Max: 65247 Err: 92 (3.74%)\r\nsummary + 482 in 30s = 16.0/s Avg: 6150 Min: 2 Max: 60003 Err: 27 (5.60%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2943 in 178s = 16.5/s Avg: 5475 Min: 0 Max: 65247 Err: 119 (4.04%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\n<pre>\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\n</pre>\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\n<pre>\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\r\n</pre>\r\n\r\nphp7在swoole 下的表现：平均响应时间为160ms左右，没有超时，很稳定\r\n\r\n<pre>\r\nsummary +    421 in  24.3s =   17.3/s Avg:   169 Min:   144 Max:   252 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    566 in    30s =   18.8/s Avg:   159 Min:   146 Max:   227 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    987 in  54.3s =   18.2/s Avg:   163 Min:   144 Max:   252 Err:     0 (0.00%)\r\nsummary +    559 in    30s =   18.7/s Avg:   160 Min:   147 Max:   249 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   1546 in  84.3s =   18.3/s Avg:   162 Min:   144 Max:   252 Err:     0 (0.00%)\r\nsummary +    557 in    30s =   18.6/s Avg:   161 Min:   150 Max:   195 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2103 in   114s =   18.4/s Avg:   162 Min:   144 Max:   252 Err:     0 (0.00%)\r\n</pre>\r\n\r\n\r\n\r\nphp7在原生的表现：平均响应时间为205左右，没有超时，很稳定\r\n<pre>\r\nsummary +    127 in  11.5s =   11.1/s Avg:   257 Min:   208 Max:   457 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    351 in    30s =   11.7/s Avg:   255 Min:   211 Max:   382 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    478 in  41.4s =   11.6/s Avg:   256 Min:   208 Max:   457 Err:     0 (0.00%)\r\nsummary +    353 in    30s =   11.8/s Avg:   255 Min:   203 Max:   397 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    831 in  71.4s =   11.6/s Avg:   255 Min:   203 Max:   457 Err:     0 (0.00%)\r\n</pre>','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-12 06:17:56','2016-06-12 06:17:56','',579,'http://unasm.com/2016/06/598/',0,'revision','',0),(597,1,'2016-06-12 03:20:20','2016-06-12 03:20:20','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\n1. Swoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\n2. php原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n\r\n3.php7 swoole 表现：cpu 消耗 40%左右，某一个cpu稳定在96%左右，\r\n\r\n<pre>\r\nsummary +    255 in     9s =   29.6/s Avg:  2534 Min:   400 Max:  3368 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary +    920 in    30s =   30.7/s Avg:  3273 Min:  2867 Max:  3634 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   1175 in    39s =   30.5/s Avg:  3112 Min:   400 Max:  3634 Err:     0 (0.00%)\r\nsummary +    928 in    30s =   30.9/s Avg:  3208 Min:  2784 Max:  3690 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   2103 in    69s =   30.7/s Avg:  3155 Min:   400 Max:  3690 Err:     0 (0.00%)\r\n</pre>\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1963 in 118s = 16.7/s Avg: 5021 Min: 0 Max: 65247 Err: 59 (3.01%)\r\nsummary + 498 in 30s = 16.6/s Avg: 6613 Min: 0 Max: 63452 Err: 33 (6.63%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2461 in 148s = 16.6/s Avg: 5343 Min: 0 Max: 65247 Err: 92 (3.74%)\r\nsummary + 482 in 30s = 16.0/s Avg: 6150 Min: 2 Max: 60003 Err: 27 (5.60%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2943 in 178s = 16.5/s Avg: 5475 Min: 0 Max: 65247 Err: 119 (4.04%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\n<pre>\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\nsummary +     31 in    59s =    0.5/s Avg:  4337 Min:     1 Max: 60531 Err:     2 (6.45%) Active: 3 Started: 3 Finished: 0\r\nsummary =    383 in   254s =    1.5/s Avg:  1699 Min:     1 Max: 60531 Err:     8 (2.09%)\r\nsummary +    168 in   150s =    1.1/s Avg:  3315 Min:   306 Max: 60091 Err:     8 (4.76%) Active: 3 Started: 3 Finished: 0\r\nsummary =    551 in   404s =    1.4/s Avg:  2192 Min:     1 Max: 60531 Err:    16 (2.90%)\r\nsummary +     26 in  60.4s =    0.4/s Avg:  2755 Min:   329 Max: 60052 Err:     1 (3.85%) Active: 3 Started: 3 Finished: 0\r\nsummary =    577 in   464s =    1.2/s Avg:  2217 Min:     1 Max: 60531 Err:    17 (2.95%)\r\nsummary +     15 in  63.3s =    0.2/s Avg: 12342 Min:   363 Max: 60059 Err:     3 (20.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    592 in   528s =    1.1/s Avg:  2473 Min:     1 Max: 60531 Err:    20 (3.38%)\r\n</pre>\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\n<pre>\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\r\n</pre>\r\n\r\nphp7在swoole 下的表现：平均响应时间为160ms左右，没有超时，很稳定\r\n\r\n<pre>\r\nsummary +    421 in  24.3s =   17.3/s Avg:   169 Min:   144 Max:   252 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    566 in    30s =   18.8/s Avg:   159 Min:   146 Max:   227 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    987 in  54.3s =   18.2/s Avg:   163 Min:   144 Max:   252 Err:     0 (0.00%)\r\nsummary +    559 in    30s =   18.7/s Avg:   160 Min:   147 Max:   249 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   1546 in  84.3s =   18.3/s Avg:   162 Min:   144 Max:   252 Err:     0 (0.00%)\r\nsummary +    557 in    30s =   18.6/s Avg:   161 Min:   150 Max:   195 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2103 in   114s =   18.4/s Avg:   162 Min:   144 Max:   252 Err:     0 (0.00%)\r\n</pre>\r\n\r\n\r\n\r\nphp7在原生的表现：平均响应时间为205左右，没有超时，很稳定\r\n<pre>\r\nsummary +    127 in  11.5s =   11.1/s Avg:   257 Min:   208 Max:   457 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    351 in    30s =   11.7/s Avg:   255 Min:   211 Max:   382 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    478 in  41.4s =   11.6/s Avg:   256 Min:   208 Max:   457 Err:     0 (0.00%)\r\nsummary +    353 in    30s =   11.8/s Avg:   255 Min:   203 Max:   397 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    831 in  71.4s =   11.6/s Avg:   255 Min:   203 Max:   457 Err:     0 (0.00%)\r\n</pre>','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-12 03:20:20','2016-06-12 03:20:20','',579,'http://unasm.com/2016/06/597/',0,'revision','',0),(603,1,'2016-06-12 14:38:12','2016-06-12 14:38:12','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\n1. Swoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\n2. php原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n\r\n3.php7 swoole 表现：cpu 消耗 40%左右，某一个cpu稳定在96%左右，\r\n\r\n<pre>\r\nsummary +    255 in     9s =   29.6/s Avg:  2534 Min:   400 Max:  3368 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary +    920 in    30s =   30.7/s Avg:  3273 Min:  2867 Max:  3634 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   1175 in    39s =   30.5/s Avg:  3112 Min:   400 Max:  3634 Err:     0 (0.00%)\r\nsummary +    928 in    30s =   30.9/s Avg:  3208 Min:  2784 Max:  3690 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   2103 in    69s =   30.7/s Avg:  3155 Min:   400 Max:  3690 Err:     0 (0.00%)\r\n</pre>\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\n<pre>\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\n</pre>\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\n<pre>\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\r\n</pre>\r\n\r\nphp7在swoole 下的表现：平均响应时间为230ms 左右，没有超时，很稳定,八核 cpu 消耗 一个cpu 95%,两个20%，其他10%左右。\r\n\r\n<pre>\r\nsummary =   1704 in   134s =   12.7/s Avg:   235 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    410 in    30s =   13.6/s Avg:   219 Min:   192 Max:   490 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2114 in   164s =   12.9/s Avg:   232 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    431 in    30s =   14.4/s Avg:   208 Min:   189 Max:   370 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2545 in   194s =   13.1/s Avg:   228 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    422 in    30s =   14.1/s Avg:   213 Min:   188 Max:   416 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2967 in   224s =   13.2/s Avg:   226 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    426 in    30s =   14.2/s Avg:   210 Min:   190 Max:   327 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   3393 in   254s =   13.4/s Avg:   224 Min:   177 Max:  1294 Err:     0 (0.00%)\r\n</pre>\r\n\r\n\r\n\r\nphp7在原生的表现：平均响应时间为300左右，没有超时，很稳定,8核cpu 一个在80%，其他四个在15%左右波动，其他为0%。\r\n<pre>\r\nsummary +    213 in    23s =    9.4/s Avg:   311 Min:   247 Max:   685 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    306 in    30s =   10.2/s Avg:   294 Min:   240 Max:   448 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    519 in    53s =    9.8/s Avg:   301 Min:   240 Max:   685 Err:     0 (0.00%)\r\n</pre>','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-12 14:38:12','2016-06-12 14:38:12','',579,'http://unasm.com/2016/06/603/',0,'revision','',0),(602,1,'2016-06-12 14:37:29','2016-06-12 14:37:29','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\n1. Swoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\n2. php原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n\r\n3.php7 swoole 表现：cpu 消耗 40%左右，某一个cpu稳定在96%左右，\r\n\r\n<pre>\r\nsummary +    255 in     9s =   29.6/s Avg:  2534 Min:   400 Max:  3368 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary +    920 in    30s =   30.7/s Avg:  3273 Min:  2867 Max:  3634 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   1175 in    39s =   30.5/s Avg:  3112 Min:   400 Max:  3634 Err:     0 (0.00%)\r\nsummary +    928 in    30s =   30.9/s Avg:  3208 Min:  2784 Max:  3690 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   2103 in    69s =   30.7/s Avg:  3155 Min:   400 Max:  3690 Err:     0 (0.00%)\r\n</pre>\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1963 in 118s = 16.7/s Avg: 5021 Min: 0 Max: 65247 Err: 59 (3.01%)\r\nsummary + 498 in 30s = 16.6/s Avg: 6613 Min: 0 Max: 63452 Err: 33 (6.63%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2461 in 148s = 16.6/s Avg: 5343 Min: 0 Max: 65247 Err: 92 (3.74%)\r\nsummary + 482 in 30s = 16.0/s Avg: 6150 Min: 2 Max: 60003 Err: 27 (5.60%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2943 in 178s = 16.5/s Avg: 5475 Min: 0 Max: 65247 Err: 119 (4.04%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\n<pre>\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\n</pre>\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\n<pre>\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\r\n</pre>\r\n\r\nphp7在swoole 下的表现：平均响应时间为230ms 左右，没有超时，很稳定,八核 cpu 消耗 一个cpu 95%,两个20%，其他10%左右。\r\n\r\n<pre>\r\nsummary =   1704 in   134s =   12.7/s Avg:   235 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    410 in    30s =   13.6/s Avg:   219 Min:   192 Max:   490 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2114 in   164s =   12.9/s Avg:   232 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    431 in    30s =   14.4/s Avg:   208 Min:   189 Max:   370 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2545 in   194s =   13.1/s Avg:   228 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    422 in    30s =   14.1/s Avg:   213 Min:   188 Max:   416 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2967 in   224s =   13.2/s Avg:   226 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    426 in    30s =   14.2/s Avg:   210 Min:   190 Max:   327 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   3393 in   254s =   13.4/s Avg:   224 Min:   177 Max:  1294 Err:     0 (0.00%)\r\n</pre>\r\n\r\n\r\n\r\nphp7在原生的表现：平均响应时间为300左右，没有超时，很稳定,8核cpu 一个在80%，其他四个在15%左右波动，其他为0%。\r\n<pre>\r\nsummary +    213 in    23s =    9.4/s Avg:   311 Min:   247 Max:   685 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    306 in    30s =   10.2/s Avg:   294 Min:   240 Max:   448 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    519 in    53s =    9.8/s Avg:   301 Min:   240 Max:   685 Err:     0 (0.00%)\r\n</pre>','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-12 14:37:29','2016-06-12 14:37:29','',579,'http://unasm.com/2016/06/602/',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (600,1,'2016-06-12 14:30:22','2016-06-12 14:30:22','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\n1. Swoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\n2. php原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n\r\n3.php7 swoole 表现：cpu 消耗 40%左右，某一个cpu稳定在96%左右，\r\n\r\n<pre>\r\nsummary +    255 in     9s =   29.6/s Avg:  2534 Min:   400 Max:  3368 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary +    920 in    30s =   30.7/s Avg:  3273 Min:  2867 Max:  3634 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   1175 in    39s =   30.5/s Avg:  3112 Min:   400 Max:  3634 Err:     0 (0.00%)\r\nsummary +    928 in    30s =   30.9/s Avg:  3208 Min:  2784 Max:  3690 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   2103 in    69s =   30.7/s Avg:  3155 Min:   400 Max:  3690 Err:     0 (0.00%)\r\n</pre>\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1963 in 118s = 16.7/s Avg: 5021 Min: 0 Max: 65247 Err: 59 (3.01%)\r\nsummary + 498 in 30s = 16.6/s Avg: 6613 Min: 0 Max: 63452 Err: 33 (6.63%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2461 in 148s = 16.6/s Avg: 5343 Min: 0 Max: 65247 Err: 92 (3.74%)\r\nsummary + 482 in 30s = 16.0/s Avg: 6150 Min: 2 Max: 60003 Err: 27 (5.60%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2943 in 178s = 16.5/s Avg: 5475 Min: 0 Max: 65247 Err: 119 (4.04%)\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\n<pre>\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\n</pre>\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\n<pre>\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\r\n</pre>\r\n\r\nphp7在swoole 下的表现：平均响应时间为230ms 左右，没有超时，很稳定,八核 cpu 消耗 一个cpu 95%,两个20%，其他10%左右。\r\n\r\n<pre>\r\nsummary =   1704 in   134s =   12.7/s Avg:   235 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    410 in    30s =   13.6/s Avg:   219 Min:   192 Max:   490 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2114 in   164s =   12.9/s Avg:   232 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    431 in    30s =   14.4/s Avg:   208 Min:   189 Max:   370 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2545 in   194s =   13.1/s Avg:   228 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    422 in    30s =   14.1/s Avg:   213 Min:   188 Max:   416 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2967 in   224s =   13.2/s Avg:   226 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    426 in    30s =   14.2/s Avg:   210 Min:   190 Max:   327 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   3393 in   254s =   13.4/s Avg:   224 Min:   177 Max:  1294 Err:     0 (0.00%)\r\n</pre>\r\n\r\n\r\n\r\nphp7在原生的表现：平均响应时间为205左右，没有超时，很稳定\r\n<pre>\r\nsummary +    127 in  11.5s =   11.1/s Avg:   257 Min:   208 Max:   457 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    351 in    30s =   11.7/s Avg:   255 Min:   211 Max:   382 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    478 in  41.4s =   11.6/s Avg:   256 Min:   208 Max:   457 Err:     0 (0.00%)\r\nsummary +    353 in    30s =   11.8/s Avg:   255 Min:   203 Max:   397 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    831 in  71.4s =   11.6/s Avg:   255 Min:   203 Max:   457 Err:     0 (0.00%)\r\n</pre>','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-12 14:30:22','2016-06-12 14:30:22','',579,'http://unasm.com/2016/06/600/',0,'revision','',0),(606,1,'2016-06-12 14:58:45','2016-06-12 14:58:45','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\n1. Swoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\n2. php原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n\r\n3.php7 swoole 表现：cpu 消耗 40%左右，某一个cpu稳定在96%左右，\r\n\r\n<pre>\r\nsummary +    255 in     9s =   29.6/s Avg:  2534 Min:   400 Max:  3368 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary +    920 in    30s =   30.7/s Avg:  3273 Min:  2867 Max:  3634 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   1175 in    39s =   30.5/s Avg:  3112 Min:   400 Max:  3634 Err:     0 (0.00%)\r\nsummary +    928 in    30s =   30.9/s Avg:  3208 Min:  2784 Max:  3690 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   2103 in    69s =   30.7/s Avg:  3155 Min:   400 Max:  3690 Err:     0 (0.00%)\r\n</pre>\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\n<pre>\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\n</pre>\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\n<pre>\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\r\n</pre>\r\n\r\nphp7在swoole 下的表现：平均响应时间为230ms 左右，没有超时，很稳定,八核 cpu 消耗 一个cpu 95%,两个20%，其他10%左右。\r\n\r\n<pre>\r\nsummary =   1704 in   134s =   12.7/s Avg:   235 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    410 in    30s =   13.6/s Avg:   219 Min:   192 Max:   490 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2114 in   164s =   12.9/s Avg:   232 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    431 in    30s =   14.4/s Avg:   208 Min:   189 Max:   370 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2545 in   194s =   13.1/s Avg:   228 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    422 in    30s =   14.1/s Avg:   213 Min:   188 Max:   416 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2967 in   224s =   13.2/s Avg:   226 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    426 in    30s =   14.2/s Avg:   210 Min:   190 Max:   327 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   3393 in   254s =   13.4/s Avg:   224 Min:   177 Max:  1294 Err:     0 (0.00%)\r\n</pre>\r\n\r\n\r\n\r\nphp7在原生的表现：平均响应时间为300左右，没有超时，很稳定,8核cpu 一个在80%，其他四个在15%左右波动，其他为0%。\r\n<pre>\r\nsummary +    213 in    23s =    9.4/s Avg:   311 Min:   247 Max:   685 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    306 in    30s =   10.2/s Avg:   294 Min:   240 Max:   448 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    519 in    53s =    9.8/s Avg:   301 Min:   240 Max:   685 Err:     0 (0.00%)\r\n</pre>\r\n\r\n<h2>php7 极限 </h2>\r\nphp7 原生 ，excel 500行 ，极限 是 43并发，响应6S左右，cpu普遍达到96%，并出现相当的超时。\r\n<pre>\r\nsummary +    607 in  15.5s =   39.2/s Avg:  4099 Min:   877 Max: 11613 Err:     7 (1.15%) Active: 300 Started: 300 Finished: 0\r\nsummary +   1293 in    30s =   43.2/s Avg:  5237 Min:  3302 Max: 35598 Err:    33 (2.55%) Active: 300 Started: 300 Finished: 0\r\nsummary =   1900 in  45.4s =   41.8/s Avg:  4874 Min:   877 Max: 35598 Err:    40 (2.11%)\r\nsummary +   1353 in  30.2s =   44.8/s Avg:  8237 Min:  3309 Max: 63005 Err:    90 (6.65%) Active: 300 Started: 300 Finished: 0\r\nsummary =   3253 in    76s =   43.0/s Avg:  6272 Min:   877 Max: 63005 Err:   130 (4.00%)\r\n</pre>\r\nphp7 原生 swoole excel 500行 ，极限是37/s，响应7.3s 很稳定没有出现超时，cpu 达到上限。\r\n<pre>\r\nsummary +    651 in    19s =   34.9/s Avg:  6306 Min:  2548 Max: 14280 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary +   1109 in    30s =   37.0/s Avg:  7973 Min:  2449 Max: 23094 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary =   1760 in    49s =   36.2/s Avg:  7356 Min:  2449 Max: 23094 Err:     0 (0.00%)\r\nsummary +   1159 in    30s =   38.6/s Avg:  7784 Min:  2584 Max: 24136 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary =   2919 in    79s =   37.1/s Avg:  7526 Min:  2449 Max: 24136 Err:     0 (0.00%)\r\n</pre>\r\n','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-12 14:58:45','2016-06-12 14:58:45','',579,'http://unasm.com/2016/06/606/',0,'revision','',0),(605,1,'2016-06-12 14:58:07','2016-06-12 14:58:07','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n第一步 ，excel 三行 ， 100线程下压测，\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n第二步 ，excel 100行 ， 100线程下压测\r\n\r\n1. Swoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\n2. php原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n\r\n3.php7 swoole 表现：cpu 消耗 40%左右，某一个cpu稳定在96%左右，\r\n\r\n<pre>\r\nsummary +    255 in     9s =   29.6/s Avg:  2534 Min:   400 Max:  3368 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary +    920 in    30s =   30.7/s Avg:  3273 Min:  2867 Max:  3634 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   1175 in    39s =   30.5/s Avg:  3112 Min:   400 Max:  3634 Err:     0 (0.00%)\r\nsummary +    928 in    30s =   30.9/s Avg:  3208 Min:  2784 Max:  3690 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   2103 in    69s =   30.7/s Avg:  3155 Min:   400 Max:  3690 Err:     0 (0.00%)\r\n</pre>\r\n第三步 ，excel 500行 ， 100线程下压测\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\n<pre>\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\n</pre>\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\n<pre>\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\r\n</pre>\r\n\r\nphp7在swoole 下的表现：平均响应时间为230ms 左右，没有超时，很稳定,八核 cpu 消耗 一个cpu 95%,两个20%，其他10%左右。\r\n\r\n<pre>\r\nsummary =   1704 in   134s =   12.7/s Avg:   235 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    410 in    30s =   13.6/s Avg:   219 Min:   192 Max:   490 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2114 in   164s =   12.9/s Avg:   232 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    431 in    30s =   14.4/s Avg:   208 Min:   189 Max:   370 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2545 in   194s =   13.1/s Avg:   228 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    422 in    30s =   14.1/s Avg:   213 Min:   188 Max:   416 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2967 in   224s =   13.2/s Avg:   226 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    426 in    30s =   14.2/s Avg:   210 Min:   190 Max:   327 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   3393 in   254s =   13.4/s Avg:   224 Min:   177 Max:  1294 Err:     0 (0.00%)\r\n</pre>\r\n\r\n\r\n\r\nphp7在原生的表现：平均响应时间为300左右，没有超时，很稳定,8核cpu 一个在80%，其他四个在15%左右波动，其他为0%。\r\n<pre>\r\nsummary +    213 in    23s =    9.4/s Avg:   311 Min:   247 Max:   685 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    306 in    30s =   10.2/s Avg:   294 Min:   240 Max:   448 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    519 in    53s =    9.8/s Avg:   301 Min:   240 Max:   685 Err:     0 (0.00%)\r\n</pre>\r\n\r\n<h2>php7 极限 </h2>\r\nphp7 原生 ，excel 500行 ，极限 是 43并发，响应6S左右，cpu普遍达到96%，并出现相当的超时。\r\nsummary +    607 in  15.5s =   39.2/s Avg:  4099 Min:   877 Max: 11613 Err:     7 (1.15%) Active: 300 Started: 300 Finished: 0\r\nsummary +   1293 in    30s =   43.2/s Avg:  5237 Min:  3302 Max: 35598 Err:    33 (2.55%) Active: 300 Started: 300 Finished: 0\r\nsummary =   1900 in  45.4s =   41.8/s Avg:  4874 Min:   877 Max: 35598 Err:    40 (2.11%)\r\nsummary +   1353 in  30.2s =   44.8/s Avg:  8237 Min:  3309 Max: 63005 Err:    90 (6.65%) Active: 300 Started: 300 Finished: 0\r\nsummary =   3253 in    76s =   43.0/s Avg:  6272 Min:   877 Max: 63005 Err:   130 (4.00%)\r\nphp7 原生 swoole excel 500行 ，极限是37/s，响应7.3s 很稳定没有出现超时，cpu 达到上限。\r\nsummary +    651 in    19s =   34.9/s Avg:  6306 Min:  2548 Max: 14280 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary +   1109 in    30s =   37.0/s Avg:  7973 Min:  2449 Max: 23094 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary =   1760 in    49s =   36.2/s Avg:  7356 Min:  2449 Max: 23094 Err:     0 (0.00%)\r\nsummary +   1159 in    30s =   38.6/s Avg:  7784 Min:  2584 Max: 24136 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary =   2919 in    79s =   37.1/s Avg:  7526 Min:  2449 Max: 24136 Err:     0 (0.00%)\r\n','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-12 14:58:07','2016-06-12 14:58:07','',579,'http://unasm.com/2016/06/605/',0,'revision','',0),(608,1,'2016-06-13 02:51:52','2016-06-13 02:51:52','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n<h2>第一步 ，excel 三行 ， 100线程下压测</h2>\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n<h2>第二步 ，excel 100行 ， 100线程下压测</h2>\r\n\r\n1. Swoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\n2. php原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n\r\n3.php7 swoole 表现：cpu 消耗 40%左右，某一个cpu稳定在96%左右，\r\n\r\n<pre>\r\nsummary +    255 in     9s =   29.6/s Avg:  2534 Min:   400 Max:  3368 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary +    920 in    30s =   30.7/s Avg:  3273 Min:  2867 Max:  3634 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   1175 in    39s =   30.5/s Avg:  3112 Min:   400 Max:  3634 Err:     0 (0.00%)\r\nsummary +    928 in    30s =   30.9/s Avg:  3208 Min:  2784 Max:  3690 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   2103 in    69s =   30.7/s Avg:  3155 Min:   400 Max:  3690 Err:     0 (0.00%)\r\n</pre>\r\n<h2>第三步 ，excel 500行 ， 100线程下压测</h2>\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\n<pre>\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\n</pre>\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\n<pre>\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\r\n</pre>\r\n\r\nphp7在swoole 下的表现：平均响应时间为230ms 左右，没有超时，很稳定,八核 cpu 消耗 一个cpu 95%,两个20%，其他10%左右。\r\n\r\n<pre>\r\nsummary =   1704 in   134s =   12.7/s Avg:   235 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    410 in    30s =   13.6/s Avg:   219 Min:   192 Max:   490 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2114 in   164s =   12.9/s Avg:   232 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    431 in    30s =   14.4/s Avg:   208 Min:   189 Max:   370 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2545 in   194s =   13.1/s Avg:   228 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    422 in    30s =   14.1/s Avg:   213 Min:   188 Max:   416 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2967 in   224s =   13.2/s Avg:   226 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    426 in    30s =   14.2/s Avg:   210 Min:   190 Max:   327 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   3393 in   254s =   13.4/s Avg:   224 Min:   177 Max:  1294 Err:     0 (0.00%)\r\n</pre>\r\n\r\n\r\n\r\nphp7在原生的表现：平均响应时间为300左右，没有超时，很稳定,8核cpu 一个在80%，其他四个在15%左右波动，其他为0%。\r\n<pre>\r\nsummary +    213 in    23s =    9.4/s Avg:   311 Min:   247 Max:   685 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    306 in    30s =   10.2/s Avg:   294 Min:   240 Max:   448 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    519 in    53s =    9.8/s Avg:   301 Min:   240 Max:   685 Err:     0 (0.00%)\r\n</pre>\r\n\r\n<h2>php7 极限 </h2>\r\nphp7 原生 ，excel 500行 ，极限 是 43并发，响应6S左右，cpu普遍达到96%，并出现相当的超时。\r\n<pre>\r\nsummary +    607 in  15.5s =   39.2/s Avg:  4099 Min:   877 Max: 11613 Err:     7 (1.15%) Active: 300 Started: 300 Finished: 0\r\nsummary +   1293 in    30s =   43.2/s Avg:  5237 Min:  3302 Max: 35598 Err:    33 (2.55%) Active: 300 Started: 300 Finished: 0\r\nsummary =   1900 in  45.4s =   41.8/s Avg:  4874 Min:   877 Max: 35598 Err:    40 (2.11%)\r\nsummary +   1353 in  30.2s =   44.8/s Avg:  8237 Min:  3309 Max: 63005 Err:    90 (6.65%) Active: 300 Started: 300 Finished: 0\r\nsummary =   3253 in    76s =   43.0/s Avg:  6272 Min:   877 Max: 63005 Err:   130 (4.00%)\r\n</pre>\r\nphp7 原生 swoole excel 500行 ，极限是37/s，响应7.3s 很稳定没有出现超时，cpu 达到上限。\r\n<pre>\r\nsummary +    651 in    19s =   34.9/s Avg:  6306 Min:  2548 Max: 14280 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary +   1109 in    30s =   37.0/s Avg:  7973 Min:  2449 Max: 23094 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary =   1760 in    49s =   36.2/s Avg:  7356 Min:  2449 Max: 23094 Err:     0 (0.00%)\r\nsummary +   1159 in    30s =   38.6/s Avg:  7784 Min:  2584 Max: 24136 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary =   2919 in    79s =   37.1/s Avg:  7526 Min:  2449 Max: 24136 Err:     0 (0.00%)\r\n</pre>\r\n','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-13 02:51:52','2016-06-13 02:51:52','',579,'http://unasm.com/2016/06/608/',0,'revision','',0),(610,1,'2016-06-13 12:21:48','2016-06-13 12:21:48','(golang 部分暂缺)\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n<h2>第一步 ，excel 三行 ， 100线程下压测</h2>\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n<h2>第二步 ，excel 100行 ， 100线程下压测</h2>\r\n\r\n1. Swoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\n2. php原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n\r\n3.php7 swoole 表现：cpu 消耗 40%左右，某一个cpu稳定在96%左右，\r\n\r\n<pre>\r\nsummary +    255 in     9s =   29.6/s Avg:  2534 Min:   400 Max:  3368 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary +    920 in    30s =   30.7/s Avg:  3273 Min:  2867 Max:  3634 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   1175 in    39s =   30.5/s Avg:  3112 Min:   400 Max:  3634 Err:     0 (0.00%)\r\nsummary +    928 in    30s =   30.9/s Avg:  3208 Min:  2784 Max:  3690 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   2103 in    69s =   30.7/s Avg:  3155 Min:   400 Max:  3690 Err:     0 (0.00%)\r\n</pre>\r\n<h2>第三步 ，excel 500行 ， 100线程下压测</h2>\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\ngolang 的压测结果，cpu在20%左右，qps 220/s，左右，响应1100ms,瓶颈在于数据库插入速度，\r\n\r\nsummary +   5520 in    25s =  220.7/s Avg:  1119 Min:   524 Max:  1501 Err:     0 (0.00%) Active: 250 Started: 250 Finished: 0\r\nsummary =   5521 in    26s =  213.0/s Avg:  1119 Min:   524 Max:  1501 Err:     0 (0.00%)\r\nsummary +   6675 in    30s =  222.5/s Avg:  1123 Min:   860 Max:  1411 Err:     0 (0.00%) Active: 250 Started: 250 Finished: 0\r\nsummary =  12196 in    56s =  218.1/s Avg:  1121 Min:   524 Max:  1501 Err:     0 (0.00%)\r\n\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\n<pre>\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\n</pre>\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\n<pre>\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\r\n</pre>\r\n\r\nphp7在swoole 下的表现：平均响应时间为230ms 左右，没有超时，很稳定,八核 cpu 消耗 一个cpu 95%,两个20%，其他10%左右。\r\n\r\n<pre>\r\nsummary =   1704 in   134s =   12.7/s Avg:   235 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    410 in    30s =   13.6/s Avg:   219 Min:   192 Max:   490 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2114 in   164s =   12.9/s Avg:   232 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    431 in    30s =   14.4/s Avg:   208 Min:   189 Max:   370 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2545 in   194s =   13.1/s Avg:   228 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    422 in    30s =   14.1/s Avg:   213 Min:   188 Max:   416 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2967 in   224s =   13.2/s Avg:   226 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    426 in    30s =   14.2/s Avg:   210 Min:   190 Max:   327 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   3393 in   254s =   13.4/s Avg:   224 Min:   177 Max:  1294 Err:     0 (0.00%)\r\n</pre>\r\n\r\n\r\n\r\nphp7在原生的表现：平均响应时间为300左右，没有超时，很稳定,8核cpu 一个在80%，其他四个在15%左右波动，其他为0%。\r\n<pre>\r\nsummary +    213 in    23s =    9.4/s Avg:   311 Min:   247 Max:   685 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    306 in    30s =   10.2/s Avg:   294 Min:   240 Max:   448 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    519 in    53s =    9.8/s Avg:   301 Min:   240 Max:   685 Err:     0 (0.00%)\r\n</pre>\r\n\r\n<h2>php7 极限 </h2>\r\nphp7 原生 ，excel 500行 ，极限 是 43并发，响应6S左右，cpu普遍达到96%，并出现相当的超时。\r\n<pre>\r\nsummary +    607 in  15.5s =   39.2/s Avg:  4099 Min:   877 Max: 11613 Err:     7 (1.15%) Active: 300 Started: 300 Finished: 0\r\nsummary +   1293 in    30s =   43.2/s Avg:  5237 Min:  3302 Max: 35598 Err:    33 (2.55%) Active: 300 Started: 300 Finished: 0\r\nsummary =   1900 in  45.4s =   41.8/s Avg:  4874 Min:   877 Max: 35598 Err:    40 (2.11%)\r\nsummary +   1353 in  30.2s =   44.8/s Avg:  8237 Min:  3309 Max: 63005 Err:    90 (6.65%) Active: 300 Started: 300 Finished: 0\r\nsummary =   3253 in    76s =   43.0/s Avg:  6272 Min:   877 Max: 63005 Err:   130 (4.00%)\r\n</pre>\r\nphp7 原生 swoole excel 500行 ，极限是37/s，响应7.3s 很稳定没有出现超时，cpu 达到上限。\r\n<pre>\r\nsummary +    651 in    19s =   34.9/s Avg:  6306 Min:  2548 Max: 14280 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary +   1109 in    30s =   37.0/s Avg:  7973 Min:  2449 Max: 23094 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary =   1760 in    49s =   36.2/s Avg:  7356 Min:  2449 Max: 23094 Err:     0 (0.00%)\r\nsummary +   1159 in    30s =   38.6/s Avg:  7784 Min:  2584 Max: 24136 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary =   2919 in    79s =   37.1/s Avg:  7526 Min:  2449 Max: 24136 Err:     0 (0.00%)\r\n</pre>','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-13 12:21:48','2016-06-13 12:21:48','',579,'http://unasm.com/2016/06/610/',0,'revision','',0),(613,1,'2016-06-13 12:43:33','2016-06-13 12:43:33','先说结论吧，php5.6的 情况下，php 原生速度稳定性略微优于swoole,相差不大，php7的性能 在这种场景下要 提升接近一倍的性能，在php7的时候，swoole 表现比php原生 大约有20%的提升，极限情况下,php 原生要比swoole并发略高，但是有一定程度的超时。\r\ngolang的性能，在100行excel的情况下，并发是220s,cpu 20%， 是当时的php 的10倍左右，瓶颈在于数据库，数据库服务器的cpu达到60%，250个插入进程并发执行， 如果进一步优化插入的sql，可以达到更高。\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n<h2>第一步 ，excel 三行 ， 100线程下压测</h2>\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n<h2>第二步 ，excel 100行 ， 100线程下压测</h2>\r\n\r\n1. Swoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\n2. php原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n\r\n3.php7 swoole 表现：cpu 消耗 40%左右，某一个cpu稳定在96%左右，\r\n\r\n<pre>\r\nsummary +    255 in     9s =   29.6/s Avg:  2534 Min:   400 Max:  3368 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary +    920 in    30s =   30.7/s Avg:  3273 Min:  2867 Max:  3634 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   1175 in    39s =   30.5/s Avg:  3112 Min:   400 Max:  3634 Err:     0 (0.00%)\r\nsummary +    928 in    30s =   30.9/s Avg:  3208 Min:  2784 Max:  3690 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   2103 in    69s =   30.7/s Avg:  3155 Min:   400 Max:  3690 Err:     0 (0.00%)\r\n</pre>\r\n<h2>第三步 ，excel 500行 ， 100线程下压测</h2>\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\ngolang 的压测结果，cpu在20%左右，qps 220/s，左右，响应1100ms,瓶颈在于数据库插入速度，\r\n\r\n<pre>\r\nsummary +   5520 in    25s =  220.7/s Avg:  1119 Min:   524 Max:  1501 Err:     0 (0.00%) Active: 250 Started: 250 Finished: 0\r\nsummary =   5521 in    26s =  213.0/s Avg:  1119 Min:   524 Max:  1501 Err:     0 (0.00%)\r\nsummary +   6675 in    30s =  222.5/s Avg:  1123 Min:   860 Max:  1411 Err:     0 (0.00%) Active: 250 Started: 250 Finished: 0\r\nsummary =  12196 in    56s =  218.1/s Avg:  1121 Min:   524 Max:  1501 Err:     0 (0.00%)\r\n</pre>\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\n<pre>\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\n</pre>\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\n<pre>\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\r\n</pre>\r\n\r\nphp7在swoole 下的表现：平均响应时间为230ms 左右，没有超时，很稳定,八核 cpu 消耗 一个cpu 95%,两个20%，其他10%左右。\r\n\r\n<pre>\r\nsummary =   1704 in   134s =   12.7/s Avg:   235 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    410 in    30s =   13.6/s Avg:   219 Min:   192 Max:   490 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2114 in   164s =   12.9/s Avg:   232 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    431 in    30s =   14.4/s Avg:   208 Min:   189 Max:   370 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2545 in   194s =   13.1/s Avg:   228 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    422 in    30s =   14.1/s Avg:   213 Min:   188 Max:   416 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2967 in   224s =   13.2/s Avg:   226 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    426 in    30s =   14.2/s Avg:   210 Min:   190 Max:   327 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   3393 in   254s =   13.4/s Avg:   224 Min:   177 Max:  1294 Err:     0 (0.00%)\r\n</pre>\r\n\r\n\r\n\r\nphp7在原生的表现：平均响应时间为300左右，没有超时，很稳定,8核cpu 一个在80%，其他四个在15%左右波动，其他为0%。\r\n<pre>\r\nsummary +    213 in    23s =    9.4/s Avg:   311 Min:   247 Max:   685 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    306 in    30s =   10.2/s Avg:   294 Min:   240 Max:   448 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    519 in    53s =    9.8/s Avg:   301 Min:   240 Max:   685 Err:     0 (0.00%)\r\n</pre>\r\n\r\n<h2>php7 极限 </h2>\r\nphp7 原生 ，excel 500行 ，极限 是 43并发，响应6S左右，cpu普遍达到96%，并出现相当的超时。\r\n<pre>\r\nsummary +    607 in  15.5s =   39.2/s Avg:  4099 Min:   877 Max: 11613 Err:     7 (1.15%) Active: 300 Started: 300 Finished: 0\r\nsummary +   1293 in    30s =   43.2/s Avg:  5237 Min:  3302 Max: 35598 Err:    33 (2.55%) Active: 300 Started: 300 Finished: 0\r\nsummary =   1900 in  45.4s =   41.8/s Avg:  4874 Min:   877 Max: 35598 Err:    40 (2.11%)\r\nsummary +   1353 in  30.2s =   44.8/s Avg:  8237 Min:  3309 Max: 63005 Err:    90 (6.65%) Active: 300 Started: 300 Finished: 0\r\nsummary =   3253 in    76s =   43.0/s Avg:  6272 Min:   877 Max: 63005 Err:   130 (4.00%)\r\n</pre>\r\nphp7 原生 swoole excel 500行 ，极限是37/s，响应7.3s 很稳定没有出现超时，cpu 达到上限。\r\n<pre>\r\nsummary +    651 in    19s =   34.9/s Avg:  6306 Min:  2548 Max: 14280 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary +   1109 in    30s =   37.0/s Avg:  7973 Min:  2449 Max: 23094 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary =   1760 in    49s =   36.2/s Avg:  7356 Min:  2449 Max: 23094 Err:     0 (0.00%)\r\nsummary +   1159 in    30s =   38.6/s Avg:  7784 Min:  2584 Max: 24136 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary =   2919 in    79s =   37.1/s Avg:  7526 Min:  2449 Max: 24136 Err:     0 (0.00%)\r\n</pre>','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-13 12:43:33','2016-06-13 12:43:33','',579,'http://unasm.com/2016/06/613/',0,'revision','',0),(612,1,'2016-06-13 12:42:06','2016-06-13 12:42:06','先说结论吧，php5.6的 情况下，php 原生速度稳定性略微优于swoole,相差不大，php7的性能 在这种场景下要 提升接近一倍的性能，在php7的时候，swoole 表现比php原生 大约有20%的提升，极限情况下,php 原生要比swoole并发略高，但是有一定程度的超时。\r\ngolang的性能，在100行excel的情况下，并发是220s,cpu 20%， 是当时的php 的10倍左右，瓶颈在于数据库，数据库服务器的cpu达到60%，如果进一步优化插入的sql，可以达到更高。\r\n\r\n压测工具使用的是Jmeter.\r\n\r\n压测的接口如下\r\nstaff/upload-staff-excel(swoole 实现)\r\nexcel/upload-staff-excel(php 原生)\r\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\r\n\r\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\r\n\r\n<h2>第一步 ，excel 三行 ， 100线程下压测</h2>\r\n\r\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\r\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\r\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\r\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\r\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\r\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\r\n</pre>\r\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\r\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\r\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\n\r\n<h2>第二步 ，excel 100行 ， 100线程下压测</h2>\r\n\r\n1. Swoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\r\n<pre>\r\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\r\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\r\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\r\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\r\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\r\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\r\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\r\n</pre>\r\n2. php原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\r\n<pre>\r\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\r\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\r\n</pre>\r\n\r\n3.php7 swoole 表现：cpu 消耗 40%左右，某一个cpu稳定在96%左右，\r\n\r\n<pre>\r\nsummary +    255 in     9s =   29.6/s Avg:  2534 Min:   400 Max:  3368 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary +    920 in    30s =   30.7/s Avg:  3273 Min:  2867 Max:  3634 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   1175 in    39s =   30.5/s Avg:  3112 Min:   400 Max:  3634 Err:     0 (0.00%)\r\nsummary +    928 in    30s =   30.9/s Avg:  3208 Min:  2784 Max:  3690 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary =   2103 in    69s =   30.7/s Avg:  3155 Min:   400 Max:  3690 Err:     0 (0.00%)\r\n</pre>\r\n<h2>第三步 ，excel 500行 ， 100线程下压测</h2>\r\n\r\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\r\n\r\n&nbsp;\r\n<pre>\r\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\r\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\r\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\r\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\r\n</pre>\r\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\r\n<pre>\r\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\r\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\r\n</pre>\r\n&nbsp;\r\ngolang 的压测结果，cpu在20%左右，qps 220/s，左右，响应1100ms,瓶颈在于数据库插入速度，\r\n\r\n<pre>\r\nsummary +   5520 in    25s =  220.7/s Avg:  1119 Min:   524 Max:  1501 Err:     0 (0.00%) Active: 250 Started: 250 Finished: 0\r\nsummary =   5521 in    26s =  213.0/s Avg:  1119 Min:   524 Max:  1501 Err:     0 (0.00%)\r\nsummary +   6675 in    30s =  222.5/s Avg:  1123 Min:   860 Max:  1411 Err:     0 (0.00%) Active: 250 Started: 250 Finished: 0\r\nsummary =  12196 in    56s =  218.1/s Avg:  1121 Min:   524 Max:  1501 Err:     0 (0.00%)\r\n</pre>\r\n\r\n第四步 ，excel 500行 ， 3线程下压测 ，\r\n\r\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\r\n<pre>\r\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\r\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\r\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\r\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\r\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\r\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\r\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\r\n</pre>\r\n\r\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\r\n\r\n<pre>\r\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\r\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\r\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\r\n</pre>\r\n\r\nphp7在swoole 下的表现：平均响应时间为230ms 左右，没有超时，很稳定,八核 cpu 消耗 一个cpu 95%,两个20%，其他10%左右。\r\n\r\n<pre>\r\nsummary =   1704 in   134s =   12.7/s Avg:   235 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    410 in    30s =   13.6/s Avg:   219 Min:   192 Max:   490 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2114 in   164s =   12.9/s Avg:   232 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    431 in    30s =   14.4/s Avg:   208 Min:   189 Max:   370 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2545 in   194s =   13.1/s Avg:   228 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    422 in    30s =   14.1/s Avg:   213 Min:   188 Max:   416 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   2967 in   224s =   13.2/s Avg:   226 Min:   177 Max:  1294 Err:     0 (0.00%)\r\nsummary +    426 in    30s =   14.2/s Avg:   210 Min:   190 Max:   327 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =   3393 in   254s =   13.4/s Avg:   224 Min:   177 Max:  1294 Err:     0 (0.00%)\r\n</pre>\r\n\r\n\r\n\r\nphp7在原生的表现：平均响应时间为300左右，没有超时，很稳定,8核cpu 一个在80%，其他四个在15%左右波动，其他为0%。\r\n<pre>\r\nsummary +    213 in    23s =    9.4/s Avg:   311 Min:   247 Max:   685 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary +    306 in    30s =   10.2/s Avg:   294 Min:   240 Max:   448 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\r\nsummary =    519 in    53s =    9.8/s Avg:   301 Min:   240 Max:   685 Err:     0 (0.00%)\r\n</pre>\r\n\r\n<h2>php7 极限 </h2>\r\nphp7 原生 ，excel 500行 ，极限 是 43并发，响应6S左右，cpu普遍达到96%，并出现相当的超时。\r\n<pre>\r\nsummary +    607 in  15.5s =   39.2/s Avg:  4099 Min:   877 Max: 11613 Err:     7 (1.15%) Active: 300 Started: 300 Finished: 0\r\nsummary +   1293 in    30s =   43.2/s Avg:  5237 Min:  3302 Max: 35598 Err:    33 (2.55%) Active: 300 Started: 300 Finished: 0\r\nsummary =   1900 in  45.4s =   41.8/s Avg:  4874 Min:   877 Max: 35598 Err:    40 (2.11%)\r\nsummary +   1353 in  30.2s =   44.8/s Avg:  8237 Min:  3309 Max: 63005 Err:    90 (6.65%) Active: 300 Started: 300 Finished: 0\r\nsummary =   3253 in    76s =   43.0/s Avg:  6272 Min:   877 Max: 63005 Err:   130 (4.00%)\r\n</pre>\r\nphp7 原生 swoole excel 500行 ，极限是37/s，响应7.3s 很稳定没有出现超时，cpu 达到上限。\r\n<pre>\r\nsummary +    651 in    19s =   34.9/s Avg:  6306 Min:  2548 Max: 14280 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary +   1109 in    30s =   37.0/s Avg:  7973 Min:  2449 Max: 23094 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary =   1760 in    49s =   36.2/s Avg:  7356 Min:  2449 Max: 23094 Err:     0 (0.00%)\r\nsummary +   1159 in    30s =   38.6/s Avg:  7784 Min:  2584 Max: 24136 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\r\nsummary =   2919 in    79s =   37.1/s Avg:  7526 Min:  2449 Max: 24136 Err:     0 (0.00%)\r\n</pre>','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-revision-v1','','','2016-06-13 12:42:06','2016-06-13 12:42:06','',579,'http://unasm.com/2016/06/612/',0,'revision','',0),(614,1,'2016-06-13 12:44:07','2016-06-13 12:44:07','先说结论吧，php5.6的 情况下，php 原生速度稳定性略微优于swoole,相差不大，php7的性能 在这种场景下要 提升接近一倍的性能，在php7的时候，swoole 表现比php原生 大约有20%的提升，极限情况下,php 原生要比swoole并发略高，但是有一定程度的超时。\ngolang的性能，在100行excel的情况下，并发是220s,cpu 20%， 是当时的php 的10倍左右，瓶颈在于数据库，数据库服务器的cpu达到60%，250个插入进程并发执行， 如果进一步优化插入的sql，可以达到更高。\n\n压测工具使用的是Jmeter.\n\n压测的接口如下\nstaff/upload-staff-excel(swoole 实现)\nexcel/upload-staff-excel(php 原生)\n代码地址：http://doujm@jdb-dev.com/doujm/enterprise-swoole.git\n\n场景描述： 针对excel 上传并解析，插入数据库，并返回响应的数据，swoole 和php 原生代码逻辑完全相同.\n\n<h2>第一步 ，excel 三行 ， 100线程下压测</h2>\n\nSwoole   : cpu 稳定在98%左右，QPS 为29/s, 响应时间，为3S - 3.1S左右, 平均 1.6%的超时,\n<pre>summary + 345 in 14s = 25.2/s Avg: 3262 Min: 2 Max: 5648 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary + 901 in 30s = 30.0/s Avg: 3014 Min: 1 Max: 5554 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary = 1246 in 44s = 28.5/s Avg: 3082 Min: 1 Max: 5648 Err: 0 (0.00%)\nsummary + 872 in 30s = 29.0/s Avg: 2712 Min: 1 Max: 60002 Err: 2 (0.23%) Active: 100 Started: 100 Finished: 0\nsummary = 2118 in 74s = 28.7/s Avg: 2930 Min: 1 Max: 60002 Err: 2 (0.09%)\nsummary + 848 in 30s = 28.3/s Avg: 3156 Min: 1 Max: 60001 Err: 14 (1.65%) Active: 100 Started: 100 Finished: 0\nsummary = 2966 in 104s = 28.6/s Avg: 2995 Min: 1 Max: 60002 Err: 16 (0.54%)\nsummary + 873 in 30s = 29.1/s Avg: 3175 Min: 0 Max: 64368 Err: 21 (2.41%) Active: 100 Started: 100 Finished: 0\nsummary = 3839 in 134s = 28.7/s Avg: 3036 Min: 0 Max: 64368 Err: 37 (0.96%)\nsummary + 895 in 30s = 29.8/s Avg: 3701 Min: 0 Max: 62674 Err: 27 (3.02%) Active: 100 Started: 100 Finished: 0\nsummary = 4734 in 164s = 28.9/s Avg: 3161 Min: 0 Max: 64368 Err: 64 (1.35%)\n</pre>\nphp原生 :cpu 稳定在97%左右，QPS 29/s ,响应时间为3.1-3.2S左右, 平均 0%的超时\n\n&nbsp;\n<pre>\nsummary + 272 in 10.5s = 25.9/s Avg: 3225 Min: 2693 Max: 4230 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary + 906 in 30s = 30.2/s Avg: 3313 Min: 3004 Max: 4229 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary = 1178 in 40.5s = 29.1/s Avg: 3293 Min: 2693 Max: 4230 Err: 0 (0.00%)\nsummary + 905 in 30.1s = 30.1/s Avg: 3258 Min: 2731 Max: 3933 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary = 2083 in 71s = 29.5/s Avg: 3278 Min: 2693 Max: 4230 Err: 0 (0.00%)\nsummary + 924 in 30s = 30.9/s Avg: 3251 Min: 2646 Max: 4575 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary = 3007 in 100.5s = 29.9/s Avg: 3270 Min: 2646 Max: 4575 Err: 0 (0.00%)\nsummary + 923 in 30s = 30.8/s Avg: 3257 Min: 2635 Max: 4250 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary = 3930 in 130s = 30.1/s Avg: 3267 Min: 2635 Max: 4575 Err: 0 (0.00%)\n</pre>\n&nbsp;\n\n<h2>第二步 ，excel 100行 ， 100线程下压测</h2>\n\n1. Swoole:cpu 稳定在97%左右, QPS 为25/s , 响应时间，为3.4-4.1S左右, 平均 2.8%的超时\n<pre>\nsummary = 976 in 43.1s = 22.7/s Avg: 3340 Min: 2 Max: 5409 Err: 0 (0.00%)\nsummary + 760 in 30.1s = 25.3/s Avg: 2704 Min: 0 Max: 64820 Err: 12 (1.58%) Active: 100 Started: 100 Finished: 0\nsummary = 1736 in 73.1s = 23.7/s Avg: 3062 Min: 0 Max: 64820 Err: 12 (0.69%)\nsummary + 760 in 30s = 25.4/s Avg: 4259 Min: 0 Max: 65179 Err: 33 (4.34%) Active: 100 Started: 100 Finished: 0\nsummary = 2496 in 103s = 24.2/s Avg: 3426 Min: 0 Max: 65179 Err: 45 (1.80%)\nsummary + 768 in 30s = 25.6/s Avg: 3571 Min: 0 Max: 62734 Err: 26 (3.39%) Active: 100 Started: 100 Finished: 0\nsummary = 3264 in 133s = 24.5/s Avg: 3460 Min: 0 Max: 65179 Err: 71 (2.18%)\nsummary + 762 in 30s = 25.4/s Avg: 3924 Min: 0 Max: 62463 Err: 32 (4.20%) Active: 100 Started: 100 Finished: 0\nsummary = 4026 in 163s = 24.7/s Avg: 3548 Min: 0 Max: 65179 Err: 103 (2.56%)\nsummary + 769 in 30s = 25.6/s Avg: 4131 Min: 0 Max: 62634 Err: 33 (4.29%) Active: 100 Started: 100 Finished: 0\nsummary = 4795 in 193s = 24.8/s Avg: 3641 Min: 0 Max: 65179 Err: 136 (2.84%)\n</pre>\n2. php原生 : 平均稳定在96%，QPS为28/s, 响应时间为3.4S,超时为0%。\n<pre>\nsummary + 1 in 2.2s = 0.5/s Avg: 1898 Min: 1898 Max: 1898 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary + 780 in 28s = 28.3/s Avg: 3458 Min: 1965 Max: 4824 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary = 781 in 30s = 26.2/s Avg: 3456 Min: 1898 Max: 4824 Err: 0 (0.00%)\nsummary + 851 in 29.3s = 29.0/s Avg: 3478 Min: 3140 Max: 4707 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary = 1632 in 59.1s = 27.6/s Avg: 3468 Min: 1898 Max: 4824 Err: 0 (0.00%)\nsummary + 860 in 30s = 28.8/s Avg: 3474 Min: 3104 Max: 4753 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary = 2492 in 89s = 28.0/s Avg: 3470 Min: 1898 Max: 4824 Err: 0 (0.00%)\nsummary + 869 in 30s = 29.0/s Avg: 3464 Min: 3135 Max: 5078 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary = 3361 in 119s = 28.2/s Avg: 3468 Min: 1898 Max: 5078 Err: 0 (0.00%)\n</pre>\n\n3.php7 swoole 表现：cpu 消耗 40%左右，某一个cpu稳定在96%左右，\n\n<pre>\nsummary +    255 in     9s =   29.6/s Avg:  2534 Min:   400 Max:  3368 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary +    920 in    30s =   30.7/s Avg:  3273 Min:  2867 Max:  3634 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary =   1175 in    39s =   30.5/s Avg:  3112 Min:   400 Max:  3634 Err:     0 (0.00%)\nsummary +    928 in    30s =   30.9/s Avg:  3208 Min:  2784 Max:  3690 Err:     0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary =   2103 in    69s =   30.7/s Avg:  3155 Min:   400 Max:  3690 Err:     0 (0.00%)\n</pre>\n<h2>第三步 ，excel 500行 ， 100线程下压测</h2>\n\nSwoole:cpu 稳定在97%左右，QPS 为16/s, 响应时间，前期为4S左右，后期5-6S左右,共发送请求3074个，超时119个，  平均 3.8%的超时\n\n&nbsp;\n<pre>\nsummary = 458 in 28s = 16.4/s Avg: 4353 Min: 2 Max: 7162 Err: 0 (0.00%)\nsummary + 497 in 30.2s = 16.5/s Avg: 3647 Min: 2 Max: 7369 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary = 955 in 58.1s = 16.4/s Avg: 3985 Min: 2 Max: 7369 Err: 0 (0.00%)\nsummary + 505 in 30s = 17.0/s Avg: 5989 Min: 0 Max: 65247 Err: 29 (5.74%) Active: 100 Started: 100 Finished: 0\nsummary = 1460 in 88s = 16.6/s Avg: 4678 Min: 0 Max: 65247 Err: 29 (1.99%)\nsummary + 503 in 30s = 16.8/s Avg: 6016 Min: 0 Max: 65109 Err: 30 (5.96%) Active: 100 Started: 100 Finished: 0\n</pre>\nphp原生 : 平均稳定在96%，QPS 为20/s， 响应时间为4.5S,超时为0%。\n<pre>\nsummary + 495 in 25.4s = 19.5/s Avg: 4500 Min: 2497 Max: 6831 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary + 670 in 30s = 22.5/s Avg: 4542 Min: 3041 Max: 6182 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary = 1165 in 55.2s = 21.1/s Avg: 4524 Min: 2497 Max: 6831 Err: 0 (0.00%)\nsummary + 653 in 30s = 21.8/s Avg: 4488 Min: 3339 Max: 6288 Err: 0 (0.00%) Active: 100 Started: 100 Finished: 0\nsummary = 1818 in 85.2s = 21.3/s Avg: 4511 Min: 2497 Max: 6831 Err: 0 (0.00%)\n</pre>\n&nbsp;\ngolang 的压测结果，cpu在20%左右，qps 220/s，左右，响应1100ms,瓶颈在于数据库插入速度，\n\n<pre>\nsummary +   5520 in    25s =  220.7/s Avg:  1119 Min:   524 Max:  1501 Err:     0 (0.00%) Active: 250 Started: 250 Finished: 0\nsummary =   5521 in    26s =  213.0/s Avg:  1119 Min:   524 Max:  1501 Err:     0 (0.00%)\nsummary +   6675 in    30s =  222.5/s Avg:  1123 Min:   860 Max:  1411 Err:     0 (0.00%) Active: 250 Started: 250 Finished: 0\nsummary =  12196 in    56s =  218.1/s Avg:  1121 Min:   524 Max:  1501 Err:     0 (0.00%)\n</pre>\n\n第四步 ，excel 500行 ， 3线程下压测 ，\n\nswoole : CPU负载 不超过0.5%, 前期响应400ms, 后期12342ms也有，请求608次，21次超时 很不稳定\n<pre>\nsummary +     96 in    14s =    6.8/s Avg:   418 Min:   320 Max:   540 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\nsummary +    109 in  60.1s =    1.8/s Avg:   995 Min:   359 Max: 60030 Err:     1 (0.92%) Active: 3 Started: 3 Finished: 0\nsummary =    205 in  74.1s =    2.8/s Avg:   724 Min:   320 Max: 60030 Err:     1 (0.49%)\nsummary +     28 in    30s =    0.9/s Avg:  4740 Min:   350 Max: 60016 Err:     2 (7.14%) Active: 3 Started: 3 Finished: 0\nsummary =    233 in   104s =    2.2/s Avg:  1207 Min:   320 Max: 60030 Err:     3 (1.29%)\nsummary +     90 in    30s =    3.0/s Avg:   480 Min:   346 Max:   614 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\nsummary =    323 in   134s =    2.4/s Avg:  1004 Min:   320 Max: 60030 Err:     3 (0.93%)\nsummary +     29 in  61.2s =    0.5/s Avg:  6615 Min:   329 Max: 60043 Err:     3 (10.34%) Active: 3 Started: 3 Finished: 0\nsummary =    352 in   195s =    1.8/s Avg:  1467 Min:   320 Max: 60043 Err:     6 (1.70%)\n</pre>\n\nphp 原生：CPU负载不超过0.5%，响应 423毫秒很稳定， 没有超时\n\n<pre>\nsummary +    105 in  15.4s =    6.8/s Avg:   424 Min:   345 Max:   561 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\nsummary +    213 in  30.2s =    7.1/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\nsummary =    318 in    46s =    7.0/s Avg:   423 Min:   326 Max:   668 Err:     0 (0.00%)\nsummary +    211 in    30s =    7.1/s Avg:   425 Min:   332 Max:   729 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\nsummary =    529 in  75.5s =    7.0/s Avg:   424 Min:   326 Max:   729 Err:     0 (0.00%)\nsummary +    215 in  30.1s =    7.1/s Avg:   419 Min:   337 Max:   656 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\nsummary =    744 in   106s =    7.0/s Avg:   423 Min:   326 Max:   729 Err:     0 (0.00%)\n</pre>\n\nphp7在swoole 下的表现：平均响应时间为230ms 左右，没有超时，很稳定,八核 cpu 消耗 一个cpu 95%,两个20%，其他10%左右。\n\n<pre>\nsummary =   1704 in   134s =   12.7/s Avg:   235 Min:   177 Max:  1294 Err:     0 (0.00%)\nsummary +    410 in    30s =   13.6/s Avg:   219 Min:   192 Max:   490 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\nsummary =   2114 in   164s =   12.9/s Avg:   232 Min:   177 Max:  1294 Err:     0 (0.00%)\nsummary +    431 in    30s =   14.4/s Avg:   208 Min:   189 Max:   370 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\nsummary =   2545 in   194s =   13.1/s Avg:   228 Min:   177 Max:  1294 Err:     0 (0.00%)\nsummary +    422 in    30s =   14.1/s Avg:   213 Min:   188 Max:   416 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\nsummary =   2967 in   224s =   13.2/s Avg:   226 Min:   177 Max:  1294 Err:     0 (0.00%)\nsummary +    426 in    30s =   14.2/s Avg:   210 Min:   190 Max:   327 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\nsummary =   3393 in   254s =   13.4/s Avg:   224 Min:   177 Max:  1294 Err:     0 (0.00%)\n</pre>\n\n\n\nphp7在原生的表现：平均响应时间为300左右，没有超时，很稳定,8核cpu 一个在80%，其他四个在15%左右波动，其他为0%。\n<pre>\nsummary +    213 in    23s =    9.4/s Avg:   311 Min:   247 Max:   685 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\nsummary +    306 in    30s =   10.2/s Avg:   294 Min:   240 Max:   448 Err:     0 (0.00%) Active: 3 Started: 3 Finished: 0\nsummary =    519 in    53s =    9.8/s Avg:   301 Min:   240 Max:   685 Err:     0 (0.00%)\n</pre>\n\n<h2>php7 极限 </h2>\nphp7 原生 ，excel 500行 ，极限 是 43并发，响应6S左右，cpu普遍达到96%，并出现相当的超时。\n<pre>\nsummary +    607 in  15.5s =   39.2/s Avg:  4099 Min:   877 Max: 11613 Err:     7 (1.15%) Active: 300 Started: 300 Finished: 0\nsummary +   1293 in    30s =   43.2/s Avg:  5237 Min:  3302 Max: 35598 Err:    33 (2.55%) Active: 300 Started: 300 Finished: 0\nsummary =   1900 in  45.4s =   41.8/s Avg:  4874 Min:   877 Max: 35598 Err:    40 (2.11%)\nsummary +   1353 in  30.2s =   44.8/s Avg:  8237 Min:  3309 Max: 63005 Err:    90 (6.65%) Active: 300 Started: 300 Finished: 0\nsummary =   3253 in    76s =   43.0/s Avg:  6272 Min:   877 Max: 63005 Err:   130 (4.00%)\n</pre>\nphp7 原生 swoole excel 500行 ，极限是37/s，响应7.3s 很稳定没有出现超时，cpu 达到上限。\n<pre>\nsummary +    651 in    19s =   34.9/s Avg:  6306 Min:  2548 Max: 14280 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\nsummary +   1109 in    30s =   37.0/s Avg:  7973 Min:  2449 Max: 23094 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\nsummary =   1760 in    49s =   36.2/s Avg:  7356 Min:  2449 Max: 23094 Err:     0 (0.00%)\nsummary +   1159 in    30s =   38.6/s Avg:  7784 Min:  2584 Max: 24136 Err:     0 (0.00%) Active: 300 Started: 300 Finished: 0\nsummary =   2919 in    79s =   37.1/s Avg:  7526 Min:  2449 Max: 24136 Err:     0 (0.00%)\n</pre>','php 原生，swoole, golang 针对上传excel性能对比','','inherit','open','open','','579-autosave-v1','','','2016-06-13 12:44:07','2016-06-13 12:44:07','',579,'http://unasm.com/2016/06/614/',0,'revision','',0),(619,1,'2016-09-08 14:31:52','0000-00-00 00:00:00','supervisord 配置怎么写的，就不说了，网上一搜一大堆，\n<p class=\"p1\"><span class=\"s1\">1. [supervisord] 和 </span>[program:theprogramname] 中 user 最好指定一个，否则就默认是以执行用户的权限来运行，如果执行用户权限是root 会有</p>\n<p class=\"p1\"><span class=\"s1\">CRIT Supervisor running as root (no user in config file)  但是如果 设置 user 为root，又会有： </span>CRIT Set uid to user 0的错，so,切切记住，要降权，运行用户或者user配置一定要有一个小于root的</p>\n<p class=\"p1\">2.</p>','supervisord 使用遇到的坑','','draft','open','open','','','','','2016-09-08 14:31:52','2016-09-08 14:31:52','',0,'http://unasm.com/?p=619',0,'post','',0),(620,1,'2016-09-09 13:22:28','2016-09-09 13:22:28','网上关于 expect 的脚本很多很多，但是 没有搜到一个关于 如何读取数组的，研究了好久，终于连蒙带猜的搞出来了，这个脚本，能够在不需要跟 shell交互的情况下，分发脚本\r\n<pre>\r\n#!/usr/bin/expect -f\r\nset password 123456\r\nset ipArr {\"100.109.100.188\" \"100.109.100.187\" \"100.105.30.186\" \"100.105.30.187\" \"100.105.30.188\"}\r\nset len [llength $ipArr]\r\nfor {set i 0} {$i &lt; $len} {incr i} {\r\nset ip \"[lindex $ipArr $i]\"\r\nspawn scp -r /root/directory root@$ip:/data/www/\r\nexpect \"root@$ip\'s password:\"\r\nsend \"$password\\r\"\r\nset timeout 300\r\nsend \"exit\\r\"\r\nexpect eof\r\n}\r\n</pre>\r\n\r\n下面的 是 shell 与expect 交互的一段 代码，目前是为了解决 expect 无法与本地交互的问题，\r\n\r\n<pre>\r\n#!/bin/bash\r\n\r\nipArr=(\"10.109.100.18\")\r\nwhile true\r\ndo\r\necho -n \"请您老人家输入要执行的命令: \"\r\nread cmd\r\nif [ $cmd ]\r\nthen\r\necho \"开始执行命令 : $cmd \"\r\nbreak\r\nfi\r\ndone\r\n\r\n#首先本地执行一次，expect的缺点在于无法与本地交互\r\n\r\neval $cmd\r\n\r\npassword=\"l8vwd\"\r\n# 跟远程交互，\r\nfor ip in ${ipArr[@]}\r\ndo\r\nexpect &lt;&lt;EOF\r\nspawn ssh root@$ip $cmd\r\nexpect {\r\n\"root@$ip\'s password:\" {\r\nsend \"$password\\r\"\r\n}\r\n}\r\nset timeout 300\r\nsend \"exit\"\r\nexpect eof\r\nEOF\r\n# EOF 一定要挨着行开始,否则会有语法错误\r\necho \"\"\r\n\r\ndone\r\n</pre>','expect 数组的使用 及 expect shell  交互','','publish','open','open','','expect-%e5%90%8c%e6%ad%a5-%e6%95%b0%e6%8d%ae-%e8%84%9a%e6%9c%ac','','','2016-09-23 08:17:58','2016-09-23 08:17:58','',0,'http://unasm.com/?p=620',0,'post','',0),(621,1,'2016-09-09 13:22:28','2016-09-09 13:22:28','网上关于 expect 的脚本很多很多，但是 没有搜到一个关于 如何读取数组的，研究了好久，终于连蒙带猜的搞出来了，这个脚本，能够在shell交互的情况下，分发脚本\r\n<pre>set password 123456\r\nset ipArr  {\"100.109.100.188\" \"100.109.100.187\" \"100.105.30.186\" \"100.105.30.187\" \"100.105.30.188\"}\r\nset len [llength $ipArr]\r\nfor {set i 0} {$i &lt; $len} {incr i} {\r\n    set ip \"[lindex $ipArr $i]\"\r\n    spawn scp -r /root/directory root@$ip:/data/www/\r\n    expect \"root@$ip\'s password:\"\r\n    send \"$password\\r\"\r\n    set timeout 300\r\n    send \"exit\\r\"\r\n    expect eof\r\n}  \r\n\r\n</pre>','expect 同步 数据  脚本','','inherit','open','open','','620-revision-v1','','','2016-09-09 13:22:28','2016-09-09 13:22:28','',620,'http://unasm.com/2016/09/621/',0,'revision','',0),(624,1,'2016-09-18 12:52:35','2016-09-18 12:52:35','代码规范：\r\n\r\n1.尽量使用抛异常的方式，尽量不用go的，或者自定义的返回错误的方式\r\n\r\n异常的方式给了错误一种默认处理方式，就是直接中断请求，直接结束，处理错误（展示或者记录日志），而不需要层层传递，如果外界需要特殊处理，或者某函数异常不影响请求流， 可以在外层try catch，屏蔽错误。\r\n\r\n2. 尽量使用静态方法，减少new 的数量，将代码 主要 用来处理逻辑上，而非各种语言的语法上，\r\n\r\n3，错误 集中处理\r\n\r\n4. 日志 尽量记录 完整的上下文，能够复现当时的场景 ，\r\n\r\n一 . 更新数据库的日志至少需要记录四项 where条件，原来的数据，新的数据，更新的数据库返回值。\r\n\r\n二 . 异常日志要记录 输入数据，错误代码行号，错误原因，最好记录调用栈。\r\n\r\n5. 错误码尽可能 整个系统唯一，方便迅速定位错误。\r\n\r\n6. 尽量避免if 的层层嵌套，遇到错误 直接返回或者处理，避免过长的代码段之间，互相牵扯\r\n\r\n7. 多表更新或者 删除，多个sql语句，加上事务和回滚。\r\n\r\n8. 代码不要太长，尽量独立成不同的func，方便cr和维护','编程规范','','inherit','open','open','','623-revision-v1','','','2016-09-18 12:52:35','2016-09-18 12:52:35','',623,'http://unasm.com/2016/09/624/',0,'revision','',0),(625,1,'2016-09-18 14:29:19','2016-09-18 14:29:19','代码规范：\r\n\r\n1.尽量使用抛异常的方式，尽量不用go的，或者自定义的返回错误的方式\r\n\r\n异常的方式给了错误一种默认处理方式，就是直接中断请求，直接结束，处理错误（展示或者记录日志），而不需要层层传递，如果外界需要特殊处理，或者某函数异常不影响请求流， 可以在外层try catch，屏蔽错误。\r\n\r\n2. 尽量使用静态方法，减少new 的数量，将代码 主要 用来处理逻辑上，而非各种语言的语法上，\r\n\r\n3，异常 集中处理\r\n\r\n4. 日志 尽量记录 完整的上下文，能够复现当时的场景 ，\r\n\r\n一 . 更新数据库的日志至少需要记录四项 where条件，原来的数据，新的数据，更新的数据库返回值。\r\n\r\n二 . 异常日志要记录 输入数据，错误代码行号，错误原因，最好记录调用栈。\r\n\r\n5. 错误码尽可能 整个系统唯一，方便迅速定位错误。\r\n\r\n6. 尽量避免if 的层层嵌套，遇到错误 直接返回或者处理，避免过长的代码段之间，互相牵扯\r\n\r\n7. 多表更新或者 删除，多个sql语句，加上事务和回滚。\r\n\r\n8. 代码不要太长，尽量独立成不同的func，方便cr和维护','编程规范','','inherit','open','open','','623-revision-v1','','','2016-09-18 14:29:19','2016-09-18 14:29:19','',623,'http://unasm.com/2016/09/625/',0,'revision','',0),(654,1,'2017-01-02 19:17:41','2017-01-02 19:17:41','意识到今年马上就要结束的时候，我曾经很愤怒的把这一年归为浪费的一年，什么都没有做。现在想想，这个评价肯定是不够客观的，自己的确没有达到自己期望的一些东西，但是还是有所收获的。\r\n\r\n前半年 可以用暗无天日来形容吧，一眨眼，什么都没有想，混天黑地里日子就过去了。差不多全部的精力 时间 都投入到了企业版，哪怕略微有些时间，也是用来看 《高性能mysql》了，每天醒来去上班，沟通，处理bug，写代码， 测试， 评需求， 推进事情，讨论方案， 上线 等等吧，早上10-11点之间起来，晚上2-3点回家，在公司高度紧张，异常的充实。如果有周末，那就是打球，或者看书 泡咖啡厅，半年，一眨眼就过去了。\r\n\r\n企业版越来越稳定，改进性质的需求也越来越多，我自己也开始考虑要不要做些别的，加上公司一些别的原因，主动或者被动的 交出了企业版的研发。然后我开始有点迷茫，不知道接下来做些什么，我曾想过离开部门做些别的工作，但是一来并没有合适的机会，二来考虑失去的，可能要比得到的更多吧，选择了留下，负责了一段时间的企推的重构和研发，到8-9月份企推趋于稳定，由着一个契机，交出去了。开始负责安全防刷系统，同时开始远离业务密集型的研发工作。\r\n\r\n在负责这些系统的研发的工作的时候，我就在想如果自己不做任何改变的继续做下去，也许会在PHP，或者业务系统研发上，走的比较深，如果系统越来越重要，或者自己带的人越来越多，自己可能会越来越像管理岗，但是一个小小的leader职位很重要么？揪着那点若有若无的权利真的有意义么？一个业务系统的研发小组在整个公司真的很需要么？自己已经经历过了，并且做了这么久，如果负责的内容没有进一步变化，继续做下去，有意义么，有乐趣么？\r\n\r\n最初开始讨论安全防刷的时候，我以为需要用lua做一些模块开发，然后因为部门之间的博弈或者分工，或者所谓的架构设计吧，lua的那块并非是我们负责，我选择了使用go作为开发语言，php之外，自己当时最熟悉的语言就是go，真的想给一些无聊的业务开发带来一些乐趣和挑战。而在讨论期间我对lua的准备，则在12月份派上了用场。在这个项目上，还对压测和自动化测试做了一定程度的学习和探索吧。\r\n\r\n安全防刷上线之后，开始 搭建个elk的集群，elk 很早之前就搞了，但是集群化却是新的探索，结果是，花了两周搞了一个集群，却被告知用不着了，呵呵，可能这个时候，我开始觉得，某“架构师”不靠谱了吧。\r\n\r\n不过，在研究es同步mysql 的过程中，发现自己对java太不了解了，但是这个却很重要，而且，接下来要负责红包中心，java项目，所以接下来的挺长时间，则花在java的学习上。虽然负责红包中心是为了做某件事情，一件高层脑残的拍板，不过，还是给了自己研究java的时间，截止到“补发现金红包”这个事情的处理完毕，我觉得自己对java spring的学习已经入门了。\r\n\r\n之后并且到现在，都是在讨论或者设计 资源中心，从开始到现在 自己都是消极怠工的状态，如果我能看到这个事情的意义，可能早就进入了执行阶段了吧，只是我认为它毫无意义，却不能告诉别人我无所事事，so.我只能消极怠工，看起来好像很忙的样子。这个项目由某“架构师” 提出，却由别的工程师讨论实现，功能以及意义，却得到上层的大力支持， that is strange。\r\n\r\n而与此同时，我与另一个工程师配合开发一套基于ng lua的抽样系统，C模块作为server端，进展很快，两个星期吧，差不多就搞完了,这个也算我给公司做的贡献吧，却不能记在账面上。\r\n\r\n最近在研究机器学习和数学，我本来只是想做点小东西的，然后发现自己面对数据一筹莫展，然后想做点数据分析和自动化聚类的，然后开始看机器学习，然后开始看金融市场，然后.....本来只是一个知识点的模糊， 然后不小心就掉入了学习的栈里面。\r\n\r\n工作的事情，差不多就是这样，整体来说，前半年在管理和系统开发上积累了一些经验，踩了一些坑，思想上和系统设计上取得了一定的进步，后半年开始有时间在技术上进行探索，负责的东西也很多，完成了java，golang，php，lua的入门，很大的丰富了自己的技能栈，大概这些就足以应对所有的后端研发了吧。\r\n\r\n投资的话，尤其是在11月之后，开始研究房子和房地产，准备买一个房子，但是面对这么一个重大的决定，按照自己的习惯，肯定是要先成为半个专家的，然后再决定。永远要记住自己决策的原因，做一个聪明的人。然后把相当的时间，投入到了各个城市的数据对比，历年的数据参考，影响房价的各个因素衡量，政策的变化，然后再实地考察，跟中介打交道，顺便还研究了所谓的凯恩斯主义，总之后面的时间很大程度上，花在这个上面了。\r\n\r\n然后以某个时间点来看，对今年的炒股成绩表示满意，明年加强学习，加大资金量，加强对研报的跟踪， 恩，现在已经亏的输掉了裤子。\r\n\r\n\r\n\r\n差不多今年就是这样子吧，谈不上成功，但是也是做了一些事情，希望明年，无论如何选择，希望能有一些更标志性的事情，让自己觉得，没有白白浪费度过。','2016的年终总结','','private','open','open','','2016%e7%9a%84%e5%b9%b4%e7%bb%88%e6%80%bb%e7%bb%93','','','2017-04-14 02:01:44','2017-04-14 02:01:44','',0,'http://unasm.com/?p=654',0,'post','',0),(627,1,'2016-09-23 08:17:47','2016-09-23 08:17:47','网上关于 expect 的脚本很多很多，但是 没有搜到一个关于 如何读取数组的，研究了好久，终于连蒙带猜的搞出来了，这个脚本，能够在不需要跟 shell交互的情况下，分发脚本\n<pre>\n#!/usr/bin/expect -f\nset password 123456\nset ipArr {\"100.109.100.188\" \"100.109.100.187\" \"100.105.30.186\" \"100.105.30.187\" \"100.105.30.188\"}\nset len [llength $ipArr]\nfor {set i 0} {$i &lt; $len} {incr i} {\nset ip \"[lindex $ipArr $i]\"\nspawn scp -r /root/directory root@$ip:/data/www/\nexpect \"root@$ip\'s password:\"\nsend \"$password\\r\"\nset timeout 300\nsend \"exit\\r\"\nexpect eof\n}\n</pre>\n\n下面的 是 shell 与expect 交互的一段 代码，目前是为了解决 expect 无法与本地交互的问题，\n\n<pre>\n#!/bin/bash\n\nipArr=(\"10.109.100.18\")\nwhile true\ndo\necho -n \"请您老人家输入要执行的命令: \"\nread cmd\nif [ $cmd ]\nthen\necho \"开始执行命令 : $cmd \"\nbreak\nfi\ndone\n\n#首先本地执行一次，expect的缺点在于无法与本地交互\n\neval $cmd\n\npassword=\"l8vwd\"\n# 跟远程交互，\nfor ip in ${ipArr[@]}\ndo\nexpect &lt;&lt;EOF\nspawn ssh root@$ip $cmd\nexpect {\n\"root@$ip\'s password:\" {\nsend \"$password\\r\"\n}\n}\nset timeout 300\nsend \"exit\"\nexpect eof\nEOF\n# EOF 一定要挨着行开始,否则会有语法错误\necho \"\"\n\ndone','expect 数组的使用 及 expect shell  交互','','inherit','open','open','','620-autosave-v1','','','2016-09-23 08:17:47','2016-09-23 08:17:47','',620,'http://unasm.com/2016/09/627/',0,'revision','',0),(628,1,'2016-09-23 08:15:50','2016-09-23 08:15:50','网上关于 expect 的脚本很多很多，但是 没有搜到一个关于 如何读取数组的，研究了好久，终于连蒙带猜的搞出来了，这个脚本，能够在不需要跟 shell交互的情况下，分发脚本\r\n\r\n#!/usr/bin/expect -f\r\nset password 123456\r\nset ipArr {\"100.109.100.188\" \"100.109.100.187\" \"100.105.30.186\" \"100.105.30.187\" \"100.105.30.188\"}\r\nset len [llength $ipArr]\r\nfor {set i 0} {$i &lt; $len} {incr i} {\r\nset ip \"[lindex $ipArr $i]\"\r\nspawn scp -r /root/directory root@$ip:/data/www/\r\nexpect \"root@$ip\'s password:\"\r\nsend \"$password\\r\"\r\nset timeout 300\r\nsend \"exit\\r\"\r\nexpect eof\r\n}\r\n\r\n\r\n下面的 是 shell 与expect 交互的一段 代码，目前是为了解决 expect 无法与本地交互的问题，\r\n\r\n#!/bin/bash\r\n\r\nipArr=(\"10.109.100.18\")\r\nwhile true \r\ndo\r\n    echo  -n \"请您老人家输入要执行的命令: \"                                              \r\n    read cmd   \r\n    if [ $cmd ]\r\n        then                                                                             \r\n        echo  \"开始执行命令 : $cmd \"                                                     \r\n            break \r\n    fi\r\ndone\r\n    \r\n#首先本地执行一次，expect的缺点在于无法与本地交互                                        \r\n    \r\neval $cmd\r\n    \r\n\r\npassword=\"l8vwd\"\r\n# 跟远程交互，\r\nfor ip in ${ipArr[@]}\r\ndo\r\n     expect <<EOF\r\n            spawn ssh root@$ip $cmd\r\n            expect  {\r\n                \"root@$ip\'s password:\" {\r\n                    send \"$password\\r\"\r\n                }\r\n            }\r\n            set timeout 300\r\n            send \"exit\"\r\n            expect eof   \r\nEOF\r\n# EOF 一定要挨着行开始,否则会有语法错误\r\necho \"\"\r\n\r\ndone\r\n','expect 同步 数据  脚本','','inherit','open','open','','620-revision-v1','','','2016-09-23 08:15:50','2016-09-23 08:15:50','',620,'http://unasm.com/2016/09/628/',0,'revision','',0),(630,1,'2016-09-23 08:17:58','2016-09-23 08:17:58','网上关于 expect 的脚本很多很多，但是 没有搜到一个关于 如何读取数组的，研究了好久，终于连蒙带猜的搞出来了，这个脚本，能够在不需要跟 shell交互的情况下，分发脚本\r\n<pre>\r\n#!/usr/bin/expect -f\r\nset password 123456\r\nset ipArr {\"100.109.100.188\" \"100.109.100.187\" \"100.105.30.186\" \"100.105.30.187\" \"100.105.30.188\"}\r\nset len [llength $ipArr]\r\nfor {set i 0} {$i &lt; $len} {incr i} {\r\nset ip \"[lindex $ipArr $i]\"\r\nspawn scp -r /root/directory root@$ip:/data/www/\r\nexpect \"root@$ip\'s password:\"\r\nsend \"$password\\r\"\r\nset timeout 300\r\nsend \"exit\\r\"\r\nexpect eof\r\n}\r\n</pre>\r\n\r\n下面的 是 shell 与expect 交互的一段 代码，目前是为了解决 expect 无法与本地交互的问题，\r\n\r\n<pre>\r\n#!/bin/bash\r\n\r\nipArr=(\"10.109.100.18\")\r\nwhile true\r\ndo\r\necho -n \"请您老人家输入要执行的命令: \"\r\nread cmd\r\nif [ $cmd ]\r\nthen\r\necho \"开始执行命令 : $cmd \"\r\nbreak\r\nfi\r\ndone\r\n\r\n#首先本地执行一次，expect的缺点在于无法与本地交互\r\n\r\neval $cmd\r\n\r\npassword=\"l8vwd\"\r\n# 跟远程交互，\r\nfor ip in ${ipArr[@]}\r\ndo\r\nexpect &lt;&lt;EOF\r\nspawn ssh root@$ip $cmd\r\nexpect {\r\n\"root@$ip\'s password:\" {\r\nsend \"$password\\r\"\r\n}\r\n}\r\nset timeout 300\r\nsend \"exit\"\r\nexpect eof\r\nEOF\r\n# EOF 一定要挨着行开始,否则会有语法错误\r\necho \"\"\r\n\r\ndone\r\n</pre>','expect 数组的使用 及 expect shell  交互','','inherit','open','open','','620-revision-v1','','','2016-09-23 08:17:58','2016-09-23 08:17:58','',620,'http://unasm.com/2016/09/630/',0,'revision','',0),(629,1,'2016-09-23 08:16:46','2016-09-23 08:16:46','网上关于 expect 的脚本很多很多，但是 没有搜到一个关于 如何读取数组的，研究了好久，终于连蒙带猜的搞出来了，这个脚本，能够在不需要跟 shell交互的情况下，分发脚本\r\n\r\n#!/usr/bin/expect -f\r\nset password 123456\r\nset ipArr {\"100.109.100.188\" \"100.109.100.187\" \"100.105.30.186\" \"100.105.30.187\" \"100.105.30.188\"}\r\nset len [llength $ipArr]\r\nfor {set i 0} {$i &lt; $len} {incr i} {\r\nset ip \"[lindex $ipArr $i]\"\r\nspawn scp -r /root/directory root@$ip:/data/www/\r\nexpect \"root@$ip\'s password:\"\r\nsend \"$password\\r\"\r\nset timeout 300\r\nsend \"exit\\r\"\r\nexpect eof\r\n}\r\n\r\n\r\n下面的 是 shell 与expect 交互的一段 代码，目前是为了解决 expect 无法与本地交互的问题，\r\n\r\n#!/bin/bash\r\n\r\nipArr=(\"10.109.100.18\")\r\nwhile true \r\ndo\r\n    echo  -n \"请您老人家输入要执行的命令: \"                                              \r\n    read cmd   \r\n    if [ $cmd ]\r\n        then                                                                             \r\n        echo  \"开始执行命令 : $cmd \"                                                     \r\n            break \r\n    fi\r\ndone\r\n    \r\n#首先本地执行一次，expect的缺点在于无法与本地交互                                        \r\n    \r\neval $cmd\r\n    \r\n\r\npassword=\"l8vwd\"\r\n# 跟远程交互，\r\nfor ip in ${ipArr[@]}\r\ndo\r\n     expect <<EOF\r\n            spawn ssh root@$ip $cmd\r\n            expect  {\r\n                \"root@$ip\'s password:\" {\r\n                    send \"$password\\r\"\r\n                }\r\n            }\r\n            set timeout 300\r\n            send \"exit\"\r\n            expect eof   \r\nEOF\r\n# EOF 一定要挨着行开始,否则会有语法错误\r\necho \"\"\r\n\r\ndone\r\n','expect 数组的使用 及 expect shell  交互','','inherit','open','open','','620-revision-v1','','','2016-09-23 08:16:46','2016-09-23 08:16:46','',620,'http://unasm.com/2016/09/629/',0,'revision','',0),(631,1,'2016-09-23 18:55:08','2016-09-23 18:55:08','下面是我对怎么样 写代码才能够 降低系统的复杂性，增加可读性的一些思考和建议，凡事不可绝对，存在即合理，所以我会用一些，尽量或者尽可能等词汇等，表明大部分情况下遵循这些建议应该是比较优的。\n\n代码规范：\n\n1.尽量使用抛异常的方式，返回错误码的方式，或者自定义的返回错误的方式\n\n如果 调用函数的时候，函数内部发生了错误，上层如何知道内部发生了错误，发生了哪种错误？ 以前尝试过调用函数的时候，函数返回 [errno =&gt; 2011021 , errmsg =&gt; \'连接数据库超时\', data =&gt; [] ]这种格式的数据，如果errno 为0的时候代表正常，需要的数据在data中，否则错误原因和错误类型可以根据 errno, errmsg 确定。\n\n比如\n\n$data = getChannelList($id);\nif ($data[\'errno\'] !== 0 ) {\n\n}\n\n但是这样做的坏处是 整个代码里面，充满了errno的判断。而这些判断，就经验而论，更多的是一层层的传递给上层，直到最后返回给用户。\n\n异常的方式给了错误一种默认处理方式，就是<strong>直接中断请求，直接结束，处理错误</strong>（展示或者记录日志），而不需要层层传递，简单粗暴，但是非常适合web开发，Web开发的每个请求处理，一般如流一般，层层检查处理，直到最后保存数据或者返回数据，中间有错误，如果有错误，告知用户错误原因，所以这种情况下，抛异常的中断的方式非常适合， 如果外界需要特殊处理异常，或者某函数异常不影响请求流， 可以在外层try catch，屏蔽错误。\n\n2. function 内部 尽量 避免使用this，尽量避免 new 对象。\n\n   编程就应该就像堆积木一样简单，如果一个func ,其参数就是全部输入，return 的值就是全部的返回值，那花括号包裹的代码块就是一个整体，就是一块积木。\n当阅读到这个func的时候，拿到了全部的传入参数，一行行走下去，总是能够理解这个func的作用的, 而不需要回溯到某个上层，看某个this-&gt;属性 是如何设置的，对此时的func的行为有着怎样的影响。\n比如下面的Class Excel , 调用的时候先new 一个 对象初始化Data，然后中间经过一些逻辑，然后开始调用某功能函数A，当读到$this-&gt;data的时候，第一件事情，是不是先想下，$this-&gt;data 存储的值是什么？什么时间存储的，中间有没有调用setData,调用了几次， 哪里调用的，影响有多大？为了明确这些可能的疑问而回溯到上层代码，就增加了系统的复杂性。换言之， formatMultiRegions 与 __construct 以及 setData 交叠在一起，共同完成了 一件事情，而交叠的部分，可能与其他的逻辑也是混杂在一起，增加理解成本。\n所以如果按照我建议的话，此处应该 改成 Excel_Better, 需要用到功能函数formatMultiRegions的时候， 传入参数Data，整个formatMultiRegions 的行为 就仅仅与data 有关，并不需要关心data经历过怎么样的处理变化,也并不需要回溯到 上层代码才能理解本函数,也就是 formatMultiRegions 就是一块被此时此刻才被用到的积木。\n调用之前不知道其存在，调用之后不必在意其存在过，如流水一般，流过了，就不再需要关心，只是想要的数据向下传递。\n\n反面栗子：\n<pre>\nnamespace app\\models; \nuse Yii; \nclass Excel \n{     \n    protected $data = null;     \n    //初始化Excel对象     \n    public function __construct(Array &$data)     {           \n         $this--->phpExcel = new \\PHPExcel();\n        $this-&gt;data = $data;\n    }   \n    //某功能函数A\n    public function formatMultiRegions()\n    {   \n        $data = $this-&gt;data;\n        if ($data) { \n  \n        }\n        $mark = array_values(array_splice($data, 0, 1));\n        return $mark;\n    }   \n    //某功能函数B\n    public function formatPie()\n    {   \n        $data = $this-&gt;data;\n        foreach ($data as $region=&gt;$list) {\n\n        }   \n        return [$lines];\n    }  \n    // 修改data值\n    private function setData($data)\n    {   \n        $this-&gt;data = $data;\n    }   \n}\n</pre>\n\n推荐 demo :\n<pre>\nnamespace app\\models; \nuse Yii; \nclass Excel_Better\n{     \n     //某功能函数A     \n    public static function formatMultiRegions($data)     \n    {            \n       if ($data) {            \n       }         \n       $mark = array_values(array_splice($data, 0, 1));         \n       return $mark;     \n    }        \n    //某功能函数B     \n    public static function formatPie($data)     \n    {            \n        foreach ($data as $region=-->$list){\n\n        }   \n        return [$lines];\n    }  \n}\n</pre>\n\n3，异常 集中处理\n\n   换言之，如果捕获到了异常，打算怎么办呢？如果没有特殊需求，不如不处理，在项目的某一处函数几种处理异常，根据不同的异常类型，根据不同的环境，选择不同的展示方式。\n   但是有些情况，比如超时重连，或者 异步通知重试等有特殊处理的需求的时候，建议捕获异常，并酌情处理。\n\n4. 日志 尽量记录 完整的上下文，能够复现当时的场景 ，\n\n    一 . 更新数据库的日志至少需要记录四项 where条件，原来的数据，新的数据，更新的数据库返回值。\n\n    二 . 异常日志要记录 输入数据，错误代码行号，错误文件，错误原因，最好记录调用栈。、\n   \n    三 . 对于一个记录用户请求的 日志来说，应该记录下，POST，GET 参数，用户的uid(如果有)，处理该请求的机器，以及系统的返回值\n\n\n5. 尽量避免if 的层层嵌套，遇到错误 直接返回或者处理，避免过长的代码段之间，互相牵扯\n\n反面demo :\n<pre>           \n            if(!empty($id)) {\n                $data = Channel::findIdentity($id);\n                if(!empty($data)) {\n                    $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \n                    if ($result) {\n                        $logData = [\n                            \'user_id\' =&gt; $user_id,\n                            \'to_user_id\' =&gt; $data[\'user_id\'],\n                            \'create_time\' =&gt; time(),\n                            \'status\' =&gt; OperatLog::STATUS_DEL,\n                            \'reason\' =&gt; $delReason,\n                            \'type\' =&gt; OperatLog::TYPE_CHANNEL,\n                            \'old_data\' =&gt; json_encode($data),\n                        ];   \n                        OperatLog::addInfo($logData);\n                        return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\n                    }    \n                    return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\n                }    \n                return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\n            }    \n            return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\n</pre>\n这个 其实是一个还能接受的代码段，某种意义上，还有点美感， 但是如果if 包裹的代码段 超过一屏， 则理解成本就会变得难以接受。\n当我们看到一个if的时候， 我们需要 知道if 的 判断条件，开始和结束，是否有else 等，当我们看到 第二个 if 的时候，我们需要 知道 被第一个 通过的情况下进入的，然后同样需要 了解 if 的开始 结束等，然后第三个， 当我们读完第三个 if 退出的时候，需要了解第二个是否有else ， if/else 块 之后又 是什么，当前段代码是在第几个if块 之后，等等。总之if的嵌套增大了代码的理解成本。\n\n代码应该是 像 积木一样一块块累积起来的，不同的积木之间，应该尽量减少牵扯。\n所以按照我的想法，代码应该写成如下：\n<pre>         if(empty($id)) {\n               return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\n         }\n         $data = Channel::findIdentity($id);\n         if(!empty($data)) {\n             return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\n         }\n  \n         $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \n         if (!$result) {\n             return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\n         }\n \n         $logData = [\n               \'user_id\' =&gt; $user_id,\n               \'to_user_id\' =&gt; $data[\'user_id\'],\n               \'create_time\' =&gt; time(),\n               \'status\' =&gt; OperatLog::STATUS_DEL,\n               \'reason\' =&gt; $delReason,\n               \'type\' =&gt; OperatLog::TYPE_CHANNEL,\n               \'old_data\' =&gt; json_encode($data),\n         ];   \n         OperatLog::addInfo($logData);\n         return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\n     \n</pre>\n\n\n6. 多表更新或者 删除，添加数据，多个sql语句，加上事务和回滚，原因相信无可争议，只是很多人未必注意。\n    虽然一般情况下不加事务也不会出问题，但是有了问题，就要修数据，修数据就可能引出各种问题。\n   个人 比较推崇的一个模板如下，try catch 只有 两个出口，要不一直走到commit，要不在catch里面rollback.\n\n<pre>\n        $trans = Yii::$app->db->beginTransaction();\n        try {\n            $promotionAddData = array(\n                //\'region_manage\' => $region_manage_id,\n                \'update_time\' => time(),\n                \'update_user_id\' => UserService::getUserId(),\n                \'is_deleted\' => 1,\n            );  \n            $isUpdate = PromotionLeader::updateInfo($id, $promotionAddData);\n            if (!$isUpdate) {\n                throw new JdbException(\'更新数据库异常\', 18400177);\n            }   \n            UserAccount::deleteRow($promotionLeaderInfo[\'user_id\']);\n            $trans->commit();\n        } catch (\\Exception $e) {\n            $trans->rollback();\n            throw $e; \n        }   \n        return [\'errno\' => 200, \'errmsg\' => \'推广组长数据操作成功\'];\n</pre>\n\n\n7. 错误码尽可能 整个系统唯一，方便迅速定位错误。\n   \n   当后端与FE通过json数据 交互的时候，一般来说，0或者200代表ok，其他代表错误就能满足需求，所以在需求层面上，错误码的定义无关紧要，所以一些系统返回400，500，这种仿 http的错误码。\n   出于排查错误的目的而言，错误码应该尽可能的唯一，当看到系统返回的内容的时候，大概就清楚这段文本大概是系统那段代码处理返回的。比如上面demo 程序中 18400177 ，这种错误码肯定系统内很难重复，生成规则是当前光标所在的列数 + 400（错误的性质,仿http错误码） + 当前行号，某些ide还可以加上当前文件总行数等，达到一个更加随机的错误码。\n    当然，还有其他的方式，比如在返回值里面，加冗余字段，标明返回数据在系统的位置信息，也可以。\n    这种全随机的方式，缺点在于很难对所有的错误进行一个统计的归类处理。\n\n8. 尽量使用静态方法，减少new的数量。\n   \n   将代码 主要 用来处理逻辑上，而非各种语言的语法上，与效率无关，只是为了代码的可读性，如下面的两个demo，既然new 可以去掉，就尽量减少代码行数，增加可读性，重心在逻辑，而非语法。\n   \n  反面demo：\n<pre>\n  function test() {\n      $modelA = new ModelA;\n      $userId =  $modelA->getInfo($_GET[\'id\']);\n      $modelB = new ModelB;\n      return $modelB->getList($userId);\n  }\n</pre>\n 推荐例程：\n<pre>\n  function test() {\n      $userId =  modelA::getInfo($_GET[\'id\']);\n      return $modelB::getList($userId);\n  }\n</pre>\n','编程规范','','inherit','open','open','','623-autosave-v1','','','2016-09-23 18:55:08','2016-09-23 18:55:08','',623,'http://unasm.com/2016/09/631/',0,'revision','',0),(633,1,'2016-09-23 11:35:00','2016-09-23 11:35:00','代码规范：\r\n\r\n\r\n1.尽量使用抛异常的方式，尽量不用go的，或者自定义的返回错误的方式\r\n\r\n异常的方式给了错误一种默认处理方式，就是直接中断请求，直接结束，处理错误（展示或者记录日志），而不需要层层传递，如果外界需要特殊处理，或者某函数异常不影响请求流， 可以在外层try catch，屏蔽错误。\r\n\r\n2. 尽量使用静态方法，减少new 的数量，将代码 主要 用来处理逻辑上，而非各种语言的语法上，\r\n\r\n3，异常 集中处理\r\n\r\n4. 日志 尽量记录 完整的上下文，能够复现当时的场景 ，\r\n\r\n一 . 更新数据库的日志至少需要记录四项 where条件，原来的数据，新的数据，更新的数据库返回值。\r\n\r\n二 . 异常日志要记录 输入数据，错误代码行号，错误原因，最好记录调用栈。\r\n\r\n5. 错误码尽可能 整个系统唯一，方便迅速定位错误。\r\n\r\n6. 尽量避免if 的层层嵌套，遇到错误 直接返回或者处理，避免过长的代码段之间，互相牵扯\r\n\r\n反面demo : \r\n<pre>\r\n            if(!empty($id)) {\r\n                $data = Channel::findIdentity($id);\r\n                if(!empty($data)) {\r\n                    $result = Channel::updateInfo($id, [\'is_deleted\' => 1]); \r\n                    if ($result) {\r\n                        $logData = [\r\n                            \'user_id\' => $user_id,\r\n                            \'to_user_id\' => $data[\'user_id\'],\r\n                            \'create_time\' => time(),\r\n                            \'status\' => OperatLog::STATUS_DEL,\r\n                            \'reason\' => $delReason,\r\n                            \'type\' => OperatLog::TYPE_CHANNEL,\r\n                            \'old_data\' => json_encode($data),\r\n                        ];   \r\n                        OperatLog::addInfo($logData);\r\n                        return [\'errno\' => 7400382, \'errmsg\' => \'删除成功\'];\r\n                    }    \r\n                    return [\'errno\' => 7400384, \'errmsg\' => \'删除失败\'];\r\n                }    \r\n                return [\'errno\' => 7400386, \'errmsg\' => \'当前修改数据不存在\'];\r\n            }    \r\n            return [\'errno\' => 7400388, \'errmsg\' => \'当前请求参数有误\'];\r\n</pre>\r\n这个 其实是一个还能接受的代码段，某种意义上，还有点美感， 但是如果if 包裹的代码段 超过一屏， 则理解成本就会变得难以接受。\r\n当我们看到一个if的时候， 我们需要 知道if 的 判断条件，开始和结束，是否有else 等，当我们看到 第二个 if 的时候，我们需要 知道 被第一个 通过的情况下进入的，然后同样需要 了解 if 的开始 结束等，然后第三个， 当我们读完第三个 if 退出的时候，需要了解第二个是否有else ， if/else 块 之后又 是什么，当前段代码是在第几个if块 之后，等等。总之if的嵌套增大了代码的理解成本。\r\n\r\n代码应该是 像 积木一样一块块累积起来的，不同的积木之间，应该尽量减少牵扯。\r\n所以按照我的想法，代码应该写成如下：\r\n\r\n<pre>\r\n         if(empty($id)) {\r\n               return [\'errno\' => 7400388, \'errmsg\' => \'当前请求参数有误\'];\r\n         }\r\n         $data = Channel::findIdentity($id);\r\n         if(!empty($data)) {\r\n             return [\'errno\' => 7400386, \'errmsg\' => \'当前修改数据不存在\'];\r\n         }\r\n  \r\n         $result = Channel::updateInfo($id, [\'is_deleted\' => 1]); \r\n         if (!$result) {\r\n             return [\'errno\' => 7400384, \'errmsg\' => \'删除失败\'];\r\n         }\r\n \r\n         $logData = [\r\n               \'user_id\' => $user_id,\r\n               \'to_user_id\' => $data[\'user_id\'],\r\n               \'create_time\' => time(),\r\n               \'status\' => OperatLog::STATUS_DEL,\r\n               \'reason\' => $delReason,\r\n               \'type\' => OperatLog::TYPE_CHANNEL,\r\n               \'old_data\' => json_encode($data),\r\n         ];   \r\n         OperatLog::addInfo($logData);\r\n         return [\'errno\' => 7400382, \'errmsg\' => \'删除成功\'];\r\n     \r\n</pre>\r\n\r\n\r\n7. 多表更新或者 删除，多个sql语句，加上事务和回滚。\r\n\r\n8. 代码不要太长，尽量独立成不同的func，方便cr和维护','编程规范','','inherit','open','open','','623-revision-v1','','','2016-09-23 11:35:00','2016-09-23 11:35:00','',623,'http://unasm.com/2016/09/633/',0,'revision','',0),(632,1,'2016-09-23 11:34:05','2016-09-23 11:34:05','代码规范：\r\n\r\n\r\n1.尽量使用抛异常的方式，尽量不用go的，或者自定义的返回错误的方式\r\n\r\n异常的方式给了错误一种默认处理方式，就是直接中断请求，直接结束，处理错误（展示或者记录日志），而不需要层层传递，如果外界需要特殊处理，或者某函数异常不影响请求流， 可以在外层try catch，屏蔽错误。\r\n\r\n2. 尽量使用静态方法，减少new 的数量，将代码 主要 用来处理逻辑上，而非各种语言的语法上，\r\n\r\n3，异常 集中处理\r\n\r\n4. 日志 尽量记录 完整的上下文，能够复现当时的场景 ，\r\n\r\n一 . 更新数据库的日志至少需要记录四项 where条件，原来的数据，新的数据，更新的数据库返回值。\r\n\r\n二 . 异常日志要记录 输入数据，错误代码行号，错误原因，最好记录调用栈。\r\n\r\n5. 错误码尽可能 整个系统唯一，方便迅速定位错误。\r\n\r\n6. 尽量避免if 的层层嵌套，遇到错误 直接返回或者处理，避免过长的代码段之间，互相牵扯\r\n\r\n反面demo : \r\n            if(!empty($id)) {\r\n                $data = Channel::findIdentity($id);\r\n                if(!empty($data)) {\r\n                    $result = Channel::updateInfo($id, [\'is_deleted\' => 1]); \r\n                    if ($result) {\r\n                        $logData = [\r\n                            \'user_id\' => $user_id,\r\n                            \'to_user_id\' => $data[\'user_id\'],\r\n                            \'create_time\' => time(),\r\n                            \'status\' => OperatLog::STATUS_DEL,\r\n                            \'reason\' => $delReason,\r\n                            \'type\' => OperatLog::TYPE_CHANNEL,\r\n                            \'old_data\' => json_encode($data),\r\n                        ];   \r\n                        OperatLog::addInfo($logData);\r\n                        return [\'errno\' => 7400382, \'errmsg\' => \'删除成功\'];\r\n                    }    \r\n                    return [\'errno\' => 7400384, \'errmsg\' => \'删除失败\'];\r\n                }    \r\n                return [\'errno\' => 7400386, \'errmsg\' => \'当前修改数据不存在\'];\r\n            }    \r\n            return [\'errno\' => 7400388, \'errmsg\' => \'当前请求参数有误\'];\r\n这个 其实是一个还能接受的代码段，某种意义上，还有点美感， 但是如果if 包裹的代码段 超过一屏， 则理解成本就会变得难以接受。\r\n当我们看到一个if的时候， 我们需要 知道if 的 判断条件，开始和结束，是否有else 等，当我们看到 第二个 if 的时候，我们需要 知道 被第一个 通过的情况下进入的，然后同样需要 了解 if 的开始 结束等，然后第三个， 当我们读完第三个 if 退出的时候，需要了解第二个是否有else ， if/else 块 之后又 是什么，当前段代码是在第几个if块 之后，等等。总之if的嵌套增大了代码的理解成本。\r\n\r\n代码应该是 像 积木一样一块块累积起来的，不同的积木之间，应该尽量减少牵扯。\r\n所以按照我的想法，代码应该写成如下：\r\n\r\n         if(empty($id)) {\r\n               return [\'errno\' => 7400388, \'errmsg\' => \'当前请求参数有误\'];\r\n         }\r\n         $data = Channel::findIdentity($id);\r\n         if(!empty($data)) {\r\n             return [\'errno\' => 7400386, \'errmsg\' => \'当前修改数据不存在\'];\r\n         }\r\n  \r\n         $result = Channel::updateInfo($id, [\'is_deleted\' => 1]); \r\n         if (!$result) {\r\n             return [\'errno\' => 7400384, \'errmsg\' => \'删除失败\'];\r\n         }\r\n \r\n         $logData = [\r\n               \'user_id\' => $user_id,\r\n               \'to_user_id\' => $data[\'user_id\'],\r\n               \'create_time\' => time(),\r\n               \'status\' => OperatLog::STATUS_DEL,\r\n               \'reason\' => $delReason,\r\n               \'type\' => OperatLog::TYPE_CHANNEL,\r\n               \'old_data\' => json_encode($data),\r\n         ];   \r\n         OperatLog::addInfo($logData);\r\n         return [\'errno\' => 7400382, \'errmsg\' => \'删除成功\'];\r\n     \r\n\r\n\r\n7. 多表更新或者 删除，多个sql语句，加上事务和回滚。\r\n\r\n8. 代码不要太长，尽量独立成不同的func，方便cr和维护','编程规范','','inherit','open','open','','623-revision-v1','','','2016-09-23 11:34:05','2016-09-23 11:34:05','',623,'http://unasm.com/2016/09/632/',0,'revision','',0),(634,1,'2016-09-23 18:52:25','2016-09-23 18:52:25','下面是我对怎么样 写代码才能够 降低系统的复杂性，增加可读性的一些思考和建议，凡事不可绝对，存在即合理，所以我会用一些，尽量或者尽可能等词汇等，表明大部分情况下遵循这些建议应该是比较优的。\r\n\r\n代码规范：\r\n\r\n1.尽量使用抛异常的方式，返回错误码的方式，或者自定义的返回错误的方式\r\n\r\n如果 调用函数的时候，函数内部发生了错误，上层如何知道内部发生了错误，发生了哪种错误？ 以前尝试过调用函数的时候，函数返回 [errno =&gt; 2011021 , errmsg =&gt; \'连接数据库超时\', data =&gt; [] ]这种格式的数据，如果errno 为0的时候代表正常，需要的数据在data中，否则错误原因和错误类型可以根据 errno, errmsg 确定。\r\n\r\n比如\r\n\r\n$data = getChannelList($id);\r\nif ($data[\'errno\'] !== 0 ) {\r\n\r\n}\r\n\r\n但是这样做的坏处是 整个代码里面，充满了errno的判断。而这些判断，就经验而论，更多的是一层层的传递给上层，直到最后返回给用户。\r\n\r\n异常的方式给了错误一种默认处理方式，就是<strong>直接中断请求，直接结束，处理错误</strong>（展示或者记录日志），而不需要层层传递，简单粗暴，但是非常适合web开发，Web开发的每个请求处理，一般如流一般，层层检查处理，直到最后保存数据或者返回数据，中间有错误，如果有错误，告知用户错误原因，所以这种情况下，抛异常的中断的方式非常适合， 如果外界需要特殊处理异常，或者某函数异常不影响请求流， 可以在外层try catch，屏蔽错误。\r\n\r\n2. function 内部 尽量 避免使用this，尽量避免 new 对象。\r\n\r\n   编程就应该就像堆积木一样简单，如果一个func ,其参数就是全部输入，return 的值就是全部的返回值，那花括号包裹的代码块就是一个整体，就是一块积木。\r\n当阅读到这个func的时候，拿到了全部的传入参数，一行行走下去，总是能够理解这个func的作用的, 而不需要回溯到某个上层，看某个this-&gt;属性 是如何设置的，对此时的func的行为有着怎样的影响。\r\n比如下面的Class Excel , 调用的时候先new 一个 对象初始化Data，然后中间经过一些逻辑，然后开始调用某功能函数A，当读到$this-&gt;data的时候，第一件事情，是不是先想下，$this-&gt;data 存储的值是什么？什么时间存储的，中间有没有调用setData,调用了几次， 哪里调用的，影响有多大？为了明确这些可能的疑问而回溯到上层代码，就增加了系统的复杂性。换言之， formatMultiRegions 与 __construct 以及 setData 交叠在一起，共同完成了 一件事情，而交叠的部分，可能与其他的逻辑也是混杂在一起，增加理解成本。\r\n所以如果按照我建议的话，此处应该 改成 Excel_Better, 需要用到功能函数formatMultiRegions的时候， 传入参数Data，整个formatMultiRegions 的行为 就仅仅与data 有关，并不需要关心data经历过怎么样的处理变化,也并不需要回溯到 上层代码才能理解本函数,也就是 formatMultiRegions 就是一块被此时此刻才被用到的积木。\r\n调用之前不知道其存在，调用之后不必在意其存在过，如流水一般，流过了，就不再需要关心，只是想要的数据向下传递。\r\n\r\n反面栗子：\r\n<pre>\r\n<?php \r\nnamespace app\\models; \r\nuse Yii; \r\nclass Excel \r\n{     \r\n    protected $data = null;     \r\n    //初始化Excel对象     \r\n    public function __construct(Array &$data)     {           \r\n         $this--->phpExcel = new \\PHPExcel();\r\n        $this-&gt;data = $data;\r\n    }   \r\n    //某功能函数A\r\n    public function formatMultiRegions()\r\n    {   \r\n        $data = $this-&gt;data;\r\n        if ($data) { \r\n  \r\n        }\r\n        $mark = array_values(array_splice($data, 0, 1));\r\n        return $mark;\r\n    }   \r\n    //某功能函数B\r\n    public function formatPie()\r\n    {   \r\n        $data = $this-&gt;data;\r\n        foreach ($data as $region=&gt;$list){\r\n\r\n        }   \r\n        return [$lines];\r\n    }  \r\n    // 修改data值\r\n    private function setData($data)\r\n    {   \r\n        $this-&gt;data = $data;\r\n    }   \r\n}\r\n</pre>\r\n\r\n<pre>\r\n<?php \r\nnamespace app\\models; \r\nuse Yii; \r\nclass Excel_Better\r\n{     \r\n     //某功能函数A     \r\n    public static function formatMultiRegions($data)     \r\n    {            \r\n       if ($data) {            \r\n       }         \r\n       $mark = array_values(array_splice($data, 0, 1));         \r\n       return $mark;     \r\n    }        \r\n    //某功能函数B     \r\n    public static function formatPie($data)     \r\n    {            \r\n        foreach ($data as $region=-->$list){\r\n\r\n        }   \r\n        return [$lines];\r\n    }  \r\n}\r\n</pre>\r\n\r\n3，异常 集中处理\r\n\r\n   换言之，如果捕获到了异常，打算怎么办呢？如果没有特殊需求，不如不处理，在项目的某一处函数几种处理异常，根据不同的异常类型，根据不同的环境，选择不同的展示方式。\r\n   但是有些情况，比如超时重连，或者 异步通知重试等有特殊处理的需求的时候，建议捕获异常，并酌情处理。\r\n\r\n4. 日志 尽量记录 完整的上下文，能够复现当时的场景 ，\r\n\r\n    一 . 更新数据库的日志至少需要记录四项 where条件，原来的数据，新的数据，更新的数据库返回值。\r\n\r\n    二 . 异常日志要记录 输入数据，错误代码行号，错误文件，错误原因，最好记录调用栈。、\r\n   \r\n    三 . 对于一个记录用户请求的 日志来说，应该记录下，POST，GET 参数，用户的uid(如果有)，处理该请求的机器，以及系统的返回值\r\n\r\n\r\n5. 尽量避免if 的层层嵌套，遇到错误 直接返回或者处理，避免过长的代码段之间，互相牵扯\r\n\r\n反面demo :\r\n<pre>           \r\n            if(!empty($id)) {\r\n                $data = Channel::findIdentity($id);\r\n                if(!empty($data)) {\r\n                    $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \r\n                    if ($result) {\r\n                        $logData = [\r\n                            \'user_id\' =&gt; $user_id,\r\n                            \'to_user_id\' =&gt; $data[\'user_id\'],\r\n                            \'create_time\' =&gt; time(),\r\n                            \'status\' =&gt; OperatLog::STATUS_DEL,\r\n                            \'reason\' =&gt; $delReason,\r\n                            \'type\' =&gt; OperatLog::TYPE_CHANNEL,\r\n                            \'old_data\' =&gt; json_encode($data),\r\n                        ];   \r\n                        OperatLog::addInfo($logData);\r\n                        return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\r\n                    }    \r\n                    return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\r\n                }    \r\n                return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\r\n            }    \r\n            return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\r\n</pre>\r\n这个 其实是一个还能接受的代码段，某种意义上，还有点美感， 但是如果if 包裹的代码段 超过一屏， 则理解成本就会变得难以接受。\r\n当我们看到一个if的时候， 我们需要 知道if 的 判断条件，开始和结束，是否有else 等，当我们看到 第二个 if 的时候，我们需要 知道 被第一个 通过的情况下进入的，然后同样需要 了解 if 的开始 结束等，然后第三个， 当我们读完第三个 if 退出的时候，需要了解第二个是否有else ， if/else 块 之后又 是什么，当前段代码是在第几个if块 之后，等等。总之if的嵌套增大了代码的理解成本。\r\n\r\n代码应该是 像 积木一样一块块累积起来的，不同的积木之间，应该尽量减少牵扯。\r\n所以按照我的想法，代码应该写成如下：\r\n<pre>         if(empty($id)) {\r\n               return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\r\n         }\r\n         $data = Channel::findIdentity($id);\r\n         if(!empty($data)) {\r\n             return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\r\n         }\r\n  \r\n         $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \r\n         if (!$result) {\r\n             return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\r\n         }\r\n \r\n         $logData = [\r\n               \'user_id\' =&gt; $user_id,\r\n               \'to_user_id\' =&gt; $data[\'user_id\'],\r\n               \'create_time\' =&gt; time(),\r\n               \'status\' =&gt; OperatLog::STATUS_DEL,\r\n               \'reason\' =&gt; $delReason,\r\n               \'type\' =&gt; OperatLog::TYPE_CHANNEL,\r\n               \'old_data\' =&gt; json_encode($data),\r\n         ];   \r\n         OperatLog::addInfo($logData);\r\n         return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\r\n     \r\n</pre>\r\n\r\n\r\n6. 多表更新或者 删除，添加数据，多个sql语句，加上事务和回滚，原因相信无可争议，只是很多人未必注意。\r\n    虽然一般情况下不加事务也不会出问题，但是有了问题，就要修数据，修数据就可能引出各种问题。\r\n   个人 比较推崇的一个模板如下，try catch 只有 两个出口，要不一直走到commit，要不在catch里面rollback.\r\n\r\n<pre>\r\n        $trans = Yii::$app->db->beginTransaction();\r\n        try {\r\n            $promotionAddData = array(\r\n                //\'region_manage\' => $region_manage_id,\r\n                \'update_time\' => time(),\r\n                \'update_user_id\' => UserService::getUserId(),\r\n                \'is_deleted\' => 1,\r\n            );  \r\n            $isUpdate = PromotionLeader::updateInfo($id, $promotionAddData);\r\n            if (!$isUpdate) {\r\n                throw new JdbException(\'更新数据库异常\', 18400177);\r\n            }   \r\n            UserAccount::deleteRow($promotionLeaderInfo[\'user_id\']);\r\n            $trans->commit();\r\n        } catch (\\Exception $e) {\r\n            $trans->rollback();\r\n            throw $e; \r\n        }   \r\n        return [\'errno\' => 200, \'errmsg\' => \'推广组长数据操作成功\'];\r\n</pre>\r\n\r\n\r\n7. 错误码尽可能 整个系统唯一，方便迅速定位错误。\r\n   \r\n   当后端与FE通过json数据 交互的时候，一般来说，0或者200代表ok，其他代表错误就能满足需求，所以在需求层面上，错误码的定义无关紧要，所以一些系统返回400，500，这种仿 http的错误码。\r\n   出于排查错误的目的而言，错误码应该尽可能的唯一，当看到系统返回的内容的时候，大概就清楚这段文本大概是系统那段代码处理返回的。比如上面demo 程序中 18400177 ，这种错误码肯定系统内很难重复，生成规则是当前光标所在的列数 + 400（错误的性质,仿http错误码） + 当前行号，某些ide还可以加上当前文件总行数等，达到一个更加随机的错误码。\r\n    当然，还有其他的方式，比如在返回值里面，加冗余字段，标明返回数据在系统的位置信息，也可以。\r\n    这种全随机的方式，缺点在于很难对所有的错误进行一个统计的归类处理。\r\n\r\n8. 尽量使用静态方法，减少new的数量。\r\n   \r\n   将代码 主要 用来处理逻辑上，而非各种语言的语法上，与效率无关，只是为了代码的可读性，如下面的两个demo，既然new 可以去掉，就尽量减少代码行数，增加可读性，重心在逻辑，而非语法。\r\n   \r\n  反面demo：\r\n<pre>\r\n  function test() {\r\n      $modelA = new ModelA;\r\n      $userId =  $modelA->getInfo($_GET[\'id\']);\r\n      $modelB = new ModelB;\r\n      return $modelB->getList($userId);\r\n  }\r\n</pre>\r\n 推荐例程：\r\n<pre>\r\n  function test() {\r\n      $userId =  modelA::getInfo($_GET[\'id\']);\r\n      return $modelB::getList($userId);\r\n  }\r\n</pre>\r\n','编程规范','','inherit','open','open','','623-revision-v1','','','2016-09-23 18:52:25','2016-09-23 18:52:25','',623,'http://unasm.com/2016/09/634/',0,'revision','',0),(635,1,'2016-09-23 18:53:15','2016-09-23 18:53:15','下面是我对怎么样 写代码才能够 降低系统的复杂性，增加可读性的一些思考和建议，凡事不可绝对，存在即合理，所以我会用一些，尽量或者尽可能等词汇等，表明大部分情况下遵循这些建议应该是比较优的。\r\n\r\n代码规范：\r\n\r\n1.尽量使用抛异常的方式，返回错误码的方式，或者自定义的返回错误的方式\r\n\r\n如果 调用函数的时候，函数内部发生了错误，上层如何知道内部发生了错误，发生了哪种错误？ 以前尝试过调用函数的时候，函数返回 [errno =&gt; 2011021 , errmsg =&gt; \'连接数据库超时\', data =&gt; [] ]这种格式的数据，如果errno 为0的时候代表正常，需要的数据在data中，否则错误原因和错误类型可以根据 errno, errmsg 确定。\r\n\r\n比如\r\n\r\n$data = getChannelList($id);\r\nif ($data[\'errno\'] !== 0 ) {\r\n\r\n}\r\n\r\n但是这样做的坏处是 整个代码里面，充满了errno的判断。而这些判断，就经验而论，更多的是一层层的传递给上层，直到最后返回给用户。\r\n\r\n异常的方式给了错误一种默认处理方式，就是<strong>直接中断请求，直接结束，处理错误</strong>（展示或者记录日志），而不需要层层传递，简单粗暴，但是非常适合web开发，Web开发的每个请求处理，一般如流一般，层层检查处理，直到最后保存数据或者返回数据，中间有错误，如果有错误，告知用户错误原因，所以这种情况下，抛异常的中断的方式非常适合， 如果外界需要特殊处理异常，或者某函数异常不影响请求流， 可以在外层try catch，屏蔽错误。\r\n\r\n2. function 内部 尽量 避免使用this，尽量避免 new 对象。\r\n\r\n   编程就应该就像堆积木一样简单，如果一个func ,其参数就是全部输入，return 的值就是全部的返回值，那花括号包裹的代码块就是一个整体，就是一块积木。\r\n当阅读到这个func的时候，拿到了全部的传入参数，一行行走下去，总是能够理解这个func的作用的, 而不需要回溯到某个上层，看某个this-&gt;属性 是如何设置的，对此时的func的行为有着怎样的影响。\r\n比如下面的Class Excel , 调用的时候先new 一个 对象初始化Data，然后中间经过一些逻辑，然后开始调用某功能函数A，当读到$this-&gt;data的时候，第一件事情，是不是先想下，$this-&gt;data 存储的值是什么？什么时间存储的，中间有没有调用setData,调用了几次， 哪里调用的，影响有多大？为了明确这些可能的疑问而回溯到上层代码，就增加了系统的复杂性。换言之， formatMultiRegions 与 __construct 以及 setData 交叠在一起，共同完成了 一件事情，而交叠的部分，可能与其他的逻辑也是混杂在一起，增加理解成本。\r\n所以如果按照我建议的话，此处应该 改成 Excel_Better, 需要用到功能函数formatMultiRegions的时候， 传入参数Data，整个formatMultiRegions 的行为 就仅仅与data 有关，并不需要关心data经历过怎么样的处理变化,也并不需要回溯到 上层代码才能理解本函数,也就是 formatMultiRegions 就是一块被此时此刻才被用到的积木。\r\n调用之前不知道其存在，调用之后不必在意其存在过，如流水一般，流过了，就不再需要关心，只是想要的数据向下传递。\r\n\r\n反面栗子：\r\n<pre>\r\n\r\nnamespace app\\models; \r\nuse Yii; \r\nclass Excel \r\n{     \r\n    protected $data = null;     \r\n    //初始化Excel对象     \r\n    public function __construct(Array &$data)     {           \r\n         $this--->phpExcel = new \\PHPExcel();\r\n        $this-&gt;data = $data;\r\n    }   \r\n    //某功能函数A\r\n    public function formatMultiRegions()\r\n    {   \r\n        $data = $this-&gt;data;\r\n        if ($data) { \r\n  \r\n        }\r\n        $mark = array_values(array_splice($data, 0, 1));\r\n        return $mark;\r\n    }   \r\n    //某功能函数B\r\n    public function formatPie()\r\n    {   \r\n        $data = $this-&gt;data;\r\n        foreach ($data as $region=&gt;$list){\r\n\r\n        }   \r\n        return [$lines];\r\n    }  \r\n    // 修改data值\r\n    private function setData($data)\r\n    {   \r\n        $this-&gt;data = $data;\r\n    }   \r\n}\r\n</pre>\r\n\r\n<pre>\r\n<?php \r\nnamespace app\\models; \r\nuse Yii; \r\nclass Excel_Better\r\n{     \r\n     //某功能函数A     \r\n    public static function formatMultiRegions($data)     \r\n    {            \r\n       if ($data) {            \r\n       }         \r\n       $mark = array_values(array_splice($data, 0, 1));         \r\n       return $mark;     \r\n    }        \r\n    //某功能函数B     \r\n    public static function formatPie($data)     \r\n    {            \r\n        foreach ($data as $region=-->$list){\r\n\r\n        }   \r\n        return [$lines];\r\n    }  \r\n}\r\n</pre>\r\n\r\n3，异常 集中处理\r\n\r\n   换言之，如果捕获到了异常，打算怎么办呢？如果没有特殊需求，不如不处理，在项目的某一处函数几种处理异常，根据不同的异常类型，根据不同的环境，选择不同的展示方式。\r\n   但是有些情况，比如超时重连，或者 异步通知重试等有特殊处理的需求的时候，建议捕获异常，并酌情处理。\r\n\r\n4. 日志 尽量记录 完整的上下文，能够复现当时的场景 ，\r\n\r\n    一 . 更新数据库的日志至少需要记录四项 where条件，原来的数据，新的数据，更新的数据库返回值。\r\n\r\n    二 . 异常日志要记录 输入数据，错误代码行号，错误文件，错误原因，最好记录调用栈。、\r\n   \r\n    三 . 对于一个记录用户请求的 日志来说，应该记录下，POST，GET 参数，用户的uid(如果有)，处理该请求的机器，以及系统的返回值\r\n\r\n\r\n5. 尽量避免if 的层层嵌套，遇到错误 直接返回或者处理，避免过长的代码段之间，互相牵扯\r\n\r\n反面demo :\r\n<pre>           \r\n            if(!empty($id)) {\r\n                $data = Channel::findIdentity($id);\r\n                if(!empty($data)) {\r\n                    $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \r\n                    if ($result) {\r\n                        $logData = [\r\n                            \'user_id\' =&gt; $user_id,\r\n                            \'to_user_id\' =&gt; $data[\'user_id\'],\r\n                            \'create_time\' =&gt; time(),\r\n                            \'status\' =&gt; OperatLog::STATUS_DEL,\r\n                            \'reason\' =&gt; $delReason,\r\n                            \'type\' =&gt; OperatLog::TYPE_CHANNEL,\r\n                            \'old_data\' =&gt; json_encode($data),\r\n                        ];   \r\n                        OperatLog::addInfo($logData);\r\n                        return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\r\n                    }    \r\n                    return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\r\n                }    \r\n                return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\r\n            }    \r\n            return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\r\n</pre>\r\n这个 其实是一个还能接受的代码段，某种意义上，还有点美感， 但是如果if 包裹的代码段 超过一屏， 则理解成本就会变得难以接受。\r\n当我们看到一个if的时候， 我们需要 知道if 的 判断条件，开始和结束，是否有else 等，当我们看到 第二个 if 的时候，我们需要 知道 被第一个 通过的情况下进入的，然后同样需要 了解 if 的开始 结束等，然后第三个， 当我们读完第三个 if 退出的时候，需要了解第二个是否有else ， if/else 块 之后又 是什么，当前段代码是在第几个if块 之后，等等。总之if的嵌套增大了代码的理解成本。\r\n\r\n代码应该是 像 积木一样一块块累积起来的，不同的积木之间，应该尽量减少牵扯。\r\n所以按照我的想法，代码应该写成如下：\r\n<pre>         if(empty($id)) {\r\n               return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\r\n         }\r\n         $data = Channel::findIdentity($id);\r\n         if(!empty($data)) {\r\n             return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\r\n         }\r\n  \r\n         $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \r\n         if (!$result) {\r\n             return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\r\n         }\r\n \r\n         $logData = [\r\n               \'user_id\' =&gt; $user_id,\r\n               \'to_user_id\' =&gt; $data[\'user_id\'],\r\n               \'create_time\' =&gt; time(),\r\n               \'status\' =&gt; OperatLog::STATUS_DEL,\r\n               \'reason\' =&gt; $delReason,\r\n               \'type\' =&gt; OperatLog::TYPE_CHANNEL,\r\n               \'old_data\' =&gt; json_encode($data),\r\n         ];   \r\n         OperatLog::addInfo($logData);\r\n         return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\r\n     \r\n</pre>\r\n\r\n\r\n6. 多表更新或者 删除，添加数据，多个sql语句，加上事务和回滚，原因相信无可争议，只是很多人未必注意。\r\n    虽然一般情况下不加事务也不会出问题，但是有了问题，就要修数据，修数据就可能引出各种问题。\r\n   个人 比较推崇的一个模板如下，try catch 只有 两个出口，要不一直走到commit，要不在catch里面rollback.\r\n\r\n<pre>\r\n        $trans = Yii::$app->db->beginTransaction();\r\n        try {\r\n            $promotionAddData = array(\r\n                //\'region_manage\' => $region_manage_id,\r\n                \'update_time\' => time(),\r\n                \'update_user_id\' => UserService::getUserId(),\r\n                \'is_deleted\' => 1,\r\n            );  \r\n            $isUpdate = PromotionLeader::updateInfo($id, $promotionAddData);\r\n            if (!$isUpdate) {\r\n                throw new JdbException(\'更新数据库异常\', 18400177);\r\n            }   \r\n            UserAccount::deleteRow($promotionLeaderInfo[\'user_id\']);\r\n            $trans->commit();\r\n        } catch (\\Exception $e) {\r\n            $trans->rollback();\r\n            throw $e; \r\n        }   \r\n        return [\'errno\' => 200, \'errmsg\' => \'推广组长数据操作成功\'];\r\n</pre>\r\n\r\n\r\n7. 错误码尽可能 整个系统唯一，方便迅速定位错误。\r\n   \r\n   当后端与FE通过json数据 交互的时候，一般来说，0或者200代表ok，其他代表错误就能满足需求，所以在需求层面上，错误码的定义无关紧要，所以一些系统返回400，500，这种仿 http的错误码。\r\n   出于排查错误的目的而言，错误码应该尽可能的唯一，当看到系统返回的内容的时候，大概就清楚这段文本大概是系统那段代码处理返回的。比如上面demo 程序中 18400177 ，这种错误码肯定系统内很难重复，生成规则是当前光标所在的列数 + 400（错误的性质,仿http错误码） + 当前行号，某些ide还可以加上当前文件总行数等，达到一个更加随机的错误码。\r\n    当然，还有其他的方式，比如在返回值里面，加冗余字段，标明返回数据在系统的位置信息，也可以。\r\n    这种全随机的方式，缺点在于很难对所有的错误进行一个统计的归类处理。\r\n\r\n8. 尽量使用静态方法，减少new的数量。\r\n   \r\n   将代码 主要 用来处理逻辑上，而非各种语言的语法上，与效率无关，只是为了代码的可读性，如下面的两个demo，既然new 可以去掉，就尽量减少代码行数，增加可读性，重心在逻辑，而非语法。\r\n   \r\n  反面demo：\r\n<pre>\r\n  function test() {\r\n      $modelA = new ModelA;\r\n      $userId =  $modelA->getInfo($_GET[\'id\']);\r\n      $modelB = new ModelB;\r\n      return $modelB->getList($userId);\r\n  }\r\n</pre>\r\n 推荐例程：\r\n<pre>\r\n  function test() {\r\n      $userId =  modelA::getInfo($_GET[\'id\']);\r\n      return $modelB::getList($userId);\r\n  }\r\n</pre>\r\n','编程规范','','inherit','open','open','','623-revision-v1','','','2016-09-23 18:53:15','2016-09-23 18:53:15','',623,'http://unasm.com/2016/09/635/',0,'revision','',0),(636,1,'2016-09-23 18:53:56','2016-09-23 18:53:56','下面是我对怎么样 写代码才能够 降低系统的复杂性，增加可读性的一些思考和建议，凡事不可绝对，存在即合理，所以我会用一些，尽量或者尽可能等词汇等，表明大部分情况下遵循这些建议应该是比较优的。\r\n\r\n代码规范：\r\n\r\n1.尽量使用抛异常的方式，返回错误码的方式，或者自定义的返回错误的方式\r\n\r\n如果 调用函数的时候，函数内部发生了错误，上层如何知道内部发生了错误，发生了哪种错误？ 以前尝试过调用函数的时候，函数返回 [errno =&gt; 2011021 , errmsg =&gt; \'连接数据库超时\', data =&gt; [] ]这种格式的数据，如果errno 为0的时候代表正常，需要的数据在data中，否则错误原因和错误类型可以根据 errno, errmsg 确定。\r\n\r\n比如\r\n\r\n$data = getChannelList($id);\r\nif ($data[\'errno\'] !== 0 ) {\r\n\r\n}\r\n\r\n但是这样做的坏处是 整个代码里面，充满了errno的判断。而这些判断，就经验而论，更多的是一层层的传递给上层，直到最后返回给用户。\r\n\r\n异常的方式给了错误一种默认处理方式，就是<strong>直接中断请求，直接结束，处理错误</strong>（展示或者记录日志），而不需要层层传递，简单粗暴，但是非常适合web开发，Web开发的每个请求处理，一般如流一般，层层检查处理，直到最后保存数据或者返回数据，中间有错误，如果有错误，告知用户错误原因，所以这种情况下，抛异常的中断的方式非常适合， 如果外界需要特殊处理异常，或者某函数异常不影响请求流， 可以在外层try catch，屏蔽错误。\r\n\r\n2. function 内部 尽量 避免使用this，尽量避免 new 对象。\r\n\r\n   编程就应该就像堆积木一样简单，如果一个func ,其参数就是全部输入，return 的值就是全部的返回值，那花括号包裹的代码块就是一个整体，就是一块积木。\r\n当阅读到这个func的时候，拿到了全部的传入参数，一行行走下去，总是能够理解这个func的作用的, 而不需要回溯到某个上层，看某个this-&gt;属性 是如何设置的，对此时的func的行为有着怎样的影响。\r\n比如下面的Class Excel , 调用的时候先new 一个 对象初始化Data，然后中间经过一些逻辑，然后开始调用某功能函数A，当读到$this-&gt;data的时候，第一件事情，是不是先想下，$this-&gt;data 存储的值是什么？什么时间存储的，中间有没有调用setData,调用了几次， 哪里调用的，影响有多大？为了明确这些可能的疑问而回溯到上层代码，就增加了系统的复杂性。换言之， formatMultiRegions 与 __construct 以及 setData 交叠在一起，共同完成了 一件事情，而交叠的部分，可能与其他的逻辑也是混杂在一起，增加理解成本。\r\n所以如果按照我建议的话，此处应该 改成 Excel_Better, 需要用到功能函数formatMultiRegions的时候， 传入参数Data，整个formatMultiRegions 的行为 就仅仅与data 有关，并不需要关心data经历过怎么样的处理变化,也并不需要回溯到 上层代码才能理解本函数,也就是 formatMultiRegions 就是一块被此时此刻才被用到的积木。\r\n调用之前不知道其存在，调用之后不必在意其存在过，如流水一般，流过了，就不再需要关心，只是想要的数据向下传递。\r\n\r\n反面栗子：\r\n<pre>\r\n\r\nnamespace app\\models; \r\nuse Yii; \r\nclass Excel \r\n{     \r\n    protected $data = null;     \r\n    //初始化Excel对象     \r\n    public function __construct(Array &$data)     {           \r\n         $this--->phpExcel = new \\PHPExcel();\r\n        $this-&gt;data = $data;\r\n    }   \r\n    //某功能函数A\r\n    public function formatMultiRegions()\r\n    {   \r\n        $data = $this-&gt;data;\r\n        if ($data) { \r\n  \r\n        }\r\n        $mark = array_values(array_splice($data, 0, 1));\r\n        return $mark;\r\n    }   \r\n    //某功能函数B\r\n    public function formatPie()\r\n    {   \r\n        $data = $this-&gt;data;\r\n        foreach ($data as $region=&gt;$list) {\r\n\r\n        }   \r\n        return [$lines];\r\n    }  \r\n    // 修改data值\r\n    private function setData($data)\r\n    {   \r\n        $this-&gt;data = $data;\r\n    }   \r\n}\r\n</pre>\r\n\r\n推荐 demo :\r\n<pre>\r\nnamespace app\\models; \r\nuse Yii; \r\nclass Excel_Better\r\n{     \r\n     //某功能函数A     \r\n    public static function formatMultiRegions($data)     \r\n    {            \r\n       if ($data) {            \r\n       }         \r\n       $mark = array_values(array_splice($data, 0, 1));         \r\n       return $mark;     \r\n    }        \r\n    //某功能函数B     \r\n    public static function formatPie($data)     \r\n    {            \r\n        foreach ($data as $region=-->$list){\r\n\r\n        }   \r\n        return [$lines];\r\n    }  \r\n}\r\n</pre>\r\n\r\n3，异常 集中处理\r\n\r\n   换言之，如果捕获到了异常，打算怎么办呢？如果没有特殊需求，不如不处理，在项目的某一处函数几种处理异常，根据不同的异常类型，根据不同的环境，选择不同的展示方式。\r\n   但是有些情况，比如超时重连，或者 异步通知重试等有特殊处理的需求的时候，建议捕获异常，并酌情处理。\r\n\r\n4. 日志 尽量记录 完整的上下文，能够复现当时的场景 ，\r\n\r\n    一 . 更新数据库的日志至少需要记录四项 where条件，原来的数据，新的数据，更新的数据库返回值。\r\n\r\n    二 . 异常日志要记录 输入数据，错误代码行号，错误文件，错误原因，最好记录调用栈。、\r\n   \r\n    三 . 对于一个记录用户请求的 日志来说，应该记录下，POST，GET 参数，用户的uid(如果有)，处理该请求的机器，以及系统的返回值\r\n\r\n\r\n5. 尽量避免if 的层层嵌套，遇到错误 直接返回或者处理，避免过长的代码段之间，互相牵扯\r\n\r\n反面demo :\r\n<pre>           \r\n            if(!empty($id)) {\r\n                $data = Channel::findIdentity($id);\r\n                if(!empty($data)) {\r\n                    $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \r\n                    if ($result) {\r\n                        $logData = [\r\n                            \'user_id\' =&gt; $user_id,\r\n                            \'to_user_id\' =&gt; $data[\'user_id\'],\r\n                            \'create_time\' =&gt; time(),\r\n                            \'status\' =&gt; OperatLog::STATUS_DEL,\r\n                            \'reason\' =&gt; $delReason,\r\n                            \'type\' =&gt; OperatLog::TYPE_CHANNEL,\r\n                            \'old_data\' =&gt; json_encode($data),\r\n                        ];   \r\n                        OperatLog::addInfo($logData);\r\n                        return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\r\n                    }    \r\n                    return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\r\n                }    \r\n                return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\r\n            }    \r\n            return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\r\n</pre>\r\n这个 其实是一个还能接受的代码段，某种意义上，还有点美感， 但是如果if 包裹的代码段 超过一屏， 则理解成本就会变得难以接受。\r\n当我们看到一个if的时候， 我们需要 知道if 的 判断条件，开始和结束，是否有else 等，当我们看到 第二个 if 的时候，我们需要 知道 被第一个 通过的情况下进入的，然后同样需要 了解 if 的开始 结束等，然后第三个， 当我们读完第三个 if 退出的时候，需要了解第二个是否有else ， if/else 块 之后又 是什么，当前段代码是在第几个if块 之后，等等。总之if的嵌套增大了代码的理解成本。\r\n\r\n代码应该是 像 积木一样一块块累积起来的，不同的积木之间，应该尽量减少牵扯。\r\n所以按照我的想法，代码应该写成如下：\r\n<pre>         if(empty($id)) {\r\n               return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\r\n         }\r\n         $data = Channel::findIdentity($id);\r\n         if(!empty($data)) {\r\n             return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\r\n         }\r\n  \r\n         $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \r\n         if (!$result) {\r\n             return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\r\n         }\r\n \r\n         $logData = [\r\n               \'user_id\' =&gt; $user_id,\r\n               \'to_user_id\' =&gt; $data[\'user_id\'],\r\n               \'create_time\' =&gt; time(),\r\n               \'status\' =&gt; OperatLog::STATUS_DEL,\r\n               \'reason\' =&gt; $delReason,\r\n               \'type\' =&gt; OperatLog::TYPE_CHANNEL,\r\n               \'old_data\' =&gt; json_encode($data),\r\n         ];   \r\n         OperatLog::addInfo($logData);\r\n         return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\r\n     \r\n</pre>\r\n\r\n\r\n6. 多表更新或者 删除，添加数据，多个sql语句，加上事务和回滚，原因相信无可争议，只是很多人未必注意。\r\n    虽然一般情况下不加事务也不会出问题，但是有了问题，就要修数据，修数据就可能引出各种问题。\r\n   个人 比较推崇的一个模板如下，try catch 只有 两个出口，要不一直走到commit，要不在catch里面rollback.\r\n\r\n<pre>\r\n        $trans = Yii::$app->db->beginTransaction();\r\n        try {\r\n            $promotionAddData = array(\r\n                //\'region_manage\' => $region_manage_id,\r\n                \'update_time\' => time(),\r\n                \'update_user_id\' => UserService::getUserId(),\r\n                \'is_deleted\' => 1,\r\n            );  \r\n            $isUpdate = PromotionLeader::updateInfo($id, $promotionAddData);\r\n            if (!$isUpdate) {\r\n                throw new JdbException(\'更新数据库异常\', 18400177);\r\n            }   \r\n            UserAccount::deleteRow($promotionLeaderInfo[\'user_id\']);\r\n            $trans->commit();\r\n        } catch (\\Exception $e) {\r\n            $trans->rollback();\r\n            throw $e; \r\n        }   \r\n        return [\'errno\' => 200, \'errmsg\' => \'推广组长数据操作成功\'];\r\n</pre>\r\n\r\n\r\n7. 错误码尽可能 整个系统唯一，方便迅速定位错误。\r\n   \r\n   当后端与FE通过json数据 交互的时候，一般来说，0或者200代表ok，其他代表错误就能满足需求，所以在需求层面上，错误码的定义无关紧要，所以一些系统返回400，500，这种仿 http的错误码。\r\n   出于排查错误的目的而言，错误码应该尽可能的唯一，当看到系统返回的内容的时候，大概就清楚这段文本大概是系统那段代码处理返回的。比如上面demo 程序中 18400177 ，这种错误码肯定系统内很难重复，生成规则是当前光标所在的列数 + 400（错误的性质,仿http错误码） + 当前行号，某些ide还可以加上当前文件总行数等，达到一个更加随机的错误码。\r\n    当然，还有其他的方式，比如在返回值里面，加冗余字段，标明返回数据在系统的位置信息，也可以。\r\n    这种全随机的方式，缺点在于很难对所有的错误进行一个统计的归类处理。\r\n\r\n8. 尽量使用静态方法，减少new的数量。\r\n   \r\n   将代码 主要 用来处理逻辑上，而非各种语言的语法上，与效率无关，只是为了代码的可读性，如下面的两个demo，既然new 可以去掉，就尽量减少代码行数，增加可读性，重心在逻辑，而非语法。\r\n   \r\n  反面demo：\r\n<pre>\r\n  function test() {\r\n      $modelA = new ModelA;\r\n      $userId =  $modelA->getInfo($_GET[\'id\']);\r\n      $modelB = new ModelB;\r\n      return $modelB->getList($userId);\r\n  }\r\n</pre>\r\n 推荐例程：\r\n<pre>\r\n  function test() {\r\n      $userId =  modelA::getInfo($_GET[\'id\']);\r\n      return $modelB::getList($userId);\r\n  }\r\n</pre>\r\n','编程规范','','inherit','open','open','','623-revision-v1','','','2016-09-23 18:53:56','2016-09-23 18:53:56','',623,'http://unasm.com/2016/09/636/',0,'revision','',0),(638,1,'2016-09-23 18:56:16','2016-09-23 18:56:16','下面是我对怎么样 写代码才能够 降低系统的复杂性，增加可读性的一些思考和建议，凡事不可绝对，存在即合理，所以我会用一些，尽量或者尽可能等词汇等，表明大部分情况下遵循这些建议应该是比较优的。\r\n\r\n代码规范：\r\n\r\n1.尽量使用抛异常的方式，返回错误码的方式，或者自定义的返回错误的方式\r\n\r\n如果 调用函数的时候，函数内部发生了错误，上层如何知道内部发生了错误，发生了哪种错误？ 以前尝试过调用函数的时候，函数返回 [errno =&gt; 2011021 , errmsg =&gt; \'连接数据库超时\', data =&gt; [] ]这种格式的数据，如果errno 为0的时候代表正常，需要的数据在data中，否则错误原因和错误类型可以根据 errno, errmsg 确定。\r\n\r\n比如\r\n\r\n<pre>$data = getChannelList($id);\r\nif ($data[\'errno\'] !== 0 ) {\r\n\r\n}\r\n</pre>\r\n\r\n但是这样做的坏处是 整个代码里面，充满了errno的判断。而这些判断，就经验而论，更多的是一层层的传递给上层，直到最后返回给用户。\r\n\r\n异常的方式给了错误一种默认处理方式，就是<strong>直接中断请求，直接结束，处理错误</strong>（展示或者记录日志），而不需要层层传递，简单粗暴，但是非常适合web开发，Web开发的每个请求处理，一般如流一般，层层检查处理，直到最后保存数据或者返回数据，中间有错误，如果有错误，告知用户错误原因，所以这种情况下，抛异常的中断的方式非常适合， 如果外界需要特殊处理异常，或者某函数异常不影响请求流， 可以在外层try catch，屏蔽错误。\r\n\r\n2. function 内部 尽量 避免使用this，尽量避免 new 对象。\r\n\r\n   编程就应该就像堆积木一样简单，如果一个func ,其参数就是全部输入，return 的值就是全部的返回值，那花括号包裹的代码块就是一个整体，就是一块积木。\r\n当阅读到这个func的时候，拿到了全部的传入参数，一行行走下去，总是能够理解这个func的作用的, 而不需要回溯到某个上层，看某个this-&gt;属性 是如何设置的，对此时的func的行为有着怎样的影响。\r\n比如下面的Class Excel , 调用的时候先new 一个 对象初始化Data，然后中间经过一些逻辑，然后开始调用某功能函数A，当读到$this-&gt;data的时候，第一件事情，是不是先想下，$this-&gt;data 存储的值是什么？什么时间存储的，中间有没有调用setData,调用了几次， 哪里调用的，影响有多大？为了明确这些可能的疑问而回溯到上层代码，就增加了系统的复杂性。换言之， formatMultiRegions 与 __construct 以及 setData 交叠在一起，共同完成了 一件事情，而交叠的部分，可能与其他的逻辑也是混杂在一起，增加理解成本。\r\n所以如果按照我建议的话，此处应该 改成 Excel_Better, 需要用到功能函数formatMultiRegions的时候， 传入参数Data，整个formatMultiRegions 的行为 就仅仅与data 有关，并不需要关心data经历过怎么样的处理变化,也并不需要回溯到 上层代码才能理解本函数,也就是 formatMultiRegions 就是一块被此时此刻才被用到的积木。\r\n调用之前不知道其存在，调用之后不必在意其存在过，如流水一般，流过了，就不再需要关心，只是想要的数据向下传递。\r\n\r\n反面栗子：\r\n<pre>namespace app\\models; \r\nuse Yii; \r\nclass Excel \r\n{     \r\n    protected $data = null;     \r\n    //初始化Excel对象     \r\n    public function __construct(Array &$data)     {           \r\n         $this--->phpExcel = new \\PHPExcel();\r\n        $this-&gt;data = $data;\r\n    }   \r\n    //某功能函数A\r\n    public function formatMultiRegions()\r\n    {   \r\n        $data = $this-&gt;data;\r\n        if ($data) { \r\n  \r\n        }\r\n        $mark = array_values(array_splice($data, 0, 1));\r\n        return $mark;\r\n    }   \r\n    //某功能函数B\r\n    public function formatPie()\r\n    {   \r\n        $data = $this-&gt;data;\r\n        foreach ($data as $region=&gt;$list) {\r\n\r\n        }   \r\n        return [$lines];\r\n    }  \r\n    // 修改data值\r\n    private function setData($data)\r\n    {   \r\n        $this-&gt;data = $data;\r\n    }   \r\n}\r\n</pre>\r\n\r\n推荐 demo :\r\n<pre>namespace app\\models; \r\nuse Yii; \r\nclass Excel_Better\r\n{     \r\n     //某功能函数A     \r\n    public static function formatMultiRegions($data)     \r\n    {            \r\n       if ($data) {            \r\n       }         \r\n       $mark = array_values(array_splice($data, 0, 1));         \r\n       return $mark;     \r\n    }        \r\n    //某功能函数B     \r\n    public static function formatPie($data)     \r\n    {            \r\n        foreach ($data as $region=-->$list){\r\n\r\n        }   \r\n        return [$lines];\r\n    }  \r\n}\r\n</pre>\r\n\r\n3，异常 集中处理\r\n\r\n   换言之，如果捕获到了异常，打算怎么办呢？如果没有特殊需求，不如不处理，在项目的某一处函数几种处理异常，根据不同的异常类型，根据不同的环境，选择不同的展示方式。\r\n   但是有些情况，比如超时重连，或者 异步通知重试等有特殊处理的需求的时候，建议捕获异常，并酌情处理。\r\n\r\n4. 日志 尽量记录 完整的上下文，能够复现当时的场景 ，\r\n\r\n    一 . 更新数据库的日志至少需要记录四项 where条件，原来的数据，新的数据，更新的数据库返回值。\r\n\r\n    二 . 异常日志要记录 输入数据，错误代码行号，错误文件，错误原因，最好记录调用栈。、\r\n   \r\n    三 . 对于一个记录用户请求的 日志来说，应该记录下，POST，GET 参数，用户的uid(如果有)，处理该请求的机器，以及系统的返回值\r\n\r\n\r\n5. 尽量避免if 的层层嵌套，遇到错误 直接返回或者处理，避免过长的代码段之间，互相牵扯\r\n\r\n反面demo :\r\n<pre>       if(!empty($id)) {\r\n                $data = Channel::findIdentity($id);\r\n                if(!empty($data)) {\r\n                    $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \r\n                    if ($result) {\r\n                        $logData = [\r\n                            \'user_id\' =&gt; $user_id,\r\n                            \'to_user_id\' =&gt; $data[\'user_id\'],\r\n                            \'create_time\' =&gt; time(),\r\n                            \'status\' =&gt; OperatLog::STATUS_DEL,\r\n                            \'reason\' =&gt; $delReason,\r\n                            \'type\' =&gt; OperatLog::TYPE_CHANNEL,\r\n                            \'old_data\' =&gt; json_encode($data),\r\n                        ];   \r\n                        OperatLog::addInfo($logData);\r\n                        return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\r\n                    }    \r\n                    return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\r\n                }    \r\n                return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\r\n            }    \r\n            return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\r\n</pre>\r\n这个 其实是一个还能接受的代码段，某种意义上，还有点美感， 但是如果if 包裹的代码段 超过一屏， 则理解成本就会变得难以接受。\r\n当我们看到一个if的时候， 我们需要 知道if 的 判断条件，开始和结束，是否有else 等，当我们看到 第二个 if 的时候，我们需要 知道 被第一个 通过的情况下进入的，然后同样需要 了解 if 的开始 结束等，然后第三个， 当我们读完第三个 if 退出的时候，需要了解第二个是否有else ， if/else 块 之后又 是什么，当前段代码是在第几个if块 之后，等等。总之if的嵌套增大了代码的理解成本。\r\n\r\n代码应该是 像 积木一样一块块累积起来的，不同的积木之间，应该尽量减少牵扯。\r\n所以按照我的想法，代码应该写成如下：\r\n<pre>         if(empty($id)) {\r\n               return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\r\n         }\r\n         $data = Channel::findIdentity($id);\r\n         if(!empty($data)) {\r\n             return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\r\n         }\r\n  \r\n         $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \r\n         if (!$result) {\r\n             return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\r\n         }\r\n \r\n         $logData = [\r\n               \'user_id\' =&gt; $user_id,\r\n               \'to_user_id\' =&gt; $data[\'user_id\'],\r\n               \'create_time\' =&gt; time(),\r\n               \'status\' =&gt; OperatLog::STATUS_DEL,\r\n               \'reason\' =&gt; $delReason,\r\n               \'type\' =&gt; OperatLog::TYPE_CHANNEL,\r\n               \'old_data\' =&gt; json_encode($data),\r\n         ];   \r\n         OperatLog::addInfo($logData);\r\n         return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\r\n     \r\n</pre>\r\n\r\n\r\n6. 多表更新或者 删除，添加数据，多个sql语句，加上事务和回滚，原因相信无可争议，只是很多人未必注意。\r\n    虽然一般情况下不加事务也不会出问题，但是有了问题，就要修数据，修数据就可能引出各种问题。\r\n   个人 比较推崇的一个模板如下，try catch 只有 两个出口，要不一直走到commit，要不在catch里面rollback.\r\n\r\n<pre>   $trans = Yii::$app->db->beginTransaction();\r\n        try {\r\n            $promotionAddData = array(\r\n                //\'region_manage\' => $region_manage_id,\r\n                \'update_time\' => time(),\r\n                \'update_user_id\' => UserService::getUserId(),\r\n                \'is_deleted\' => 1,\r\n            );  \r\n            $isUpdate = PromotionLeader::updateInfo($id, $promotionAddData);\r\n            if (!$isUpdate) {\r\n                throw new JdbException(\'更新数据库异常\', 18400177);\r\n            }   \r\n            UserAccount::deleteRow($promotionLeaderInfo[\'user_id\']);\r\n            $trans->commit();\r\n        } catch (\\Exception $e) {\r\n            $trans->rollback();\r\n            throw $e; \r\n        }   \r\n        return [\'errno\' => 200, \'errmsg\' => \'推广组长数据操作成功\'];\r\n</pre>\r\n\r\n\r\n7. 错误码尽可能 整个系统唯一，方便迅速定位错误。\r\n   \r\n   当后端与FE通过json数据 交互的时候，一般来说，0或者200代表ok，其他代表错误就能满足需求，所以在需求层面上，错误码的定义无关紧要，所以一些系统返回400，500，这种仿 http的错误码。\r\n   出于排查错误的目的而言，错误码应该尽可能的唯一，当看到系统返回的内容的时候，大概就清楚这段文本大概是系统那段代码处理返回的。比如上面demo 程序中 18400177 ，这种错误码肯定系统内很难重复，生成规则是当前光标所在的列数 + 400（错误的性质,仿http错误码） + 当前行号，某些ide还可以加上当前文件总行数等，达到一个更加随机的错误码。\r\n    当然，还有其他的方式，比如在返回值里面，加冗余字段，标明返回数据在系统的位置信息，也可以。\r\n    这种全随机的方式，缺点在于很难对所有的错误进行一个统计的归类处理。\r\n\r\n8. 尽量使用静态方法，减少new的数量。\r\n   \r\n   将代码 主要 用来处理逻辑上，而非各种语言的语法上，与效率无关，只是为了代码的可读性，如下面的两个demo，既然new 可以去掉，就尽量减少代码行数，增加可读性，重心在逻辑，而非语法。\r\n   \r\n  反面demo：\r\n<pre>\r\n  function test() {\r\n      $modelA = new ModelA;\r\n      $userId =  $modelA->getInfo($_GET[\'id\']);\r\n      $modelB = new ModelB;\r\n      return $modelB->getList($userId);\r\n  }\r\n</pre>\r\n 推荐例程：\r\n<pre>\r\n  function test() {\r\n      $userId =  modelA::getInfo($_GET[\'id\']);\r\n      return $modelB::getList($userId);\r\n  }\r\n</pre>\r\n','编程规范','','inherit','open','open','','623-revision-v1','','','2016-09-23 18:56:16','2016-09-23 18:56:16','',623,'http://unasm.com/2016/09/638/',0,'revision','',0),(637,1,'2016-09-23 18:55:38','2016-09-23 18:55:38','下面是我对怎么样 写代码才能够 降低系统的复杂性，增加可读性的一些思考和建议，凡事不可绝对，存在即合理，所以我会用一些，尽量或者尽可能等词汇等，表明大部分情况下遵循这些建议应该是比较优的。\r\n\r\n代码规范：\r\n\r\n1.尽量使用抛异常的方式，返回错误码的方式，或者自定义的返回错误的方式\r\n\r\n如果 调用函数的时候，函数内部发生了错误，上层如何知道内部发生了错误，发生了哪种错误？ 以前尝试过调用函数的时候，函数返回 [errno =&gt; 2011021 , errmsg =&gt; \'连接数据库超时\', data =&gt; [] ]这种格式的数据，如果errno 为0的时候代表正常，需要的数据在data中，否则错误原因和错误类型可以根据 errno, errmsg 确定。\r\n\r\n比如\r\n\r\n<pre>$data = getChannelList($id);\r\nif ($data[\'errno\'] !== 0 ) {\r\n\r\n}\r\n</pre>\r\n\r\n但是这样做的坏处是 整个代码里面，充满了errno的判断。而这些判断，就经验而论，更多的是一层层的传递给上层，直到最后返回给用户。\r\n\r\n异常的方式给了错误一种默认处理方式，就是<strong>直接中断请求，直接结束，处理错误</strong>（展示或者记录日志），而不需要层层传递，简单粗暴，但是非常适合web开发，Web开发的每个请求处理，一般如流一般，层层检查处理，直到最后保存数据或者返回数据，中间有错误，如果有错误，告知用户错误原因，所以这种情况下，抛异常的中断的方式非常适合， 如果外界需要特殊处理异常，或者某函数异常不影响请求流， 可以在外层try catch，屏蔽错误。\r\n\r\n2. function 内部 尽量 避免使用this，尽量避免 new 对象。\r\n\r\n   编程就应该就像堆积木一样简单，如果一个func ,其参数就是全部输入，return 的值就是全部的返回值，那花括号包裹的代码块就是一个整体，就是一块积木。\r\n当阅读到这个func的时候，拿到了全部的传入参数，一行行走下去，总是能够理解这个func的作用的, 而不需要回溯到某个上层，看某个this-&gt;属性 是如何设置的，对此时的func的行为有着怎样的影响。\r\n比如下面的Class Excel , 调用的时候先new 一个 对象初始化Data，然后中间经过一些逻辑，然后开始调用某功能函数A，当读到$this-&gt;data的时候，第一件事情，是不是先想下，$this-&gt;data 存储的值是什么？什么时间存储的，中间有没有调用setData,调用了几次， 哪里调用的，影响有多大？为了明确这些可能的疑问而回溯到上层代码，就增加了系统的复杂性。换言之， formatMultiRegions 与 __construct 以及 setData 交叠在一起，共同完成了 一件事情，而交叠的部分，可能与其他的逻辑也是混杂在一起，增加理解成本。\r\n所以如果按照我建议的话，此处应该 改成 Excel_Better, 需要用到功能函数formatMultiRegions的时候， 传入参数Data，整个formatMultiRegions 的行为 就仅仅与data 有关，并不需要关心data经历过怎么样的处理变化,也并不需要回溯到 上层代码才能理解本函数,也就是 formatMultiRegions 就是一块被此时此刻才被用到的积木。\r\n调用之前不知道其存在，调用之后不必在意其存在过，如流水一般，流过了，就不再需要关心，只是想要的数据向下传递。\r\n\r\n反面栗子：\r\n<pre>\r\nnamespace app\\models; \r\nuse Yii; \r\nclass Excel \r\n{     \r\n    protected $data = null;     \r\n    //初始化Excel对象     \r\n    public function __construct(Array &$data)     {           \r\n         $this--->phpExcel = new \\PHPExcel();\r\n        $this-&gt;data = $data;\r\n    }   \r\n    //某功能函数A\r\n    public function formatMultiRegions()\r\n    {   \r\n        $data = $this-&gt;data;\r\n        if ($data) { \r\n  \r\n        }\r\n        $mark = array_values(array_splice($data, 0, 1));\r\n        return $mark;\r\n    }   \r\n    //某功能函数B\r\n    public function formatPie()\r\n    {   \r\n        $data = $this-&gt;data;\r\n        foreach ($data as $region=&gt;$list) {\r\n\r\n        }   \r\n        return [$lines];\r\n    }  \r\n    // 修改data值\r\n    private function setData($data)\r\n    {   \r\n        $this-&gt;data = $data;\r\n    }   \r\n}\r\n</pre>\r\n\r\n推荐 demo :\r\n<pre>\r\nnamespace app\\models; \r\nuse Yii; \r\nclass Excel_Better\r\n{     \r\n     //某功能函数A     \r\n    public static function formatMultiRegions($data)     \r\n    {            \r\n       if ($data) {            \r\n       }         \r\n       $mark = array_values(array_splice($data, 0, 1));         \r\n       return $mark;     \r\n    }        \r\n    //某功能函数B     \r\n    public static function formatPie($data)     \r\n    {            \r\n        foreach ($data as $region=-->$list){\r\n\r\n        }   \r\n        return [$lines];\r\n    }  \r\n}\r\n</pre>\r\n\r\n3，异常 集中处理\r\n\r\n   换言之，如果捕获到了异常，打算怎么办呢？如果没有特殊需求，不如不处理，在项目的某一处函数几种处理异常，根据不同的异常类型，根据不同的环境，选择不同的展示方式。\r\n   但是有些情况，比如超时重连，或者 异步通知重试等有特殊处理的需求的时候，建议捕获异常，并酌情处理。\r\n\r\n4. 日志 尽量记录 完整的上下文，能够复现当时的场景 ，\r\n\r\n    一 . 更新数据库的日志至少需要记录四项 where条件，原来的数据，新的数据，更新的数据库返回值。\r\n\r\n    二 . 异常日志要记录 输入数据，错误代码行号，错误文件，错误原因，最好记录调用栈。、\r\n   \r\n    三 . 对于一个记录用户请求的 日志来说，应该记录下，POST，GET 参数，用户的uid(如果有)，处理该请求的机器，以及系统的返回值\r\n\r\n\r\n5. 尽量避免if 的层层嵌套，遇到错误 直接返回或者处理，避免过长的代码段之间，互相牵扯\r\n\r\n反面demo :\r\n<pre>           \r\n            if(!empty($id)) {\r\n                $data = Channel::findIdentity($id);\r\n                if(!empty($data)) {\r\n                    $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \r\n                    if ($result) {\r\n                        $logData = [\r\n                            \'user_id\' =&gt; $user_id,\r\n                            \'to_user_id\' =&gt; $data[\'user_id\'],\r\n                            \'create_time\' =&gt; time(),\r\n                            \'status\' =&gt; OperatLog::STATUS_DEL,\r\n                            \'reason\' =&gt; $delReason,\r\n                            \'type\' =&gt; OperatLog::TYPE_CHANNEL,\r\n                            \'old_data\' =&gt; json_encode($data),\r\n                        ];   \r\n                        OperatLog::addInfo($logData);\r\n                        return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\r\n                    }    \r\n                    return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\r\n                }    \r\n                return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\r\n            }    \r\n            return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\r\n</pre>\r\n这个 其实是一个还能接受的代码段，某种意义上，还有点美感， 但是如果if 包裹的代码段 超过一屏， 则理解成本就会变得难以接受。\r\n当我们看到一个if的时候， 我们需要 知道if 的 判断条件，开始和结束，是否有else 等，当我们看到 第二个 if 的时候，我们需要 知道 被第一个 通过的情况下进入的，然后同样需要 了解 if 的开始 结束等，然后第三个， 当我们读完第三个 if 退出的时候，需要了解第二个是否有else ， if/else 块 之后又 是什么，当前段代码是在第几个if块 之后，等等。总之if的嵌套增大了代码的理解成本。\r\n\r\n代码应该是 像 积木一样一块块累积起来的，不同的积木之间，应该尽量减少牵扯。\r\n所以按照我的想法，代码应该写成如下：\r\n<pre>         if(empty($id)) {\r\n               return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\r\n         }\r\n         $data = Channel::findIdentity($id);\r\n         if(!empty($data)) {\r\n             return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\r\n         }\r\n  \r\n         $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \r\n         if (!$result) {\r\n             return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\r\n         }\r\n \r\n         $logData = [\r\n               \'user_id\' =&gt; $user_id,\r\n               \'to_user_id\' =&gt; $data[\'user_id\'],\r\n               \'create_time\' =&gt; time(),\r\n               \'status\' =&gt; OperatLog::STATUS_DEL,\r\n               \'reason\' =&gt; $delReason,\r\n               \'type\' =&gt; OperatLog::TYPE_CHANNEL,\r\n               \'old_data\' =&gt; json_encode($data),\r\n         ];   \r\n         OperatLog::addInfo($logData);\r\n         return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\r\n     \r\n</pre>\r\n\r\n\r\n6. 多表更新或者 删除，添加数据，多个sql语句，加上事务和回滚，原因相信无可争议，只是很多人未必注意。\r\n    虽然一般情况下不加事务也不会出问题，但是有了问题，就要修数据，修数据就可能引出各种问题。\r\n   个人 比较推崇的一个模板如下，try catch 只有 两个出口，要不一直走到commit，要不在catch里面rollback.\r\n\r\n<pre>\r\n        $trans = Yii::$app->db->beginTransaction();\r\n        try {\r\n            $promotionAddData = array(\r\n                //\'region_manage\' => $region_manage_id,\r\n                \'update_time\' => time(),\r\n                \'update_user_id\' => UserService::getUserId(),\r\n                \'is_deleted\' => 1,\r\n            );  \r\n            $isUpdate = PromotionLeader::updateInfo($id, $promotionAddData);\r\n            if (!$isUpdate) {\r\n                throw new JdbException(\'更新数据库异常\', 18400177);\r\n            }   \r\n            UserAccount::deleteRow($promotionLeaderInfo[\'user_id\']);\r\n            $trans->commit();\r\n        } catch (\\Exception $e) {\r\n            $trans->rollback();\r\n            throw $e; \r\n        }   \r\n        return [\'errno\' => 200, \'errmsg\' => \'推广组长数据操作成功\'];\r\n</pre>\r\n\r\n\r\n7. 错误码尽可能 整个系统唯一，方便迅速定位错误。\r\n   \r\n   当后端与FE通过json数据 交互的时候，一般来说，0或者200代表ok，其他代表错误就能满足需求，所以在需求层面上，错误码的定义无关紧要，所以一些系统返回400，500，这种仿 http的错误码。\r\n   出于排查错误的目的而言，错误码应该尽可能的唯一，当看到系统返回的内容的时候，大概就清楚这段文本大概是系统那段代码处理返回的。比如上面demo 程序中 18400177 ，这种错误码肯定系统内很难重复，生成规则是当前光标所在的列数 + 400（错误的性质,仿http错误码） + 当前行号，某些ide还可以加上当前文件总行数等，达到一个更加随机的错误码。\r\n    当然，还有其他的方式，比如在返回值里面，加冗余字段，标明返回数据在系统的位置信息，也可以。\r\n    这种全随机的方式，缺点在于很难对所有的错误进行一个统计的归类处理。\r\n\r\n8. 尽量使用静态方法，减少new的数量。\r\n   \r\n   将代码 主要 用来处理逻辑上，而非各种语言的语法上，与效率无关，只是为了代码的可读性，如下面的两个demo，既然new 可以去掉，就尽量减少代码行数，增加可读性，重心在逻辑，而非语法。\r\n   \r\n  反面demo：\r\n<pre>\r\n  function test() {\r\n      $modelA = new ModelA;\r\n      $userId =  $modelA->getInfo($_GET[\'id\']);\r\n      $modelB = new ModelB;\r\n      return $modelB->getList($userId);\r\n  }\r\n</pre>\r\n 推荐例程：\r\n<pre>\r\n  function test() {\r\n      $userId =  modelA::getInfo($_GET[\'id\']);\r\n      return $modelB::getList($userId);\r\n  }\r\n</pre>\r\n','编程规范','','inherit','open','open','','623-revision-v1','','','2016-09-23 18:55:38','2016-09-23 18:55:38','',623,'http://unasm.com/2016/09/637/',0,'revision','',0),(640,1,'2016-09-23 18:58:36','2016-09-23 18:58:36','下面是我对怎么样 写代码才能够 降低系统的复杂性，增加可读性的一些思考和建议，凡事不可绝对，存在即合理，所以我会用一些，尽量或者尽可能等词汇等，表明大部分情况下遵循这些建议应该是比较优的。\r\n\r\n代码规范：\r\n\r\n<strong>1.尽量使用抛异常的方式，返回错误码的方式，或者自定义的返回错误的方式</strong>\r\n\r\n如果 调用函数的时候，函数内部发生了错误，上层如何知道内部发生了错误，发生了哪种错误？ 以前尝试过调用函数的时候，函数返回 [errno =&gt; 2011021 , errmsg =&gt; \'连接数据库超时\', data =&gt; [] ]这种格式的数据，如果errno 为0的时候代表正常，需要的数据在data中，否则错误原因和错误类型可以根据 errno, errmsg 确定。\r\n\r\n比如\r\n<pre>$data = getChannelList($id);\r\nif ($data[\'errno\'] !== 0 ) {\r\n\r\n}\r\n</pre>\r\n但是这样做的坏处是 整个代码里面，充满了errno的判断。而这些判断，就经验而论，更多的是一层层的传递给上层，直到最后返回给用户。\r\n\r\n异常的方式给了错误一种默认处理方式，就是<strong>直接中断请求，直接结束，处理错误</strong>（展示或者记录日志），而不需要层层传递，简单粗暴，但是非常适合web开发，Web开发的每个请求处理，一般如流一般，层层检查处理，直到最后保存数据或者返回数据，中间有错误，如果有错误，告知用户错误原因，所以这种情况下，抛异常的中断的方式非常适合， 如果外界需要特殊处理异常，或者某函数异常不影响请求流， 可以在外层try catch，屏蔽错误。\r\n\r\n<strong>2. function 内部 尽量 避免使用this，尽量避免 new 对象。</strong>\r\n\r\n编程就应该就像堆积木一样简单，如果一个func ,其参数就是全部输入，return 的值就是全部的返回值，那花括号包裹的代码块就是一个整体，就是一块积木。\r\n当阅读到这个func的时候，拿到了全部的传入参数，一行行走下去，总是能够理解这个func的作用的, 而不需要回溯到某个上层，看某个this-&gt;属性 是如何设置的，对此时的func的行为有着怎样的影响。\r\n 比如下面的Class Excel , 调用的时候先new 一个 对象初始化Data，然后中间经过一些逻辑，然后开始调用某功能函数A，当读到$this-&gt;data的时候，第一件事情，是不是先想下，$this-&gt;data 存储的值是什么？什么时间存储的，中间有没有调用setData,调用了几次， 哪里调用的，影响有多大？为了明确这些可能的疑问而回溯到上层代码，就增加了系统的复杂性。换言之， formatMultiRegions 与 __construct 以及 setData 交叠在一起，共同完成了 一件事情，而交叠的部分，可能与其他的逻辑也是混杂在一起，增加理解成本。\r\n 所以如果按照我建议的话，此处应该 改成 Excel_Better, 需要用到功能函数formatMultiRegions的时候， 传入参数Data，整个formatMultiRegions 的行为 就仅仅与data 有关，并不需要关心data经历过怎么样的处理变化,也并不需要回溯到 上层代码才能理解本函数,也就是 formatMultiRegions 就是一块被此时此刻才被用到的积木。\r\n  调用之前不知道其存在，调用之后不必在意其存在过，如流水一般，流过了，就不再需要关心，只是想要的数据向下传递。\r\n\r\n反面栗子：\r\n<pre>namespace app\\models; \r\nuse Yii; \r\nclass Excel \r\n{     \r\n    protected $data = null;     \r\n    //初始化Excel对象     \r\n    public function __construct(Array &amp;$data)     {           \r\n         $this---&gt;phpExcel = new \\PHPExcel();\r\n        $this-&gt;data = $data;\r\n    }   \r\n    //某功能函数A\r\n    public function formatMultiRegions()\r\n    {   \r\n        $data = $this-&gt;data;\r\n        if ($data) { \r\n  \r\n        }\r\n        $mark = array_values(array_splice($data, 0, 1));\r\n        return $mark;\r\n    }   \r\n    //某功能函数B\r\n    public function formatPie()\r\n    {   \r\n        $data = $this-&gt;data;\r\n        foreach ($data as $region=&gt;$list) {\r\n\r\n        }   \r\n        return [$lines];\r\n    }  \r\n    // 修改data值\r\n    private function setData($data)\r\n    {   \r\n        $this-&gt;data = $data;\r\n    }   \r\n}\r\n</pre>\r\n推荐 demo :\r\n<pre>namespace app\\models; \r\nuse Yii; \r\nclass Excel_Better\r\n{     \r\n     //某功能函数A     \r\n    public static function formatMultiRegions($data)     \r\n    {            \r\n       if ($data) {            \r\n       }         \r\n       $mark = array_values(array_splice($data, 0, 1));         \r\n       return $mark;     \r\n    }        \r\n    //某功能函数B     \r\n    public static function formatPie($data)     \r\n    {            \r\n        foreach ($data as $region=--&gt;$list){\r\n\r\n        }   \r\n        return [$lines];\r\n    }  \r\n}\r\n</pre>\r\n3，异常 集中处理\r\n\r\n换言之，如果捕获到了异常，打算怎么办呢？如果没有特殊需求，不如不处理，在项目的某一处函数几种处理异常，根据不同的异常类型，根据不同的环境，选择不同的展示方式。\r\n但是有些情况，比如超时重连，或者 异步通知重试等有特殊处理的需求的时候，建议捕获异常，并酌情处理。\r\n\r\n4. 日志 尽量记录 完整的上下文，能够复现当时的场景 ，\r\n\r\n一 . 更新数据库的日志至少需要记录四项 where条件，原来的数据，新的数据，更新的数据库返回值。\r\n\r\n二 . 异常日志要记录 输入数据，错误代码行号，错误文件，错误原因，最好记录调用栈。、\r\n\r\n三 . 对于一个记录用户请求的 日志来说，应该记录下，POST，GET 参数，用户的uid(如果有)，处理该请求的机器，以及系统的返回值\r\n\r\n5. 尽量避免if 的层层嵌套，遇到错误 直接返回或者处理，避免过长的代码段之间，互相牵扯\r\n\r\n反面demo :\r\n<pre>       if(!empty($id)) {\r\n                $data = Channel::findIdentity($id);\r\n                if(!empty($data)) {\r\n                    $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \r\n                    if ($result) {\r\n                        $logData = [\r\n                            \'user_id\' =&gt; $user_id,\r\n                            \'to_user_id\' =&gt; $data[\'user_id\'],\r\n                            \'create_time\' =&gt; time(),\r\n                            \'status\' =&gt; OperatLog::STATUS_DEL,\r\n                            \'reason\' =&gt; $delReason,\r\n                            \'type\' =&gt; OperatLog::TYPE_CHANNEL,\r\n                            \'old_data\' =&gt; json_encode($data),\r\n                        ];   \r\n                        OperatLog::addInfo($logData);\r\n                        return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\r\n                    }    \r\n                    return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\r\n                }    \r\n                return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\r\n            }    \r\n            return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\r\n</pre>\r\n这个 其实是一个还能接受的代码段，某种意义上，还有点美感， 但是如果if 包裹的代码段 超过一屏， 则理解成本就会变得难以接受。\r\n当我们看到一个if的时候， 我们需要 知道if 的 判断条件，开始和结束，是否有else 等，当我们看到 第二个 if 的时候，我们需要 知道 被第一个 通过的情况下进入的，然后同样需要 了解 if 的开始 结束等，然后第三个， 当我们读完第三个 if 退出的时候，需要了解第二个是否有else ， if/else 块 之后又 是什么，当前段代码是在第几个if块 之后，等等。总之if的嵌套增大了代码的理解成本。\r\n\r\n代码应该是 像 积木一样一块块累积起来的，不同的积木之间，应该尽量减少牵扯。\r\n所以按照我的想法，代码应该写成如下：\r\n<pre>         if(empty($id)) {\r\n               return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\r\n         }\r\n         $data = Channel::findIdentity($id);\r\n         if(!empty($data)) {\r\n             return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\r\n         }\r\n  \r\n         $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \r\n         if (!$result) {\r\n             return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\r\n         }\r\n \r\n         $logData = [\r\n               \'user_id\' =&gt; $user_id,\r\n               \'to_user_id\' =&gt; $data[\'user_id\'],\r\n               \'create_time\' =&gt; time(),\r\n               \'status\' =&gt; OperatLog::STATUS_DEL,\r\n               \'reason\' =&gt; $delReason,\r\n               \'type\' =&gt; OperatLog::TYPE_CHANNEL,\r\n               \'old_data\' =&gt; json_encode($data),\r\n         ];   \r\n         OperatLog::addInfo($logData);\r\n         return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\r\n     \r\n</pre>\r\n6. 多表更新或者 删除，添加数据，多个sql语句，加上事务和回滚，原因相信无可争议，只是很多人未必注意。\r\n虽然一般情况下不加事务也不会出问题，但是有了问题，就要修数据，修数据就可能引出各种问题。\r\n个人 比较推崇的一个模板如下，try catch 只有 两个出口，要不一直走到commit，要不在catch里面rollback.\r\n<pre>   $trans = Yii::$app-&gt;db-&gt;beginTransaction();\r\n        try {\r\n            $promotionAddData = array(\r\n                //\'region_manage\' =&gt; $region_manage_id,\r\n                \'update_time\' =&gt; time(),\r\n                \'update_user_id\' =&gt; UserService::getUserId(),\r\n                \'is_deleted\' =&gt; 1,\r\n            );  \r\n            $isUpdate = PromotionLeader::updateInfo($id, $promotionAddData);\r\n            if (!$isUpdate) {\r\n                throw new JdbException(\'更新数据库异常\', 18400177);\r\n            }   \r\n            UserAccount::deleteRow($promotionLeaderInfo[\'user_id\']);\r\n            $trans-&gt;commit();\r\n        } catch (\\Exception $e) {\r\n            $trans-&gt;rollback();\r\n            throw $e; \r\n        }   \r\n        return [\'errno\' =&gt; 200, \'errmsg\' =&gt; \'推广组长数据操作成功\'];\r\n</pre>\r\n7. 错误码尽可能 整个系统唯一，方便迅速定位错误。\r\n\r\n当后端与FE通过json数据 交互的时候，一般来说，0或者200代表ok，其他代表错误就能满足需求，所以在需求层面上，错误码的定义无关紧要，所以一些系统返回400，500，这种仿 http的错误码。\r\n出于排查错误的目的而言，错误码应该尽可能的唯一，当看到系统返回的内容的时候，大概就清楚这段文本大概是系统那段代码处理返回的。比如上面demo 程序中 18400177 ，这种错误码肯定系统内很难重复，生成规则是当前光标所在的列数 + 400（错误的性质,仿http错误码） + 当前行号，某些ide还可以加上当前文件总行数等，达到一个更加随机的错误码。\r\n当然，还有其他的方式，比如在返回值里面，加冗余字段，标明返回数据在系统的位置信息，也可以。\r\n这种全随机的方式，缺点在于很难对所有的错误进行一个统计的归类处理。\r\n\r\n8. 尽量使用静态方法，减少new的数量。\r\n\r\n将代码 主要 用来处理逻辑上，而非各种语言的语法上，与效率无关，只是为了代码的可读性，如下面的两个demo，既然new 可以去掉，就尽量减少代码行数，增加可读性，重心在逻辑，而非语法。\r\n\r\n反面demo：\r\n<pre>  function test() {\r\n      $modelA = new ModelA;\r\n      $userId =  $modelA-&gt;getInfo($_GET[\'id\']);\r\n      $modelB = new ModelB;\r\n      return $modelB-&gt;getList($userId);\r\n  }\r\n</pre>\r\n推荐例程：\r\n<pre>  function test() {\r\n      $userId =  modelA::getInfo($_GET[\'id\']);\r\n      return $modelB::getList($userId);\r\n  }\r\n</pre>','编程规范','','inherit','open','open','','623-revision-v1','','','2016-09-23 18:58:36','2016-09-23 18:58:36','',623,'http://unasm.com/2016/09/640/',0,'revision','',0),(639,1,'2016-09-23 18:57:40','2016-09-23 18:57:40','下面是我对怎么样 写代码才能够 降低系统的复杂性，增加可读性的一些思考和建议，凡事不可绝对，存在即合理，所以我会用一些，尽量或者尽可能等词汇等，表明大部分情况下遵循这些建议应该是比较优的。\r\n\r\n代码规范：\r\n\r\n<strong>1.尽量使用抛异常的方式，返回错误码的方式，或者自定义的返回错误的方式</strong>\r\n\r\n如果 调用函数的时候，函数内部发生了错误，上层如何知道内部发生了错误，发生了哪种错误？ 以前尝试过调用函数的时候，函数返回 [errno =&gt; 2011021 , errmsg =&gt; \'连接数据库超时\', data =&gt; [] ]这种格式的数据，如果errno 为0的时候代表正常，需要的数据在data中，否则错误原因和错误类型可以根据 errno, errmsg 确定。\r\n\r\n比如\r\n<pre>$data = getChannelList($id);\r\nif ($data[\'errno\'] !== 0 ) {\r\n\r\n}\r\n</pre>\r\n但是这样做的坏处是 整个代码里面，充满了errno的判断。而这些判断，就经验而论，更多的是一层层的传递给上层，直到最后返回给用户。\r\n\r\n异常的方式给了错误一种默认处理方式，就是<strong>直接中断请求，直接结束，处理错误</strong>（展示或者记录日志），而不需要层层传递，简单粗暴，但是非常适合web开发，Web开发的每个请求处理，一般如流一般，层层检查处理，直到最后保存数据或者返回数据，中间有错误，如果有错误，告知用户错误原因，所以这种情况下，抛异常的中断的方式非常适合， 如果外界需要特殊处理异常，或者某函数异常不影响请求流， 可以在外层try catch，屏蔽错误。\r\n\r\n<strong>2. function 内部 尽量 避免使用this，尽量避免 new 对象。</strong>\r\n\r\n<strong>编程就应该就像堆积木一样简单，如果一个func ,其参数就是全部输入，return 的值就是全部的返回值，那花括号包裹的代码块就是一个整体，就是一块积木。</strong>\r\n<strong> 当阅读到这个func的时候，拿到了全部的传入参数，一行行走下去，总是能够理解这个func的作用的, 而不需要回溯到某个上层，看某个this-&gt;属性 是如何设置的，对此时的func的行为有着怎样的影响。</strong>\r\n<strong> 比如下面的Class Excel , 调用的时候先new 一个 对象初始化Data，然后中间经过一些逻辑，然后开始调用某功能函数A，当读到$this-&gt;data的时候，第一件事情，是不是先想下，$this-&gt;data 存储的值是什么？什么时间存储的，中间有没有调用setData,调用了几次， 哪里调用的，影响有多大？为了明确这些可能的疑问而回溯到上层代码，就增加了系统的复杂性。换言之， formatMultiRegions 与 __construct 以及 setData 交叠在一起，共同完成了 一件事情，而交叠的部分，可能与其他的逻辑也是混杂在一起，增加理解成本。</strong>\r\n<strong> 所以如果按照我建议的话，此处应该 改成 Excel_Better, 需要用到功能函数formatMultiRegions的时候， 传入参数Data，整个formatMultiRegions 的行为 就仅仅与data 有关，并不需要关心data经历过怎么样的处理变化,也并不需要回溯到 上层代码才能理解本函数,也就是 formatMultiRegions 就是一块被此时此刻才被用到的积木。</strong>\r\n<strong> 调用之前不知道其存在，调用之后不必在意其存在过，如流水一般，流过了，就不再需要关心，只是想要的数据向下传递。</strong>\r\n\r\n反面栗子：\r\n<pre>namespace app\\models; \r\nuse Yii; \r\nclass Excel \r\n{     \r\n    protected $data = null;     \r\n    //初始化Excel对象     \r\n    public function __construct(Array &amp;$data)     {           \r\n         $this---&gt;phpExcel = new \\PHPExcel();\r\n        $this-&gt;data = $data;\r\n    }   \r\n    //某功能函数A\r\n    public function formatMultiRegions()\r\n    {   \r\n        $data = $this-&gt;data;\r\n        if ($data) { \r\n  \r\n        }\r\n        $mark = array_values(array_splice($data, 0, 1));\r\n        return $mark;\r\n    }   \r\n    //某功能函数B\r\n    public function formatPie()\r\n    {   \r\n        $data = $this-&gt;data;\r\n        foreach ($data as $region=&gt;$list) {\r\n\r\n        }   \r\n        return [$lines];\r\n    }  \r\n    // 修改data值\r\n    private function setData($data)\r\n    {   \r\n        $this-&gt;data = $data;\r\n    }   \r\n}\r\n</pre>\r\n推荐 demo :\r\n<pre>namespace app\\models; \r\nuse Yii; \r\nclass Excel_Better\r\n{     \r\n     //某功能函数A     \r\n    public static function formatMultiRegions($data)     \r\n    {            \r\n       if ($data) {            \r\n       }         \r\n       $mark = array_values(array_splice($data, 0, 1));         \r\n       return $mark;     \r\n    }        \r\n    //某功能函数B     \r\n    public static function formatPie($data)     \r\n    {            \r\n        foreach ($data as $region=--&gt;$list){\r\n\r\n        }   \r\n        return [$lines];\r\n    }  \r\n}\r\n</pre>\r\n3，异常 集中处理\r\n\r\n换言之，如果捕获到了异常，打算怎么办呢？如果没有特殊需求，不如不处理，在项目的某一处函数几种处理异常，根据不同的异常类型，根据不同的环境，选择不同的展示方式。\r\n但是有些情况，比如超时重连，或者 异步通知重试等有特殊处理的需求的时候，建议捕获异常，并酌情处理。\r\n\r\n4. 日志 尽量记录 完整的上下文，能够复现当时的场景 ，\r\n\r\n一 . 更新数据库的日志至少需要记录四项 where条件，原来的数据，新的数据，更新的数据库返回值。\r\n\r\n二 . 异常日志要记录 输入数据，错误代码行号，错误文件，错误原因，最好记录调用栈。、\r\n\r\n三 . 对于一个记录用户请求的 日志来说，应该记录下，POST，GET 参数，用户的uid(如果有)，处理该请求的机器，以及系统的返回值\r\n\r\n5. 尽量避免if 的层层嵌套，遇到错误 直接返回或者处理，避免过长的代码段之间，互相牵扯\r\n\r\n反面demo :\r\n<pre>       if(!empty($id)) {\r\n                $data = Channel::findIdentity($id);\r\n                if(!empty($data)) {\r\n                    $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \r\n                    if ($result) {\r\n                        $logData = [\r\n                            \'user_id\' =&gt; $user_id,\r\n                            \'to_user_id\' =&gt; $data[\'user_id\'],\r\n                            \'create_time\' =&gt; time(),\r\n                            \'status\' =&gt; OperatLog::STATUS_DEL,\r\n                            \'reason\' =&gt; $delReason,\r\n                            \'type\' =&gt; OperatLog::TYPE_CHANNEL,\r\n                            \'old_data\' =&gt; json_encode($data),\r\n                        ];   \r\n                        OperatLog::addInfo($logData);\r\n                        return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\r\n                    }    \r\n                    return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\r\n                }    \r\n                return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\r\n            }    \r\n            return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\r\n</pre>\r\n这个 其实是一个还能接受的代码段，某种意义上，还有点美感， 但是如果if 包裹的代码段 超过一屏， 则理解成本就会变得难以接受。\r\n当我们看到一个if的时候， 我们需要 知道if 的 判断条件，开始和结束，是否有else 等，当我们看到 第二个 if 的时候，我们需要 知道 被第一个 通过的情况下进入的，然后同样需要 了解 if 的开始 结束等，然后第三个， 当我们读完第三个 if 退出的时候，需要了解第二个是否有else ， if/else 块 之后又 是什么，当前段代码是在第几个if块 之后，等等。总之if的嵌套增大了代码的理解成本。\r\n\r\n代码应该是 像 积木一样一块块累积起来的，不同的积木之间，应该尽量减少牵扯。\r\n所以按照我的想法，代码应该写成如下：\r\n<pre>         if(empty($id)) {\r\n               return [\'errno\' =&gt; 7400388, \'errmsg\' =&gt; \'当前请求参数有误\'];\r\n         }\r\n         $data = Channel::findIdentity($id);\r\n         if(!empty($data)) {\r\n             return [\'errno\' =&gt; 7400386, \'errmsg\' =&gt; \'当前修改数据不存在\'];\r\n         }\r\n  \r\n         $result = Channel::updateInfo($id, [\'is_deleted\' =&gt; 1]); \r\n         if (!$result) {\r\n             return [\'errno\' =&gt; 7400384, \'errmsg\' =&gt; \'删除失败\'];\r\n         }\r\n \r\n         $logData = [\r\n               \'user_id\' =&gt; $user_id,\r\n               \'to_user_id\' =&gt; $data[\'user_id\'],\r\n               \'create_time\' =&gt; time(),\r\n               \'status\' =&gt; OperatLog::STATUS_DEL,\r\n               \'reason\' =&gt; $delReason,\r\n               \'type\' =&gt; OperatLog::TYPE_CHANNEL,\r\n               \'old_data\' =&gt; json_encode($data),\r\n         ];   \r\n         OperatLog::addInfo($logData);\r\n         return [\'errno\' =&gt; 7400382, \'errmsg\' =&gt; \'删除成功\'];\r\n     \r\n</pre>\r\n6. 多表更新或者 删除，添加数据，多个sql语句，加上事务和回滚，原因相信无可争议，只是很多人未必注意。\r\n虽然一般情况下不加事务也不会出问题，但是有了问题，就要修数据，修数据就可能引出各种问题。\r\n个人 比较推崇的一个模板如下，try catch 只有 两个出口，要不一直走到commit，要不在catch里面rollback.\r\n<pre>   $trans = Yii::$app-&gt;db-&gt;beginTransaction();\r\n        try {\r\n            $promotionAddData = array(\r\n                //\'region_manage\' =&gt; $region_manage_id,\r\n                \'update_time\' =&gt; time(),\r\n                \'update_user_id\' =&gt; UserService::getUserId(),\r\n                \'is_deleted\' =&gt; 1,\r\n            );  \r\n            $isUpdate = PromotionLeader::updateInfo($id, $promotionAddData);\r\n            if (!$isUpdate) {\r\n                throw new JdbException(\'更新数据库异常\', 18400177);\r\n            }   \r\n            UserAccount::deleteRow($promotionLeaderInfo[\'user_id\']);\r\n            $trans-&gt;commit();\r\n        } catch (\\Exception $e) {\r\n            $trans-&gt;rollback();\r\n            throw $e; \r\n        }   \r\n        return [\'errno\' =&gt; 200, \'errmsg\' =&gt; \'推广组长数据操作成功\'];\r\n</pre>\r\n7. 错误码尽可能 整个系统唯一，方便迅速定位错误。\r\n\r\n当后端与FE通过json数据 交互的时候，一般来说，0或者200代表ok，其他代表错误就能满足需求，所以在需求层面上，错误码的定义无关紧要，所以一些系统返回400，500，这种仿 http的错误码。\r\n出于排查错误的目的而言，错误码应该尽可能的唯一，当看到系统返回的内容的时候，大概就清楚这段文本大概是系统那段代码处理返回的。比如上面demo 程序中 18400177 ，这种错误码肯定系统内很难重复，生成规则是当前光标所在的列数 + 400（错误的性质,仿http错误码） + 当前行号，某些ide还可以加上当前文件总行数等，达到一个更加随机的错误码。\r\n当然，还有其他的方式，比如在返回值里面，加冗余字段，标明返回数据在系统的位置信息，也可以。\r\n这种全随机的方式，缺点在于很难对所有的错误进行一个统计的归类处理。\r\n\r\n8. 尽量使用静态方法，减少new的数量。\r\n\r\n将代码 主要 用来处理逻辑上，而非各种语言的语法上，与效率无关，只是为了代码的可读性，如下面的两个demo，既然new 可以去掉，就尽量减少代码行数，增加可读性，重心在逻辑，而非语法。\r\n\r\n反面demo：\r\n<pre>  function test() {\r\n      $modelA = new ModelA;\r\n      $userId =  $modelA-&gt;getInfo($_GET[\'id\']);\r\n      $modelB = new ModelB;\r\n      return $modelB-&gt;getList($userId);\r\n  }\r\n</pre>\r\n推荐例程：\r\n<pre>  function test() {\r\n      $userId =  modelA::getInfo($_GET[\'id\']);\r\n      return $modelB::getList($userId);\r\n  }\r\n</pre>','编程规范','','inherit','open','open','','623-revision-v1','','','2016-09-23 18:57:40','2016-09-23 18:57:40','',623,'http://unasm.com/2016/09/639/',0,'revision','',0),(643,1,'2016-10-30 16:43:40','2016-10-30 16:43:40','必须反思下自己了，自己活的有点太过于独善其身了，认真工作，好好学习，就没有了。\r\n\r\n如果想取得一些社会意义上的成功，肯定是需要社会上的各种资源的，单纯的工作，不会带来意料之外的机会，而是互相交流才会有机会和想法。人需要埋头的执行，同时也需要各种灵感和想法。\r\n\r\n还有跟各种朋友聊天的时候，只是谈风论月怎么可以，应该追求的是各种合作和共赢，寻求的是机会，手里的筹码慢慢多了起来。尝试着去用他们，然后创造更大的价值。\r\n\r\n合作和共赢，自己很少思考这些，每次聊天的人身上可能带来什么机会，有没有合作投资的空间，折腾的话，有什么途径跟方法。','反思','','inherit','open','open','','642-revision-v1','','','2016-10-30 16:43:40','2016-10-30 16:43:40','',642,'http://unasm.com/2016/10/643/',0,'revision','',0),(644,1,'2016-11-05 11:10:49','2016-11-05 11:10:49','在通过 /_cluster/state 命令查看es 状态的时候，发现es 处于一个yellow的状态， 这个很奇怪，按照官方的解释，就是所有主分片都是处于可用状态，但是有复制分片不可用。为什么有复制分片不可用呢？\r\n\r\n通过/_cat/shards 查看，发现有从分配处于一个未分配的状态，该命令该出的数据奇怪的地方是，我的集群明明有三台机器，但是shareds里面只给出了两台。\r\n\r\ndata 2 r STARTED 449516 1.6gb 100.73.22.5 22-5\r\ndata 2 p STARTED 449516 1.6gb 100.73.22.6 22-6\r\ndata 2 r UNASSIGNED\r\n\r\n然后通过查阅官方手册，查询UNASSIGNED 的原因，然后发现很多种可能性的，但是官方的api 的case里面，shards 是直接给出了原因的，但是我的es却没有给出原因。怎么办呢？在api文档里面找答案，发现了/_cluster/reroute 的命令，一看就知道是救星，既然状态是UNASSIGNED， 我手动指定 该切片刀特定的节点，不就可以了么。\r\n\r\n执行命令\r\n\r\ncurl -XPOST \'100.73.22.5:6200/_cluster/reroute\' -d \'{\r\n\"commands\" : [{\r\n\"move\" : {\r\n\"index\" : \"data\",\r\n\"shard\" : 0,\r\n\"from_node\" : \"22-6\" ,\r\n\"to_node\": \"22-5\"\r\n}\r\n}]\r\n}\'\r\n\r\n然后ES报错，从报错信息里面得到一个信息，就是说磁盘空间已经超过了85%，无法执行，然后果然一看，磁盘已经满了。原来之所以只有两个节点，是因为第三个节点不能用导致的。\r\n\r\nso,剩下的就很简单，down掉es 进程，然后把 elasticsearch.yml 中的两项path信息，更新到一个更大的磁盘，然后重启服务，ok了。\r\n\r\n/_cat/shards发现 切片的状态，已经变成INITIALIZING了。正在同步数据。df -h 发现大磁盘的使用量 刷刷的上升。','Elasticsearch yellow 问题解决','','publish','open','open','','elasticsearch-yellow-%e9%97%ae%e9%a2%98%e8%a7%a3%e5%86%b3','','','2016-11-05 11:10:49','2016-11-05 11:10:49','',0,'http://unasm.com/?p=644',0,'post','',0),(645,1,'2016-11-05 11:10:49','2016-11-05 11:10:49','在通过 /_cluster/state 命令查看es 状态的时候，发现es 处于一个yellow的状态， 这个很奇怪，按照官方的解释，就是所有主分片都是处于可用状态，但是有复制分片不可用。为什么有复制分片不可用呢？\r\n\r\n通过/_cat/shards 查看，发现有从分配处于一个未分配的状态，该命令该出的数据奇怪的地方是，我的集群明明有三台机器，但是shareds里面只给出了两台。\r\n\r\ndata 2 r STARTED 449516 1.6gb 100.73.22.5 22-5\r\ndata 2 p STARTED 449516 1.6gb 100.73.22.6 22-6\r\ndata 2 r UNASSIGNED\r\n\r\n然后通过查阅官方手册，查询UNASSIGNED 的原因，然后发现很多种可能性的，但是官方的api 的case里面，shards 是直接给出了原因的，但是我的es却没有给出原因。怎么办呢？在api文档里面找答案，发现了/_cluster/reroute 的命令，一看就知道是救星，既然状态是UNASSIGNED， 我手动指定 该切片刀特定的节点，不就可以了么。\r\n\r\n执行命令\r\n\r\ncurl -XPOST \'100.73.22.5:6200/_cluster/reroute\' -d \'{\r\n\"commands\" : [{\r\n\"move\" : {\r\n\"index\" : \"data\",\r\n\"shard\" : 0,\r\n\"from_node\" : \"22-6\" ,\r\n\"to_node\": \"22-5\"\r\n}\r\n}]\r\n}\'\r\n\r\n然后ES报错，从报错信息里面得到一个信息，就是说磁盘空间已经超过了85%，无法执行，然后果然一看，磁盘已经满了。原来之所以只有两个节点，是因为第三个节点不能用导致的。\r\n\r\nso,剩下的就很简单，down掉es 进程，然后把 elasticsearch.yml 中的两项path信息，更新到一个更大的磁盘，然后重启服务，ok了。\r\n\r\n/_cat/shards发现 切片的状态，已经变成INITIALIZING了。正在同步数据。df -h 发现大磁盘的使用量 刷刷的上升。','Elasticsearch yellow 问题解决','','inherit','open','open','','644-revision-v1','','','2016-11-05 11:10:49','2016-11-05 11:10:49','',644,'http://unasm.com/2016/11/645/',0,'revision','',0),(647,1,'2016-11-30 12:33:06','2016-11-30 12:33:06','<p class=\"p1\"><span class=\"s1\">3.9gb =&gt; 5621181  条数据</span></p>\r\n<p class=\"p1\"><span class=\"s1\">5.1G =&gt; 7940053   条数据</span></p>\r\n<p class=\"p1\"><span class=\"s1\">7.8G =&gt; 11827643   条数据</span></p>\r\n<p class=\"p1\"><span class=\"s1\">10.5G =&gt; 16577353   条数据 </span></p>\r\n<p class=\"p1\"></p>\r\n<p class=\"p1\">大概是线性的</p>','elk 存储数据数量与占用的磁盘空间','','publish','open','open','','elk-%e5%ad%98%e5%82%a8%e6%95%b0%e6%8d%ae%e6%95%b0%e9%87%8f%e4%b8%8e%e5%8d%a0%e7%94%a8%e7%9a%84%e7%a3%81%e7%9b%98%e7%a9%ba%e9%97%b4','','','2016-11-30 12:33:06','2016-11-30 12:33:06','',0,'http://unasm.com/?p=647',0,'post','',0),(648,1,'2016-11-30 12:33:06','2016-11-30 12:33:06','<p class=\"p1\"><span class=\"s1\">3.9gb =&gt; 5621181  条数据</span></p>\r\n<p class=\"p1\"><span class=\"s1\">5.1G =&gt; 7940053   条数据</span></p>\r\n<p class=\"p1\"><span class=\"s1\">7.8G =&gt; 11827643   条数据</span></p>\r\n<p class=\"p1\"><span class=\"s1\">10.5G =&gt; 16577353   条数据 </span></p>\r\n<p class=\"p1\"></p>\r\n<p class=\"p1\">大概是线性的</p>','elk 存储数据数量与占用的磁盘空间','','inherit','open','open','','647-revision-v1','','','2016-11-30 12:33:06','2016-11-30 12:33:06','',647,'http://unasm.com/2016/11/648/',0,'revision','',0),(651,1,'2016-12-12 12:37:27','2016-12-12 12:37:27','<table class=\"confluenceTable\">\r\n<tbody>\r\n<tr>\r\n<td class=\"confluenceTd\" rowspan=\"3\">需求合理性&nbsp;</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">需求是否能达到收益</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"27\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li data-inline-task-id=\"28\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\">\r\n<p align=\"center\">是否和已有的需求有重复</p>\r\n</td>\r\n<td class=\"confluenceTd\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li data-inline-task-id=\"1\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"2\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\">是否和已有的需求产生冲突</td>\r\n<td class=\"confluenceTd\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li data-inline-task-id=\"3\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"4\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" rowspan=\"2\">需求上线考虑</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否考虑客户端老版本兼容或存量数据</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"hover\" data-inline-task-id=\"5\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"6\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否需要考虑白名单或小流程上线</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"\" data-inline-task-id=\"7\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"8\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" rowspan=\"3\">需求全面性考虑</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否符合（考虑）风控策略</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"hover checked\" data-inline-task-id=\"9\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li data-inline-task-id=\"10\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否符合（考虑）安全策略</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"hover checked\" data-inline-task-id=\"11\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"\" data-inline-task-id=\"12\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否符合（考虑）性能策略</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"hover checked\" data-inline-task-id=\"13\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li data-inline-task-id=\"14\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" rowspan=\"2\">需求数值相关考虑</td>\r\n<td class=\"confluenceTd\">是否给出默认值、状态、设置</td>\r\n<td class=\"confluenceTd\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li data-inline-task-id=\"15\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"hover checked\" data-inline-task-id=\"16\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否已经细化相关公式、单位、计算策略</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"\" data-inline-task-id=\"17\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"18\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" rowspan=\"4\">需求描述准确</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否存在图片内容和文案描述不一致的地方</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"\" data-inline-task-id=\"19\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"20\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否已经给出产品策略可能涉及到的提示文案</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"21\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"\" data-inline-task-id=\"22\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否有需求描述不清晰或有歧义的地方</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"23\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"\" data-inline-task-id=\"24\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" colspan=\"1\">复杂的逻辑是否有举例说明</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"25\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"\" data-inline-task-id=\"26\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\">其他</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">不做的需求是否从需求文档中移除</td>\r\n</tr>\r\n</tbody>\r\n</table>','上线 问答','','publish','open','open','','%e4%b8%8a%e7%ba%bf-%e9%97%ae%e7%ad%94','','','2016-12-12 12:37:27','2016-12-12 12:37:27','',0,'http://unasm.com/?p=651',0,'post','',0),(652,1,'2016-12-12 12:37:27','2016-12-12 12:37:27','<table class=\"confluenceTable\">\r\n<tbody>\r\n<tr>\r\n<td class=\"confluenceTd\" rowspan=\"3\">需求合理性&nbsp;</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">需求是否能达到收益</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"27\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li data-inline-task-id=\"28\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\">\r\n<p align=\"center\">是否和已有的需求有重复</p>\r\n</td>\r\n<td class=\"confluenceTd\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li data-inline-task-id=\"1\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"2\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\">是否和已有的需求产生冲突</td>\r\n<td class=\"confluenceTd\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li data-inline-task-id=\"3\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"4\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" rowspan=\"2\">需求上线考虑</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否考虑客户端老版本兼容或存量数据</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"hover\" data-inline-task-id=\"5\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"6\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否需要考虑白名单或小流程上线</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"\" data-inline-task-id=\"7\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"8\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" rowspan=\"3\">需求全面性考虑</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否符合（考虑）风控策略</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"hover checked\" data-inline-task-id=\"9\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li data-inline-task-id=\"10\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否符合（考虑）安全策略</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"hover checked\" data-inline-task-id=\"11\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"\" data-inline-task-id=\"12\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否符合（考虑）性能策略</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"hover checked\" data-inline-task-id=\"13\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li data-inline-task-id=\"14\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" rowspan=\"2\">需求数值相关考虑</td>\r\n<td class=\"confluenceTd\">是否给出默认值、状态、设置</td>\r\n<td class=\"confluenceTd\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li data-inline-task-id=\"15\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"hover checked\" data-inline-task-id=\"16\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否已经细化相关公式、单位、计算策略</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"\" data-inline-task-id=\"17\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"18\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" rowspan=\"4\">需求描述准确</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否存在图片内容和文案描述不一致的地方</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"\" data-inline-task-id=\"19\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"20\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否已经给出产品策略可能涉及到的提示文案</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"21\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"\" data-inline-task-id=\"22\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" colspan=\"1\">是否有需求描述不清晰或有歧义的地方</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"23\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"\" data-inline-task-id=\"24\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\" colspan=\"1\">复杂的逻辑是否有举例说明</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"checked\" data-inline-task-id=\"25\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">\r\n<ul class=\"inline-task-list\" data-inline-tasks-content-id=\"15096493\">\r\n	<li class=\"\" data-inline-task-id=\"26\"></li>\r\n</ul>\r\n</td>\r\n<td class=\"confluenceTd\" colspan=\"1\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"confluenceTd\">其他</td>\r\n<td class=\"confluenceTd\" colspan=\"1\">不做的需求是否从需求文档中移除</td>\r\n</tr>\r\n</tbody>\r\n</table>','上线 问答','','inherit','open','open','','651-revision-v1','','','2016-12-12 12:37:27','2016-12-12 12:37:27','',651,'http://unasm.com/2016/12/652/',0,'revision','',0),(670,1,'2017-04-13 15:45:48','2017-04-13 15:45:48','意识到今年马上就要结束的时候，我曾经很愤怒的把这一年归为浪费的一年，什么都没有做。现在想想，这个评价肯定是不够客观的，自己的确没有达到自己期望的一些东西，但是还是有所收获的。\r\n\r\n前半年 可以用暗无天日来形容吧，一眨眼，什么都没有想，混天黑地里日子就过去了。差不多全部的精力 时间 都投入到了企业版，哪怕略微有些时间，也是用来看 《高性能mysql》了，每天醒来去上班，沟通，处理bug，写代码， 测试， 评需求， 推进事情，讨论方案， 上线 等等吧，早上10-11点之间起来，晚上2-3点回家，在公司高度紧张，异常的充实。如果有周末，那就是打球，或者看书 泡咖啡厅，半年，一眨眼就过去了。\r\n\r\n企业版越来越稳定，改进性质的需求也越来越多，我自己也开始考虑要不要做些别的，加上公司一些别的原因，主动或者被动的 交出了企业版的研发。然后我开始有点迷茫，不知道接下来做些什么，我曾想过离开部门做些别的工作，但是一来并没有合适的机会，二来考虑失去的，可能要比得到的更多吧，选择了留下，负责了一段时间的企推的重构和研发，到8-9月份企推趋于稳定，由着一个契机，交出去了。开始负责安全防刷系统，同时开始远离业务密集型的研发工作。\r\n\r\n在负责这些系统的研发的工作的时候，我就在想如果自己不做任何改变的继续做下去，也许会在PHP，或者业务系统研发上，走的比较深，如果系统越来越重要，或者自己带的人越来越多，自己可能会越来越像管理岗，但是一个小小的leader职位很重要么？揪着那点若有若无的权利真的有意义么？一个业务系统的研发小组在整个公司真的很需要么？自己已经经历过了，并且做了这么久，如果负责的内容没有进一步变化，继续做下去，有意义么，有乐趣么？\r\n\r\n最初开始讨论安全防刷的时候，我以为需要用lua做一些模块开发，然后因为部门之间的博弈或者分工，或者所谓的架构设计吧，lua的那块并非是我们负责，我选择了使用go作为开发语言，php之外，自己当时最熟悉的语言就是go，真的想给一些无聊的业务开发带来一些乐趣和挑战。而在讨论期间我对lua的准备，则在12月份派上了用场。在这个项目上，还对压测和自动化测试做了一定程度的学习和探索吧。\r\n\r\n安全防刷上线之后，开始 搭建个elk的集群，elk 很早之前就搞了，但是集群化却是新的探索，结果是，花了两周搞了一个集群，却被告知用不着了，呵呵，可能这个时候，我开始觉得，某“架构师”不靠谱了吧。\r\n\r\n不过，在研究es同步mysql 的过程中，发现自己对java太不了解了，但是这个却很重要，而且，接下来要负责红包中心，java项目，所以接下来的挺长时间，则花在java的学习上。虽然负责红包中心是为了做某件事情，一件高层脑残的拍板，不过，还是给了自己研究java的时间，截止到“补发现金红包”这个事情的处理完毕，我觉得自己对java spring的学习已经入门了。\r\n\r\n之后并且到现在，都是在讨论或者设计 资源中心，从开始到现在 自己都是消极怠工的状态，如果我能看到这个事情的意义，可能早就进入了执行阶段了吧，只是我认为它毫无意义，却不能告诉别人我无所事事，so.我只能消极怠工，看起来好像很忙的样子。这个项目由某“架构师” 提出，却由别的工程师讨论实现，功能以及意义，却得到上层的大力支持， that is strange。\r\n\r\n而与此同时，我与另一个工程师配合开发一套基于ng lua的抽样系统，C模块作为server端，进展很快，两个星期吧，差不多就搞完了,这个也算我给公司做的贡献吧，却不能记在账面上。\r\n\r\n最近在研究机器学习和数学，我本来只是想做点小东西的，然后发现自己面对数据一筹莫展，然后想做点数据分析和自动化聚类的，然后开始看机器学习，然后开始看金融市场，然后.....本来只是一个知识点的模糊， 然后不小心就掉入了学习的栈里面。\r\n\r\n工作的事情，差不多就是这样，整体来说，前半年在管理和系统开发上积累了一些经验，踩了一些坑，思想上和系统设计上取得了一定的进步，后半年开始有时间在技术上进行探索，负责的东西也很多，完成了java，golang，php，lua的入门，很大的丰富了自己的技能栈，大概这些就足以应对所有的后端研发了吧。\r\n\r\n投资的话，尤其是在11月之后，开始研究房子和房地产，准备买一个房子，但是面对这么一个重大的决定，按照自己的习惯，肯定是要先成为半个专家的，然后再决定。永远要记住自己决策的原因，做一个聪明的人。然后把相当的时间，投入到了各个城市的数据对比，历年的数据参考，影响房价的各个因素衡量，政策的变化，然后再实地考察，跟中介打交道，顺便还研究了所谓的凯恩斯主义，总之后面的时间很大程度上，花在这个上面了。\r\n\r\n然后以某个时间点来看，对今年的炒股成绩表示满意，明年加强学习，加大资金量，加强对研报的跟踪， 恩，现在已经亏的输掉了裤子。\r\n\r\n\r\n\r\n差不多今年就是这样子吧，谈不上成功，但是也是做了一些事情，希望明年，无论如何选择，希望能有一些更标志性的事情，让自己觉得，没有白白浪费度过。','2016的年终总结','','inherit','open','open','','654-revision-v1','','','2017-04-13 15:45:48','2017-04-13 15:45:48','',654,'http://unasm.com/2017/04/670/',0,'revision','',0),(655,1,'2017-01-02 19:17:41','2017-01-02 19:17:41','意识到今年马上就要结束的时候，我曾经很愤怒的把这一年归为浪费的一年，什么都没有做。现在想想，这个评价肯定是不够客观的，自己的确没有达到自己期望的一些东西，但是还是有所收获的。\r\n\r\n前半年 可以用暗无天日来形容吧，一眨眼，什么都没有想，混天黑地里日子就过去了。差不多全部的精力 时间 都投入到了企业版，哪怕略微有些时间，也是用来看 《高性能mysql》了，每天醒来去上班，沟通，处理bug，写代码， 测试， 评需求， 推进事情，讨论方案， 上线 等等吧，早上10-11点之间起来，晚上2-3点回家，在公司高度紧张，异常的充实。如果有周末，那就是打球，或者看书 泡咖啡厅，半年，一眨眼就过去了。\r\n\r\n企业版越来越稳定，改进性质的需求也越来越多，我自己也开始考虑要不要做些别的，加上公司一些别的原因，主动或者被动的 交出了企业版的研发。然后我开始有点迷茫，不知道接下来做些什么，我曾想过离开部门做些别的工作，但是一来并没有合适的机会，二来考虑失去的，可能要比得到的更多吧，选择了留下，负责了一段时间的企推的重构和研发，到8-9月份企推趋于稳定，由着一个契机，交出去了。开始负责安全防刷系统，同时开始远离业务密集型的研发工作。\r\n\r\n在负责这些系统的研发的工作的时候，我就在想如果自己不做任何改变的继续做下去，也许会在PHP，或者业务系统研发上，走的比较深，如果系统越来越重要，或者自己带的人越来越多，自己可能会越来越像管理岗，但是一个小小的leader职位很重要么？揪着那点若有若无的权利真的有意义么？一个业务系统的研发小组在整个公司真的很需要么？自己已经经历过了，并且做了这么久，如果负责的内容没有进一步变化，继续做下去，有意义么，有乐趣么？\r\n\r\n最初开始讨论安全防刷的时候，我以为需要用lua做一些模块开发，然后因为部门之间的博弈或者分工，或者所谓的架构设计吧，lua的那块并非是我们负责，我选择了使用go作为开发语言，php之外，自己当时最熟悉的语言就是go，真的想给一些无聊的业务开发带来一些乐趣和挑战。而在讨论期间我对lua的准备，则在12月份派上了用场。在这个项目上，还对压测和自动化测试做了一定程度的学习和探索吧。\r\n\r\n安全防刷上线之后，开始 搭建个elk的集群，elk 很早之前就搞了，但是集群化却是新的探索，结果是，花了两周搞了一个集群，却被告知用不着了，呵呵，可能这个时候，我开始觉得，某“架构师”不靠谱了吧。\r\n\r\n不过，在研究es同步mysql 的过程中，发现自己对java太不了解了，但是这个却很重要，而且，接下来要负责红包中心，java项目，所以接下来的挺长时间，则花在java的学习上。虽然负责红包中心是为了做某件事情，一件高层脑残的拍板，不过，还是给了自己研究java的时间，截止到“补发现金红包”这个事情的处理完毕，我觉得自己对java spring的学习已经入门了。\r\n\r\n之后并且到现在，都是在讨论或者设计 资源中心，从开始到现在 自己都是消极怠工的状态，如果我能看到这个事情的意义，可能早就进入了执行阶段了吧，只是我认为它毫无意义，却不能告诉别人我无所事事，so.我只能消极怠工，看起来好像很忙的样子。这个项目由某“架构师” 提出，却由别的工程师讨论实现，功能以及意义，却得到上层的大力支持， that is strange。\r\n\r\n而与此同时，我与另一个工程师配合开发一套基于ng lua的抽样系统，C模块作为server端，进展很快，两个星期吧，差不多就搞完了,这个也算我给公司做的贡献吧，却不能记在账面上。\r\n\r\n最近在研究机器学习和数学，我本来只是想做点小东西的，然后发现自己面对数据一筹莫展，然后想做点数据分析和自动化聚类的，然后开始看机器学习，然后开始看金融市场，然后.....本来只是一个知识点的模糊， 然后不小心就掉入了学习的栈里面。\r\n\r\n工作的事情，差不多就是这样，整体来说，前半年在管理和系统开发上积累了一些经验，踩了一些坑，思想上和系统设计上取得了一定的进步，后半年开始有时间在技术上进行探索，负责的东西也很多，完成了java，golang，php，lua的入门，很大的丰富了自己的技能栈，大概这些就足以应对所有的后端研发了吧。\r\n\r\n投资的话，尤其是在11月之后，开始研究房子和房地产，准备买一个房子，但是面对这么一个重大的决定，按照自己的习惯，肯定是要先成为半个专家的，然后再决定。永远要记住自己决策的原因，做一个聪明的人。然后把相当的时间，投入到了各个城市的数据对比，历年的数据参考，影响房价的各个因素衡量，政策的变化，然后再实地考察，跟中介打交道，顺便还研究了所谓的凯恩斯主义，总之后面的时间很大程度上，花在这个上面了。\r\n\r\n然后以某个时间点来看，对今年的炒股成绩表示满意，明年加强学习，加大资金量，加强对研报的跟踪， 恩，现在已经亏的输掉了裤子。\r\n\r\n感情的话，几乎没有变化吧，或者 自己也不希望有什么变化吧。我真的觉得自己的这个阶段，并不适合恋爱。我曾经希望过，找一个好的女孩，喜欢的女孩，如果她肯的话，两人一起度过人生最初的艰难阶段，不过既然人家不愿意，自己也无意找别人替代。而且，自己目前阶段，真的不是一个好的恋人，虽然我可以，但是我拒绝，尽可能的把时间投入到工作和学习，拒绝享受生活，拒绝考虑别人的情绪。这种状态下的我，如果不是一个足够包容，足够独立和聪明的女孩，大概是无法长久的相处吧。目前身边的几个女孩，我都没什么信心走到最后，越是希望赶快有一个结果的，我觉得只能越早受伤离开，越真心，越受伤。也许跟连静之间，有一些可能性吧，有点喜欢这种淡淡的，若有若无的感觉。\r\n\r\n差不多今年就是这样子吧，谈不上成功，但是也是做了一些事情，希望明年，无论如何选择，希望能有一些更标志性的事情，让自己觉得，没有白白浪费度过。','2016的年终总结','','inherit','open','open','','654-revision-v1','','','2017-01-02 19:17:41','2017-01-02 19:17:41','',654,'http://unasm.com/2017/01/655/',0,'revision','',0),(658,1,'2017-03-22 18:52:28','2017-03-22 18:52:28','在开发业务系统的时候，很多时候需要从底层的服务调用接口，拼接数据，或者一项请求需要若干子系统的实现，但是如果一个一个系统调用的时候，则面临请求处理时间过长超时的危险，以及不好的用户体验。这里可以通过优化设计，将其中一部分异步处理，或者说，可以通过并发同时调用的方式，及时获得子系统的响应，将线性的时间并行化。\r\n\r\ngolang最大的优点，就是可以比较轻松的实现并发，并且性能优越，与C语言同一个量级。\r\n\r\n定义若干子模块，每个模块与一个系统交互，定义两个信道用于输入输出， 一个输入信道 input chan ，用于监听获取调度模块的输入信息，一个输出信道 ouput  []chan struct{}， 如果需要的话，用于子模块向上层回馈信息，\r\n\r\n<span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><img class=\"confluence-embedded-image\" src=\"http://wiki.jdb-dev.com/download/attachments/20210349/golang%20%E8%B0%83%E5%BA%A6.jpg?version=2&amp;modificationDate=1490180075000&amp;api=v2\" alt=\"\" height=\"250\" data-image-src=\"/download/attachments/20210349/golang%20%E8%B0%83%E5%BA%A6.jpg?version=2&amp;modificationDate=1490180075000&amp;api=v2\" data-unresolved-comment-count=\"0\" data-linked-resource-id=\"20210287\" data-linked-resource-version=\"2\" data-linked-resource-type=\"attachment\" data-linked-resource-default-alias=\"golang 调度.jpg\" data-base-url=\"http://wiki.jdb-dev.com\" data-linked-resource-content-type=\"image/jpeg\" data-linked-resource-container-id=\"20210349\" data-linked-resource-container-version=\"1\" /></span>\r\n\r\n&nbsp;\r\n\r\n对于某个子模块来说，实现的功能很简单 监听input chan，然后信道的信息处理特定的逻辑，然后向 特定的 output chan 返回内容，如果请求流程很复杂耗时，则可以进一步派生goroutine进程加速响应。','golang 实现 请求拆分，并发调度底层系统','','publish','open','open','','golang-%e5%ae%9e%e7%8e%b0-%e8%af%b7%e6%b1%82%e6%8b%86%e5%88%86%ef%bc%8c%e5%b9%b6%e5%8f%91%e8%b0%83%e5%ba%a6%e5%ba%95%e5%b1%82%e7%b3%bb%e7%bb%9f','','','2017-03-22 18:52:28','2017-03-22 18:52:28','',0,'http://unasm.com/?p=658',0,'post','',0),(659,1,'2017-03-22 18:52:28','2017-03-22 18:52:28','在开发业务系统的时候，很多时候需要从底层的服务调用接口，拼接数据，或者一项请求需要若干子系统的实现，但是如果一个一个系统调用的时候，则面临请求处理时间过长超时的危险，以及不好的用户体验。这里可以通过优化设计，将其中一部分异步处理，或者说，可以通过并发同时调用的方式，及时获得子系统的响应，将线性的时间并行化。\r\n\r\ngolang最大的优点，就是可以比较轻松的实现并发，并且性能优越，与C语言同一个量级。\r\n\r\n定义若干子模块，每个模块与一个系统交互，定义两个信道用于输入输出， 一个输入信道 input chan ，用于监听获取调度模块的输入信息，一个输出信道 ouput  []chan struct{}， 如果需要的话，用于子模块向上层回馈信息，\r\n\r\n<span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><img class=\"confluence-embedded-image\" src=\"http://wiki.jdb-dev.com/download/attachments/20210349/golang%20%E8%B0%83%E5%BA%A6.jpg?version=2&amp;modificationDate=1490180075000&amp;api=v2\" alt=\"\" height=\"250\" data-image-src=\"/download/attachments/20210349/golang%20%E8%B0%83%E5%BA%A6.jpg?version=2&amp;modificationDate=1490180075000&amp;api=v2\" data-unresolved-comment-count=\"0\" data-linked-resource-id=\"20210287\" data-linked-resource-version=\"2\" data-linked-resource-type=\"attachment\" data-linked-resource-default-alias=\"golang 调度.jpg\" data-base-url=\"http://wiki.jdb-dev.com\" data-linked-resource-content-type=\"image/jpeg\" data-linked-resource-container-id=\"20210349\" data-linked-resource-container-version=\"1\" /></span>\r\n\r\n&nbsp;\r\n\r\n对于某个子模块来说，实现的功能很简单 监听input chan，然后信道的信息处理特定的逻辑，然后向 特定的 output chan 返回内容，如果请求流程很复杂耗时，则可以进一步派生goroutine进程加速响应。','golang 实现 请求拆分，并发调度底层系统','','inherit','open','open','','658-revision-v1','','','2017-03-22 18:52:28','2017-03-22 18:52:28','',658,'http://unasm.com/2017/03/659/',0,'revision','',0),(661,1,'2017-03-31 03:51:35','2017-03-31 03:51:35','<p>几次发生文件被别人误删的事情，又没有办法切分用户，划分权限，所以决定禁用rm命令，改为mv 到Trash中，该方法支持 参数和删除目录 </p>\r\n<pre>\r\nalias rm=\"trash\"\r\ntrash()\r\n{\r\n    echo \"rm is not permitted, it is dangerous\"\r\n    echo \"going to execute :\"\r\n    echo \"\"\r\n    for file in $*\r\n    do\r\n        if [ -f \"$file\" ] || [ -d \"$file\" ]; then\r\n            echo \"mv $file ~/.Trash/\"\r\n        fi\r\n        #if [ -f \"$file\" ]; then\r\n        #    isFile=true\r\n        #    echo \"isFile\"\r\n        #fi\r\n        #if [ -d \"$file\" ]; then\r\n        #    isDir=true\r\n        #    echo \"isDir\"\r\n        #    #mv $@ ~/.trash/\r\n\r\n        #    #file $file\r\n        ##elif [ -d \"$file\" ]; then\r\n        ##    echo \"director\"\r\n        #fi\r\n        #echo \"mv $file ~/.Trash/\"\r\n    done\r\n\r\n    echo \"\"\r\n\r\n    for file in $*\r\n    do\r\n        if [ -f \"$file\" ] || [ -d \"$file\" ]; then\r\n            #echo mv $file ~/.Trash/\r\n            mv $file ~/.Trash/\r\n            #file $file\r\n        fi\r\n    done\r\n} \r\n\r\n</pre>','屏蔽禁用rm命令','','publish','open','open','','%e5%b1%8f%e8%94%bd%e7%a6%81%e7%94%a8rm%e5%91%bd%e4%bb%a4','','','2017-03-31 03:51:35','2017-03-31 03:51:35','',0,'http://unasm.com/?p=661',0,'post','',0),(662,1,'2017-03-31 03:51:35','2017-03-31 03:51:35','<p>几次发生文件被别人误删的事情，又没有办法切分用户，划分权限，所以决定禁用rm命令，改为mv 到Trash中，该方法支持 参数和删除目录 </p>\r\n<pre>\r\nalias rm=\"trash\"\r\ntrash()\r\n{\r\n    echo \"rm is not permitted, it is dangerous\"\r\n    echo \"going to execute :\"\r\n    echo \"\"\r\n    for file in $*\r\n    do\r\n        if [ -f \"$file\" ] || [ -d \"$file\" ]; then\r\n            echo \"mv $file ~/.Trash/\"\r\n        fi\r\n        #if [ -f \"$file\" ]; then\r\n        #    isFile=true\r\n        #    echo \"isFile\"\r\n        #fi\r\n        #if [ -d \"$file\" ]; then\r\n        #    isDir=true\r\n        #    echo \"isDir\"\r\n        #    #mv $@ ~/.trash/\r\n\r\n        #    #file $file\r\n        ##elif [ -d \"$file\" ]; then\r\n        ##    echo \"director\"\r\n        #fi\r\n        #echo \"mv $file ~/.Trash/\"\r\n    done\r\n\r\n    echo \"\"\r\n\r\n    for file in $*\r\n    do\r\n        if [ -f \"$file\" ] || [ -d \"$file\" ]; then\r\n            #echo mv $file ~/.Trash/\r\n            mv $file ~/.Trash/\r\n            #file $file\r\n        fi\r\n    done\r\n} \r\n\r\n</pre>','屏蔽禁用rm命令','','inherit','open','open','','661-revision-v1','','','2017-03-31 03:51:35','2017-03-31 03:51:35','',661,'http://unasm.com/2017/03/662/',0,'revision','',0),(664,1,'2017-04-10 03:25:40','2017-04-10 03:25:40','​背景：去年10月，我们实现了Spark 1.5.2版本运行在Mesos这个资源管理框架上。随后Spark出了新版本我们又对Spark进行了小升级，升级并没有什么太大的难度，沿用之前的修改过的代码重新编译，替换一下包，把历史任务全部发一遍就能很好的升级到1.6.1也就是现在集群的版本，1.6.2并没有升级因为感觉改动不是很大。到现在正好一年的时间，线上已经注册了44 个Spark任务，其中28个为Streaming任务，在运行这些任务的过程中，我们遇到了很多问题，其中最大的问题是动态扩容问题，即当业务线增加更复杂的代码逻辑或者业务的增长导致处理量上升的时候会使Spark因计算资源不足，这时候如果没有做流量控制则Spark任务会因内存承受不了而失败，如果做了流量控制则Kafka的lag会有堆积，这时候一般就需要增加更多的executor来处理，但是增加多少合适一般不太好判断，于是要反复地修改配置重新发布来找到一个合理的配置。\r\n\r\n我们在Marathon上使用Logstash的时候也有类似的问题，当由于接入一个比较大的日志导致流量突然增加使得Logstash处理不了时，Kafka的Lag产生堆积，这时我们只需直接上Marathon的界面上点Scale然后填入更大的实例数字就能启动了一些Logstash实例自动平衡地去处理了。当发现某个结点是慢结点不干活的时候，只需要在Marathon上将对应的任务Kill掉就会自动再发一个任务替补他的位置，那么Logstash既然都可以做到为什么Spark不可以？因此我们决定在Spark 2.0版本的时候来实现这个功能，同时我们也会改进其它的一些问题，另外Spark2.0是一个比较大的版本升级，配置与之前的1.6.1不同，不能做到直接全部重发一遍任务来做到全部升级。 \r\n\r\n图1 使用Logstash的管理架构图1 使用Logstash的管理架构\r\n\r\n\r\n\r\nMesos-dispacher架构与问题\r\n\r\n在这里我们首先介绍一些Mesos的一些相关概念，Mesos的Framework是资源分配与调度的发起者，Spark自带了一个spark-mesos-dispacher的Framework用来管理Spark的资源调度。而Marathon也是一个Framework他的本质和mesos-dispacher或spark schedular相同。\r\n\r\n图2 Mesos-dispacher架构图2 Mesos-dispacher架构\r\n\r\n在图2在这个架构中，你首先得向mesos注册一个mesos-dispacher的Framework，然后，通过spark-sumbit脚本来向mesos-dispacher发布任务，mesos-dispacher接到任务以后开始调度他负责发一个Spark Driver，然后driver在mesos模式下，他会再次向mesos注册这个任务的Framework也就是我们看到的Spark UI，也可以理解为他自己也是个调度器，然后这个Framework根据配置来向Mesos申请资源来发一些Spark Executor。 \r\n\r\n图3 Mesos-dispacher功能截图图3 Mesos-dispacher功能截图\r\n\r\n从图3可以看出，mesos-dispacher只提供了下功能：\r\n\r\n他只提供了一个配置查看的界面，可以看到资源分配的信息，点进去以后可以看到SparkConf的一些参数，但是这个我们在业务线发布的时候已经拿到了这些配置，在这里只能确认下Driver是否配置正确，并且在SparkUI上也能看到。\r\n他自带一个Driver队列，他会按顺序依次发布，当资源不足时会在队列里等待。\r\n他自带一个Driver的HA功能，但是当你提交Driver代码有问题，他会不断地反复重发，比较难杀掉，但也是能杀掉的，并且没有次数限制。所以我们一般也不开放这个功能。\r\n所以mesos-dispacher并不是一个完备的Framework，在我们使用的过程中发现了存在以下的问题：\r\n\r\n在我们发布Spark的时候需要向mesos-dispacher提供一个SPARK_EXECUTOR_URI的配置来提供SPARK运行环境的地址，一开始我们是使用http的方式来放环境的，但是在一次需要发60个executor的时候流量打满了，原因是我们编译出来的Spark的环境包大概250MB，在发布的时候60台机器同时拉取这个环境就把流量打爆了。因此我们的解决方案就是在每一台机器上都部署Spark的环境，把SPARK_EXECUTOR_URI设成本地目录来解决这个问题。\r\n界面上的配置并不会真正地同步到driver或executor。由于SPARK的配置很灵活，你的mesos-dispacher启动的时候会读取spark-defalut.conf来加载配置，每次发布时他又会从spark-env.conf里读取配置，发driver的时候，driver又会从他的jar包里的配置读取配置，用户自己也可以设置sparkConf的配置，executor的jar包里同样也有配置，最终你会发现有些配置设了生效了，有些配置的设置他没有传递，从而造成配置混乱。\r\nmesos-dispacher基本功能缺失。mesos-dispacher虽然是专门为mesos设计的，但是他对mesos的基本功能，如role和constrain支持都不好，如果不修改代码是无法支持role和constrain，关于这个我提交了个一PR并且在Spark2.0已经没有这个问题了。 \r\nmesos-dispacher并不能运行时修改配置，必须重启。比如我们上了一些新机器，打了其它一些标签或者是多标签，如果想使其生效必须停止mesos-dispacher再启动才能生效，无法在运行时修改。mesos-dispacher默认工作在非HA模式下，因此在启动mesos-dispacher在的时候一定要加上Mesosr的zk这样当停止了mesos-dispacher以后，在mesos-dispacher上的任务将不会受到影响，当重新启动mesos-dispacher的时候会自动接管任务。\r\n没有动态扩容功能。我们希望做到的就是可以让Spark可以在运行时增加实例或减少，但是受于架构限制mesos-dispacher只能管理driver，如果改mesos-dispacher的代码的话只能实现动态扩driver没有意义。\r\n\r\n此外也有另一种方案就是帮助Spark改进他的Framework使他更强大，但是我们发现只需要Marathon这一个优秀的Framework就可以了，重复造轮子的成本比较大。同时也不希望对Spark代码有过多的修改，这样不利于升级。\r\n\r\nMarathon+Docker统一架构\r\n\r\n由于mesos发布有很多种模式，我们在做这个时候主要考察了2种模式。\r\n\r\n独立集群模式\r\n\r\n在这个模式下，需要启动一个master作为发布的入口，再对每个实例分别启动slave。这时候每个slave在启动的时候资源已经固定了。再增加资源的时候需要启动新的slave然后停止之前的任务修改资源配置数重发，这种模式的好处是有一个单独的界面，你可以直接给业务线这个独立集群模式的界面来用，界面上他们可以根据自己固定的资源发多个任务，并且在SparkUI上可以直接看到日志。另外就是，他是预先占资源模式，能把资源占住，不会有资源在发布争抢中导致资源不够的情况，但是他的缺点就是做不到运行时的动态扩容。我们也实现了这种模式，本文\r\n\r\n仿mesos-dispacher模式\r\n\r\n在这个模式下，我们使用Marathon这个framework来模仿mesos-dispacher所做的事，就是先发一个driver然后再发executor挂载到driver来执行任务。关于日志，我们还是使用之前的方式调用Mesos的接口来获得日志。当需要增加资源的时候直接往结点继续挂executor就可以，当需要删除结点的时候直接停止executor即可。\r\n\r\n实施过程\r\n\r\n图4 仿mesos-dispacher模式图4 仿mesos-dispacher模式\r\n\r\n\r\n\r\n\r\n\r\n如何实现仿mesos-dispacher模式\r\n\r\n我们要做的事实际上是把图2的架构图变成图4的模式，其中Step 1和Step 2需要模仿，而Step 0则不需要，因为Step 0只是启动Framework的。我们通过观察meos-dispacher发现Step 1所做的实际上是调用Spark Submit向Mesos注册一个Framework然后再由driver来负责调度，我们利用mesos的constraints的特性，设置一个不存在的不可调度的策略，例如：colo:none，这样一来driver就无法管理资源，而我们使用Marathon自己来发布Spark Executor来挂到driver上来实现Marathon控制Spark的资源调度策略。由于Mesos他是把Offer推送给Framework的这一特性，我们使用的这种方式也不会有性能问题。\r\n\r\n图5 主要代码图5 主要代码\r\n\r\n那么图2中的Step 2是如何做到的呢？我们通过分析Spark源代码发现，Spark 2.0.2在Executor挂到drvier上是通过图5的命令来做到的。所以通过Marathon发布Spark Executor的基本原理就是模仿上面的图5代码。\r\n\r\n从图6可以看出Marathon发布的时候先发Spark Driver拿到mesos分配的Spark Driver的IP和PORT填入脚本，这个参数是Driver与Executor之间通信的通道，在发Spark Executor的时候需要提供，这个Driver的IP我们通过Mesos接口可以拿到，因为Driver会向Mesos注册一个Framework，我们拿到Framework的信息就拿到了IP和PORT，同时我们还可以拿到FrameworkID那这个PORT是在制作Docker镜像的时候随机分配的一个PORT0的一个环境变量，然后通过spark.driver.port指定，这样Executor这端就可以调用Marathon的REST API来拿到driver的Port。\r\n\r\n而参数executor-id是Spark Driver调度时按顺序分配的ID，从0开始每次递增1，如何生成executor-id呢？这个由Spark Executor自己生成一个不超过int的范围的不重复的随机数即可，这个的ID的不会影响其它行为。hostname可以直接通过命令获取。cores是我们通过用户提交的配置来计算出来的，这个Core需要填spark.executor.cores也就是每个Spark Executor的正常使用的Core与spark.mesos.extra.cores分配给每个Spark Executor之和。\r\n\r\n图6 Executor发布示意图图6 Executor发布示意图\r\n\r\n最后一项目app-id通过研究发现在Mesos上实际上就是Framework ID直接通过Mesos接口就可以获得。这样我们就完成了Executor的发布，通过拼上述的命令来把Spark Executor挂到了Driver上，但是实际生产应用中，我们发现了，他还存在Driver和Executor的同步问题。\r\n\r\nSpark Receiver的平衡问题\r\n\r\n在这里我要向大家介绍一下在Kafka使用了高阶API时，影响Spark性能的Receiver平衡问题，使用低阶API则不会有这个问题。如果使用Spark提供的Kafka高阶API，你会在代码里预先指定好Receiver的数量，然后再做一个Union，在Spark代码中他实际上是这样做的，他会先等待Executor连上Driver，默认是30s如果超过了调度的时间则开始进行Receiver的调度，而调度策略是ReceiverPolicy类里写死的，ReceiverPolicy的调度策略可以概括为，尽量保证均匀的分配给每个Host一定量的Recevier。\r\n\r\n图7 启动3个Spark Executor 示例图7 启动3个Spark Executor 示例\r\n\r\n举个例子来说，如图7当你启动了3个Spark Executor时，如果代码里指定了启动1个Executor，如果每个Executor启动在了不同的Host下，Spark在Receiver调度开始时随机地指定一个Executor启动Receiver并分配1个Core给这个Task。但是如果代码里指定为2个Receiver而2个Executor启动在了同1个Host1上，另一个启动在了Host2上，也就是Receiver的数量等于Host Unique数量，则他会在Host1中保证其中的一个Executor启动1个Receiver，Host2中启动一个Receiver。如果Receiver的数量，大于了Host Unique的数量如第三张图，则他会在随机地在Host1或者Host2中开Receiver，这就带来了一个问题。分析Spark源代码可知Spark Driver和Spark Executor之间通过运行一个DummyJob，也就是一个MapReduce任务来保证他们之间的同步的，但是他这种做法只能保证一个Spark Executor挂在了Spark Driver上，而不能够保证所有的Executor比如当只有一个Spark Executor挂在Spark Driver上的时候，这时候开始Receiver开始调度。\r\n\r\n如何保证Driver和Executor之间同步\r\n\r\n读过Spark官方文档的朋友都知道，Spark提供了2个参数去解决这个问题，他们分别是spark.scheduler.maxRegisteredResourcesWaitingTime用来设置一个等待Executor挂上的时间和spark.scheduler.minRegisteredResourcesRatio用来检查资源分配的比例，但是使用我们这种方式这两个参数都不起作用了，因为Spark在实现的过程中是通过一个运行一个DummyJob来保证这种挂载的方式同步的，这也是为什么第一个任务一定是70个Task的原因，但是他这种方式只能保证一个Executor挂上去了以后才开始调度Recevier,因此我们对源代码进行了修改，主要是ReceiverTracker那部分通过我们自定义的一个配置，让Executor数量达到指定的个数以后才开始发布，这样在Receiver调度的时候才会保证能够均匀地分配在各个结点，从而实现最好的性能。另外对于业务线写的jar包，我们是要求打成assembly包然后提交到我们的发布系统，发布系统会上传到swift上，在发布的时候，我们会先在容器里把包下载下来，然后启动Spark Driver，而当Spark Executor挂在Spark Driver上的时候，他们会自动从Spark Driver获取对应的jar包。\r\n\r\n如何保证容器的时间和编码的准确性让配置同步\r\n\r\n之前在部署1.6.1的mesos-dispacher架构的时候，我们就已经发现， Spark打出的中文日志会产生乱码，然后我们做了各种实验发现，无论如何设置JVM参数，或是使用代码进行内部的转换都解决不了乱码问题，在新架构的Docker环境中也不例外，不过最终还是让我们解决了，我们发现通过设置JAVA_TOOL_OPTIONS这个环境变量，JAVA虚拟机的参数才真正的修改生效，于是我们在容器启动的时候配置了file.encoding=UTF-8，乱码问题得才以解决，除此之外在Docker镜像中系统的时间也是不准确的，默认是UTC时间，而系统时间对代码的影响也很大，有可能写入到HDFS的文件是以时间戳生成的，我们一开始解决这个问题的方法是通过以只读的方式在Docker中挂载宿主机上的/etc/localtime来修正时间，但是发现时间还是不正确，这时因为Spark内部还会根据时区自动修正时间为UTC，所以还需要给JVM加一个环境变量设置user.timezone=PRC 这样时间才可以保证时间是对的，另外使用这种架构的时候spark.driver.extraJavaOptions和spark.executor.extraJavaOptions这两个参数也不会生效，需要用户通过发布配置传过来，然后在容器中追加到JAVA_TOOL_OPTIONS。另外值得注意的是SPARK_EXECUTOR_MEMORY也不会同步，需要手动来进行设置。\r\n\r\n如何保证driver和executor失败时同步\r\n\r\n虽然我们之前解决了marathon发布driver和executor之间的连接问题，但是由于mesos接口慢，在我们实际测试中，发30个executor就可以把mesos打挂，因此，我们想了另一个办法来解决这个问题，我们首先修改了Spark代码，让他的Spark Driver在不依赖mesos-dispacher的情况下实现driver的HA，HA的实现原理大概就是每次在Spark Driver启动注册Framework的时候，把Framework ID存到zk里，然后在程序挂掉了以后保持Framework与Mesos的连接，在下次启动的时候重新注册这个Framework，这样的话，Framework ID可以基本保持不变，在发布Spark Executor的时候就可以固定住这个Framework ID在Executor挂掉的时候marathon拉起来也能保证重连，而driver如果挂掉的话，他会重新注册，获得的Framework ID不变，又可以继续运行，这样做只需要在Spark Driver发布完成以后调用一次Mesos接口拿到Framework ID分发给Spark Executor就可以了。顺便说一下Spark Executor拿Spark Driver的ip和port是通过调Marathon接口实现了，而Marathon接口速度很快，不会有这个问题。\r\n\r\n如何升级Spark版本\r\n\r\n对于业务线的任务来说升级Spark是一件比较麻烦的事，主要原因是需要他们改代码，不过从改代码的角度来说，变化也不算大，也就是Spark版本和Scala版本变一下，另外就是有些API也需要做一点调整，另外就是升级麻烦的另一个原因也是因为之前没有使用Marathon+Docker的模式，如果之前就使用了这种模式，那只需要把镜像给修改了，愿意升级的升级，不愿意升级的可以使用原来的镜像跑，在以后的升级中，我们只需要制作新镜像就可以了，非常方便迁移，可以让他跑在任何集群。那现在为了过渡到这种模式，再结合之前发布的经验，我们使用的模式是旧的有一套配置，新的也有一套配置，然后通过在git上打tag的方式，在旧的配置里加入升级信息，然后发布逻辑改为优先读取是否要升级，如果需要升级则发在新集群上，如果不需要则保持原来不变，我们会先让业务线进行测试，同时保持旧的任务在线，当他们测试通过了以后，再停止旧的作务，把改好的新版本发到新集群上，当发现有问题的时候可以用原来的tag进行回滚，因为原来的tag里的配置会先判断是否需要升级，而之前的配置肯定没有需要升级的选项。\r\n\r\n如何监控Spark的运行状态\r\n\r\nSpark自身有一套metric监控，这个在新版本也不例外，在我们集群中唯一的变更就是把不靠谱的udp改成了tcp，另外我们因为使用的是Docker容器，这样我们就还有另一套监控，这个监控是分析cgroup里的数据，使用的是我们开源的pyadvisor来做的，我们可以通过监控来观察CPU和内存的使用情况，很好的提出优化改进资源使用的建议，另外，对于业务线们，我们推荐他们使用的是Spark里自带的Accumulator，先在Spark Driver上做一个聚合1分钟的指标，然后再往watcher上打他们的业务指标，这样即不会有之前不同host之间的聚合指标的问题，同时也给watcher减轻了压力。\r\n\r\n总结\r\n\r\n以上就是我们所做的新的Spark架构，综合看来有以下的优点：\r\n\r\n无需环境配置与部署，走Docker。对于以后也升级也会较方便，可以复用之前Dockerfile。\r\n是以直接启动的方式，配置绝对生效，不会出现复杂配置的问题。\r\n自动平衡executor。没有Receiver不平衡的问题问题，在某些场景下可以动态增减executor，不会有失败过多而不再拉executor的现象，也不不会有多发或少发executor现象。\r\n由于使用Marathon的原因，可以支持多标签，复杂调度，例如业务线有时候需要固定指定的机运行Spark开百名单，同时也为我们以后做迁移有了更多的便利。','去哪儿网基于Marathon管理Spark 2.0实现动态扩容实践（转载）','','publish','open','open','','%e5%8e%bb%e5%93%aa%e5%84%bf%e7%bd%91%e5%9f%ba%e4%ba%8emarathon%e7%ae%a1%e7%90%86spark-2-0%e5%ae%9e%e7%8e%b0%e5%8a%a8%e6%80%81%e6%89%a9%e5%ae%b9%e5%ae%9e%e8%b7%b5%ef%bc%88%e8%bd%ac%e8%bd%bd%ef%bc%89','','','2017-04-10 03:30:07','2017-04-10 03:30:07','',0,'http://unasm.com/?p=664',0,'post','',0),(665,1,'2017-04-10 03:25:40','2017-04-10 03:25:40','​背景：去年10月，我们实现了Spark 1.5.2版本运行在Mesos这个资源管理框架上。随后Spark出了新版本我们又对Spark进行了小升级，升级并没有什么太大的难度，沿用之前的修改过的代码重新编译，替换一下包，把历史任务全部发一遍就能很好的升级到1.6.1也就是现在集群的版本，1.6.2并没有升级因为感觉改动不是很大。到现在正好一年的时间，线上已经注册了44 个Spark任务，其中28个为Streaming任务，在运行这些任务的过程中，我们遇到了很多问题，其中最大的问题是动态扩容问题，即当业务线增加更复杂的代码逻辑或者业务的增长导致处理量上升的时候会使Spark因计算资源不足，这时候如果没有做流量控制则Spark任务会因内存承受不了而失败，如果做了流量控制则Kafka的lag会有堆积，这时候一般就需要增加更多的executor来处理，但是增加多少合适一般不太好判断，于是要反复地修改配置重新发布来找到一个合理的配置。\r\n\r\n我们在Marathon上使用Logstash的时候也有类似的问题，当由于接入一个比较大的日志导致流量突然增加使得Logstash处理不了时，Kafka的Lag产生堆积，这时我们只需直接上Marathon的界面上点Scale然后填入更大的实例数字就能启动了一些Logstash实例自动平衡地去处理了。当发现某个结点是慢结点不干活的时候，只需要在Marathon上将对应的任务Kill掉就会自动再发一个任务替补他的位置，那么Logstash既然都可以做到为什么Spark不可以？因此我们决定在Spark 2.0版本的时候来实现这个功能，同时我们也会改进其它的一些问题，另外Spark2.0是一个比较大的版本升级，配置与之前的1.6.1不同，不能做到直接全部重发一遍任务来做到全部升级。 \r\n\r\n图1 使用Logstash的管理架构图1 使用Logstash的管理架构\r\n\r\n\r\n\r\nMesos-dispacher架构与问题\r\n\r\n在这里我们首先介绍一些Mesos的一些相关概念，Mesos的Framework是资源分配与调度的发起者，Spark自带了一个spark-mesos-dispacher的Framework用来管理Spark的资源调度。而Marathon也是一个Framework他的本质和mesos-dispacher或spark schedular相同。\r\n\r\n图2 Mesos-dispacher架构图2 Mesos-dispacher架构\r\n\r\n在图2在这个架构中，你首先得向mesos注册一个mesos-dispacher的Framework，然后，通过spark-sumbit脚本来向mesos-dispacher发布任务，mesos-dispacher接到任务以后开始调度他负责发一个Spark Driver，然后driver在mesos模式下，他会再次向mesos注册这个任务的Framework也就是我们看到的Spark UI，也可以理解为他自己也是个调度器，然后这个Framework根据配置来向Mesos申请资源来发一些Spark Executor。 \r\n\r\n图3 Mesos-dispacher功能截图图3 Mesos-dispacher功能截图\r\n\r\n从图3可以看出，mesos-dispacher只提供了下功能：\r\n\r\n他只提供了一个配置查看的界面，可以看到资源分配的信息，点进去以后可以看到SparkConf的一些参数，但是这个我们在业务线发布的时候已经拿到了这些配置，在这里只能确认下Driver是否配置正确，并且在SparkUI上也能看到。\r\n他自带一个Driver队列，他会按顺序依次发布，当资源不足时会在队列里等待。\r\n他自带一个Driver的HA功能，但是当你提交Driver代码有问题，他会不断地反复重发，比较难杀掉，但也是能杀掉的，并且没有次数限制。所以我们一般也不开放这个功能。\r\n所以mesos-dispacher并不是一个完备的Framework，在我们使用的过程中发现了存在以下的问题：\r\n\r\n在我们发布Spark的时候需要向mesos-dispacher提供一个SPARK_EXECUTOR_URI的配置来提供SPARK运行环境的地址，一开始我们是使用http的方式来放环境的，但是在一次需要发60个executor的时候流量打满了，原因是我们编译出来的Spark的环境包大概250MB，在发布的时候60台机器同时拉取这个环境就把流量打爆了。因此我们的解决方案就是在每一台机器上都部署Spark的环境，把SPARK_EXECUTOR_URI设成本地目录来解决这个问题。\r\n界面上的配置并不会真正地同步到driver或executor。由于SPARK的配置很灵活，你的mesos-dispacher启动的时候会读取spark-defalut.conf来加载配置，每次发布时他又会从spark-env.conf里读取配置，发driver的时候，driver又会从他的jar包里的配置读取配置，用户自己也可以设置sparkConf的配置，executor的jar包里同样也有配置，最终你会发现有些配置设了生效了，有些配置的设置他没有传递，从而造成配置混乱。\r\nmesos-dispacher基本功能缺失。mesos-dispacher虽然是专门为mesos设计的，但是他对mesos的基本功能，如role和constrain支持都不好，如果不修改代码是无法支持role和constrain，关于这个我提交了个一PR并且在Spark2.0已经没有这个问题了。 \r\nmesos-dispacher并不能运行时修改配置，必须重启。比如我们上了一些新机器，打了其它一些标签或者是多标签，如果想使其生效必须停止mesos-dispacher再启动才能生效，无法在运行时修改。mesos-dispacher默认工作在非HA模式下，因此在启动mesos-dispacher在的时候一定要加上Mesosr的zk这样当停止了mesos-dispacher以后，在mesos-dispacher上的任务将不会受到影响，当重新启动mesos-dispacher的时候会自动接管任务。\r\n没有动态扩容功能。我们希望做到的就是可以让Spark可以在运行时增加实例或减少，但是受于架构限制mesos-dispacher只能管理driver，如果改mesos-dispacher的代码的话只能实现动态扩driver没有意义。\r\n\r\n此外也有另一种方案就是帮助Spark改进他的Framework使他更强大，但是我们发现只需要Marathon这一个优秀的Framework就可以了，重复造轮子的成本比较大。同时也不希望对Spark代码有过多的修改，这样不利于升级。\r\n\r\nMarathon+Docker统一架构\r\n\r\n由于mesos发布有很多种模式，我们在做这个时候主要考察了2种模式。\r\n\r\n独立集群模式\r\n\r\n在这个模式下，需要启动一个master作为发布的入口，再对每个实例分别启动slave。这时候每个slave在启动的时候资源已经固定了。再增加资源的时候需要启动新的slave然后停止之前的任务修改资源配置数重发，这种模式的好处是有一个单独的界面，你可以直接给业务线这个独立集群模式的界面来用，界面上他们可以根据自己固定的资源发多个任务，并且在SparkUI上可以直接看到日志。另外就是，他是预先占资源模式，能把资源占住，不会有资源在发布争抢中导致资源不够的情况，但是他的缺点就是做不到运行时的动态扩容。我们也实现了这种模式，本文\r\n\r\n仿mesos-dispacher模式\r\n\r\n在这个模式下，我们使用Marathon这个framework来模仿mesos-dispacher所做的事，就是先发一个driver然后再发executor挂载到driver来执行任务。关于日志，我们还是使用之前的方式调用Mesos的接口来获得日志。当需要增加资源的时候直接往结点继续挂executor就可以，当需要删除结点的时候直接停止executor即可。\r\n\r\n实施过程\r\n\r\n图4 仿mesos-dispacher模式图4 仿mesos-dispacher模式\r\n\r\n\r\n\r\n\r\n\r\n如何实现仿mesos-dispacher模式\r\n\r\n我们要做的事实际上是把图2的架构图变成图4的模式，其中Step 1和Step 2需要模仿，而Step 0则不需要，因为Step 0只是启动Framework的。我们通过观察meos-dispacher发现Step 1所做的实际上是调用Spark Submit向Mesos注册一个Framework然后再由driver来负责调度，我们利用mesos的constraints的特性，设置一个不存在的不可调度的策略，例如：colo:none，这样一来driver就无法管理资源，而我们使用Marathon自己来发布Spark Executor来挂到driver上来实现Marathon控制Spark的资源调度策略。由于Mesos他是把Offer推送给Framework的这一特性，我们使用的这种方式也不会有性能问题。\r\n\r\n图5 主要代码图5 主要代码\r\n\r\n那么图2中的Step 2是如何做到的呢？我们通过分析Spark源代码发现，Spark 2.0.2在Executor挂到drvier上是通过图5的命令来做到的。所以通过Marathon发布Spark Executor的基本原理就是模仿上面的图5代码。\r\n\r\n从图6可以看出Marathon发布的时候先发Spark Driver拿到mesos分配的Spark Driver的IP和PORT填入脚本，这个参数是Driver与Executor之间通信的通道，在发Spark Executor的时候需要提供，这个Driver的IP我们通过Mesos接口可以拿到，因为Driver会向Mesos注册一个Framework，我们拿到Framework的信息就拿到了IP和PORT，同时我们还可以拿到FrameworkID那这个PORT是在制作Docker镜像的时候随机分配的一个PORT0的一个环境变量，然后通过spark.driver.port指定，这样Executor这端就可以调用Marathon的REST API来拿到driver的Port。\r\n\r\n而参数executor-id是Spark Driver调度时按顺序分配的ID，从0开始每次递增1，如何生成executor-id呢？这个由Spark Executor自己生成一个不超过int的范围的不重复的随机数即可，这个的ID的不会影响其它行为。hostname可以直接通过命令获取。cores是我们通过用户提交的配置来计算出来的，这个Core需要填spark.executor.cores也就是每个Spark Executor的正常使用的Core与spark.mesos.extra.cores分配给每个Spark Executor之和。\r\n\r\n图6 Executor发布示意图图6 Executor发布示意图\r\n\r\n最后一项目app-id通过研究发现在Mesos上实际上就是Framework ID直接通过Mesos接口就可以获得。这样我们就完成了Executor的发布，通过拼上述的命令来把Spark Executor挂到了Driver上，但是实际生产应用中，我们发现了，他还存在Driver和Executor的同步问题。\r\n\r\nSpark Receiver的平衡问题\r\n\r\n在这里我要向大家介绍一下在Kafka使用了高阶API时，影响Spark性能的Receiver平衡问题，使用低阶API则不会有这个问题。如果使用Spark提供的Kafka高阶API，你会在代码里预先指定好Receiver的数量，然后再做一个Union，在Spark代码中他实际上是这样做的，他会先等待Executor连上Driver，默认是30s如果超过了调度的时间则开始进行Receiver的调度，而调度策略是ReceiverPolicy类里写死的，ReceiverPolicy的调度策略可以概括为，尽量保证均匀的分配给每个Host一定量的Recevier。\r\n\r\n图7 启动3个Spark Executor 示例图7 启动3个Spark Executor 示例\r\n\r\n举个例子来说，如图7当你启动了3个Spark Executor时，如果代码里指定了启动1个Executor，如果每个Executor启动在了不同的Host下，Spark在Receiver调度开始时随机地指定一个Executor启动Receiver并分配1个Core给这个Task。但是如果代码里指定为2个Receiver而2个Executor启动在了同1个Host1上，另一个启动在了Host2上，也就是Receiver的数量等于Host Unique数量，则他会在Host1中保证其中的一个Executor启动1个Receiver，Host2中启动一个Receiver。如果Receiver的数量，大于了Host Unique的数量如第三张图，则他会在随机地在Host1或者Host2中开Receiver，这就带来了一个问题。分析Spark源代码可知Spark Driver和Spark Executor之间通过运行一个DummyJob，也就是一个MapReduce任务来保证他们之间的同步的，但是他这种做法只能保证一个Spark Executor挂在了Spark Driver上，而不能够保证所有的Executor比如当只有一个Spark Executor挂在Spark Driver上的时候，这时候开始Receiver开始调度。\r\n\r\n如何保证Driver和Executor之间同步\r\n\r\n读过Spark官方文档的朋友都知道，Spark提供了2个参数去解决这个问题，他们分别是spark.scheduler.maxRegisteredResourcesWaitingTime用来设置一个等待Executor挂上的时间和spark.scheduler.minRegisteredResourcesRatio用来检查资源分配的比例，但是使用我们这种方式这两个参数都不起作用了，因为Spark在实现的过程中是通过一个运行一个DummyJob来保证这种挂载的方式同步的，这也是为什么第一个任务一定是70个Task的原因，但是他这种方式只能保证一个Executor挂上去了以后才开始调度Recevier,因此我们对源代码进行了修改，主要是ReceiverTracker那部分通过我们自定义的一个配置，让Executor数量达到指定的个数以后才开始发布，这样在Receiver调度的时候才会保证能够均匀地分配在各个结点，从而实现最好的性能。另外对于业务线写的jar包，我们是要求打成assembly包然后提交到我们的发布系统，发布系统会上传到swift上，在发布的时候，我们会先在容器里把包下载下来，然后启动Spark Driver，而当Spark Executor挂在Spark Driver上的时候，他们会自动从Spark Driver获取对应的jar包。\r\n\r\n如何保证容器的时间和编码的准确性让配置同步\r\n\r\n之前在部署1.6.1的mesos-dispacher架构的时候，我们就已经发现， Spark打出的中文日志会产生乱码，然后我们做了各种实验发现，无论如何设置JVM参数，或是使用代码进行内部的转换都解决不了乱码问题，在新架构的Docker环境中也不例外，不过最终还是让我们解决了，我们发现通过设置JAVA_TOOL_OPTIONS这个环境变量，JAVA虚拟机的参数才真正的修改生效，于是我们在容器启动的时候配置了file.encoding=UTF-8，乱码问题得才以解决，除此之外在Docker镜像中系统的时间也是不准确的，默认是UTC时间，而系统时间对代码的影响也很大，有可能写入到HDFS的文件是以时间戳生成的，我们一开始解决这个问题的方法是通过以只读的方式在Docker中挂载宿主机上的/etc/localtime来修正时间，但是发现时间还是不正确，这时因为Spark内部还会根据时区自动修正时间为UTC，所以还需要给JVM加一个环境变量设置user.timezone=PRC 这样时间才可以保证时间是对的，另外使用这种架构的时候spark.driver.extraJavaOptions和spark.executor.extraJavaOptions这两个参数也不会生效，需要用户通过发布配置传过来，然后在容器中追加到JAVA_TOOL_OPTIONS。另外值得注意的是SPARK_EXECUTOR_MEMORY也不会同步，需要手动来进行设置。\r\n\r\n如何保证driver和executor失败时同步\r\n\r\n虽然我们之前解决了marathon发布driver和executor之间的连接问题，但是由于mesos接口慢，在我们实际测试中，发30个executor就可以把mesos打挂，因此，我们想了另一个办法来解决这个问题，我们首先修改了Spark代码，让他的Spark Driver在不依赖mesos-dispacher的情况下实现driver的HA，HA的实现原理大概就是每次在Spark Driver启动注册Framework的时候，把Framework ID存到zk里，然后在程序挂掉了以后保持Framework与Mesos的连接，在下次启动的时候重新注册这个Framework，这样的话，Framework ID可以基本保持不变，在发布Spark Executor的时候就可以固定住这个Framework ID在Executor挂掉的时候marathon拉起来也能保证重连，而driver如果挂掉的话，他会重新注册，获得的Framework ID不变，又可以继续运行，这样做只需要在Spark Driver发布完成以后调用一次Mesos接口拿到Framework ID分发给Spark Executor就可以了。顺便说一下Spark Executor拿Spark Driver的ip和port是通过调Marathon接口实现了，而Marathon接口速度很快，不会有这个问题。\r\n\r\n如何升级Spark版本\r\n\r\n对于业务线的任务来说升级Spark是一件比较麻烦的事，主要原因是需要他们改代码，不过从改代码的角度来说，变化也不算大，也就是Spark版本和Scala版本变一下，另外就是有些API也需要做一点调整，另外就是升级麻烦的另一个原因也是因为之前没有使用Marathon+Docker的模式，如果之前就使用了这种模式，那只需要把镜像给修改了，愿意升级的升级，不愿意升级的可以使用原来的镜像跑，在以后的升级中，我们只需要制作新镜像就可以了，非常方便迁移，可以让他跑在任何集群。那现在为了过渡到这种模式，再结合之前发布的经验，我们使用的模式是旧的有一套配置，新的也有一套配置，然后通过在git上打tag的方式，在旧的配置里加入升级信息，然后发布逻辑改为优先读取是否要升级，如果需要升级则发在新集群上，如果不需要则保持原来不变，我们会先让业务线进行测试，同时保持旧的任务在线，当他们测试通过了以后，再停止旧的作务，把改好的新版本发到新集群上，当发现有问题的时候可以用原来的tag进行回滚，因为原来的tag里的配置会先判断是否需要升级，而之前的配置肯定没有需要升级的选项。\r\n\r\n如何监控Spark的运行状态\r\n\r\nSpark自身有一套metric监控，这个在新版本也不例外，在我们集群中唯一的变更就是把不靠谱的udp改成了tcp，另外我们因为使用的是Docker容器，这样我们就还有另一套监控，这个监控是分析cgroup里的数据，使用的是我们开源的pyadvisor来做的，我们可以通过监控来观察CPU和内存的使用情况，很好的提出优化改进资源使用的建议，另外，对于业务线们，我们推荐他们使用的是Spark里自带的Accumulator，先在Spark Driver上做一个聚合1分钟的指标，然后再往watcher上打他们的业务指标，这样即不会有之前不同host之间的聚合指标的问题，同时也给watcher减轻了压力。\r\n\r\n总结\r\n\r\n以上就是我们所做的新的Spark架构，综合看来有以下的优点：\r\n\r\n无需环境配置与部署，走Docker。对于以后也升级也会较方便，可以复用之前Dockerfile。\r\n是以直接启动的方式，配置绝对生效，不会出现复杂配置的问题。\r\n自动平衡executor。没有Receiver不平衡的问题问题，在某些场景下可以动态增减executor，不会有失败过多而不再拉executor的现象，也不不会有多发或少发executor现象。\r\n由于使用Marathon的原因，可以支持多标签，复杂调度，例如业务线有时候需要固定指定的机运行Spark开百名单，同时也为我们以后做迁移有了更多的便利。','去哪儿网基于Marathon管理Spark 2.0实现动态扩容实践（转载）','','inherit','open','open','','664-revision-v1','','','2017-04-10 03:25:40','2017-04-10 03:25:40','',664,'http://unasm.com/2017/04/665/',0,'revision','',0),(666,1,'2017-04-13 15:17:59','2017-04-13 15:17:59','tf_idf的假设是：<strong>一个词语在一篇文章中出现次数越多, 同时在所有文档中出现次数越少, 越能够代表该文章. </strong>\r\n\r\n因为想知道文章的主题，说的内容，查看他包含的名词就好，所以接下来我们就需要根据tf_idf的思想从文章包含的众多名词中，提取出能够表征其内容的几个名次。\r\n\r\ntf_idf 涉及到两个统计量，一个是词语在本文章中出现的次数，简称词频，一个是在所有文章里面出现的次数，以下简称词文量。\r\n<h4><strong>下面分别统计这两个统计量的分布特性</strong></h4>\r\n从某网站抓取文章5641度篇，作为我们分析的一个样本。\r\n\r\n查看其包含的词频分布，比如第一条数据，解释为 同花顺在一篇文章中出现3次，像这样的单词有18102个， 如果是绘图的话。可以很清晰的看出，类似于负指数分布曲线，随着出现次数增加骤降，几乎没有词语在同一篇文章中出现超过60词。\r\n<pre>3     18102\r\n4      8229\r\n5      4387\r\n6      2609\r\n7      1578\r\n8      1137\r\n9       822\r\n10      600\r\n11      433\r\n12      371</pre>\r\n如果对单个单词出现在所有的文章的这个数据的分布进行统计，则绝大多数单词的词文量，也就是出现在的文章数，为100多。把这些数据 导出到文件里面看的话，会发现，词文量大于200的，大部分都是一些表征性不是很强的单词，其实也很好理解，就是一个单词，几乎一半的文章都用它，那肯定是一个很常见普遍没什么表征性的单词,比如 “市场 ”，“行业”，“投资”，都是没有用的单词，但是如果看词文量为个位数的单词，很多都是一些分词错误的，比如，查看的数据里面，有前房,中用，大险 等，都是切词错误导致的。当然，也有表征性很强的一些单词，比如人名，盖茨，项俊波等等。\r\n<h4><strong>那提出一个问题，如何计算一个单词在文章之中的表征能力呢？</strong></h4>\r\n第一次的尝试是 使用 (<strong>表征值 = 词频 / 词文量</strong>) 然后通过对表征值排序，得到每篇文章里面的表征值top N,计算方式很简单，也符合 tf_idf的思想，第一眼看上去，感觉也不错，很多文章，通过这几个词语，就能猜到大概在描述什么。仔细分析数据，发现其实是有缺陷的，这种算法过于倾向 那种在使用频率极低的词语，比如 前房，它其实是“目前房地产市场” 分词错误导致的，在其他文字中出现频率极低，但是本文中出现一两次，就导致表征值很高，而相对通用的词，真正希望出现的词“房地产”，则因为在多达 几十篇文章中被用到，而权重很低。\r\n\r\n第二次的表征值时候，就倾向于 得到 词文量 为  0.05 * 总文章数 的单词，这样的单词被合理的引用到，并没有过度泛滥，也不太可能被是分词错误导致的，能够比较合理的反应文章主题，而引用次数超过0.1 * 总文章数的单词，则被视为泛滥，无表征意义而直接拒绝。这里使用一个 函数 <strong> np.sin( 被引用文章数 / (0.1 * 总文章数) * np.pi )</strong>, 这样的话，0.05 * 总文章数附近的单词能够得到相应大的权重，而相对更远的单词，得到的权重更小。\r\n\r\n考虑另一个变量，词频，我们还是希望能得到在文章出反复提及的词，可能比较合适的表征 文章的中心，但是又需要做到归一化，具体的方案为<strong> 自身相对词频 = 提及数 / （该单词被用到的平均值）</strong>，应该能够反映 该单词在文章内 使用的 频繁程度。\r\n\r\n两个系数相乘，则为该单词在此文章内的表征值，对表征值排序。提取top N\r\n\r\n就实测而言， 以这篇文章为例，进行分词分析  <a title=\"房地产行业周度报告：年末将至&amp;sbquo;市场观望情绪明显\" href=\"http://data.eastmoney.com/report/20161215/hy,APPH6bwe8JWBIndustry.html\">房地产行业周度报告：年末将至&amp;sbquo;市场观望情绪明显</a>\r\n<pre>房	0.01	0.91\r\n商品房	0.05	0.50\r\n场主	0.06	0.87\r\n均值	0.08	0.70\r\n大事	0.10	0.95\r\n对冲	0.03	0.81\r\n底价	0.04	0.88\r\n开发商	0.03	0.68\r\n总价	0.02	0.85\r\n成交量	0.11	1.94\r\n房地产	0.23	1.26\r\n房市	0.01	1.53\r\n房市场	0.01	0.79\r\n新政	0.07	0.68\r\n本周一	0.02	1.77\r\n</pre>\r\n按照上述算法得到的结果，其中房地产 的 两项指标 为0.23和1.26 ，均为结果的各项之首，作为一篇将房地产市场的文章，这样的分析结果是非常合理的，第二项为成交量，则可以看出 跟房地产的成交量有关，至于 词频得分很高的 本周一，则因为 词文量意向得分低 而总分低。\r\n\r\n不过 仔细检查结果而言，还是不够好，筛选出来的大量的词都是只在文章中出现一次，并不能很好的反映文章自身的特征，刚刚的权重得来的重要性排行，第二列为出现的词频，可以看到，按照这种权重设计，得到的还是很多对本文特征表现不是很好的词。因为 出现一次的词的分布是负指数分布，所以相对来说，出现2词以上的词，能更清晰的反映文章的主旨，\r\n<pre>上证		1	0.19	0.28	0.69	 1 	 47 	5242	j\r\n中小		1	0.17	0.23	0.73	 1 	 47 	5242	j\r\n上证指数		1	0.12	0.12	0.96	 1 	 47 	5242	n\r\n要闻		1	0.12	0.12	1.00	 1 	 47 	5242	n\r\n纺织		4	0.10	0.11	0.95	 4 	 47 	5242	n\r\n棉花		4	0.09	0.04	2.07	 4 	 47 	5242	n\r\n事业		1	0.09	0.16	0.55	 1 	 47 	5242	n\r\n实业		1	0.08	0.12	0.67	 1 	 47 	5242	n\r\n对公		1	0.08	0.09	0.90	 1 	 47 	5242	n\r\n效益		1	0.08	0.09	0.86	 1 	 47 	5242	n\r\n关注度		1	0.07	0.08	0.92	 1 	 47 	5242	n\r\n全资		1	0.07	0.09	0.74	 1 	 47 	5242	n\r\n大众		1	0.07	0.11	0.66	 1 	 47 	5242	n\r\n个人		1	0.06	0.12	0.54	 1 	 47 	5242	n\r\n责任		1	0.06	0.08	0.74	 1 	 47 	5242	n\r\n收益率		1	0.06	0.12	0.47	 1 	 47 	5242	n\r\n集资		1	0.06	0.08	0.72	 1 	 47 	5242	n\r\n实施方案		1	0.05	0.06	0.81	 1 	 47 	5242	n\r\n织品		2	0.05	0.04	1.19	 2 	 47 	5242	n\r\n</pre>\r\n这里提出一个设想，就是 在同一个文章内出现的次数越多的单词，越能够体现文章的主题。但是又必须跟 词文量结合起来，避免出现多普遍出现多的单词。所以新的权重公式应该为：<strong>权重 = np.sin( 被引用文章数 / (0.1 * 总文章数) * np.pi ) * 自身相对词频 * np.exp(词频 * 0.5)</strong>, 相比于之前的权重公式 区别仅在于 增加了np.exp(词频 * 0.5),希望出现次数少的单词权重系数低，而出现超过3次以上的单词，出现频率高，0.5的意义在于避免指数过于迅速的上升，为避免过度倾向于本文内出现频率高的词，np.exp(词频 * 0.5)的词频最大值设为9个，np.ext(4.5) = 90 这样有一些无意义的单词出现，词文量 权值小于 0.01，也可以被及时中和过滤掉,而不会因为指数权重过大导致成为权重排行成为词频 倒排。\r\n实测结果，刚刚相同的文章，得到的新的权重排行如下\r\n<pre>纺织		4	0.75	0.11	7.05	 4 	 47 	5242	n\r\n棉花		4	0.67	0.04	15.27	 4 	 47 	5242	n\r\n上证		1	0.32	0.28	1.13	 1 	 47 	5242	j\r\n中小		1	0.27	0.23	1.20	 1 	 47 	5242	j\r\n上证指数		1	0.20	0.12	1.58	 1 	 47 	5242	n\r\n同比		3	0.20	0.28	0.70	 3 	 47 	5242	n\r\n要闻		1	0.19	0.12	1.64	 1 	 47 	5242	n\r\n事业		1	0.14	0.16	0.91	 1 	 47 	5242	n\r\n实业		1	0.13	0.12	1.10	 1 	 47 	5242	n\r\n对公		1	0.13	0.09	1.48	 1 	 47 	5242	n\r\n</pre>\r\n可以看出来，棉花 纺织的排行上升，而 相对普遍中庸的词 上证中小则 排名下降，而 上证， 中小的 自我相对系数很高，所以维持在了相对高位，可以看出，这篇文章和 棉纺织的证券市场有关    <a title=\"纺织服装行业：周报\" href=\"http://data.eastmoney.com/report/20150321/hy,APPGLqEcmqiIIndustry.html\">纺织服装行业：周报</a>','基于tf_idf思想的文本特征词提取 实践','','publish','open','open','','%e5%9f%ba%e4%ba%8etf_idf%e6%80%9d%e6%83%b3%e7%9a%84%e6%96%87%e6%9c%ac%e7%89%b9%e5%be%81%e8%af%8d%e6%8f%90%e5%8f%96-%e5%ae%9e%e8%b7%b5','','','2017-04-14 06:33:24','2017-04-14 06:33:24','',0,'http://unasm.com/?p=666',0,'post','',0),(667,1,'2017-04-13 15:17:59','2017-04-13 15:17:59','tf_idf的假设是：<strong>一个词语在一篇文章中出现次数越多, 同时在所有文档中出现次数越少, 越能够代表该文章. </strong>\r\n\r\n因为想知道文章的主题，说的内容，查看他包含的名词就好，所以接下来我们就需要根据tf_idf的思想从文章包含的众多名词中，提取出能够表征其内容的几个名次。\r\n\r\ntf_idf 涉及到两个统计量，一个是词语在本文章中出现的次数，简称词频，一个是在所有文章里面出现的次数，以下简称词文量。\r\n<h4><strong>下面分别统计这两个变量的分布特性</strong></h4>\r\n从某网站抓取文章5641度篇，作为我们分析的一个样本。\r\n\r\n查看其包含的词频分布，比如第一条数据，解释为 同花顺在一篇文章中出现3次，像这样的单词有18102个， 如果是绘图的话。可以很清晰的看出，类似于负指数分布曲线，随着出现次数增加骤降，几乎没有词语在同一篇文章中出现超过60词。\r\n<pre>3     18102\r\n4      8229\r\n5      4387\r\n6      2609\r\n7      1578\r\n8      1137\r\n9       822\r\n10      600\r\n11      433\r\n12      371</pre>\r\n如果对单个单词出现在所有的文章的这个数据的分布进行统计，则绝大多数单词的词文量，也就是出现在的文章数，为100多。把这些数据 导出到文件里面看的话，会发现，词文量大于200的，大部分都是一些表征性不是很强的单词，其实也很好理解，就是一个单词，几乎一半的文章都用它，那肯定是一个很常见普遍没什么表征性的单词,比如 “市场 ”，“行业”，“投资”，都是没有用的单词，但是如果看词文量为个位数的单词，很多都是一些分词错误的，比如，查看的数据里面，有前房,中用，大险 等，都是切词错误导致的。当然，也有表征性很强的一些单词，比如人名，盖茨，项俊波等等。\r\n<h4><strong>那提出一个问题，如何计算一个单词在文章之中的表征能力呢？</strong></h4>\r\n第一次的尝试是 使用 (<strong>表征值 = 词频 / 词文量</strong>) 然后通过对表征值排序，得到每篇文章里面的表征值top N,计算方式很简单，也符合 tf_idf的思想，第一眼看上去，感觉也不错，很多文章，通过这几个词语，就能猜到大概在描述什么。仔细分析数据，发现其实是有缺陷的，这种算法过于倾向 那种在使用频率极低的词语，比如 前房，它其实是“目前房地产市场” 分词错误导致的，在其他文字中出现频率极低，但是本文中出现一两次，就导致表征值很高，而相对通用的词，真正希望出现的词“房地产”，则因为在多达 几十篇文章中被用到，而权重很低。\r\n\r\n所以第二次的表征值时候，就倾向于 得到 词文量 为  0.05 * 总文章数 的单词，这样的单词被合理的引用到，并没有过度泛滥，也不太可能被是分词错误导致的，能够比较合理的反应文章主题，而引用次数超过0.1 * 总文章数的单词，则被视为泛滥，无表征意义而直接拒绝。这里使用一个 函数  np.sin( 被引用文章数 / (0.1 * 总文章数) * np.pi ), 这样的话，0.05 * 总文章数附近的单词能够得到相应大的权重，而相对更远的单词，得到的权重更小。\r\n\r\n考虑另一个变量，词频，我们还是希望能得到在文章出反复提及的词，可能比较合适的表征 文章的中心，但是又需要做到归一化，具体的方案为 提及数 / （该单词被用到的平均值），应该能够反映 该单词在文章内 使用的 频繁程度。','基于tf_idf思想的文本特征词提取 实践','','inherit','open','open','','666-revision-v1','','','2017-04-13 15:17:59','2017-04-13 15:17:59','',666,'http://unasm.com/2017/04/667/',0,'revision','',0),(668,1,'2017-04-14 06:28:56','2017-04-14 06:28:56','tf_idf的假设是：<strong>一个词语在一篇文章中出现次数越多, 同时在所有文档中出现次数越少, 越能够代表该文章. </strong>\n\n因为想知道文章的主题，说的内容，查看他包含的名词就好，所以接下来我们就需要根据tf_idf的思想从文章包含的众多名词中，提取出能够表征其内容的几个名次。\n\ntf_idf 涉及到两个统计量，一个是词语在本文章中出现的次数，简称词频，一个是在所有文章里面出现的次数，以下简称词文量。\n<h4><strong>下面分别统计这两个统计量的分布特性</strong></h4>\n从某网站抓取文章5641度篇，作为我们分析的一个样本。\n\n查看其包含的词频分布，比如第一条数据，解释为 同花顺在一篇文章中出现3次，像这样的单词有18102个， 如果是绘图的话。可以很清晰的看出，类似于负指数分布曲线，随着出现次数增加骤降，几乎没有词语在同一篇文章中出现超过60词。\n<pre>3     18102\n4      8229\n5      4387\n6      2609\n7      1578\n8      1137\n9       822\n10      600\n11      433\n12      371</pre>\n如果对单个单词出现在所有的文章的这个数据的分布进行统计，则绝大多数单词的词文量，也就是出现在的文章数，为100多。把这些数据 导出到文件里面看的话，会发现，词文量大于200的，大部分都是一些表征性不是很强的单词，其实也很好理解，就是一个单词，几乎一半的文章都用它，那肯定是一个很常见普遍没什么表征性的单词,比如 “市场 ”，“行业”，“投资”，都是没有用的单词，但是如果看词文量为个位数的单词，很多都是一些分词错误的，比如，查看的数据里面，有前房,中用，大险 等，都是切词错误导致的。当然，也有表征性很强的一些单词，比如人名，盖茨，项俊波等等。\n<h4><strong>那提出一个问题，如何计算一个单词在文章之中的表征能力呢？</strong></h4>\n第一次的尝试是 使用 (<strong>表征值 = 词频 / 词文量</strong>) 然后通过对表征值排序，得到每篇文章里面的表征值top N,计算方式很简单，也符合 tf_idf的思想，第一眼看上去，感觉也不错，很多文章，通过这几个词语，就能猜到大概在描述什么。仔细分析数据，发现其实是有缺陷的，这种算法过于倾向 那种在使用频率极低的词语，比如 前房，它其实是“目前房地产市场” 分词错误导致的，在其他文字中出现频率极低，但是本文中出现一两次，就导致表征值很高，而相对通用的词，真正希望出现的词“房地产”，则因为在多达 几十篇文章中被用到，而权重很低。\n\n第二次的表征值时候，就倾向于 得到 词文量 为  0.05 * 总文章数 的单词，这样的单词被合理的引用到，并没有过度泛滥，也不太可能被是分词错误导致的，能够比较合理的反应文章主题，而引用次数超过0.1 * 总文章数的单词，则被视为泛滥，无表征意义而直接拒绝。这里使用一个 函数  np.sin( 被引用文章数 / (0.1 * 总文章数) * np.pi ), 这样的话，0.05 * 总文章数附近的单词能够得到相应大的权重，而相对更远的单词，得到的权重更小。\n\n考虑另一个变量，词频，我们还是希望能得到在文章出反复提及的词，可能比较合适的表征 文章的中心，但是又需要做到归一化，具体的方案为<strong> 自身相对词频 = 提及数 / （该单词被用到的平均值）</strong>，应该能够反映 该单词在文章内 使用的 频繁程度。\n\n两个系数相乘，则为该单词在此文章内的表征值，对表征值排序。提取top N\n\n就实测而言， 以这篇文章为例，进行分词分析  <a title=\"房地产行业周度报告：年末将至&amp;sbquo;市场观望情绪明显\" href=\"http://data.eastmoney.com/report/20161215/hy,APPH6bwe8JWBIndustry.html\">房地产行业周度报告：年末将至&amp;sbquo;市场观望情绪明显</a>\n<pre>房	0.01	0.91\n商品房	0.05	0.50\n场主	0.06	0.87\n均值	0.08	0.70\n大事	0.10	0.95\n对冲	0.03	0.81\n底价	0.04	0.88\n开发商	0.03	0.68\n总价	0.02	0.85\n成交量	0.11	1.94\n房地产	0.23	1.26\n房市	0.01	1.53\n房市场	0.01	0.79\n新政	0.07	0.68\n本周一	0.02	1.77\n</pre>\n按照上述算法得到的结果，其中房地产 的 两项指标 为0.23和1.26 ，均为结果的各项之首，作为一篇将房地产市场的文章，这样的分析结果是非常合理的，第二项为成交量，则可以看出 跟房地产的成交量有关，至于 词频得分很高的 本周一，则因为 词文量意向得分低 而总分低。\n\n不过 仔细检查结果而言，还是不够好，筛选出来的大量的词都是只在文章中出现一次，并不能很好的反映文章自身的特征，刚刚的权重得来的重要性排行，第二列为出现的词频，可以看到，按照这种权重设计，得到的还是很多对本文特征表现不是很好的词。因为 出现一次的词的分布是负指数分布，所以相对来说，出现2词以上的词，能更清晰的反映文章的主旨，\n<pre>\n上证		1	0.19	0.28	0.69	 1 	 47 	5242	j\n中小		1	0.17	0.23	0.73	 1 	 47 	5242	j\n上证指数		1	0.12	0.12	0.96	 1 	 47 	5242	n\n要闻		1	0.12	0.12	1.00	 1 	 47 	5242	n\n纺织		4	0.10	0.11	0.95	 4 	 47 	5242	n\n棉花		4	0.09	0.04	2.07	 4 	 47 	5242	n\n事业		1	0.09	0.16	0.55	 1 	 47 	5242	n\n实业		1	0.08	0.12	0.67	 1 	 47 	5242	n\n对公		1	0.08	0.09	0.90	 1 	 47 	5242	n\n效益		1	0.08	0.09	0.86	 1 	 47 	5242	n\n关注度		1	0.07	0.08	0.92	 1 	 47 	5242	n\n全资		1	0.07	0.09	0.74	 1 	 47 	5242	n\n大众		1	0.07	0.11	0.66	 1 	 47 	5242	n\n个人		1	0.06	0.12	0.54	 1 	 47 	5242	n\n责任		1	0.06	0.08	0.74	 1 	 47 	5242	n\n收益率		1	0.06	0.12	0.47	 1 	 47 	5242	n\n集资		1	0.06	0.08	0.72	 1 	 47 	5242	n\n实施方案		1	0.05	0.06	0.81	 1 	 47 	5242	n\n织品		2	0.05	0.04	1.19	 2 	 47 	5242	n\n</pre>\n\n这里提出一个设想，就是 在同一个文章内出现的次数越多的单词，越能够体现文章的主题。但是又必须跟 词文量结合起来，避免出现多普遍出现多的单词。所以新的权重公式应该为：权重 = np.sin( 被引用文章数 / (0.1 * 总文章数) * np.pi ) * 自身相对词频 * np.exp(词频 * 0.5), 相比于之前的权重公式 区别仅在于 增加了np.exp(词频 * 0.5),希望出现次数少的单词权重系数低，而出现超过3次以上的单词，出现频率高，0.5的意义在于避免指数过于迅速的上升，为避免过度倾向于本文内出现频率高的词，np.exp(词频 * 0.5)的词频最大值设为9个，np.ext(4.5) = 90  这样有一些无意义的单词出现，词文量 权值小于 0.01，也可以被及时中和过滤掉,而不会因为指数权重过大导致成为权重排行成为词频 倒排。\n实测结果，刚刚相同的文章，得到的新的权重排行如下\n<pre>\n纺织		4	0.75	0.11	7.05	 4 	 47 	5242	n\n棉花		4	0.67	0.04	15.27	 4 	 47 	5242	n\n上证		1	0.32	0.28	1.13	 1 	 47 	5242	j\n中小		1	0.27	0.23	1.20	 1 	 47 	5242	j\n上证指数		1	0.20	0.12	1.58	 1 	 47 	5242	n\n同比		3	0.20	0.28	0.70	 3 	 47 	5242	n\n要闻		1	0.19	0.12	1.64	 1 	 47 	5242	n\n事业		1	0.14	0.16	0.91	 1 	 47 	5242	n\n实业		1	0.13	0.12	1.10	 1 	 47 	5242	n\n对公		1	0.13	0.09	1.48	 1 	 47 	5242	n\n</pre>\n可以看出来，棉花 纺织的排行上升，而 相对普遍中庸的词 上证中小则 排名下降，而 上证， 中小的 自我相对系数很高，所以维持在了相对高位，可以看出，这篇文章和 棉纺织的指数有关','基于tf_idf思想的文本特征词提取 实践','','inherit','open','open','','666-autosave-v1','','','2017-04-14 06:28:56','2017-04-14 06:28:56','',666,'http://unasm.com/2017/04/668/',0,'revision','',0),(669,1,'2017-04-13 15:41:56','2017-04-13 15:41:56','tf_idf的假设是：<strong>一个词语在一篇文章中出现次数越多, 同时在所有文档中出现次数越少, 越能够代表该文章. </strong>\r\n\r\n因为想知道文章的主题，说的内容，查看他包含的名词就好，所以接下来我们就需要根据tf_idf的思想从文章包含的众多名词中，提取出能够表征其内容的几个名次。\r\n\r\ntf_idf 涉及到两个统计量，一个是词语在本文章中出现的次数，简称词频，一个是在所有文章里面出现的次数，以下简称词文量。\r\n<h4><strong>下面分别统计这两个统计量的分布特性</strong></h4>\r\n从某网站抓取文章5641度篇，作为我们分析的一个样本。\r\n\r\n查看其包含的词频分布，比如第一条数据，解释为 同花顺在一篇文章中出现3次，像这样的单词有18102个， 如果是绘图的话。可以很清晰的看出，类似于负指数分布曲线，随着出现次数增加骤降，几乎没有词语在同一篇文章中出现超过60词。\r\n<pre>3     18102\r\n4      8229\r\n5      4387\r\n6      2609\r\n7      1578\r\n8      1137\r\n9       822\r\n10      600\r\n11      433\r\n12      371</pre>\r\n如果对单个单词出现在所有的文章的这个数据的分布进行统计，则绝大多数单词的词文量，也就是出现在的文章数，为100多。把这些数据 导出到文件里面看的话，会发现，词文量大于200的，大部分都是一些表征性不是很强的单词，其实也很好理解，就是一个单词，几乎一半的文章都用它，那肯定是一个很常见普遍没什么表征性的单词,比如 “市场 ”，“行业”，“投资”，都是没有用的单词，但是如果看词文量为个位数的单词，很多都是一些分词错误的，比如，查看的数据里面，有前房,中用，大险 等，都是切词错误导致的。当然，也有表征性很强的一些单词，比如人名，盖茨，项俊波等等。\r\n<h4><strong>那提出一个问题，如何计算一个单词在文章之中的表征能力呢？</strong></h4>\r\n第一次的尝试是 使用 (<strong>表征值 = 词频 / 词文量</strong>) 然后通过对表征值排序，得到每篇文章里面的表征值top N,计算方式很简单，也符合 tf_idf的思想，第一眼看上去，感觉也不错，很多文章，通过这几个词语，就能猜到大概在描述什么。仔细分析数据，发现其实是有缺陷的，这种算法过于倾向 那种在使用频率极低的词语，比如 前房，它其实是“目前房地产市场” 分词错误导致的，在其他文字中出现频率极低，但是本文中出现一两次，就导致表征值很高，而相对通用的词，真正希望出现的词“房地产”，则因为在多达 几十篇文章中被用到，而权重很低。\r\n\r\n第二次的表征值时候，就倾向于 得到 词文量 为  0.05 * 总文章数 的单词，这样的单词被合理的引用到，并没有过度泛滥，也不太可能被是分词错误导致的，能够比较合理的反应文章主题，而引用次数超过0.1 * 总文章数的单词，则被视为泛滥，无表征意义而直接拒绝。这里使用一个 函数  np.sin( 被引用文章数 / (0.1 * 总文章数) * np.pi ), 这样的话，0.05 * 总文章数附近的单词能够得到相应大的权重，而相对更远的单词，得到的权重更小。\r\n\r\n考虑另一个变量，词频，我们还是希望能得到在文章出反复提及的词，可能比较合适的表征 文章的中心，但是又需要做到归一化，具体的方案为 提及数 / （该单词被用到的平均值），应该能够反映 该单词在文章内 使用的 频繁程度。\r\n\r\n两个系数相乘，则为该单词在此文章内的表征值，对表征值排序。提取top N\r\n\r\n就实测而言， 以这篇文章为例，进行分词分析  <a title=\"房地产行业周度报告：年末将至&amp;sbquo;市场观望情绪明显\" href=\"http://data.eastmoney.com/report/20161215/hy,APPH6bwe8JWBIndustry.html\">房地产行业周度报告：年末将至&amp;sbquo;市场观望情绪明显</a>\r\n<pre>房	0.01	0.91\r\n商品房	0.05	0.50\r\n场主	0.06	0.87\r\n均值	0.08	0.70\r\n大事	0.10	0.95\r\n对冲	0.03	0.81\r\n底价	0.04	0.88\r\n开发商	0.03	0.68\r\n总价	0.02	0.85\r\n成交量	0.11	1.94\r\n房地产	0.23	1.26\r\n房市	0.01	1.53\r\n房市场	0.01	0.79\r\n新政	0.07	0.68\r\n本周一	0.02	1.77\r\n</pre>\r\n按照上述算法得到的结果，其中房地产 的 两项指标 为0.23和1.26 ，均为结果的各项之首，作为一篇将房地产市场的文章，这样的分析结果是非常合理的，第二项为成交量，则可以看出 跟房地产的成交量有关，至于 词频得分很高的 本周一，则因为 词文量意向得分低 而总分低。','基于tf_idf思想的文本特征词提取 实践','','inherit','open','open','','666-revision-v1','','','2017-04-13 15:41:56','2017-04-13 15:41:56','',666,'http://unasm.com/2017/04/669/',0,'revision','',0),(671,1,'2017-04-14 06:30:30','2017-04-14 06:30:30','tf_idf的假设是：<strong>一个词语在一篇文章中出现次数越多, 同时在所有文档中出现次数越少, 越能够代表该文章. </strong>\r\n\r\n因为想知道文章的主题，说的内容，查看他包含的名词就好，所以接下来我们就需要根据tf_idf的思想从文章包含的众多名词中，提取出能够表征其内容的几个名次。\r\n\r\ntf_idf 涉及到两个统计量，一个是词语在本文章中出现的次数，简称词频，一个是在所有文章里面出现的次数，以下简称词文量。\r\n<h4><strong>下面分别统计这两个统计量的分布特性</strong></h4>\r\n从某网站抓取文章5641度篇，作为我们分析的一个样本。\r\n\r\n查看其包含的词频分布，比如第一条数据，解释为 同花顺在一篇文章中出现3次，像这样的单词有18102个， 如果是绘图的话。可以很清晰的看出，类似于负指数分布曲线，随着出现次数增加骤降，几乎没有词语在同一篇文章中出现超过60词。\r\n<pre>3     18102\r\n4      8229\r\n5      4387\r\n6      2609\r\n7      1578\r\n8      1137\r\n9       822\r\n10      600\r\n11      433\r\n12      371</pre>\r\n如果对单个单词出现在所有的文章的这个数据的分布进行统计，则绝大多数单词的词文量，也就是出现在的文章数，为100多。把这些数据 导出到文件里面看的话，会发现，词文量大于200的，大部分都是一些表征性不是很强的单词，其实也很好理解，就是一个单词，几乎一半的文章都用它，那肯定是一个很常见普遍没什么表征性的单词,比如 “市场 ”，“行业”，“投资”，都是没有用的单词，但是如果看词文量为个位数的单词，很多都是一些分词错误的，比如，查看的数据里面，有前房,中用，大险 等，都是切词错误导致的。当然，也有表征性很强的一些单词，比如人名，盖茨，项俊波等等。\r\n<h4><strong>那提出一个问题，如何计算一个单词在文章之中的表征能力呢？</strong></h4>\r\n第一次的尝试是 使用 (<strong>表征值 = 词频 / 词文量</strong>) 然后通过对表征值排序，得到每篇文章里面的表征值top N,计算方式很简单，也符合 tf_idf的思想，第一眼看上去，感觉也不错，很多文章，通过这几个词语，就能猜到大概在描述什么。仔细分析数据，发现其实是有缺陷的，这种算法过于倾向 那种在使用频率极低的词语，比如 前房，它其实是“目前房地产市场” 分词错误导致的，在其他文字中出现频率极低，但是本文中出现一两次，就导致表征值很高，而相对通用的词，真正希望出现的词“房地产”，则因为在多达 几十篇文章中被用到，而权重很低。\r\n\r\n第二次的表征值时候，就倾向于 得到 词文量 为  0.05 * 总文章数 的单词，这样的单词被合理的引用到，并没有过度泛滥，也不太可能被是分词错误导致的，能够比较合理的反应文章主题，而引用次数超过0.1 * 总文章数的单词，则被视为泛滥，无表征意义而直接拒绝。这里使用一个 函数  np.sin( 被引用文章数 / (0.1 * 总文章数) * np.pi ), 这样的话，0.05 * 总文章数附近的单词能够得到相应大的权重，而相对更远的单词，得到的权重更小。\r\n\r\n考虑另一个变量，词频，我们还是希望能得到在文章出反复提及的词，可能比较合适的表征 文章的中心，但是又需要做到归一化，具体的方案为<strong> 自身相对词频 = 提及数 / （该单词被用到的平均值）</strong>，应该能够反映 该单词在文章内 使用的 频繁程度。\r\n\r\n两个系数相乘，则为该单词在此文章内的表征值，对表征值排序。提取top N\r\n\r\n就实测而言， 以这篇文章为例，进行分词分析  <a title=\"房地产行业周度报告：年末将至&amp;sbquo;市场观望情绪明显\" href=\"http://data.eastmoney.com/report/20161215/hy,APPH6bwe8JWBIndustry.html\">房地产行业周度报告：年末将至&amp;sbquo;市场观望情绪明显</a>\r\n<pre>房	0.01	0.91\r\n商品房	0.05	0.50\r\n场主	0.06	0.87\r\n均值	0.08	0.70\r\n大事	0.10	0.95\r\n对冲	0.03	0.81\r\n底价	0.04	0.88\r\n开发商	0.03	0.68\r\n总价	0.02	0.85\r\n成交量	0.11	1.94\r\n房地产	0.23	1.26\r\n房市	0.01	1.53\r\n房市场	0.01	0.79\r\n新政	0.07	0.68\r\n本周一	0.02	1.77\r\n</pre>\r\n按照上述算法得到的结果，其中房地产 的 两项指标 为0.23和1.26 ，均为结果的各项之首，作为一篇将房地产市场的文章，这样的分析结果是非常合理的，第二项为成交量，则可以看出 跟房地产的成交量有关，至于 词频得分很高的 本周一，则因为 词文量意向得分低 而总分低。\r\n\r\n不过 仔细检查结果而言，还是不够好，筛选出来的大量的词都是只在文章中出现一次，并不能很好的反映文章自身的特征，刚刚的权重得来的重要性排行，第二列为出现的词频，可以看到，按照这种权重设计，得到的还是很多对本文特征表现不是很好的词。因为 出现一次的词的分布是负指数分布，所以相对来说，出现2词以上的词，能更清晰的反映文章的主旨，\r\n<pre>上证		1	0.19	0.28	0.69	 1 	 47 	5242	j\r\n中小		1	0.17	0.23	0.73	 1 	 47 	5242	j\r\n上证指数		1	0.12	0.12	0.96	 1 	 47 	5242	n\r\n要闻		1	0.12	0.12	1.00	 1 	 47 	5242	n\r\n纺织		4	0.10	0.11	0.95	 4 	 47 	5242	n\r\n棉花		4	0.09	0.04	2.07	 4 	 47 	5242	n\r\n事业		1	0.09	0.16	0.55	 1 	 47 	5242	n\r\n实业		1	0.08	0.12	0.67	 1 	 47 	5242	n\r\n对公		1	0.08	0.09	0.90	 1 	 47 	5242	n\r\n效益		1	0.08	0.09	0.86	 1 	 47 	5242	n\r\n关注度		1	0.07	0.08	0.92	 1 	 47 	5242	n\r\n全资		1	0.07	0.09	0.74	 1 	 47 	5242	n\r\n大众		1	0.07	0.11	0.66	 1 	 47 	5242	n\r\n个人		1	0.06	0.12	0.54	 1 	 47 	5242	n\r\n责任		1	0.06	0.08	0.74	 1 	 47 	5242	n\r\n收益率		1	0.06	0.12	0.47	 1 	 47 	5242	n\r\n集资		1	0.06	0.08	0.72	 1 	 47 	5242	n\r\n实施方案		1	0.05	0.06	0.81	 1 	 47 	5242	n\r\n织品		2	0.05	0.04	1.19	 2 	 47 	5242	n\r\n</pre>\r\n这里提出一个设想，就是 在同一个文章内出现的次数越多的单词，越能够体现文章的主题。但是又必须跟 词文量结合起来，避免出现多普遍出现多的单词。所以新的权重公式应该为：权重 = np.sin( 被引用文章数 / (0.1 * 总文章数) * np.pi ) * 自身相对词频 * np.exp(词频 * 0.5), 相比于之前的权重公式 区别仅在于 增加了np.exp(词频 * 0.5),希望出现次数少的单词权重系数低，而出现超过3次以上的单词，出现频率高，0.5的意义在于避免指数过于迅速的上升，为避免过度倾向于本文内出现频率高的词，np.exp(词频 * 0.5)的词频最大值设为9个，np.ext(4.5) = 90 这样有一些无意义的单词出现，词文量 权值小于 0.01，也可以被及时中和过滤掉,而不会因为指数权重过大导致成为权重排行成为词频 倒排。\r\n实测结果，刚刚相同的文章，得到的新的权重排行如下\r\n<pre>纺织		4	0.75	0.11	7.05	 4 	 47 	5242	n\r\n棉花		4	0.67	0.04	15.27	 4 	 47 	5242	n\r\n上证		1	0.32	0.28	1.13	 1 	 47 	5242	j\r\n中小		1	0.27	0.23	1.20	 1 	 47 	5242	j\r\n上证指数		1	0.20	0.12	1.58	 1 	 47 	5242	n\r\n同比		3	0.20	0.28	0.70	 3 	 47 	5242	n\r\n要闻		1	0.19	0.12	1.64	 1 	 47 	5242	n\r\n事业		1	0.14	0.16	0.91	 1 	 47 	5242	n\r\n实业		1	0.13	0.12	1.10	 1 	 47 	5242	n\r\n对公		1	0.13	0.09	1.48	 1 	 47 	5242	n\r\n</pre>\r\n可以看出来，棉花 纺织的排行上升，而 相对普遍中庸的词 上证中小则 排名下降，而 上证， 中小的 自我相对系数很高，所以维持在了相对高位，可以看出，这篇文章和 棉纺织的证券市场有关    <a title=\"纺织服装行业：周报\" href=\"http://data.eastmoney.com/report/20150321/hy,APPGLqEcmqiIIndustry.html\">纺织服装行业：周报</a>','基于tf_idf思想的文本特征词提取 实践','','inherit','open','open','','666-revision-v1','','','2017-04-14 06:30:30','2017-04-14 06:30:30','',666,'http://unasm.com/2017/04/671/',0,'revision','',0),(672,1,'2017-04-14 06:33:24','2017-04-14 06:33:24','tf_idf的假设是：<strong>一个词语在一篇文章中出现次数越多, 同时在所有文档中出现次数越少, 越能够代表该文章. </strong>\r\n\r\n因为想知道文章的主题，说的内容，查看他包含的名词就好，所以接下来我们就需要根据tf_idf的思想从文章包含的众多名词中，提取出能够表征其内容的几个名次。\r\n\r\ntf_idf 涉及到两个统计量，一个是词语在本文章中出现的次数，简称词频，一个是在所有文章里面出现的次数，以下简称词文量。\r\n<h4><strong>下面分别统计这两个统计量的分布特性</strong></h4>\r\n从某网站抓取文章5641度篇，作为我们分析的一个样本。\r\n\r\n查看其包含的词频分布，比如第一条数据，解释为 同花顺在一篇文章中出现3次，像这样的单词有18102个， 如果是绘图的话。可以很清晰的看出，类似于负指数分布曲线，随着出现次数增加骤降，几乎没有词语在同一篇文章中出现超过60词。\r\n<pre>3     18102\r\n4      8229\r\n5      4387\r\n6      2609\r\n7      1578\r\n8      1137\r\n9       822\r\n10      600\r\n11      433\r\n12      371</pre>\r\n如果对单个单词出现在所有的文章的这个数据的分布进行统计，则绝大多数单词的词文量，也就是出现在的文章数，为100多。把这些数据 导出到文件里面看的话，会发现，词文量大于200的，大部分都是一些表征性不是很强的单词，其实也很好理解，就是一个单词，几乎一半的文章都用它，那肯定是一个很常见普遍没什么表征性的单词,比如 “市场 ”，“行业”，“投资”，都是没有用的单词，但是如果看词文量为个位数的单词，很多都是一些分词错误的，比如，查看的数据里面，有前房,中用，大险 等，都是切词错误导致的。当然，也有表征性很强的一些单词，比如人名，盖茨，项俊波等等。\r\n<h4><strong>那提出一个问题，如何计算一个单词在文章之中的表征能力呢？</strong></h4>\r\n第一次的尝试是 使用 (<strong>表征值 = 词频 / 词文量</strong>) 然后通过对表征值排序，得到每篇文章里面的表征值top N,计算方式很简单，也符合 tf_idf的思想，第一眼看上去，感觉也不错，很多文章，通过这几个词语，就能猜到大概在描述什么。仔细分析数据，发现其实是有缺陷的，这种算法过于倾向 那种在使用频率极低的词语，比如 前房，它其实是“目前房地产市场” 分词错误导致的，在其他文字中出现频率极低，但是本文中出现一两次，就导致表征值很高，而相对通用的词，真正希望出现的词“房地产”，则因为在多达 几十篇文章中被用到，而权重很低。\r\n\r\n第二次的表征值时候，就倾向于 得到 词文量 为  0.05 * 总文章数 的单词，这样的单词被合理的引用到，并没有过度泛滥，也不太可能被是分词错误导致的，能够比较合理的反应文章主题，而引用次数超过0.1 * 总文章数的单词，则被视为泛滥，无表征意义而直接拒绝。这里使用一个 函数 <strong> np.sin( 被引用文章数 / (0.1 * 总文章数) * np.pi )</strong>, 这样的话，0.05 * 总文章数附近的单词能够得到相应大的权重，而相对更远的单词，得到的权重更小。\r\n\r\n考虑另一个变量，词频，我们还是希望能得到在文章出反复提及的词，可能比较合适的表征 文章的中心，但是又需要做到归一化，具体的方案为<strong> 自身相对词频 = 提及数 / （该单词被用到的平均值）</strong>，应该能够反映 该单词在文章内 使用的 频繁程度。\r\n\r\n两个系数相乘，则为该单词在此文章内的表征值，对表征值排序。提取top N\r\n\r\n就实测而言， 以这篇文章为例，进行分词分析  <a title=\"房地产行业周度报告：年末将至&amp;sbquo;市场观望情绪明显\" href=\"http://data.eastmoney.com/report/20161215/hy,APPH6bwe8JWBIndustry.html\">房地产行业周度报告：年末将至&amp;sbquo;市场观望情绪明显</a>\r\n<pre>房	0.01	0.91\r\n商品房	0.05	0.50\r\n场主	0.06	0.87\r\n均值	0.08	0.70\r\n大事	0.10	0.95\r\n对冲	0.03	0.81\r\n底价	0.04	0.88\r\n开发商	0.03	0.68\r\n总价	0.02	0.85\r\n成交量	0.11	1.94\r\n房地产	0.23	1.26\r\n房市	0.01	1.53\r\n房市场	0.01	0.79\r\n新政	0.07	0.68\r\n本周一	0.02	1.77\r\n</pre>\r\n按照上述算法得到的结果，其中房地产 的 两项指标 为0.23和1.26 ，均为结果的各项之首，作为一篇将房地产市场的文章，这样的分析结果是非常合理的，第二项为成交量，则可以看出 跟房地产的成交量有关，至于 词频得分很高的 本周一，则因为 词文量意向得分低 而总分低。\r\n\r\n不过 仔细检查结果而言，还是不够好，筛选出来的大量的词都是只在文章中出现一次，并不能很好的反映文章自身的特征，刚刚的权重得来的重要性排行，第二列为出现的词频，可以看到，按照这种权重设计，得到的还是很多对本文特征表现不是很好的词。因为 出现一次的词的分布是负指数分布，所以相对来说，出现2词以上的词，能更清晰的反映文章的主旨，\r\n<pre>上证		1	0.19	0.28	0.69	 1 	 47 	5242	j\r\n中小		1	0.17	0.23	0.73	 1 	 47 	5242	j\r\n上证指数		1	0.12	0.12	0.96	 1 	 47 	5242	n\r\n要闻		1	0.12	0.12	1.00	 1 	 47 	5242	n\r\n纺织		4	0.10	0.11	0.95	 4 	 47 	5242	n\r\n棉花		4	0.09	0.04	2.07	 4 	 47 	5242	n\r\n事业		1	0.09	0.16	0.55	 1 	 47 	5242	n\r\n实业		1	0.08	0.12	0.67	 1 	 47 	5242	n\r\n对公		1	0.08	0.09	0.90	 1 	 47 	5242	n\r\n效益		1	0.08	0.09	0.86	 1 	 47 	5242	n\r\n关注度		1	0.07	0.08	0.92	 1 	 47 	5242	n\r\n全资		1	0.07	0.09	0.74	 1 	 47 	5242	n\r\n大众		1	0.07	0.11	0.66	 1 	 47 	5242	n\r\n个人		1	0.06	0.12	0.54	 1 	 47 	5242	n\r\n责任		1	0.06	0.08	0.74	 1 	 47 	5242	n\r\n收益率		1	0.06	0.12	0.47	 1 	 47 	5242	n\r\n集资		1	0.06	0.08	0.72	 1 	 47 	5242	n\r\n实施方案		1	0.05	0.06	0.81	 1 	 47 	5242	n\r\n织品		2	0.05	0.04	1.19	 2 	 47 	5242	n\r\n</pre>\r\n这里提出一个设想，就是 在同一个文章内出现的次数越多的单词，越能够体现文章的主题。但是又必须跟 词文量结合起来，避免出现多普遍出现多的单词。所以新的权重公式应该为：<strong>权重 = np.sin( 被引用文章数 / (0.1 * 总文章数) * np.pi ) * 自身相对词频 * np.exp(词频 * 0.5)</strong>, 相比于之前的权重公式 区别仅在于 增加了np.exp(词频 * 0.5),希望出现次数少的单词权重系数低，而出现超过3次以上的单词，出现频率高，0.5的意义在于避免指数过于迅速的上升，为避免过度倾向于本文内出现频率高的词，np.exp(词频 * 0.5)的词频最大值设为9个，np.ext(4.5) = 90 这样有一些无意义的单词出现，词文量 权值小于 0.01，也可以被及时中和过滤掉,而不会因为指数权重过大导致成为权重排行成为词频 倒排。\r\n实测结果，刚刚相同的文章，得到的新的权重排行如下\r\n<pre>纺织		4	0.75	0.11	7.05	 4 	 47 	5242	n\r\n棉花		4	0.67	0.04	15.27	 4 	 47 	5242	n\r\n上证		1	0.32	0.28	1.13	 1 	 47 	5242	j\r\n中小		1	0.27	0.23	1.20	 1 	 47 	5242	j\r\n上证指数		1	0.20	0.12	1.58	 1 	 47 	5242	n\r\n同比		3	0.20	0.28	0.70	 3 	 47 	5242	n\r\n要闻		1	0.19	0.12	1.64	 1 	 47 	5242	n\r\n事业		1	0.14	0.16	0.91	 1 	 47 	5242	n\r\n实业		1	0.13	0.12	1.10	 1 	 47 	5242	n\r\n对公		1	0.13	0.09	1.48	 1 	 47 	5242	n\r\n</pre>\r\n可以看出来，棉花 纺织的排行上升，而 相对普遍中庸的词 上证中小则 排名下降，而 上证， 中小的 自我相对系数很高，所以维持在了相对高位，可以看出，这篇文章和 棉纺织的证券市场有关    <a title=\"纺织服装行业：周报\" href=\"http://data.eastmoney.com/report/20150321/hy,APPGLqEcmqiIIndustry.html\">纺织服装行业：周报</a>','基于tf_idf思想的文本特征词提取 实践','','inherit','open','open','','666-revision-v1','','','2017-04-14 06:33:24','2017-04-14 06:33:24','',666,'http://unasm.com/2017/04/672/',0,'revision','',0);
/*!40000 ALTER TABLE `wp_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_relationships`
--

DROP TABLE IF EXISTS `wp_term_relationships`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_relationships`
--

LOCK TABLES `wp_term_relationships` WRITE;
/*!40000 ALTER TABLE `wp_term_relationships` DISABLE KEYS */;
INSERT INTO `wp_term_relationships` VALUES (1,1,0),(4,1,0),(4,3,0),(8,1,0),(8,4,0),(10,2,0),(14,1,0),(74,9,0),(19,5,0),(22,1,0),(24,1,0),(26,1,0),(28,1,0),(32,2,0),(37,7,0),(50,8,0),(39,2,0),(52,9,0),(55,10,0),(57,10,0),(60,11,0),(62,10,0),(64,2,0),(67,9,0),(69,2,0),(71,9,0),(76,1,0),(80,1,0),(85,8,0),(81,8,0),(93,7,0),(90,9,0),(96,12,0),(101,10,0),(105,1,0),(106,1,0),(110,10,0),(115,10,0),(119,11,0),(123,9,0),(121,9,0),(127,11,0),(142,9,0),(130,9,0),(132,2,0),(146,9,0),(186,1,0),(161,1,0),(164,1,0),(168,1,0),(170,1,0),(173,9,0),(175,2,0),(177,2,0),(189,12,0),(207,9,0),(195,9,0),(205,2,0),(231,10,0),(213,11,0),(216,9,0),(225,14,0),(228,2,0),(235,6,0),(243,6,0),(240,2,0),(245,6,0),(312,9,0),(253,15,0),(389,1,0),(264,15,0),(288,1,0),(272,15,0),(296,1,0),(266,15,0),(298,15,0),(318,1,0),(315,11,0),(320,1,0),(335,1,0),(354,1,0),(361,11,0),(303,15,0),(363,11,0),(394,1,0),(405,11,0),(409,15,0),(418,10,0),(412,2,0),(335,10,0),(464,1,0),(452,10,0),(464,10,0),(354,10,0),(512,1,0),(489,6,0),(495,10,0),(495,15,0),(512,10,0),(526,1,0),(526,10,0),(619,1,0),(552,1,0),(555,1,0),(558,11,0),(562,11,0),(565,2,0),(567,11,0),(572,11,0),(579,9,0),(651,11,0),(620,5,0),(623,11,0),(642,11,0),(644,11,0),(647,11,0),(658,15,0),(654,11,0),(666,16,0),(661,5,0),(664,11,0);
/*!40000 ALTER TABLE `wp_term_relationships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_taxonomy`
--

DROP TABLE IF EXISTS `wp_term_taxonomy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) NOT NULL DEFAULT '',
  `description` longtext NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=MyISAM AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_taxonomy`
--

LOCK TABLES `wp_term_taxonomy` WRITE;
/*!40000 ALTER TABLE `wp_term_taxonomy` DISABLE KEYS */;
INSERT INTO `wp_term_taxonomy` VALUES (1,1,'category','',0,26),(2,2,'category','',0,13),(3,3,'post_format','',0,1),(4,4,'post_format','',0,1),(5,5,'category','',0,3),(6,6,'category','',0,4),(7,7,'category','',0,2),(8,8,'category','',0,3),(9,9,'category','',0,16),(10,10,'category','',0,15),(11,11,'category','',0,16),(12,12,'category','',0,2),(14,14,'category','',0,1),(15,15,'category','',0,9),(16,16,'category','',0,1);
/*!40000 ALTER TABLE `wp_term_taxonomy` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_terms`
--

DROP TABLE IF EXISTS `wp_terms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL DEFAULT '',
  `slug` varchar(200) NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_id`),
  UNIQUE KEY `slug` (`slug`),
  KEY `name` (`name`)
) ENGINE=MyISAM AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_terms`
--

LOCK TABLES `wp_terms` WRITE;
/*!40000 ALTER TABLE `wp_terms` DISABLE KEYS */;
INSERT INTO `wp_terms` VALUES (1,'redis','redis',0),(2,'mysql','mysql',0),(3,'post-format-aside','post-format-aside',0),(4,'post-format-image','post-format-image',0),(5,'shell','shell',0),(6,'algorithm','algorithm',0),(7,'模式设计','structure',0),(8,'vim','vim',0),(9,'php','php',0),(10,'c','c',0),(11,'杂谈','%e6%9d%82%e8%b0%88',0),(12,'javascript','javascript',0),(14,'nginx','nginx',0),(15,'go','go',0),(16,'机器学习','%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0',0);
/*!40000 ALTER TABLE `wp_terms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_usermeta`
--

DROP TABLE IF EXISTS `wp_usermeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=MyISAM AUTO_INCREMENT=30 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_usermeta`
--

LOCK TABLES `wp_usermeta` WRITE;
/*!40000 ALTER TABLE `wp_usermeta` DISABLE KEYS */;
INSERT INTO `wp_usermeta` VALUES (1,1,'nickname','unasm'),(2,1,'first_name',''),(3,1,'last_name',''),(4,1,'description',''),(5,1,'rich_editing','true'),(6,1,'comment_shortcuts','false'),(7,1,'admin_color','fresh'),(8,1,'use_ssl','0'),(9,1,'show_admin_bar_front','true'),(10,1,'wp_capabilities','a:1:{s:13:\"administrator\";b:1;}'),(11,1,'wp_user_level','10'),(12,1,'dismissed_wp_pointers','wp350_media,wp360_revisions,wp360_locks,wp390_widgets'),(13,1,'show_welcome_panel','1'),(29,1,'session_tokens','a:1:{s:64:\"c55b28cc2087c0ac90e3e38c5ae7a24d43867e73bb0687bc1886312f8f0a4399\";i:1492308244;}'),(15,1,'wp_dashboard_quick_press_last_post_id','663'),(16,1,'wp_user-settings','editor=html&dfw_width=647&libraryContent=upload&hidetb=1&mfold=o&posts_list_mode=list'),(17,1,'wp_user-settings-time','1492151600'),(18,1,'closedpostboxes_dashboard','a:0:{}'),(19,1,'metaboxhidden_dashboard','a:0:{}'),(24,1,'closedpostboxes_post','a:4:{i:0;s:16:\"tagsdiv-post_tag\";i:1;s:15:\"mh_post_details\";i:2;s:12:\"revisionsdiv\";i:3;s:11:\"commentsdiv\";}'),(25,1,'metaboxhidden_post','a:6:{i:0;s:11:\"postexcerpt\";i:1;s:13:\"trackbacksdiv\";i:2;s:10:\"postcustom\";i:3;s:16:\"commentstatusdiv\";i:4;s:7:\"slugdiv\";i:5;s:9:\"authordiv\";}'),(22,1,'closedpostboxes_page','a:0:{}'),(23,1,'metaboxhidden_page','a:5:{i:0;s:10:\"postcustom\";i:1;s:16:\"commentstatusdiv\";i:2;s:11:\"commentsdiv\";i:3;s:7:\"slugdiv\";i:4;s:9:\"authordiv\";}');
/*!40000 ALTER TABLE `wp_usermeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_users`
--

DROP TABLE IF EXISTS `wp_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) NOT NULL DEFAULT '',
  `user_pass` varchar(64) NOT NULL DEFAULT '',
  `user_nicename` varchar(50) NOT NULL DEFAULT '',
  `user_email` varchar(100) NOT NULL DEFAULT '',
  `user_url` varchar(100) NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(60) NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`)
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_users`
--

LOCK TABLES `wp_users` WRITE;
/*!40000 ALTER TABLE `wp_users` DISABLE KEYS */;
INSERT INTO `wp_users` VALUES (1,'unasm','$P$BLImuxrAYQOEy49lbGYsFuOj2Ns1Qd.','unasm','unasm@sina.cn','','2014-09-23 16:07:29','',0,'unasm');
/*!40000 ALTER TABLE `wp_users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-04-30  0:03:52
